
6.FreeRTOS_STM32F407VG_RTC_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000068ac  08013288  08013288  00023288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019b34  08019b34  00030380  2**0
                  CONTENTS
  4 .ARM          00000008  08019b34  08019b34  00029b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019b3c  08019b3c  00030380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019b3c  08019b3c  00029b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019b40  08019b40  00029b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  08019b44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030380  2**0
                  CONTENTS
 10 .bss          0000eb78  20000380  20000380  00030380  2**2
                  ALLOC
 11 ._user_heap_stack 00001100  2000eef8  2000eef8  00030380  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034b4f  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006da3  00000000  00000000  00064eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023d8  00000000  00000000  0006bca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020f8  00000000  00000000  0006e080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029af4  00000000  00000000  00070178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030447  00000000  00000000  00099c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec17f  00000000  00000000  000ca0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b6232  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a6c8  00000000  00000000  001b6288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000380 	.word	0x20000380
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013270 	.word	0x08013270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000384 	.word	0x20000384
 80001cc:	08013270 	.word	0x08013270

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <TP_Read>:
#include "stm32f4xx_hal.h"


//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8000ee6:	2310      	movs	r3, #16
 8000ee8:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8000eee:	e019      	b.n	8000f24 <TP_Read+0x44>
    {
        value <<= 1;
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <TP_Read+0x54>)
 8000efc:	f004 fa1a 	bl	8005334 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <TP_Read+0x54>)
 8000f06:	f004 fa15 	bl	8005334 <HAL_GPIO_WritePin>

        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <TP_Read+0x58>)
 8000f0e:	f004 f9f9 	bl	8005304 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <TP_Read+0x3e>
        {
            value++;
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1e2      	bne.n	8000ef0 <TP_Read+0x10>
    };

    return value;
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40021000 	.word	0x40021000

08000f3c <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8000f46:	2308      	movs	r3, #8
 8000f48:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <TP_Write+0x68>)
 8000f50:	f004 f9f0 	bl	8005334 <HAL_GPIO_WritePin>

    while(i > 0)
 8000f54:	e01e      	b.n	8000f94 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da05      	bge.n	8000f6a <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2104      	movs	r1, #4
 8000f62:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <TP_Write+0x6c>)
 8000f64:	f004 f9e6 	bl	8005334 <HAL_GPIO_WritePin>
 8000f68:	e004      	b.n	8000f74 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <TP_Write+0x6c>)
 8000f70:	f004 f9e0 	bl	8005334 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <TP_Write+0x68>)
 8000f80:	f004 f9d8 	bl	8005334 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <TP_Write+0x68>)
 8000f8a:	f004 f9d3 	bl	8005334 <HAL_GPIO_WritePin>
        i--;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1dd      	bne.n	8000f56 <TP_Write+0x1a>
    };
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	00000000 	.word	0x00000000

08000fb0 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b08b      	sub	sp, #44	; 0x2c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	4862      	ldr	r0, [pc, #392]	; (8001148 <TP_Read_Coordinates+0x198>)
 8000fbe:	f004 f9b9 	bl	8005334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4861      	ldr	r0, [pc, #388]	; (800114c <TP_Read_Coordinates+0x19c>)
 8000fc8:	f004 f9b4 	bl	8005334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd2:	485d      	ldr	r0, [pc, #372]	; (8001148 <TP_Read_Coordinates+0x198>)
 8000fd4:	f004 f9ae 	bl	8005334 <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
	uint16_t rawx = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	81fb      	strh	r3, [r7, #14]
	uint16_t rawy = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	81bb      	strh	r3, [r7, #12]
	uint32_t calculating_x =0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
	uint32_t calculating_y = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]

    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8000ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff4:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001000:	4851      	ldr	r0, [pc, #324]	; (8001148 <TP_Read_Coordinates+0x198>)
 8001002:	f004 f997 	bl	8005334 <HAL_GPIO_WritePin>


    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001006:	e023      	b.n	8001050 <TP_Read_Coordinates+0xa0>
    {
        TP_Write(CMD_RDY);
 8001008:	2090      	movs	r0, #144	; 0x90
 800100a:	f7ff ff97 	bl	8000f3c <TP_Write>

		rawy = TP_Read();
 800100e:	f7ff ff67 	bl	8000ee0 <TP_Read>
 8001012:	4603      	mov	r3, r0
 8001014:	81bb      	strh	r3, [r7, #12]
		avg_y += rawy;
 8001016:	89bb      	ldrh	r3, [r7, #12]
 8001018:	6a3a      	ldr	r2, [r7, #32]
 800101a:	4413      	add	r3, r2
 800101c:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 800101e:	89bb      	ldrh	r3, [r7, #12]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4413      	add	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]


        TP_Write(CMD_RDX);
 8001026:	20d0      	movs	r0, #208	; 0xd0
 8001028:	f7ff ff88 	bl	8000f3c <TP_Write>
        rawx = TP_Read();
 800102c:	f7ff ff58 	bl	8000ee0 <TP_Read>
 8001030:	4603      	mov	r3, r0
 8001032:	81fb      	strh	r3, [r7, #14]
		avg_x += rawx;
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001038:	4413      	add	r3, r2
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 800103c:	89fb      	ldrh	r3, [r7, #14]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	4413      	add	r3, r2
 8001042:	61fb      	str	r3, [r7, #28]
        samples--;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3b01      	subs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
		counted_samples++;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <TP_Read_Coordinates+0xb6>
 8001056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105a:	483d      	ldr	r0, [pc, #244]	; (8001150 <TP_Read_Coordinates+0x1a0>)
 800105c:	f004 f952 	bl	8005304 <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0d0      	beq.n	8001008 <TP_Read_Coordinates+0x58>
    };

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106c:	4836      	ldr	r0, [pc, #216]	; (8001148 <TP_Read_Coordinates+0x198>)
 800106e:	f004 f961 	bl	8005334 <HAL_GPIO_WritePin>


		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001078:	d154      	bne.n	8001124 <TP_Read_Coordinates+0x174>
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	4834      	ldr	r0, [pc, #208]	; (8001150 <TP_Read_Coordinates+0x1a0>)
 8001080:	f004 f940 	bl	8005304 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d14c      	bne.n	8001124 <TP_Read_Coordinates+0x174>
		{

		calculating_x /= counted_samples;
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fbb2 f3f3 	udiv	r3, r2, r3
 800109c:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	81fb      	strh	r3, [r7, #14]
		rawy = calculating_y;
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	81bb      	strh	r3, [r7, #12]

		rawx *= -1;
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	425b      	negs	r3, r3
 80010aa:	81fb      	strh	r3, [r7, #14]
		rawy *= -1;
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	425b      	negs	r3, r3
 80010b0:	81bb      	strh	r3, [r7, #12]

		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
        Coordinates[1] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 80010b2:	89fa      	ldrh	r2, [r7, #14]
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <TP_Read_Coordinates+0x1a4>)
 80010b6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	0852      	lsrs	r2, r2, #1
 80010be:	4413      	add	r3, r2
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa2b 	bl	8000524 <__aeabi_i2d>
 80010ce:	a31c      	add	r3, pc, #112	; (adr r3, 8001140 <TP_Read_Coordinates+0x190>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fa90 	bl	80005f8 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1c9c      	adds	r4, r3, #2
 80010e4:	f7ff fd60 	bl	8000ba8 <__aeabi_d2uiz>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	8023      	strh	r3, [r4, #0]
		Coordinates[0] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 80010ee:	89bb      	ldrh	r3, [r7, #12]
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <TP_Read_Coordinates+0x1a8>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	09db      	lsrs	r3, r3, #7
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	3b0f      	subs	r3, #15
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa11 	bl	8000524 <__aeabi_i2d>
 8001102:	a30f      	add	r3, pc, #60	; (adr r3, 8001140 <TP_Read_Coordinates+0x190>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fa76 	bl	80005f8 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fd48 	bl	8000ba8 <__aeabi_d2uiz>
 8001118:	4603      	mov	r3, r0
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 8001120:	2301      	movs	r3, #1
 8001122:	e007      	b.n	8001134 <TP_Read_Coordinates+0x184>
		}
		else
		{
			Coordinates[0] = 0;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3302      	adds	r3, #2
 800112e:	2200      	movs	r2, #0
 8001130:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8001132:	2300      	movs	r3, #0
		}
}
 8001134:	4618      	mov	r0, r3
 8001136:	372c      	adds	r7, #44	; 0x2c
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	f3af 8000 	nop.w
 8001140:	28f5c28f 	.word	0x28f5c28f
 8001144:	3ff28f5c 	.word	0x3ff28f5c
 8001148:	40020400 	.word	0x40020400
 800114c:	40021000 	.word	0x40021000
 8001150:	40020800 	.word	0x40020800
 8001154:	e01e01e1 	.word	0xe01e01e1
 8001158:	a0a0a0a1 	.word	0xa0a0a0a1

0800115c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <TP_Touchpad_Pressed+0x20>)
 8001166:	f004 f8cd 	bl	8005304 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <TP_Touchpad_Pressed+0x18>
	{
		return TOUCHPAD_PRESSED;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <TP_Touchpad_Pressed+0x1a>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001174:	2300      	movs	r3, #0
	}
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020800 	.word	0x40020800

08001180 <TFT9341_FontsIni>:

static void TFT9341_WriteData(uint8_t* buff, size_t buff_size);

// ---------------------------------------------------------------------------------
void TFT9341_FontsIni(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  Font8.Height = 8;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <TFT9341_FontsIni+0x60>)
 8001186:	2208      	movs	r2, #8
 8001188:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <TFT9341_FontsIni+0x60>)
 800118c:	2205      	movs	r2, #5
 800118e:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <TFT9341_FontsIni+0x64>)
 8001192:	220c      	movs	r2, #12
 8001194:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <TFT9341_FontsIni+0x64>)
 8001198:	2207      	movs	r2, #7
 800119a:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <TFT9341_FontsIni+0x68>)
 800119e:	2210      	movs	r2, #16
 80011a0:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <TFT9341_FontsIni+0x68>)
 80011a4:	220b      	movs	r2, #11
 80011a6:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <TFT9341_FontsIni+0x6c>)
 80011aa:	2214      	movs	r2, #20
 80011ac:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <TFT9341_FontsIni+0x6c>)
 80011b0:	220e      	movs	r2, #14
 80011b2:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <TFT9341_FontsIni+0x70>)
 80011b6:	2218      	movs	r2, #24
 80011b8:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <TFT9341_FontsIni+0x70>)
 80011bc:	2211      	movs	r2, #17
 80011be:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT9341_BLACK;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT9341_GREEN;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011c8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011cc:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <TFT9341_FontsIni+0x68>)
 80011d2:	605a      	str	r2, [r3, #4]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000020 	.word	0x20000020
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000010 	.word	0x20000010
 80011f0:	20000018 	.word	0x20000018
 80011f4:	20007624 	.word	0x20007624

080011f8 <TFT9341_SendData>:
// ---------------------------------------------------------------------------------
void TFT9341_SendData(uint8_t dt)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	DC_DATA();
 8001202:	2201      	movs	r2, #1
 8001204:	2140      	movs	r1, #64	; 0x40
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <TFT9341_SendData+0x2c>)
 8001208:	f004 f894 	bl	8005334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi2, &dt, 1, 5000);
 800120c:	1df9      	adds	r1, r7, #7
 800120e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001212:	2201      	movs	r2, #1
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <TFT9341_SendData+0x30>)
 8001216:	f006 ff46 	bl	80080a6 <HAL_SPI_Transmit>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	200076d4 	.word	0x200076d4

0800122c <TFT9341_SendCommand>:
// ---------------------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <TFT9341_SendCommand+0x2c>)
 800123c:	f004 f87a 	bl	8005334 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi2, &cmd, 1, 5000);
 8001240:	1df9      	adds	r1, r7, #7
 8001242:	f241 3388 	movw	r3, #5000	; 0x1388
 8001246:	2201      	movs	r2, #1
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <TFT9341_SendCommand+0x30>)
 800124a:	f006 ff2c 	bl	80080a6 <HAL_SPI_Transmit>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	200076d4 	.word	0x200076d4

08001260 <TFT9341_reset>:
// ---------------------------------------------------------------------------------
void TFT9341_reset(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8001264:	2200      	movs	r2, #0
 8001266:	2120      	movs	r1, #32
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <TFT9341_reset+0x24>)
 800126a:	f004 f863 	bl	8005334 <HAL_GPIO_WritePin>
	osDelay(5);
 800126e:	2005      	movs	r0, #5
 8001270:	f00b f96c 	bl	800c54c <osDelay>
	RESET_IDLE();
 8001274:	2201      	movs	r2, #1
 8001276:	2120      	movs	r1, #32
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TFT9341_reset+0x24>)
 800127a:	f004 f85b 	bl	8005334 <HAL_GPIO_WritePin>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <TFT9341_ini>:
// ---------------------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	4613      	mov	r3, r2
 8001296:	80bb      	strh	r3, [r7, #4]
  uint8_t data[15];
  CS_ACTIVE();
 8001298:	2200      	movs	r2, #0
 800129a:	2110      	movs	r1, #16
 800129c:	48a3      	ldr	r0, [pc, #652]	; (800152c <TFT9341_ini+0x2a4>)
 800129e:	f004 f849 	bl	8005334 <HAL_GPIO_WritePin>
  TFT9341_reset();
 80012a2:	f7ff ffdd 	bl	8001260 <TFT9341_reset>

  //Software Reset
  TFT9341_SendCommand(0x01);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff ffc0 	bl	800122c <TFT9341_SendCommand>
  osDelay(1000);
 80012ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b0:	f00b f94c 	bl	800c54c <osDelay>

  //Power Control A
    data[0] = 0x39;
 80012b4:	2339      	movs	r3, #57	; 0x39
 80012b6:	723b      	strb	r3, [r7, #8]
    data[1] = 0x2C;
 80012b8:	232c      	movs	r3, #44	; 0x2c
 80012ba:	727b      	strb	r3, [r7, #9]
    data[2] = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x34;
 80012c0:	2334      	movs	r3, #52	; 0x34
 80012c2:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x02;
 80012c4:	2302      	movs	r3, #2
 80012c6:	733b      	strb	r3, [r7, #12]
    TFT9341_SendCommand(0xCB);
 80012c8:	20cb      	movs	r0, #203	; 0xcb
 80012ca:	f7ff ffaf 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 5);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2105      	movs	r1, #5
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f92f 	bl	8001538 <TFT9341_WriteData>
    //Power Control B
    data[0] = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	723b      	strb	r3, [r7, #8]
    data[1] = 0xC1;
 80012de:	23c1      	movs	r3, #193	; 0xc1
 80012e0:	727b      	strb	r3, [r7, #9]
    data[2] = 0x30;
 80012e2:	2330      	movs	r3, #48	; 0x30
 80012e4:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xCF);
 80012e6:	20cf      	movs	r0, #207	; 0xcf
 80012e8:	f7ff ffa0 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2103      	movs	r1, #3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f920 	bl	8001538 <TFT9341_WriteData>
    //Driver timing control A
    data[0] = 0x85;
 80012f8:	2385      	movs	r3, #133	; 0x85
 80012fa:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	727b      	strb	r3, [r7, #9]
    data[2] = 0x78;
 8001300:	2378      	movs	r3, #120	; 0x78
 8001302:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xE8);
 8001304:	20e8      	movs	r0, #232	; 0xe8
 8001306:	f7ff ff91 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	2103      	movs	r1, #3
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f911 	bl	8001538 <TFT9341_WriteData>
    //Driver timing control B
    data[0] = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 800131a:	2300      	movs	r3, #0
 800131c:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xEA);
 800131e:	20ea      	movs	r0, #234	; 0xea
 8001320:	f7ff ff84 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f904 	bl	8001538 <TFT9341_WriteData>
    //Power on Sequence control
    data[0] = 0x64;
 8001330:	2364      	movs	r3, #100	; 0x64
 8001332:	723b      	strb	r3, [r7, #8]
    data[1] = 0x03;
 8001334:	2303      	movs	r3, #3
 8001336:	727b      	strb	r3, [r7, #9]
    data[2] = 0x12;
 8001338:	2312      	movs	r3, #18
 800133a:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x81;
 800133c:	2381      	movs	r3, #129	; 0x81
 800133e:	72fb      	strb	r3, [r7, #11]
    TFT9341_SendCommand(0xED);
 8001340:	20ed      	movs	r0, #237	; 0xed
 8001342:	f7ff ff73 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 4);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2104      	movs	r1, #4
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f8f3 	bl	8001538 <TFT9341_WriteData>
    //Pump ratio control
    data[0] = 0x20;
 8001352:	2320      	movs	r3, #32
 8001354:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF7);
 8001356:	20f7      	movs	r0, #247	; 0xf7
 8001358:	f7ff ff68 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f8e8 	bl	8001538 <TFT9341_WriteData>
    //Power Control,VRH[5:0]
    data[0] = 0x10;
 8001368:	2310      	movs	r3, #16
 800136a:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC0);
 800136c:	20c0      	movs	r0, #192	; 0xc0
 800136e:	f7ff ff5d 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f8dd 	bl	8001538 <TFT9341_WriteData>
    //Power Control,SAP[2:0];BT[3:0]
    data[0] = 0x10;
 800137e:	2310      	movs	r3, #16
 8001380:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC1);
 8001382:	20c1      	movs	r0, #193	; 0xc1
 8001384:	f7ff ff52 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	2101      	movs	r1, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f8d2 	bl	8001538 <TFT9341_WriteData>
    //VCOM Control 1
    data[0] = 0x3E;
 8001394:	233e      	movs	r3, #62	; 0x3e
 8001396:	723b      	strb	r3, [r7, #8]
    data[1] = 0x28;
 8001398:	2328      	movs	r3, #40	; 0x28
 800139a:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xC5);
 800139c:	20c5      	movs	r0, #197	; 0xc5
 800139e:	f7ff ff45 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2102      	movs	r1, #2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f8c5 	bl	8001538 <TFT9341_WriteData>
    //VCOM Control 2
    data[0] = 0x86;
 80013ae:	2386      	movs	r3, #134	; 0x86
 80013b0:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC7);
 80013b2:	20c7      	movs	r0, #199	; 0xc7
 80013b4:	f7ff ff3a 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f8ba 	bl	8001538 <TFT9341_WriteData>
    //Memory Acsess Control
    data[0] = 0x48;
 80013c4:	2348      	movs	r3, #72	; 0x48
 80013c6:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x36);
 80013c8:	2036      	movs	r0, #54	; 0x36
 80013ca:	f7ff ff2f 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f8af 	bl	8001538 <TFT9341_WriteData>
    //Pixel Format Set
    data[0] = 0x55;//16bit
 80013da:	2355      	movs	r3, #85	; 0x55
 80013dc:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x3A);
 80013de:	203a      	movs	r0, #58	; 0x3a
 80013e0:	f7ff ff24 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2101      	movs	r1, #1
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f8a4 	bl	8001538 <TFT9341_WriteData>
    //Frame Rratio Control, Standard RGB Color
    data[0] = 0x00;
 80013f0:	2300      	movs	r3, #0
 80013f2:	723b      	strb	r3, [r7, #8]
    data[1] = 0x18;
 80013f4:	2318      	movs	r3, #24
 80013f6:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xB1);
 80013f8:	20b1      	movs	r0, #177	; 0xb1
 80013fa:	f7ff ff17 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	2102      	movs	r1, #2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f897 	bl	8001538 <TFT9341_WriteData>
    //Display Function Control
    data[0] = 0x08;
 800140a:	2308      	movs	r3, #8
 800140c:	723b      	strb	r3, [r7, #8]
    data[1] = 0x82;
 800140e:	2382      	movs	r3, #130	; 0x82
 8001410:	727b      	strb	r3, [r7, #9]
    data[2] = 0x27;//320 строк
 8001412:	2327      	movs	r3, #39	; 0x27
 8001414:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xB6);
 8001416:	20b6      	movs	r0, #182	; 0xb6
 8001418:	f7ff ff08 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	2103      	movs	r1, #3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f888 	bl	8001538 <TFT9341_WriteData>
    //Enable 3G (пока не знаю что это за режим)
    data[0] = 0x00;//не включаем
 8001428:	2300      	movs	r3, #0
 800142a:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF2);
 800142c:	20f2      	movs	r0, #242	; 0xf2
 800142e:	f7ff fefd 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2101      	movs	r1, #1
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f87d 	bl	8001538 <TFT9341_WriteData>
    //Gamma set
    data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 800143e:	2301      	movs	r3, #1
 8001440:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x26);
 8001442:	2026      	movs	r0, #38	; 0x26
 8001444:	f7ff fef2 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f872 	bl	8001538 <TFT9341_WriteData>
    //Positive Gamma  Correction
    data[0] = 0x0F;
 8001454:	230f      	movs	r3, #15
 8001456:	723b      	strb	r3, [r7, #8]
    data[1] = 0x31;
 8001458:	2331      	movs	r3, #49	; 0x31
 800145a:	727b      	strb	r3, [r7, #9]
    data[2] = 0x2B;
 800145c:	232b      	movs	r3, #43	; 0x2b
 800145e:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x0C;
 8001460:	230c      	movs	r3, #12
 8001462:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x0E;
 8001464:	230e      	movs	r3, #14
 8001466:	733b      	strb	r3, [r7, #12]
    data[5] = 0x08;
 8001468:	2308      	movs	r3, #8
 800146a:	737b      	strb	r3, [r7, #13]
    data[6] = 0x4E;
 800146c:	234e      	movs	r3, #78	; 0x4e
 800146e:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xF1;
 8001470:	23f1      	movs	r3, #241	; 0xf1
 8001472:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x37;
 8001474:	2337      	movs	r3, #55	; 0x37
 8001476:	743b      	strb	r3, [r7, #16]
    data[9] = 0x07;
 8001478:	2307      	movs	r3, #7
 800147a:	747b      	strb	r3, [r7, #17]
    data[10] = 0x10;
 800147c:	2310      	movs	r3, #16
 800147e:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x03;
 8001480:	2303      	movs	r3, #3
 8001482:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x0E;
 8001484:	230e      	movs	r3, #14
 8001486:	753b      	strb	r3, [r7, #20]
    data[13] = 0x09;
 8001488:	2309      	movs	r3, #9
 800148a:	757b      	strb	r3, [r7, #21]
    data[14] = 0x00;
 800148c:	2300      	movs	r3, #0
 800148e:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE0);
 8001490:	20e0      	movs	r0, #224	; 0xe0
 8001492:	f7ff fecb 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	210f      	movs	r1, #15
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f84b 	bl	8001538 <TFT9341_WriteData>
    //Negative Gamma  Correction
    data[0] = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	723b      	strb	r3, [r7, #8]
    data[1] = 0x0E;
 80014a6:	230e      	movs	r3, #14
 80014a8:	727b      	strb	r3, [r7, #9]
    data[2] = 0x14;
 80014aa:	2314      	movs	r3, #20
 80014ac:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x03;
 80014ae:	2303      	movs	r3, #3
 80014b0:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x11;
 80014b2:	2311      	movs	r3, #17
 80014b4:	733b      	strb	r3, [r7, #12]
    data[5] = 0x07;
 80014b6:	2307      	movs	r3, #7
 80014b8:	737b      	strb	r3, [r7, #13]
    data[6] = 0x31;
 80014ba:	2331      	movs	r3, #49	; 0x31
 80014bc:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xC1;
 80014be:	23c1      	movs	r3, #193	; 0xc1
 80014c0:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x48;
 80014c2:	2348      	movs	r3, #72	; 0x48
 80014c4:	743b      	strb	r3, [r7, #16]
    data[9] = 0x08;
 80014c6:	2308      	movs	r3, #8
 80014c8:	747b      	strb	r3, [r7, #17]
    data[10] = 0x0F;
 80014ca:	230f      	movs	r3, #15
 80014cc:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x0C;
 80014ce:	230c      	movs	r3, #12
 80014d0:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x31;
 80014d2:	2331      	movs	r3, #49	; 0x31
 80014d4:	753b      	strb	r3, [r7, #20]
    data[13] = 0x36;
 80014d6:	2336      	movs	r3, #54	; 0x36
 80014d8:	757b      	strb	r3, [r7, #21]
    data[14] = 0x0F;
 80014da:	230f      	movs	r3, #15
 80014dc:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE1);
 80014de:	20e1      	movs	r0, #225	; 0xe1
 80014e0:	f7ff fea4 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	210f      	movs	r1, #15
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f824 	bl	8001538 <TFT9341_WriteData>
    TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 80014f0:	2011      	movs	r0, #17
 80014f2:	f7ff fe9b 	bl	800122c <TFT9341_SendCommand>

    osDelay(120);
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f00b f828 	bl	800c54c <osDelay>

    //Display ON
    data[0] = TFT9341_ROTATION;
 80014fc:	2348      	movs	r3, #72	; 0x48
 80014fe:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x29);
 8001500:	2029      	movs	r0, #41	; 0x29
 8001502:	f7ff fe93 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f000 f813 	bl	8001538 <TFT9341_WriteData>

    TFT9341_WIDTH = w_size;
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <TFT9341_ini+0x2a8>)
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	8013      	strh	r3, [r2, #0]
    TFT9341_HEIGHT = h_size;
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <TFT9341_ini+0x2ac>)
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	8013      	strh	r3, [r2, #0]

    TFT9341_FontsIni();
 800151e:	f7ff fe2f 	bl	8001180 <TFT9341_FontsIni>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	20007622 	.word	0x20007622
 8001534:	20007620 	.word	0x20007620

08001538 <TFT9341_WriteData>:
// ---------------------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8001542:	2201      	movs	r2, #1
 8001544:	2140      	movs	r1, #64	; 0x40
 8001546:	4811      	ldr	r0, [pc, #68]	; (800158c <TFT9341_WriteData+0x54>)
 8001548:	f003 fef4 	bl	8005334 <HAL_GPIO_WritePin>
	while(buff_size > 0)
 800154c:	e015      	b.n	800157a <TFT9341_WriteData+0x42>
	{
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001554:	bf28      	it	cs
 8001556:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800155a:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 800155c:	89fa      	ldrh	r2, [r7, #14]
 800155e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <TFT9341_WriteData+0x58>)
 8001566:	f006 fd9e 	bl	80080a6 <HAL_SPI_Transmit>
		buff += chunk_size;
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	603b      	str	r3, [r7, #0]
	while(buff_size > 0)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e6      	bne.n	800154e <TFT9341_WriteData+0x16>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	200076d4 	.word	0x200076d4

08001594 <TFT9341_SetAddrWindow>:
// ---------------------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	80fb      	strh	r3, [r7, #6]
 80015a6:	4603      	mov	r3, r0
 80015a8:	80bb      	strh	r3, [r7, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	807b      	strh	r3, [r7, #2]
 80015ae:	4613      	mov	r3, r2
 80015b0:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 80015b2:	202a      	movs	r0, #42	; 0x2a
 80015b4:	f7ff fe3a 	bl	800122c <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	733b      	strb	r3, [r7, #12]
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	737b      	strb	r3, [r7, #13]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	73bb      	strb	r3, [r7, #14]
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2104      	movs	r1, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ffaa 	bl	8001538 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 80015e4:	202b      	movs	r0, #43	; 0x2b
 80015e6:	f7ff fe21 	bl	800122c <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80015ea:	88bb      	ldrh	r3, [r7, #4]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	723b      	strb	r3, [r7, #8]
 80015f4:	88bb      	ldrh	r3, [r7, #4]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	727b      	strb	r3, [r7, #9]
 80015fa:	883b      	ldrh	r3, [r7, #0]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	b29b      	uxth	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	72bb      	strb	r3, [r7, #10]
 8001604:	883b      	ldrh	r3, [r7, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2104      	movs	r1, #4
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff91 	bl	8001538 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 8001616:	202c      	movs	r0, #44	; 0x2c
 8001618:	f7ff fe08 	bl	800122c <TFT9341_SendCommand>
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}

08001624 <TFT9341_FillScreen>:
//      HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
//  }
}
// ---------------------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
	// With DMA
	uint32_t i, n;
	  TFT9341_SetAddrWindow(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1);
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <TFT9341_FillScreen+0x90>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	3b01      	subs	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <TFT9341_FillScreen+0x94>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	3b01      	subs	r3, #1
 800163c:	b29b      	uxth	r3, r3
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff ffa7 	bl	8001594 <TFT9341_SetAddrWindow>
	  for(i=0;i<3200;i++)
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e011      	b.n	8001670 <TFT9341_FillScreen+0x4c>
	  {
	    frm_buf[i*2] = color >> 8;
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b2d1      	uxtb	r1, r2
 8001658:	4a18      	ldr	r2, [pc, #96]	; (80016bc <TFT9341_FillScreen+0x98>)
 800165a:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	3301      	adds	r3, #1
 8001662:	88fa      	ldrh	r2, [r7, #6]
 8001664:	b2d1      	uxtb	r1, r2
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <TFT9341_FillScreen+0x98>)
 8001668:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<3200;i++)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3301      	adds	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001676:	d3e9      	bcc.n	800164c <TFT9341_FillScreen+0x28>
	  }
	  n = 6400;
 8001678:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800167c:	60bb      	str	r3, [r7, #8]
	  DC_DATA();
 800167e:	2201      	movs	r2, #1
 8001680:	2140      	movs	r1, #64	; 0x40
 8001682:	480f      	ldr	r0, [pc, #60]	; (80016c0 <TFT9341_FillScreen+0x9c>)
 8001684:	f003 fe56 	bl	8005334 <HAL_GPIO_WritePin>
	  dma_spi_cnt = 24;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <TFT9341_FillScreen+0xa0>)
 800168a:	2218      	movs	r2, #24
 800168c:	601a      	str	r2, [r3, #0]
	  HAL_SPI_Transmit_DMA(&hspi2, frm_buf, n);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	b29b      	uxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	4909      	ldr	r1, [pc, #36]	; (80016bc <TFT9341_FillScreen+0x98>)
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <TFT9341_FillScreen+0xa4>)
 8001698:	f006 fe42 	bl	8008320 <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 800169c:	bf00      	nop
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <TFT9341_FillScreen+0xa8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0fb      	beq.n	800169e <TFT9341_FillScreen+0x7a>
	  dma_spi_fl=0;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <TFT9341_FillScreen+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]

	///////////////////////////////////////////////////////////////////////////
	//   Without DMA
//  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20007622 	.word	0x20007622
 80016b8:	20007620 	.word	0x20007620
 80016bc:	2000039c 	.word	0x2000039c
 80016c0:	40021000 	.word	0x40021000
 80016c4:	20000028 	.word	0x20000028
 80016c8:	200076d4 	.word	0x200076d4
 80016cc:	2000278c 	.word	0x2000278c

080016d0 <TFT9341_SetTextColor>:
		TFT9341_DrawPixel(x0-y,y0-x,color);
	}
}
// ---------------------------------------------------------------------------------
void TFT9341_SetTextColor(uint16_t color)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
  lcdprop.TextColor=color;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <TFT9341_SetTextColor+0x1c>)
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	8013      	strh	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20007624 	.word	0x20007624

080016f0 <TFT9341_SetBackColor>:
// ---------------------------------------------------------------------------------
void TFT9341_SetBackColor(uint16_t color)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
  lcdprop.BackColor=color;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <TFT9341_SetBackColor+0x1c>)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	8053      	strh	r3, [r2, #2]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	20007624 	.word	0x20007624

08001710 <TFT9341_DrawChar_DMA>:
    y++;
  }
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawChar_DMA(uint16_t x, uint16_t y, uint8_t c)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b08b      	sub	sp, #44	; 0x2c
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
 800171a:	460b      	mov	r3, r1
 800171c:	80bb      	strh	r3, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	70fb      	strb	r3, [r7, #3]

	uint32_t i = 0, j = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *c_t;
	uint8_t *pchar;
	uint32_t line=0;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]


	height = lcdprop.pFont->Height;
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	88db      	ldrh	r3, [r3, #6]
 8001734:	837b      	strh	r3, [r7, #26]
	width = lcdprop.pFont->Width;
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	889b      	ldrh	r3, [r3, #4]
 800173c:	833b      	strh	r3, [r7, #24]
	offset = 8 *((width + 7)/8) - width ;
 800173e:	8b3b      	ldrh	r3, [r7, #24]
 8001740:	3307      	adds	r3, #7
 8001742:	2b00      	cmp	r3, #0
 8001744:	da00      	bge.n	8001748 <TFT9341_DrawChar_DMA+0x38>
 8001746:	3307      	adds	r3, #7
 8001748:	10db      	asrs	r3, r3, #3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	8b3b      	ldrh	r3, [r7, #24]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	75fb      	strb	r3, [r7, #23]
	c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
 8001758:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	3b20      	subs	r3, #32
 8001762:	4965      	ldr	r1, [pc, #404]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001764:	6849      	ldr	r1, [r1, #4]
 8001766:	88c9      	ldrh	r1, [r1, #6]
 8001768:	fb01 f103 	mul.w	r1, r1, r3
 800176c:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	3307      	adds	r3, #7
 8001774:	2b00      	cmp	r3, #0
 8001776:	da00      	bge.n	800177a <TFT9341_DrawChar_DMA+0x6a>
 8001778:	3307      	adds	r3, #7
 800177a:	10db      	asrs	r3, r3, #3
 800177c:	fb03 f301 	mul.w	r3, r3, r1
 8001780:	4413      	add	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

	y = y - height;											// Because BUG inside function
 8001784:	88ba      	ldrh	r2, [r7, #4]
 8001786:	8b7b      	ldrh	r3, [r7, #26]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	80bb      	strh	r3, [r7, #4]

	for(i = 0; i < height; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
 8001790:	e07c      	b.n	800188c <TFT9341_DrawChar_DMA+0x17c>
	{
		pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 8001792:	8b3b      	ldrh	r3, [r7, #24]
 8001794:	3307      	adds	r3, #7
 8001796:	2b00      	cmp	r3, #0
 8001798:	da00      	bge.n	800179c <TFT9341_DrawChar_DMA+0x8c>
 800179a:	3307      	adds	r3, #7
 800179c:	10db      	asrs	r3, r3, #3
 800179e:	461a      	mov	r2, r3
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	fb03 f302 	mul.w	r3, r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4413      	add	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
		switch(((width + 7)/8))
 80017ac:	8b3b      	ldrh	r3, [r7, #24]
 80017ae:	3307      	adds	r3, #7
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da00      	bge.n	80017b6 <TFT9341_DrawChar_DMA+0xa6>
 80017b4:	3307      	adds	r3, #7
 80017b6:	10db      	asrs	r3, r3, #3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d002      	beq.n	80017c2 <TFT9341_DrawChar_DMA+0xb2>
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d004      	beq.n	80017ca <TFT9341_DrawChar_DMA+0xba>
 80017c0:	e00c      	b.n	80017dc <TFT9341_DrawChar_DMA+0xcc>
		{
			case 1:
				line = pchar[0];
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	61fb      	str	r3, [r7, #28]
				break;
 80017c8:	e016      	b.n	80017f8 <TFT9341_DrawChar_DMA+0xe8>
			case 2:
				line = (pchar[0]<< 8) | pchar[1];
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	3201      	adds	r2, #1
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61fb      	str	r3, [r7, #28]
				break;
 80017da:	e00d      	b.n	80017f8 <TFT9341_DrawChar_DMA+0xe8>
			case 3:
			default:
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	3202      	adds	r2, #2
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61fb      	str	r3, [r7, #28]
				break;
 80017f6:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	e03c      	b.n	8001878 <TFT9341_DrawChar_DMA+0x168>
		{
			int buf_index = j + i*(width+1);
 80017fe:	8b3b      	ldrh	r3, [r7, #24]
 8001800:	3301      	adds	r3, #1
 8001802:	461a      	mov	r2, r3
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	fb03 f202 	mul.w	r2, r3, r2
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	4413      	add	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
			if(line & (1 << (width- j + offset- 1)))
 8001810:	8b3a      	ldrh	r2, [r7, #24]
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	1ad2      	subs	r2, r2, r3
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	4413      	add	r3, r2
 800181a:	3b01      	subs	r3, #1
 800181c:	2201      	movs	r2, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	461a      	mov	r2, r3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d011      	beq.n	8001850 <TFT9341_DrawChar_DMA+0x140>
			{
				frm_buf[buf_index*2] = lcdprop.TextColor >> 8;
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29a      	uxth	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	b2d1      	uxtb	r1, r2
 800183a:	4a30      	ldr	r2, [pc, #192]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 800183c:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.TextColor & 0xFF;
 800183e:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	3301      	adds	r3, #1
 8001848:	b2d1      	uxtb	r1, r2
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 800184c:	54d1      	strb	r1, [r2, r3]
 800184e:	e010      	b.n	8001872 <TFT9341_DrawChar_DMA+0x162>
			}
			else
			{
				frm_buf[buf_index*2] = lcdprop.BackColor >> 8;
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001852:	885b      	ldrh	r3, [r3, #2]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b29a      	uxth	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	b2d1      	uxtb	r1, r2
 800185e:	4a27      	ldr	r2, [pc, #156]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 8001860:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.BackColor & 0xFF;
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001864:	885a      	ldrh	r2, [r3, #2]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	3301      	adds	r3, #1
 800186c:	b2d1      	uxtb	r1, r2
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 8001870:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < width; j++)
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	3301      	adds	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	8b3b      	ldrh	r3, [r7, #24]
 800187a:	6a3a      	ldr	r2, [r7, #32]
 800187c:	429a      	cmp	r2, r3
 800187e:	d3be      	bcc.n	80017fe <TFT9341_DrawChar_DMA+0xee>
			}
		}
		y++;
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	3301      	adds	r3, #1
 8001884:	80bb      	strh	r3, [r7, #4]
	for(i = 0; i < height; i++)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	8b7b      	ldrh	r3, [r7, #26]
 800188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001890:	429a      	cmp	r2, r3
 8001892:	f4ff af7e 	bcc.w	8001792 <TFT9341_DrawChar_DMA+0x82>
	}

	TFT9341_SetAddrWindow(x, y, x+width, y+height);
 8001896:	88fa      	ldrh	r2, [r7, #6]
 8001898:	8b3b      	ldrh	r3, [r7, #24]
 800189a:	4413      	add	r3, r2
 800189c:	b29c      	uxth	r4, r3
 800189e:	88ba      	ldrh	r2, [r7, #4]
 80018a0:	8b7b      	ldrh	r3, [r7, #26]
 80018a2:	4413      	add	r3, r2
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	88b9      	ldrh	r1, [r7, #4]
 80018a8:	88f8      	ldrh	r0, [r7, #6]
 80018aa:	4622      	mov	r2, r4
 80018ac:	f7ff fe72 	bl	8001594 <TFT9341_SetAddrWindow>
	DC_DATA();
 80018b0:	2201      	movs	r2, #1
 80018b2:	2140      	movs	r1, #64	; 0x40
 80018b4:	4812      	ldr	r0, [pc, #72]	; (8001900 <TFT9341_DrawChar_DMA+0x1f0>)
 80018b6:	f003 fd3d 	bl	8005334 <HAL_GPIO_WritePin>
	dma_spi_cnt = 1;
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <TFT9341_DrawChar_DMA+0x1f4>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi2, frm_buf, (width+1)*(height+1)*2);
 80018c0:	8b3b      	ldrh	r3, [r7, #24]
 80018c2:	3301      	adds	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	8b7b      	ldrh	r3, [r7, #26]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	fb12 f303 	smulbb	r3, r2, r3
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4908      	ldr	r1, [pc, #32]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 80018da:	480b      	ldr	r0, [pc, #44]	; (8001908 <TFT9341_DrawChar_DMA+0x1f8>)
 80018dc:	f006 fd20 	bl	8008320 <HAL_SPI_Transmit_DMA>
	while(!dma_spi_fl) {}
 80018e0:	bf00      	nop
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <TFT9341_DrawChar_DMA+0x1fc>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0fb      	beq.n	80018e2 <TFT9341_DrawChar_DMA+0x1d2>
	dma_spi_fl=0;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <TFT9341_DrawChar_DMA+0x1fc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	372c      	adds	r7, #44	; 0x2c
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	20007624 	.word	0x20007624
 80018fc:	2000039c 	.word	0x2000039c
 8001900:	40021000 	.word	0x40021000
 8001904:	20000028 	.word	0x20000028
 8001908:	200076d4 	.word	0x200076d4
 800190c:	2000278c 	.word	0x2000278c

08001910 <TFT9341_String_DMA>:
    (void)*str++;
  }
}
// ---------------------------------------------------------------------------------
void TFT9341_String_DMA(uint16_t x,uint16_t y, char *str)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	603a      	str	r2, [r7, #0]
 800191a:	80fb      	strh	r3, [r7, #6]
 800191c:	460b      	mov	r3, r1
 800191e:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8001920:	e00f      	b.n	8001942 <TFT9341_String_DMA+0x32>
  {
	TFT9341_DrawChar_DMA(x,y,str[0]);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	88b9      	ldrh	r1, [r7, #4]
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fef0 	bl	8001710 <TFT9341_DrawChar_DMA>
    x+=lcdprop.pFont->Width;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <TFT9341_String_DMA+0x44>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	889a      	ldrh	r2, [r3, #4]
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4413      	add	r3, r2
 800193a:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	603b      	str	r3, [r7, #0]
  while(*str)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1eb      	bne.n	8001922 <TFT9341_String_DMA+0x12>
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20007624 	.word	0x20007624

08001958 <TFT9341_SetRotation>:
// ---------------------------------------------------------------------------------
void TFT9341_SetRotation(uint8_t r)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  TFT9341_SendCommand(0x36);
 8001962:	2036      	movs	r0, #54	; 0x36
 8001964:	f7ff fc62 	bl	800122c <TFT9341_SendCommand>
  switch(r)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d836      	bhi.n	80019dc <TFT9341_SetRotation+0x84>
 800196e:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <TFT9341_SetRotation+0x1c>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	08001985 	.word	0x08001985
 8001978:	0800199b 	.word	0x0800199b
 800197c:	080019b1 	.word	0x080019b1
 8001980:	080019c7 	.word	0x080019c7
  {
    case 0:
      TFT9341_SendData(0x48);
 8001984:	2048      	movs	r0, #72	; 0x48
 8001986:	f7ff fc37 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 800198c:	22f0      	movs	r2, #240	; 0xf0
 800198e:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <TFT9341_SetRotation+0x90>)
 8001992:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001996:	801a      	strh	r2, [r3, #0]
      break;
 8001998:	e020      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 1:
      TFT9341_SendData(0x28);
 800199a:	2028      	movs	r0, #40	; 0x28
 800199c:	f7ff fc2c 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019a6:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019aa:	22f0      	movs	r2, #240	; 0xf0
 80019ac:	801a      	strh	r2, [r3, #0]
      break;
 80019ae:	e015      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 2:
      TFT9341_SendData(0x88);
 80019b0:	2088      	movs	r0, #136	; 0x88
 80019b2:	f7ff fc21 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019b8:	22f0      	movs	r2, #240	; 0xf0
 80019ba:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019c2:	801a      	strh	r2, [r3, #0]
      break;
 80019c4:	e00a      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 3:
      TFT9341_SendData(0xE8);
 80019c6:	20e8      	movs	r0, #232	; 0xe8
 80019c8:	f7ff fc16 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019d2:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019d6:	22f0      	movs	r2, #240	; 0xf0
 80019d8:	801a      	strh	r2, [r3, #0]
      break;
 80019da:	bf00      	nop
  }
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20007622 	.word	0x20007622
 80019e8:	20007620 	.word	0x20007620

080019ec <time_i2c_read_single>:
	HAL_I2C_Mem_Write(&hi2c3, device_address, start_register_address, 1, &data_array, data_length, 1000);
}

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	4603      	mov	r3, r0
 80019f4:	603a      	str	r2, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	460b      	mov	r3, r1
 80019fa:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c3, device_address<<1,register_address, 1, data_byte, 1, 1000);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	b299      	uxth	r1, r3
 8001a04:	79bb      	ldrb	r3, [r7, #6]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	4803      	ldr	r0, [pc, #12]	; (8001a28 <time_i2c_read_single+0x3c>)
 8001a1a:	f003 fee7 	bl	80057ec <HAL_I2C_Mem_Read>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20007630 	.word	0x20007630

08001a2c <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af04      	add	r7, sp, #16
 8001a32:	603a      	str	r2, [r7, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	71bb      	strb	r3, [r7, #6]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	797b      	ldrb	r3, [r7, #5]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a56:	9002      	str	r0, [sp, #8]
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <time_i2c_read_multi+0x44>)
 8001a62:	f003 fec3 	bl	80057ec <HAL_I2C_Mem_Read>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20007630 	.word	0x20007630

08001a74 <ds3231_I2C_init>:

/*function to initialize I2C peripheral in 100khz or 400khz*/
void ds3231_I2C_init()
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	2b0e      	cmp	r3, #14
 8001a94:	f200 80ac 	bhi.w	8001bf0 <ds3231_read+0x16c>
 8001a98:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <ds3231_read+0x1c>)
 8001a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9e:	bf00      	nop
 8001aa0:	08001add 	.word	0x08001add
 8001aa4:	08001af9 	.word	0x08001af9
 8001aa8:	08001b15 	.word	0x08001b15
 8001aac:	08001b31 	.word	0x08001b31
 8001ab0:	08001b4d 	.word	0x08001b4d
 8001ab4:	08001b69 	.word	0x08001b69
 8001ab8:	08001b85 	.word	0x08001b85
 8001abc:	08001ba1 	.word	0x08001ba1
 8001ac0:	08001bb5 	.word	0x08001bb5
 8001ac4:	08001bc9 	.word	0x08001bc9
 8001ac8:	08001bf1 	.word	0x08001bf1
 8001acc:	08001bf1 	.word	0x08001bf1
 8001ad0:	08001bf1 	.word	0x08001bf1
 8001ad4:	08001bf1 	.word	0x08001bf1
 8001ad8:	08001bdb 	.word	0x08001bdb
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <ds3231_read+0x17c>)
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2068      	movs	r0, #104	; 0x68
 8001ae2:	f7ff ff83 	bl	80019ec <time_i2c_read_single>
      *data_array = register_current_value;
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <ds3231_read+0x17c>)
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001aee:	2101      	movs	r1, #1
 8001af0:	6838      	ldr	r0, [r7, #0]
 8001af2:	f000 f887 	bl	8001c04 <BCD_to_HEX>
      break;
 8001af6:	e07d      	b.n	8001bf4 <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 8001af8:	4a41      	ldr	r2, [pc, #260]	; (8001c00 <ds3231_read+0x17c>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	2068      	movs	r0, #104	; 0x68
 8001afe:	f7ff ff75 	bl	80019ec <time_i2c_read_single>
      *data_array = register_current_value;
 8001b02:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <ds3231_read+0x17c>)
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f000 f879 	bl	8001c04 <BCD_to_HEX>
      break;
 8001b12:	e06f      	b.n	8001bf4 <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 8001b14:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <ds3231_read+0x17c>)
 8001b16:	2102      	movs	r1, #2
 8001b18:	2068      	movs	r0, #104	; 0x68
 8001b1a:	f7ff ff67 	bl	80019ec <time_i2c_read_single>
      *data_array = register_current_value;
 8001b1e:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <ds3231_read+0x17c>)
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b26:	2101      	movs	r1, #1
 8001b28:	6838      	ldr	r0, [r7, #0]
 8001b2a:	f000 f86b 	bl	8001c04 <BCD_to_HEX>
      break;
 8001b2e:	e061      	b.n	8001bf4 <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 8001b30:	4a33      	ldr	r2, [pc, #204]	; (8001c00 <ds3231_read+0x17c>)
 8001b32:	2103      	movs	r1, #3
 8001b34:	2068      	movs	r0, #104	; 0x68
 8001b36:	f7ff ff59 	bl	80019ec <time_i2c_read_single>
      *data_array = register_current_value;
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <ds3231_read+0x17c>)
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b42:	2101      	movs	r1, #1
 8001b44:	6838      	ldr	r0, [r7, #0]
 8001b46:	f000 f85d 	bl	8001c04 <BCD_to_HEX>
      break;
 8001b4a:	e053      	b.n	8001bf4 <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 8001b4c:	4a2c      	ldr	r2, [pc, #176]	; (8001c00 <ds3231_read+0x17c>)
 8001b4e:	2104      	movs	r1, #4
 8001b50:	2068      	movs	r0, #104	; 0x68
 8001b52:	f7ff ff4b 	bl	80019ec <time_i2c_read_single>
      *data_array = register_current_value;
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <ds3231_read+0x17c>)
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b5e:	2101      	movs	r1, #1
 8001b60:	6838      	ldr	r0, [r7, #0]
 8001b62:	f000 f84f 	bl	8001c04 <BCD_to_HEX>
      break;
 8001b66:	e045      	b.n	8001bf4 <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 8001b68:	4a25      	ldr	r2, [pc, #148]	; (8001c00 <ds3231_read+0x17c>)
 8001b6a:	2105      	movs	r1, #5
 8001b6c:	2068      	movs	r0, #104	; 0x68
 8001b6e:	f7ff ff3d 	bl	80019ec <time_i2c_read_single>
      *data_array = register_current_value;
 8001b72:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <ds3231_read+0x17c>)
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	6838      	ldr	r0, [r7, #0]
 8001b7e:	f000 f841 	bl	8001c04 <BCD_to_HEX>
      break;
 8001b82:	e037      	b.n	8001bf4 <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 8001b84:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <ds3231_read+0x17c>)
 8001b86:	2106      	movs	r1, #6
 8001b88:	2068      	movs	r0, #104	; 0x68
 8001b8a:	f7ff ff2f 	bl	80019ec <time_i2c_read_single>
      *data_array = register_current_value;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <ds3231_read+0x17c>)
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b96:	2101      	movs	r1, #1
 8001b98:	6838      	ldr	r0, [r7, #0]
 8001b9a:	f000 f833 	bl	8001c04 <BCD_to_HEX>
      break;
 8001b9e:	e029      	b.n	8001bf4 <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8001ba0:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <ds3231_read+0x17c>)
 8001ba2:	210e      	movs	r1, #14
 8001ba4:	2068      	movs	r0, #104	; 0x68
 8001ba6:	f7ff ff21 	bl	80019ec <time_i2c_read_single>
      *data_array = register_current_value;
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <ds3231_read+0x17c>)
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	701a      	strb	r2, [r3, #0]
      break;
 8001bb2:	e01f      	b.n	8001bf4 <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <ds3231_read+0x17c>)
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	2068      	movs	r0, #104	; 0x68
 8001bba:	f7ff ff17 	bl	80019ec <time_i2c_read_single>
      *data_array = register_current_value;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <ds3231_read+0x17c>)
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	701a      	strb	r2, [r3, #0]
      break;
 8001bc6:	e015      	b.n	8001bf4 <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <ds3231_read+0x17c>)
 8001bca:	2110      	movs	r1, #16
 8001bcc:	2068      	movs	r0, #104	; 0x68
 8001bce:	f7ff ff0d 	bl	80019ec <time_i2c_read_single>
      *data_array = register_current_value;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <ds3231_read+0x17c>)
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 8001bda:	2307      	movs	r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	2100      	movs	r1, #0
 8001be0:	2068      	movs	r0, #104	; 0x68
 8001be2:	f7ff ff23 	bl	8001a2c <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 8001be6:	2107      	movs	r1, #7
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	f000 f80b 	bl	8001c04 <BCD_to_HEX>
      break;
 8001bee:	e001      	b.n	8001bf4 <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e000      	b.n	8001bf6 <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000239c 	.word	0x2000239c

08001c04 <BCD_to_HEX>:
  }
}

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e028      	b.n	8001c6c <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	440b      	add	r3, r1
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	b2d9      	uxtb	r1, r3
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4403      	add	r3, r0
 8001c5a:	440a      	add	r2, r1
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dad2      	bge.n	8001c1a <BCD_to_HEX+0x16>
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_SPI_TxCpltCallback>:


//--------------------------------------------------------------------------------
// For DMA SPI2 (LCD)
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <HAL_SPI_TxCpltCallback+0x3c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_SPI_TxCpltCallback+0x34>
	{
	    dma_spi_cnt--;
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_SPI_TxCpltCallback+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_SPI_TxCpltCallback+0x40>)
 8001c9c:	6013      	str	r3, [r2, #0]
	    if(dma_spi_cnt==0)
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_SPI_TxCpltCallback+0x40>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d108      	bne.n	8001cb8 <HAL_SPI_TxCpltCallback+0x34>
	    {
	    	HAL_SPI_DMAStop(&hspi2);
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <HAL_SPI_TxCpltCallback+0x3c>)
 8001ca8:	f006 fbf0 	bl	800848c <HAL_SPI_DMAStop>
	    	dma_spi_cnt=1;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_SPI_TxCpltCallback+0x40>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
	    	dma_spi_fl=1;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_SPI_TxCpltCallback+0x44>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200076d4 	.word	0x200076d4
 8001cc4:	20000028 	.word	0x20000028
 8001cc8:	2000278c 	.word	0x2000278c

08001ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd0:	f002 f844 	bl	8003d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd4:	f000 f89a 	bl	8001e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd8:	f000 fac0 	bl	800225c <MX_GPIO_Init>
  MX_TIM3_Init();
 8001cdc:	f000 fa2e 	bl	800213c <MX_TIM3_Init>
  MX_I2C3_Init();
 8001ce0:	f000 f97e 	bl	8001fe0 <MX_I2C3_Init>
  MX_TIM10_Init();
 8001ce4:	f000 fa78 	bl	80021d8 <MX_TIM10_Init>
  MX_SPI1_Init();
 8001ce8:	f000 f9bc 	bl	8002064 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001cec:	f000 f9f0 	bl	80020d0 <MX_SPI2_Init>
  MX_DMA_Init();
 8001cf0:	f000 fa94 	bl	800221c <MX_DMA_Init>
  MX_RNG_Init();
 8001cf4:	f000 f9a2 	bl	800203c <MX_RNG_Init>
  MX_I2C2_Init();
 8001cf8:	f000 f944 	bl	8001f84 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001cfc:	f000 f8f0 	bl	8001ee0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 8001d00:	4829      	ldr	r0, [pc, #164]	; (8001da8 <main+0xdc>)
 8001d02:	f006 fec7 	bl	8008a94 <HAL_TIM_Base_Start_IT>
  /* IF LCD DOESN'T WORK !
  RIGHT IN RIGHT ORDER SPI2 AND DMA !!!!
  MX_DMA_Init();
  MX_SPI2_Init();
  */
  HAL_DMA_DeInit(&hdma_spi2_tx);
 8001d06:	4829      	ldr	r0, [pc, #164]	; (8001dac <main+0xe0>)
 8001d08:	f002 fcb2 	bl	8004670 <HAL_DMA_DeInit>
  HAL_SPI_DeInit(&hspi2);
 8001d0c:	4828      	ldr	r0, [pc, #160]	; (8001db0 <main+0xe4>)
 8001d0e:	f006 f9a2 	bl	8008056 <HAL_SPI_DeInit>
  MX_DMA_Init();
 8001d12:	f000 fa83 	bl	800221c <MX_DMA_Init>
  MX_SPI2_Init();
 8001d16:	f000 f9db 	bl	80020d0 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d1a:	f00a fb3b 	bl	800c394 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8001d1e:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <main+0xe8>)
 8001d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d24:	200a      	movs	r0, #10
 8001d26:	f00a fc2c 	bl	800c582 <osMessageQueueNew>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <main+0xec>)
 8001d2e:	6013      	str	r3, [r2, #0]

  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (1, sizeof(LCDQUEUE), &LCDQueue_attributes);
 8001d30:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <main+0xf0>)
 8001d32:	2164      	movs	r1, #100	; 0x64
 8001d34:	2001      	movs	r0, #1
 8001d36:	f00a fc24 	bl	800c582 <osMessageQueueNew>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4a20      	ldr	r2, [pc, #128]	; (8001dc0 <main+0xf4>)
 8001d3e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d40:	4a20      	ldr	r2, [pc, #128]	; (8001dc4 <main+0xf8>)
 8001d42:	2100      	movs	r1, #0
 8001d44:	4820      	ldr	r0, [pc, #128]	; (8001dc8 <main+0xfc>)
 8001d46:	f00a fb6f 	bl	800c428 <osThreadNew>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <main+0x100>)
 8001d4e:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 8001d50:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <main+0x104>)
 8001d52:	2100      	movs	r1, #0
 8001d54:	481f      	ldr	r0, [pc, #124]	; (8001dd4 <main+0x108>)
 8001d56:	f00a fb67 	bl	800c428 <osThreadNew>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <main+0x10c>)
 8001d5e:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 8001d60:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <main+0x110>)
 8001d62:	2100      	movs	r1, #0
 8001d64:	481e      	ldr	r0, [pc, #120]	; (8001de0 <main+0x114>)
 8001d66:	f00a fb5f 	bl	800c428 <osThreadNew>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <main+0x118>)
 8001d6e:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Start_LCD, NULL, &LCD_attributes);
 8001d70:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <main+0x11c>)
 8001d72:	2100      	movs	r1, #0
 8001d74:	481d      	ldr	r0, [pc, #116]	; (8001dec <main+0x120>)
 8001d76:	f00a fb57 	bl	800c428 <osThreadNew>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <main+0x124>)
 8001d7e:	6013      	str	r3, [r2, #0]

  /* creation of LCD_touchscreen */
  LCD_touchscreenHandle = osThreadNew(Start_LCD_touchscreen, NULL, &LCD_touchscreen_attributes);
 8001d80:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <main+0x128>)
 8001d82:	2100      	movs	r1, #0
 8001d84:	481c      	ldr	r0, [pc, #112]	; (8001df8 <main+0x12c>)
 8001d86:	f00a fb4f 	bl	800c428 <osThreadNew>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <main+0x130>)
 8001d8e:	6013      	str	r3, [r2, #0]

  /* creation of RTC */
  RTCHandle = osThreadNew(Start_RTC, NULL, &RTC_attributes);
 8001d90:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <main+0x134>)
 8001d92:	2100      	movs	r1, #0
 8001d94:	481b      	ldr	r0, [pc, #108]	; (8001e04 <main+0x138>)
 8001d96:	f00a fb47 	bl	800c428 <osThreadNew>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <main+0x13c>)
 8001d9e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001da0:	f00a fb1c 	bl	800c3dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <main+0xd8>
 8001da6:	bf00      	nop
 8001da8:	2000aa90 	.word	0x2000aa90
 8001dac:	2000d060 	.word	0x2000d060
 8001db0:	200076d4 	.word	0x200076d4
 8001db4:	08017270 	.word	0x08017270
 8001db8:	200081cc 	.word	0x200081cc
 8001dbc:	08017288 	.word	0x08017288
 8001dc0:	2000c354 	.word	0x2000c354
 8001dc4:	08017198 	.word	0x08017198
 8001dc8:	08002539 	.word	0x08002539
 8001dcc:	2000762c 	.word	0x2000762c
 8001dd0:	080171bc 	.word	0x080171bc
 8001dd4:	0800254d 	.word	0x0800254d
 8001dd8:	2000cd44 	.word	0x2000cd44
 8001ddc:	080171e0 	.word	0x080171e0
 8001de0:	080027c9 	.word	0x080027c9
 8001de4:	2000ab20 	.word	0x2000ab20
 8001de8:	08017204 	.word	0x08017204
 8001dec:	08002825 	.word	0x08002825
 8001df0:	2000c35c 	.word	0x2000c35c
 8001df4:	08017228 	.word	0x08017228
 8001df8:	08002869 	.word	0x08002869
 8001dfc:	2000c358 	.word	0x2000c358
 8001e00:	0801724c 	.word	0x0801724c
 8001e04:	08002a51 	.word	0x08002a51
 8001e08:	2000d180 	.word	0x2000d180

08001e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b094      	sub	sp, #80	; 0x50
 8001e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e12:	f107 0320 	add.w	r3, r7, #32
 8001e16:	2230      	movs	r2, #48	; 0x30
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00e fbcd 	bl	80105ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <SystemClock_Config+0xcc>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	4a27      	ldr	r2, [pc, #156]	; (8001ed8 <SystemClock_Config+0xcc>)
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <SystemClock_Config+0xcc>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <SystemClock_Config+0xd0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a21      	ldr	r2, [pc, #132]	; (8001edc <SystemClock_Config+0xd0>)
 8001e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <SystemClock_Config+0xd0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e72:	2302      	movs	r3, #2
 8001e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e80:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e86:	2302      	movs	r3, #2
 8001e88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8e:	f107 0320 	add.w	r3, r7, #32
 8001e92:	4618      	mov	r0, r3
 8001e94:	f005 fb9a 	bl	80075cc <HAL_RCC_OscConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e9e:	f001 f8b7 	bl	8003010 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001eb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	2105      	movs	r1, #5
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f005 fdfb 	bl	8007abc <HAL_RCC_ClockConfig>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ecc:	f001 f8a0 	bl	8003010 <Error_Handler>
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3750      	adds	r7, #80	; 0x50
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000

08001ee0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001ef4:	4a21      	ldr	r2, [pc, #132]	; (8001f7c <MX_ADC1_Init+0x9c>)
 8001ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001efa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001efe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <MX_ADC1_Init+0xa0>)
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f40:	480d      	ldr	r0, [pc, #52]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f42:	f001 ff71 	bl	8003e28 <HAL_ADC_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f4c:	f001 f860 	bl	8003010 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001f50:	2309      	movs	r3, #9
 8001f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f54:	2301      	movs	r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_ADC1_Init+0x98>)
 8001f62:	f001 ffa5 	bl	8003eb0 <HAL_ADC_ConfigChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f6c:	f001 f850 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000aad8 	.word	0x2000aad8
 8001f7c:	40012000 	.word	0x40012000
 8001f80:	0f000001 	.word	0x0f000001

08001f84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f8a:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <MX_I2C2_Init+0x54>)
 8001f8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f90:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <MX_I2C2_Init+0x58>)
 8001f92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fc2:	f003 f9d1 	bl	8005368 <HAL_I2C_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fcc:	f001 f820 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200077c4 	.word	0x200077c4
 8001fd8:	40005800 	.word	0x40005800
 8001fdc:	000186a0 	.word	0x000186a0

08001fe0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_I2C3_Init+0x50>)
 8001fe6:	4a13      	ldr	r2, [pc, #76]	; (8002034 <MX_I2C3_Init+0x54>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <MX_I2C3_Init+0x50>)
 8001fec:	4a12      	ldr	r2, [pc, #72]	; (8002038 <MX_I2C3_Init+0x58>)
 8001fee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_I2C3_Init+0x50>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <MX_I2C3_Init+0x50>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <MX_I2C3_Init+0x50>)
 8001ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002002:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <MX_I2C3_Init+0x50>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_I2C3_Init+0x50>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <MX_I2C3_Init+0x50>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <MX_I2C3_Init+0x50>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <MX_I2C3_Init+0x50>)
 800201e:	f003 f9a3 	bl	8005368 <HAL_I2C_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002028:	f000 fff2 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20007630 	.word	0x20007630
 8002034:	40005c00 	.word	0x40005c00
 8002038:	00061a80 	.word	0x00061a80

0800203c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_RNG_Init+0x20>)
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <MX_RNG_Init+0x24>)
 8002044:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_RNG_Init+0x20>)
 8002048:	f005 ff52 	bl	8007ef0 <HAL_RNG_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002052:	f000 ffdd 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000cd34 	.word	0x2000cd34
 8002060:	50060800 	.word	0x50060800

08002064 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <MX_SPI1_Init+0x64>)
 800206a:	4a18      	ldr	r2, [pc, #96]	; (80020cc <MX_SPI1_Init+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <MX_SPI1_Init+0x64>)
 8002070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002074:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <MX_SPI1_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <MX_SPI1_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_SPI1_Init+0x64>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <MX_SPI1_Init+0x64>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_SPI1_Init+0x64>)
 8002090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002094:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_SPI1_Init+0x64>)
 8002098:	2220      	movs	r2, #32
 800209a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <MX_SPI1_Init+0x64>)
 800209e:	2200      	movs	r2, #0
 80020a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_SPI1_Init+0x64>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <MX_SPI1_Init+0x64>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_SPI1_Init+0x64>)
 80020b0:	220a      	movs	r2, #10
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020b4:	4804      	ldr	r0, [pc, #16]	; (80020c8 <MX_SPI1_Init+0x64>)
 80020b6:	f005 ff45 	bl	8007f44 <HAL_SPI_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020c0:	f000 ffa6 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000cd48 	.word	0x2000cd48
 80020cc:	40013000 	.word	0x40013000

080020d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_SPI2_Init+0x64>)
 80020d6:	4a18      	ldr	r2, [pc, #96]	; (8002138 <MX_SPI2_Init+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_SPI2_Init+0x64>)
 80020dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_SPI2_Init+0x64>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_SPI2_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_SPI2_Init+0x64>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_SPI2_Init+0x64>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_SPI2_Init+0x64>)
 80020fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002100:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_SPI2_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <MX_SPI2_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_SPI2_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <MX_SPI2_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_SPI2_Init+0x64>)
 800211c:	220a      	movs	r2, #10
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_SPI2_Init+0x64>)
 8002122:	f005 ff0f 	bl	8007f44 <HAL_SPI_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800212c:	f000 ff70 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200076d4 	.word	0x200076d4
 8002138:	40003800 	.word	0x40003800

0800213c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	463b      	mov	r3, r7
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <MX_TIM3_Init+0x94>)
 800215a:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <MX_TIM3_Init+0x98>)
 800215c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <MX_TIM3_Init+0x94>)
 8002160:	f240 3247 	movw	r2, #839	; 0x347
 8002164:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_TIM3_Init+0x94>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <MX_TIM3_Init+0x94>)
 800216e:	220a      	movs	r2, #10
 8002170:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <MX_TIM3_Init+0x94>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <MX_TIM3_Init+0x94>)
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800217e:	4814      	ldr	r0, [pc, #80]	; (80021d0 <MX_TIM3_Init+0x94>)
 8002180:	f006 fc38 	bl	80089f4 <HAL_TIM_Base_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800218a:	f000 ff41 	bl	8003010 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002192:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002194:	f107 0308 	add.w	r3, r7, #8
 8002198:	4619      	mov	r1, r3
 800219a:	480d      	ldr	r0, [pc, #52]	; (80021d0 <MX_TIM3_Init+0x94>)
 800219c:	f006 fdf2 	bl	8008d84 <HAL_TIM_ConfigClockSource>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80021a6:	f000 ff33 	bl	8003010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021b2:	463b      	mov	r3, r7
 80021b4:	4619      	mov	r1, r3
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <MX_TIM3_Init+0x94>)
 80021b8:	f007 f80e 	bl	80091d8 <HAL_TIMEx_MasterConfigSynchronization>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80021c2:	f000 ff25 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000aa90 	.word	0x2000aa90
 80021d4:	40000400 	.word	0x40000400

080021d8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <MX_TIM10_Init+0x3c>)
 80021de:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <MX_TIM10_Init+0x40>)
 80021e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_TIM10_Init+0x3c>)
 80021e4:	22a7      	movs	r2, #167	; 0xa7
 80021e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <MX_TIM10_Init+0x3c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_TIM10_Init+0x3c>)
 80021f0:	2209      	movs	r2, #9
 80021f2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <MX_TIM10_Init+0x3c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_TIM10_Init+0x3c>)
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <MX_TIM10_Init+0x3c>)
 8002202:	f006 fbf7 	bl	80089f4 <HAL_TIM_Base_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 800220c:	f000 ff00 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000777c 	.word	0x2000777c
 8002218:	40014400 	.word	0x40014400

0800221c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_DMA_Init+0x3c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <MX_DMA_Init+0x3c>)
 800222c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_DMA_Init+0x3c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2105      	movs	r1, #5
 8002242:	200f      	movs	r0, #15
 8002244:	f002 f92e 	bl	80044a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002248:	200f      	movs	r0, #15
 800224a:	f002 f947 	bl	80044dc <HAL_NVIC_EnableIRQ>

}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800

0800225c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08c      	sub	sp, #48	; 0x30
 8002260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	4baa      	ldr	r3, [pc, #680]	; (8002520 <MX_GPIO_Init+0x2c4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4aa9      	ldr	r2, [pc, #676]	; (8002520 <MX_GPIO_Init+0x2c4>)
 800227c:	f043 0310 	orr.w	r3, r3, #16
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4ba7      	ldr	r3, [pc, #668]	; (8002520 <MX_GPIO_Init+0x2c4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	4ba3      	ldr	r3, [pc, #652]	; (8002520 <MX_GPIO_Init+0x2c4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4aa2      	ldr	r2, [pc, #648]	; (8002520 <MX_GPIO_Init+0x2c4>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4ba0      	ldr	r3, [pc, #640]	; (8002520 <MX_GPIO_Init+0x2c4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	4b9c      	ldr	r3, [pc, #624]	; (8002520 <MX_GPIO_Init+0x2c4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a9b      	ldr	r2, [pc, #620]	; (8002520 <MX_GPIO_Init+0x2c4>)
 80022b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b99      	ldr	r3, [pc, #612]	; (8002520 <MX_GPIO_Init+0x2c4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b95      	ldr	r3, [pc, #596]	; (8002520 <MX_GPIO_Init+0x2c4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a94      	ldr	r2, [pc, #592]	; (8002520 <MX_GPIO_Init+0x2c4>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b92      	ldr	r3, [pc, #584]	; (8002520 <MX_GPIO_Init+0x2c4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	4b8e      	ldr	r3, [pc, #568]	; (8002520 <MX_GPIO_Init+0x2c4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a8d      	ldr	r2, [pc, #564]	; (8002520 <MX_GPIO_Init+0x2c4>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b8b      	ldr	r3, [pc, #556]	; (8002520 <MX_GPIO_Init+0x2c4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	4b87      	ldr	r3, [pc, #540]	; (8002520 <MX_GPIO_Init+0x2c4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a86      	ldr	r2, [pc, #536]	; (8002520 <MX_GPIO_Init+0x2c4>)
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b84      	ldr	r3, [pc, #528]	; (8002520 <MX_GPIO_Init+0x2c4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 800231a:	2200      	movs	r2, #0
 800231c:	217c      	movs	r1, #124	; 0x7c
 800231e:	4881      	ldr	r0, [pc, #516]	; (8002524 <MX_GPIO_Init+0x2c8>)
 8002320:	f003 f808 	bl	8005334 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002324:	2201      	movs	r2, #1
 8002326:	2101      	movs	r1, #1
 8002328:	487f      	ldr	r0, [pc, #508]	; (8002528 <MX_GPIO_Init+0x2cc>)
 800232a:	f003 f803 	bl	8005334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	2142      	movs	r1, #66	; 0x42
 8002332:	487d      	ldr	r0, [pc, #500]	; (8002528 <MX_GPIO_Init+0x2cc>)
 8002334:	f002 fffe 	bl	8005334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002338:	2200      	movs	r2, #0
 800233a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800233e:	487b      	ldr	r0, [pc, #492]	; (800252c <MX_GPIO_Init+0x2d0>)
 8002340:	f002 fff8 	bl	8005334 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800234a:	4879      	ldr	r0, [pc, #484]	; (8002530 <MX_GPIO_Init+0x2d4>)
 800234c:	f002 fff2 	bl	8005334 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 8002350:	231c      	movs	r3, #28
 8002352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	486f      	ldr	r0, [pc, #444]	; (8002524 <MX_GPIO_Init+0x2c8>)
 8002368:	f002 fd34 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 800236c:	2360      	movs	r3, #96	; 0x60
 800236e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002370:	2301      	movs	r3, #1
 8002372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	4619      	mov	r1, r3
 8002382:	4868      	ldr	r0, [pc, #416]	; (8002524 <MX_GPIO_Init+0x2c8>)
 8002384:	f002 fd26 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8002388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800238c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	4862      	ldr	r0, [pc, #392]	; (8002528 <MX_GPIO_Init+0x2cc>)
 800239e:	f002 fd19 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 80023a2:	2303      	movs	r3, #3
 80023a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b2:	f107 031c 	add.w	r3, r7, #28
 80023b6:	4619      	mov	r1, r3
 80023b8:	485b      	ldr	r0, [pc, #364]	; (8002528 <MX_GPIO_Init+0x2cc>)
 80023ba:	f002 fd0b 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80023be:	2308      	movs	r3, #8
 80023c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023ce:	2305      	movs	r3, #5
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80023d2:	f107 031c 	add.w	r3, r7, #28
 80023d6:	4619      	mov	r1, r3
 80023d8:	4853      	ldr	r0, [pc, #332]	; (8002528 <MX_GPIO_Init+0x2cc>)
 80023da:	f002 fcfb 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80023e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	4619      	mov	r1, r3
 80023f2:	4850      	ldr	r0, [pc, #320]	; (8002534 <MX_GPIO_Init+0x2d8>)
 80023f4:	f002 fcee 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80023f8:	2310      	movs	r3, #16
 80023fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002408:	2306      	movs	r3, #6
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	4619      	mov	r1, r3
 8002412:	4848      	ldr	r0, [pc, #288]	; (8002534 <MX_GPIO_Init+0x2d8>)
 8002414:	f002 fcde 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002418:	2304      	movs	r3, #4
 800241a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	4619      	mov	r1, r3
 800242a:	4841      	ldr	r0, [pc, #260]	; (8002530 <MX_GPIO_Init+0x2d4>)
 800242c:	f002 fcd2 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002430:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002434:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002436:	2301      	movs	r3, #1
 8002438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	4619      	mov	r1, r3
 8002448:	4838      	ldr	r0, [pc, #224]	; (800252c <MX_GPIO_Init+0x2d0>)
 800244a:	f002 fcc3 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 800244e:	2340      	movs	r3, #64	; 0x40
 8002450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002452:	2301      	movs	r3, #1
 8002454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800245a:	2302      	movs	r3, #2
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	4619      	mov	r1, r3
 8002464:	4830      	ldr	r0, [pc, #192]	; (8002528 <MX_GPIO_Init+0x2cc>)
 8002466:	f002 fcb5 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800246a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800246e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800247c:	2306      	movs	r3, #6
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	4619      	mov	r1, r3
 8002486:	4828      	ldr	r0, [pc, #160]	; (8002528 <MX_GPIO_Init+0x2cc>)
 8002488:	f002 fca4 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800248c:	2320      	movs	r3, #32
 800248e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	4619      	mov	r1, r3
 800249e:	4823      	ldr	r0, [pc, #140]	; (800252c <MX_GPIO_Init+0x2d0>)
 80024a0:	f002 fc98 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80024a4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80024a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024aa:	2312      	movs	r3, #18
 80024ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ae:	2301      	movs	r3, #1
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024b6:	2304      	movs	r3, #4
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	4619      	mov	r1, r3
 80024c0:	481b      	ldr	r0, [pc, #108]	; (8002530 <MX_GPIO_Init+0x2d4>)
 80024c2:	f002 fc87 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 80024c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024cc:	2301      	movs	r3, #1
 80024ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	4619      	mov	r1, r3
 80024de:	4814      	ldr	r0, [pc, #80]	; (8002530 <MX_GPIO_Init+0x2d4>)
 80024e0:	f002 fc78 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80024e4:	2301      	movs	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	4619      	mov	r1, r3
 80024f6:	480b      	ldr	r0, [pc, #44]	; (8002524 <MX_GPIO_Init+0x2c8>)
 80024f8:	f002 fc6c 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80024fc:	2302      	movs	r3, #2
 80024fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002500:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	4619      	mov	r1, r3
 8002510:	4804      	ldr	r0, [pc, #16]	; (8002524 <MX_GPIO_Init+0x2c8>)
 8002512:	f002 fc5f 	bl	8004dd4 <HAL_GPIO_Init>

}
 8002516:	bf00      	nop
 8002518:	3730      	adds	r7, #48	; 0x30
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40021000 	.word	0x40021000
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40020400 	.word	0x40020400
 8002534:	40020000 	.word	0x40020000

08002538 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002540:	f00d f9c8 	bl	800f8d4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8002544:	200a      	movs	r0, #10
 8002546:	f00a f801 	bl	800c54c <osDelay>
 800254a:	e7fb      	b.n	8002544 <StartDefaultTask+0xc>

0800254c <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8002552:	af00      	add	r7, sp, #0
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8002558:	f241 3088 	movw	r0, #5000	; 0x1388
 800255c:	f009 fff6 	bl	800c54c <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8002560:	4a90      	ldr	r2, [pc, #576]	; (80027a4 <Start_Show_Resources+0x258>)
 8002562:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	4611      	mov	r1, r2
 800256a:	8019      	strh	r1, [r3, #0]
 800256c:	3302      	adds	r3, #2
 800256e:	0c12      	lsrs	r2, r2, #16
 8002570:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8002572:	232d      	movs	r3, #45	; 0x2d
 8002574:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  char buff[10] = {0};
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800257e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8002588:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800258c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f00e f811 	bl	80105ba <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8002598:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fe17 	bl	80001d0 <strlen>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025aa:	4413      	add	r3, r2
 80025ac:	4a7e      	ldr	r2, [pc, #504]	; (80027a8 <Start_Show_Resources+0x25c>)
 80025ae:	461d      	mov	r5, r3
 80025b0:	4614      	mov	r4, r2
 80025b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b4:	6028      	str	r0, [r5, #0]
 80025b6:	6069      	str	r1, [r5, #4]
 80025b8:	60aa      	str	r2, [r5, #8]
 80025ba:	60eb      	str	r3, [r5, #12]
 80025bc:	cc03      	ldmia	r4!, {r0, r1}
 80025be:	6128      	str	r0, [r5, #16]
 80025c0:	6169      	str	r1, [r5, #20]
 80025c2:	7823      	ldrb	r3, [r4, #0]
 80025c4:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 80025c6:	f00d f8bd 	bl	800f744 <xPortGetFreeHeapSize>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b77      	ldr	r3, [pc, #476]	; (80027ac <Start_Show_Resources+0x260>)
 80025d0:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 80025d2:	4b76      	ldr	r3, [pc, #472]	; (80027ac <Start_Show_Resources+0x260>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80025da:	220a      	movs	r2, #10
 80025dc:	4618      	mov	r0, r3
 80025de:	f00d ffd9 	bl	8010594 <itoa>
	  strcat(msg.Buf, buff);
 80025e2:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80025e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00e fd8e 	bl	801110e <strcat>
	  strcat(msg.Buf, str_end_of_line);
 80025f2:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 80025f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00e fd86 	bl	801110e <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 8002602:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd fde2 	bl	80001d0 <strlen>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002614:	4413      	add	r3, r2
 8002616:	4a66      	ldr	r2, [pc, #408]	; (80027b0 <Start_Show_Resources+0x264>)
 8002618:	4614      	mov	r4, r2
 800261a:	469c      	mov	ip, r3
 800261c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002620:	4665      	mov	r5, ip
 8002622:	4626      	mov	r6, r4
 8002624:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002626:	6028      	str	r0, [r5, #0]
 8002628:	6069      	str	r1, [r5, #4]
 800262a:	60aa      	str	r2, [r5, #8]
 800262c:	60eb      	str	r3, [r5, #12]
 800262e:	3410      	adds	r4, #16
 8002630:	f10c 0c10 	add.w	ip, ip, #16
 8002634:	4574      	cmp	r4, lr
 8002636:	d1f3      	bne.n	8002620 <Start_Show_Resources+0xd4>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8002638:	485e      	ldr	r0, [pc, #376]	; (80027b4 <Start_Show_Resources+0x268>)
 800263a:	f00c f84b 	bl	800e6d4 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8002644:	e004      	b.n	8002650 <Start_Show_Resources+0x104>
	  {
	  	buffer_size ++;
 8002646:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 800264a:	3301      	adds	r3, #1
 800264c:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8002650:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002654:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002658:	5cd3      	ldrb	r3, [r2, r3]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f3      	bne.n	8002646 <Start_Show_Resources+0xfa>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800266a:	e011      	b.n	8002690 <Start_Show_Resources+0x144>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 800266c:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002670:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002674:	4413      	add	r3, r2
 8002676:	494f      	ldr	r1, [pc, #316]	; (80027b4 <Start_Show_Resources+0x268>)
 8002678:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800267c:	440a      	add	r2, r1
 800267e:	7811      	ldrb	r1, [r2, #0]
 8002680:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002684:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002686:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800268a:	3301      	adds	r3, #1
 800268c:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002690:	4a48      	ldr	r2, [pc, #288]	; (80027b4 <Start_Show_Resources+0x268>)
 8002692:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002696:	4413      	add	r3, r2
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e6      	bne.n	800266c <Start_Show_Resources+0x120>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 800269e:	4b46      	ldr	r3, [pc, #280]	; (80027b8 <Start_Show_Resources+0x26c>)
 80026a0:	f207 4434 	addw	r4, r7, #1076	; 0x434
 80026a4:	461d      	mov	r5, r3
 80026a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ae:	c403      	stmia	r4!, {r0, r1}
 80026b0:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	4a41      	ldr	r2, [pc, #260]	; (80027bc <Start_Show_Resources+0x270>)
 80026b8:	461c      	mov	r4, r3
 80026ba:	4615      	mov	r5, r2
 80026bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80026c8:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 80026cc:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80026d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f00e fd19 	bl	801110e <strcat>
	  strcat(msg.Buf, str_head_2);
 80026dc:	f107 020c 	add.w	r2, r7, #12
 80026e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f00e fd11 	bl	801110e <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 80026ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f0:	2100      	movs	r1, #0
 80026f2:	4830      	ldr	r0, [pc, #192]	; (80027b4 <Start_Show_Resources+0x268>)
 80026f4:	f00d ff61 	bl	80105ba <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 80026f8:	482e      	ldr	r0, [pc, #184]	; (80027b4 <Start_Show_Resources+0x268>)
 80026fa:	f00c f881 	bl	800e800 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 80026fe:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002702:	b29a      	uxth	r2, r3
 8002704:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002708:	4413      	add	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	3340      	adds	r3, #64	; 0x40
 800270e:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002718:	e011      	b.n	800273e <Start_Show_Resources+0x1f2>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 800271a:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 800271e:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002722:	4413      	add	r3, r2
 8002724:	4923      	ldr	r1, [pc, #140]	; (80027b4 <Start_Show_Resources+0x268>)
 8002726:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800272a:	440a      	add	r2, r1
 800272c:	7811      	ldrb	r1, [r2, #0]
 800272e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002732:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002734:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002738:	3301      	adds	r3, #1
 800273a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <Start_Show_Resources+0x268>)
 8002740:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002744:	4413      	add	r3, r2
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e6      	bne.n	800271a <Start_Show_Resources+0x1ce>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 800274c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fd3d 	bl	80001d0 <strlen>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800275e:	4413      	add	r3, r2
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <Start_Show_Resources+0x274>)
 8002762:	4614      	mov	r4, r2
 8002764:	469c      	mov	ip, r3
 8002766:	f104 0e20 	add.w	lr, r4, #32
 800276a:	4665      	mov	r5, ip
 800276c:	4626      	mov	r6, r4
 800276e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002770:	6028      	str	r0, [r5, #0]
 8002772:	6069      	str	r1, [r5, #4]
 8002774:	60aa      	str	r2, [r5, #8]
 8002776:	60eb      	str	r3, [r5, #12]
 8002778:	3410      	adds	r4, #16
 800277a:	f10c 0c10 	add.w	ip, ip, #16
 800277e:	4574      	cmp	r4, lr
 8002780:	d1f3      	bne.n	800276a <Start_Show_Resources+0x21e>
 8002782:	4665      	mov	r5, ip
 8002784:	4623      	mov	r3, r4
 8002786:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002788:	6028      	str	r0, [r5, #0]
 800278a:	6069      	str	r1, [r5, #4]
 800278c:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <Start_Show_Resources+0x278>)
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800279a:	2200      	movs	r2, #0
 800279c:	f009 ff64 	bl	800c668 <osMessageQueuePut>
  {
 80027a0:	e6da      	b.n	8002558 <Start_Show_Resources+0xc>
 80027a2:	bf00      	nop
 80027a4:	0801335c 	.word	0x0801335c
 80027a8:	080132e0 	.word	0x080132e0
 80027ac:	20002788 	.word	0x20002788
 80027b0:	080132fc 	.word	0x080132fc
 80027b4:	200023a0 	.word	0x200023a0
 80027b8:	08013360 	.word	0x08013360
 80027bc:	0801337c 	.word	0x0801337c
 80027c0:	08013330 	.word	0x08013330
 80027c4:	200081cc 	.word	0x200081cc

080027c8 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <Start_UART_Task+0x58>)
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	f107 010c 	add.w	r1, r7, #12
 80027dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027e0:	2200      	movs	r2, #0
 80027e2:	f009 ffa1 	bl	800c728 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 80027ec:	e004      	b.n	80027f8 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 80027ee:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80027f2:	3301      	adds	r3, #1
 80027f4:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 80027f8:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80027fc:	f107 020c 	add.w	r2, r7, #12
 8002800:	5cd3      	ldrb	r3, [r2, r3]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f3      	bne.n	80027ee <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8002806:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 800280a:	f107 030c 	add.w	r3, r7, #12
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f00d f91d 	bl	800fa50 <CDC_Transmit_FS>
    osDelay(1);
 8002816:	2001      	movs	r0, #1
 8002818:	f009 fe98 	bl	800c54c <osDelay>
  {
 800281c:	e7da      	b.n	80027d4 <Start_UART_Task+0xc>
 800281e:	bf00      	nop
 8002820:	200081cc 	.word	0x200081cc

08002824 <Start_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD */
void Start_LCD(void *argument)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD */
  /* Infinite loop */

	// Init LCD
	TFT9341_ini(240, 320);
 800282c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002830:	20f0      	movs	r0, #240	; 0xf0
 8002832:	f7fe fd29 	bl	8001288 <TFT9341_ini>
	TFT9341_SetRotation(3);
 8002836:	2003      	movs	r0, #3
 8002838:	f7ff f88e 	bl	8001958 <TFT9341_SetRotation>
	TFT9341_SetTextColor(TFT9341_WHITE);
 800283c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002840:	f7fe ff46 	bl	80016d0 <TFT9341_SetTextColor>
	TFT9341_SetBackColor(TFT9341_BLUE);
 8002844:	201f      	movs	r0, #31
 8002846:	f7fe ff53 	bl	80016f0 <TFT9341_SetBackColor>
	TFT9341_FillScreen(TFT9341_BLUE);
 800284a:	201f      	movs	r0, #31
 800284c:	f7fe feea 	bl	8001624 <TFT9341_FillScreen>

	// Init names sensors
	TFT9341_String_DMA(2,30, "TEST ");
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <Start_LCD+0x40>)
 8002852:	211e      	movs	r1, #30
 8002854:	2002      	movs	r0, #2
 8002856:	f7ff f85b 	bl	8001910 <TFT9341_String_DMA>
	{




		osDelay(1000);
 800285a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800285e:	f009 fe75 	bl	800c54c <osDelay>
 8002862:	e7fa      	b.n	800285a <Start_LCD+0x36>
 8002864:	080133a4 	.word	0x080133a4

08002868 <Start_LCD_touchscreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD_touchscreen */
void Start_LCD_touchscreen(void *argument)
{
 8002868:	b5b0      	push	{r4, r5, r7, lr}
 800286a:	b0b2      	sub	sp, #200	; 0xc8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD_touchscreen */
  /* Infinite loop */
	LCDQUEUE msg;												// Make QUEUE
	memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002870:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002874:	2264      	movs	r2, #100	; 0x64
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f00d fe9e 	bl	80105ba <memset>
	char buffer[50] = {0};
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002886:	222e      	movs	r2, #46	; 0x2e
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f00d fe95 	bl	80105ba <memset>

	for(;;)
  	 {
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002890:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002894:	2264      	movs	r2, #100	; 0x64
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f00d fe8e 	bl	80105ba <memset>
	  //СЕНСОР ЕКРАНУ
	  if(TP_Touchpad_Pressed() == TOUCHPAD_PRESSED)
 800289e:	f7fe fc5d 	bl	800115c <TP_Touchpad_Pressed>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	f040 8091 	bne.w	80029cc <Start_LCD_touchscreen+0x164>
	  {
		  strcat(buffer, "PRESED ");
 80028aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fc8e 	bl	80001d0 <strlen>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461a      	mov	r2, r3
 80028b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028bc:	4413      	add	r3, r2
 80028be:	495e      	ldr	r1, [pc, #376]	; (8002a38 <Start_LCD_touchscreen+0x1d0>)
 80028c0:	461a      	mov	r2, r3
 80028c2:	460b      	mov	r3, r1
 80028c4:	cb03      	ldmia	r3!, {r0, r1}
 80028c6:	6010      	str	r0, [r2, #0]
 80028c8:	6051      	str	r1, [r2, #4]

		  uint16_t x_and_y[2] = {0};
 80028ca:	2300      	movs	r3, #0
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
		  uint8_t status_ts = TP_Read_Coordinates(x_and_y);
 80028ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fb6c 	bl	8000fb0 <TP_Read_Coordinates>
 80028d8:	4603      	mov	r3, r0
 80028da:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		  if(status_ts == TOUCHPAD_DATA_OK)
 80028de:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	f040 808c 	bne.w	8002a00 <Start_LCD_touchscreen+0x198>
		  {
			  // Convert coordinate from uint16_t format in string format
			  // And save it in main buffer
			  char buff_x_coordinates[6] = {0};
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	2300      	movs	r3, #0
 80028ee:	84bb      	strh	r3, [r7, #36]	; 0x24
			  char buff_y_coordinates[6] = {0};
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	2300      	movs	r3, #0
 80028f6:	83bb      	strh	r3, [r7, #28]
			  char buff_coordinates[15] = {0};
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	f8c3 2007 	str.w	r2, [r3, #7]

			  strcat(buff_x_coordinates, "x: ");
 800290a:	f107 0320 	add.w	r3, r7, #32
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fc5e 	bl	80001d0 <strlen>
 8002914:	4603      	mov	r3, r0
 8002916:	461a      	mov	r2, r3
 8002918:	f107 0320 	add.w	r3, r7, #32
 800291c:	4413      	add	r3, r2
 800291e:	4a47      	ldr	r2, [pc, #284]	; (8002a3c <Start_LCD_touchscreen+0x1d4>)
 8002920:	6810      	ldr	r0, [r2, #0]
 8002922:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[0], buff_x_coordinates, 10);
 8002924:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002926:	4618      	mov	r0, r3
 8002928:	f107 0320 	add.w	r3, r7, #32
 800292c:	220a      	movs	r2, #10
 800292e:	4619      	mov	r1, r3
 8002930:	f00d fe30 	bl	8010594 <itoa>
			  strcat(buff_x_coordinates, " ");
 8002934:	f107 0320 	add.w	r3, r7, #32
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fc49 	bl	80001d0 <strlen>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	f107 0320 	add.w	r3, r7, #32
 8002946:	4413      	add	r3, r2
 8002948:	493d      	ldr	r1, [pc, #244]	; (8002a40 <Start_LCD_touchscreen+0x1d8>)
 800294a:	461a      	mov	r2, r3
 800294c:	460b      	mov	r3, r1
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	8013      	strh	r3, [r2, #0]

			  strcat(buff_y_coordinates, "y: ");
 8002952:	f107 0318 	add.w	r3, r7, #24
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fc3a 	bl	80001d0 <strlen>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	f107 0318 	add.w	r3, r7, #24
 8002964:	4413      	add	r3, r2
 8002966:	4a37      	ldr	r2, [pc, #220]	; (8002a44 <Start_LCD_touchscreen+0x1dc>)
 8002968:	6810      	ldr	r0, [r2, #0]
 800296a:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[1], buff_y_coordinates, 10);
 800296c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800296e:	4618      	mov	r0, r3
 8002970:	f107 0318 	add.w	r3, r7, #24
 8002974:	220a      	movs	r2, #10
 8002976:	4619      	mov	r1, r3
 8002978:	f00d fe0c 	bl	8010594 <itoa>
			  strcat(buff_y_coordinates, " ");
 800297c:	f107 0318 	add.w	r3, r7, #24
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fc25 	bl	80001d0 <strlen>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	f107 0318 	add.w	r3, r7, #24
 800298e:	4413      	add	r3, r2
 8002990:	492b      	ldr	r1, [pc, #172]	; (8002a40 <Start_LCD_touchscreen+0x1d8>)
 8002992:	461a      	mov	r2, r3
 8002994:	460b      	mov	r3, r1
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	8013      	strh	r3, [r2, #0]

			  strcat(buff_coordinates, buff_x_coordinates);
 800299a:	f107 0220 	add.w	r2, r7, #32
 800299e:	f107 0308 	add.w	r3, r7, #8
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f00e fbb2 	bl	801110e <strcat>
			  strcat(buff_coordinates, buff_y_coordinates);
 80029aa:	f107 0218 	add.w	r2, r7, #24
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f00e fbaa 	bl	801110e <strcat>
			  strcat(buffer, buff_coordinates);
 80029ba:	f107 0208 	add.w	r2, r7, #8
 80029be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f00e fba2 	bl	801110e <strcat>
 80029ca:	e019      	b.n	8002a00 <Start_LCD_touchscreen+0x198>
		  }
	  }
	  else
	  {
		  strcat(buffer, "NO PRESS                  ");
 80029cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fbfd 	bl	80001d0 <strlen>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029de:	4413      	add	r3, r2
 80029e0:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <Start_LCD_touchscreen+0x1e0>)
 80029e2:	461d      	mov	r5, r3
 80029e4:	4614      	mov	r4, r2
 80029e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e8:	6028      	str	r0, [r5, #0]
 80029ea:	6069      	str	r1, [r5, #4]
 80029ec:	60aa      	str	r2, [r5, #8]
 80029ee:	60eb      	str	r3, [r5, #12]
 80029f0:	cc03      	ldmia	r4!, {r0, r1}
 80029f2:	6128      	str	r0, [r5, #16]
 80029f4:	6169      	str	r1, [r5, #20]
 80029f6:	8823      	ldrh	r3, [r4, #0]
 80029f8:	78a2      	ldrb	r2, [r4, #2]
 80029fa:	832b      	strh	r3, [r5, #24]
 80029fc:	4613      	mov	r3, r2
 80029fe:	76ab      	strb	r3, [r5, #26]
	  }

	  strcat(msg.buff, buffer);
 8002a00:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002a04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f00e fb7f 	bl	801110e <strcat>
	  osMessageQueuePut(LCDQueueHandle, &msg, 0, osWaitForever);  	// Write data on queue (In will print on StartUART_Task task)
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <Start_LCD_touchscreen+0x1e4>)
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f009 fe23 	bl	800c668 <osMessageQueuePut>
	  memset(buffer, 0, sizeof(buffer));
 8002a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a26:	2232      	movs	r2, #50	; 0x32
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f00d fdc5 	bl	80105ba <memset>

	  osDelay(200);
 8002a30:	20c8      	movs	r0, #200	; 0xc8
 8002a32:	f009 fd8b 	bl	800c54c <osDelay>
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002a36:	e72b      	b.n	8002890 <Start_LCD_touchscreen+0x28>
 8002a38:	080133ac 	.word	0x080133ac
 8002a3c:	080133b4 	.word	0x080133b4
 8002a40:	080133b8 	.word	0x080133b8
 8002a44:	080133bc 	.word	0x080133bc
 8002a48:	080133c0 	.word	0x080133c0
 8002a4c:	2000c354 	.word	0x2000c354

08002a50 <Start_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RTC */
void Start_RTC(void *argument)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b09a      	sub	sp, #104	; 0x68
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RTC */
  /* Infinite loop */
	osDelay(1000);
 8002a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a5c:	f009 fd76 	bl	800c54c <osDelay>
	oled_init();
 8002a60:	f001 f8e0 	bl	8003c24 <oled_init>
	oled_update();
 8002a64:	f001 f88a 	bl	8003b7c <oled_update>

	#define DEVICE_FOUND 0

	ds3231_I2C_init();
 8002a68:	f7ff f804 	bl	8001a74 <ds3231_I2C_init>

	for(;;)
	{
		// 1. Set time
		bool set_time = false;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if(set_time == true)
 8002a72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 829c 	bne.w	8002fb4 <Start_RTC+0x564>

		}
		else		// Print current time
		{
			// 1. Read time from RTS
			char time[20] = {0};
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
			char date[40] = {0};
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	f107 030c 	add.w	r3, r7, #12
 8002a96:	2224      	movs	r2, #36	; 0x24
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f00d fd8d 	bl	80105ba <memset>
			char time_buf[10] = {0};
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	809a      	strh	r2, [r3, #4]
			char time_buf_2[10] = {0};
 8002aae:	2300      	movs	r3, #0
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	809a      	strh	r2, [r3, #4]

			uint8_t seconds = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			uint8_t minutes = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			uint8_t hours = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			uint8_t day = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			uint8_t date_day = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			uint8_t mounth = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			uint8_t year = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

			ds3231_read(DS3231_REGISTER_SECONDS_DEFAULT, &seconds);
 8002ae6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8002aea:	4619      	mov	r1, r3
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fe ffc9 	bl	8001a84 <ds3231_read>
			ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &minutes);
 8002af2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8002af6:	4619      	mov	r1, r3
 8002af8:	2001      	movs	r0, #1
 8002afa:	f7fe ffc3 	bl	8001a84 <ds3231_read>
			ds3231_read(DS3231_REGISTER_HOURS_DEFAULT, &hours);
 8002afe:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8002b02:	4619      	mov	r1, r3
 8002b04:	2002      	movs	r0, #2
 8002b06:	f7fe ffbd 	bl	8001a84 <ds3231_read>

			ds3231_read(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &day);
 8002b0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b0e:	4619      	mov	r1, r3
 8002b10:	2003      	movs	r0, #3
 8002b12:	f7fe ffb7 	bl	8001a84 <ds3231_read>
			ds3231_read(DS3231_REGISTER_DATE_DEFAULT, &date_day);
 8002b16:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	2004      	movs	r0, #4
 8002b1e:	f7fe ffb1 	bl	8001a84 <ds3231_read>
			ds3231_read(DS3231_REGISTER_MONTH_DEFAULT, &mounth);
 8002b22:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002b26:	4619      	mov	r1, r3
 8002b28:	2005      	movs	r0, #5
 8002b2a:	f7fe ffab 	bl	8001a84 <ds3231_read>
			ds3231_read(DS3231_REGISTER_YEAR_DEFAULT, &year);
 8002b2e:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8002b32:	4619      	mov	r1, r3
 8002b34:	2006      	movs	r0, #6
 8002b36:	f7fe ffa5 	bl	8001a84 <ds3231_read>

			// Convert in string
			// Print minutes on OLED
			if(hours < 10)
 8002b3a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002b3e:	2b09      	cmp	r3, #9
 8002b40:	d836      	bhi.n	8002bb0 <Start_RTC+0x160>
			{
				memset(time_buf, 0, sizeof(time_buf));
 8002b42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b46:	220a      	movs	r2, #10
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f00d fd35 	bl	80105ba <memset>
				sprintf(time_buf, "%c", '0');
 8002b50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b54:	2230      	movs	r2, #48	; 0x30
 8002b56:	49e4      	ldr	r1, [pc, #912]	; (8002ee8 <Start_RTC+0x498>)
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f00e fa75 	bl	8011048 <siprintf>
				sprintf(time_buf_2, "%d", hours);
 8002b5e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002b62:	461a      	mov	r2, r3
 8002b64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b68:	49e0      	ldr	r1, [pc, #896]	; (8002eec <Start_RTC+0x49c>)
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f00e fa6c 	bl	8011048 <siprintf>
				strcat(time_buf, time_buf_2);
 8002b70:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f00e fac7 	bl	801110e <strcat>
				strcat(time, time_buf);
 8002b80:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002b84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f00e fabf 	bl	801110e <strcat>
				strcat(time, ":");
 8002b90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fb1b 	bl	80001d0 <strlen>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ba2:	4413      	add	r3, r2
 8002ba4:	49d2      	ldr	r1, [pc, #840]	; (8002ef0 <Start_RTC+0x4a0>)
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	460b      	mov	r3, r1
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	8013      	strh	r3, [r2, #0]
 8002bae:	e026      	b.n	8002bfe <Start_RTC+0x1ae>
			}
			else
			{
				sprintf(time_buf, "%d", hours);
 8002bb0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bba:	49cc      	ldr	r1, [pc, #816]	; (8002eec <Start_RTC+0x49c>)
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f00e fa43 	bl	8011048 <siprintf>
				strcat(time, time_buf);
 8002bc2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002bc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f00e fa9e 	bl	801110e <strcat>
				strcat(time, ":");
 8002bd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fafa 	bl	80001d0 <strlen>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002be4:	4413      	add	r3, r2
 8002be6:	49c2      	ldr	r1, [pc, #776]	; (8002ef0 <Start_RTC+0x4a0>)
 8002be8:	461a      	mov	r2, r3
 8002bea:	460b      	mov	r3, r1
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	8013      	strh	r3, [r2, #0]
				memset(time_buf, 0, sizeof(time_buf));
 8002bf0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bf4:	220a      	movs	r2, #10
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f00d fcde 	bl	80105ba <memset>
//			strcat(time, time_buf);
//			strcat(time, ":");
//			memset(time_buf, 0, sizeof(time_buf));

			// Print minutes on OLED
			if(minutes < 10)
 8002bfe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002c02:	2b09      	cmp	r3, #9
 8002c04:	d836      	bhi.n	8002c74 <Start_RTC+0x224>
			{
				memset(time_buf, 0, sizeof(time_buf));
 8002c06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c0a:	220a      	movs	r2, #10
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f00d fcd3 	bl	80105ba <memset>
				sprintf(time_buf, "%c", '0');
 8002c14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c18:	2230      	movs	r2, #48	; 0x30
 8002c1a:	49b3      	ldr	r1, [pc, #716]	; (8002ee8 <Start_RTC+0x498>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f00e fa13 	bl	8011048 <siprintf>
				sprintf(time_buf_2, "%d", minutes);
 8002c22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002c26:	461a      	mov	r2, r3
 8002c28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c2c:	49af      	ldr	r1, [pc, #700]	; (8002eec <Start_RTC+0x49c>)
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f00e fa0a 	bl	8011048 <siprintf>
				strcat(time_buf, time_buf_2);
 8002c34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f00e fa65 	bl	801110e <strcat>
				strcat(time, time_buf);
 8002c44:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002c48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f00e fa5d 	bl	801110e <strcat>
				strcat(time, ":");
 8002c54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fab9 	bl	80001d0 <strlen>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	461a      	mov	r2, r3
 8002c62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c66:	4413      	add	r3, r2
 8002c68:	49a1      	ldr	r1, [pc, #644]	; (8002ef0 <Start_RTC+0x4a0>)
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	8013      	strh	r3, [r2, #0]
 8002c72:	e026      	b.n	8002cc2 <Start_RTC+0x272>
			}
			else
			{
				sprintf(time_buf, "%d", minutes);
 8002c74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c7e:	499b      	ldr	r1, [pc, #620]	; (8002eec <Start_RTC+0x49c>)
 8002c80:	4618      	mov	r0, r3
 8002c82:	f00e f9e1 	bl	8011048 <siprintf>
				strcat(time, time_buf);
 8002c86:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002c8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f00e fa3c 	bl	801110e <strcat>
				strcat(time, ":");
 8002c96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fa98 	bl	80001d0 <strlen>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ca8:	4413      	add	r3, r2
 8002caa:	4991      	ldr	r1, [pc, #580]	; (8002ef0 <Start_RTC+0x4a0>)
 8002cac:	461a      	mov	r2, r3
 8002cae:	460b      	mov	r3, r1
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	8013      	strh	r3, [r2, #0]
				memset(time_buf, 0, sizeof(time_buf));
 8002cb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002cb8:	220a      	movs	r2, #10
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f00d fc7c 	bl	80105ba <memset>
//			strcat(time, time_buf);
//			strcat(time, ":");
//			memset(time_buf, 0, sizeof(time_buf));

			// Print seconds on OLED
			if(seconds == 0)
 8002cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <Start_RTC+0x282>
			{
				clear();
 8002cca:	f000 fe0f 	bl	80038ec <clear>
				oled_update();
 8002cce:	f000 ff55 	bl	8003b7c <oled_update>
			}
			if(seconds < 10)
 8002cd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cd6:	2b09      	cmp	r3, #9
 8002cd8:	d827      	bhi.n	8002d2a <Start_RTC+0x2da>
			{
				memset(time_buf, 0, sizeof(time_buf));
 8002cda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002cde:	220a      	movs	r2, #10
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f00d fc69 	bl	80105ba <memset>
				sprintf(time_buf, "%c", '0');
 8002ce8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002cec:	2230      	movs	r2, #48	; 0x30
 8002cee:	497e      	ldr	r1, [pc, #504]	; (8002ee8 <Start_RTC+0x498>)
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f00e f9a9 	bl	8011048 <siprintf>
				sprintf(time_buf_2, "%d", seconds);
 8002cf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d00:	497a      	ldr	r1, [pc, #488]	; (8002eec <Start_RTC+0x49c>)
 8002d02:	4618      	mov	r0, r3
 8002d04:	f00e f9a0 	bl	8011048 <siprintf>
				strcat(time_buf, time_buf_2);
 8002d08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f00e f9fb 	bl	801110e <strcat>
				strcat(time, time_buf);
 8002d18:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002d1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f00e f9f3 	bl	801110e <strcat>
 8002d28:	e017      	b.n	8002d5a <Start_RTC+0x30a>
			}
			else
			{
				sprintf(time_buf, "%d", seconds);
 8002d2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d34:	496d      	ldr	r1, [pc, #436]	; (8002eec <Start_RTC+0x49c>)
 8002d36:	4618      	mov	r0, r3
 8002d38:	f00e f986 	bl	8011048 <siprintf>
				strcat(time, time_buf);
 8002d3c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002d40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f00e f9e1 	bl	801110e <strcat>
				memset(time_buf, 0, sizeof(time_buf));
 8002d4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d50:	220a      	movs	r2, #10
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f00d fc30 	bl	80105ba <memset>
			}


			// Print date
			sprintf(time_buf, "%d", date_day);
 8002d5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d64:	4961      	ldr	r1, [pc, #388]	; (8002eec <Start_RTC+0x49c>)
 8002d66:	4618      	mov	r0, r3
 8002d68:	f00e f96e 	bl	8011048 <siprintf>
			strcat(date, time_buf);
 8002d6c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002d70:	f107 0308 	add.w	r3, r7, #8
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f00e f9c9 	bl	801110e <strcat>
			strcat(date, ":");
 8002d7c:	f107 0308 	add.w	r3, r7, #8
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fa25 	bl	80001d0 <strlen>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f107 0308 	add.w	r3, r7, #8
 8002d8e:	4413      	add	r3, r2
 8002d90:	4957      	ldr	r1, [pc, #348]	; (8002ef0 <Start_RTC+0x4a0>)
 8002d92:	461a      	mov	r2, r3
 8002d94:	460b      	mov	r3, r1
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	8013      	strh	r3, [r2, #0]
			memset(time_buf, 0, sizeof(time_buf));
 8002d9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d9e:	220a      	movs	r2, #10
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f00d fc09 	bl	80105ba <memset>

			sprintf(time_buf, "%d", mounth);
 8002da8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002dac:	461a      	mov	r2, r3
 8002dae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002db2:	494e      	ldr	r1, [pc, #312]	; (8002eec <Start_RTC+0x49c>)
 8002db4:	4618      	mov	r0, r3
 8002db6:	f00e f947 	bl	8011048 <siprintf>
			strcat(date, time_buf);
 8002dba:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002dbe:	f107 0308 	add.w	r3, r7, #8
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f00e f9a2 	bl	801110e <strcat>
			strcat(date, ":");
 8002dca:	f107 0308 	add.w	r3, r7, #8
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd f9fe 	bl	80001d0 <strlen>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f107 0308 	add.w	r3, r7, #8
 8002ddc:	4413      	add	r3, r2
 8002dde:	4944      	ldr	r1, [pc, #272]	; (8002ef0 <Start_RTC+0x4a0>)
 8002de0:	461a      	mov	r2, r3
 8002de2:	460b      	mov	r3, r1
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	8013      	strh	r3, [r2, #0]
			memset(time_buf, 0, sizeof(time_buf));
 8002de8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002dec:	220a      	movs	r2, #10
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f00d fbe2 	bl	80105ba <memset>

			sprintf(time_buf, "%d", year);
 8002df6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e00:	493a      	ldr	r1, [pc, #232]	; (8002eec <Start_RTC+0x49c>)
 8002e02:	4618      	mov	r0, r3
 8002e04:	f00e f920 	bl	8011048 <siprintf>
			strcat(date, "20");
 8002e08:	f107 0308 	add.w	r3, r7, #8
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd f9df 	bl	80001d0 <strlen>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	f107 0308 	add.w	r3, r7, #8
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4a35      	ldr	r2, [pc, #212]	; (8002ef4 <Start_RTC+0x4a4>)
 8002e1e:	8811      	ldrh	r1, [r2, #0]
 8002e20:	7892      	ldrb	r2, [r2, #2]
 8002e22:	8019      	strh	r1, [r3, #0]
 8002e24:	709a      	strb	r2, [r3, #2]
			strcat(date, time_buf);
 8002e26:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002e2a:	f107 0308 	add.w	r3, r7, #8
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f00e f96c 	bl	801110e <strcat>
			memset(time_buf, 0, sizeof(time_buf));
 8002e36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e3a:	220a      	movs	r2, #10
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f00d fbbb 	bl	80105ba <memset>

			// day
			switch (day)
 8002e44:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	2b06      	cmp	r3, #6
 8002e4c:	f200 80a2 	bhi.w	8002f94 <Start_RTC+0x544>
 8002e50:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <Start_RTC+0x408>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e75 	.word	0x08002e75
 8002e5c:	08002e97 	.word	0x08002e97
 8002e60:	08002ebd 	.word	0x08002ebd
 8002e64:	08002f05 	.word	0x08002f05
 8002e68:	08002f2b 	.word	0x08002f2b
 8002e6c:	08002f4d 	.word	0x08002f4d
 8002e70:	08002f73 	.word	0x08002f73
			{
				case 1:
					strcat(date, " Monday");
 8002e74:	f107 0308 	add.w	r3, r7, #8
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd f9a9 	bl	80001d0 <strlen>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	461a      	mov	r2, r3
 8002e82:	f107 0308 	add.w	r3, r7, #8
 8002e86:	4413      	add	r3, r2
 8002e88:	491b      	ldr	r1, [pc, #108]	; (8002ef8 <Start_RTC+0x4a8>)
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	cb03      	ldmia	r3!, {r0, r1}
 8002e90:	6010      	str	r0, [r2, #0]
 8002e92:	6051      	str	r1, [r2, #4]
					break;
 8002e94:	e07e      	b.n	8002f94 <Start_RTC+0x544>
				case 2:
					strcat(date, " Tuesday");
 8002e96:	f107 0308 	add.w	r3, r7, #8
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd f998 	bl	80001d0 <strlen>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f107 0308 	add.w	r3, r7, #8
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4914      	ldr	r1, [pc, #80]	; (8002efc <Start_RTC+0x4ac>)
 8002eac:	461a      	mov	r2, r3
 8002eae:	460b      	mov	r3, r1
 8002eb0:	cb03      	ldmia	r3!, {r0, r1}
 8002eb2:	6010      	str	r0, [r2, #0]
 8002eb4:	6051      	str	r1, [r2, #4]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	7213      	strb	r3, [r2, #8]
					break;
 8002eba:	e06b      	b.n	8002f94 <Start_RTC+0x544>
				case 3:
					strcat(date, " Wednesday");
 8002ebc:	f107 0308 	add.w	r3, r7, #8
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd f985 	bl	80001d0 <strlen>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f107 0308 	add.w	r3, r7, #8
 8002ece:	4413      	add	r3, r2
 8002ed0:	490b      	ldr	r1, [pc, #44]	; (8002f00 <Start_RTC+0x4b0>)
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	cb03      	ldmia	r3!, {r0, r1}
 8002ed8:	6010      	str	r0, [r2, #0]
 8002eda:	6051      	str	r1, [r2, #4]
 8002edc:	8819      	ldrh	r1, [r3, #0]
 8002ede:	789b      	ldrb	r3, [r3, #2]
 8002ee0:	8111      	strh	r1, [r2, #8]
 8002ee2:	7293      	strb	r3, [r2, #10]
					break;
 8002ee4:	e056      	b.n	8002f94 <Start_RTC+0x544>
 8002ee6:	bf00      	nop
 8002ee8:	080133dc 	.word	0x080133dc
 8002eec:	080133e0 	.word	0x080133e0
 8002ef0:	080133e4 	.word	0x080133e4
 8002ef4:	080133e8 	.word	0x080133e8
 8002ef8:	080133ec 	.word	0x080133ec
 8002efc:	080133f4 	.word	0x080133f4
 8002f00:	08013400 	.word	0x08013400
				case 4:
					strcat(date, " Thursday");
 8002f04:	f107 0308 	add.w	r3, r7, #8
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd f961 	bl	80001d0 <strlen>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	461a      	mov	r2, r3
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	4413      	add	r3, r2
 8002f18:	4929      	ldr	r1, [pc, #164]	; (8002fc0 <Start_RTC+0x570>)
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	cb03      	ldmia	r3!, {r0, r1}
 8002f20:	6010      	str	r0, [r2, #0]
 8002f22:	6051      	str	r1, [r2, #4]
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	8113      	strh	r3, [r2, #8]
					break;
 8002f28:	e034      	b.n	8002f94 <Start_RTC+0x544>
				case 5:
					strcat(date, " Friday");
 8002f2a:	f107 0308 	add.w	r3, r7, #8
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd f94e 	bl	80001d0 <strlen>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	f107 0308 	add.w	r3, r7, #8
 8002f3c:	4413      	add	r3, r2
 8002f3e:	4921      	ldr	r1, [pc, #132]	; (8002fc4 <Start_RTC+0x574>)
 8002f40:	461a      	mov	r2, r3
 8002f42:	460b      	mov	r3, r1
 8002f44:	cb03      	ldmia	r3!, {r0, r1}
 8002f46:	6010      	str	r0, [r2, #0]
 8002f48:	6051      	str	r1, [r2, #4]
					break;
 8002f4a:	e023      	b.n	8002f94 <Start_RTC+0x544>
				case 6:
					strcat(date, " Saturday");
 8002f4c:	f107 0308 	add.w	r3, r7, #8
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd f93d 	bl	80001d0 <strlen>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f107 0308 	add.w	r3, r7, #8
 8002f5e:	4413      	add	r3, r2
 8002f60:	4919      	ldr	r1, [pc, #100]	; (8002fc8 <Start_RTC+0x578>)
 8002f62:	461a      	mov	r2, r3
 8002f64:	460b      	mov	r3, r1
 8002f66:	cb03      	ldmia	r3!, {r0, r1}
 8002f68:	6010      	str	r0, [r2, #0]
 8002f6a:	6051      	str	r1, [r2, #4]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	8113      	strh	r3, [r2, #8]
					break;
 8002f70:	e010      	b.n	8002f94 <Start_RTC+0x544>
				case 7:
					strcat(date, " Sunday");
 8002f72:	f107 0308 	add.w	r3, r7, #8
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd f92a 	bl	80001d0 <strlen>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f107 0308 	add.w	r3, r7, #8
 8002f84:	4413      	add	r3, r2
 8002f86:	4911      	ldr	r1, [pc, #68]	; (8002fcc <Start_RTC+0x57c>)
 8002f88:	461a      	mov	r2, r3
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	cb03      	ldmia	r3!, {r0, r1}
 8002f8e:	6010      	str	r0, [r2, #0]
 8002f90:	6051      	str	r1, [r2, #4]
					break;
 8002f92:	bf00      	nop
			}

			graphics_text(40, 0, 3, time);
 8002f94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f98:	2203      	movs	r2, #3
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	2028      	movs	r0, #40	; 0x28
 8002f9e:	f000 fd39 	bl	8003a14 <graphics_text>
			graphics_text(0, 22, 2, date);
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	2116      	movs	r1, #22
 8002faa:	2000      	movs	r0, #0
 8002fac:	f000 fd32 	bl	8003a14 <graphics_text>
			oled_update();
 8002fb0:	f000 fde4 	bl	8003b7c <oled_update>
		}

		osDelay(1000);
 8002fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fb8:	f009 fac8 	bl	800c54c <osDelay>
	{
 8002fbc:	e556      	b.n	8002a6c <Start_RTC+0x1c>
 8002fbe:	bf00      	nop
 8002fc0:	0801340c 	.word	0x0801340c
 8002fc4:	08013418 	.word	0x08013418
 8002fc8:	08013420 	.word	0x08013420
 8002fcc:	0801342c 	.word	0x0801342c

08002fd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]




	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a09      	ldr	r2, [pc, #36]	; (8003004 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d104      	bne.n	8002fec <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	4a07      	ldr	r2, [pc, #28]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002fea:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a06      	ldr	r2, [pc, #24]	; (800300c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8002ff6:	f000 fed3 	bl	8003da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40000400 	.word	0x40000400
 8003008:	2000cd30 	.word	0x2000cd30
 800300c:	40002000 	.word	0x40002000

08003010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003014:	b672      	cpsid	i
}
 8003016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003018:	e7fe      	b.n	8003018 <Error_Handler+0x8>
	...

0800301c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_MspInit+0x54>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	4a11      	ldr	r2, [pc, #68]	; (8003070 <HAL_MspInit+0x54>)
 800302c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <HAL_MspInit+0x54>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_MspInit+0x54>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_MspInit+0x54>)
 8003048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_MspInit+0x54>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	210f      	movs	r1, #15
 800305e:	f06f 0001 	mvn.w	r0, #1
 8003062:	f001 fa1f 	bl	80044a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800

08003074 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <HAL_ADC_MspInit+0x7c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d127      	bne.n	80030e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <HAL_ADC_MspInit+0x80>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	4a15      	ldr	r2, [pc, #84]	; (80030f4 <HAL_ADC_MspInit+0x80>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a4:	6453      	str	r3, [r2, #68]	; 0x44
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_ADC_MspInit+0x80>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <HAL_ADC_MspInit+0x80>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <HAL_ADC_MspInit+0x80>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <HAL_ADC_MspInit+0x80>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030ce:	2302      	movs	r3, #2
 80030d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d2:	2303      	movs	r3, #3
 80030d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4619      	mov	r1, r3
 80030e0:	4805      	ldr	r0, [pc, #20]	; (80030f8 <HAL_ADC_MspInit+0x84>)
 80030e2:	f001 fe77 	bl	8004dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40012000 	.word	0x40012000
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40020400 	.word	0x40020400

080030fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08c      	sub	sp, #48	; 0x30
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 031c 	add.w	r3, r7, #28
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a42      	ldr	r2, [pc, #264]	; (8003224 <HAL_I2C_MspInit+0x128>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d12d      	bne.n	800317a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	4b41      	ldr	r3, [pc, #260]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a40      	ldr	r2, [pc, #256]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800313a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800313e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003140:	2312      	movs	r3, #18
 8003142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003148:	2303      	movs	r3, #3
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800314c:	2304      	movs	r3, #4
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003150:	f107 031c 	add.w	r3, r7, #28
 8003154:	4619      	mov	r1, r3
 8003156:	4835      	ldr	r0, [pc, #212]	; (800322c <HAL_I2C_MspInit+0x130>)
 8003158:	f001 fe3c 	bl	8004dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	4b31      	ldr	r3, [pc, #196]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	4a30      	ldr	r2, [pc, #192]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 8003166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800316a:	6413      	str	r3, [r2, #64]	; 0x40
 800316c:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003178:	e050      	b.n	800321c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2c      	ldr	r2, [pc, #176]	; (8003230 <HAL_I2C_MspInit+0x134>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d14b      	bne.n	800321c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	4b27      	ldr	r3, [pc, #156]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	4a26      	ldr	r2, [pc, #152]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 800318e:	f043 0304 	orr.w	r3, r3, #4
 8003192:	6313      	str	r3, [r2, #48]	; 0x30
 8003194:	4b24      	ldr	r3, [pc, #144]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	4a1f      	ldr	r2, [pc, #124]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6313      	str	r3, [r2, #48]	; 0x30
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c2:	2312      	movs	r3, #18
 80031c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ca:	2303      	movs	r3, #3
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031ce:	2304      	movs	r3, #4
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d2:	f107 031c 	add.w	r3, r7, #28
 80031d6:	4619      	mov	r1, r3
 80031d8:	4816      	ldr	r0, [pc, #88]	; (8003234 <HAL_I2C_MspInit+0x138>)
 80031da:	f001 fdfb 	bl	8004dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031e4:	2312      	movs	r3, #18
 80031e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ec:	2303      	movs	r3, #3
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031f0:	2304      	movs	r3, #4
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f4:	f107 031c 	add.w	r3, r7, #28
 80031f8:	4619      	mov	r1, r3
 80031fa:	480f      	ldr	r0, [pc, #60]	; (8003238 <HAL_I2C_MspInit+0x13c>)
 80031fc:	f001 fdea 	bl	8004dd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003200:	2300      	movs	r3, #0
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 800320a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800320e:	6413      	str	r3, [r2, #64]	; 0x40
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_I2C_MspInit+0x12c>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
}
 800321c:	bf00      	nop
 800321e:	3730      	adds	r7, #48	; 0x30
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40005800 	.word	0x40005800
 8003228:	40023800 	.word	0x40023800
 800322c:	40020400 	.word	0x40020400
 8003230:	40005c00 	.word	0x40005c00
 8003234:	40020800 	.word	0x40020800
 8003238:	40020000 	.word	0x40020000

0800323c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <HAL_RNG_MspInit+0x3c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10d      	bne.n	800326a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <HAL_RNG_MspInit+0x40>)
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_RNG_MspInit+0x40>)
 8003258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800325c:	6353      	str	r3, [r2, #52]	; 0x34
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <HAL_RNG_MspInit+0x40>)
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	50060800 	.word	0x50060800
 800327c:	40023800 	.word	0x40023800

08003280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	; 0x30
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003288:	f107 031c 	add.w	r3, r7, #28
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a5d      	ldr	r2, [pc, #372]	; (8003414 <HAL_SPI_MspInit+0x194>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d12c      	bne.n	80032fc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	4b5c      	ldr	r3, [pc, #368]	; (8003418 <HAL_SPI_MspInit+0x198>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	4a5b      	ldr	r2, [pc, #364]	; (8003418 <HAL_SPI_MspInit+0x198>)
 80032ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032b0:	6453      	str	r3, [r2, #68]	; 0x44
 80032b2:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_SPI_MspInit+0x198>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	4b55      	ldr	r3, [pc, #340]	; (8003418 <HAL_SPI_MspInit+0x198>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4a54      	ldr	r2, [pc, #336]	; (8003418 <HAL_SPI_MspInit+0x198>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6313      	str	r3, [r2, #48]	; 0x30
 80032ce:	4b52      	ldr	r3, [pc, #328]	; (8003418 <HAL_SPI_MspInit+0x198>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80032da:	23e0      	movs	r3, #224	; 0xe0
 80032dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	2302      	movs	r3, #2
 80032e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032e6:	2302      	movs	r3, #2
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032ea:	2305      	movs	r3, #5
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ee:	f107 031c 	add.w	r3, r7, #28
 80032f2:	4619      	mov	r1, r3
 80032f4:	4849      	ldr	r0, [pc, #292]	; (800341c <HAL_SPI_MspInit+0x19c>)
 80032f6:	f001 fd6d 	bl	8004dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80032fa:	e086      	b.n	800340a <HAL_SPI_MspInit+0x18a>
  else if(hspi->Instance==SPI2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a47      	ldr	r2, [pc, #284]	; (8003420 <HAL_SPI_MspInit+0x1a0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	f040 8081 	bne.w	800340a <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	4b42      	ldr	r3, [pc, #264]	; (8003418 <HAL_SPI_MspInit+0x198>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	4a41      	ldr	r2, [pc, #260]	; (8003418 <HAL_SPI_MspInit+0x198>)
 8003312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003316:	6413      	str	r3, [r2, #64]	; 0x40
 8003318:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_SPI_MspInit+0x198>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_SPI_MspInit+0x198>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4a3a      	ldr	r2, [pc, #232]	; (8003418 <HAL_SPI_MspInit+0x198>)
 800332e:	f043 0304 	orr.w	r3, r3, #4
 8003332:	6313      	str	r3, [r2, #48]	; 0x30
 8003334:	4b38      	ldr	r3, [pc, #224]	; (8003418 <HAL_SPI_MspInit+0x198>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	4b34      	ldr	r3, [pc, #208]	; (8003418 <HAL_SPI_MspInit+0x198>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	4a33      	ldr	r2, [pc, #204]	; (8003418 <HAL_SPI_MspInit+0x198>)
 800334a:	f043 0302 	orr.w	r3, r3, #2
 800334e:	6313      	str	r3, [r2, #48]	; 0x30
 8003350:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_SPI_MspInit+0x198>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800335c:	2304      	movs	r3, #4
 800335e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003360:	2302      	movs	r3, #2
 8003362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003368:	2303      	movs	r3, #3
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800336c:	2305      	movs	r3, #5
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003370:	f107 031c 	add.w	r3, r7, #28
 8003374:	4619      	mov	r1, r3
 8003376:	482b      	ldr	r0, [pc, #172]	; (8003424 <HAL_SPI_MspInit+0x1a4>)
 8003378:	f001 fd2c 	bl	8004dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800337c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338a:	2303      	movs	r3, #3
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800338e:	2305      	movs	r3, #5
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003392:	f107 031c 	add.w	r3, r7, #28
 8003396:	4619      	mov	r1, r3
 8003398:	4823      	ldr	r0, [pc, #140]	; (8003428 <HAL_SPI_MspInit+0x1a8>)
 800339a:	f001 fd1b 	bl	8004dd4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800339e:	4b23      	ldr	r3, [pc, #140]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033a0:	4a23      	ldr	r2, [pc, #140]	; (8003430 <HAL_SPI_MspInit+0x1b0>)
 80033a2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033ac:	2240      	movs	r2, #64	; 0x40
 80033ae:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b0:	4b1e      	ldr	r3, [pc, #120]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033bc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033be:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033c4:	4b19      	ldr	r3, [pc, #100]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80033ca:	4b18      	ldr	r3, [pc, #96]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033d2:	4b16      	ldr	r3, [pc, #88]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033d8:	4b14      	ldr	r3, [pc, #80]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033da:	2200      	movs	r2, #0
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80033de:	4813      	ldr	r0, [pc, #76]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033e0:	f001 f898 	bl	8004514 <HAL_DMA_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_SPI_MspInit+0x16e>
      Error_Handler();
 80033ea:	f7ff fe11 	bl	8003010 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a0e      	ldr	r2, [pc, #56]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033f2:	649a      	str	r2, [r3, #72]	; 0x48
 80033f4:	4a0d      	ldr	r2, [pc, #52]	; (800342c <HAL_SPI_MspInit+0x1ac>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80033fa:	2200      	movs	r2, #0
 80033fc:	2105      	movs	r1, #5
 80033fe:	2024      	movs	r0, #36	; 0x24
 8003400:	f001 f850 	bl	80044a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003404:	2024      	movs	r0, #36	; 0x24
 8003406:	f001 f869 	bl	80044dc <HAL_NVIC_EnableIRQ>
}
 800340a:	bf00      	nop
 800340c:	3730      	adds	r7, #48	; 0x30
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40013000 	.word	0x40013000
 8003418:	40023800 	.word	0x40023800
 800341c:	40020000 	.word	0x40020000
 8003420:	40003800 	.word	0x40003800
 8003424:	40020800 	.word	0x40020800
 8003428:	40020400 	.word	0x40020400
 800342c:	2000d060 	.word	0x2000d060
 8003430:	40026070 	.word	0x40026070

08003434 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a16      	ldr	r2, [pc, #88]	; (800349c <HAL_SPI_MspDeInit+0x68>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10a      	bne.n	800345c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_SPI_MspDeInit+0x6c>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <HAL_SPI_MspDeInit+0x6c>)
 800344c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003450:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8003452:	21e0      	movs	r1, #224	; 0xe0
 8003454:	4813      	ldr	r0, [pc, #76]	; (80034a4 <HAL_SPI_MspDeInit+0x70>)
 8003456:	f001 fe59 	bl	800510c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800345a:	e01b      	b.n	8003494 <HAL_SPI_MspDeInit+0x60>
  else if(hspi->Instance==SPI2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <HAL_SPI_MspDeInit+0x74>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d116      	bne.n	8003494 <HAL_SPI_MspDeInit+0x60>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <HAL_SPI_MspDeInit+0x6c>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	4a0d      	ldr	r2, [pc, #52]	; (80034a0 <HAL_SPI_MspDeInit+0x6c>)
 800346c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003470:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 8003472:	2104      	movs	r1, #4
 8003474:	480d      	ldr	r0, [pc, #52]	; (80034ac <HAL_SPI_MspDeInit+0x78>)
 8003476:	f001 fe49 	bl	800510c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 800347a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800347e:	480c      	ldr	r0, [pc, #48]	; (80034b0 <HAL_SPI_MspDeInit+0x7c>)
 8003480:	f001 fe44 	bl	800510c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003488:	4618      	mov	r0, r3
 800348a:	f001 f8f1 	bl	8004670 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 800348e:	2024      	movs	r0, #36	; 0x24
 8003490:	f001 f832 	bl	80044f8 <HAL_NVIC_DisableIRQ>
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40013000 	.word	0x40013000
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40020000 	.word	0x40020000
 80034a8:	40003800 	.word	0x40003800
 80034ac:	40020800 	.word	0x40020800
 80034b0:	40020400 	.word	0x40020400

080034b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1c      	ldr	r2, [pc, #112]	; (8003534 <HAL_TIM_Base_MspInit+0x80>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d116      	bne.n	80034f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_TIM_Base_MspInit+0x84>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <HAL_TIM_Base_MspInit+0x84>)
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	6413      	str	r3, [r2, #64]	; 0x40
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <HAL_TIM_Base_MspInit+0x84>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2105      	movs	r1, #5
 80034e6:	201d      	movs	r0, #29
 80034e8:	f000 ffdc 	bl	80044a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034ec:	201d      	movs	r0, #29
 80034ee:	f000 fff5 	bl	80044dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80034f2:	e01a      	b.n	800352a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a10      	ldr	r2, [pc, #64]	; (800353c <HAL_TIM_Base_MspInit+0x88>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d115      	bne.n	800352a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <HAL_TIM_Base_MspInit+0x84>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	4a0c      	ldr	r2, [pc, #48]	; (8003538 <HAL_TIM_Base_MspInit+0x84>)
 8003508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350c:	6453      	str	r3, [r2, #68]	; 0x44
 800350e:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <HAL_TIM_Base_MspInit+0x84>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800351a:	2200      	movs	r2, #0
 800351c:	2105      	movs	r1, #5
 800351e:	2019      	movs	r0, #25
 8003520:	f000 ffc0 	bl	80044a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003524:	2019      	movs	r0, #25
 8003526:	f000 ffd9 	bl	80044dc <HAL_NVIC_EnableIRQ>
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40000400 	.word	0x40000400
 8003538:	40023800 	.word	0x40023800
 800353c:	40014400 	.word	0x40014400

08003540 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08c      	sub	sp, #48	; 0x30
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8003550:	2200      	movs	r2, #0
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	202d      	movs	r0, #45	; 0x2d
 8003556:	f000 ffa5 	bl	80044a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800355a:	202d      	movs	r0, #45	; 0x2d
 800355c:	f000 ffbe 	bl	80044dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <HAL_InitTick+0xa4>)
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <HAL_InitTick+0xa4>)
 800356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356e:	6413      	str	r3, [r2, #64]	; 0x40
 8003570:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <HAL_InitTick+0xa4>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800357c:	f107 0210 	add.w	r2, r7, #16
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f004 fc80 	bl	8007e8c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800358c:	f004 fc6a 	bl	8007e64 <HAL_RCC_GetPCLK1Freq>
 8003590:	4603      	mov	r3, r0
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <HAL_InitTick+0xa8>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	0c9b      	lsrs	r3, r3, #18
 80035a0:	3b01      	subs	r3, #1
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_InitTick+0xac>)
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_InitTick+0xb0>)
 80035a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_InitTick+0xac>)
 80035ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035b0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80035b2:	4a0e      	ldr	r2, [pc, #56]	; (80035ec <HAL_InitTick+0xac>)
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_InitTick+0xac>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_InitTick+0xac>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80035c4:	4809      	ldr	r0, [pc, #36]	; (80035ec <HAL_InitTick+0xac>)
 80035c6:	f005 fa15 	bl	80089f4 <HAL_TIM_Base_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80035d0:	4806      	ldr	r0, [pc, #24]	; (80035ec <HAL_InitTick+0xac>)
 80035d2:	f005 fa5f 	bl	8008a94 <HAL_TIM_Base_Start_IT>
 80035d6:	4603      	mov	r3, r0
 80035d8:	e000      	b.n	80035dc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3730      	adds	r7, #48	; 0x30
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	431bde83 	.word	0x431bde83
 80035ec:	2000d384 	.word	0x2000d384
 80035f0:	40002000 	.word	0x40002000

080035f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035f8:	e7fe      	b.n	80035f8 <NMI_Handler+0x4>

080035fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035fe:	e7fe      	b.n	80035fe <HardFault_Handler+0x4>

08003600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003604:	e7fe      	b.n	8003604 <MemManage_Handler+0x4>

08003606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800360a:	e7fe      	b.n	800360a <BusFault_Handler+0x4>

0800360c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003610:	e7fe      	b.n	8003610 <UsageFault_Handler+0x4>

08003612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003624:	4802      	ldr	r0, [pc, #8]	; (8003630 <DMA1_Stream4_IRQHandler+0x10>)
 8003626:	f001 f96b 	bl	8004900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	2000d060 	.word	0x2000d060

08003634 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003638:	4802      	ldr	r0, [pc, #8]	; (8003644 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800363a:	f005 fa9b 	bl	8008b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	2000777c 	.word	0x2000777c

08003648 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800364c:	4802      	ldr	r0, [pc, #8]	; (8003658 <TIM3_IRQHandler+0x10>)
 800364e:	f005 fa91 	bl	8008b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	2000aa90 	.word	0x2000aa90

0800365c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <SPI2_IRQHandler+0x10>)
 8003662:	f004 ff53 	bl	800850c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200076d4 	.word	0x200076d4

08003670 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003676:	f005 fa7d 	bl	8008b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	2000d384 	.word	0x2000d384

08003684 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <OTG_FS_IRQHandler+0x10>)
 800368a:	f002 ff6c 	bl	8006566 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2000eae0 	.word	0x2000eae0

08003698 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
	return 1;
 800369c:	2301      	movs	r3, #1
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <_kill>:

int _kill(int pid, int sig)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036b2:	f00c fe37 	bl	8010324 <__errno>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2216      	movs	r2, #22
 80036ba:	601a      	str	r2, [r3, #0]
	return -1;
 80036bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <_exit>:

void _exit (int status)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff ffe7 	bl	80036a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036da:	e7fe      	b.n	80036da <_exit+0x12>

080036dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e00a      	b.n	8003704 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036ee:	f3af 8000 	nop.w
 80036f2:	4601      	mov	r1, r0
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	60ba      	str	r2, [r7, #8]
 80036fa:	b2ca      	uxtb	r2, r1
 80036fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	3301      	adds	r3, #1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	429a      	cmp	r2, r3
 800370a:	dbf0      	blt.n	80036ee <_read+0x12>
	}

return len;
 800370c:	687b      	ldr	r3, [r7, #4]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b086      	sub	sp, #24
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e009      	b.n	800373c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	60ba      	str	r2, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	3301      	adds	r3, #1
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	dbf1      	blt.n	8003728 <_write+0x12>
	}
	return len;
 8003744:	687b      	ldr	r3, [r7, #4]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <_close>:

int _close(int file)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
	return -1;
 8003756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003776:	605a      	str	r2, [r3, #4]
	return 0;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <_isatty>:

int _isatty(int file)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
	return 1;
 800378e:	2301      	movs	r3, #1
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
	return 0;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c0:	4a14      	ldr	r2, [pc, #80]	; (8003814 <_sbrk+0x5c>)
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <_sbrk+0x60>)
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <_sbrk+0x64>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <_sbrk+0x64>)
 80037d6:	4a12      	ldr	r2, [pc, #72]	; (8003820 <_sbrk+0x68>)
 80037d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <_sbrk+0x64>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d207      	bcs.n	80037f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037e8:	f00c fd9c 	bl	8010324 <__errno>
 80037ec:	4603      	mov	r3, r0
 80037ee:	220c      	movs	r2, #12
 80037f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037f6:	e009      	b.n	800380c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <_sbrk+0x64>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <_sbrk+0x64>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	4a05      	ldr	r2, [pc, #20]	; (800381c <_sbrk+0x64>)
 8003808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800380a:	68fb      	ldr	r3, [r7, #12]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20020000 	.word	0x20020000
 8003818:	00000900 	.word	0x00000900
 800381c:	20002790 	.word	0x20002790
 8003820:	2000eef8 	.word	0x2000eef8

08003824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <SystemInit+0x20>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <SystemInit+0x20>)
 8003830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
 8003852:	460b      	mov	r3, r1
 8003854:	71bb      	strb	r3, [r7, #6]
 8003856:	4613      	mov	r3, r2
 8003858:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db3b      	blt.n	80038da <draw_pixel+0x92>
 8003862:	79bb      	ldrb	r3, [r7, #6]
 8003864:	2b1f      	cmp	r3, #31
 8003866:	d838      	bhi.n	80038da <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 800386c:	79bb      	ldrb	r3, [r7, #6]
 800386e:	08db      	lsrs	r3, r3, #3
 8003870:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	79bb      	ldrb	r3, [r7, #6]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	737b      	strb	r3, [r7, #13]
		if(color)
 8003880:	797b      	ldrb	r3, [r7, #5]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d012      	beq.n	80038ac <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8003886:	7bba      	ldrb	r2, [r7, #14]
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	4917      	ldr	r1, [pc, #92]	; (80038e8 <draw_pixel+0xa0>)
 800388c:	01d2      	lsls	r2, r2, #7
 800388e:	440a      	add	r2, r1
 8003890:	4413      	add	r3, r2
 8003892:	7818      	ldrb	r0, [r3, #0]
 8003894:	7bba      	ldrb	r2, [r7, #14]
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	7b79      	ldrb	r1, [r7, #13]
 800389a:	4301      	orrs	r1, r0
 800389c:	b2c8      	uxtb	r0, r1
 800389e:	4912      	ldr	r1, [pc, #72]	; (80038e8 <draw_pixel+0xa0>)
 80038a0:	01d2      	lsls	r2, r2, #7
 80038a2:	440a      	add	r2, r1
 80038a4:	4413      	add	r3, r2
 80038a6:	4602      	mov	r2, r0
 80038a8:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 80038aa:	e016      	b.n	80038da <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 80038ac:	7bba      	ldrb	r2, [r7, #14]
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	490d      	ldr	r1, [pc, #52]	; (80038e8 <draw_pixel+0xa0>)
 80038b2:	01d2      	lsls	r2, r2, #7
 80038b4:	440a      	add	r2, r1
 80038b6:	4413      	add	r3, r2
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	b25a      	sxtb	r2, r3
 80038bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	b25b      	sxtb	r3, r3
 80038c4:	4013      	ands	r3, r2
 80038c6:	b259      	sxtb	r1, r3
 80038c8:	7bba      	ldrb	r2, [r7, #14]
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	b2c8      	uxtb	r0, r1
 80038ce:	4906      	ldr	r1, [pc, #24]	; (80038e8 <draw_pixel+0xa0>)
 80038d0:	01d2      	lsls	r2, r2, #7
 80038d2:	440a      	add	r2, r1
 80038d4:	4413      	add	r3, r2
 80038d6:	4602      	mov	r2, r0
 80038d8:	701a      	strb	r2, [r3, #0]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	2000d3cc 	.word	0x2000d3cc

080038ec <clear>:
		for(j=y0;j<y1;j++)
			invert_pixel(i,j);
}

void clear(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i=0;i<4;i++)
 80038f2:	2300      	movs	r3, #0
 80038f4:	71fb      	strb	r3, [r7, #7]
 80038f6:	e014      	b.n	8003922 <clear+0x36>
		for(j=0;j<128;j++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	71bb      	strb	r3, [r7, #6]
 80038fc:	e00a      	b.n	8003914 <clear+0x28>
			gddram[i][j]=0x00;
 80038fe:	79fa      	ldrb	r2, [r7, #7]
 8003900:	79bb      	ldrb	r3, [r7, #6]
 8003902:	490d      	ldr	r1, [pc, #52]	; (8003938 <clear+0x4c>)
 8003904:	01d2      	lsls	r2, r2, #7
 8003906:	440a      	add	r2, r1
 8003908:	4413      	add	r3, r2
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
		for(j=0;j<128;j++)
 800390e:	79bb      	ldrb	r3, [r7, #6]
 8003910:	3301      	adds	r3, #1
 8003912:	71bb      	strb	r3, [r7, #6]
 8003914:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	daf0      	bge.n	80038fe <clear+0x12>
	for(i=0;i<4;i++)
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	3301      	adds	r3, #1
 8003920:	71fb      	strb	r3, [r7, #7]
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d9e7      	bls.n	80038f8 <clear+0xc>
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	2000d3cc 	.word	0x2000d3cc

0800393c <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	4604      	mov	r4, r0
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
 8003948:	461a      	mov	r2, r3
 800394a:	4623      	mov	r3, r4
 800394c:	71fb      	strb	r3, [r7, #7]
 800394e:	4603      	mov	r3, r0
 8003950:	71bb      	strb	r3, [r7, #6]
 8003952:	460b      	mov	r3, r1
 8003954:	717b      	strb	r3, [r7, #5]
 8003956:	4613      	mov	r3, r2
 8003958:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]
 8003962:	e04d      	b.n	8003a00 <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 8003964:	2300      	movs	r3, #0
 8003966:	75bb      	strb	r3, [r7, #22]
 8003968:	e042      	b.n	80039f0 <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 800396a:	7dfb      	ldrb	r3, [r7, #23]
 800396c:	08db      	lsrs	r3, r3, #3
 800396e:	b2da      	uxtb	r2, r3
 8003970:	7dbb      	ldrb	r3, [r7, #22]
 8003972:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003976:	fb11 f303 	smulbb	r3, r1, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	4413      	add	r3, r2
 800397e:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	43db      	mvns	r3, r3
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	2201      	movs	r2, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 800399a:	7bba      	ldrb	r2, [r7, #14]
 800399c:	7b7b      	ldrb	r3, [r7, #13]
 800399e:	4013      	ands	r3, r2
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00f      	beq.n	80039c6 <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 80039a6:	79fa      	ldrb	r2, [r7, #7]
 80039a8:	797b      	ldrb	r3, [r7, #5]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	4413      	add	r3, r2
 80039b2:	b2d8      	uxtb	r0, r3
 80039b4:	7dba      	ldrb	r2, [r7, #22]
 80039b6:	79bb      	ldrb	r3, [r7, #6]
 80039b8:	4413      	add	r3, r2
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2201      	movs	r2, #1
 80039be:	4619      	mov	r1, r3
 80039c0:	f7ff ff42 	bl	8003848 <draw_pixel>
 80039c4:	e00e      	b.n	80039e4 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 80039c6:	79fa      	ldrb	r2, [r7, #7]
 80039c8:	797b      	ldrb	r3, [r7, #5]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	4413      	add	r3, r2
 80039d2:	b2d8      	uxtb	r0, r3
 80039d4:	7dba      	ldrb	r2, [r7, #22]
 80039d6:	79bb      	ldrb	r3, [r7, #6]
 80039d8:	4413      	add	r3, r2
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	4619      	mov	r1, r3
 80039e0:	f7ff ff32 	bl	8003848 <draw_pixel>
		for (y=0; y<height; y++)
 80039e4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	75bb      	strb	r3, [r7, #22]
 80039f0:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80039f4:	793b      	ldrb	r3, [r7, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	dbb7      	blt.n	800396a <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	3301      	adds	r3, #1
 80039fe:	75fb      	strb	r3, [r7, #23]
 8003a00:	7dfa      	ldrb	r2, [r7, #23]
 8003a02:	797b      	ldrb	r3, [r7, #5]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d3ad      	bcc.n	8003964 <graphics_Glyph+0x28>
		}
	}
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd90      	pop	{r4, r7, pc}
	...

08003a14 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b089      	sub	sp, #36	; 0x24
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	71fb      	strb	r3, [r7, #7]
 8003a20:	460b      	mov	r3, r1
 8003a22:	71bb      	strb	r3, [r7, #6]
 8003a24:	4613      	mov	r3, r2
 8003a26:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 8003a2c:	e081      	b.n	8003b32 <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 8003a34:	797a      	ldrb	r2, [r7, #5]
 8003a36:	4944      	ldr	r1, [pc, #272]	; (8003b48 <graphics_text+0x134>)
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3310      	adds	r3, #16
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	7dba      	ldrb	r2, [r7, #22]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d30b      	bcc.n	8003a64 <graphics_text+0x50>
 8003a4c:	797a      	ldrb	r2, [r7, #5]
 8003a4e:	493e      	ldr	r1, [pc, #248]	; (8003b48 <graphics_text+0x134>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3311      	adds	r3, #17
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	7dba      	ldrb	r2, [r7, #22]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d909      	bls.n	8003a78 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 8003a64:	797a      	ldrb	r2, [r7, #5]
 8003a66:	4938      	ldr	r1, [pc, #224]	; (8003b48 <graphics_text+0x134>)
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3312      	adds	r3, #18
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 8003a78:	797a      	ldrb	r2, [r7, #5]
 8003a7a:	4933      	ldr	r1, [pc, #204]	; (8003b48 <graphics_text+0x134>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3310      	adds	r3, #16
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	7dba      	ldrb	r2, [r7, #22]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 8003a90:	797a      	ldrb	r2, [r7, #5]
 8003a92:	492d      	ldr	r1, [pc, #180]	; (8003b48 <graphics_text+0x134>)
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8003aa4:	7d7b      	ldrb	r3, [r7, #21]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10c      	bne.n	8003ac4 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 8003aaa:	797a      	ldrb	r2, [r7, #5]
 8003aac:	4926      	ldr	r1, [pc, #152]	; (8003b48 <graphics_text+0x134>)
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	330c      	adds	r3, #12
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	7dbb      	ldrb	r3, [r7, #22]
 8003abe:	4413      	add	r3, r2
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8003ac4:	797a      	ldrb	r2, [r7, #5]
 8003ac6:	4920      	ldr	r1, [pc, #128]	; (8003b48 <graphics_text+0x134>)
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 8003ad8:	797a      	ldrb	r2, [r7, #5]
 8003ada:	491b      	ldr	r1, [pc, #108]	; (8003b48 <graphics_text+0x134>)
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 8003aea:	797a      	ldrb	r2, [r7, #5]
 8003aec:	4916      	ldr	r1, [pc, #88]	; (8003b48 <graphics_text+0x134>)
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	3304      	adds	r3, #4
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	7dbb      	ldrb	r3, [r7, #22]
 8003afe:	7cf9      	ldrb	r1, [r7, #19]
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	7d39      	ldrb	r1, [r7, #20]
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]


		x+=width;
 8003b0e:	7dfa      	ldrb	r2, [r7, #23]
 8003b10:	7d7b      	ldrb	r3, [r7, #21]
 8003b12:	4413      	add	r3, r2
 8003b14:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 8003b16:	7d3c      	ldrb	r4, [r7, #20]
 8003b18:	7d7a      	ldrb	r2, [r7, #21]
 8003b1a:	79b9      	ldrb	r1, [r7, #6]
 8003b1c:	7df8      	ldrb	r0, [r7, #23]
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	4623      	mov	r3, r4
 8003b28:	f7ff ff08 	bl	800393c <graphics_Glyph>
		str++;								/* point to next character in string */
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f47f af79 	bne.w	8003a2e <graphics_text+0x1a>
	}

}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd90      	pop	{r4, r7, pc}
 8003b46:	bf00      	nop
 8003b48:	080172b8 	.word	0x080172b8

08003b4c <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 8003b56:	2300      	movs	r3, #0
 8003b58:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 8003b5e:	f107 020c 	add.w	r2, r7, #12
 8003b62:	2332      	movs	r3, #50	; 0x32
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2302      	movs	r3, #2
 8003b68:	2178      	movs	r1, #120	; 0x78
 8003b6a:	4803      	ldr	r0, [pc, #12]	; (8003b78 <ssd1306_command+0x2c>)
 8003b6c:	f001 fd40 	bl	80055f0 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20007630 	.word	0x20007630

08003b7c <oled_update>:

void oled_update(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 8003b82:	2021      	movs	r0, #33	; 0x21
 8003b84:	f7ff ffe2 	bl	8003b4c <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 8003b88:	2000      	movs	r0, #0
 8003b8a:	f7ff ffdf 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 8003b8e:	207f      	movs	r0, #127	; 0x7f
 8003b90:	f7ff ffdc 	bl	8003b4c <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8003b94:	2022      	movs	r0, #34	; 0x22
 8003b96:	f7ff ffd9 	bl	8003b4c <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f7ff ffd6 	bl	8003b4c <ssd1306_command>
  ssd1306_command(3); // Page end address
 8003ba0:	2003      	movs	r0, #3
 8003ba2:	f7ff ffd3 	bl	8003b4c <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 8003ba6:	2340      	movs	r3, #64	; 0x40
 8003ba8:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	82fb      	strh	r3, [r7, #22]
 8003bae:	e02d      	b.n	8003c0c <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	757b      	strb	r3, [r7, #21]
 8003bb4:	e024      	b.n	8003c00 <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	753b      	strb	r3, [r7, #20]
 8003bba:	e012      	b.n	8003be2 <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8003bbc:	8af9      	ldrh	r1, [r7, #22]
 8003bbe:	7d7a      	ldrb	r2, [r7, #21]
 8003bc0:	7d3b      	ldrb	r3, [r7, #20]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	1e5a      	subs	r2, r3, #1
 8003bc6:	7d3b      	ldrb	r3, [r7, #20]
 8003bc8:	4814      	ldr	r0, [pc, #80]	; (8003c1c <oled_update+0xa0>)
 8003bca:	01c9      	lsls	r1, r1, #7
 8003bcc:	4401      	add	r1, r0
 8003bce:	440a      	add	r2, r1
 8003bd0:	7812      	ldrb	r2, [r2, #0]
 8003bd2:	f107 0118 	add.w	r1, r7, #24
 8003bd6:	440b      	add	r3, r1
 8003bd8:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8003bdc:	7d3b      	ldrb	r3, [r7, #20]
 8003bde:	3301      	adds	r3, #1
 8003be0:	753b      	strb	r3, [r7, #20]
 8003be2:	7d3b      	ldrb	r3, [r7, #20]
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d9e9      	bls.n	8003bbc <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 8003be8:	463a      	mov	r2, r7
 8003bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2311      	movs	r3, #17
 8003bf2:	2178      	movs	r1, #120	; 0x78
 8003bf4:	480a      	ldr	r0, [pc, #40]	; (8003c20 <oled_update+0xa4>)
 8003bf6:	f001 fcfb 	bl	80055f0 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 8003bfa:	7d7b      	ldrb	r3, [r7, #21]
 8003bfc:	3310      	adds	r3, #16
 8003bfe:	757b      	strb	r3, [r7, #21]
 8003c00:	7d7b      	ldrb	r3, [r7, #21]
 8003c02:	2b7e      	cmp	r3, #126	; 0x7e
 8003c04:	d9d7      	bls.n	8003bb6 <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 8003c06:	8afb      	ldrh	r3, [r7, #22]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	82fb      	strh	r3, [r7, #22]
 8003c0c:	8afb      	ldrh	r3, [r7, #22]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d9ce      	bls.n	8003bb0 <oled_update+0x34>
		}
	}

}
 8003c12:	bf00      	nop
 8003c14:	bf00      	nop
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	2000d3cc 	.word	0x2000d3cc
 8003c20:	20007630 	.word	0x20007630

08003c24 <oled_init>:

void oled_init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8003c2a:	20ae      	movs	r0, #174	; 0xae
 8003c2c:	f7ff ff8e 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8003c30:	20d5      	movs	r0, #213	; 0xd5
 8003c32:	f7ff ff8b 	bl	8003b4c <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 8003c36:	2080      	movs	r0, #128	; 0x80
 8003c38:	f7ff ff88 	bl	8003b4c <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8003c3c:	20a8      	movs	r0, #168	; 0xa8
 8003c3e:	f7ff ff85 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 8003c42:	201f      	movs	r0, #31
 8003c44:	f7ff ff82 	bl	8003b4c <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8003c48:	20d3      	movs	r0, #211	; 0xd3
 8003c4a:	f7ff ff7f 	bl	8003b4c <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f7ff ff7c 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8003c54:	2040      	movs	r0, #64	; 0x40
 8003c56:	f7ff ff79 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8003c5a:	208d      	movs	r0, #141	; 0x8d
 8003c5c:	f7ff ff76 	bl	8003b4c <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 8003c60:	2014      	movs	r0, #20
 8003c62:	f7ff ff73 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8003c66:	2020      	movs	r0, #32
 8003c68:	f7ff ff70 	bl	8003b4c <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f7ff ff6d 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 8003c72:	20a1      	movs	r0, #161	; 0xa1
 8003c74:	f7ff ff6a 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 8003c78:	20c8      	movs	r0, #200	; 0xc8
 8003c7a:	f7ff ff67 	bl	8003b4c <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 8003c7e:	20da      	movs	r0, #218	; 0xda
 8003c80:	f7ff ff64 	bl	8003b4c <ssd1306_command>
  ssd1306_command(0x02);
 8003c84:	2002      	movs	r0, #2
 8003c86:	f7ff ff61 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 8003c8a:	2081      	movs	r0, #129	; 0x81
 8003c8c:	f7ff ff5e 	bl	8003b4c <ssd1306_command>
  ssd1306_command(0x8F);
 8003c90:	208f      	movs	r0, #143	; 0x8f
 8003c92:	f7ff ff5b 	bl	8003b4c <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8003c96:	20d9      	movs	r0, #217	; 0xd9
 8003c98:	f7ff ff58 	bl	8003b4c <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8003c9c:	20f1      	movs	r0, #241	; 0xf1
 8003c9e:	f7ff ff55 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8003ca2:	20db      	movs	r0, #219	; 0xdb
 8003ca4:	f7ff ff52 	bl	8003b4c <ssd1306_command>
  ssd1306_command(0x40);
 8003ca8:	2040      	movs	r0, #64	; 0x40
 8003caa:	f7ff ff4f 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 8003cae:	20a4      	movs	r0, #164	; 0xa4
 8003cb0:	f7ff ff4c 	bl	8003b4c <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8003cb4:	20a6      	movs	r0, #166	; 0xa6
 8003cb6:	f7ff ff49 	bl	8003b4c <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 8003cba:	202e      	movs	r0, #46	; 0x2e
 8003cbc:	f7ff ff46 	bl	8003b4c <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8003cc0:	20af      	movs	r0, #175	; 0xaf
 8003cc2:	f7ff ff43 	bl	8003b4c <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	e013      	b.n	8003cf4 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	e00a      	b.n	8003ce8 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 8003cd2:	4a0c      	ldr	r2, [pc, #48]	; (8003d04 <oled_init+0xe0>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	01db      	lsls	r3, r3, #7
 8003cd8:	441a      	add	r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b7f      	cmp	r3, #127	; 0x7f
 8003cec:	ddf1      	ble.n	8003cd2 <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	607b      	str	r3, [r7, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	dde8      	ble.n	8003ccc <oled_init+0xa8>
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000d3cc 	.word	0x2000d3cc

08003d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d0c:	480d      	ldr	r0, [pc, #52]	; (8003d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d0e:	490e      	ldr	r1, [pc, #56]	; (8003d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d10:	4a0e      	ldr	r2, [pc, #56]	; (8003d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d14:	e002      	b.n	8003d1c <LoopCopyDataInit>

08003d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d1a:	3304      	adds	r3, #4

08003d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d20:	d3f9      	bcc.n	8003d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d22:	4a0b      	ldr	r2, [pc, #44]	; (8003d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d24:	4c0b      	ldr	r4, [pc, #44]	; (8003d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d28:	e001      	b.n	8003d2e <LoopFillZerobss>

08003d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d2c:	3204      	adds	r2, #4

08003d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d30:	d3fb      	bcc.n	8003d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d32:	f7ff fd77 	bl	8003824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d36:	f00c fbf1 	bl	801051c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d3a:	f7fd ffc7 	bl	8001ccc <main>
  bx  lr    
 8003d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d48:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 8003d4c:	08019b44 	.word	0x08019b44
  ldr r2, =_sbss
 8003d50:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 8003d54:	2000eef8 	.word	0x2000eef8

08003d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d58:	e7fe      	b.n	8003d58 <ADC_IRQHandler>
	...

08003d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d60:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <HAL_Init+0x40>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0d      	ldr	r2, [pc, #52]	; (8003d9c <HAL_Init+0x40>)
 8003d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_Init+0x40>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <HAL_Init+0x40>)
 8003d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <HAL_Init+0x40>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a07      	ldr	r2, [pc, #28]	; (8003d9c <HAL_Init+0x40>)
 8003d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d84:	2003      	movs	r0, #3
 8003d86:	f000 fb82 	bl	800448e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d8a:	200f      	movs	r0, #15
 8003d8c:	f7ff fbd8 	bl	8003540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d90:	f7ff f944 	bl	800301c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40023c00 	.word	0x40023c00

08003da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <HAL_IncTick+0x20>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_IncTick+0x24>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4413      	add	r3, r2
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <HAL_IncTick+0x24>)
 8003db2:	6013      	str	r3, [r2, #0]
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000034 	.word	0x20000034
 8003dc4:	2000d5cc 	.word	0x2000d5cc

08003dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return uwTick;
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <HAL_GetTick+0x14>)
 8003dce:	681b      	ldr	r3, [r3, #0]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	2000d5cc 	.word	0x2000d5cc

08003de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003de8:	f7ff ffee 	bl	8003dc8 <HAL_GetTick>
 8003dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003df8:	d005      	beq.n	8003e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <HAL_Delay+0x44>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e06:	bf00      	nop
 8003e08:	f7ff ffde 	bl	8003dc8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d8f7      	bhi.n	8003e08 <HAL_Delay+0x28>
  {
  }
}
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000034 	.word	0x20000034

08003e28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e033      	b.n	8003ea6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff f914 	bl	8003074 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d118      	bne.n	8003e98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e6e:	f023 0302 	bic.w	r3, r3, #2
 8003e72:	f043 0202 	orr.w	r2, r3, #2
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f93a 	bl	80040f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
 8003e96:	e001      	b.n	8003e9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x1c>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e105      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x228>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b09      	cmp	r3, #9
 8003eda:	d925      	bls.n	8003f28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68d9      	ldr	r1, [r3, #12]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	3b1e      	subs	r3, #30
 8003ef2:	2207      	movs	r2, #7
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	400a      	ands	r2, r1
 8003f00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68d9      	ldr	r1, [r3, #12]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	4618      	mov	r0, r3
 8003f14:	4603      	mov	r3, r0
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4403      	add	r3, r0
 8003f1a:	3b1e      	subs	r3, #30
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	e022      	b.n	8003f6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6919      	ldr	r1, [r3, #16]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43da      	mvns	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	400a      	ands	r2, r1
 8003f4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6919      	ldr	r1, [r3, #16]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4403      	add	r3, r0
 8003f64:	409a      	lsls	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	d824      	bhi.n	8003fc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	3b05      	subs	r3, #5
 8003f88:	221f      	movs	r2, #31
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	400a      	ands	r2, r1
 8003f96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	3b05      	subs	r3, #5
 8003fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8003fbe:	e04c      	b.n	800405a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d824      	bhi.n	8004012 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3b23      	subs	r3, #35	; 0x23
 8003fda:	221f      	movs	r2, #31
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43da      	mvns	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	400a      	ands	r2, r1
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	3b23      	subs	r3, #35	; 0x23
 8004004:	fa00 f203 	lsl.w	r2, r0, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
 8004010:	e023      	b.n	800405a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	3b41      	subs	r3, #65	; 0x41
 8004024:	221f      	movs	r2, #31
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43da      	mvns	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	400a      	ands	r2, r1
 8004032:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	4618      	mov	r0, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	3b41      	subs	r3, #65	; 0x41
 800404e:	fa00 f203 	lsl.w	r2, r0, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <HAL_ADC_ConfigChannel+0x234>)
 800405c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a21      	ldr	r2, [pc, #132]	; (80040e8 <HAL_ADC_ConfigChannel+0x238>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d109      	bne.n	800407c <HAL_ADC_ConfigChannel+0x1cc>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b12      	cmp	r3, #18
 800406e:	d105      	bne.n	800407c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <HAL_ADC_ConfigChannel+0x238>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d123      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x21e>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b10      	cmp	r3, #16
 800408c:	d003      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x1e6>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b11      	cmp	r3, #17
 8004094:	d11b      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b10      	cmp	r3, #16
 80040a8:	d111      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <HAL_ADC_ConfigChannel+0x23c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <HAL_ADC_ConfigChannel+0x240>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	0c9a      	lsrs	r2, r3, #18
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040c0:	e002      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f9      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40012300 	.word	0x40012300
 80040e8:	40012000 	.word	0x40012000
 80040ec:	2000002c 	.word	0x2000002c
 80040f0:	431bde83 	.word	0x431bde83

080040f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040fc:	4b79      	ldr	r3, [pc, #484]	; (80042e4 <ADC_Init+0x1f0>)
 80040fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	021a      	lsls	r2, r3, #8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800414c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6899      	ldr	r1, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	4a58      	ldr	r2, [pc, #352]	; (80042e8 <ADC_Init+0x1f4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800419a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6899      	ldr	r1, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6899      	ldr	r1, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	e00f      	b.n	80041f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0202 	bic.w	r2, r2, #2
 8004200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6899      	ldr	r1, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7e1b      	ldrb	r3, [r3, #24]
 800420c:	005a      	lsls	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800422e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800423e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	3b01      	subs	r3, #1
 800424c:	035a      	lsls	r2, r3, #13
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	e007      	b.n	8004268 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004266:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	3b01      	subs	r3, #1
 8004284:	051a      	lsls	r2, r3, #20
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800429c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6899      	ldr	r1, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042aa:	025a      	lsls	r2, r3, #9
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	029a      	lsls	r2, r3, #10
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40012300 	.word	0x40012300
 80042e8:	0f000001 	.word	0x0f000001

080042ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <__NVIC_SetPriorityGrouping+0x44>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004308:	4013      	ands	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800431c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800431e:	4a04      	ldr	r2, [pc, #16]	; (8004330 <__NVIC_SetPriorityGrouping+0x44>)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	60d3      	str	r3, [r2, #12]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <__NVIC_GetPriorityGrouping+0x18>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	0a1b      	lsrs	r3, r3, #8
 800433e:	f003 0307 	and.w	r3, r3, #7
}
 8004342:	4618      	mov	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	db0b      	blt.n	800437a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	4907      	ldr	r1, [pc, #28]	; (8004388 <__NVIC_EnableIRQ+0x38>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2001      	movs	r0, #1
 8004372:	fa00 f202 	lsl.w	r2, r0, r2
 8004376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	e000e100 	.word	0xe000e100

0800438c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	2b00      	cmp	r3, #0
 800439c:	db12      	blt.n	80043c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	f003 021f 	and.w	r2, r3, #31
 80043a4:	490a      	ldr	r1, [pc, #40]	; (80043d0 <__NVIC_DisableIRQ+0x44>)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	2001      	movs	r0, #1
 80043ae:	fa00 f202 	lsl.w	r2, r0, r2
 80043b2:	3320      	adds	r3, #32
 80043b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80043b8:	f3bf 8f4f 	dsb	sy
}
 80043bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043be:	f3bf 8f6f 	isb	sy
}
 80043c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000e100 	.word	0xe000e100

080043d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	db0a      	blt.n	80043fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	490c      	ldr	r1, [pc, #48]	; (8004420 <__NVIC_SetPriority+0x4c>)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	440b      	add	r3, r1
 80043f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043fc:	e00a      	b.n	8004414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4908      	ldr	r1, [pc, #32]	; (8004424 <__NVIC_SetPriority+0x50>)
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	3b04      	subs	r3, #4
 800440c:	0112      	lsls	r2, r2, #4
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	440b      	add	r3, r1
 8004412:	761a      	strb	r2, [r3, #24]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000e100 	.word	0xe000e100
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f1c3 0307 	rsb	r3, r3, #7
 8004442:	2b04      	cmp	r3, #4
 8004444:	bf28      	it	cs
 8004446:	2304      	movcs	r3, #4
 8004448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3304      	adds	r3, #4
 800444e:	2b06      	cmp	r3, #6
 8004450:	d902      	bls.n	8004458 <NVIC_EncodePriority+0x30>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3b03      	subs	r3, #3
 8004456:	e000      	b.n	800445a <NVIC_EncodePriority+0x32>
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800445c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43da      	mvns	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	401a      	ands	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004470:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	43d9      	mvns	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	4313      	orrs	r3, r2
         );
}
 8004482:	4618      	mov	r0, r3
 8004484:	3724      	adds	r7, #36	; 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff ff28 	bl	80042ec <__NVIC_SetPriorityGrouping>
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b6:	f7ff ff3d 	bl	8004334 <__NVIC_GetPriorityGrouping>
 80044ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	f7ff ffb1 	bl	8004428 <NVIC_EncodePriority>
 80044c6:	4602      	mov	r2, r0
 80044c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ff80 	bl	80043d4 <__NVIC_SetPriority>
}
 80044d4:	bf00      	nop
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff ff30 	bl	8004350 <__NVIC_EnableIRQ>
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff40 	bl	800438c <__NVIC_DisableIRQ>
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004520:	f7ff fc52 	bl	8003dc8 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e099      	b.n	8004664 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004550:	e00f      	b.n	8004572 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004552:	f7ff fc39 	bl	8003dc8 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b05      	cmp	r3, #5
 800455e:	d908      	bls.n	8004572 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2203      	movs	r2, #3
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e078      	b.n	8004664 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e8      	bne.n	8004552 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4b38      	ldr	r3, [pc, #224]	; (800466c <HAL_DMA_Init+0x158>)
 800458c:	4013      	ands	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800459e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d107      	bne.n	80045dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	4313      	orrs	r3, r2
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b04      	cmp	r3, #4
 8004604:	d117      	bne.n	8004636 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00e      	beq.n	8004636 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fb5f 	bl	8004cdc <DMA_CheckFifoParam>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2240      	movs	r2, #64	; 0x40
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004632:	2301      	movs	r3, #1
 8004634:	e016      	b.n	8004664 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fb16 	bl	8004c70 <DMA_CalcBaseAndBitshift>
 8004644:	4603      	mov	r3, r0
 8004646:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464c:	223f      	movs	r2, #63	; 0x3f
 800464e:	409a      	lsls	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	f010803f 	.word	0xf010803f

08004670 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e050      	b.n	8004724 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d101      	bne.n	8004692 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800468e:	2302      	movs	r3, #2
 8004690:	e048      	b.n	8004724 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2200      	movs	r2, #0
 80046b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2200      	movs	r2, #0
 80046c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2221      	movs	r2, #33	; 0x21
 80046d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 facc 	bl	8004c70 <DMA_CalcBaseAndBitshift>
 80046d8:	4603      	mov	r3, r0
 80046da:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	223f      	movs	r2, #63	; 0x3f
 8004706:	409a      	lsls	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_DMA_Start_IT+0x26>
 800474e:	2302      	movs	r3, #2
 8004750:	e040      	b.n	80047d4 <HAL_DMA_Start_IT+0xa8>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d12f      	bne.n	80047c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 fa4a 	bl	8004c14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004784:	223f      	movs	r2, #63	; 0x3f
 8004786:	409a      	lsls	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0216 	orr.w	r2, r2, #22
 800479a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0208 	orr.w	r2, r2, #8
 80047b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e005      	b.n	80047d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047ce:	2302      	movs	r3, #2
 80047d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047ea:	f7ff faed 	bl	8003dc8 <HAL_GetTick>
 80047ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d008      	beq.n	800480e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2280      	movs	r2, #128	; 0x80
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e052      	b.n	80048b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0216 	bic.w	r2, r2, #22
 800481c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800482c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d103      	bne.n	800483e <HAL_DMA_Abort+0x62>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0208 	bic.w	r2, r2, #8
 800484c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800485e:	e013      	b.n	8004888 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004860:	f7ff fab2 	bl	8003dc8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b05      	cmp	r3, #5
 800486c:	d90c      	bls.n	8004888 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2203      	movs	r2, #3
 8004878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e015      	b.n	80048b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e4      	bne.n	8004860 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489a:	223f      	movs	r2, #63	; 0x3f
 800489c:	409a      	lsls	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d004      	beq.n	80048da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2280      	movs	r2, #128	; 0x80
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e00c      	b.n	80048f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2205      	movs	r2, #5
 80048de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800490c:	4b92      	ldr	r3, [pc, #584]	; (8004b58 <HAL_DMA_IRQHandler+0x258>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a92      	ldr	r2, [pc, #584]	; (8004b5c <HAL_DMA_IRQHandler+0x25c>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	0a9b      	lsrs	r3, r3, #10
 8004918:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492a:	2208      	movs	r2, #8
 800492c:	409a      	lsls	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01a      	beq.n	800496c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0204 	bic.w	r2, r2, #4
 8004952:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004958:	2208      	movs	r2, #8
 800495a:	409a      	lsls	r2, r3
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	f043 0201 	orr.w	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004970:	2201      	movs	r2, #1
 8004972:	409a      	lsls	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4013      	ands	r3, r2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d012      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	2201      	movs	r2, #1
 8004990:	409a      	lsls	r2, r3
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	f043 0202 	orr.w	r2, r3, #2
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	2204      	movs	r2, #4
 80049a8:	409a      	lsls	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d012      	beq.n	80049d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00b      	beq.n	80049d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c4:	2204      	movs	r2, #4
 80049c6:	409a      	lsls	r2, r3
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d0:	f043 0204 	orr.w	r2, r3, #4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049dc:	2210      	movs	r2, #16
 80049de:	409a      	lsls	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d043      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d03c      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fa:	2210      	movs	r2, #16
 80049fc:	409a      	lsls	r2, r3
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d018      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d108      	bne.n	8004a30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d024      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	4798      	blx	r3
 8004a2e:	e01f      	b.n	8004a70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01b      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	4798      	blx	r3
 8004a40:	e016      	b.n	8004a70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d107      	bne.n	8004a60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0208 	bic.w	r2, r2, #8
 8004a5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a74:	2220      	movs	r2, #32
 8004a76:	409a      	lsls	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 808e 	beq.w	8004b9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8086 	beq.w	8004b9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a96:	2220      	movs	r2, #32
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d136      	bne.n	8004b18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0216 	bic.w	r2, r2, #22
 8004ab8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <HAL_DMA_IRQHandler+0x1da>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0208 	bic.w	r2, r2, #8
 8004ae8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	223f      	movs	r2, #63	; 0x3f
 8004af0:	409a      	lsls	r2, r3
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d07d      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
        }
        return;
 8004b16:	e078      	b.n	8004c0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01c      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d108      	bne.n	8004b46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d030      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3
 8004b44:	e02b      	b.n	8004b9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d027      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
 8004b56:	e022      	b.n	8004b9e <HAL_DMA_IRQHandler+0x29e>
 8004b58:	2000002c 	.word	0x2000002c
 8004b5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10f      	bne.n	8004b8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0210 	bic.w	r2, r2, #16
 8004b7c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d032      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d022      	beq.n	8004bf8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2205      	movs	r2, #5
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d307      	bcc.n	8004be6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f2      	bne.n	8004bca <HAL_DMA_IRQHandler+0x2ca>
 8004be4:	e000      	b.n	8004be8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004be6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
 8004c08:	e000      	b.n	8004c0c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004c0a:	bf00      	nop
    }
  }
}
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop

08004c14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d108      	bne.n	8004c54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c52:	e007      	b.n	8004c64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	60da      	str	r2, [r3, #12]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	3b10      	subs	r3, #16
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <DMA_CalcBaseAndBitshift+0x64>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <DMA_CalcBaseAndBitshift+0x68>)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d909      	bls.n	8004cb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	1d1a      	adds	r2, r3, #4
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	659a      	str	r2, [r3, #88]	; 0x58
 8004cb0:	e007      	b.n	8004cc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	aaaaaaab 	.word	0xaaaaaaab
 8004cd8:	08019720 	.word	0x08019720

08004cdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11f      	bne.n	8004d36 <DMA_CheckFifoParam+0x5a>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d856      	bhi.n	8004daa <DMA_CheckFifoParam+0xce>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <DMA_CheckFifoParam+0x28>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d27 	.word	0x08004d27
 8004d0c:	08004d15 	.word	0x08004d15
 8004d10:	08004dab 	.word	0x08004dab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d046      	beq.n	8004dae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d24:	e043      	b.n	8004dae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d2e:	d140      	bne.n	8004db2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d34:	e03d      	b.n	8004db2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3e:	d121      	bne.n	8004d84 <DMA_CheckFifoParam+0xa8>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d837      	bhi.n	8004db6 <DMA_CheckFifoParam+0xda>
 8004d46:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <DMA_CheckFifoParam+0x70>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d5d 	.word	0x08004d5d
 8004d50:	08004d63 	.word	0x08004d63
 8004d54:	08004d5d 	.word	0x08004d5d
 8004d58:	08004d75 	.word	0x08004d75
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d60:	e030      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d025      	beq.n	8004dba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d72:	e022      	b.n	8004dba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d7c:	d11f      	bne.n	8004dbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d82:	e01c      	b.n	8004dbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d903      	bls.n	8004d92 <DMA_CheckFifoParam+0xb6>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d003      	beq.n	8004d98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d90:	e018      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	73fb      	strb	r3, [r7, #15]
      break;
 8004d96:	e015      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00e      	beq.n	8004dc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      break;
 8004da8:	e00b      	b.n	8004dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8004daa:	bf00      	nop
 8004dac:	e00a      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dae:	bf00      	nop
 8004db0:	e008      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004db2:	bf00      	nop
 8004db4:	e006      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004db6:	bf00      	nop
 8004db8:	e004      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e002      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dbe:	bf00      	nop
 8004dc0:	e000      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dc2:	bf00      	nop
    }
  } 
  
  return status; 
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop

08004dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b089      	sub	sp, #36	; 0x24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
 8004dee:	e16b      	b.n	80050c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004df0:	2201      	movs	r2, #1
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4013      	ands	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	f040 815a 	bne.w	80050c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d005      	beq.n	8004e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d130      	bne.n	8004e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	2203      	movs	r2, #3
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 0201 	and.w	r2, r3, #1
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d017      	beq.n	8004ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d123      	bne.n	8004f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	08da      	lsrs	r2, r3, #3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3208      	adds	r2, #8
 8004ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	220f      	movs	r2, #15
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	08da      	lsrs	r2, r3, #3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3208      	adds	r2, #8
 8004f12:	69b9      	ldr	r1, [r7, #24]
 8004f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	2203      	movs	r2, #3
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0203 	and.w	r2, r3, #3
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80b4 	beq.w	80050c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	4b60      	ldr	r3, [pc, #384]	; (80050e0 <HAL_GPIO_Init+0x30c>)
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	4a5f      	ldr	r2, [pc, #380]	; (80050e0 <HAL_GPIO_Init+0x30c>)
 8004f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f68:	6453      	str	r3, [r2, #68]	; 0x44
 8004f6a:	4b5d      	ldr	r3, [pc, #372]	; (80050e0 <HAL_GPIO_Init+0x30c>)
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f76:	4a5b      	ldr	r2, [pc, #364]	; (80050e4 <HAL_GPIO_Init+0x310>)
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	220f      	movs	r2, #15
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4013      	ands	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a52      	ldr	r2, [pc, #328]	; (80050e8 <HAL_GPIO_Init+0x314>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d02b      	beq.n	8004ffa <HAL_GPIO_Init+0x226>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a51      	ldr	r2, [pc, #324]	; (80050ec <HAL_GPIO_Init+0x318>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d025      	beq.n	8004ff6 <HAL_GPIO_Init+0x222>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a50      	ldr	r2, [pc, #320]	; (80050f0 <HAL_GPIO_Init+0x31c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01f      	beq.n	8004ff2 <HAL_GPIO_Init+0x21e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a4f      	ldr	r2, [pc, #316]	; (80050f4 <HAL_GPIO_Init+0x320>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d019      	beq.n	8004fee <HAL_GPIO_Init+0x21a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a4e      	ldr	r2, [pc, #312]	; (80050f8 <HAL_GPIO_Init+0x324>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <HAL_GPIO_Init+0x216>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a4d      	ldr	r2, [pc, #308]	; (80050fc <HAL_GPIO_Init+0x328>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00d      	beq.n	8004fe6 <HAL_GPIO_Init+0x212>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a4c      	ldr	r2, [pc, #304]	; (8005100 <HAL_GPIO_Init+0x32c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d007      	beq.n	8004fe2 <HAL_GPIO_Init+0x20e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a4b      	ldr	r2, [pc, #300]	; (8005104 <HAL_GPIO_Init+0x330>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <HAL_GPIO_Init+0x20a>
 8004fda:	2307      	movs	r3, #7
 8004fdc:	e00e      	b.n	8004ffc <HAL_GPIO_Init+0x228>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	e00c      	b.n	8004ffc <HAL_GPIO_Init+0x228>
 8004fe2:	2306      	movs	r3, #6
 8004fe4:	e00a      	b.n	8004ffc <HAL_GPIO_Init+0x228>
 8004fe6:	2305      	movs	r3, #5
 8004fe8:	e008      	b.n	8004ffc <HAL_GPIO_Init+0x228>
 8004fea:	2304      	movs	r3, #4
 8004fec:	e006      	b.n	8004ffc <HAL_GPIO_Init+0x228>
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e004      	b.n	8004ffc <HAL_GPIO_Init+0x228>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e002      	b.n	8004ffc <HAL_GPIO_Init+0x228>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_GPIO_Init+0x228>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	f002 0203 	and.w	r2, r2, #3
 8005002:	0092      	lsls	r2, r2, #2
 8005004:	4093      	lsls	r3, r2
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4313      	orrs	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800500c:	4935      	ldr	r1, [pc, #212]	; (80050e4 <HAL_GPIO_Init+0x310>)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	089b      	lsrs	r3, r3, #2
 8005012:	3302      	adds	r3, #2
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800501a:	4b3b      	ldr	r3, [pc, #236]	; (8005108 <HAL_GPIO_Init+0x334>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800503e:	4a32      	ldr	r2, [pc, #200]	; (8005108 <HAL_GPIO_Init+0x334>)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005044:	4b30      	ldr	r3, [pc, #192]	; (8005108 <HAL_GPIO_Init+0x334>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005068:	4a27      	ldr	r2, [pc, #156]	; (8005108 <HAL_GPIO_Init+0x334>)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800506e:	4b26      	ldr	r3, [pc, #152]	; (8005108 <HAL_GPIO_Init+0x334>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005092:	4a1d      	ldr	r2, [pc, #116]	; (8005108 <HAL_GPIO_Init+0x334>)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005098:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <HAL_GPIO_Init+0x334>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4013      	ands	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050bc:	4a12      	ldr	r2, [pc, #72]	; (8005108 <HAL_GPIO_Init+0x334>)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3301      	adds	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	f67f ae90 	bls.w	8004df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	3724      	adds	r7, #36	; 0x24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40023800 	.word	0x40023800
 80050e4:	40013800 	.word	0x40013800
 80050e8:	40020000 	.word	0x40020000
 80050ec:	40020400 	.word	0x40020400
 80050f0:	40020800 	.word	0x40020800
 80050f4:	40020c00 	.word	0x40020c00
 80050f8:	40021000 	.word	0x40021000
 80050fc:	40021400 	.word	0x40021400
 8005100:	40021800 	.word	0x40021800
 8005104:	40021c00 	.word	0x40021c00
 8005108:	40013c00 	.word	0x40013c00

0800510c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005116:	2300      	movs	r3, #0
 8005118:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	e0cd      	b.n	80052c4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005128:	2201      	movs	r2, #1
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4013      	ands	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	429a      	cmp	r2, r3
 8005140:	f040 80bd 	bne.w	80052be <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005144:	4a65      	ldr	r2, [pc, #404]	; (80052dc <HAL_GPIO_DeInit+0x1d0>)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	089b      	lsrs	r3, r3, #2
 800514a:	3302      	adds	r3, #2
 800514c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005150:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	220f      	movs	r2, #15
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a5d      	ldr	r2, [pc, #372]	; (80052e0 <HAL_GPIO_DeInit+0x1d4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d02b      	beq.n	80051c6 <HAL_GPIO_DeInit+0xba>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a5c      	ldr	r2, [pc, #368]	; (80052e4 <HAL_GPIO_DeInit+0x1d8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d025      	beq.n	80051c2 <HAL_GPIO_DeInit+0xb6>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a5b      	ldr	r2, [pc, #364]	; (80052e8 <HAL_GPIO_DeInit+0x1dc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01f      	beq.n	80051be <HAL_GPIO_DeInit+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a5a      	ldr	r2, [pc, #360]	; (80052ec <HAL_GPIO_DeInit+0x1e0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d019      	beq.n	80051ba <HAL_GPIO_DeInit+0xae>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a59      	ldr	r2, [pc, #356]	; (80052f0 <HAL_GPIO_DeInit+0x1e4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <HAL_GPIO_DeInit+0xaa>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a58      	ldr	r2, [pc, #352]	; (80052f4 <HAL_GPIO_DeInit+0x1e8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00d      	beq.n	80051b2 <HAL_GPIO_DeInit+0xa6>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a57      	ldr	r2, [pc, #348]	; (80052f8 <HAL_GPIO_DeInit+0x1ec>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <HAL_GPIO_DeInit+0xa2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a56      	ldr	r2, [pc, #344]	; (80052fc <HAL_GPIO_DeInit+0x1f0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d101      	bne.n	80051aa <HAL_GPIO_DeInit+0x9e>
 80051a6:	2307      	movs	r3, #7
 80051a8:	e00e      	b.n	80051c8 <HAL_GPIO_DeInit+0xbc>
 80051aa:	2308      	movs	r3, #8
 80051ac:	e00c      	b.n	80051c8 <HAL_GPIO_DeInit+0xbc>
 80051ae:	2306      	movs	r3, #6
 80051b0:	e00a      	b.n	80051c8 <HAL_GPIO_DeInit+0xbc>
 80051b2:	2305      	movs	r3, #5
 80051b4:	e008      	b.n	80051c8 <HAL_GPIO_DeInit+0xbc>
 80051b6:	2304      	movs	r3, #4
 80051b8:	e006      	b.n	80051c8 <HAL_GPIO_DeInit+0xbc>
 80051ba:	2303      	movs	r3, #3
 80051bc:	e004      	b.n	80051c8 <HAL_GPIO_DeInit+0xbc>
 80051be:	2302      	movs	r3, #2
 80051c0:	e002      	b.n	80051c8 <HAL_GPIO_DeInit+0xbc>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <HAL_GPIO_DeInit+0xbc>
 80051c6:	2300      	movs	r3, #0
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	f002 0203 	and.w	r2, r2, #3
 80051ce:	0092      	lsls	r2, r2, #2
 80051d0:	4093      	lsls	r3, r2
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d132      	bne.n	800523e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80051d8:	4b49      	ldr	r3, [pc, #292]	; (8005300 <HAL_GPIO_DeInit+0x1f4>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	43db      	mvns	r3, r3
 80051e0:	4947      	ldr	r1, [pc, #284]	; (8005300 <HAL_GPIO_DeInit+0x1f4>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80051e6:	4b46      	ldr	r3, [pc, #280]	; (8005300 <HAL_GPIO_DeInit+0x1f4>)
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	4944      	ldr	r1, [pc, #272]	; (8005300 <HAL_GPIO_DeInit+0x1f4>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80051f4:	4b42      	ldr	r3, [pc, #264]	; (8005300 <HAL_GPIO_DeInit+0x1f4>)
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	4940      	ldr	r1, [pc, #256]	; (8005300 <HAL_GPIO_DeInit+0x1f4>)
 80051fe:	4013      	ands	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005202:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <HAL_GPIO_DeInit+0x1f4>)
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	43db      	mvns	r3, r3
 800520a:	493d      	ldr	r1, [pc, #244]	; (8005300 <HAL_GPIO_DeInit+0x1f4>)
 800520c:	4013      	ands	r3, r2
 800520e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	220f      	movs	r2, #15
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005220:	4a2e      	ldr	r2, [pc, #184]	; (80052dc <HAL_GPIO_DeInit+0x1d0>)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	089b      	lsrs	r3, r3, #2
 8005226:	3302      	adds	r3, #2
 8005228:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	43da      	mvns	r2, r3
 8005230:	482a      	ldr	r0, [pc, #168]	; (80052dc <HAL_GPIO_DeInit+0x1d0>)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	089b      	lsrs	r3, r3, #2
 8005236:	400a      	ands	r2, r1
 8005238:	3302      	adds	r3, #2
 800523a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	2103      	movs	r1, #3
 8005248:	fa01 f303 	lsl.w	r3, r1, r3
 800524c:	43db      	mvns	r3, r3
 800524e:	401a      	ands	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	08da      	lsrs	r2, r3, #3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3208      	adds	r2, #8
 800525c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	220f      	movs	r2, #15
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	08d2      	lsrs	r2, r2, #3
 8005274:	4019      	ands	r1, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3208      	adds	r2, #8
 800527a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	2103      	movs	r1, #3
 8005288:	fa01 f303 	lsl.w	r3, r1, r3
 800528c:	43db      	mvns	r3, r3
 800528e:	401a      	ands	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	2101      	movs	r1, #1
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	fa01 f303 	lsl.w	r3, r1, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	401a      	ands	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	2103      	movs	r1, #3
 80052b2:	fa01 f303 	lsl.w	r3, r1, r3
 80052b6:	43db      	mvns	r3, r3
 80052b8:	401a      	ands	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	3301      	adds	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b0f      	cmp	r3, #15
 80052c8:	f67f af2e 	bls.w	8005128 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40013800 	.word	0x40013800
 80052e0:	40020000 	.word	0x40020000
 80052e4:	40020400 	.word	0x40020400
 80052e8:	40020800 	.word	0x40020800
 80052ec:	40020c00 	.word	0x40020c00
 80052f0:	40021000 	.word	0x40021000
 80052f4:	40021400 	.word	0x40021400
 80052f8:	40021800 	.word	0x40021800
 80052fc:	40021c00 	.word	0x40021c00
 8005300:	40013c00 	.word	0x40013c00

08005304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	887b      	ldrh	r3, [r7, #2]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800531c:	2301      	movs	r3, #1
 800531e:	73fb      	strb	r3, [r7, #15]
 8005320:	e001      	b.n	8005326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005326:	7bfb      	ldrb	r3, [r7, #15]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	807b      	strh	r3, [r7, #2]
 8005340:	4613      	mov	r3, r2
 8005342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005344:	787b      	ldrb	r3, [r7, #1]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800534a:	887a      	ldrh	r2, [r7, #2]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005350:	e003      	b.n	800535a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005352:	887b      	ldrh	r3, [r7, #2]
 8005354:	041a      	lsls	r2, r3, #16
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	619a      	str	r2, [r3, #24]
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e12b      	b.n	80055d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fd feb4 	bl	80030fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	; 0x24
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0201 	bic.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053cc:	f002 fd4a 	bl	8007e64 <HAL_RCC_GetPCLK1Freq>
 80053d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4a81      	ldr	r2, [pc, #516]	; (80055dc <HAL_I2C_Init+0x274>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d807      	bhi.n	80053ec <HAL_I2C_Init+0x84>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a80      	ldr	r2, [pc, #512]	; (80055e0 <HAL_I2C_Init+0x278>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	bf94      	ite	ls
 80053e4:	2301      	movls	r3, #1
 80053e6:	2300      	movhi	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	e006      	b.n	80053fa <HAL_I2C_Init+0x92>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4a7d      	ldr	r2, [pc, #500]	; (80055e4 <HAL_I2C_Init+0x27c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	bf94      	ite	ls
 80053f4:	2301      	movls	r3, #1
 80053f6:	2300      	movhi	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e0e7      	b.n	80055d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4a78      	ldr	r2, [pc, #480]	; (80055e8 <HAL_I2C_Init+0x280>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	0c9b      	lsrs	r3, r3, #18
 800540c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4a6a      	ldr	r2, [pc, #424]	; (80055dc <HAL_I2C_Init+0x274>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d802      	bhi.n	800543c <HAL_I2C_Init+0xd4>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	3301      	adds	r3, #1
 800543a:	e009      	b.n	8005450 <HAL_I2C_Init+0xe8>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	4a69      	ldr	r2, [pc, #420]	; (80055ec <HAL_I2C_Init+0x284>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	099b      	lsrs	r3, r3, #6
 800544e:	3301      	adds	r3, #1
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	430b      	orrs	r3, r1
 8005456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005462:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	495c      	ldr	r1, [pc, #368]	; (80055dc <HAL_I2C_Init+0x274>)
 800546c:	428b      	cmp	r3, r1
 800546e:	d819      	bhi.n	80054a4 <HAL_I2C_Init+0x13c>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	1e59      	subs	r1, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	fbb1 f3f3 	udiv	r3, r1, r3
 800547e:	1c59      	adds	r1, r3, #1
 8005480:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005484:	400b      	ands	r3, r1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HAL_I2C_Init+0x138>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	1e59      	subs	r1, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	fbb1 f3f3 	udiv	r3, r1, r3
 8005498:	3301      	adds	r3, #1
 800549a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800549e:	e051      	b.n	8005544 <HAL_I2C_Init+0x1dc>
 80054a0:	2304      	movs	r3, #4
 80054a2:	e04f      	b.n	8005544 <HAL_I2C_Init+0x1dc>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d111      	bne.n	80054d0 <HAL_I2C_Init+0x168>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	1e58      	subs	r0, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6859      	ldr	r1, [r3, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	440b      	add	r3, r1
 80054ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80054be:	3301      	adds	r3, #1
 80054c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e012      	b.n	80054f6 <HAL_I2C_Init+0x18e>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1e58      	subs	r0, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6859      	ldr	r1, [r3, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	0099      	lsls	r1, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054e6:	3301      	adds	r3, #1
 80054e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	bf0c      	ite	eq
 80054f0:	2301      	moveq	r3, #1
 80054f2:	2300      	movne	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_I2C_Init+0x196>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e022      	b.n	8005544 <HAL_I2C_Init+0x1dc>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10e      	bne.n	8005524 <HAL_I2C_Init+0x1bc>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1e58      	subs	r0, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6859      	ldr	r1, [r3, #4]
 800550e:	460b      	mov	r3, r1
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	440b      	add	r3, r1
 8005514:	fbb0 f3f3 	udiv	r3, r0, r3
 8005518:	3301      	adds	r3, #1
 800551a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800551e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005522:	e00f      	b.n	8005544 <HAL_I2C_Init+0x1dc>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	1e58      	subs	r0, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6859      	ldr	r1, [r3, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	0099      	lsls	r1, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	fbb0 f3f3 	udiv	r3, r0, r3
 800553a:	3301      	adds	r3, #1
 800553c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	6809      	ldr	r1, [r1, #0]
 8005548:	4313      	orrs	r3, r2
 800554a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69da      	ldr	r2, [r3, #28]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005572:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6911      	ldr	r1, [r2, #16]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	68d2      	ldr	r2, [r2, #12]
 800557e:	4311      	orrs	r1, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	430b      	orrs	r3, r1
 8005586:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	000186a0 	.word	0x000186a0
 80055e0:	001e847f 	.word	0x001e847f
 80055e4:	003d08ff 	.word	0x003d08ff
 80055e8:	431bde83 	.word	0x431bde83
 80055ec:	10624dd3 	.word	0x10624dd3

080055f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	461a      	mov	r2, r3
 80055fc:	460b      	mov	r3, r1
 80055fe:	817b      	strh	r3, [r7, #10]
 8005600:	4613      	mov	r3, r2
 8005602:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005604:	f7fe fbe0 	bl	8003dc8 <HAL_GetTick>
 8005608:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b20      	cmp	r3, #32
 8005614:	f040 80e0 	bne.w	80057d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	2319      	movs	r3, #25
 800561e:	2201      	movs	r2, #1
 8005620:	4970      	ldr	r1, [pc, #448]	; (80057e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 fc72 	bl	8005f0c <I2C_WaitOnFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
 8005630:	e0d3      	b.n	80057da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_I2C_Master_Transmit+0x50>
 800563c:	2302      	movs	r3, #2
 800563e:	e0cc      	b.n	80057da <HAL_I2C_Master_Transmit+0x1ea>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b01      	cmp	r3, #1
 8005654:	d007      	beq.n	8005666 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005674:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2221      	movs	r2, #33	; 0x21
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2210      	movs	r2, #16
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	893a      	ldrh	r2, [r7, #8]
 8005696:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4a50      	ldr	r2, [pc, #320]	; (80057e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80056a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056a8:	8979      	ldrh	r1, [r7, #10]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	6a3a      	ldr	r2, [r7, #32]
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 fac2 	bl	8005c38 <I2C_MasterRequestWrite>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e08d      	b.n	80057da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056d4:	e066      	b.n	80057a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	6a39      	ldr	r1, [r7, #32]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fcec 	bl	80060b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00d      	beq.n	8005702 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d107      	bne.n	80056fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e06b      	b.n	80057da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	781a      	ldrb	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b04      	cmp	r3, #4
 800573e:	d11b      	bne.n	8005778 <HAL_I2C_Master_Transmit+0x188>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005744:	2b00      	cmp	r3, #0
 8005746:	d017      	beq.n	8005778 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	781a      	ldrb	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	6a39      	ldr	r1, [r7, #32]
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fcdc 	bl	800613a <I2C_WaitOnBTFFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00d      	beq.n	80057a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	2b04      	cmp	r3, #4
 800578e:	d107      	bne.n	80057a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800579e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e01a      	b.n	80057da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d194      	bne.n	80056d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e000      	b.n	80057da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	00100002 	.word	0x00100002
 80057e8:	ffff0000 	.word	0xffff0000

080057ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08c      	sub	sp, #48	; 0x30
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	461a      	mov	r2, r3
 80057fa:	4603      	mov	r3, r0
 80057fc:	817b      	strh	r3, [r7, #10]
 80057fe:	460b      	mov	r3, r1
 8005800:	813b      	strh	r3, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005806:	f7fe fadf 	bl	8003dc8 <HAL_GetTick>
 800580a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b20      	cmp	r3, #32
 8005816:	f040 8208 	bne.w	8005c2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	2319      	movs	r3, #25
 8005820:	2201      	movs	r2, #1
 8005822:	497b      	ldr	r1, [pc, #492]	; (8005a10 <HAL_I2C_Mem_Read+0x224>)
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fb71 	bl	8005f0c <I2C_WaitOnFlagUntilTimeout>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005830:	2302      	movs	r3, #2
 8005832:	e1fb      	b.n	8005c2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_I2C_Mem_Read+0x56>
 800583e:	2302      	movs	r3, #2
 8005840:	e1f4      	b.n	8005c2c <HAL_I2C_Mem_Read+0x440>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b01      	cmp	r3, #1
 8005856:	d007      	beq.n	8005868 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0201 	orr.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2222      	movs	r2, #34	; 0x22
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2240      	movs	r2, #64	; 0x40
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4a5b      	ldr	r2, [pc, #364]	; (8005a14 <HAL_I2C_Mem_Read+0x228>)
 80058a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058aa:	88f8      	ldrh	r0, [r7, #6]
 80058ac:	893a      	ldrh	r2, [r7, #8]
 80058ae:	8979      	ldrh	r1, [r7, #10]
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4603      	mov	r3, r0
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fa3e 	bl	8005d3c <I2C_RequestMemoryRead>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e1b0      	b.n	8005c2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d113      	bne.n	80058fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d2:	2300      	movs	r3, #0
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	623b      	str	r3, [r7, #32]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	623b      	str	r3, [r7, #32]
 80058e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	e184      	b.n	8005c04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d11b      	bne.n	800593a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e164      	b.n	8005c04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593e:	2b02      	cmp	r3, #2
 8005940:	d11b      	bne.n	800597a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005950:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005962:	2300      	movs	r3, #0
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	e144      	b.n	8005c04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005990:	e138      	b.n	8005c04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005996:	2b03      	cmp	r3, #3
 8005998:	f200 80f1 	bhi.w	8005b7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d123      	bne.n	80059ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fc07 	bl	80061bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e139      	b.n	8005c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059ea:	e10b      	b.n	8005c04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d14e      	bne.n	8005a92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fa:	2200      	movs	r2, #0
 80059fc:	4906      	ldr	r1, [pc, #24]	; (8005a18 <HAL_I2C_Mem_Read+0x22c>)
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fa84 	bl	8005f0c <I2C_WaitOnFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e10e      	b.n	8005c2c <HAL_I2C_Mem_Read+0x440>
 8005a0e:	bf00      	nop
 8005a10:	00100002 	.word	0x00100002
 8005a14:	ffff0000 	.word	0xffff0000
 8005a18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a90:	e0b8      	b.n	8005c04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	2200      	movs	r2, #0
 8005a9a:	4966      	ldr	r1, [pc, #408]	; (8005c34 <HAL_I2C_Mem_Read+0x448>)
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fa35 	bl	8005f0c <I2C_WaitOnFlagUntilTimeout>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0bf      	b.n	8005c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	2200      	movs	r2, #0
 8005af6:	494f      	ldr	r1, [pc, #316]	; (8005c34 <HAL_I2C_Mem_Read+0x448>)
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fa07 	bl	8005f0c <I2C_WaitOnFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e091      	b.n	8005c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b7c:	e042      	b.n	8005c04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fb1a 	bl	80061bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e04c      	b.n	8005c2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d118      	bne.n	8005c04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f47f aec2 	bne.w	8005992 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e000      	b.n	8005c2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c2a:	2302      	movs	r3, #2
  }
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3728      	adds	r7, #40	; 0x28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	00010004 	.word	0x00010004

08005c38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	460b      	mov	r3, r1
 8005c46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d006      	beq.n	8005c62 <I2C_MasterRequestWrite+0x2a>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d003      	beq.n	8005c62 <I2C_MasterRequestWrite+0x2a>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c60:	d108      	bne.n	8005c74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	e00b      	b.n	8005c8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	2b12      	cmp	r3, #18
 8005c7a:	d107      	bne.n	8005c8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f937 	bl	8005f0c <I2C_WaitOnFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00d      	beq.n	8005cc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb2:	d103      	bne.n	8005cbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e035      	b.n	8005d2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cc8:	d108      	bne.n	8005cdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cca:	897b      	ldrh	r3, [r7, #10]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cd8:	611a      	str	r2, [r3, #16]
 8005cda:	e01b      	b.n	8005d14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cdc:	897b      	ldrh	r3, [r7, #10]
 8005cde:	11db      	asrs	r3, r3, #7
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f003 0306 	and.w	r3, r3, #6
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f063 030f 	orn	r3, r3, #15
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	490e      	ldr	r1, [pc, #56]	; (8005d34 <I2C_MasterRequestWrite+0xfc>)
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f95d 	bl	8005fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e010      	b.n	8005d2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d0a:	897b      	ldrh	r3, [r7, #10]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4907      	ldr	r1, [pc, #28]	; (8005d38 <I2C_MasterRequestWrite+0x100>)
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f94d 	bl	8005fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	00010008 	.word	0x00010008
 8005d38:	00010002 	.word	0x00010002

08005d3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	4608      	mov	r0, r1
 8005d46:	4611      	mov	r1, r2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	817b      	strh	r3, [r7, #10]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	813b      	strh	r3, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 f8c2 	bl	8005f0c <I2C_WaitOnFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00d      	beq.n	8005daa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9c:	d103      	bne.n	8005da6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e0aa      	b.n	8005f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005daa:	897b      	ldrh	r3, [r7, #10]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	461a      	mov	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005db8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	6a3a      	ldr	r2, [r7, #32]
 8005dbe:	4952      	ldr	r1, [pc, #328]	; (8005f08 <I2C_RequestMemoryRead+0x1cc>)
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f8fa 	bl	8005fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e097      	b.n	8005f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de8:	6a39      	ldr	r1, [r7, #32]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f964 	bl	80060b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00d      	beq.n	8005e12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d107      	bne.n	8005e0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e076      	b.n	8005f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e12:	88fb      	ldrh	r3, [r7, #6]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d105      	bne.n	8005e24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e18:	893b      	ldrh	r3, [r7, #8]
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	611a      	str	r2, [r3, #16]
 8005e22:	e021      	b.n	8005e68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e24:	893b      	ldrh	r3, [r7, #8]
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e34:	6a39      	ldr	r1, [r7, #32]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f93e 	bl	80060b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00d      	beq.n	8005e5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d107      	bne.n	8005e5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e050      	b.n	8005f00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e5e:	893b      	ldrh	r3, [r7, #8]
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6a:	6a39      	ldr	r1, [r7, #32]
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 f923 	bl	80060b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00d      	beq.n	8005e94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d107      	bne.n	8005e90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e035      	b.n	8005f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f82b 	bl	8005f0c <I2C_WaitOnFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00d      	beq.n	8005ed8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eca:	d103      	bne.n	8005ed4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e013      	b.n	8005f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ed8:	897b      	ldrh	r3, [r7, #10]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	6a3a      	ldr	r2, [r7, #32]
 8005eec:	4906      	ldr	r1, [pc, #24]	; (8005f08 <I2C_RequestMemoryRead+0x1cc>)
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 f863 	bl	8005fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	00010002 	.word	0x00010002

08005f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f1c:	e025      	b.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f24:	d021      	beq.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f26:	f7fd ff4f 	bl	8003dc8 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d302      	bcc.n	8005f3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d116      	bne.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f043 0220 	orr.w	r2, r3, #32
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e023      	b.n	8005fb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d10d      	bne.n	8005f90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	43da      	mvns	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	e00c      	b.n	8005faa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	43da      	mvns	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d0b6      	beq.n	8005f1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	607a      	str	r2, [r7, #4]
 8005fc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fc8:	e051      	b.n	800606e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd8:	d123      	bne.n	8006022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ff2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f043 0204 	orr.w	r2, r3, #4
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e046      	b.n	80060b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006028:	d021      	beq.n	800606e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602a:	f7fd fecd 	bl	8003dc8 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	429a      	cmp	r2, r3
 8006038:	d302      	bcc.n	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d116      	bne.n	800606e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f043 0220 	orr.w	r2, r3, #32
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e020      	b.n	80060b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	d10c      	bne.n	8006092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	43da      	mvns	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4013      	ands	r3, r2
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	bf14      	ite	ne
 800608a:	2301      	movne	r3, #1
 800608c:	2300      	moveq	r3, #0
 800608e:	b2db      	uxtb	r3, r3
 8006090:	e00b      	b.n	80060aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	43da      	mvns	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4013      	ands	r3, r2
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf14      	ite	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	2300      	moveq	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d18d      	bne.n	8005fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060c4:	e02d      	b.n	8006122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f8ce 	bl	8006268 <I2C_IsAcknowledgeFailed>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e02d      	b.n	8006132 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060dc:	d021      	beq.n	8006122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060de:	f7fd fe73 	bl	8003dc8 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d302      	bcc.n	80060f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d116      	bne.n	8006122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f043 0220 	orr.w	r2, r3, #32
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e007      	b.n	8006132 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612c:	2b80      	cmp	r3, #128	; 0x80
 800612e:	d1ca      	bne.n	80060c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006146:	e02d      	b.n	80061a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f88d 	bl	8006268 <I2C_IsAcknowledgeFailed>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e02d      	b.n	80061b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800615e:	d021      	beq.n	80061a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006160:	f7fd fe32 	bl	8003dc8 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	429a      	cmp	r2, r3
 800616e:	d302      	bcc.n	8006176 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d116      	bne.n	80061a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	f043 0220 	orr.w	r2, r3, #32
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e007      	b.n	80061b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d1ca      	bne.n	8006148 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061c8:	e042      	b.n	8006250 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d119      	bne.n	800620c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0210 	mvn.w	r2, #16
 80061e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e029      	b.n	8006260 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620c:	f7fd fddc 	bl	8003dc8 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	429a      	cmp	r2, r3
 800621a:	d302      	bcc.n	8006222 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d116      	bne.n	8006250 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	f043 0220 	orr.w	r2, r3, #32
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e007      	b.n	8006260 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d1b5      	bne.n	80061ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800627a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800627e:	d11b      	bne.n	80062b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006288:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	f043 0204 	orr.w	r2, r3, #4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80062c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062c8:	b08f      	sub	sp, #60	; 0x3c
 80062ca:	af0a      	add	r7, sp, #40	; 0x28
 80062cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e10f      	b.n	80064f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f009 fcf4 	bl	800fce0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2203      	movs	r2, #3
 80062fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f003 f903 	bl	8009522 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	687e      	ldr	r6, [r7, #4]
 8006324:	466d      	mov	r5, sp
 8006326:	f106 0410 	add.w	r4, r6, #16
 800632a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800632c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800632e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006332:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006336:	e885 0003 	stmia.w	r5, {r0, r1}
 800633a:	1d33      	adds	r3, r6, #4
 800633c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800633e:	6838      	ldr	r0, [r7, #0]
 8006340:	f002 ffda 	bl	80092f8 <USB_CoreInit>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e0d0      	b.n	80064f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2100      	movs	r1, #0
 800635c:	4618      	mov	r0, r3
 800635e:	f003 f8f1 	bl	8009544 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]
 8006366:	e04a      	b.n	80063fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006368:	7bfa      	ldrb	r2, [r7, #15]
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	4613      	mov	r3, r2
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	1a9b      	subs	r3, r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	333d      	adds	r3, #61	; 0x3d
 8006378:	2201      	movs	r2, #1
 800637a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800637c:	7bfa      	ldrb	r2, [r7, #15]
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	4613      	mov	r3, r2
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	1a9b      	subs	r3, r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	440b      	add	r3, r1
 800638a:	333c      	adds	r3, #60	; 0x3c
 800638c:	7bfa      	ldrb	r2, [r7, #15]
 800638e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006390:	7bfa      	ldrb	r2, [r7, #15]
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	b298      	uxth	r0, r3
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	3342      	adds	r3, #66	; 0x42
 80063a4:	4602      	mov	r2, r0
 80063a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063a8:	7bfa      	ldrb	r2, [r7, #15]
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	4613      	mov	r3, r2
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	1a9b      	subs	r3, r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	333f      	adds	r3, #63	; 0x3f
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063bc:	7bfa      	ldrb	r2, [r7, #15]
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	3344      	adds	r3, #68	; 0x44
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063d0:	7bfa      	ldrb	r2, [r7, #15]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	3348      	adds	r3, #72	; 0x48
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80063e4:	7bfa      	ldrb	r2, [r7, #15]
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	1a9b      	subs	r3, r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	3350      	adds	r3, #80	; 0x50
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	3301      	adds	r3, #1
 80063fc:	73fb      	strb	r3, [r7, #15]
 80063fe:	7bfa      	ldrb	r2, [r7, #15]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	429a      	cmp	r2, r3
 8006406:	d3af      	bcc.n	8006368 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006408:	2300      	movs	r3, #0
 800640a:	73fb      	strb	r3, [r7, #15]
 800640c:	e044      	b.n	8006498 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800640e:	7bfa      	ldrb	r2, [r7, #15]
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006424:	7bfa      	ldrb	r2, [r7, #15]
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	4613      	mov	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	1a9b      	subs	r3, r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	440b      	add	r3, r1
 8006432:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006436:	7bfa      	ldrb	r2, [r7, #15]
 8006438:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800643a:	7bfa      	ldrb	r2, [r7, #15]
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	1a9b      	subs	r3, r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	440b      	add	r3, r1
 8006448:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006450:	7bfa      	ldrb	r2, [r7, #15]
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	4613      	mov	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	1a9b      	subs	r3, r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006466:	7bfa      	ldrb	r2, [r7, #15]
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	4613      	mov	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	1a9b      	subs	r3, r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	440b      	add	r3, r1
 8006474:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800647c:	7bfa      	ldrb	r2, [r7, #15]
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	4613      	mov	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	3301      	adds	r3, #1
 8006496:	73fb      	strb	r3, [r7, #15]
 8006498:	7bfa      	ldrb	r2, [r7, #15]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d3b5      	bcc.n	800640e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	687e      	ldr	r6, [r7, #4]
 80064aa:	466d      	mov	r5, sp
 80064ac:	f106 0410 	add.w	r4, r6, #16
 80064b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80064c0:	1d33      	adds	r3, r6, #4
 80064c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064c4:	6838      	ldr	r0, [r7, #0]
 80064c6:	f003 f889 	bl	80095dc <USB_DevInit>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e00d      	b.n	80064f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f004 f905 	bl	800a700 <USB_DevDisconnect>

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006500 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_PCD_Start+0x1c>
 8006518:	2302      	movs	r3, #2
 800651a:	e020      	b.n	800655e <HAL_PCD_Start+0x5e>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	2b01      	cmp	r3, #1
 800652a:	d109      	bne.n	8006540 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006530:	2b01      	cmp	r3, #1
 8006532:	d005      	beq.n	8006540 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f002 ffdb 	bl	8009500 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f004 f8b5 	bl	800a6be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006566:	b590      	push	{r4, r7, lr}
 8006568:	b08d      	sub	sp, #52	; 0x34
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4618      	mov	r0, r3
 800657e:	f004 f973 	bl	800a868 <USB_GetMode>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	f040 839d 	bne.w	8006cc4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f004 f8d7 	bl	800a742 <USB_ReadInterrupts>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8393 	beq.w	8006cc2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f004 f8ce 	bl	800a742 <USB_ReadInterrupts>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d107      	bne.n	80065c0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695a      	ldr	r2, [r3, #20]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f002 0202 	and.w	r2, r2, #2
 80065be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f004 f8bc 	bl	800a742 <USB_ReadInterrupts>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d161      	bne.n	8006698 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699a      	ldr	r2, [r3, #24]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0210 	bic.w	r2, r2, #16
 80065e2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	f003 020f 	and.w	r2, r3, #15
 80065f0:	4613      	mov	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	4413      	add	r3, r2
 8006600:	3304      	adds	r3, #4
 8006602:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	0c5b      	lsrs	r3, r3, #17
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	2b02      	cmp	r3, #2
 800660e:	d124      	bne.n	800665a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d035      	beq.n	8006688 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	091b      	lsrs	r3, r3, #4
 8006624:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006626:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800662a:	b29b      	uxth	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	6a38      	ldr	r0, [r7, #32]
 8006630:	f003 fef3 	bl	800a41a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	091b      	lsrs	r3, r3, #4
 800663c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006640:	441a      	add	r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	091b      	lsrs	r3, r3, #4
 800664e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006652:	441a      	add	r2, r3
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	619a      	str	r2, [r3, #24]
 8006658:	e016      	b.n	8006688 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	0c5b      	lsrs	r3, r3, #17
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	2b06      	cmp	r3, #6
 8006664:	d110      	bne.n	8006688 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800666c:	2208      	movs	r2, #8
 800666e:	4619      	mov	r1, r3
 8006670:	6a38      	ldr	r0, [r7, #32]
 8006672:	f003 fed2 	bl	800a41a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	091b      	lsrs	r3, r3, #4
 800667e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006682:	441a      	add	r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0210 	orr.w	r2, r2, #16
 8006696:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f004 f850 	bl	800a742 <USB_ReadInterrupts>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066ac:	d16e      	bne.n	800678c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f004 f856 	bl	800a768 <USB_ReadDevAllOutEpInterrupt>
 80066bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80066be:	e062      	b.n	8006786 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d057      	beq.n	800677a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	4611      	mov	r1, r2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f004 f87b 	bl	800a7d0 <USB_ReadDevOutEPInterrupt>
 80066da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00c      	beq.n	8006700 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f2:	461a      	mov	r2, r3
 80066f4:	2301      	movs	r3, #1
 80066f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80066f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fdb0 	bl	8007260 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00c      	beq.n	8006724 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006716:	461a      	mov	r2, r3
 8006718:	2308      	movs	r3, #8
 800671a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800671c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 feaa 	bl	8007478 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b00      	cmp	r3, #0
 800672c:	d008      	beq.n	8006740 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673a:	461a      	mov	r2, r3
 800673c:	2310      	movs	r3, #16
 800673e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d008      	beq.n	800675c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006756:	461a      	mov	r2, r3
 8006758:	2320      	movs	r3, #32
 800675a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006772:	461a      	mov	r2, r3
 8006774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006778:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	3301      	adds	r3, #1
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	2b00      	cmp	r3, #0
 800678a:	d199      	bne.n	80066c0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f003 ffd6 	bl	800a742 <USB_ReadInterrupts>
 8006796:	4603      	mov	r3, r0
 8006798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800679c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067a0:	f040 80c0 	bne.w	8006924 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f003 fff7 	bl	800a79c <USB_ReadDevAllInEpInterrupt>
 80067ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80067b4:	e0b2      	b.n	800691c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 80a7 	beq.w	8006910 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	4611      	mov	r1, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f004 f81d 	bl	800a80c <USB_ReadDevInEPInterrupt>
 80067d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d057      	beq.n	800688e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	2201      	movs	r2, #1
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	43db      	mvns	r3, r3
 80067f8:	69f9      	ldr	r1, [r7, #28]
 80067fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067fe:	4013      	ands	r3, r2
 8006800:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680e:	461a      	mov	r2, r3
 8006810:	2301      	movs	r3, #1
 8006812:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d132      	bne.n	8006882 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006820:	4613      	mov	r3, r2
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	3348      	adds	r3, #72	; 0x48
 800682c:	6819      	ldr	r1, [r3, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006832:	4613      	mov	r3, r2
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4403      	add	r3, r0
 800683c:	3344      	adds	r3, #68	; 0x44
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4419      	add	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006846:	4613      	mov	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4403      	add	r3, r0
 8006850:	3348      	adds	r3, #72	; 0x48
 8006852:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	d113      	bne.n	8006882 <HAL_PCD_IRQHandler+0x31c>
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685e:	4613      	mov	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	3350      	adds	r3, #80	; 0x50
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d108      	bne.n	8006882 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800687a:	461a      	mov	r2, r3
 800687c:	2101      	movs	r1, #1
 800687e:	f004 f825 	bl	800a8cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	b2db      	uxtb	r3, r3
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f009 fab8 	bl	800fdfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d008      	beq.n	80068aa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	461a      	mov	r2, r3
 80068a6:	2308      	movs	r3, #8
 80068a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f003 0310 	and.w	r3, r3, #16
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d008      	beq.n	80068c6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	461a      	mov	r2, r3
 80068c2:	2310      	movs	r3, #16
 80068c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	461a      	mov	r2, r3
 80068de:	2340      	movs	r3, #64	; 0x40
 80068e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f8:	461a      	mov	r2, r3
 80068fa:	2302      	movs	r3, #2
 80068fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fc1b 	bl	8007146 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	3301      	adds	r3, #1
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	085b      	lsrs	r3, r3, #1
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	f47f af49 	bne.w	80067b6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f003 ff0a 	bl	800a742 <USB_ReadInterrupts>
 800692e:	4603      	mov	r3, r0
 8006930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006938:	d122      	bne.n	8006980 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006954:	2b01      	cmp	r3, #1
 8006956:	d108      	bne.n	800696a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006960:	2100      	movs	r1, #0
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fe26 	bl	80075b4 <HAL_PCDEx_LPM_Callback>
 8006968:	e002      	b.n	8006970 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f009 fabe 	bl	800feec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800697e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f003 fedc 	bl	800a742 <USB_ReadInterrupts>
 800698a:	4603      	mov	r3, r0
 800698c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006994:	d112      	bne.n	80069bc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d102      	bne.n	80069ac <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f009 fa7a 	bl	800fea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695a      	ldr	r2, [r3, #20]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80069ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f003 febe 	bl	800a742 <USB_ReadInterrupts>
 80069c6:	4603      	mov	r3, r0
 80069c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d0:	f040 80c7 	bne.w	8006b62 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	69fa      	ldr	r2, [r7, #28]
 80069de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2110      	movs	r1, #16
 80069ee:	4618      	mov	r0, r3
 80069f0:	f002 ff58 	bl	80098a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069f4:	2300      	movs	r3, #0
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069f8:	e056      	b.n	8006aa8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	461a      	mov	r2, r3
 8006a08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a2c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3e:	0151      	lsls	r1, r2, #5
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	440a      	add	r2, r1
 8006a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aa0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d3a3      	bcc.n	80069fa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006ac4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d016      	beq.n	8006afc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad8:	69fa      	ldr	r2, [r7, #28]
 8006ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ade:	f043 030b 	orr.w	r3, r3, #11
 8006ae2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006af4:	f043 030b 	orr.w	r3, r3, #11
 8006af8:	6453      	str	r3, [r2, #68]	; 0x44
 8006afa:	e015      	b.n	8006b28 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b0e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006b12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	69fa      	ldr	r2, [r7, #28]
 8006b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b22:	f043 030b 	orr.w	r3, r3, #11
 8006b26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f003 febd 	bl	800a8cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f003 fdeb 	bl	800a742 <USB_ReadInterrupts>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b76:	d124      	bne.n	8006bc2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f003 fe81 	bl	800a884 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f002 fee9 	bl	800995e <USB_GetDevSpeed>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681c      	ldr	r4, [r3, #0]
 8006b98:	f001 f958 	bl	8007e4c <HAL_RCC_GetHCLKFreq>
 8006b9c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f002 fc08 	bl	80093bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f009 f94e 	bl	800fe4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695a      	ldr	r2, [r3, #20]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f003 fdbb 	bl	800a742 <USB_ReadInterrupts>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d10a      	bne.n	8006bec <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f009 f92b 	bl	800fe32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	695a      	ldr	r2, [r3, #20]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f002 0208 	and.w	r2, r2, #8
 8006bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f003 fda6 	bl	800a742 <USB_ReadInterrupts>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c00:	d10f      	bne.n	8006c22 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f009 f98d 	bl	800ff2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f003 fd8b 	bl	800a742 <USB_ReadInterrupts>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c36:	d10f      	bne.n	8006c58 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f009 f960 	bl	800ff08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695a      	ldr	r2, [r3, #20]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f003 fd70 	bl	800a742 <USB_ReadInterrupts>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6c:	d10a      	bne.n	8006c84 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f009 f96e 	bl	800ff50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695a      	ldr	r2, [r3, #20]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f003 fd5a 	bl	800a742 <USB_ReadInterrupts>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d115      	bne.n	8006cc4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f009 f95e 	bl	800ff6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6859      	ldr	r1, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	605a      	str	r2, [r3, #4]
 8006cc0:	e000      	b.n	8006cc4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006cc2:	bf00      	nop
    }
  }
}
 8006cc4:	3734      	adds	r7, #52	; 0x34
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd90      	pop	{r4, r7, pc}

08006cca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_PCD_SetAddress+0x1a>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e013      	b.n	8006d0c <HAL_PCD_SetAddress+0x42>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	78fa      	ldrb	r2, [r7, #3]
 8006cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	78fa      	ldrb	r2, [r7, #3]
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f003 fcb8 	bl	800a672 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	4611      	mov	r1, r2
 8006d20:	461a      	mov	r2, r3
 8006d22:	4603      	mov	r3, r0
 8006d24:	70fb      	strb	r3, [r7, #3]
 8006d26:	460b      	mov	r3, r1
 8006d28:	803b      	strh	r3, [r7, #0]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	da0f      	bge.n	8006d5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f003 020f 	and.w	r2, r3, #15
 8006d40:	4613      	mov	r3, r2
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	3338      	adds	r3, #56	; 0x38
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3304      	adds	r3, #4
 8006d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	705a      	strb	r2, [r3, #1]
 8006d58:	e00f      	b.n	8006d7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	f003 020f 	and.w	r2, r3, #15
 8006d60:	4613      	mov	r3, r2
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	4413      	add	r3, r2
 8006d70:	3304      	adds	r3, #4
 8006d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006d86:	883a      	ldrh	r2, [r7, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	78ba      	ldrb	r2, [r7, #2]
 8006d90:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d004      	beq.n	8006da4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006da4:	78bb      	ldrb	r3, [r7, #2]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d102      	bne.n	8006db0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_PCD_EP_Open+0xaa>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e00e      	b.n	8006ddc <HAL_PCD_EP_Open+0xc8>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68f9      	ldr	r1, [r7, #12]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f002 fdeb 	bl	80099a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006dda:	7afb      	ldrb	r3, [r7, #11]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	da0f      	bge.n	8006e18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	f003 020f 	and.w	r2, r3, #15
 8006dfe:	4613      	mov	r3, r2
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	1a9b      	subs	r3, r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	3338      	adds	r3, #56	; 0x38
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	705a      	strb	r2, [r3, #1]
 8006e16:	e00f      	b.n	8006e38 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e18:	78fb      	ldrb	r3, [r7, #3]
 8006e1a:	f003 020f 	and.w	r2, r3, #15
 8006e1e:	4613      	mov	r3, r2
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	1a9b      	subs	r3, r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3304      	adds	r3, #4
 8006e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_PCD_EP_Close+0x6e>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e00e      	b.n	8006e70 <HAL_PCD_EP_Close+0x8c>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f002 fe29 	bl	8009ab8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	607a      	str	r2, [r7, #4]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	460b      	mov	r3, r1
 8006e86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e88:	7afb      	ldrb	r3, [r7, #11]
 8006e8a:	f003 020f 	and.w	r2, r3, #15
 8006e8e:	4613      	mov	r3, r2
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006eba:	7afb      	ldrb	r3, [r7, #11]
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d102      	bne.n	8006ed4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6979      	ldr	r1, [r7, #20]
 8006eec:	f003 f904 	bl	800a0f8 <USB_EP0StartXfer>
 8006ef0:	e008      	b.n	8006f04 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6818      	ldr	r0, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	6979      	ldr	r1, [r7, #20]
 8006f00:	f002 feb6 	bl	8009c70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	f003 020f 	and.w	r2, r3, #15
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4613      	mov	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006f30:	681b      	ldr	r3, [r3, #0]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b086      	sub	sp, #24
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f4e:	7afb      	ldrb	r3, [r7, #11]
 8006f50:	f003 020f 	and.w	r2, r3, #15
 8006f54:	4613      	mov	r3, r2
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	1a9b      	subs	r3, r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	3338      	adds	r3, #56	; 0x38
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	4413      	add	r3, r2
 8006f62:	3304      	adds	r3, #4
 8006f64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2200      	movs	r2, #0
 8006f76:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	f003 030f 	and.w	r3, r3, #15
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d102      	bne.n	8006f98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f98:	7afb      	ldrb	r3, [r7, #11]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	6979      	ldr	r1, [r7, #20]
 8006fb0:	f003 f8a2 	bl	800a0f8 <USB_EP0StartXfer>
 8006fb4:	e008      	b.n	8006fc8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6979      	ldr	r1, [r7, #20]
 8006fc4:	f002 fe54 	bl	8009c70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	f003 020f 	and.w	r2, r3, #15
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d901      	bls.n	8006ff0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e050      	b.n	8007092 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	da0f      	bge.n	8007018 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	f003 020f 	and.w	r2, r3, #15
 8006ffe:	4613      	mov	r3, r2
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	1a9b      	subs	r3, r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	3338      	adds	r3, #56	; 0x38
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	4413      	add	r3, r2
 800700c:	3304      	adds	r3, #4
 800700e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	705a      	strb	r2, [r3, #1]
 8007016:	e00d      	b.n	8007034 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007018:	78fa      	ldrb	r2, [r7, #3]
 800701a:	4613      	mov	r3, r2
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	1a9b      	subs	r3, r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	4413      	add	r3, r2
 800702a:	3304      	adds	r3, #4
 800702c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	b2da      	uxtb	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_PCD_EP_SetStall+0x82>
 8007050:	2302      	movs	r3, #2
 8007052:	e01e      	b.n	8007092 <HAL_PCD_EP_SetStall+0xc0>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68f9      	ldr	r1, [r7, #12]
 8007062:	4618      	mov	r0, r3
 8007064:	f003 fa31 	bl	800a4ca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10a      	bne.n	8007088 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	b2d9      	uxtb	r1, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007082:	461a      	mov	r2, r3
 8007084:	f003 fc22 	bl	800a8cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	f003 020f 	and.w	r2, r3, #15
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d901      	bls.n	80070b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e042      	b.n	800713e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	da0f      	bge.n	80070e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	f003 020f 	and.w	r2, r3, #15
 80070c6:	4613      	mov	r3, r2
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	1a9b      	subs	r3, r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	3338      	adds	r3, #56	; 0x38
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	4413      	add	r3, r2
 80070d4:	3304      	adds	r3, #4
 80070d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	705a      	strb	r2, [r3, #1]
 80070de:	e00f      	b.n	8007100 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	f003 020f 	and.w	r2, r3, #15
 80070e6:	4613      	mov	r3, r2
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	3304      	adds	r3, #4
 80070f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	f003 030f 	and.w	r3, r3, #15
 800710c:	b2da      	uxtb	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_PCD_EP_ClrStall+0x86>
 800711c:	2302      	movs	r3, #2
 800711e:	e00e      	b.n	800713e <HAL_PCD_EP_ClrStall+0xa4>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68f9      	ldr	r1, [r7, #12]
 800712e:	4618      	mov	r0, r3
 8007130:	f003 fa39 	bl	800a5a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b08a      	sub	sp, #40	; 0x28
 800714a:	af02      	add	r7, sp, #8
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	4613      	mov	r3, r2
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	1a9b      	subs	r3, r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	3338      	adds	r3, #56	; 0x38
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	4413      	add	r3, r2
 800716a:	3304      	adds	r3, #4
 800716c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	429a      	cmp	r2, r3
 8007178:	d901      	bls.n	800717e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e06c      	b.n	8007258 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	695a      	ldr	r2, [r3, #20]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	429a      	cmp	r2, r3
 8007192:	d902      	bls.n	800719a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	3303      	adds	r3, #3
 800719e:	089b      	lsrs	r3, r3, #2
 80071a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071a2:	e02b      	b.n	80071fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	695a      	ldr	r2, [r3, #20]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d902      	bls.n	80071c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	3303      	adds	r3, #3
 80071c4:	089b      	lsrs	r3, r3, #2
 80071c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	68d9      	ldr	r1, [r3, #12]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	4603      	mov	r3, r0
 80071de:	6978      	ldr	r0, [r7, #20]
 80071e0:	f003 f8dd 	bl	800a39e <USB_WritePacket>

    ep->xfer_buff  += len;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	441a      	add	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	699a      	ldr	r2, [r3, #24]
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	441a      	add	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	b29b      	uxth	r3, r3
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	429a      	cmp	r2, r3
 8007210:	d809      	bhi.n	8007226 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800721a:	429a      	cmp	r2, r3
 800721c:	d203      	bcs.n	8007226 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1be      	bne.n	80071a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	695a      	ldr	r2, [r3, #20]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	429a      	cmp	r2, r3
 8007230:	d811      	bhi.n	8007256 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	f003 030f 	and.w	r3, r3, #15
 8007238:	2201      	movs	r2, #1
 800723a:	fa02 f303 	lsl.w	r3, r2, r3
 800723e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	43db      	mvns	r3, r3
 800724c:	6939      	ldr	r1, [r7, #16]
 800724e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007252:	4013      	ands	r3, r2
 8007254:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	333c      	adds	r3, #60	; 0x3c
 8007278:	3304      	adds	r3, #4
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b01      	cmp	r3, #1
 8007294:	f040 80a0 	bne.w	80073d8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f003 0308 	and.w	r3, r3, #8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d015      	beq.n	80072ce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4a72      	ldr	r2, [pc, #456]	; (8007470 <PCD_EP_OutXfrComplete_int+0x210>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	f240 80dd 	bls.w	8007466 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80d7 	beq.w	8007466 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	461a      	mov	r2, r3
 80072c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ca:	6093      	str	r3, [r2, #8]
 80072cc:	e0cb      	b.n	8007466 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d009      	beq.n	80072ec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	461a      	mov	r2, r3
 80072e6:	2320      	movs	r3, #32
 80072e8:	6093      	str	r3, [r2, #8]
 80072ea:	e0bc      	b.n	8007466 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f040 80b7 	bne.w	8007466 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4a5d      	ldr	r2, [pc, #372]	; (8007470 <PCD_EP_OutXfrComplete_int+0x210>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d90f      	bls.n	8007320 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	461a      	mov	r2, r3
 8007318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800731c:	6093      	str	r3, [r2, #8]
 800731e:	e0a2      	b.n	8007466 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	1a9b      	subs	r3, r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007332:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	0159      	lsls	r1, r3, #5
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	440b      	add	r3, r1
 800733c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007346:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	1a9b      	subs	r3, r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4403      	add	r3, r0
 8007356:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800735a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	4613      	mov	r3, r2
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	440b      	add	r3, r1
 800736a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800736e:	6819      	ldr	r1, [r3, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	4613      	mov	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4403      	add	r3, r0
 800737e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4419      	add	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	4613      	mov	r3, r2
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	1a9b      	subs	r3, r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4403      	add	r3, r0
 8007394:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007398:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d114      	bne.n	80073ca <PCD_EP_OutXfrComplete_int+0x16a>
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	4613      	mov	r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d108      	bne.n	80073ca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073c2:	461a      	mov	r2, r3
 80073c4:	2101      	movs	r1, #1
 80073c6:	f003 fa81 	bl	800a8cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f008 fcf9 	bl	800fdc8 <HAL_PCD_DataOutStageCallback>
 80073d6:	e046      	b.n	8007466 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4a26      	ldr	r2, [pc, #152]	; (8007474 <PCD_EP_OutXfrComplete_int+0x214>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d124      	bne.n	800742a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f6:	461a      	mov	r2, r3
 80073f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073fc:	6093      	str	r3, [r2, #8]
 80073fe:	e032      	b.n	8007466 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b00      	cmp	r3, #0
 8007408:	d008      	beq.n	800741c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007416:	461a      	mov	r2, r3
 8007418:	2320      	movs	r3, #32
 800741a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f008 fcd0 	bl	800fdc8 <HAL_PCD_DataOutStageCallback>
 8007428:	e01d      	b.n	8007466 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d114      	bne.n	800745a <PCD_EP_OutXfrComplete_int+0x1fa>
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	4613      	mov	r3, r2
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	1a9b      	subs	r3, r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d108      	bne.n	800745a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007452:	461a      	mov	r2, r3
 8007454:	2100      	movs	r1, #0
 8007456:	f003 fa39 	bl	800a8cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f008 fcb1 	bl	800fdc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	4f54300a 	.word	0x4f54300a
 8007474:	4f54310a 	.word	0x4f54310a

08007478 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	333c      	adds	r3, #60	; 0x3c
 8007490:	3304      	adds	r3, #4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4a15      	ldr	r2, [pc, #84]	; (8007500 <PCD_EP_OutSetupPacket_int+0x88>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d90e      	bls.n	80074cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d009      	beq.n	80074cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c4:	461a      	mov	r2, r3
 80074c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f008 fc69 	bl	800fda4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4a0a      	ldr	r2, [pc, #40]	; (8007500 <PCD_EP_OutSetupPacket_int+0x88>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d90c      	bls.n	80074f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d108      	bne.n	80074f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074ec:	461a      	mov	r2, r3
 80074ee:	2101      	movs	r1, #1
 80074f0:	f003 f9ec 	bl	800a8cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	4f54300a 	.word	0x4f54300a

08007504 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
 8007510:	4613      	mov	r3, r2
 8007512:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d107      	bne.n	8007532 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007522:	883b      	ldrh	r3, [r7, #0]
 8007524:	0419      	lsls	r1, r3, #16
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	430a      	orrs	r2, r1
 800752e:	629a      	str	r2, [r3, #40]	; 0x28
 8007530:	e028      	b.n	8007584 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	0c1b      	lsrs	r3, r3, #16
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	4413      	add	r3, r2
 800753e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007540:	2300      	movs	r3, #0
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	e00d      	b.n	8007562 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	3340      	adds	r3, #64	; 0x40
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	0c1b      	lsrs	r3, r3, #16
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	4413      	add	r3, r2
 800755a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	3301      	adds	r3, #1
 8007560:	73fb      	strb	r3, [r7, #15]
 8007562:	7bfa      	ldrb	r2, [r7, #15]
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	3b01      	subs	r3, #1
 8007568:	429a      	cmp	r2, r3
 800756a:	d3ec      	bcc.n	8007546 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800756c:	883b      	ldrh	r3, [r7, #0]
 800756e:	0418      	lsls	r0, r3, #16
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	3b01      	subs	r3, #1
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	4302      	orrs	r2, r0
 800757c:	3340      	adds	r3, #64	; 0x40
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	887a      	ldrh	r2, [r7, #2]
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e264      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d075      	beq.n	80076d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075ea:	4ba3      	ldr	r3, [pc, #652]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f003 030c 	and.w	r3, r3, #12
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d00c      	beq.n	8007610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075f6:	4ba0      	ldr	r3, [pc, #640]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075fe:	2b08      	cmp	r3, #8
 8007600:	d112      	bne.n	8007628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007602:	4b9d      	ldr	r3, [pc, #628]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800760a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800760e:	d10b      	bne.n	8007628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007610:	4b99      	ldr	r3, [pc, #612]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d05b      	beq.n	80076d4 <HAL_RCC_OscConfig+0x108>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d157      	bne.n	80076d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e23f      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007630:	d106      	bne.n	8007640 <HAL_RCC_OscConfig+0x74>
 8007632:	4b91      	ldr	r3, [pc, #580]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a90      	ldr	r2, [pc, #576]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	e01d      	b.n	800767c <HAL_RCC_OscConfig+0xb0>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007648:	d10c      	bne.n	8007664 <HAL_RCC_OscConfig+0x98>
 800764a:	4b8b      	ldr	r3, [pc, #556]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a8a      	ldr	r2, [pc, #552]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	4b88      	ldr	r3, [pc, #544]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a87      	ldr	r2, [pc, #540]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800765c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e00b      	b.n	800767c <HAL_RCC_OscConfig+0xb0>
 8007664:	4b84      	ldr	r3, [pc, #528]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a83      	ldr	r2, [pc, #524]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800766a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	4b81      	ldr	r3, [pc, #516]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a80      	ldr	r2, [pc, #512]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800767a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d013      	beq.n	80076ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007684:	f7fc fba0 	bl	8003dc8 <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800768c:	f7fc fb9c 	bl	8003dc8 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b64      	cmp	r3, #100	; 0x64
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e204      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800769e:	4b76      	ldr	r3, [pc, #472]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0f0      	beq.n	800768c <HAL_RCC_OscConfig+0xc0>
 80076aa:	e014      	b.n	80076d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ac:	f7fc fb8c 	bl	8003dc8 <HAL_GetTick>
 80076b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076b2:	e008      	b.n	80076c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076b4:	f7fc fb88 	bl	8003dc8 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b64      	cmp	r3, #100	; 0x64
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e1f0      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076c6:	4b6c      	ldr	r3, [pc, #432]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1f0      	bne.n	80076b4 <HAL_RCC_OscConfig+0xe8>
 80076d2:	e000      	b.n	80076d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d063      	beq.n	80077aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076e2:	4b65      	ldr	r3, [pc, #404]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 030c 	and.w	r3, r3, #12
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00b      	beq.n	8007706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076ee:	4b62      	ldr	r3, [pc, #392]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d11c      	bne.n	8007734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076fa:	4b5f      	ldr	r3, [pc, #380]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d116      	bne.n	8007734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007706:	4b5c      	ldr	r3, [pc, #368]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d005      	beq.n	800771e <HAL_RCC_OscConfig+0x152>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d001      	beq.n	800771e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e1c4      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800771e:	4b56      	ldr	r3, [pc, #344]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	4952      	ldr	r1, [pc, #328]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800772e:	4313      	orrs	r3, r2
 8007730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007732:	e03a      	b.n	80077aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d020      	beq.n	800777e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800773c:	4b4f      	ldr	r3, [pc, #316]	; (800787c <HAL_RCC_OscConfig+0x2b0>)
 800773e:	2201      	movs	r2, #1
 8007740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007742:	f7fc fb41 	bl	8003dc8 <HAL_GetTick>
 8007746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007748:	e008      	b.n	800775c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800774a:	f7fc fb3d 	bl	8003dc8 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e1a5      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800775c:	4b46      	ldr	r3, [pc, #280]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0f0      	beq.n	800774a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007768:	4b43      	ldr	r3, [pc, #268]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	4940      	ldr	r1, [pc, #256]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007778:	4313      	orrs	r3, r2
 800777a:	600b      	str	r3, [r1, #0]
 800777c:	e015      	b.n	80077aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800777e:	4b3f      	ldr	r3, [pc, #252]	; (800787c <HAL_RCC_OscConfig+0x2b0>)
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007784:	f7fc fb20 	bl	8003dc8 <HAL_GetTick>
 8007788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800778a:	e008      	b.n	800779e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800778c:	f7fc fb1c 	bl	8003dc8 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e184      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800779e:	4b36      	ldr	r3, [pc, #216]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1f0      	bne.n	800778c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d030      	beq.n	8007818 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d016      	beq.n	80077ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077be:	4b30      	ldr	r3, [pc, #192]	; (8007880 <HAL_RCC_OscConfig+0x2b4>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c4:	f7fc fb00 	bl	8003dc8 <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077ca:	e008      	b.n	80077de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077cc:	f7fc fafc 	bl	8003dc8 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e164      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077de:	4b26      	ldr	r3, [pc, #152]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80077e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0f0      	beq.n	80077cc <HAL_RCC_OscConfig+0x200>
 80077ea:	e015      	b.n	8007818 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ec:	4b24      	ldr	r3, [pc, #144]	; (8007880 <HAL_RCC_OscConfig+0x2b4>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077f2:	f7fc fae9 	bl	8003dc8 <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077f8:	e008      	b.n	800780c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077fa:	f7fc fae5 	bl	8003dc8 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e14d      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800780c:	4b1a      	ldr	r3, [pc, #104]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800780e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f0      	bne.n	80077fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80a0 	beq.w	8007966 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007826:	2300      	movs	r3, #0
 8007828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800782a:	4b13      	ldr	r3, [pc, #76]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10f      	bne.n	8007856 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007836:	2300      	movs	r3, #0
 8007838:	60bb      	str	r3, [r7, #8]
 800783a:	4b0f      	ldr	r3, [pc, #60]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	4a0e      	ldr	r2, [pc, #56]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007844:	6413      	str	r3, [r2, #64]	; 0x40
 8007846:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800784e:	60bb      	str	r3, [r7, #8]
 8007850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007852:	2301      	movs	r3, #1
 8007854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007856:	4b0b      	ldr	r3, [pc, #44]	; (8007884 <HAL_RCC_OscConfig+0x2b8>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785e:	2b00      	cmp	r3, #0
 8007860:	d121      	bne.n	80078a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007862:	4b08      	ldr	r3, [pc, #32]	; (8007884 <HAL_RCC_OscConfig+0x2b8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a07      	ldr	r2, [pc, #28]	; (8007884 <HAL_RCC_OscConfig+0x2b8>)
 8007868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800786c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800786e:	f7fc faab 	bl	8003dc8 <HAL_GetTick>
 8007872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007874:	e011      	b.n	800789a <HAL_RCC_OscConfig+0x2ce>
 8007876:	bf00      	nop
 8007878:	40023800 	.word	0x40023800
 800787c:	42470000 	.word	0x42470000
 8007880:	42470e80 	.word	0x42470e80
 8007884:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007888:	f7fc fa9e 	bl	8003dc8 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e106      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800789a:	4b85      	ldr	r3, [pc, #532]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0f0      	beq.n	8007888 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d106      	bne.n	80078bc <HAL_RCC_OscConfig+0x2f0>
 80078ae:	4b81      	ldr	r3, [pc, #516]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	4a80      	ldr	r2, [pc, #512]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80078b4:	f043 0301 	orr.w	r3, r3, #1
 80078b8:	6713      	str	r3, [r2, #112]	; 0x70
 80078ba:	e01c      	b.n	80078f6 <HAL_RCC_OscConfig+0x32a>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	2b05      	cmp	r3, #5
 80078c2:	d10c      	bne.n	80078de <HAL_RCC_OscConfig+0x312>
 80078c4:	4b7b      	ldr	r3, [pc, #492]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80078c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c8:	4a7a      	ldr	r2, [pc, #488]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80078ca:	f043 0304 	orr.w	r3, r3, #4
 80078ce:	6713      	str	r3, [r2, #112]	; 0x70
 80078d0:	4b78      	ldr	r3, [pc, #480]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80078d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d4:	4a77      	ldr	r2, [pc, #476]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80078d6:	f043 0301 	orr.w	r3, r3, #1
 80078da:	6713      	str	r3, [r2, #112]	; 0x70
 80078dc:	e00b      	b.n	80078f6 <HAL_RCC_OscConfig+0x32a>
 80078de:	4b75      	ldr	r3, [pc, #468]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80078e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e2:	4a74      	ldr	r2, [pc, #464]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80078e4:	f023 0301 	bic.w	r3, r3, #1
 80078e8:	6713      	str	r3, [r2, #112]	; 0x70
 80078ea:	4b72      	ldr	r3, [pc, #456]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80078ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ee:	4a71      	ldr	r2, [pc, #452]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80078f0:	f023 0304 	bic.w	r3, r3, #4
 80078f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d015      	beq.n	800792a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078fe:	f7fc fa63 	bl	8003dc8 <HAL_GetTick>
 8007902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007904:	e00a      	b.n	800791c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007906:	f7fc fa5f 	bl	8003dc8 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	f241 3288 	movw	r2, #5000	; 0x1388
 8007914:	4293      	cmp	r3, r2
 8007916:	d901      	bls.n	800791c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e0c5      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800791c:	4b65      	ldr	r3, [pc, #404]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 800791e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0ee      	beq.n	8007906 <HAL_RCC_OscConfig+0x33a>
 8007928:	e014      	b.n	8007954 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800792a:	f7fc fa4d 	bl	8003dc8 <HAL_GetTick>
 800792e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007930:	e00a      	b.n	8007948 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007932:	f7fc fa49 	bl	8003dc8 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007940:	4293      	cmp	r3, r2
 8007942:	d901      	bls.n	8007948 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e0af      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007948:	4b5a      	ldr	r3, [pc, #360]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 800794a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1ee      	bne.n	8007932 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d105      	bne.n	8007966 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800795a:	4b56      	ldr	r3, [pc, #344]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	4a55      	ldr	r2, [pc, #340]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 8007960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007964:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 809b 	beq.w	8007aa6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007970:	4b50      	ldr	r3, [pc, #320]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f003 030c 	and.w	r3, r3, #12
 8007978:	2b08      	cmp	r3, #8
 800797a:	d05c      	beq.n	8007a36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d141      	bne.n	8007a08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007984:	4b4c      	ldr	r3, [pc, #304]	; (8007ab8 <HAL_RCC_OscConfig+0x4ec>)
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800798a:	f7fc fa1d 	bl	8003dc8 <HAL_GetTick>
 800798e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007990:	e008      	b.n	80079a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007992:	f7fc fa19 	bl	8003dc8 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e081      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079a4:	4b43      	ldr	r3, [pc, #268]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1f0      	bne.n	8007992 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	69da      	ldr	r2, [r3, #28]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	019b      	lsls	r3, r3, #6
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	085b      	lsrs	r3, r3, #1
 80079c8:	3b01      	subs	r3, #1
 80079ca:	041b      	lsls	r3, r3, #16
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	061b      	lsls	r3, r3, #24
 80079d4:	4937      	ldr	r1, [pc, #220]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079da:	4b37      	ldr	r3, [pc, #220]	; (8007ab8 <HAL_RCC_OscConfig+0x4ec>)
 80079dc:	2201      	movs	r2, #1
 80079de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e0:	f7fc f9f2 	bl	8003dc8 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079e8:	f7fc f9ee 	bl	8003dc8 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e056      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079fa:	4b2e      	ldr	r3, [pc, #184]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f0      	beq.n	80079e8 <HAL_RCC_OscConfig+0x41c>
 8007a06:	e04e      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a08:	4b2b      	ldr	r3, [pc, #172]	; (8007ab8 <HAL_RCC_OscConfig+0x4ec>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a0e:	f7fc f9db 	bl	8003dc8 <HAL_GetTick>
 8007a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a16:	f7fc f9d7 	bl	8003dc8 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e03f      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a28:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1f0      	bne.n	8007a16 <HAL_RCC_OscConfig+0x44a>
 8007a34:	e037      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d101      	bne.n	8007a42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e032      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a42:	4b1c      	ldr	r3, [pc, #112]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d028      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d121      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d11a      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a72:	4013      	ands	r3, r2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d111      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a88:	085b      	lsrs	r3, r3, #1
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d107      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d001      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40007000 	.word	0x40007000
 8007ab4:	40023800 	.word	0x40023800
 8007ab8:	42470060 	.word	0x42470060

08007abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e0cc      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ad0:	4b68      	ldr	r3, [pc, #416]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d90c      	bls.n	8007af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ade:	4b65      	ldr	r3, [pc, #404]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ae6:	4b63      	ldr	r3, [pc, #396]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d001      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e0b8      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d020      	beq.n	8007b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b10:	4b59      	ldr	r3, [pc, #356]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	4a58      	ldr	r2, [pc, #352]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0308 	and.w	r3, r3, #8
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d005      	beq.n	8007b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b28:	4b53      	ldr	r3, [pc, #332]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	4a52      	ldr	r2, [pc, #328]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b34:	4b50      	ldr	r3, [pc, #320]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	494d      	ldr	r1, [pc, #308]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d044      	beq.n	8007bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d107      	bne.n	8007b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b5a:	4b47      	ldr	r3, [pc, #284]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d119      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e07f      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d003      	beq.n	8007b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d107      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b7a:	4b3f      	ldr	r3, [pc, #252]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e06f      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b8a:	4b3b      	ldr	r3, [pc, #236]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e067      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b9a:	4b37      	ldr	r3, [pc, #220]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f023 0203 	bic.w	r2, r3, #3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	4934      	ldr	r1, [pc, #208]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bac:	f7fc f90c 	bl	8003dc8 <HAL_GetTick>
 8007bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bb2:	e00a      	b.n	8007bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bb4:	f7fc f908 	bl	8003dc8 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e04f      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bca:	4b2b      	ldr	r3, [pc, #172]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f003 020c 	and.w	r2, r3, #12
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d1eb      	bne.n	8007bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bdc:	4b25      	ldr	r3, [pc, #148]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d20c      	bcs.n	8007c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bea:	4b22      	ldr	r3, [pc, #136]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bf2:	4b20      	ldr	r3, [pc, #128]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0307 	and.w	r3, r3, #7
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d001      	beq.n	8007c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e032      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d008      	beq.n	8007c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c10:	4b19      	ldr	r3, [pc, #100]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	4916      	ldr	r1, [pc, #88]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0308 	and.w	r3, r3, #8
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d009      	beq.n	8007c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c2e:	4b12      	ldr	r3, [pc, #72]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	490e      	ldr	r1, [pc, #56]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c42:	f000 f821 	bl	8007c88 <HAL_RCC_GetSysClockFreq>
 8007c46:	4602      	mov	r2, r0
 8007c48:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	091b      	lsrs	r3, r3, #4
 8007c4e:	f003 030f 	and.w	r3, r3, #15
 8007c52:	490a      	ldr	r1, [pc, #40]	; (8007c7c <HAL_RCC_ClockConfig+0x1c0>)
 8007c54:	5ccb      	ldrb	r3, [r1, r3]
 8007c56:	fa22 f303 	lsr.w	r3, r2, r3
 8007c5a:	4a09      	ldr	r2, [pc, #36]	; (8007c80 <HAL_RCC_ClockConfig+0x1c4>)
 8007c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c5e:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <HAL_RCC_ClockConfig+0x1c8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fb fc6c 	bl	8003540 <HAL_InitTick>

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	40023c00 	.word	0x40023c00
 8007c78:	40023800 	.word	0x40023800
 8007c7c:	080172a0 	.word	0x080172a0
 8007c80:	2000002c 	.word	0x2000002c
 8007c84:	20000030 	.word	0x20000030

08007c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	607b      	str	r3, [r7, #4]
 8007c94:	2300      	movs	r3, #0
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ca0:	4b67      	ldr	r3, [pc, #412]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f003 030c 	and.w	r3, r3, #12
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d00d      	beq.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	f200 80bd 	bhi.w	8007e2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <HAL_RCC_GetSysClockFreq+0x34>
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d003      	beq.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007cba:	e0b7      	b.n	8007e2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cbc:	4b61      	ldr	r3, [pc, #388]	; (8007e44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007cbe:	60bb      	str	r3, [r7, #8]
       break;
 8007cc0:	e0b7      	b.n	8007e32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cc2:	4b61      	ldr	r3, [pc, #388]	; (8007e48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007cc4:	60bb      	str	r3, [r7, #8]
      break;
 8007cc6:	e0b4      	b.n	8007e32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cc8:	4b5d      	ldr	r3, [pc, #372]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cd2:	4b5b      	ldr	r3, [pc, #364]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d04d      	beq.n	8007d7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cde:	4b58      	ldr	r3, [pc, #352]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	099b      	lsrs	r3, r3, #6
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f04f 0300 	mov.w	r3, #0
 8007cea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007cee:	f04f 0100 	mov.w	r1, #0
 8007cf2:	ea02 0800 	and.w	r8, r2, r0
 8007cf6:	ea03 0901 	and.w	r9, r3, r1
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	f04f 0300 	mov.w	r3, #0
 8007d06:	014b      	lsls	r3, r1, #5
 8007d08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d0c:	0142      	lsls	r2, r0, #5
 8007d0e:	4610      	mov	r0, r2
 8007d10:	4619      	mov	r1, r3
 8007d12:	ebb0 0008 	subs.w	r0, r0, r8
 8007d16:	eb61 0109 	sbc.w	r1, r1, r9
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	018b      	lsls	r3, r1, #6
 8007d24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d28:	0182      	lsls	r2, r0, #6
 8007d2a:	1a12      	subs	r2, r2, r0
 8007d2c:	eb63 0301 	sbc.w	r3, r3, r1
 8007d30:	f04f 0000 	mov.w	r0, #0
 8007d34:	f04f 0100 	mov.w	r1, #0
 8007d38:	00d9      	lsls	r1, r3, #3
 8007d3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d3e:	00d0      	lsls	r0, r2, #3
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	eb12 0208 	adds.w	r2, r2, r8
 8007d48:	eb43 0309 	adc.w	r3, r3, r9
 8007d4c:	f04f 0000 	mov.w	r0, #0
 8007d50:	f04f 0100 	mov.w	r1, #0
 8007d54:	0259      	lsls	r1, r3, #9
 8007d56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007d5a:	0250      	lsls	r0, r2, #9
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4610      	mov	r0, r2
 8007d62:	4619      	mov	r1, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	461a      	mov	r2, r3
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	f7f8 ff3c 	bl	8000be8 <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4613      	mov	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	e04a      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d7a:	4b31      	ldr	r3, [pc, #196]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	099b      	lsrs	r3, r3, #6
 8007d80:	461a      	mov	r2, r3
 8007d82:	f04f 0300 	mov.w	r3, #0
 8007d86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d8a:	f04f 0100 	mov.w	r1, #0
 8007d8e:	ea02 0400 	and.w	r4, r2, r0
 8007d92:	ea03 0501 	and.w	r5, r3, r1
 8007d96:	4620      	mov	r0, r4
 8007d98:	4629      	mov	r1, r5
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	014b      	lsls	r3, r1, #5
 8007da4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007da8:	0142      	lsls	r2, r0, #5
 8007daa:	4610      	mov	r0, r2
 8007dac:	4619      	mov	r1, r3
 8007dae:	1b00      	subs	r0, r0, r4
 8007db0:	eb61 0105 	sbc.w	r1, r1, r5
 8007db4:	f04f 0200 	mov.w	r2, #0
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	018b      	lsls	r3, r1, #6
 8007dbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007dc2:	0182      	lsls	r2, r0, #6
 8007dc4:	1a12      	subs	r2, r2, r0
 8007dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8007dca:	f04f 0000 	mov.w	r0, #0
 8007dce:	f04f 0100 	mov.w	r1, #0
 8007dd2:	00d9      	lsls	r1, r3, #3
 8007dd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dd8:	00d0      	lsls	r0, r2, #3
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	1912      	adds	r2, r2, r4
 8007de0:	eb45 0303 	adc.w	r3, r5, r3
 8007de4:	f04f 0000 	mov.w	r0, #0
 8007de8:	f04f 0100 	mov.w	r1, #0
 8007dec:	0299      	lsls	r1, r3, #10
 8007dee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007df2:	0290      	lsls	r0, r2, #10
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f04f 0300 	mov.w	r3, #0
 8007e04:	f7f8 fef0 	bl	8000be8 <__aeabi_uldivmod>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	0c1b      	lsrs	r3, r3, #16
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e28:	60bb      	str	r3, [r7, #8]
      break;
 8007e2a:	e002      	b.n	8007e32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e2c:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e2e:	60bb      	str	r3, [r7, #8]
      break;
 8007e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e32:	68bb      	ldr	r3, [r7, #8]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007e3e:	bf00      	nop
 8007e40:	40023800 	.word	0x40023800
 8007e44:	00f42400 	.word	0x00f42400
 8007e48:	007a1200 	.word	0x007a1200

08007e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e50:	4b03      	ldr	r3, [pc, #12]	; (8007e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e52:	681b      	ldr	r3, [r3, #0]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	2000002c 	.word	0x2000002c

08007e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e68:	f7ff fff0 	bl	8007e4c <HAL_RCC_GetHCLKFreq>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	0a9b      	lsrs	r3, r3, #10
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	4903      	ldr	r1, [pc, #12]	; (8007e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e7a:	5ccb      	ldrb	r3, [r1, r3]
 8007e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	40023800 	.word	0x40023800
 8007e88:	080172b0 	.word	0x080172b0

08007e8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	220f      	movs	r2, #15
 8007e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e9c:	4b12      	ldr	r3, [pc, #72]	; (8007ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 0203 	and.w	r2, r3, #3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ea8:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007ec0:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	08db      	lsrs	r3, r3, #3
 8007ec6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ece:	4b07      	ldr	r3, [pc, #28]	; (8007eec <HAL_RCC_GetClockConfig+0x60>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0207 	and.w	r2, r3, #7
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	601a      	str	r2, [r3, #0]
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	40023c00 	.word	0x40023c00

08007ef0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e01c      	b.n	8007f3c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	795b      	ldrb	r3, [r3, #5]
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d105      	bne.n	8007f18 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fb f992 	bl	800323c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f042 0204 	orr.w	r2, r2, #4
 8007f2c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e07b      	b.n	800804e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d108      	bne.n	8007f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f66:	d009      	beq.n	8007f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	61da      	str	r2, [r3, #28]
 8007f6e:	e005      	b.n	8007f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fb f972 	bl	8003280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fec:	431a      	orrs	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008000:	ea42 0103 	orr.w	r1, r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	0c1b      	lsrs	r3, r3, #16
 800801a:	f003 0104 	and.w	r1, r3, #4
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	f003 0210 	and.w	r2, r3, #16
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69da      	ldr	r2, [r3, #28]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800803c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e01a      	b.n	800809e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800807e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fb f9d7 	bl	8003434 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b088      	sub	sp, #32
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	603b      	str	r3, [r7, #0]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_SPI_Transmit+0x22>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e126      	b.n	8008316 <HAL_SPI_Transmit+0x270>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080d0:	f7fb fe7a 	bl	8003dc8 <HAL_GetTick>
 80080d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d002      	beq.n	80080ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80080e6:	2302      	movs	r3, #2
 80080e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080ea:	e10b      	b.n	8008304 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <HAL_SPI_Transmit+0x52>
 80080f2:	88fb      	ldrh	r3, [r7, #6]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d102      	bne.n	80080fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080fc:	e102      	b.n	8008304 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2203      	movs	r2, #3
 8008102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	88fa      	ldrh	r2, [r7, #6]
 8008116:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	88fa      	ldrh	r2, [r7, #6]
 800811c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008144:	d10f      	bne.n	8008166 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008154:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008164:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	d007      	beq.n	8008184 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008182:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800818c:	d14b      	bne.n	8008226 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <HAL_SPI_Transmit+0xf6>
 8008196:	8afb      	ldrh	r3, [r7, #22]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d13e      	bne.n	800821a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a0:	881a      	ldrh	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ac:	1c9a      	adds	r2, r3, #2
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	3b01      	subs	r3, #1
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081c0:	e02b      	b.n	800821a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d112      	bne.n	80081f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d4:	881a      	ldrh	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	1c9a      	adds	r2, r3, #2
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80081f4:	e011      	b.n	800821a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081f6:	f7fb fde7 	bl	8003dc8 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d803      	bhi.n	800820e <HAL_SPI_Transmit+0x168>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800820c:	d102      	bne.n	8008214 <HAL_SPI_Transmit+0x16e>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008218:	e074      	b.n	8008304 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800821e:	b29b      	uxth	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1ce      	bne.n	80081c2 <HAL_SPI_Transmit+0x11c>
 8008224:	e04c      	b.n	80082c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <HAL_SPI_Transmit+0x18e>
 800822e:	8afb      	ldrh	r3, [r7, #22]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d140      	bne.n	80082b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	330c      	adds	r3, #12
 800823e:	7812      	ldrb	r2, [r2, #0]
 8008240:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008250:	b29b      	uxth	r3, r3
 8008252:	3b01      	subs	r3, #1
 8008254:	b29a      	uxth	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800825a:	e02c      	b.n	80082b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b02      	cmp	r3, #2
 8008268:	d113      	bne.n	8008292 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	330c      	adds	r3, #12
 8008274:	7812      	ldrb	r2, [r2, #0]
 8008276:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008286:	b29b      	uxth	r3, r3
 8008288:	3b01      	subs	r3, #1
 800828a:	b29a      	uxth	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008290:	e011      	b.n	80082b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008292:	f7fb fd99 	bl	8003dc8 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d803      	bhi.n	80082aa <HAL_SPI_Transmit+0x204>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082a8:	d102      	bne.n	80082b0 <HAL_SPI_Transmit+0x20a>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082b4:	e026      	b.n	8008304 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1cd      	bne.n	800825c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fb53 	bl	8008970 <SPI_EndRxTxTransaction>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2220      	movs	r2, #32
 80082d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10a      	bne.n	80082f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082de:	2300      	movs	r3, #0
 80082e0:	613b      	str	r3, [r7, #16]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	613b      	str	r3, [r7, #16]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	613b      	str	r3, [r7, #16]
 80082f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	77fb      	strb	r3, [r7, #31]
 8008300:	e000      	b.n	8008304 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008302:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008314:	7ffb      	ldrb	r3, [r7, #31]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3720      	adds	r7, #32
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	4613      	mov	r3, r2
 800832c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008338:	2b01      	cmp	r3, #1
 800833a:	d101      	bne.n	8008340 <HAL_SPI_Transmit_DMA+0x20>
 800833c:	2302      	movs	r3, #2
 800833e:	e09b      	b.n	8008478 <HAL_SPI_Transmit_DMA+0x158>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b01      	cmp	r3, #1
 8008352:	d002      	beq.n	800835a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008354:	2302      	movs	r3, #2
 8008356:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008358:	e089      	b.n	800846e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <HAL_SPI_Transmit_DMA+0x46>
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d102      	bne.n	800836c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	75fb      	strb	r3, [r7, #23]
    goto error;
 800836a:	e080      	b.n	800846e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2203      	movs	r2, #3
 8008370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	88fa      	ldrh	r2, [r7, #6]
 800838a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b2:	d10f      	bne.n	80083d4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d8:	4a29      	ldr	r2, [pc, #164]	; (8008480 <HAL_SPI_Transmit_DMA+0x160>)
 80083da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e0:	4a28      	ldr	r2, [pc, #160]	; (8008484 <HAL_SPI_Transmit_DMA+0x164>)
 80083e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e8:	4a27      	ldr	r2, [pc, #156]	; (8008488 <HAL_SPI_Transmit_DMA+0x168>)
 80083ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083f0:	2200      	movs	r2, #0
 80083f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fc:	4619      	mov	r1, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	330c      	adds	r3, #12
 8008404:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800840a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800840c:	f7fc f98e 	bl	800472c <HAL_DMA_Start_IT>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00c      	beq.n	8008430 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841a:	f043 0210 	orr.w	r2, r3, #16
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800842e:	e01e      	b.n	800846e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d007      	beq.n	800844e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800844c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0220 	orr.w	r2, r2, #32
 800845c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0202 	orr.w	r2, r2, #2
 800846c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008476:	7dfb      	ldrb	r3, [r7, #23]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	080087dd 	.word	0x080087dd
 8008484:	08008735 	.word	0x08008735
 8008488:	080087f9 	.word	0x080087f9

0800848c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00f      	beq.n	80084c0 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fc f999 	bl	80047dc <HAL_DMA_Abort>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d007      	beq.n	80084c0 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b4:	f043 0210 	orr.w	r2, r3, #16
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00f      	beq.n	80084e8 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fc f985 	bl	80047dc <HAL_DMA_Abort>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084dc:	f043 0210 	orr.w	r2, r3, #16
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 0203 	bic.w	r2, r2, #3
 80084f6:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8008500:	7bfb      	ldrb	r3, [r7, #15]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	099b      	lsrs	r3, r3, #6
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10f      	bne.n	8008550 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	099b      	lsrs	r3, r3, #6
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d004      	beq.n	8008550 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	4798      	blx	r3
    return;
 800854e:	e0d7      	b.n	8008700 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	085b      	lsrs	r3, r3, #1
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <HAL_SPI_IRQHandler+0x66>
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	09db      	lsrs	r3, r3, #7
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	d004      	beq.n	8008572 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4798      	blx	r3
    return;
 8008570:	e0c6      	b.n	8008700 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10c      	bne.n	8008598 <HAL_SPI_IRQHandler+0x8c>
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	099b      	lsrs	r3, r3, #6
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d106      	bne.n	8008598 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	0a1b      	lsrs	r3, r3, #8
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 80b4 	beq.w	8008700 <HAL_SPI_IRQHandler+0x1f4>
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 80ad 	beq.w	8008700 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	099b      	lsrs	r3, r3, #6
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d023      	beq.n	80085fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d011      	beq.n	80085e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c2:	f043 0204 	orr.w	r2, r3, #4
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085ca:	2300      	movs	r3, #0
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	e00b      	b.n	80085fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085e2:	2300      	movs	r3, #0
 80085e4:	613b      	str	r3, [r7, #16]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	613b      	str	r3, [r7, #16]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	693b      	ldr	r3, [r7, #16]
        return;
 80085f8:	e082      	b.n	8008700 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	095b      	lsrs	r3, r3, #5
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	d014      	beq.n	8008630 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860a:	f043 0201 	orr.w	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	0a1b      	lsrs	r3, r3, #8
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00c      	beq.n	8008656 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008640:	f043 0208 	orr.w	r2, r3, #8
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008648:	2300      	movs	r3, #0
 800864a:	60bb      	str	r3, [r7, #8]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	60bb      	str	r3, [r7, #8]
 8008654:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865a:	2b00      	cmp	r3, #0
 800865c:	d04f      	beq.n	80086fe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800866c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d104      	bne.n	800868a <HAL_SPI_IRQHandler+0x17e>
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d034      	beq.n	80086f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0203 	bic.w	r2, r2, #3
 8008698:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d011      	beq.n	80086c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a6:	4a18      	ldr	r2, [pc, #96]	; (8008708 <HAL_SPI_IRQHandler+0x1fc>)
 80086a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fc f904 	bl	80048bc <HAL_DMA_Abort_IT>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d016      	beq.n	80086fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086d2:	4a0d      	ldr	r2, [pc, #52]	; (8008708 <HAL_SPI_IRQHandler+0x1fc>)
 80086d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fc f8ee 	bl	80048bc <HAL_DMA_Abort_IT>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80086f2:	e003      	b.n	80086fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f813 	bl	8008720 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80086fa:	e000      	b.n	80086fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80086fc:	bf00      	nop
    return;
 80086fe:	bf00      	nop
  }
}
 8008700:	3720      	adds	r7, #32
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	08008839 	.word	0x08008839

0800870c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008742:	f7fb fb41 	bl	8003dc8 <HAL_GetTick>
 8008746:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008756:	d03b      	beq.n	80087d0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0220 	bic.w	r2, r2, #32
 8008766:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 0202 	bic.w	r2, r2, #2
 8008776:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	2164      	movs	r1, #100	; 0x64
 800877c:	6978      	ldr	r0, [r7, #20]
 800877e:	f000 f8f7 	bl	8008970 <SPI_EndRxTxTransaction>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d005      	beq.n	8008794 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878c:	f043 0220 	orr.w	r2, r3, #32
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10a      	bne.n	80087b2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800879c:	2300      	movs	r3, #0
 800879e:	60fb      	str	r3, [r7, #12]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2200      	movs	r2, #0
 80087b6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d003      	beq.n	80087d0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80087c8:	6978      	ldr	r0, [r7, #20]
 80087ca:	f7ff ffa9 	bl	8008720 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80087ce:	e002      	b.n	80087d6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80087d0:	6978      	ldr	r0, [r7, #20]
 80087d2:	f7f9 fa57 	bl	8001c84 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff ff8e 	bl	800870c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80087f0:	bf00      	nop
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 0203 	bic.w	r2, r2, #3
 8008814:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881a:	f043 0210 	orr.w	r2, r3, #16
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7ff ff78 	bl	8008720 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008844:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff ff64 	bl	8008720 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008858:	bf00      	nop
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	4613      	mov	r3, r2
 800886e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008870:	f7fb faaa 	bl	8003dc8 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008878:	1a9b      	subs	r3, r3, r2
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	4413      	add	r3, r2
 800887e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008880:	f7fb faa2 	bl	8003dc8 <HAL_GetTick>
 8008884:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008886:	4b39      	ldr	r3, [pc, #228]	; (800896c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	015b      	lsls	r3, r3, #5
 800888c:	0d1b      	lsrs	r3, r3, #20
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	fb02 f303 	mul.w	r3, r2, r3
 8008894:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008896:	e054      	b.n	8008942 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800889e:	d050      	beq.n	8008942 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80088a0:	f7fb fa92 	bl	8003dc8 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d902      	bls.n	80088b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d13d      	bne.n	8008932 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088ce:	d111      	bne.n	80088f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088d8:	d004      	beq.n	80088e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088e2:	d107      	bne.n	80088f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088fc:	d10f      	bne.n	800891e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800891c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e017      	b.n	8008962 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	3b01      	subs	r3, #1
 8008940:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4013      	ands	r3, r2
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	429a      	cmp	r2, r3
 8008950:	bf0c      	ite	eq
 8008952:	2301      	moveq	r3, #1
 8008954:	2300      	movne	r3, #0
 8008956:	b2db      	uxtb	r3, r3
 8008958:	461a      	mov	r2, r3
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	429a      	cmp	r2, r3
 800895e:	d19b      	bne.n	8008898 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3720      	adds	r7, #32
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	2000002c 	.word	0x2000002c

08008970 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af02      	add	r7, sp, #8
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800897c:	4b1b      	ldr	r3, [pc, #108]	; (80089ec <SPI_EndRxTxTransaction+0x7c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a1b      	ldr	r2, [pc, #108]	; (80089f0 <SPI_EndRxTxTransaction+0x80>)
 8008982:	fba2 2303 	umull	r2, r3, r2, r3
 8008986:	0d5b      	lsrs	r3, r3, #21
 8008988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800898c:	fb02 f303 	mul.w	r3, r2, r3
 8008990:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800899a:	d112      	bne.n	80089c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2200      	movs	r2, #0
 80089a4:	2180      	movs	r1, #128	; 0x80
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff ff5a 	bl	8008860 <SPI_WaitFlagStateUntilTimeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d016      	beq.n	80089e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b6:	f043 0220 	orr.w	r2, r3, #32
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e00f      	b.n	80089e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00a      	beq.n	80089de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d8:	2b80      	cmp	r3, #128	; 0x80
 80089da:	d0f2      	beq.n	80089c2 <SPI_EndRxTxTransaction+0x52>
 80089dc:	e000      	b.n	80089e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80089de:	bf00      	nop
  }

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3718      	adds	r7, #24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	2000002c 	.word	0x2000002c
 80089f0:	165e9f81 	.word	0x165e9f81

080089f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e041      	b.n	8008a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d106      	bne.n	8008a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7fa fd4a 	bl	80034b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f000 fa96 	bl	8008f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d001      	beq.n	8008aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e04e      	b.n	8008b4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0201 	orr.w	r2, r2, #1
 8008ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a23      	ldr	r2, [pc, #140]	; (8008b58 <HAL_TIM_Base_Start_IT+0xc4>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d022      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad6:	d01d      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a1f      	ldr	r2, [pc, #124]	; (8008b5c <HAL_TIM_Base_Start_IT+0xc8>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d018      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a1e      	ldr	r2, [pc, #120]	; (8008b60 <HAL_TIM_Base_Start_IT+0xcc>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d013      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a1c      	ldr	r2, [pc, #112]	; (8008b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00e      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a1b      	ldr	r2, [pc, #108]	; (8008b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d009      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a19      	ldr	r2, [pc, #100]	; (8008b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d004      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a18      	ldr	r2, [pc, #96]	; (8008b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d111      	bne.n	8008b38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b06      	cmp	r3, #6
 8008b24:	d010      	beq.n	8008b48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f042 0201 	orr.w	r2, r2, #1
 8008b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b36:	e007      	b.n	8008b48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0201 	orr.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40010000 	.word	0x40010000
 8008b5c:	40000400 	.word	0x40000400
 8008b60:	40000800 	.word	0x40000800
 8008b64:	40000c00 	.word	0x40000c00
 8008b68:	40010400 	.word	0x40010400
 8008b6c:	40014000 	.word	0x40014000
 8008b70:	40001800 	.word	0x40001800

08008b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d122      	bne.n	8008bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d11b      	bne.n	8008bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f06f 0202 	mvn.w	r2, #2
 8008ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f9b5 	bl	8008f26 <HAL_TIM_IC_CaptureCallback>
 8008bbc:	e005      	b.n	8008bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f9a7 	bl	8008f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f9b8 	bl	8008f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f003 0304 	and.w	r3, r3, #4
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	d122      	bne.n	8008c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d11b      	bne.n	8008c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f06f 0204 	mvn.w	r2, #4
 8008bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f98b 	bl	8008f26 <HAL_TIM_IC_CaptureCallback>
 8008c10:	e005      	b.n	8008c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f97d 	bl	8008f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f98e 	bl	8008f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	f003 0308 	and.w	r3, r3, #8
 8008c2e:	2b08      	cmp	r3, #8
 8008c30:	d122      	bne.n	8008c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f003 0308 	and.w	r3, r3, #8
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	d11b      	bne.n	8008c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f06f 0208 	mvn.w	r2, #8
 8008c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	f003 0303 	and.w	r3, r3, #3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f961 	bl	8008f26 <HAL_TIM_IC_CaptureCallback>
 8008c64:	e005      	b.n	8008c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f953 	bl	8008f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f964 	bl	8008f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	f003 0310 	and.w	r3, r3, #16
 8008c82:	2b10      	cmp	r3, #16
 8008c84:	d122      	bne.n	8008ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f003 0310 	and.w	r3, r3, #16
 8008c90:	2b10      	cmp	r3, #16
 8008c92:	d11b      	bne.n	8008ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f06f 0210 	mvn.w	r2, #16
 8008c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2208      	movs	r2, #8
 8008ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f937 	bl	8008f26 <HAL_TIM_IC_CaptureCallback>
 8008cb8:	e005      	b.n	8008cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f929 	bl	8008f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f93a 	bl	8008f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d10e      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d107      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f06f 0201 	mvn.w	r2, #1
 8008cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7fa f96c 	bl	8002fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d02:	2b80      	cmp	r3, #128	; 0x80
 8008d04:	d10e      	bne.n	8008d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d10:	2b80      	cmp	r3, #128	; 0x80
 8008d12:	d107      	bne.n	8008d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fae0 	bl	80092e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2e:	2b40      	cmp	r3, #64	; 0x40
 8008d30:	d10e      	bne.n	8008d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3c:	2b40      	cmp	r3, #64	; 0x40
 8008d3e:	d107      	bne.n	8008d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f8ff 	bl	8008f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	f003 0320 	and.w	r3, r3, #32
 8008d5a:	2b20      	cmp	r3, #32
 8008d5c:	d10e      	bne.n	8008d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f003 0320 	and.w	r3, r3, #32
 8008d68:	2b20      	cmp	r3, #32
 8008d6a:	d107      	bne.n	8008d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f06f 0220 	mvn.w	r2, #32
 8008d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 faaa 	bl	80092d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d101      	bne.n	8008da0 <HAL_TIM_ConfigClockSource+0x1c>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e0b4      	b.n	8008f0a <HAL_TIM_ConfigClockSource+0x186>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd8:	d03e      	beq.n	8008e58 <HAL_TIM_ConfigClockSource+0xd4>
 8008dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dde:	f200 8087 	bhi.w	8008ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8008de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de6:	f000 8086 	beq.w	8008ef6 <HAL_TIM_ConfigClockSource+0x172>
 8008dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dee:	d87f      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8008df0:	2b70      	cmp	r3, #112	; 0x70
 8008df2:	d01a      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0xa6>
 8008df4:	2b70      	cmp	r3, #112	; 0x70
 8008df6:	d87b      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8008df8:	2b60      	cmp	r3, #96	; 0x60
 8008dfa:	d050      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0x11a>
 8008dfc:	2b60      	cmp	r3, #96	; 0x60
 8008dfe:	d877      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8008e00:	2b50      	cmp	r3, #80	; 0x50
 8008e02:	d03c      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0xfa>
 8008e04:	2b50      	cmp	r3, #80	; 0x50
 8008e06:	d873      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	d058      	beq.n	8008ebe <HAL_TIM_ConfigClockSource+0x13a>
 8008e0c:	2b40      	cmp	r3, #64	; 0x40
 8008e0e:	d86f      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8008e10:	2b30      	cmp	r3, #48	; 0x30
 8008e12:	d064      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x15a>
 8008e14:	2b30      	cmp	r3, #48	; 0x30
 8008e16:	d86b      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8008e18:	2b20      	cmp	r3, #32
 8008e1a:	d060      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x15a>
 8008e1c:	2b20      	cmp	r3, #32
 8008e1e:	d867      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d05c      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x15a>
 8008e24:	2b10      	cmp	r3, #16
 8008e26:	d05a      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x15a>
 8008e28:	e062      	b.n	8008ef0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	6899      	ldr	r1, [r3, #8]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f000 f9ad 	bl	8009198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	609a      	str	r2, [r3, #8]
      break;
 8008e56:	e04f      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	6899      	ldr	r1, [r3, #8]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f000 f996 	bl	8009198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689a      	ldr	r2, [r3, #8]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e7a:	609a      	str	r2, [r3, #8]
      break;
 8008e7c:	e03c      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6818      	ldr	r0, [r3, #0]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	6859      	ldr	r1, [r3, #4]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f000 f90a 	bl	80090a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2150      	movs	r1, #80	; 0x50
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 f963 	bl	8009162 <TIM_ITRx_SetConfig>
      break;
 8008e9c:	e02c      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	6859      	ldr	r1, [r3, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f000 f929 	bl	8009102 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2160      	movs	r1, #96	; 0x60
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 f953 	bl	8009162 <TIM_ITRx_SetConfig>
      break;
 8008ebc:	e01c      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	6859      	ldr	r1, [r3, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f000 f8ea 	bl	80090a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2140      	movs	r1, #64	; 0x40
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 f943 	bl	8009162 <TIM_ITRx_SetConfig>
      break;
 8008edc:	e00c      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4610      	mov	r0, r2
 8008eea:	f000 f93a 	bl	8009162 <TIM_ITRx_SetConfig>
      break;
 8008eee:	e003      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef4:	e000      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b083      	sub	sp, #12
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f1a:	bf00      	nop
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b083      	sub	sp, #12
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f2e:	bf00      	nop
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f42:	bf00      	nop
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b083      	sub	sp, #12
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f56:	bf00      	nop
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
	...

08008f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a40      	ldr	r2, [pc, #256]	; (8009078 <TIM_Base_SetConfig+0x114>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d013      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f82:	d00f      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a3d      	ldr	r2, [pc, #244]	; (800907c <TIM_Base_SetConfig+0x118>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d00b      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a3c      	ldr	r2, [pc, #240]	; (8009080 <TIM_Base_SetConfig+0x11c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d007      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a3b      	ldr	r2, [pc, #236]	; (8009084 <TIM_Base_SetConfig+0x120>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d003      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a3a      	ldr	r2, [pc, #232]	; (8009088 <TIM_Base_SetConfig+0x124>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d108      	bne.n	8008fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a2f      	ldr	r2, [pc, #188]	; (8009078 <TIM_Base_SetConfig+0x114>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d02b      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc4:	d027      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a2c      	ldr	r2, [pc, #176]	; (800907c <TIM_Base_SetConfig+0x118>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d023      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a2b      	ldr	r2, [pc, #172]	; (8009080 <TIM_Base_SetConfig+0x11c>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d01f      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a2a      	ldr	r2, [pc, #168]	; (8009084 <TIM_Base_SetConfig+0x120>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d01b      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a29      	ldr	r2, [pc, #164]	; (8009088 <TIM_Base_SetConfig+0x124>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d017      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a28      	ldr	r2, [pc, #160]	; (800908c <TIM_Base_SetConfig+0x128>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d013      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a27      	ldr	r2, [pc, #156]	; (8009090 <TIM_Base_SetConfig+0x12c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d00f      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a26      	ldr	r2, [pc, #152]	; (8009094 <TIM_Base_SetConfig+0x130>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d00b      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a25      	ldr	r2, [pc, #148]	; (8009098 <TIM_Base_SetConfig+0x134>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d007      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a24      	ldr	r2, [pc, #144]	; (800909c <TIM_Base_SetConfig+0x138>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d003      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a23      	ldr	r2, [pc, #140]	; (80090a0 <TIM_Base_SetConfig+0x13c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d108      	bne.n	8009028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800901c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	4313      	orrs	r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a0a      	ldr	r2, [pc, #40]	; (8009078 <TIM_Base_SetConfig+0x114>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d003      	beq.n	800905c <TIM_Base_SetConfig+0xf8>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a0c      	ldr	r2, [pc, #48]	; (8009088 <TIM_Base_SetConfig+0x124>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d103      	bne.n	8009064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	691a      	ldr	r2, [r3, #16]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	615a      	str	r2, [r3, #20]
}
 800906a:	bf00      	nop
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	40010000 	.word	0x40010000
 800907c:	40000400 	.word	0x40000400
 8009080:	40000800 	.word	0x40000800
 8009084:	40000c00 	.word	0x40000c00
 8009088:	40010400 	.word	0x40010400
 800908c:	40014000 	.word	0x40014000
 8009090:	40014400 	.word	0x40014400
 8009094:	40014800 	.word	0x40014800
 8009098:	40001800 	.word	0x40001800
 800909c:	40001c00 	.word	0x40001c00
 80090a0:	40002000 	.word	0x40002000

080090a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f023 0201 	bic.w	r2, r3, #1
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f023 030a 	bic.w	r3, r3, #10
 80090e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	621a      	str	r2, [r3, #32]
}
 80090f6:	bf00      	nop
 80090f8:	371c      	adds	r7, #28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009102:	b480      	push	{r7}
 8009104:	b087      	sub	sp, #28
 8009106:	af00      	add	r7, sp, #0
 8009108:	60f8      	str	r0, [r7, #12]
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	f023 0210 	bic.w	r2, r3, #16
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800912c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	031b      	lsls	r3, r3, #12
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	4313      	orrs	r3, r2
 8009136:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800913e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	011b      	lsls	r3, r3, #4
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	4313      	orrs	r3, r2
 8009148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	621a      	str	r2, [r3, #32]
}
 8009156:	bf00      	nop
 8009158:	371c      	adds	r7, #28
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009162:	b480      	push	{r7}
 8009164:	b085      	sub	sp, #20
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4313      	orrs	r3, r2
 8009180:	f043 0307 	orr.w	r3, r3, #7
 8009184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	609a      	str	r2, [r3, #8]
}
 800918c:	bf00      	nop
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	021a      	lsls	r2, r3, #8
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	431a      	orrs	r2, r3
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4313      	orrs	r3, r2
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	609a      	str	r2, [r3, #8]
}
 80091cc:	bf00      	nop
 80091ce:	371c      	adds	r7, #28
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e05a      	b.n	80092a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a21      	ldr	r2, [pc, #132]	; (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d022      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800923c:	d01d      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a1d      	ldr	r2, [pc, #116]	; (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d018      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a1b      	ldr	r2, [pc, #108]	; (80092bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d013      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a1a      	ldr	r2, [pc, #104]	; (80092c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00e      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a18      	ldr	r2, [pc, #96]	; (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d009      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a17      	ldr	r2, [pc, #92]	; (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d004      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a15      	ldr	r2, [pc, #84]	; (80092cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d10c      	bne.n	8009294 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	4313      	orrs	r3, r2
 800928a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	40010000 	.word	0x40010000
 80092b8:	40000400 	.word	0x40000400
 80092bc:	40000800 	.word	0x40000800
 80092c0:	40000c00 	.word	0x40000c00
 80092c4:	40010400 	.word	0x40010400
 80092c8:	40014000 	.word	0x40014000
 80092cc:	40001800 	.word	0x40001800

080092d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092f8:	b084      	sub	sp, #16
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	f107 001c 	add.w	r0, r7, #28
 8009306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	2b01      	cmp	r3, #1
 800930e:	d122      	bne.n	8009356 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933a:	2b01      	cmp	r3, #1
 800933c:	d105      	bne.n	800934a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f001 fb1c 	bl	800a988 <USB_CoreReset>
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]
 8009354:	e01a      	b.n	800938c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f001 fb10 	bl	800a988 <USB_CoreReset>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800936c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	d106      	bne.n	8009380 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009376:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	639a      	str	r2, [r3, #56]	; 0x38
 800937e:	e005      	b.n	800938c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	2b01      	cmp	r3, #1
 8009390:	d10b      	bne.n	80093aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f043 0206 	orr.w	r2, r3, #6
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f043 0220 	orr.w	r2, r3, #32
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093b6:	b004      	add	sp, #16
 80093b8:	4770      	bx	lr
	...

080093bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d165      	bne.n	800949c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	4a41      	ldr	r2, [pc, #260]	; (80094d8 <USB_SetTurnaroundTime+0x11c>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d906      	bls.n	80093e6 <USB_SetTurnaroundTime+0x2a>
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	4a40      	ldr	r2, [pc, #256]	; (80094dc <USB_SetTurnaroundTime+0x120>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d202      	bcs.n	80093e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80093e0:	230f      	movs	r3, #15
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	e062      	b.n	80094ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	4a3c      	ldr	r2, [pc, #240]	; (80094dc <USB_SetTurnaroundTime+0x120>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d306      	bcc.n	80093fc <USB_SetTurnaroundTime+0x40>
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	4a3b      	ldr	r2, [pc, #236]	; (80094e0 <USB_SetTurnaroundTime+0x124>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d202      	bcs.n	80093fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80093f6:	230e      	movs	r3, #14
 80093f8:	617b      	str	r3, [r7, #20]
 80093fa:	e057      	b.n	80094ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	4a38      	ldr	r2, [pc, #224]	; (80094e0 <USB_SetTurnaroundTime+0x124>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d306      	bcc.n	8009412 <USB_SetTurnaroundTime+0x56>
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	4a37      	ldr	r2, [pc, #220]	; (80094e4 <USB_SetTurnaroundTime+0x128>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d202      	bcs.n	8009412 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800940c:	230d      	movs	r3, #13
 800940e:	617b      	str	r3, [r7, #20]
 8009410:	e04c      	b.n	80094ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	4a33      	ldr	r2, [pc, #204]	; (80094e4 <USB_SetTurnaroundTime+0x128>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d306      	bcc.n	8009428 <USB_SetTurnaroundTime+0x6c>
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	4a32      	ldr	r2, [pc, #200]	; (80094e8 <USB_SetTurnaroundTime+0x12c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d802      	bhi.n	8009428 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009422:	230c      	movs	r3, #12
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	e041      	b.n	80094ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	4a2f      	ldr	r2, [pc, #188]	; (80094e8 <USB_SetTurnaroundTime+0x12c>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d906      	bls.n	800943e <USB_SetTurnaroundTime+0x82>
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	4a2e      	ldr	r2, [pc, #184]	; (80094ec <USB_SetTurnaroundTime+0x130>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d802      	bhi.n	800943e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009438:	230b      	movs	r3, #11
 800943a:	617b      	str	r3, [r7, #20]
 800943c:	e036      	b.n	80094ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	4a2a      	ldr	r2, [pc, #168]	; (80094ec <USB_SetTurnaroundTime+0x130>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d906      	bls.n	8009454 <USB_SetTurnaroundTime+0x98>
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	4a29      	ldr	r2, [pc, #164]	; (80094f0 <USB_SetTurnaroundTime+0x134>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d802      	bhi.n	8009454 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800944e:	230a      	movs	r3, #10
 8009450:	617b      	str	r3, [r7, #20]
 8009452:	e02b      	b.n	80094ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4a26      	ldr	r2, [pc, #152]	; (80094f0 <USB_SetTurnaroundTime+0x134>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d906      	bls.n	800946a <USB_SetTurnaroundTime+0xae>
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	4a25      	ldr	r2, [pc, #148]	; (80094f4 <USB_SetTurnaroundTime+0x138>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d202      	bcs.n	800946a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009464:	2309      	movs	r3, #9
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	e020      	b.n	80094ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	4a21      	ldr	r2, [pc, #132]	; (80094f4 <USB_SetTurnaroundTime+0x138>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d306      	bcc.n	8009480 <USB_SetTurnaroundTime+0xc4>
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	4a20      	ldr	r2, [pc, #128]	; (80094f8 <USB_SetTurnaroundTime+0x13c>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d802      	bhi.n	8009480 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800947a:	2308      	movs	r3, #8
 800947c:	617b      	str	r3, [r7, #20]
 800947e:	e015      	b.n	80094ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	4a1d      	ldr	r2, [pc, #116]	; (80094f8 <USB_SetTurnaroundTime+0x13c>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d906      	bls.n	8009496 <USB_SetTurnaroundTime+0xda>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	4a1c      	ldr	r2, [pc, #112]	; (80094fc <USB_SetTurnaroundTime+0x140>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d202      	bcs.n	8009496 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009490:	2307      	movs	r3, #7
 8009492:	617b      	str	r3, [r7, #20]
 8009494:	e00a      	b.n	80094ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009496:	2306      	movs	r3, #6
 8009498:	617b      	str	r3, [r7, #20]
 800949a:	e007      	b.n	80094ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d102      	bne.n	80094a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80094a2:	2309      	movs	r3, #9
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	e001      	b.n	80094ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80094a8:	2309      	movs	r3, #9
 80094aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	68da      	ldr	r2, [r3, #12]
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	029b      	lsls	r3, r3, #10
 80094c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80094c4:	431a      	orrs	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	371c      	adds	r7, #28
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	00d8acbf 	.word	0x00d8acbf
 80094dc:	00e4e1c0 	.word	0x00e4e1c0
 80094e0:	00f42400 	.word	0x00f42400
 80094e4:	01067380 	.word	0x01067380
 80094e8:	011a499f 	.word	0x011a499f
 80094ec:	01312cff 	.word	0x01312cff
 80094f0:	014ca43f 	.word	0x014ca43f
 80094f4:	016e3600 	.word	0x016e3600
 80094f8:	01a6ab1f 	.word	0x01a6ab1f
 80094fc:	01e84800 	.word	0x01e84800

08009500 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f043 0201 	orr.w	r2, r3, #1
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	f023 0201 	bic.w	r2, r3, #1
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d115      	bne.n	8009592 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009572:	2001      	movs	r0, #1
 8009574:	f7fa fc34 	bl	8003de0 <HAL_Delay>
      ms++;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3301      	adds	r3, #1
 800957c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f001 f972 	bl	800a868 <USB_GetMode>
 8009584:	4603      	mov	r3, r0
 8009586:	2b01      	cmp	r3, #1
 8009588:	d01e      	beq.n	80095c8 <USB_SetCurrentMode+0x84>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b31      	cmp	r3, #49	; 0x31
 800958e:	d9f0      	bls.n	8009572 <USB_SetCurrentMode+0x2e>
 8009590:	e01a      	b.n	80095c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009592:	78fb      	ldrb	r3, [r7, #3]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d115      	bne.n	80095c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80095a4:	2001      	movs	r0, #1
 80095a6:	f7fa fc1b 	bl	8003de0 <HAL_Delay>
      ms++;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3301      	adds	r3, #1
 80095ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f001 f959 	bl	800a868 <USB_GetMode>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d005      	beq.n	80095c8 <USB_SetCurrentMode+0x84>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b31      	cmp	r3, #49	; 0x31
 80095c0:	d9f0      	bls.n	80095a4 <USB_SetCurrentMode+0x60>
 80095c2:	e001      	b.n	80095c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e005      	b.n	80095d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b32      	cmp	r3, #50	; 0x32
 80095cc:	d101      	bne.n	80095d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e000      	b.n	80095d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095dc:	b084      	sub	sp, #16
 80095de:	b580      	push	{r7, lr}
 80095e0:	b086      	sub	sp, #24
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80095ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095f6:	2300      	movs	r3, #0
 80095f8:	613b      	str	r3, [r7, #16]
 80095fa:	e009      	b.n	8009610 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	3340      	adds	r3, #64	; 0x40
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	2200      	movs	r2, #0
 8009608:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	3301      	adds	r3, #1
 800960e:	613b      	str	r3, [r7, #16]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	2b0e      	cmp	r3, #14
 8009614:	d9f2      	bls.n	80095fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009618:	2b00      	cmp	r3, #0
 800961a:	d11c      	bne.n	8009656 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800962a:	f043 0302 	orr.w	r3, r3, #2
 800962e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009634:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	639a      	str	r2, [r3, #56]	; 0x38
 8009654:	e00b      	b.n	800966e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009674:	461a      	mov	r2, r3
 8009676:	2300      	movs	r3, #0
 8009678:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009680:	4619      	mov	r1, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009688:	461a      	mov	r2, r3
 800968a:	680b      	ldr	r3, [r1, #0]
 800968c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800968e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009690:	2b01      	cmp	r3, #1
 8009692:	d10c      	bne.n	80096ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009696:	2b00      	cmp	r3, #0
 8009698:	d104      	bne.n	80096a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800969a:	2100      	movs	r1, #0
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f945 	bl	800992c <USB_SetDevSpeed>
 80096a2:	e008      	b.n	80096b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80096a4:	2101      	movs	r1, #1
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f940 	bl	800992c <USB_SetDevSpeed>
 80096ac:	e003      	b.n	80096b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80096ae:	2103      	movs	r1, #3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f93b 	bl	800992c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80096b6:	2110      	movs	r1, #16
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f8f3 	bl	80098a4 <USB_FlushTxFifo>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f90f 	bl	80098ec <USB_FlushRxFifo>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096de:	461a      	mov	r2, r3
 80096e0:	2300      	movs	r3, #0
 80096e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ea:	461a      	mov	r2, r3
 80096ec:	2300      	movs	r3, #0
 80096ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f6:	461a      	mov	r2, r3
 80096f8:	2300      	movs	r3, #0
 80096fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096fc:	2300      	movs	r3, #0
 80096fe:	613b      	str	r3, [r7, #16]
 8009700:	e043      	b.n	800978a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4413      	add	r3, r2
 800970a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009718:	d118      	bne.n	800974c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10a      	bne.n	8009736 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800972c:	461a      	mov	r2, r3
 800972e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	e013      	b.n	800975e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009742:	461a      	mov	r2, r3
 8009744:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	e008      	b.n	800975e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009758:	461a      	mov	r2, r3
 800975a:	2300      	movs	r3, #0
 800975c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	015a      	lsls	r2, r3, #5
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4413      	add	r3, r2
 8009766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976a:	461a      	mov	r2, r3
 800976c:	2300      	movs	r3, #0
 800976e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977c:	461a      	mov	r2, r3
 800977e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009782:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	3301      	adds	r3, #1
 8009788:	613b      	str	r3, [r7, #16]
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	429a      	cmp	r2, r3
 8009790:	d3b7      	bcc.n	8009702 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009792:	2300      	movs	r3, #0
 8009794:	613b      	str	r3, [r7, #16]
 8009796:	e043      	b.n	8009820 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097ae:	d118      	bne.n	80097e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10a      	bne.n	80097cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	015a      	lsls	r2, r3, #5
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	4413      	add	r3, r2
 80097be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c2:	461a      	mov	r2, r3
 80097c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097c8:	6013      	str	r3, [r2, #0]
 80097ca:	e013      	b.n	80097f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	015a      	lsls	r2, r3, #5
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	4413      	add	r3, r2
 80097d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d8:	461a      	mov	r2, r3
 80097da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	e008      	b.n	80097f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ee:	461a      	mov	r2, r3
 80097f0:	2300      	movs	r3, #0
 80097f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009800:	461a      	mov	r2, r3
 8009802:	2300      	movs	r3, #0
 8009804:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4413      	add	r3, r2
 800980e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009812:	461a      	mov	r2, r3
 8009814:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009818:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	3301      	adds	r3, #1
 800981e:	613b      	str	r3, [r7, #16]
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	429a      	cmp	r2, r3
 8009826:	d3b7      	bcc.n	8009798 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800983a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009848:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	2b00      	cmp	r3, #0
 800984e:	d105      	bne.n	800985c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	f043 0210 	orr.w	r2, r3, #16
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699a      	ldr	r2, [r3, #24]
 8009860:	4b0f      	ldr	r3, [pc, #60]	; (80098a0 <USB_DevInit+0x2c4>)
 8009862:	4313      	orrs	r3, r2
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986a:	2b00      	cmp	r3, #0
 800986c:	d005      	beq.n	800987a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	f043 0208 	orr.w	r2, r3, #8
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800987a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800987c:	2b01      	cmp	r3, #1
 800987e:	d107      	bne.n	8009890 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009888:	f043 0304 	orr.w	r3, r3, #4
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009890:	7dfb      	ldrb	r3, [r7, #23]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800989c:	b004      	add	sp, #16
 800989e:	4770      	bx	lr
 80098a0:	803c3800 	.word	0x803c3800

080098a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098ae:	2300      	movs	r3, #0
 80098b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	019b      	lsls	r3, r3, #6
 80098b6:	f043 0220 	orr.w	r2, r3, #32
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3301      	adds	r3, #1
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	4a08      	ldr	r2, [pc, #32]	; (80098e8 <USB_FlushTxFifo+0x44>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d901      	bls.n	80098ce <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e006      	b.n	80098dc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	f003 0320 	and.w	r3, r3, #32
 80098d6:	2b20      	cmp	r3, #32
 80098d8:	d0f1      	beq.n	80098be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	00030d40 	.word	0x00030d40

080098ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2210      	movs	r2, #16
 80098fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3301      	adds	r3, #1
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	4a08      	ldr	r2, [pc, #32]	; (8009928 <USB_FlushRxFifo+0x3c>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d901      	bls.n	800990e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e006      	b.n	800991c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	f003 0310 	and.w	r3, r3, #16
 8009916:	2b10      	cmp	r3, #16
 8009918:	d0f1      	beq.n	80098fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	00030d40 	.word	0x00030d40

0800992c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	78fb      	ldrb	r3, [r7, #3]
 8009946:	68f9      	ldr	r1, [r7, #12]
 8009948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800994c:	4313      	orrs	r3, r2
 800994e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800995e:	b480      	push	{r7}
 8009960:	b087      	sub	sp, #28
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f003 0306 	and.w	r3, r3, #6
 8009976:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d102      	bne.n	8009984 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]
 8009982:	e00a      	b.n	800999a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d002      	beq.n	8009990 <USB_GetDevSpeed+0x32>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b06      	cmp	r3, #6
 800998e:	d102      	bne.n	8009996 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009990:	2302      	movs	r3, #2
 8009992:	75fb      	strb	r3, [r7, #23]
 8009994:	e001      	b.n	800999a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009996:	230f      	movs	r3, #15
 8009998:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800999a:	7dfb      	ldrb	r3, [r7, #23]
}
 800999c:	4618      	mov	r0, r3
 800999e:	371c      	adds	r7, #28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	785b      	ldrb	r3, [r3, #1]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d13a      	bne.n	8009a3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ca:	69da      	ldr	r2, [r3, #28]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	2101      	movs	r1, #1
 80099d6:	fa01 f303 	lsl.w	r3, r1, r3
 80099da:	b29b      	uxth	r3, r3
 80099dc:	68f9      	ldr	r1, [r7, #12]
 80099de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099e2:	4313      	orrs	r3, r2
 80099e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d155      	bne.n	8009aa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	78db      	ldrb	r3, [r3, #3]
 8009a16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	059b      	lsls	r3, r3, #22
 8009a1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a20:	4313      	orrs	r3, r2
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	0151      	lsls	r1, r2, #5
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	440a      	add	r2, r1
 8009a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	e036      	b.n	8009aa8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a40:	69da      	ldr	r2, [r3, #28]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f003 030f 	and.w	r3, r3, #15
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a50:	041b      	lsls	r3, r3, #16
 8009a52:	68f9      	ldr	r1, [r7, #12]
 8009a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d11a      	bne.n	8009aa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	78db      	ldrb	r3, [r3, #3]
 8009a8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	4313      	orrs	r3, r2
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	0151      	lsls	r1, r2, #5
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	440a      	add	r2, r1
 8009a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
	...

08009ab8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	785b      	ldrb	r3, [r3, #1]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d161      	bne.n	8009b98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aea:	d11f      	bne.n	8009b2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	0151      	lsls	r1, r2, #5
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	440a      	add	r2, r1
 8009b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	0151      	lsls	r1, r2, #5
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	440a      	add	r2, r1
 8009b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	f003 030f 	and.w	r3, r3, #15
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	43db      	mvns	r3, r3
 8009b46:	68f9      	ldr	r1, [r7, #12]
 8009b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b56:	69da      	ldr	r2, [r3, #28]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	f003 030f 	and.w	r3, r3, #15
 8009b60:	2101      	movs	r1, #1
 8009b62:	fa01 f303 	lsl.w	r3, r1, r3
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	43db      	mvns	r3, r3
 8009b6a:	68f9      	ldr	r1, [r7, #12]
 8009b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b70:	4013      	ands	r3, r2
 8009b72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	0159      	lsls	r1, r3, #5
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	440b      	add	r3, r1
 8009b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4b35      	ldr	r3, [pc, #212]	; (8009c68 <USB_DeactivateEndpoint+0x1b0>)
 8009b92:	4013      	ands	r3, r2
 8009b94:	600b      	str	r3, [r1, #0]
 8009b96:	e060      	b.n	8009c5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bae:	d11f      	bne.n	8009bf0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	015a      	lsls	r2, r3, #5
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	0151      	lsls	r1, r2, #5
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	440a      	add	r2, r1
 8009bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	0151      	lsls	r1, r2, #5
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	440a      	add	r2, r1
 8009be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 030f 	and.w	r3, r3, #15
 8009c00:	2101      	movs	r1, #1
 8009c02:	fa01 f303 	lsl.w	r3, r1, r3
 8009c06:	041b      	lsls	r3, r3, #16
 8009c08:	43db      	mvns	r3, r3
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c10:	4013      	ands	r3, r2
 8009c12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c1a:	69da      	ldr	r2, [r3, #28]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	f003 030f 	and.w	r3, r3, #15
 8009c24:	2101      	movs	r1, #1
 8009c26:	fa01 f303 	lsl.w	r3, r1, r3
 8009c2a:	041b      	lsls	r3, r3, #16
 8009c2c:	43db      	mvns	r3, r3
 8009c2e:	68f9      	ldr	r1, [r7, #12]
 8009c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c34:	4013      	ands	r3, r2
 8009c36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	0159      	lsls	r1, r3, #5
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	440b      	add	r3, r1
 8009c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c52:	4619      	mov	r1, r3
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <USB_DeactivateEndpoint+0x1b4>)
 8009c56:	4013      	ands	r3, r2
 8009c58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	ec337800 	.word	0xec337800
 8009c6c:	eff37800 	.word	0xeff37800

08009c70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08a      	sub	sp, #40	; 0x28
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	785b      	ldrb	r3, [r3, #1]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	f040 815c 	bne.w	8009f4a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d132      	bne.n	8009d00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	015a      	lsls	r2, r3, #5
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	69ba      	ldr	r2, [r7, #24]
 8009caa:	0151      	lsls	r1, r2, #5
 8009cac:	69fa      	ldr	r2, [r7, #28]
 8009cae:	440a      	add	r2, r1
 8009cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009cb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	015a      	lsls	r2, r3, #5
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	69ba      	ldr	r2, [r7, #24]
 8009cce:	0151      	lsls	r1, r2, #5
 8009cd0:	69fa      	ldr	r2, [r7, #28]
 8009cd2:	440a      	add	r2, r1
 8009cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	015a      	lsls	r2, r3, #5
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	0151      	lsls	r1, r2, #5
 8009cf0:	69fa      	ldr	r2, [r7, #28]
 8009cf2:	440a      	add	r2, r1
 8009cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cf8:	0cdb      	lsrs	r3, r3, #19
 8009cfa:	04db      	lsls	r3, r3, #19
 8009cfc:	6113      	str	r3, [r2, #16]
 8009cfe:	e074      	b.n	8009dea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	69ba      	ldr	r2, [r7, #24]
 8009d10:	0151      	lsls	r1, r2, #5
 8009d12:	69fa      	ldr	r2, [r7, #28]
 8009d14:	440a      	add	r2, r1
 8009d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d1a:	0cdb      	lsrs	r3, r3, #19
 8009d1c:	04db      	lsls	r3, r3, #19
 8009d1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	015a      	lsls	r2, r3, #5
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	0151      	lsls	r1, r2, #5
 8009d32:	69fa      	ldr	r2, [r7, #28]
 8009d34:	440a      	add	r2, r1
 8009d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	6959      	ldr	r1, [r3, #20]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	440b      	add	r3, r1
 8009d5c:	1e59      	subs	r1, r3, #1
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009d68:	4b9d      	ldr	r3, [pc, #628]	; (8009fe0 <USB_EPStartXfer+0x370>)
 8009d6a:	400b      	ands	r3, r1
 8009d6c:	69b9      	ldr	r1, [r7, #24]
 8009d6e:	0148      	lsls	r0, r1, #5
 8009d70:	69f9      	ldr	r1, [r7, #28]
 8009d72:	4401      	add	r1, r0
 8009d74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d88:	691a      	ldr	r2, [r3, #16]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d92:	69b9      	ldr	r1, [r7, #24]
 8009d94:	0148      	lsls	r0, r1, #5
 8009d96:	69f9      	ldr	r1, [r7, #28]
 8009d98:	4401      	add	r1, r0
 8009d9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	78db      	ldrb	r3, [r3, #3]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d11f      	bne.n	8009dea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	69fa      	ldr	r2, [r7, #28]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009dc8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	0151      	lsls	r1, r2, #5
 8009ddc:	69fa      	ldr	r2, [r7, #28]
 8009dde:	440a      	add	r2, r1
 8009de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009de4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009de8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d14b      	bne.n	8009e88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d009      	beq.n	8009e0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e04:	461a      	mov	r2, r3
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	78db      	ldrb	r3, [r3, #3]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d128      	bne.n	8009e66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d110      	bne.n	8009e46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69ba      	ldr	r2, [r7, #24]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	69fa      	ldr	r2, [r7, #28]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	e00f      	b.n	8009e66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	0151      	lsls	r1, r2, #5
 8009e58:	69fa      	ldr	r2, [r7, #28]
 8009e5a:	440a      	add	r2, r1
 8009e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	69ba      	ldr	r2, [r7, #24]
 8009e76:	0151      	lsls	r1, r2, #5
 8009e78:	69fa      	ldr	r2, [r7, #28]
 8009e7a:	440a      	add	r2, r1
 8009e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	e12f      	b.n	800a0e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	015a      	lsls	r2, r3, #5
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	0151      	lsls	r1, r2, #5
 8009e9a:	69fa      	ldr	r2, [r7, #28]
 8009e9c:	440a      	add	r2, r1
 8009e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ea6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	78db      	ldrb	r3, [r3, #3]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d015      	beq.n	8009edc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 8117 	beq.w	800a0e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	f003 030f 	and.w	r3, r3, #15
 8009eca:	2101      	movs	r1, #1
 8009ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed0:	69f9      	ldr	r1, [r7, #28]
 8009ed2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	634b      	str	r3, [r1, #52]	; 0x34
 8009eda:	e105      	b.n	800a0e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d110      	bne.n	8009f0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	69ba      	ldr	r2, [r7, #24]
 8009efc:	0151      	lsls	r1, r2, #5
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	440a      	add	r2, r1
 8009f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	e00f      	b.n	8009f2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	015a      	lsls	r2, r3, #5
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	69ba      	ldr	r2, [r7, #24]
 8009f1e:	0151      	lsls	r1, r2, #5
 8009f20:	69fa      	ldr	r2, [r7, #28]
 8009f22:	440a      	add	r2, r1
 8009f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	68d9      	ldr	r1, [r3, #12]
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	781a      	ldrb	r2, [r3, #0]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	b298      	uxth	r0, r3
 8009f3c:	79fb      	ldrb	r3, [r7, #7]
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	4603      	mov	r3, r0
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 fa2b 	bl	800a39e <USB_WritePacket>
 8009f48:	e0ce      	b.n	800a0e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	69ba      	ldr	r2, [r7, #24]
 8009f5a:	0151      	lsls	r1, r2, #5
 8009f5c:	69fa      	ldr	r2, [r7, #28]
 8009f5e:	440a      	add	r2, r1
 8009f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f64:	0cdb      	lsrs	r3, r3, #19
 8009f66:	04db      	lsls	r3, r3, #19
 8009f68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	0151      	lsls	r1, r2, #5
 8009f7c:	69fa      	ldr	r2, [r7, #28]
 8009f7e:	440a      	add	r2, r1
 8009f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d126      	bne.n	8009fe4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa2:	691a      	ldr	r2, [r3, #16]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fac:	69b9      	ldr	r1, [r7, #24]
 8009fae:	0148      	lsls	r0, r1, #5
 8009fb0:	69f9      	ldr	r1, [r7, #28]
 8009fb2:	4401      	add	r1, r0
 8009fb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	0151      	lsls	r1, r2, #5
 8009fce:	69fa      	ldr	r2, [r7, #28]
 8009fd0:	440a      	add	r2, r1
 8009fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fda:	6113      	str	r3, [r2, #16]
 8009fdc:	e036      	b.n	800a04c <USB_EPStartXfer+0x3dc>
 8009fde:	bf00      	nop
 8009fe0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	695a      	ldr	r2, [r3, #20]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	4413      	add	r3, r2
 8009fee:	1e5a      	subs	r2, r3, #1
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a006:	691a      	ldr	r2, [r3, #16]
 800a008:	8afb      	ldrh	r3, [r7, #22]
 800a00a:	04d9      	lsls	r1, r3, #19
 800a00c:	4b39      	ldr	r3, [pc, #228]	; (800a0f4 <USB_EPStartXfer+0x484>)
 800a00e:	400b      	ands	r3, r1
 800a010:	69b9      	ldr	r1, [r7, #24]
 800a012:	0148      	lsls	r0, r1, #5
 800a014:	69f9      	ldr	r1, [r7, #28]
 800a016:	4401      	add	r1, r0
 800a018:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a01c:	4313      	orrs	r3, r2
 800a01e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	015a      	lsls	r2, r3, #5
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	4413      	add	r3, r2
 800a028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a02c:	691a      	ldr	r2, [r3, #16]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	8af9      	ldrh	r1, [r7, #22]
 800a034:	fb01 f303 	mul.w	r3, r1, r3
 800a038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a03c:	69b9      	ldr	r1, [r7, #24]
 800a03e:	0148      	lsls	r0, r1, #5
 800a040:	69f9      	ldr	r1, [r7, #28]
 800a042:	4401      	add	r1, r0
 800a044:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a048:	4313      	orrs	r3, r2
 800a04a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d10d      	bne.n	800a06e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d009      	beq.n	800a06e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	68d9      	ldr	r1, [r3, #12]
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	015a      	lsls	r2, r3, #5
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	4413      	add	r3, r2
 800a066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a06a:	460a      	mov	r2, r1
 800a06c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	78db      	ldrb	r3, [r3, #3]
 800a072:	2b01      	cmp	r3, #1
 800a074:	d128      	bne.n	800a0c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a082:	2b00      	cmp	r3, #0
 800a084:	d110      	bne.n	800a0a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	69ba      	ldr	r2, [r7, #24]
 800a096:	0151      	lsls	r1, r2, #5
 800a098:	69fa      	ldr	r2, [r7, #28]
 800a09a:	440a      	add	r2, r1
 800a09c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0a4:	6013      	str	r3, [r2, #0]
 800a0a6:	e00f      	b.n	800a0c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69ba      	ldr	r2, [r7, #24]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	0151      	lsls	r1, r2, #5
 800a0da:	69fa      	ldr	r2, [r7, #28]
 800a0dc:	440a      	add	r2, r1
 800a0de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3720      	adds	r7, #32
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	1ff80000 	.word	0x1ff80000

0800a0f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	785b      	ldrb	r3, [r3, #1]
 800a114:	2b01      	cmp	r3, #1
 800a116:	f040 80cd 	bne.w	800a2b4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d132      	bne.n	800a188 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	015a      	lsls	r2, r3, #5
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	4413      	add	r3, r2
 800a12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	0151      	lsls	r1, r2, #5
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	440a      	add	r2, r1
 800a138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a13c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a140:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a144:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	0151      	lsls	r1, r2, #5
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	440a      	add	r2, r1
 800a15c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a160:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	015a      	lsls	r2, r3, #5
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	0151      	lsls	r1, r2, #5
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	440a      	add	r2, r1
 800a17c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a180:	0cdb      	lsrs	r3, r3, #19
 800a182:	04db      	lsls	r3, r3, #19
 800a184:	6113      	str	r3, [r2, #16]
 800a186:	e04e      	b.n	800a226 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	015a      	lsls	r2, r3, #5
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	4413      	add	r3, r2
 800a190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	0151      	lsls	r1, r2, #5
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	440a      	add	r2, r1
 800a19e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1a2:	0cdb      	lsrs	r3, r3, #19
 800a1a4:	04db      	lsls	r3, r3, #19
 800a1a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	0151      	lsls	r1, r2, #5
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	440a      	add	r2, r1
 800a1be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	695a      	ldr	r2, [r3, #20]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d903      	bls.n	800a1e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	0151      	lsls	r1, r2, #5
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	440a      	add	r2, r1
 800a1f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a20c:	691a      	ldr	r2, [r3, #16]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a216:	6939      	ldr	r1, [r7, #16]
 800a218:	0148      	lsls	r0, r1, #5
 800a21a:	6979      	ldr	r1, [r7, #20]
 800a21c:	4401      	add	r1, r0
 800a21e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a222:	4313      	orrs	r3, r2
 800a224:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a226:	79fb      	ldrb	r3, [r7, #7]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d11e      	bne.n	800a26a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d009      	beq.n	800a248 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a240:	461a      	mov	r2, r3
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	0151      	lsls	r1, r2, #5
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	440a      	add	r2, r1
 800a25e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a262:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	e092      	b.n	800a390 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	0151      	lsls	r1, r2, #5
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	440a      	add	r2, r1
 800a280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a284:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a288:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d07e      	beq.n	800a390 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	f003 030f 	and.w	r3, r3, #15
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a8:	6979      	ldr	r1, [r7, #20]
 800a2aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	634b      	str	r3, [r1, #52]	; 0x34
 800a2b2:	e06d      	b.n	800a390 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	0151      	lsls	r1, r2, #5
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	440a      	add	r2, r1
 800a2ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ce:	0cdb      	lsrs	r3, r3, #19
 800a2d0:	04db      	lsls	r3, r3, #19
 800a2d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	0151      	lsls	r1, r2, #5
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	440a      	add	r2, r1
 800a2ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2f6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	0151      	lsls	r1, r2, #5
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	440a      	add	r2, r1
 800a31e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a322:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a326:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a334:	691a      	ldr	r2, [r3, #16]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a33e:	6939      	ldr	r1, [r7, #16]
 800a340:	0148      	lsls	r0, r1, #5
 800a342:	6979      	ldr	r1, [r7, #20]
 800a344:	4401      	add	r1, r0
 800a346:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a34a:	4313      	orrs	r3, r2
 800a34c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a34e:	79fb      	ldrb	r3, [r7, #7]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d10d      	bne.n	800a370 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d009      	beq.n	800a370 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	68d9      	ldr	r1, [r3, #12]
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	4413      	add	r3, r2
 800a368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36c:	460a      	mov	r2, r1
 800a36e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	0151      	lsls	r1, r2, #5
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	440a      	add	r2, r1
 800a386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a38a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a38e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	371c      	adds	r7, #28
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b089      	sub	sp, #36	; 0x24
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	60f8      	str	r0, [r7, #12]
 800a3a6:	60b9      	str	r1, [r7, #8]
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	71fb      	strb	r3, [r7, #7]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a3bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d123      	bne.n	800a40c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a3c4:	88bb      	ldrh	r3, [r7, #4]
 800a3c6:	3303      	adds	r3, #3
 800a3c8:	089b      	lsrs	r3, r3, #2
 800a3ca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	61bb      	str	r3, [r7, #24]
 800a3d0:	e018      	b.n	800a404 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a3d2:	79fb      	ldrb	r3, [r7, #7]
 800a3d4:	031a      	lsls	r2, r3, #12
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3de:	461a      	mov	r2, r3
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	3301      	adds	r3, #1
 800a402:	61bb      	str	r3, [r7, #24]
 800a404:	69ba      	ldr	r2, [r7, #24]
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d3e2      	bcc.n	800a3d2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3724      	adds	r7, #36	; 0x24
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b08b      	sub	sp, #44	; 0x2c
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	60b9      	str	r1, [r7, #8]
 800a424:	4613      	mov	r3, r2
 800a426:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a430:	88fb      	ldrh	r3, [r7, #6]
 800a432:	089b      	lsrs	r3, r3, #2
 800a434:	b29b      	uxth	r3, r3
 800a436:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a438:	88fb      	ldrh	r3, [r7, #6]
 800a43a:	f003 0303 	and.w	r3, r3, #3
 800a43e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a440:	2300      	movs	r3, #0
 800a442:	623b      	str	r3, [r7, #32]
 800a444:	e014      	b.n	800a470 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	601a      	str	r2, [r3, #0]
    pDest++;
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	3301      	adds	r3, #1
 800a456:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	3301      	adds	r3, #1
 800a45c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	3301      	adds	r3, #1
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	3301      	adds	r3, #1
 800a468:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a46a:	6a3b      	ldr	r3, [r7, #32]
 800a46c:	3301      	adds	r3, #1
 800a46e:	623b      	str	r3, [r7, #32]
 800a470:	6a3a      	ldr	r2, [r7, #32]
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	429a      	cmp	r2, r3
 800a476:	d3e6      	bcc.n	800a446 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a478:	8bfb      	ldrh	r3, [r7, #30]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d01e      	beq.n	800a4bc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a47e:	2300      	movs	r3, #0
 800a480:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a488:	461a      	mov	r2, r3
 800a48a:	f107 0310 	add.w	r3, r7, #16
 800a48e:	6812      	ldr	r2, [r2, #0]
 800a490:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	b2db      	uxtb	r3, r3
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	fa22 f303 	lsr.w	r3, r2, r3
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	701a      	strb	r2, [r3, #0]
      i++;
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	623b      	str	r3, [r7, #32]
      pDest++;
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a4b0:	8bfb      	ldrh	r3, [r7, #30]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a4b6:	8bfb      	ldrh	r3, [r7, #30]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1ea      	bne.n	800a492 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	372c      	adds	r7, #44	; 0x2c
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b085      	sub	sp, #20
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	785b      	ldrb	r3, [r3, #1]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d12c      	bne.n	800a540 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	db12      	blt.n	800a51e <USB_EPSetStall+0x54>
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00f      	beq.n	800a51e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	4413      	add	r3, r2
 800a506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	0151      	lsls	r1, r2, #5
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	440a      	add	r2, r1
 800a514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a518:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a51c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	4413      	add	r3, r2
 800a526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	0151      	lsls	r1, r2, #5
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	440a      	add	r2, r1
 800a534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	e02b      	b.n	800a598 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	db12      	blt.n	800a578 <USB_EPSetStall+0xae>
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00f      	beq.n	800a578 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	015a      	lsls	r2, r3, #5
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	0151      	lsls	r1, r2, #5
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	440a      	add	r2, r1
 800a56e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a572:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a576:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	015a      	lsls	r2, r3, #5
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4413      	add	r3, r2
 800a580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	0151      	lsls	r1, r2, #5
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	440a      	add	r2, r1
 800a58e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a592:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a596:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	785b      	ldrb	r3, [r3, #1]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d128      	bne.n	800a614 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	0151      	lsls	r1, r2, #5
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	440a      	add	r2, r1
 800a5d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	78db      	ldrb	r3, [r3, #3]
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d003      	beq.n	800a5f2 <USB_EPClearStall+0x4c>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	78db      	ldrb	r3, [r3, #3]
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d138      	bne.n	800a664 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	015a      	lsls	r2, r3, #5
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	0151      	lsls	r1, r2, #5
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	440a      	add	r2, r1
 800a608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a60c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	e027      	b.n	800a664 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	015a      	lsls	r2, r3, #5
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	0151      	lsls	r1, r2, #5
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	440a      	add	r2, r1
 800a62a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a62e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a632:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	78db      	ldrb	r3, [r3, #3]
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d003      	beq.n	800a644 <USB_EPClearStall+0x9e>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	78db      	ldrb	r3, [r3, #3]
 800a640:	2b02      	cmp	r3, #2
 800a642:	d10f      	bne.n	800a664 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	015a      	lsls	r2, r3, #5
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4413      	add	r3, r2
 800a64c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	0151      	lsls	r1, r2, #5
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	440a      	add	r2, r1
 800a65a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a65e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a662:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a672:	b480      	push	{r7}
 800a674:	b085      	sub	sp, #20
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	460b      	mov	r3, r1
 800a67c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a690:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a694:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	011b      	lsls	r3, r3, #4
 800a6a2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a6a6:	68f9      	ldr	r1, [r7, #12]
 800a6a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b085      	sub	sp, #20
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6d8:	f023 0303 	bic.w	r3, r3, #3
 800a6dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6ec:	f023 0302 	bic.w	r3, r3, #2
 800a6f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a71a:	f023 0303 	bic.w	r3, r3, #3
 800a71e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a72e:	f043 0302 	orr.w	r3, r3, #2
 800a732:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a742:	b480      	push	{r7}
 800a744:	b085      	sub	sp, #20
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4013      	ands	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a75a:	68fb      	ldr	r3, [r7, #12]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	4013      	ands	r3, r2
 800a78a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	0c1b      	lsrs	r3, r3, #16
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ae:	699b      	ldr	r3, [r3, #24]
 800a7b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	4013      	ands	r3, r2
 800a7be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	b29b      	uxth	r3, r3
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	015a      	lsls	r2, r3, #5
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a7fe:	68bb      	ldr	r3, [r7, #8]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b087      	sub	sp, #28
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a822:	691b      	ldr	r3, [r3, #16]
 800a824:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	f003 030f 	and.w	r3, r3, #15
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	fa22 f303 	lsr.w	r3, r2, r3
 800a83c:	01db      	lsls	r3, r3, #7
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	4313      	orrs	r3, r2
 800a844:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a846:	78fb      	ldrb	r3, [r7, #3]
 800a848:	015a      	lsls	r2, r3, #5
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	4413      	add	r3, r2
 800a84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	4013      	ands	r3, r2
 800a858:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a85a:	68bb      	ldr	r3, [r7, #8]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	371c      	adds	r7, #28
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	f003 0301 	and.w	r3, r3, #1
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a89e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a8a2:	f023 0307 	bic.w	r3, r3, #7
 800a8a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
	...

0800a8cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	607a      	str	r2, [r7, #4]
 800a8d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	333c      	adds	r3, #60	; 0x3c
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	4a26      	ldr	r2, [pc, #152]	; (800a984 <USB_EP0_OutStart+0xb8>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d90a      	bls.n	800a906 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a900:	d101      	bne.n	800a906 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	e037      	b.n	800a976 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a90c:	461a      	mov	r2, r3
 800a90e:	2300      	movs	r3, #0
 800a910:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a920:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a924:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a934:	f043 0318 	orr.w	r3, r3, #24
 800a938:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a948:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a94c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a94e:	7afb      	ldrb	r3, [r7, #11]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d10f      	bne.n	800a974 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95a:	461a      	mov	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a96e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a972:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	371c      	adds	r7, #28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	4f54300a 	.word	0x4f54300a

0800a988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a990:	2300      	movs	r3, #0
 800a992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	3301      	adds	r3, #1
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	4a13      	ldr	r2, [pc, #76]	; (800a9e8 <USB_CoreReset+0x60>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d901      	bls.n	800a9a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	e01a      	b.n	800a9da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	daf3      	bge.n	800a994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	f043 0201 	orr.w	r2, r3, #1
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	60fb      	str	r3, [r7, #12]
 800a9c2:	4a09      	ldr	r2, [pc, #36]	; (800a9e8 <USB_CoreReset+0x60>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d901      	bls.n	800a9cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	e006      	b.n	800a9da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d0f1      	beq.n	800a9bc <USB_CoreReset+0x34>

  return HAL_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	00030d40 	.word	0x00030d40

0800a9ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a9f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a9fc:	f005 fc4e 	bl	801029c <USBD_static_malloc>
 800aa00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d105      	bne.n	800aa14 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800aa10:	2302      	movs	r3, #2
 800aa12:	e066      	b.n	800aae2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	7c1b      	ldrb	r3, [r3, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d119      	bne.n	800aa58 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa28:	2202      	movs	r2, #2
 800aa2a:	2181      	movs	r1, #129	; 0x81
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f005 fb12 	bl	8010056 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	2101      	movs	r1, #1
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f005 fb08 	bl	8010056 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2210      	movs	r2, #16
 800aa52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800aa56:	e016      	b.n	800aa86 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa58:	2340      	movs	r3, #64	; 0x40
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	2181      	movs	r1, #129	; 0x81
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f005 faf9 	bl	8010056 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa6a:	2340      	movs	r3, #64	; 0x40
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	2101      	movs	r1, #1
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f005 faf0 	bl	8010056 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2210      	movs	r2, #16
 800aa82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aa86:	2308      	movs	r3, #8
 800aa88:	2203      	movs	r2, #3
 800aa8a:	2182      	movs	r1, #130	; 0x82
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f005 fae2 	bl	8010056 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	7c1b      	ldrb	r3, [r3, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d109      	bne.n	800aad0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aac6:	2101      	movs	r1, #1
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f005 fbb3 	bl	8010234 <USBD_LL_PrepareReceive>
 800aace:	e007      	b.n	800aae0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aad6:	2340      	movs	r3, #64	; 0x40
 800aad8:	2101      	movs	r1, #1
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f005 fbaa 	bl	8010234 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b082      	sub	sp, #8
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800aaf6:	2181      	movs	r1, #129	; 0x81
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f005 fad2 	bl	80100a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ab04:	2101      	movs	r1, #1
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f005 facb 	bl	80100a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ab14:	2182      	movs	r1, #130	; 0x82
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f005 fac3 	bl	80100a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00e      	beq.n	800ab54 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab46:	4618      	mov	r0, r3
 800ab48:	f005 fbb6 	bl	80102b8 <USBD_static_free>
    pdev->pClassData = NULL;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
	...

0800ab60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ab76:	2300      	movs	r3, #0
 800ab78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e0af      	b.n	800ace8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d03f      	beq.n	800ac14 <USBD_CDC_Setup+0xb4>
 800ab94:	2b20      	cmp	r3, #32
 800ab96:	f040 809f 	bne.w	800acd8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	88db      	ldrh	r3, [r3, #6]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d02e      	beq.n	800ac00 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	b25b      	sxtb	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	da16      	bge.n	800abda <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800abb8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abba:	683a      	ldr	r2, [r7, #0]
 800abbc:	88d2      	ldrh	r2, [r2, #6]
 800abbe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	88db      	ldrh	r3, [r3, #6]
 800abc4:	2b07      	cmp	r3, #7
 800abc6:	bf28      	it	cs
 800abc8:	2307      	movcs	r3, #7
 800abca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	89fa      	ldrh	r2, [r7, #14]
 800abd0:	4619      	mov	r1, r3
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f001 fb19 	bl	800c20a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800abd8:	e085      	b.n	800ace6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	785a      	ldrb	r2, [r3, #1]
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	88db      	ldrh	r3, [r3, #6]
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800abf0:	6939      	ldr	r1, [r7, #16]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	88db      	ldrh	r3, [r3, #6]
 800abf6:	461a      	mov	r2, r3
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f001 fb32 	bl	800c262 <USBD_CtlPrepareRx>
      break;
 800abfe:	e072      	b.n	800ace6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	683a      	ldr	r2, [r7, #0]
 800ac0a:	7850      	ldrb	r0, [r2, #1]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	4798      	blx	r3
      break;
 800ac12:	e068      	b.n	800ace6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	785b      	ldrb	r3, [r3, #1]
 800ac18:	2b0b      	cmp	r3, #11
 800ac1a:	d852      	bhi.n	800acc2 <USBD_CDC_Setup+0x162>
 800ac1c:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <USBD_CDC_Setup+0xc4>)
 800ac1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac22:	bf00      	nop
 800ac24:	0800ac55 	.word	0x0800ac55
 800ac28:	0800acd1 	.word	0x0800acd1
 800ac2c:	0800acc3 	.word	0x0800acc3
 800ac30:	0800acc3 	.word	0x0800acc3
 800ac34:	0800acc3 	.word	0x0800acc3
 800ac38:	0800acc3 	.word	0x0800acc3
 800ac3c:	0800acc3 	.word	0x0800acc3
 800ac40:	0800acc3 	.word	0x0800acc3
 800ac44:	0800acc3 	.word	0x0800acc3
 800ac48:	0800acc3 	.word	0x0800acc3
 800ac4c:	0800ac7f 	.word	0x0800ac7f
 800ac50:	0800aca9 	.word	0x0800aca9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d107      	bne.n	800ac70 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ac60:	f107 030a 	add.w	r3, r7, #10
 800ac64:	2202      	movs	r2, #2
 800ac66:	4619      	mov	r1, r3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f001 face 	bl	800c20a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac6e:	e032      	b.n	800acd6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f001 fa58 	bl	800c128 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	75fb      	strb	r3, [r7, #23]
          break;
 800ac7c:	e02b      	b.n	800acd6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	d107      	bne.n	800ac9a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac8a:	f107 030d 	add.w	r3, r7, #13
 800ac8e:	2201      	movs	r2, #1
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f001 fab9 	bl	800c20a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac98:	e01d      	b.n	800acd6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f001 fa43 	bl	800c128 <USBD_CtlError>
            ret = USBD_FAIL;
 800aca2:	2303      	movs	r3, #3
 800aca4:	75fb      	strb	r3, [r7, #23]
          break;
 800aca6:	e016      	b.n	800acd6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b03      	cmp	r3, #3
 800acb2:	d00f      	beq.n	800acd4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f001 fa36 	bl	800c128 <USBD_CtlError>
            ret = USBD_FAIL;
 800acbc:	2303      	movs	r3, #3
 800acbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800acc0:	e008      	b.n	800acd4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f001 fa2f 	bl	800c128 <USBD_CtlError>
          ret = USBD_FAIL;
 800acca:	2303      	movs	r3, #3
 800accc:	75fb      	strb	r3, [r7, #23]
          break;
 800acce:	e002      	b.n	800acd6 <USBD_CDC_Setup+0x176>
          break;
 800acd0:	bf00      	nop
 800acd2:	e008      	b.n	800ace6 <USBD_CDC_Setup+0x186>
          break;
 800acd4:	bf00      	nop
      }
      break;
 800acd6:	e006      	b.n	800ace6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f001 fa24 	bl	800c128 <USBD_CtlError>
      ret = USBD_FAIL;
 800ace0:	2303      	movs	r3, #3
 800ace2:	75fb      	strb	r3, [r7, #23]
      break;
 800ace4:	bf00      	nop
  }

  return (uint8_t)ret;
 800ace6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3718      	adds	r7, #24
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d101      	bne.n	800ad12 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e04f      	b.n	800adb2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ad1a:	78fa      	ldrb	r2, [r7, #3]
 800ad1c:	6879      	ldr	r1, [r7, #4]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	440b      	add	r3, r1
 800ad28:	3318      	adds	r3, #24
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d029      	beq.n	800ad84 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ad30:	78fa      	ldrb	r2, [r7, #3]
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	4613      	mov	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	440b      	add	r3, r1
 800ad3e:	3318      	adds	r3, #24
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	78f9      	ldrb	r1, [r7, #3]
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	460b      	mov	r3, r1
 800ad48:	00db      	lsls	r3, r3, #3
 800ad4a:	1a5b      	subs	r3, r3, r1
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4403      	add	r3, r0
 800ad50:	3344      	adds	r3, #68	; 0x44
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad58:	fb03 f301 	mul.w	r3, r3, r1
 800ad5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d110      	bne.n	800ad84 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ad62:	78fa      	ldrb	r2, [r7, #3]
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	440b      	add	r3, r1
 800ad70:	3318      	adds	r3, #24
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ad76:	78f9      	ldrb	r1, [r7, #3]
 800ad78:	2300      	movs	r3, #0
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f005 fa38 	bl	80101f2 <USBD_LL_Transmit>
 800ad82:	e015      	b.n	800adb0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00b      	beq.n	800adb0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800adac:	78fa      	ldrb	r2, [r7, #3]
 800adae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b084      	sub	sp, #16
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	460b      	mov	r3, r1
 800adc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800add4:	2b00      	cmp	r3, #0
 800add6:	d101      	bne.n	800addc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800add8:	2303      	movs	r3, #3
 800adda:	e015      	b.n	800ae08 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f005 fa48 	bl	8010276 <USBD_LL_GetRxDataSize>
 800ade6:	4602      	mov	r2, r0
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ae02:	4611      	mov	r1, r2
 800ae04:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e01b      	b.n	800ae62 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d015      	beq.n	800ae60 <USBD_CDC_EP0_RxReady+0x50>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ae3a:	2bff      	cmp	r3, #255	; 0xff
 800ae3c:	d010      	beq.n	800ae60 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ae4c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae54:	b292      	uxth	r2, r2
 800ae56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	22ff      	movs	r2, #255	; 0xff
 800ae5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
	...

0800ae6c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2243      	movs	r2, #67	; 0x43
 800ae78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ae7a:	4b03      	ldr	r3, [pc, #12]	; (800ae88 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	200000c0 	.word	0x200000c0

0800ae8c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2243      	movs	r2, #67	; 0x43
 800ae98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ae9a:	4b03      	ldr	r3, [pc, #12]	; (800aea8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	2000007c 	.word	0x2000007c

0800aeac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2243      	movs	r2, #67	; 0x43
 800aeb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800aeba:	4b03      	ldr	r3, [pc, #12]	; (800aec8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr
 800aec8:	20000104 	.word	0x20000104

0800aecc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	220a      	movs	r2, #10
 800aed8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aeda:	4b03      	ldr	r3, [pc, #12]	; (800aee8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aedc:	4618      	mov	r0, r3
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	20000038 	.word	0x20000038

0800aeec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d101      	bne.n	800af00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aefc:	2303      	movs	r3, #3
 800aefe:	e004      	b.n	800af0a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800af16:	b480      	push	{r7}
 800af18:	b087      	sub	sp, #28
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af28:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800af30:	2303      	movs	r3, #3
 800af32:	e008      	b.n	800af46 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	371c      	adds	r7, #28
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800af52:	b480      	push	{r7}
 800af54:	b085      	sub	sp, #20
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e004      	b.n	800af78 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af92:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800af94:	2301      	movs	r3, #1
 800af96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800afa2:	2303      	movs	r3, #3
 800afa4:	e01a      	b.n	800afdc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800afac:	2b00      	cmp	r3, #0
 800afae:	d114      	bne.n	800afda <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800afce:	2181      	movs	r1, #129	; 0x81
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f005 f90e 	bl	80101f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800afd6:	2300      	movs	r3, #0
 800afd8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800afda:	7bfb      	ldrb	r3, [r7, #15]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aff2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800affe:	2303      	movs	r3, #3
 800b000:	e016      	b.n	800b030 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	7c1b      	ldrb	r3, [r3, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d109      	bne.n	800b01e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b010:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b014:	2101      	movs	r1, #1
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f005 f90c 	bl	8010234 <USBD_LL_PrepareReceive>
 800b01c:	e007      	b.n	800b02e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b024:	2340      	movs	r3, #64	; 0x40
 800b026:	2101      	movs	r1, #1
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f005 f903 	bl	8010234 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	4613      	mov	r3, r2
 800b044:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e01f      	b.n	800b090 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d003      	beq.n	800b076 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2201      	movs	r2, #1
 800b07a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	79fa      	ldrb	r2, [r7, #7]
 800b082:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f004 ff7f 	bl	800ff88 <USBD_LL_Init>
 800b08a:	4603      	mov	r3, r0
 800b08c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b08e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3718      	adds	r7, #24
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e016      	b.n	800b0de <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00b      	beq.n	800b0dc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0cc:	f107 020e 	add.w	r2, r7, #14
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	4798      	blx	r3
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f004 ff96 	bl	8010020 <USBD_LL_Start>
 800b0f4:	4603      	mov	r3, r0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	460b      	mov	r3, r1
 800b11e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b120:	2303      	movs	r3, #3
 800b122:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d009      	beq.n	800b142 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	78fa      	ldrb	r2, [r7, #3]
 800b138:	4611      	mov	r1, r2
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	4798      	blx	r3
 800b13e:	4603      	mov	r3, r0
 800b140:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b142:	7bfb      	ldrb	r3, [r7, #15]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d007      	beq.n	800b172 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	78fa      	ldrb	r2, [r7, #3]
 800b16c:	4611      	mov	r1, r2
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	4798      	blx	r3
  }

  return USBD_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b18c:	6839      	ldr	r1, [r7, #0]
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 ff90 	bl	800c0b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b1b0:	f003 031f 	and.w	r3, r3, #31
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d01a      	beq.n	800b1ee <USBD_LL_SetupStage+0x72>
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d822      	bhi.n	800b202 <USBD_LL_SetupStage+0x86>
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <USBD_LL_SetupStage+0x4a>
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d00a      	beq.n	800b1da <USBD_LL_SetupStage+0x5e>
 800b1c4:	e01d      	b.n	800b202 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fa62 	bl	800b698 <USBD_StdDevReq>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d8:	e020      	b.n	800b21c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fac6 	bl	800b774 <USBD_StdItfReq>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ec:	e016      	b.n	800b21c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fb05 	bl	800b806 <USBD_StdEPReq>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b200:	e00c      	b.n	800b21c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b208:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f004 ff65 	bl	80100e0 <USBD_LL_StallEP>
 800b216:	4603      	mov	r3, r0
 800b218:	73fb      	strb	r3, [r7, #15]
      break;
 800b21a:	bf00      	nop
  }

  return ret;
 800b21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b086      	sub	sp, #24
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	460b      	mov	r3, r1
 800b230:	607a      	str	r2, [r7, #4]
 800b232:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b234:	7afb      	ldrb	r3, [r7, #11]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d138      	bne.n	800b2ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b240:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d14a      	bne.n	800b2e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	689a      	ldr	r2, [r3, #8]
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	429a      	cmp	r2, r3
 800b256:	d913      	bls.n	800b280 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	1ad2      	subs	r2, r2, r3
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	68da      	ldr	r2, [r3, #12]
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	4293      	cmp	r3, r2
 800b270:	bf28      	it	cs
 800b272:	4613      	movcs	r3, r2
 800b274:	461a      	mov	r2, r3
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f001 f80f 	bl	800c29c <USBD_CtlContinueRx>
 800b27e:	e030      	b.n	800b2e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d10b      	bne.n	800b2a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d005      	beq.n	800b2a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f001 f80a 	bl	800c2be <USBD_CtlSendStatus>
 800b2aa:	e01a      	b.n	800b2e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	2b03      	cmp	r3, #3
 800b2b6:	d114      	bne.n	800b2e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2be:	699b      	ldr	r3, [r3, #24]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00e      	beq.n	800b2e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	7afa      	ldrb	r2, [r7, #11]
 800b2ce:	4611      	mov	r1, r2
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	4798      	blx	r3
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b2de:	7dfb      	ldrb	r3, [r7, #23]
 800b2e0:	e000      	b.n	800b2e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b2fa:	7afb      	ldrb	r3, [r7, #11]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d16b      	bne.n	800b3d8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	3314      	adds	r3, #20
 800b304:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d156      	bne.n	800b3be <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	689a      	ldr	r2, [r3, #8]
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d914      	bls.n	800b346 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	1ad2      	subs	r2, r2, r3
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	461a      	mov	r2, r3
 800b330:	6879      	ldr	r1, [r7, #4]
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f000 ff84 	bl	800c240 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b338:	2300      	movs	r3, #0
 800b33a:	2200      	movs	r2, #0
 800b33c:	2100      	movs	r1, #0
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f004 ff78 	bl	8010234 <USBD_LL_PrepareReceive>
 800b344:	e03b      	b.n	800b3be <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	68da      	ldr	r2, [r3, #12]
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d11c      	bne.n	800b38c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	685a      	ldr	r2, [r3, #4]
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d316      	bcc.n	800b38c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b368:	429a      	cmp	r2, r3
 800b36a:	d20f      	bcs.n	800b38c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b36c:	2200      	movs	r2, #0
 800b36e:	2100      	movs	r1, #0
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f000 ff65 	bl	800c240 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b37e:	2300      	movs	r3, #0
 800b380:	2200      	movs	r2, #0
 800b382:	2100      	movs	r1, #0
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f004 ff55 	bl	8010234 <USBD_LL_PrepareReceive>
 800b38a:	e018      	b.n	800b3be <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b03      	cmp	r3, #3
 800b396:	d10b      	bne.n	800b3b0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d005      	beq.n	800b3b0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3b0:	2180      	movs	r1, #128	; 0x80
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f004 fe94 	bl	80100e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f000 ff93 	bl	800c2e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d122      	bne.n	800b40e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f7ff fe98 	bl	800b0fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b3d6:	e01a      	b.n	800b40e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	2b03      	cmp	r3, #3
 800b3e2:	d114      	bne.n	800b40e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ea:	695b      	ldr	r3, [r3, #20]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00e      	beq.n	800b40e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3f6:	695b      	ldr	r3, [r3, #20]
 800b3f8:	7afa      	ldrb	r2, [r7, #11]
 800b3fa:	4611      	mov	r1, r2
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	4798      	blx	r3
 800b400:	4603      	mov	r3, r0
 800b402:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b404:	7dfb      	ldrb	r3, [r7, #23]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
 800b40c:	e000      	b.n	800b410 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b448:	2303      	movs	r3, #3
 800b44a:	e02f      	b.n	800b4ac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00f      	beq.n	800b476 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	6852      	ldr	r2, [r2, #4]
 800b46e:	b2d2      	uxtb	r2, r2
 800b470:	4611      	mov	r1, r2
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b476:	2340      	movs	r3, #64	; 0x40
 800b478:	2200      	movs	r2, #0
 800b47a:	2100      	movs	r1, #0
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f004 fdea 	bl	8010056 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2240      	movs	r2, #64	; 0x40
 800b48e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b492:	2340      	movs	r3, #64	; 0x40
 800b494:	2200      	movs	r2, #0
 800b496:	2180      	movs	r1, #128	; 0x80
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f004 fddc 	bl	8010056 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2240      	movs	r2, #64	; 0x40
 800b4a8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	78fa      	ldrb	r2, [r7, #3]
 800b4c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2204      	movs	r2, #4
 800b4ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b04      	cmp	r3, #4
 800b512:	d106      	bne.n	800b522 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b542:	2303      	movs	r3, #3
 800b544:	e012      	b.n	800b56c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	2b03      	cmp	r3, #3
 800b550:	d10b      	bne.n	800b56a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d005      	beq.n	800b56a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b586:	2b00      	cmp	r3, #0
 800b588:	d101      	bne.n	800b58e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b58a:	2303      	movs	r3, #3
 800b58c:	e014      	b.n	800b5b8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b03      	cmp	r3, #3
 800b598:	d10d      	bne.n	800b5b6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a0:	6a1b      	ldr	r3, [r3, #32]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d007      	beq.n	800b5b6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	78fa      	ldrb	r2, [r7, #3]
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	e014      	b.n	800b604 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	2b03      	cmp	r3, #3
 800b5e4:	d10d      	bne.n	800b602 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d007      	beq.n	800b602 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fa:	78fa      	ldrb	r2, [r7, #3]
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d009      	beq.n	800b650 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	6852      	ldr	r2, [r2, #4]
 800b648:	b2d2      	uxtb	r2, r2
 800b64a:	4611      	mov	r1, r2
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	4798      	blx	r3
  }

  return USBD_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b087      	sub	sp, #28
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	3301      	adds	r3, #1
 800b670:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b678:	8a3b      	ldrh	r3, [r7, #16]
 800b67a:	021b      	lsls	r3, r3, #8
 800b67c:	b21a      	sxth	r2, r3
 800b67e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b682:	4313      	orrs	r3, r2
 800b684:	b21b      	sxth	r3, r3
 800b686:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b688:	89fb      	ldrh	r3, [r7, #14]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	371c      	adds	r7, #28
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
	...

0800b698 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6ae:	2b40      	cmp	r3, #64	; 0x40
 800b6b0:	d005      	beq.n	800b6be <USBD_StdDevReq+0x26>
 800b6b2:	2b40      	cmp	r3, #64	; 0x40
 800b6b4:	d853      	bhi.n	800b75e <USBD_StdDevReq+0xc6>
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00b      	beq.n	800b6d2 <USBD_StdDevReq+0x3a>
 800b6ba:	2b20      	cmp	r3, #32
 800b6bc:	d14f      	bne.n	800b75e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	4798      	blx	r3
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d0:	e04a      	b.n	800b768 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	785b      	ldrb	r3, [r3, #1]
 800b6d6:	2b09      	cmp	r3, #9
 800b6d8:	d83b      	bhi.n	800b752 <USBD_StdDevReq+0xba>
 800b6da:	a201      	add	r2, pc, #4	; (adr r2, 800b6e0 <USBD_StdDevReq+0x48>)
 800b6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e0:	0800b735 	.word	0x0800b735
 800b6e4:	0800b749 	.word	0x0800b749
 800b6e8:	0800b753 	.word	0x0800b753
 800b6ec:	0800b73f 	.word	0x0800b73f
 800b6f0:	0800b753 	.word	0x0800b753
 800b6f4:	0800b713 	.word	0x0800b713
 800b6f8:	0800b709 	.word	0x0800b709
 800b6fc:	0800b753 	.word	0x0800b753
 800b700:	0800b72b 	.word	0x0800b72b
 800b704:	0800b71d 	.word	0x0800b71d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f9de 	bl	800bacc <USBD_GetDescriptor>
          break;
 800b710:	e024      	b.n	800b75c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fb43 	bl	800bda0 <USBD_SetAddress>
          break;
 800b71a:	e01f      	b.n	800b75c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fb82 	bl	800be28 <USBD_SetConfig>
 800b724:	4603      	mov	r3, r0
 800b726:	73fb      	strb	r3, [r7, #15]
          break;
 800b728:	e018      	b.n	800b75c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fc21 	bl	800bf74 <USBD_GetConfig>
          break;
 800b732:	e013      	b.n	800b75c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fc52 	bl	800bfe0 <USBD_GetStatus>
          break;
 800b73c:	e00e      	b.n	800b75c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fc81 	bl	800c048 <USBD_SetFeature>
          break;
 800b746:	e009      	b.n	800b75c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b748:	6839      	ldr	r1, [r7, #0]
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fc90 	bl	800c070 <USBD_ClrFeature>
          break;
 800b750:	e004      	b.n	800b75c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fce7 	bl	800c128 <USBD_CtlError>
          break;
 800b75a:	bf00      	nop
      }
      break;
 800b75c:	e004      	b.n	800b768 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b75e:	6839      	ldr	r1, [r7, #0]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 fce1 	bl	800c128 <USBD_CtlError>
      break;
 800b766:	bf00      	nop
  }

  return ret;
 800b768:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop

0800b774 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b78a:	2b40      	cmp	r3, #64	; 0x40
 800b78c:	d005      	beq.n	800b79a <USBD_StdItfReq+0x26>
 800b78e:	2b40      	cmp	r3, #64	; 0x40
 800b790:	d82f      	bhi.n	800b7f2 <USBD_StdItfReq+0x7e>
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <USBD_StdItfReq+0x26>
 800b796:	2b20      	cmp	r3, #32
 800b798:	d12b      	bne.n	800b7f2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d81d      	bhi.n	800b7e4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	889b      	ldrh	r3, [r3, #4]
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d813      	bhi.n	800b7da <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	4798      	blx	r3
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	88db      	ldrh	r3, [r3, #6]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d110      	bne.n	800b7ee <USBD_StdItfReq+0x7a>
 800b7cc:	7bfb      	ldrb	r3, [r7, #15]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10d      	bne.n	800b7ee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fd73 	bl	800c2be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b7d8:	e009      	b.n	800b7ee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 fca3 	bl	800c128 <USBD_CtlError>
          break;
 800b7e2:	e004      	b.n	800b7ee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fc9e 	bl	800c128 <USBD_CtlError>
          break;
 800b7ec:	e000      	b.n	800b7f0 <USBD_StdItfReq+0x7c>
          break;
 800b7ee:	bf00      	nop
      }
      break;
 800b7f0:	e004      	b.n	800b7fc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fc97 	bl	800c128 <USBD_CtlError>
      break;
 800b7fa:	bf00      	nop
  }

  return ret;
 800b7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b810:	2300      	movs	r3, #0
 800b812:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	889b      	ldrh	r3, [r3, #4]
 800b818:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b822:	2b40      	cmp	r3, #64	; 0x40
 800b824:	d007      	beq.n	800b836 <USBD_StdEPReq+0x30>
 800b826:	2b40      	cmp	r3, #64	; 0x40
 800b828:	f200 8145 	bhi.w	800bab6 <USBD_StdEPReq+0x2b0>
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00c      	beq.n	800b84a <USBD_StdEPReq+0x44>
 800b830:	2b20      	cmp	r3, #32
 800b832:	f040 8140 	bne.w	800bab6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	4798      	blx	r3
 800b844:	4603      	mov	r3, r0
 800b846:	73fb      	strb	r3, [r7, #15]
      break;
 800b848:	e13a      	b.n	800bac0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	785b      	ldrb	r3, [r3, #1]
 800b84e:	2b03      	cmp	r3, #3
 800b850:	d007      	beq.n	800b862 <USBD_StdEPReq+0x5c>
 800b852:	2b03      	cmp	r3, #3
 800b854:	f300 8129 	bgt.w	800baaa <USBD_StdEPReq+0x2a4>
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d07f      	beq.n	800b95c <USBD_StdEPReq+0x156>
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d03c      	beq.n	800b8da <USBD_StdEPReq+0xd4>
 800b860:	e123      	b.n	800baaa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d002      	beq.n	800b874 <USBD_StdEPReq+0x6e>
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d016      	beq.n	800b8a0 <USBD_StdEPReq+0x9a>
 800b872:	e02c      	b.n	800b8ce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b874:	7bbb      	ldrb	r3, [r7, #14]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00d      	beq.n	800b896 <USBD_StdEPReq+0x90>
 800b87a:	7bbb      	ldrb	r3, [r7, #14]
 800b87c:	2b80      	cmp	r3, #128	; 0x80
 800b87e:	d00a      	beq.n	800b896 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b880:	7bbb      	ldrb	r3, [r7, #14]
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f004 fc2b 	bl	80100e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b88a:	2180      	movs	r1, #128	; 0x80
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f004 fc27 	bl	80100e0 <USBD_LL_StallEP>
 800b892:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b894:	e020      	b.n	800b8d8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fc45 	bl	800c128 <USBD_CtlError>
              break;
 800b89e:	e01b      	b.n	800b8d8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	885b      	ldrh	r3, [r3, #2]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d10e      	bne.n	800b8c6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8a8:	7bbb      	ldrb	r3, [r7, #14]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00b      	beq.n	800b8c6 <USBD_StdEPReq+0xc0>
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	2b80      	cmp	r3, #128	; 0x80
 800b8b2:	d008      	beq.n	800b8c6 <USBD_StdEPReq+0xc0>
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	88db      	ldrh	r3, [r3, #6]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d104      	bne.n	800b8c6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f004 fc0d 	bl	80100e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fcf9 	bl	800c2be <USBD_CtlSendStatus>

              break;
 800b8cc:	e004      	b.n	800b8d8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fc29 	bl	800c128 <USBD_CtlError>
              break;
 800b8d6:	bf00      	nop
          }
          break;
 800b8d8:	e0ec      	b.n	800bab4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d002      	beq.n	800b8ec <USBD_StdEPReq+0xe6>
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d016      	beq.n	800b918 <USBD_StdEPReq+0x112>
 800b8ea:	e030      	b.n	800b94e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8ec:	7bbb      	ldrb	r3, [r7, #14]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00d      	beq.n	800b90e <USBD_StdEPReq+0x108>
 800b8f2:	7bbb      	ldrb	r3, [r7, #14]
 800b8f4:	2b80      	cmp	r3, #128	; 0x80
 800b8f6:	d00a      	beq.n	800b90e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f004 fbef 	bl	80100e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b902:	2180      	movs	r1, #128	; 0x80
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f004 fbeb 	bl	80100e0 <USBD_LL_StallEP>
 800b90a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b90c:	e025      	b.n	800b95a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fc09 	bl	800c128 <USBD_CtlError>
              break;
 800b916:	e020      	b.n	800b95a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	885b      	ldrh	r3, [r3, #2]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d11b      	bne.n	800b958 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b920:	7bbb      	ldrb	r3, [r7, #14]
 800b922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b926:	2b00      	cmp	r3, #0
 800b928:	d004      	beq.n	800b934 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b92a:	7bbb      	ldrb	r3, [r7, #14]
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f004 fbf5 	bl	801011e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fcc2 	bl	800c2be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	6839      	ldr	r1, [r7, #0]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	4798      	blx	r3
 800b948:	4603      	mov	r3, r0
 800b94a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b94c:	e004      	b.n	800b958 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fbe9 	bl	800c128 <USBD_CtlError>
              break;
 800b956:	e000      	b.n	800b95a <USBD_StdEPReq+0x154>
              break;
 800b958:	bf00      	nop
          }
          break;
 800b95a:	e0ab      	b.n	800bab4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b962:	b2db      	uxtb	r3, r3
 800b964:	2b02      	cmp	r3, #2
 800b966:	d002      	beq.n	800b96e <USBD_StdEPReq+0x168>
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d032      	beq.n	800b9d2 <USBD_StdEPReq+0x1cc>
 800b96c:	e097      	b.n	800ba9e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b96e:	7bbb      	ldrb	r3, [r7, #14]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d007      	beq.n	800b984 <USBD_StdEPReq+0x17e>
 800b974:	7bbb      	ldrb	r3, [r7, #14]
 800b976:	2b80      	cmp	r3, #128	; 0x80
 800b978:	d004      	beq.n	800b984 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 fbd3 	bl	800c128 <USBD_CtlError>
                break;
 800b982:	e091      	b.n	800baa8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	da0b      	bge.n	800b9a4 <USBD_StdEPReq+0x19e>
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b992:	4613      	mov	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	3310      	adds	r3, #16
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	4413      	add	r3, r2
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	e00b      	b.n	800b9bc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
 800b9a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4413      	add	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fc1d 	bl	800c20a <USBD_CtlSendData>
              break;
 800b9d0:	e06a      	b.n	800baa8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b9d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	da11      	bge.n	800b9fe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b9da:	7bbb      	ldrb	r3, [r7, #14]
 800b9dc:	f003 020f 	and.w	r2, r3, #15
 800b9e0:	6879      	ldr	r1, [r7, #4]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	440b      	add	r3, r1
 800b9ec:	3324      	adds	r3, #36	; 0x24
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d117      	bne.n	800ba24 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fb96 	bl	800c128 <USBD_CtlError>
                  break;
 800b9fc:	e054      	b.n	800baa8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ba00:	f003 020f 	and.w	r2, r3, #15
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	4613      	mov	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	440b      	add	r3, r1
 800ba10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d104      	bne.n	800ba24 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 fb83 	bl	800c128 <USBD_CtlError>
                  break;
 800ba22:	e041      	b.n	800baa8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	da0b      	bge.n	800ba44 <USBD_StdEPReq+0x23e>
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba32:	4613      	mov	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4413      	add	r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	3310      	adds	r3, #16
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	4413      	add	r3, r2
 800ba40:	3304      	adds	r3, #4
 800ba42:	e00b      	b.n	800ba5c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	4413      	add	r3, r2
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <USBD_StdEPReq+0x264>
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	2b80      	cmp	r3, #128	; 0x80
 800ba68:	d103      	bne.n	800ba72 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	e00e      	b.n	800ba90 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f004 fb70 	bl	801015c <USBD_LL_IsStallEP>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d003      	beq.n	800ba8a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2201      	movs	r2, #1
 800ba86:	601a      	str	r2, [r3, #0]
 800ba88:	e002      	b.n	800ba90 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	2202      	movs	r2, #2
 800ba94:	4619      	mov	r1, r3
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 fbb7 	bl	800c20a <USBD_CtlSendData>
              break;
 800ba9c:	e004      	b.n	800baa8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fb41 	bl	800c128 <USBD_CtlError>
              break;
 800baa6:	bf00      	nop
          }
          break;
 800baa8:	e004      	b.n	800bab4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fb3b 	bl	800c128 <USBD_CtlError>
          break;
 800bab2:	bf00      	nop
      }
      break;
 800bab4:	e004      	b.n	800bac0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bab6:	6839      	ldr	r1, [r7, #0]
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 fb35 	bl	800c128 <USBD_CtlError>
      break;
 800babe:	bf00      	nop
  }

  return ret;
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
	...

0800bacc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bad6:	2300      	movs	r3, #0
 800bad8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bada:	2300      	movs	r3, #0
 800badc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bade:	2300      	movs	r3, #0
 800bae0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	885b      	ldrh	r3, [r3, #2]
 800bae6:	0a1b      	lsrs	r3, r3, #8
 800bae8:	b29b      	uxth	r3, r3
 800baea:	3b01      	subs	r3, #1
 800baec:	2b06      	cmp	r3, #6
 800baee:	f200 8128 	bhi.w	800bd42 <USBD_GetDescriptor+0x276>
 800baf2:	a201      	add	r2, pc, #4	; (adr r2, 800baf8 <USBD_GetDescriptor+0x2c>)
 800baf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf8:	0800bb15 	.word	0x0800bb15
 800bafc:	0800bb2d 	.word	0x0800bb2d
 800bb00:	0800bb6d 	.word	0x0800bb6d
 800bb04:	0800bd43 	.word	0x0800bd43
 800bb08:	0800bd43 	.word	0x0800bd43
 800bb0c:	0800bce3 	.word	0x0800bce3
 800bb10:	0800bd0f 	.word	0x0800bd0f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	7c12      	ldrb	r2, [r2, #16]
 800bb20:	f107 0108 	add.w	r1, r7, #8
 800bb24:	4610      	mov	r0, r2
 800bb26:	4798      	blx	r3
 800bb28:	60f8      	str	r0, [r7, #12]
      break;
 800bb2a:	e112      	b.n	800bd52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	7c1b      	ldrb	r3, [r3, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10d      	bne.n	800bb50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3c:	f107 0208 	add.w	r2, r7, #8
 800bb40:	4610      	mov	r0, r2
 800bb42:	4798      	blx	r3
 800bb44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb4e:	e100      	b.n	800bd52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb58:	f107 0208 	add.w	r2, r7, #8
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	4798      	blx	r3
 800bb60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3301      	adds	r3, #1
 800bb66:	2202      	movs	r2, #2
 800bb68:	701a      	strb	r2, [r3, #0]
      break;
 800bb6a:	e0f2      	b.n	800bd52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	885b      	ldrh	r3, [r3, #2]
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b05      	cmp	r3, #5
 800bb74:	f200 80ac 	bhi.w	800bcd0 <USBD_GetDescriptor+0x204>
 800bb78:	a201      	add	r2, pc, #4	; (adr r2, 800bb80 <USBD_GetDescriptor+0xb4>)
 800bb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7e:	bf00      	nop
 800bb80:	0800bb99 	.word	0x0800bb99
 800bb84:	0800bbcd 	.word	0x0800bbcd
 800bb88:	0800bc01 	.word	0x0800bc01
 800bb8c:	0800bc35 	.word	0x0800bc35
 800bb90:	0800bc69 	.word	0x0800bc69
 800bb94:	0800bc9d 	.word	0x0800bc9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00b      	beq.n	800bbbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	7c12      	ldrb	r2, [r2, #16]
 800bbb0:	f107 0108 	add.w	r1, r7, #8
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	4798      	blx	r3
 800bbb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbba:	e091      	b.n	800bce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbbc:	6839      	ldr	r1, [r7, #0]
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fab2 	bl	800c128 <USBD_CtlError>
            err++;
 800bbc4:	7afb      	ldrb	r3, [r7, #11]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbca:	e089      	b.n	800bce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00b      	beq.n	800bbf0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	7c12      	ldrb	r2, [r2, #16]
 800bbe4:	f107 0108 	add.w	r1, r7, #8
 800bbe8:	4610      	mov	r0, r2
 800bbea:	4798      	blx	r3
 800bbec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbee:	e077      	b.n	800bce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fa98 	bl	800c128 <USBD_CtlError>
            err++;
 800bbf8:	7afb      	ldrb	r3, [r7, #11]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	72fb      	strb	r3, [r7, #11]
          break;
 800bbfe:	e06f      	b.n	800bce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00b      	beq.n	800bc24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	7c12      	ldrb	r2, [r2, #16]
 800bc18:	f107 0108 	add.w	r1, r7, #8
 800bc1c:	4610      	mov	r0, r2
 800bc1e:	4798      	blx	r3
 800bc20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc22:	e05d      	b.n	800bce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fa7e 	bl	800c128 <USBD_CtlError>
            err++;
 800bc2c:	7afb      	ldrb	r3, [r7, #11]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	72fb      	strb	r3, [r7, #11]
          break;
 800bc32:	e055      	b.n	800bce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00b      	beq.n	800bc58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	7c12      	ldrb	r2, [r2, #16]
 800bc4c:	f107 0108 	add.w	r1, r7, #8
 800bc50:	4610      	mov	r0, r2
 800bc52:	4798      	blx	r3
 800bc54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc56:	e043      	b.n	800bce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc58:	6839      	ldr	r1, [r7, #0]
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fa64 	bl	800c128 <USBD_CtlError>
            err++;
 800bc60:	7afb      	ldrb	r3, [r7, #11]
 800bc62:	3301      	adds	r3, #1
 800bc64:	72fb      	strb	r3, [r7, #11]
          break;
 800bc66:	e03b      	b.n	800bce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc6e:	695b      	ldr	r3, [r3, #20]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00b      	beq.n	800bc8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc7a:	695b      	ldr	r3, [r3, #20]
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	7c12      	ldrb	r2, [r2, #16]
 800bc80:	f107 0108 	add.w	r1, r7, #8
 800bc84:	4610      	mov	r0, r2
 800bc86:	4798      	blx	r3
 800bc88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc8a:	e029      	b.n	800bce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fa4a 	bl	800c128 <USBD_CtlError>
            err++;
 800bc94:	7afb      	ldrb	r3, [r7, #11]
 800bc96:	3301      	adds	r3, #1
 800bc98:	72fb      	strb	r3, [r7, #11]
          break;
 800bc9a:	e021      	b.n	800bce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bca2:	699b      	ldr	r3, [r3, #24]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00b      	beq.n	800bcc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	7c12      	ldrb	r2, [r2, #16]
 800bcb4:	f107 0108 	add.w	r1, r7, #8
 800bcb8:	4610      	mov	r0, r2
 800bcba:	4798      	blx	r3
 800bcbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcbe:	e00f      	b.n	800bce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fa30 	bl	800c128 <USBD_CtlError>
            err++;
 800bcc8:	7afb      	ldrb	r3, [r7, #11]
 800bcca:	3301      	adds	r3, #1
 800bccc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcce:	e007      	b.n	800bce0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fa28 	bl	800c128 <USBD_CtlError>
          err++;
 800bcd8:	7afb      	ldrb	r3, [r7, #11]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bcde:	bf00      	nop
      }
      break;
 800bce0:	e037      	b.n	800bd52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	7c1b      	ldrb	r3, [r3, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d109      	bne.n	800bcfe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf2:	f107 0208 	add.w	r2, r7, #8
 800bcf6:	4610      	mov	r0, r2
 800bcf8:	4798      	blx	r3
 800bcfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcfc:	e029      	b.n	800bd52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fa11 	bl	800c128 <USBD_CtlError>
        err++;
 800bd06:	7afb      	ldrb	r3, [r7, #11]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	72fb      	strb	r3, [r7, #11]
      break;
 800bd0c:	e021      	b.n	800bd52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	7c1b      	ldrb	r3, [r3, #16]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d10d      	bne.n	800bd32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1e:	f107 0208 	add.w	r2, r7, #8
 800bd22:	4610      	mov	r0, r2
 800bd24:	4798      	blx	r3
 800bd26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	2207      	movs	r2, #7
 800bd2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd30:	e00f      	b.n	800bd52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 f9f7 	bl	800c128 <USBD_CtlError>
        err++;
 800bd3a:	7afb      	ldrb	r3, [r7, #11]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd40:	e007      	b.n	800bd52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bd42:	6839      	ldr	r1, [r7, #0]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f9ef 	bl	800c128 <USBD_CtlError>
      err++;
 800bd4a:	7afb      	ldrb	r3, [r7, #11]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd50:	bf00      	nop
  }

  if (err != 0U)
 800bd52:	7afb      	ldrb	r3, [r7, #11]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d11e      	bne.n	800bd96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	88db      	ldrh	r3, [r3, #6]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d016      	beq.n	800bd8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bd60:	893b      	ldrh	r3, [r7, #8]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00e      	beq.n	800bd84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	88da      	ldrh	r2, [r3, #6]
 800bd6a:	893b      	ldrh	r3, [r7, #8]
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	bf28      	it	cs
 800bd70:	4613      	movcs	r3, r2
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd76:	893b      	ldrh	r3, [r7, #8]
 800bd78:	461a      	mov	r2, r3
 800bd7a:	68f9      	ldr	r1, [r7, #12]
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 fa44 	bl	800c20a <USBD_CtlSendData>
 800bd82:	e009      	b.n	800bd98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 f9ce 	bl	800c128 <USBD_CtlError>
 800bd8c:	e004      	b.n	800bd98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fa95 	bl	800c2be <USBD_CtlSendStatus>
 800bd94:	e000      	b.n	800bd98 <USBD_GetDescriptor+0x2cc>
    return;
 800bd96:	bf00      	nop
  }
}
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop

0800bda0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	889b      	ldrh	r3, [r3, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d131      	bne.n	800be16 <USBD_SetAddress+0x76>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	88db      	ldrh	r3, [r3, #6]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d12d      	bne.n	800be16 <USBD_SetAddress+0x76>
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	885b      	ldrh	r3, [r3, #2]
 800bdbe:	2b7f      	cmp	r3, #127	; 0x7f
 800bdc0:	d829      	bhi.n	800be16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	885b      	ldrh	r3, [r3, #2]
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d104      	bne.n	800bde4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f9a3 	bl	800c128 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde2:	e01d      	b.n	800be20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	7bfa      	ldrb	r2, [r7, #15]
 800bde8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bdec:	7bfb      	ldrb	r3, [r7, #15]
 800bdee:	4619      	mov	r1, r3
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f004 f9df 	bl	80101b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 fa61 	bl	800c2be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bdfc:	7bfb      	ldrb	r3, [r7, #15]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d004      	beq.n	800be0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2202      	movs	r2, #2
 800be06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be0a:	e009      	b.n	800be20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be14:	e004      	b.n	800be20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be16:	6839      	ldr	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 f985 	bl	800c128 <USBD_CtlError>
  }
}
 800be1e:	bf00      	nop
 800be20:	bf00      	nop
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	885b      	ldrh	r3, [r3, #2]
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	4b4c      	ldr	r3, [pc, #304]	; (800bf70 <USBD_SetConfig+0x148>)
 800be3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be40:	4b4b      	ldr	r3, [pc, #300]	; (800bf70 <USBD_SetConfig+0x148>)
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d905      	bls.n	800be54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f96c 	bl	800c128 <USBD_CtlError>
    return USBD_FAIL;
 800be50:	2303      	movs	r3, #3
 800be52:	e088      	b.n	800bf66 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d002      	beq.n	800be66 <USBD_SetConfig+0x3e>
 800be60:	2b03      	cmp	r3, #3
 800be62:	d025      	beq.n	800beb0 <USBD_SetConfig+0x88>
 800be64:	e071      	b.n	800bf4a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800be66:	4b42      	ldr	r3, [pc, #264]	; (800bf70 <USBD_SetConfig+0x148>)
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d01c      	beq.n	800bea8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800be6e:	4b40      	ldr	r3, [pc, #256]	; (800bf70 <USBD_SetConfig+0x148>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	461a      	mov	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be78:	4b3d      	ldr	r3, [pc, #244]	; (800bf70 <USBD_SetConfig+0x148>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7ff f948 	bl	800b114 <USBD_SetClassConfig>
 800be84:	4603      	mov	r3, r0
 800be86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800be88:	7bfb      	ldrb	r3, [r7, #15]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d004      	beq.n	800be98 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f949 	bl	800c128 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be96:	e065      	b.n	800bf64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fa10 	bl	800c2be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2203      	movs	r2, #3
 800bea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bea6:	e05d      	b.n	800bf64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fa08 	bl	800c2be <USBD_CtlSendStatus>
      break;
 800beae:	e059      	b.n	800bf64 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800beb0:	4b2f      	ldr	r3, [pc, #188]	; (800bf70 <USBD_SetConfig+0x148>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d112      	bne.n	800bede <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2202      	movs	r2, #2
 800bebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bec0:	4b2b      	ldr	r3, [pc, #172]	; (800bf70 <USBD_SetConfig+0x148>)
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	461a      	mov	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800beca:	4b29      	ldr	r3, [pc, #164]	; (800bf70 <USBD_SetConfig+0x148>)
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7ff f93b 	bl	800b14c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f9f1 	bl	800c2be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bedc:	e042      	b.n	800bf64 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bede:	4b24      	ldr	r3, [pc, #144]	; (800bf70 <USBD_SetConfig+0x148>)
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	461a      	mov	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d02a      	beq.n	800bf42 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff f929 	bl	800b14c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800befa:	4b1d      	ldr	r3, [pc, #116]	; (800bf70 <USBD_SetConfig+0x148>)
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	461a      	mov	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf04:	4b1a      	ldr	r3, [pc, #104]	; (800bf70 <USBD_SetConfig+0x148>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff f902 	bl	800b114 <USBD_SetClassConfig>
 800bf10:	4603      	mov	r3, r0
 800bf12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00f      	beq.n	800bf3a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bf1a:	6839      	ldr	r1, [r7, #0]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 f903 	bl	800c128 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	4619      	mov	r1, r3
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7ff f90e 	bl	800b14c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2202      	movs	r2, #2
 800bf34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf38:	e014      	b.n	800bf64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 f9bf 	bl	800c2be <USBD_CtlSendStatus>
      break;
 800bf40:	e010      	b.n	800bf64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f9bb 	bl	800c2be <USBD_CtlSendStatus>
      break;
 800bf48:	e00c      	b.n	800bf64 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f8eb 	bl	800c128 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf52:	4b07      	ldr	r3, [pc, #28]	; (800bf70 <USBD_SetConfig+0x148>)
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f7ff f8f7 	bl	800b14c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	73fb      	strb	r3, [r7, #15]
      break;
 800bf62:	bf00      	nop
  }

  return ret;
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	20002794 	.word	0x20002794

0800bf74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	88db      	ldrh	r3, [r3, #6]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d004      	beq.n	800bf90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f8cd 	bl	800c128 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf8e:	e023      	b.n	800bfd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	dc02      	bgt.n	800bfa2 <USBD_GetConfig+0x2e>
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	dc03      	bgt.n	800bfa8 <USBD_GetConfig+0x34>
 800bfa0:	e015      	b.n	800bfce <USBD_GetConfig+0x5a>
 800bfa2:	2b03      	cmp	r3, #3
 800bfa4:	d00b      	beq.n	800bfbe <USBD_GetConfig+0x4a>
 800bfa6:	e012      	b.n	800bfce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f927 	bl	800c20a <USBD_CtlSendData>
        break;
 800bfbc:	e00c      	b.n	800bfd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f91f 	bl	800c20a <USBD_CtlSendData>
        break;
 800bfcc:	e004      	b.n	800bfd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bfce:	6839      	ldr	r1, [r7, #0]
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f8a9 	bl	800c128 <USBD_CtlError>
        break;
 800bfd6:	bf00      	nop
}
 800bfd8:	bf00      	nop
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	3b01      	subs	r3, #1
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d81e      	bhi.n	800c036 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	88db      	ldrh	r3, [r3, #6]
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d004      	beq.n	800c00a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f890 	bl	800c128 <USBD_CtlError>
        break;
 800c008:	e01a      	b.n	800c040 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2201      	movs	r2, #1
 800c00e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c016:	2b00      	cmp	r3, #0
 800c018:	d005      	beq.n	800c026 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	f043 0202 	orr.w	r2, r3, #2
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	330c      	adds	r3, #12
 800c02a:	2202      	movs	r2, #2
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f8eb 	bl	800c20a <USBD_CtlSendData>
      break;
 800c034:	e004      	b.n	800c040 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 f875 	bl	800c128 <USBD_CtlError>
      break;
 800c03e:	bf00      	nop
  }
}
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	885b      	ldrh	r3, [r3, #2]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d106      	bne.n	800c068 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f92b 	bl	800c2be <USBD_CtlSendStatus>
  }
}
 800c068:	bf00      	nop
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c080:	b2db      	uxtb	r3, r3
 800c082:	3b01      	subs	r3, #1
 800c084:	2b02      	cmp	r3, #2
 800c086:	d80b      	bhi.n	800c0a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	885b      	ldrh	r3, [r3, #2]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d10c      	bne.n	800c0aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f910 	bl	800c2be <USBD_CtlSendStatus>
      }
      break;
 800c09e:	e004      	b.n	800c0aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 f840 	bl	800c128 <USBD_CtlError>
      break;
 800c0a8:	e000      	b.n	800c0ac <USBD_ClrFeature+0x3c>
      break;
 800c0aa:	bf00      	nop
  }
}
 800c0ac:	bf00      	nop
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	781a      	ldrb	r2, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	781a      	ldrb	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f7ff fabb 	bl	800b65a <SWAPBYTE>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f7ff faae 	bl	800b65a <SWAPBYTE>
 800c0fe:	4603      	mov	r3, r0
 800c100:	461a      	mov	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	3301      	adds	r3, #1
 800c10a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3301      	adds	r3, #1
 800c110:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f7ff faa1 	bl	800b65a <SWAPBYTE>
 800c118:	4603      	mov	r3, r0
 800c11a:	461a      	mov	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	80da      	strh	r2, [r3, #6]
}
 800c120:	bf00      	nop
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c132:	2180      	movs	r1, #128	; 0x80
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f003 ffd3 	bl	80100e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c13a:	2100      	movs	r1, #0
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f003 ffcf 	bl	80100e0 <USBD_LL_StallEP>
}
 800c142:	bf00      	nop
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b086      	sub	sp, #24
 800c14e:	af00      	add	r7, sp, #0
 800c150:	60f8      	str	r0, [r7, #12]
 800c152:	60b9      	str	r1, [r7, #8]
 800c154:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c156:	2300      	movs	r3, #0
 800c158:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d036      	beq.n	800c1ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c164:	6938      	ldr	r0, [r7, #16]
 800c166:	f000 f836 	bl	800c1d6 <USBD_GetLen>
 800c16a:	4603      	mov	r3, r0
 800c16c:	3301      	adds	r3, #1
 800c16e:	b29b      	uxth	r3, r3
 800c170:	005b      	lsls	r3, r3, #1
 800c172:	b29a      	uxth	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c178:	7dfb      	ldrb	r3, [r7, #23]
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	4413      	add	r3, r2
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	7812      	ldrb	r2, [r2, #0]
 800c182:	701a      	strb	r2, [r3, #0]
  idx++;
 800c184:	7dfb      	ldrb	r3, [r7, #23]
 800c186:	3301      	adds	r3, #1
 800c188:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c18a:	7dfb      	ldrb	r3, [r7, #23]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	4413      	add	r3, r2
 800c190:	2203      	movs	r2, #3
 800c192:	701a      	strb	r2, [r3, #0]
  idx++;
 800c194:	7dfb      	ldrb	r3, [r7, #23]
 800c196:	3301      	adds	r3, #1
 800c198:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c19a:	e013      	b.n	800c1c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c19c:	7dfb      	ldrb	r3, [r7, #23]
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	7812      	ldrb	r2, [r2, #0]
 800c1a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	613b      	str	r3, [r7, #16]
    idx++;
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c1b4:	7dfb      	ldrb	r3, [r7, #23]
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	701a      	strb	r2, [r3, #0]
    idx++;
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1e7      	bne.n	800c19c <USBD_GetString+0x52>
 800c1cc:	e000      	b.n	800c1d0 <USBD_GetString+0x86>
    return;
 800c1ce:	bf00      	nop
  }
}
 800c1d0:	3718      	adds	r7, #24
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b085      	sub	sp, #20
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c1e6:	e005      	b.n	800c1f4 <USBD_GetLen+0x1e>
  {
    len++;
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1f5      	bne.n	800c1e8 <USBD_GetLen+0x12>
  }

  return len;
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b084      	sub	sp, #16
 800c20e:	af00      	add	r7, sp, #0
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	60b9      	str	r1, [r7, #8]
 800c214:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2202      	movs	r2, #2
 800c21a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	2100      	movs	r1, #0
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f003 ffde 	bl	80101f2 <USBD_LL_Transmit>

  return USBD_OK;
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	68ba      	ldr	r2, [r7, #8]
 800c250:	2100      	movs	r1, #0
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f003 ffcd 	bl	80101f2 <USBD_LL_Transmit>

  return USBD_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b084      	sub	sp, #16
 800c266:	af00      	add	r7, sp, #0
 800c268:	60f8      	str	r0, [r7, #12]
 800c26a:	60b9      	str	r1, [r7, #8]
 800c26c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2203      	movs	r2, #3
 800c272:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	2100      	movs	r1, #0
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f003 ffd1 	bl	8010234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f003 ffc0 	bl	8010234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2204      	movs	r2, #4
 800c2ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f003 ff8c 	bl	80101f2 <USBD_LL_Transmit>

  return USBD_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3708      	adds	r7, #8
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2205      	movs	r2, #5
 800c2f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f003 ff9a 	bl	8010234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <__NVIC_SetPriority>:
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	4603      	mov	r3, r0
 800c314:	6039      	str	r1, [r7, #0]
 800c316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	db0a      	blt.n	800c336 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	b2da      	uxtb	r2, r3
 800c324:	490c      	ldr	r1, [pc, #48]	; (800c358 <__NVIC_SetPriority+0x4c>)
 800c326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c32a:	0112      	lsls	r2, r2, #4
 800c32c:	b2d2      	uxtb	r2, r2
 800c32e:	440b      	add	r3, r1
 800c330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c334:	e00a      	b.n	800c34c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	4908      	ldr	r1, [pc, #32]	; (800c35c <__NVIC_SetPriority+0x50>)
 800c33c:	79fb      	ldrb	r3, [r7, #7]
 800c33e:	f003 030f 	and.w	r3, r3, #15
 800c342:	3b04      	subs	r3, #4
 800c344:	0112      	lsls	r2, r2, #4
 800c346:	b2d2      	uxtb	r2, r2
 800c348:	440b      	add	r3, r1
 800c34a:	761a      	strb	r2, [r3, #24]
}
 800c34c:	bf00      	nop
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr
 800c358:	e000e100 	.word	0xe000e100
 800c35c:	e000ed00 	.word	0xe000ed00

0800c360 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c360:	b580      	push	{r7, lr}
 800c362:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c364:	4b05      	ldr	r3, [pc, #20]	; (800c37c <SysTick_Handler+0x1c>)
 800c366:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c368:	f002 f902 	bl	800e570 <xTaskGetSchedulerState>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d001      	beq.n	800c376 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c372:	f003 f829 	bl	800f3c8 <xPortSysTickHandler>
  }
}
 800c376:	bf00      	nop
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	e000e010 	.word	0xe000e010

0800c380 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c380:	b580      	push	{r7, lr}
 800c382:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c384:	2100      	movs	r1, #0
 800c386:	f06f 0004 	mvn.w	r0, #4
 800c38a:	f7ff ffbf 	bl	800c30c <__NVIC_SetPriority>
#endif
}
 800c38e:	bf00      	nop
 800c390:	bd80      	pop	{r7, pc}
	...

0800c394 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c39a:	f3ef 8305 	mrs	r3, IPSR
 800c39e:	603b      	str	r3, [r7, #0]
  return(result);
 800c3a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c3a6:	f06f 0305 	mvn.w	r3, #5
 800c3aa:	607b      	str	r3, [r7, #4]
 800c3ac:	e00c      	b.n	800c3c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c3ae:	4b0a      	ldr	r3, [pc, #40]	; (800c3d8 <osKernelInitialize+0x44>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d105      	bne.n	800c3c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c3b6:	4b08      	ldr	r3, [pc, #32]	; (800c3d8 <osKernelInitialize+0x44>)
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	607b      	str	r3, [r7, #4]
 800c3c0:	e002      	b.n	800c3c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c3c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c3c8:	687b      	ldr	r3, [r7, #4]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	20002798 	.word	0x20002798

0800c3dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3e2:	f3ef 8305 	mrs	r3, IPSR
 800c3e6:	603b      	str	r3, [r7, #0]
  return(result);
 800c3e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c3ee:	f06f 0305 	mvn.w	r3, #5
 800c3f2:	607b      	str	r3, [r7, #4]
 800c3f4:	e010      	b.n	800c418 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c3f6:	4b0b      	ldr	r3, [pc, #44]	; (800c424 <osKernelStart+0x48>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d109      	bne.n	800c412 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c3fe:	f7ff ffbf 	bl	800c380 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c402:	4b08      	ldr	r3, [pc, #32]	; (800c424 <osKernelStart+0x48>)
 800c404:	2202      	movs	r2, #2
 800c406:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c408:	f001 fad0 	bl	800d9ac <vTaskStartScheduler>
      stat = osOK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	607b      	str	r3, [r7, #4]
 800c410:	e002      	b.n	800c418 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c416:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c418:	687b      	ldr	r3, [r7, #4]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	20002798 	.word	0x20002798

0800c428 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08e      	sub	sp, #56	; 0x38
 800c42c:	af04      	add	r7, sp, #16
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c434:	2300      	movs	r3, #0
 800c436:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c438:	f3ef 8305 	mrs	r3, IPSR
 800c43c:	617b      	str	r3, [r7, #20]
  return(result);
 800c43e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c440:	2b00      	cmp	r3, #0
 800c442:	d17e      	bne.n	800c542 <osThreadNew+0x11a>
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d07b      	beq.n	800c542 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c44a:	2380      	movs	r3, #128	; 0x80
 800c44c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c44e:	2318      	movs	r3, #24
 800c450:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c452:	2300      	movs	r3, #0
 800c454:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c45a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d045      	beq.n	800c4ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d002      	beq.n	800c470 <osThreadNew+0x48>
        name = attr->name;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d008      	beq.n	800c496 <osThreadNew+0x6e>
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	2b38      	cmp	r3, #56	; 0x38
 800c488:	d805      	bhi.n	800c496 <osThreadNew+0x6e>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	f003 0301 	and.w	r3, r3, #1
 800c492:	2b00      	cmp	r3, #0
 800c494:	d001      	beq.n	800c49a <osThreadNew+0x72>
        return (NULL);
 800c496:	2300      	movs	r3, #0
 800c498:	e054      	b.n	800c544 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d003      	beq.n	800c4aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	695b      	ldr	r3, [r3, #20]
 800c4a6:	089b      	lsrs	r3, r3, #2
 800c4a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00e      	beq.n	800c4d0 <osThreadNew+0xa8>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	2bbf      	cmp	r3, #191	; 0xbf
 800c4b8:	d90a      	bls.n	800c4d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d006      	beq.n	800c4d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <osThreadNew+0xa8>
        mem = 1;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	61bb      	str	r3, [r7, #24]
 800c4ce:	e010      	b.n	800c4f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10c      	bne.n	800c4f2 <osThreadNew+0xca>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d108      	bne.n	800c4f2 <osThreadNew+0xca>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	691b      	ldr	r3, [r3, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d104      	bne.n	800c4f2 <osThreadNew+0xca>
          mem = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	61bb      	str	r3, [r7, #24]
 800c4ec:	e001      	b.n	800c4f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d110      	bne.n	800c51a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c500:	9202      	str	r2, [sp, #8]
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	6a3a      	ldr	r2, [r7, #32]
 800c50c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f000 fff6 	bl	800d500 <xTaskCreateStatic>
 800c514:	4603      	mov	r3, r0
 800c516:	613b      	str	r3, [r7, #16]
 800c518:	e013      	b.n	800c542 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d110      	bne.n	800c542 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c520:	6a3b      	ldr	r3, [r7, #32]
 800c522:	b29a      	uxth	r2, r3
 800c524:	f107 0310 	add.w	r3, r7, #16
 800c528:	9301      	str	r3, [sp, #4]
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f001 f841 	bl	800d5ba <xTaskCreate>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d001      	beq.n	800c542 <osThreadNew+0x11a>
            hTask = NULL;
 800c53e:	2300      	movs	r3, #0
 800c540:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c542:	693b      	ldr	r3, [r7, #16]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3728      	adds	r7, #40	; 0x28
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c554:	f3ef 8305 	mrs	r3, IPSR
 800c558:	60bb      	str	r3, [r7, #8]
  return(result);
 800c55a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d003      	beq.n	800c568 <osDelay+0x1c>
    stat = osErrorISR;
 800c560:	f06f 0305 	mvn.w	r3, #5
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	e007      	b.n	800c578 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c568:	2300      	movs	r3, #0
 800c56a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d002      	beq.n	800c578 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f001 f980 	bl	800d878 <vTaskDelay>
    }
  }

  return (stat);
 800c578:	68fb      	ldr	r3, [r7, #12]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c582:	b580      	push	{r7, lr}
 800c584:	b08a      	sub	sp, #40	; 0x28
 800c586:	af02      	add	r7, sp, #8
 800c588:	60f8      	str	r0, [r7, #12]
 800c58a:	60b9      	str	r1, [r7, #8]
 800c58c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c58e:	2300      	movs	r3, #0
 800c590:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c592:	f3ef 8305 	mrs	r3, IPSR
 800c596:	613b      	str	r3, [r7, #16]
  return(result);
 800c598:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d15f      	bne.n	800c65e <osMessageQueueNew+0xdc>
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d05c      	beq.n	800c65e <osMessageQueueNew+0xdc>
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d059      	beq.n	800c65e <osMessageQueueNew+0xdc>
    mem = -1;
 800c5aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d029      	beq.n	800c60a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d012      	beq.n	800c5e4 <osMessageQueueNew+0x62>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	2b4f      	cmp	r3, #79	; 0x4f
 800c5c4:	d90e      	bls.n	800c5e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00a      	beq.n	800c5e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	695a      	ldr	r2, [r3, #20]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	68b9      	ldr	r1, [r7, #8]
 800c5d6:	fb01 f303 	mul.w	r3, r1, r3
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d302      	bcc.n	800c5e4 <osMessageQueueNew+0x62>
        mem = 1;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	61bb      	str	r3, [r7, #24]
 800c5e2:	e014      	b.n	800c60e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d110      	bne.n	800c60e <osMessageQueueNew+0x8c>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10c      	bne.n	800c60e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d108      	bne.n	800c60e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d104      	bne.n	800c60e <osMessageQueueNew+0x8c>
          mem = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	61bb      	str	r3, [r7, #24]
 800c608:	e001      	b.n	800c60e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c60a:	2300      	movs	r3, #0
 800c60c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	2b01      	cmp	r3, #1
 800c612:	d10b      	bne.n	800c62c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	691a      	ldr	r2, [r3, #16]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	2100      	movs	r1, #0
 800c61e:	9100      	str	r1, [sp, #0]
 800c620:	68b9      	ldr	r1, [r7, #8]
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f000 fa2e 	bl	800ca84 <xQueueGenericCreateStatic>
 800c628:	61f8      	str	r0, [r7, #28]
 800c62a:	e008      	b.n	800c63e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d105      	bne.n	800c63e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c632:	2200      	movs	r2, #0
 800c634:	68b9      	ldr	r1, [r7, #8]
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f000 fa9c 	bl	800cb74 <xQueueGenericCreate>
 800c63c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00c      	beq.n	800c65e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d003      	beq.n	800c652 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	617b      	str	r3, [r7, #20]
 800c650:	e001      	b.n	800c656 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c652:	2300      	movs	r3, #0
 800c654:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c656:	6979      	ldr	r1, [r7, #20]
 800c658:	69f8      	ldr	r0, [r7, #28]
 800c65a:	f000 fef3 	bl	800d444 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c65e:	69fb      	ldr	r3, [r7, #28]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3720      	adds	r7, #32
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c668:	b580      	push	{r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	603b      	str	r3, [r7, #0]
 800c674:	4613      	mov	r3, r2
 800c676:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c67c:	2300      	movs	r3, #0
 800c67e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c680:	f3ef 8305 	mrs	r3, IPSR
 800c684:	617b      	str	r3, [r7, #20]
  return(result);
 800c686:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d028      	beq.n	800c6de <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d005      	beq.n	800c69e <osMessageQueuePut+0x36>
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <osMessageQueuePut+0x36>
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d003      	beq.n	800c6a6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c69e:	f06f 0303 	mvn.w	r3, #3
 800c6a2:	61fb      	str	r3, [r7, #28]
 800c6a4:	e038      	b.n	800c718 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c6aa:	f107 0210 	add.w	r2, r7, #16
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	68b9      	ldr	r1, [r7, #8]
 800c6b2:	69b8      	ldr	r0, [r7, #24]
 800c6b4:	f000 fbba 	bl	800ce2c <xQueueGenericSendFromISR>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d003      	beq.n	800c6c6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c6be:	f06f 0302 	mvn.w	r3, #2
 800c6c2:	61fb      	str	r3, [r7, #28]
 800c6c4:	e028      	b.n	800c718 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d025      	beq.n	800c718 <osMessageQueuePut+0xb0>
 800c6cc:	4b15      	ldr	r3, [pc, #84]	; (800c724 <osMessageQueuePut+0xbc>)
 800c6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	e01c      	b.n	800c718 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d002      	beq.n	800c6ea <osMessageQueuePut+0x82>
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d103      	bne.n	800c6f2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c6ea:	f06f 0303 	mvn.w	r3, #3
 800c6ee:	61fb      	str	r3, [r7, #28]
 800c6f0:	e012      	b.n	800c718 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	68b9      	ldr	r1, [r7, #8]
 800c6f8:	69b8      	ldr	r0, [r7, #24]
 800c6fa:	f000 fa99 	bl	800cc30 <xQueueGenericSend>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b01      	cmp	r3, #1
 800c702:	d009      	beq.n	800c718 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c70a:	f06f 0301 	mvn.w	r3, #1
 800c70e:	61fb      	str	r3, [r7, #28]
 800c710:	e002      	b.n	800c718 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c712:	f06f 0302 	mvn.w	r3, #2
 800c716:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c718:	69fb      	ldr	r3, [r7, #28]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3720      	adds	r7, #32
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	e000ed04 	.word	0xe000ed04

0800c728 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c728:	b580      	push	{r7, lr}
 800c72a:	b088      	sub	sp, #32
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
 800c734:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c73a:	2300      	movs	r3, #0
 800c73c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c73e:	f3ef 8305 	mrs	r3, IPSR
 800c742:	617b      	str	r3, [r7, #20]
  return(result);
 800c744:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c746:	2b00      	cmp	r3, #0
 800c748:	d028      	beq.n	800c79c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d005      	beq.n	800c75c <osMessageQueueGet+0x34>
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d002      	beq.n	800c75c <osMessageQueueGet+0x34>
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d003      	beq.n	800c764 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c75c:	f06f 0303 	mvn.w	r3, #3
 800c760:	61fb      	str	r3, [r7, #28]
 800c762:	e037      	b.n	800c7d4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c764:	2300      	movs	r3, #0
 800c766:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c768:	f107 0310 	add.w	r3, r7, #16
 800c76c:	461a      	mov	r2, r3
 800c76e:	68b9      	ldr	r1, [r7, #8]
 800c770:	69b8      	ldr	r0, [r7, #24]
 800c772:	f000 fcd7 	bl	800d124 <xQueueReceiveFromISR>
 800c776:	4603      	mov	r3, r0
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d003      	beq.n	800c784 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c77c:	f06f 0302 	mvn.w	r3, #2
 800c780:	61fb      	str	r3, [r7, #28]
 800c782:	e027      	b.n	800c7d4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d024      	beq.n	800c7d4 <osMessageQueueGet+0xac>
 800c78a:	4b15      	ldr	r3, [pc, #84]	; (800c7e0 <osMessageQueueGet+0xb8>)
 800c78c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	e01b      	b.n	800c7d4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d002      	beq.n	800c7a8 <osMessageQueueGet+0x80>
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d103      	bne.n	800c7b0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c7a8:	f06f 0303 	mvn.w	r3, #3
 800c7ac:	61fb      	str	r3, [r7, #28]
 800c7ae:	e011      	b.n	800c7d4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	69b8      	ldr	r0, [r7, #24]
 800c7b6:	f000 fbd5 	bl	800cf64 <xQueueReceive>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d009      	beq.n	800c7d4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d003      	beq.n	800c7ce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c7c6:	f06f 0301 	mvn.w	r3, #1
 800c7ca:	61fb      	str	r3, [r7, #28]
 800c7cc:	e002      	b.n	800c7d4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c7ce:	f06f 0302 	mvn.w	r3, #2
 800c7d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c7d4:	69fb      	ldr	r3, [r7, #28]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3720      	adds	r7, #32
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	e000ed04 	.word	0xe000ed04

0800c7e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	4a07      	ldr	r2, [pc, #28]	; (800c810 <vApplicationGetIdleTaskMemory+0x2c>)
 800c7f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	4a06      	ldr	r2, [pc, #24]	; (800c814 <vApplicationGetIdleTaskMemory+0x30>)
 800c7fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2280      	movs	r2, #128	; 0x80
 800c800:	601a      	str	r2, [r3, #0]
}
 800c802:	bf00      	nop
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	2000279c 	.word	0x2000279c
 800c814:	2000285c 	.word	0x2000285c

0800c818 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	4a07      	ldr	r2, [pc, #28]	; (800c844 <vApplicationGetTimerTaskMemory+0x2c>)
 800c828:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	4a06      	ldr	r2, [pc, #24]	; (800c848 <vApplicationGetTimerTaskMemory+0x30>)
 800c82e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c836:	601a      	str	r2, [r3, #0]
}
 800c838:	bf00      	nop
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr
 800c844:	20002a5c 	.word	0x20002a5c
 800c848:	20002b1c 	.word	0x20002b1c

0800c84c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f103 0208 	add.w	r2, r3, #8
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c864:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f103 0208 	add.w	r2, r3, #8
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f103 0208 	add.w	r2, r3, #8
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c89a:	bf00      	nop
 800c89c:	370c      	adds	r7, #12
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8a6:	b480      	push	{r7}
 800c8a8:	b085      	sub	sp, #20
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	689a      	ldr	r2, [r3, #8]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	683a      	ldr	r2, [r7, #0]
 800c8d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	1c5a      	adds	r2, r3, #1
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	601a      	str	r2, [r3, #0]
}
 800c8e2:	bf00      	nop
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr

0800c8ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b085      	sub	sp, #20
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c904:	d103      	bne.n	800c90e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	60fb      	str	r3, [r7, #12]
 800c90c:	e00c      	b.n	800c928 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	3308      	adds	r3, #8
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	e002      	b.n	800c91c <vListInsert+0x2e>
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	60fb      	str	r3, [r7, #12]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	68ba      	ldr	r2, [r7, #8]
 800c924:	429a      	cmp	r2, r3
 800c926:	d2f6      	bcs.n	800c916 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	683a      	ldr	r2, [r7, #0]
 800c936:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	683a      	ldr	r2, [r7, #0]
 800c942:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	601a      	str	r2, [r3, #0]
}
 800c954:	bf00      	nop
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	6892      	ldr	r2, [r2, #8]
 800c976:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	6852      	ldr	r2, [r2, #4]
 800c980:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d103      	bne.n	800c994 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	689a      	ldr	r2, [r3, #8]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	1e5a      	subs	r2, r3, #1
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10a      	bne.n	800c9de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9cc:	f383 8811 	msr	BASEPRI, r3
 800c9d0:	f3bf 8f6f 	isb	sy
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c9da:	bf00      	nop
 800c9dc:	e7fe      	b.n	800c9dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c9de:	f002 fc61 	bl	800f2a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ea:	68f9      	ldr	r1, [r7, #12]
 800c9ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9ee:	fb01 f303 	mul.w	r3, r1, r3
 800c9f2:	441a      	add	r2, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	68f9      	ldr	r1, [r7, #12]
 800ca12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca14:	fb01 f303 	mul.w	r3, r1, r3
 800ca18:	441a      	add	r2, r3
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	22ff      	movs	r2, #255	; 0xff
 800ca22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	22ff      	movs	r2, #255	; 0xff
 800ca2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d114      	bne.n	800ca5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	691b      	ldr	r3, [r3, #16]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d01a      	beq.n	800ca72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	3310      	adds	r3, #16
 800ca40:	4618      	mov	r0, r3
 800ca42:	f001 faff 	bl	800e044 <xTaskRemoveFromEventList>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d012      	beq.n	800ca72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ca4c:	4b0c      	ldr	r3, [pc, #48]	; (800ca80 <xQueueGenericReset+0xcc>)
 800ca4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca52:	601a      	str	r2, [r3, #0]
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	e009      	b.n	800ca72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3310      	adds	r3, #16
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7ff fef2 	bl	800c84c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	3324      	adds	r3, #36	; 0x24
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7ff feed 	bl	800c84c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ca72:	f002 fc47 	bl	800f304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ca76:	2301      	movs	r3, #1
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	e000ed04 	.word	0xe000ed04

0800ca84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b08e      	sub	sp, #56	; 0x38
 800ca88:	af02      	add	r7, sp, #8
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
 800ca90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10a      	bne.n	800caae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9c:	f383 8811 	msr	BASEPRI, r3
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800caaa:	bf00      	nop
 800caac:	e7fe      	b.n	800caac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d10a      	bne.n	800caca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cac6:	bf00      	nop
 800cac8:	e7fe      	b.n	800cac8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <xQueueGenericCreateStatic+0x52>
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <xQueueGenericCreateStatic+0x56>
 800cad6:	2301      	movs	r3, #1
 800cad8:	e000      	b.n	800cadc <xQueueGenericCreateStatic+0x58>
 800cada:	2300      	movs	r3, #0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d10a      	bne.n	800caf6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	623b      	str	r3, [r7, #32]
}
 800caf2:	bf00      	nop
 800caf4:	e7fe      	b.n	800caf4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d102      	bne.n	800cb02 <xQueueGenericCreateStatic+0x7e>
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d101      	bne.n	800cb06 <xQueueGenericCreateStatic+0x82>
 800cb02:	2301      	movs	r3, #1
 800cb04:	e000      	b.n	800cb08 <xQueueGenericCreateStatic+0x84>
 800cb06:	2300      	movs	r3, #0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d10a      	bne.n	800cb22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	61fb      	str	r3, [r7, #28]
}
 800cb1e:	bf00      	nop
 800cb20:	e7fe      	b.n	800cb20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cb22:	2350      	movs	r3, #80	; 0x50
 800cb24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	2b50      	cmp	r3, #80	; 0x50
 800cb2a:	d00a      	beq.n	800cb42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb30:	f383 8811 	msr	BASEPRI, r3
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	61bb      	str	r3, [r7, #24]
}
 800cb3e:	bf00      	nop
 800cb40:	e7fe      	b.n	800cb40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cb42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00d      	beq.n	800cb6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb50:	2201      	movs	r2, #1
 800cb52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	68b9      	ldr	r1, [r7, #8]
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f000 f83f 	bl	800cbe8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3730      	adds	r7, #48	; 0x30
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08a      	sub	sp, #40	; 0x28
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10a      	bne.n	800cb9e <xQueueGenericCreate+0x2a>
	__asm volatile
 800cb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8c:	f383 8811 	msr	BASEPRI, r3
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	613b      	str	r3, [r7, #16]
}
 800cb9a:	bf00      	nop
 800cb9c:	e7fe      	b.n	800cb9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	fb02 f303 	mul.w	r3, r2, r3
 800cba6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	3350      	adds	r3, #80	; 0x50
 800cbac:	4618      	mov	r0, r3
 800cbae:	f002 fc9b 	bl	800f4e8 <pvPortMalloc>
 800cbb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d011      	beq.n	800cbde <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	3350      	adds	r3, #80	; 0x50
 800cbc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cbcc:	79fa      	ldrb	r2, [r7, #7]
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	9300      	str	r3, [sp, #0]
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	697a      	ldr	r2, [r7, #20]
 800cbd6:	68b9      	ldr	r1, [r7, #8]
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f000 f805 	bl	800cbe8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cbde:	69bb      	ldr	r3, [r7, #24]
	}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3720      	adds	r7, #32
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
 800cbf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d103      	bne.n	800cc04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	69ba      	ldr	r2, [r7, #24]
 800cc00:	601a      	str	r2, [r3, #0]
 800cc02:	e002      	b.n	800cc0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc16:	2101      	movs	r1, #1
 800cc18:	69b8      	ldr	r0, [r7, #24]
 800cc1a:	f7ff fecb 	bl	800c9b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	78fa      	ldrb	r2, [r7, #3]
 800cc22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cc26:	bf00      	nop
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
	...

0800cc30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b08e      	sub	sp, #56	; 0x38
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
 800cc3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10a      	bne.n	800cc62 <xQueueGenericSend+0x32>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc5e:	bf00      	nop
 800cc60:	e7fe      	b.n	800cc60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d103      	bne.n	800cc70 <xQueueGenericSend+0x40>
 800cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d101      	bne.n	800cc74 <xQueueGenericSend+0x44>
 800cc70:	2301      	movs	r3, #1
 800cc72:	e000      	b.n	800cc76 <xQueueGenericSend+0x46>
 800cc74:	2300      	movs	r3, #0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10a      	bne.n	800cc90 <xQueueGenericSend+0x60>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc8c:	bf00      	nop
 800cc8e:	e7fe      	b.n	800cc8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	2b02      	cmp	r3, #2
 800cc94:	d103      	bne.n	800cc9e <xQueueGenericSend+0x6e>
 800cc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d101      	bne.n	800cca2 <xQueueGenericSend+0x72>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e000      	b.n	800cca4 <xQueueGenericSend+0x74>
 800cca2:	2300      	movs	r3, #0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10a      	bne.n	800ccbe <xQueueGenericSend+0x8e>
	__asm volatile
 800cca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccac:	f383 8811 	msr	BASEPRI, r3
 800ccb0:	f3bf 8f6f 	isb	sy
 800ccb4:	f3bf 8f4f 	dsb	sy
 800ccb8:	623b      	str	r3, [r7, #32]
}
 800ccba:	bf00      	nop
 800ccbc:	e7fe      	b.n	800ccbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccbe:	f001 fc57 	bl	800e570 <xTaskGetSchedulerState>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <xQueueGenericSend+0x9e>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d101      	bne.n	800ccd2 <xQueueGenericSend+0xa2>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e000      	b.n	800ccd4 <xQueueGenericSend+0xa4>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d10a      	bne.n	800ccee <xQueueGenericSend+0xbe>
	__asm volatile
 800ccd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccdc:	f383 8811 	msr	BASEPRI, r3
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	61fb      	str	r3, [r7, #28]
}
 800ccea:	bf00      	nop
 800ccec:	e7fe      	b.n	800ccec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ccee:	f002 fad9 	bl	800f2a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d302      	bcc.n	800cd04 <xQueueGenericSend+0xd4>
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d129      	bne.n	800cd58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd04:	683a      	ldr	r2, [r7, #0]
 800cd06:	68b9      	ldr	r1, [r7, #8]
 800cd08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd0a:	f000 fa8b 	bl	800d224 <prvCopyDataToQueue>
 800cd0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d010      	beq.n	800cd3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1a:	3324      	adds	r3, #36	; 0x24
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f001 f991 	bl	800e044 <xTaskRemoveFromEventList>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d013      	beq.n	800cd50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd28:	4b3f      	ldr	r3, [pc, #252]	; (800ce28 <xQueueGenericSend+0x1f8>)
 800cd2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd2e:	601a      	str	r2, [r3, #0]
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	e00a      	b.n	800cd50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d007      	beq.n	800cd50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd40:	4b39      	ldr	r3, [pc, #228]	; (800ce28 <xQueueGenericSend+0x1f8>)
 800cd42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd46:	601a      	str	r2, [r3, #0]
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cd50:	f002 fad8 	bl	800f304 <vPortExitCritical>
				return pdPASS;
 800cd54:	2301      	movs	r3, #1
 800cd56:	e063      	b.n	800ce20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d103      	bne.n	800cd66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd5e:	f002 fad1 	bl	800f304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	e05c      	b.n	800ce20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d106      	bne.n	800cd7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd6c:	f107 0314 	add.w	r3, r7, #20
 800cd70:	4618      	mov	r0, r3
 800cd72:	f001 f9cb 	bl	800e10c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd76:	2301      	movs	r3, #1
 800cd78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd7a:	f002 fac3 	bl	800f304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd7e:	f000 fe89 	bl	800da94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd82:	f002 fa8f 	bl	800f2a4 <vPortEnterCritical>
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd8c:	b25b      	sxtb	r3, r3
 800cd8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd92:	d103      	bne.n	800cd9c <xQueueGenericSend+0x16c>
 800cd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd96:	2200      	movs	r2, #0
 800cd98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cda2:	b25b      	sxtb	r3, r3
 800cda4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cda8:	d103      	bne.n	800cdb2 <xQueueGenericSend+0x182>
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdb2:	f002 faa7 	bl	800f304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdb6:	1d3a      	adds	r2, r7, #4
 800cdb8:	f107 0314 	add.w	r3, r7, #20
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f001 f9ba 	bl	800e138 <xTaskCheckForTimeOut>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d124      	bne.n	800ce14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cdca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdcc:	f000 fb22 	bl	800d414 <prvIsQueueFull>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d018      	beq.n	800ce08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	3310      	adds	r3, #16
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	4611      	mov	r1, r2
 800cdde:	4618      	mov	r0, r3
 800cde0:	f001 f8e0 	bl	800dfa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cde4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cde6:	f000 faad 	bl	800d344 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cdea:	f000 fe61 	bl	800dab0 <xTaskResumeAll>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f47f af7c 	bne.w	800ccee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cdf6:	4b0c      	ldr	r3, [pc, #48]	; (800ce28 <xQueueGenericSend+0x1f8>)
 800cdf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdfc:	601a      	str	r2, [r3, #0]
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	e772      	b.n	800ccee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce0a:	f000 fa9b 	bl	800d344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce0e:	f000 fe4f 	bl	800dab0 <xTaskResumeAll>
 800ce12:	e76c      	b.n	800ccee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce16:	f000 fa95 	bl	800d344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce1a:	f000 fe49 	bl	800dab0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3738      	adds	r7, #56	; 0x38
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	e000ed04 	.word	0xe000ed04

0800ce2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b090      	sub	sp, #64	; 0x40
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
 800ce38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ce3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10a      	bne.n	800ce5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ce44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce48:	f383 8811 	msr	BASEPRI, r3
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	f3bf 8f4f 	dsb	sy
 800ce54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce56:	bf00      	nop
 800ce58:	e7fe      	b.n	800ce58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d103      	bne.n	800ce68 <xQueueGenericSendFromISR+0x3c>
 800ce60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d101      	bne.n	800ce6c <xQueueGenericSendFromISR+0x40>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e000      	b.n	800ce6e <xQueueGenericSendFromISR+0x42>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d10a      	bne.n	800ce88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ce72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce84:	bf00      	nop
 800ce86:	e7fe      	b.n	800ce86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	d103      	bne.n	800ce96 <xQueueGenericSendFromISR+0x6a>
 800ce8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d101      	bne.n	800ce9a <xQueueGenericSendFromISR+0x6e>
 800ce96:	2301      	movs	r3, #1
 800ce98:	e000      	b.n	800ce9c <xQueueGenericSendFromISR+0x70>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d10a      	bne.n	800ceb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	623b      	str	r3, [r7, #32]
}
 800ceb2:	bf00      	nop
 800ceb4:	e7fe      	b.n	800ceb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ceb6:	f002 fad7 	bl	800f468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ceba:	f3ef 8211 	mrs	r2, BASEPRI
 800cebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	61fa      	str	r2, [r7, #28]
 800ced0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ced2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ced4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ced6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ceda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cedc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cede:	429a      	cmp	r2, r3
 800cee0:	d302      	bcc.n	800cee8 <xQueueGenericSendFromISR+0xbc>
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d12f      	bne.n	800cf48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ceee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cef8:	683a      	ldr	r2, [r7, #0]
 800cefa:	68b9      	ldr	r1, [r7, #8]
 800cefc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cefe:	f000 f991 	bl	800d224 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cf06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf0a:	d112      	bne.n	800cf32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d016      	beq.n	800cf42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf16:	3324      	adds	r3, #36	; 0x24
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f001 f893 	bl	800e044 <xTaskRemoveFromEventList>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d00e      	beq.n	800cf42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00b      	beq.n	800cf42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	601a      	str	r2, [r3, #0]
 800cf30:	e007      	b.n	800cf42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf36:	3301      	adds	r3, #1
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	b25a      	sxtb	r2, r3
 800cf3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf42:	2301      	movs	r3, #1
 800cf44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cf46:	e001      	b.n	800cf4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3740      	adds	r7, #64	; 0x40
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
	...

0800cf64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b08c      	sub	sp, #48	; 0x30
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf70:	2300      	movs	r3, #0
 800cf72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10a      	bne.n	800cf94 <xQueueReceive+0x30>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	623b      	str	r3, [r7, #32]
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d103      	bne.n	800cfa2 <xQueueReceive+0x3e>
 800cf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <xQueueReceive+0x42>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e000      	b.n	800cfa8 <xQueueReceive+0x44>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10a      	bne.n	800cfc2 <xQueueReceive+0x5e>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	61fb      	str	r3, [r7, #28]
}
 800cfbe:	bf00      	nop
 800cfc0:	e7fe      	b.n	800cfc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfc2:	f001 fad5 	bl	800e570 <xTaskGetSchedulerState>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d102      	bne.n	800cfd2 <xQueueReceive+0x6e>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d101      	bne.n	800cfd6 <xQueueReceive+0x72>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e000      	b.n	800cfd8 <xQueueReceive+0x74>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10a      	bne.n	800cff2 <xQueueReceive+0x8e>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	61bb      	str	r3, [r7, #24]
}
 800cfee:	bf00      	nop
 800cff0:	e7fe      	b.n	800cff0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cff2:	f002 f957 	bl	800f2a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d01f      	beq.n	800d042 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d002:	68b9      	ldr	r1, [r7, #8]
 800d004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d006:	f000 f977 	bl	800d2f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00c:	1e5a      	subs	r2, r3, #1
 800d00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d010:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d014:	691b      	ldr	r3, [r3, #16]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00f      	beq.n	800d03a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01c:	3310      	adds	r3, #16
 800d01e:	4618      	mov	r0, r3
 800d020:	f001 f810 	bl	800e044 <xTaskRemoveFromEventList>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d007      	beq.n	800d03a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d02a:	4b3d      	ldr	r3, [pc, #244]	; (800d120 <xQueueReceive+0x1bc>)
 800d02c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d03a:	f002 f963 	bl	800f304 <vPortExitCritical>
				return pdPASS;
 800d03e:	2301      	movs	r3, #1
 800d040:	e069      	b.n	800d116 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d103      	bne.n	800d050 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d048:	f002 f95c 	bl	800f304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d04c:	2300      	movs	r3, #0
 800d04e:	e062      	b.n	800d116 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	2b00      	cmp	r3, #0
 800d054:	d106      	bne.n	800d064 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d056:	f107 0310 	add.w	r3, r7, #16
 800d05a:	4618      	mov	r0, r3
 800d05c:	f001 f856 	bl	800e10c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d060:	2301      	movs	r3, #1
 800d062:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d064:	f002 f94e 	bl	800f304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d068:	f000 fd14 	bl	800da94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d06c:	f002 f91a 	bl	800f2a4 <vPortEnterCritical>
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d076:	b25b      	sxtb	r3, r3
 800d078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d07c:	d103      	bne.n	800d086 <xQueueReceive+0x122>
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	2200      	movs	r2, #0
 800d082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d08c:	b25b      	sxtb	r3, r3
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d092:	d103      	bne.n	800d09c <xQueueReceive+0x138>
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	2200      	movs	r2, #0
 800d098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d09c:	f002 f932 	bl	800f304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0a0:	1d3a      	adds	r2, r7, #4
 800d0a2:	f107 0310 	add.w	r3, r7, #16
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f001 f845 	bl	800e138 <xTaskCheckForTimeOut>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d123      	bne.n	800d0fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0b6:	f000 f997 	bl	800d3e8 <prvIsQueueEmpty>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d017      	beq.n	800d0f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c2:	3324      	adds	r3, #36	; 0x24
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	4611      	mov	r1, r2
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f000 ff6b 	bl	800dfa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d0ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0d0:	f000 f938 	bl	800d344 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0d4:	f000 fcec 	bl	800dab0 <xTaskResumeAll>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d189      	bne.n	800cff2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d0de:	4b10      	ldr	r3, [pc, #64]	; (800d120 <xQueueReceive+0x1bc>)
 800d0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	e780      	b.n	800cff2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0f2:	f000 f927 	bl	800d344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0f6:	f000 fcdb 	bl	800dab0 <xTaskResumeAll>
 800d0fa:	e77a      	b.n	800cff2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0fe:	f000 f921 	bl	800d344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d102:	f000 fcd5 	bl	800dab0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d108:	f000 f96e 	bl	800d3e8 <prvIsQueueEmpty>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f43f af6f 	beq.w	800cff2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d114:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d116:	4618      	mov	r0, r3
 800d118:	3730      	adds	r7, #48	; 0x30
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	e000ed04 	.word	0xe000ed04

0800d124 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b08e      	sub	sp, #56	; 0x38
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10a      	bne.n	800d150 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13e:	f383 8811 	msr	BASEPRI, r3
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	623b      	str	r3, [r7, #32]
}
 800d14c:	bf00      	nop
 800d14e:	e7fe      	b.n	800d14e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d103      	bne.n	800d15e <xQueueReceiveFromISR+0x3a>
 800d156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <xQueueReceiveFromISR+0x3e>
 800d15e:	2301      	movs	r3, #1
 800d160:	e000      	b.n	800d164 <xQueueReceiveFromISR+0x40>
 800d162:	2300      	movs	r3, #0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10a      	bne.n	800d17e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16c:	f383 8811 	msr	BASEPRI, r3
 800d170:	f3bf 8f6f 	isb	sy
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	61fb      	str	r3, [r7, #28]
}
 800d17a:	bf00      	nop
 800d17c:	e7fe      	b.n	800d17c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d17e:	f002 f973 	bl	800f468 <vPortValidateInterruptPriority>
	__asm volatile
 800d182:	f3ef 8211 	mrs	r2, BASEPRI
 800d186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18a:	f383 8811 	msr	BASEPRI, r3
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	61ba      	str	r2, [r7, #24]
 800d198:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d19a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d19c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d02f      	beq.n	800d20a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1b4:	68b9      	ldr	r1, [r7, #8]
 800d1b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1b8:	f000 f89e 	bl	800d2f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1be:	1e5a      	subs	r2, r3, #1
 800d1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d1c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1cc:	d112      	bne.n	800d1f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d016      	beq.n	800d204 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	3310      	adds	r3, #16
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f000 ff32 	bl	800e044 <xTaskRemoveFromEventList>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00e      	beq.n	800d204 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00b      	beq.n	800d204 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	601a      	str	r2, [r3, #0]
 800d1f2:	e007      	b.n	800d204 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	b25a      	sxtb	r2, r3
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d204:	2301      	movs	r3, #1
 800d206:	637b      	str	r3, [r7, #52]	; 0x34
 800d208:	e001      	b.n	800d20e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d20a:	2300      	movs	r3, #0
 800d20c:	637b      	str	r3, [r7, #52]	; 0x34
 800d20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d210:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	f383 8811 	msr	BASEPRI, r3
}
 800d218:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3738      	adds	r7, #56	; 0x38
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b086      	sub	sp, #24
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d230:	2300      	movs	r3, #0
 800d232:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d238:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10d      	bne.n	800d25e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d14d      	bne.n	800d2e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	4618      	mov	r0, r3
 800d250:	f001 f9ac 	bl	800e5ac <xTaskPriorityDisinherit>
 800d254:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	609a      	str	r2, [r3, #8]
 800d25c:	e043      	b.n	800d2e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d119      	bne.n	800d298 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6858      	ldr	r0, [r3, #4]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26c:	461a      	mov	r2, r3
 800d26e:	68b9      	ldr	r1, [r7, #8]
 800d270:	f003 f995 	bl	801059e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	685a      	ldr	r2, [r3, #4]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27c:	441a      	add	r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	685a      	ldr	r2, [r3, #4]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d32b      	bcc.n	800d2e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	605a      	str	r2, [r3, #4]
 800d296:	e026      	b.n	800d2e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	68d8      	ldr	r0, [r3, #12]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	68b9      	ldr	r1, [r7, #8]
 800d2a4:	f003 f97b 	bl	801059e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	68da      	ldr	r2, [r3, #12]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b0:	425b      	negs	r3, r3
 800d2b2:	441a      	add	r2, r3
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	68da      	ldr	r2, [r3, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d207      	bcs.n	800d2d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	689a      	ldr	r2, [r3, #8]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2cc:	425b      	negs	r3, r3
 800d2ce:	441a      	add	r2, r3
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d105      	bne.n	800d2e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d002      	beq.n	800d2e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	1c5a      	adds	r2, r3, #1
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d2ee:	697b      	ldr	r3, [r7, #20]
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3718      	adds	r7, #24
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d306:	2b00      	cmp	r3, #0
 800d308:	d018      	beq.n	800d33c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68da      	ldr	r2, [r3, #12]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d312:	441a      	add	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	68da      	ldr	r2, [r3, #12]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	689b      	ldr	r3, [r3, #8]
 800d320:	429a      	cmp	r2, r3
 800d322:	d303      	bcc.n	800d32c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68d9      	ldr	r1, [r3, #12]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d334:	461a      	mov	r2, r3
 800d336:	6838      	ldr	r0, [r7, #0]
 800d338:	f003 f931 	bl	801059e <memcpy>
	}
}
 800d33c:	bf00      	nop
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d34c:	f001 ffaa 	bl	800f2a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d356:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d358:	e011      	b.n	800d37e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d012      	beq.n	800d388 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	3324      	adds	r3, #36	; 0x24
 800d366:	4618      	mov	r0, r3
 800d368:	f000 fe6c 	bl	800e044 <xTaskRemoveFromEventList>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d001      	beq.n	800d376 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d372:	f000 ff43 	bl	800e1fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d376:	7bfb      	ldrb	r3, [r7, #15]
 800d378:	3b01      	subs	r3, #1
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d382:	2b00      	cmp	r3, #0
 800d384:	dce9      	bgt.n	800d35a <prvUnlockQueue+0x16>
 800d386:	e000      	b.n	800d38a <prvUnlockQueue+0x46>
					break;
 800d388:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	22ff      	movs	r2, #255	; 0xff
 800d38e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d392:	f001 ffb7 	bl	800f304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d396:	f001 ff85 	bl	800f2a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3a2:	e011      	b.n	800d3c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	691b      	ldr	r3, [r3, #16]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d012      	beq.n	800d3d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	3310      	adds	r3, #16
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f000 fe47 	bl	800e044 <xTaskRemoveFromEventList>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d001      	beq.n	800d3c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d3bc:	f000 ff1e 	bl	800e1fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d3c0:	7bbb      	ldrb	r3, [r7, #14]
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	dce9      	bgt.n	800d3a4 <prvUnlockQueue+0x60>
 800d3d0:	e000      	b.n	800d3d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d3d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	22ff      	movs	r2, #255	; 0xff
 800d3d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d3dc:	f001 ff92 	bl	800f304 <vPortExitCritical>
}
 800d3e0:	bf00      	nop
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3f0:	f001 ff58 	bl	800f2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d102      	bne.n	800d402 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	60fb      	str	r3, [r7, #12]
 800d400:	e001      	b.n	800d406 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d402:	2300      	movs	r3, #0
 800d404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d406:	f001 ff7d 	bl	800f304 <vPortExitCritical>

	return xReturn;
 800d40a:	68fb      	ldr	r3, [r7, #12]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3710      	adds	r7, #16
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d41c:	f001 ff42 	bl	800f2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d428:	429a      	cmp	r2, r3
 800d42a:	d102      	bne.n	800d432 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d42c:	2301      	movs	r3, #1
 800d42e:	60fb      	str	r3, [r7, #12]
 800d430:	e001      	b.n	800d436 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d432:	2300      	movs	r3, #0
 800d434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d436:	f001 ff65 	bl	800f304 <vPortExitCritical>

	return xReturn;
 800d43a:	68fb      	ldr	r3, [r7, #12]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d44e:	2300      	movs	r3, #0
 800d450:	60fb      	str	r3, [r7, #12]
 800d452:	e014      	b.n	800d47e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d454:	4a0f      	ldr	r2, [pc, #60]	; (800d494 <vQueueAddToRegistry+0x50>)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d10b      	bne.n	800d478 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d460:	490c      	ldr	r1, [pc, #48]	; (800d494 <vQueueAddToRegistry+0x50>)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	683a      	ldr	r2, [r7, #0]
 800d466:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d46a:	4a0a      	ldr	r2, [pc, #40]	; (800d494 <vQueueAddToRegistry+0x50>)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	4413      	add	r3, r2
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d476:	e006      	b.n	800d486 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	3301      	adds	r3, #1
 800d47c:	60fb      	str	r3, [r7, #12]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2b07      	cmp	r3, #7
 800d482:	d9e7      	bls.n	800d454 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d484:	bf00      	nop
 800d486:	bf00      	nop
 800d488:	3714      	adds	r7, #20
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	2000d5d0 	.word	0x2000d5d0

0800d498 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b086      	sub	sp, #24
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4a8:	f001 fefc 	bl	800f2a4 <vPortEnterCritical>
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4b2:	b25b      	sxtb	r3, r3
 800d4b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4b8:	d103      	bne.n	800d4c2 <vQueueWaitForMessageRestricted+0x2a>
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4c8:	b25b      	sxtb	r3, r3
 800d4ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4ce:	d103      	bne.n	800d4d8 <vQueueWaitForMessageRestricted+0x40>
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4d8:	f001 ff14 	bl	800f304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d106      	bne.n	800d4f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	3324      	adds	r3, #36	; 0x24
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	68b9      	ldr	r1, [r7, #8]
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f000 fd7d 	bl	800dfec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d4f2:	6978      	ldr	r0, [r7, #20]
 800d4f4:	f7ff ff26 	bl	800d344 <prvUnlockQueue>
	}
 800d4f8:	bf00      	nop
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d500:	b580      	push	{r7, lr}
 800d502:	b08e      	sub	sp, #56	; 0x38
 800d504:	af04      	add	r7, sp, #16
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
 800d50c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10a      	bne.n	800d52a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	623b      	str	r3, [r7, #32]
}
 800d526:	bf00      	nop
 800d528:	e7fe      	b.n	800d528 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d10a      	bne.n	800d546 <xTaskCreateStatic+0x46>
	__asm volatile
 800d530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	61fb      	str	r3, [r7, #28]
}
 800d542:	bf00      	nop
 800d544:	e7fe      	b.n	800d544 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d546:	23c0      	movs	r3, #192	; 0xc0
 800d548:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	2bc0      	cmp	r3, #192	; 0xc0
 800d54e:	d00a      	beq.n	800d566 <xTaskCreateStatic+0x66>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	61bb      	str	r3, [r7, #24]
}
 800d562:	bf00      	nop
 800d564:	e7fe      	b.n	800d564 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d566:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d01e      	beq.n	800d5ac <xTaskCreateStatic+0xac>
 800d56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d570:	2b00      	cmp	r3, #0
 800d572:	d01b      	beq.n	800d5ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d576:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d57c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d580:	2202      	movs	r2, #2
 800d582:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d586:	2300      	movs	r3, #0
 800d588:	9303      	str	r3, [sp, #12]
 800d58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58c:	9302      	str	r3, [sp, #8]
 800d58e:	f107 0314 	add.w	r3, r7, #20
 800d592:	9301      	str	r3, [sp, #4]
 800d594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	68b9      	ldr	r1, [r7, #8]
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f000 f850 	bl	800d644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5a6:	f000 f8f7 	bl	800d798 <prvAddNewTaskToReadyList>
 800d5aa:	e001      	b.n	800d5b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d5b0:	697b      	ldr	r3, [r7, #20]
	}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3728      	adds	r7, #40	; 0x28
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b08c      	sub	sp, #48	; 0x30
 800d5be:	af04      	add	r7, sp, #16
 800d5c0:	60f8      	str	r0, [r7, #12]
 800d5c2:	60b9      	str	r1, [r7, #8]
 800d5c4:	603b      	str	r3, [r7, #0]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d5ca:	88fb      	ldrh	r3, [r7, #6]
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f001 ff8a 	bl	800f4e8 <pvPortMalloc>
 800d5d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00e      	beq.n	800d5fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d5dc:	20c0      	movs	r0, #192	; 0xc0
 800d5de:	f001 ff83 	bl	800f4e8 <pvPortMalloc>
 800d5e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	697a      	ldr	r2, [r7, #20]
 800d5ee:	631a      	str	r2, [r3, #48]	; 0x30
 800d5f0:	e005      	b.n	800d5fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d5f2:	6978      	ldr	r0, [r7, #20]
 800d5f4:	f002 f844 	bl	800f680 <vPortFree>
 800d5f8:	e001      	b.n	800d5fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d017      	beq.n	800d634 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	2200      	movs	r2, #0
 800d608:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d60c:	88fa      	ldrh	r2, [r7, #6]
 800d60e:	2300      	movs	r3, #0
 800d610:	9303      	str	r3, [sp, #12]
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	9302      	str	r3, [sp, #8]
 800d616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d618:	9301      	str	r3, [sp, #4]
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	9300      	str	r3, [sp, #0]
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	68b9      	ldr	r1, [r7, #8]
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f000 f80e 	bl	800d644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d628:	69f8      	ldr	r0, [r7, #28]
 800d62a:	f000 f8b5 	bl	800d798 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d62e:	2301      	movs	r3, #1
 800d630:	61bb      	str	r3, [r7, #24]
 800d632:	e002      	b.n	800d63a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d638:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d63a:	69bb      	ldr	r3, [r7, #24]
	}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3720      	adds	r7, #32
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b088      	sub	sp, #32
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
 800d650:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d654:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	461a      	mov	r2, r3
 800d65c:	21a5      	movs	r1, #165	; 0xa5
 800d65e:	f002 ffac 	bl	80105ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d66c:	3b01      	subs	r3, #1
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	4413      	add	r3, r2
 800d672:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	f023 0307 	bic.w	r3, r3, #7
 800d67a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	f003 0307 	and.w	r3, r3, #7
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00a      	beq.n	800d69c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	617b      	str	r3, [r7, #20]
}
 800d698:	bf00      	nop
 800d69a:	e7fe      	b.n	800d69a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d01f      	beq.n	800d6e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	61fb      	str	r3, [r7, #28]
 800d6a6:	e012      	b.n	800d6ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6a8:	68ba      	ldr	r2, [r7, #8]
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	7819      	ldrb	r1, [r3, #0]
 800d6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	3334      	adds	r3, #52	; 0x34
 800d6b8:	460a      	mov	r2, r1
 800d6ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d006      	beq.n	800d6d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	61fb      	str	r3, [r7, #28]
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	2b0f      	cmp	r3, #15
 800d6d2:	d9e9      	bls.n	800d6a8 <prvInitialiseNewTask+0x64>
 800d6d4:	e000      	b.n	800d6d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800d6d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d6e0:	e003      	b.n	800d6ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ec:	2b37      	cmp	r3, #55	; 0x37
 800d6ee:	d901      	bls.n	800d6f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d6f0:	2337      	movs	r3, #55	; 0x37
 800d6f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d702:	2200      	movs	r2, #0
 800d704:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d708:	3304      	adds	r3, #4
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7ff f8be 	bl	800c88c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d712:	3318      	adds	r3, #24
 800d714:	4618      	mov	r0, r3
 800d716:	f7ff f8b9 	bl	800c88c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d71e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d722:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d72e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d732:	2200      	movs	r2, #0
 800d734:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	2200      	movs	r2, #0
 800d73a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d740:	2200      	movs	r2, #0
 800d742:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	3358      	adds	r3, #88	; 0x58
 800d74a:	2260      	movs	r2, #96	; 0x60
 800d74c:	2100      	movs	r1, #0
 800d74e:	4618      	mov	r0, r3
 800d750:	f002 ff33 	bl	80105ba <memset>
 800d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d756:	4a0d      	ldr	r2, [pc, #52]	; (800d78c <prvInitialiseNewTask+0x148>)
 800d758:	65da      	str	r2, [r3, #92]	; 0x5c
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	4a0c      	ldr	r2, [pc, #48]	; (800d790 <prvInitialiseNewTask+0x14c>)
 800d75e:	661a      	str	r2, [r3, #96]	; 0x60
 800d760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d762:	4a0c      	ldr	r2, [pc, #48]	; (800d794 <prvInitialiseNewTask+0x150>)
 800d764:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	68f9      	ldr	r1, [r7, #12]
 800d76a:	69b8      	ldr	r0, [r7, #24]
 800d76c:	f001 fc6e 	bl	800f04c <pxPortInitialiseStack>
 800d770:	4602      	mov	r2, r0
 800d772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d774:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d780:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d782:	bf00      	nop
 800d784:	3720      	adds	r7, #32
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	08019748 	.word	0x08019748
 800d790:	08019768 	.word	0x08019768
 800d794:	08019728 	.word	0x08019728

0800d798 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d7a0:	f001 fd80 	bl	800f2a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d7a4:	4b2d      	ldr	r3, [pc, #180]	; (800d85c <prvAddNewTaskToReadyList+0xc4>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	4a2c      	ldr	r2, [pc, #176]	; (800d85c <prvAddNewTaskToReadyList+0xc4>)
 800d7ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d7ae:	4b2c      	ldr	r3, [pc, #176]	; (800d860 <prvAddNewTaskToReadyList+0xc8>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d109      	bne.n	800d7ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7b6:	4a2a      	ldr	r2, [pc, #168]	; (800d860 <prvAddNewTaskToReadyList+0xc8>)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7bc:	4b27      	ldr	r3, [pc, #156]	; (800d85c <prvAddNewTaskToReadyList+0xc4>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d110      	bne.n	800d7e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7c4:	f000 fd3e 	bl	800e244 <prvInitialiseTaskLists>
 800d7c8:	e00d      	b.n	800d7e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7ca:	4b26      	ldr	r3, [pc, #152]	; (800d864 <prvAddNewTaskToReadyList+0xcc>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d109      	bne.n	800d7e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7d2:	4b23      	ldr	r3, [pc, #140]	; (800d860 <prvAddNewTaskToReadyList+0xc8>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d802      	bhi.n	800d7e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d7e0:	4a1f      	ldr	r2, [pc, #124]	; (800d860 <prvAddNewTaskToReadyList+0xc8>)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d7e6:	4b20      	ldr	r3, [pc, #128]	; (800d868 <prvAddNewTaskToReadyList+0xd0>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	4a1e      	ldr	r2, [pc, #120]	; (800d868 <prvAddNewTaskToReadyList+0xd0>)
 800d7ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d7f0:	4b1d      	ldr	r3, [pc, #116]	; (800d868 <prvAddNewTaskToReadyList+0xd0>)
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7fc:	4b1b      	ldr	r3, [pc, #108]	; (800d86c <prvAddNewTaskToReadyList+0xd4>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	429a      	cmp	r2, r3
 800d802:	d903      	bls.n	800d80c <prvAddNewTaskToReadyList+0x74>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d808:	4a18      	ldr	r2, [pc, #96]	; (800d86c <prvAddNewTaskToReadyList+0xd4>)
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d810:	4613      	mov	r3, r2
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	4413      	add	r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	4a15      	ldr	r2, [pc, #84]	; (800d870 <prvAddNewTaskToReadyList+0xd8>)
 800d81a:	441a      	add	r2, r3
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	3304      	adds	r3, #4
 800d820:	4619      	mov	r1, r3
 800d822:	4610      	mov	r0, r2
 800d824:	f7ff f83f 	bl	800c8a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d828:	f001 fd6c 	bl	800f304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d82c:	4b0d      	ldr	r3, [pc, #52]	; (800d864 <prvAddNewTaskToReadyList+0xcc>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00e      	beq.n	800d852 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d834:	4b0a      	ldr	r3, [pc, #40]	; (800d860 <prvAddNewTaskToReadyList+0xc8>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83e:	429a      	cmp	r2, r3
 800d840:	d207      	bcs.n	800d852 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d842:	4b0c      	ldr	r3, [pc, #48]	; (800d874 <prvAddNewTaskToReadyList+0xdc>)
 800d844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d848:	601a      	str	r2, [r3, #0]
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d852:	bf00      	nop
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
 800d85a:	bf00      	nop
 800d85c:	200033f0 	.word	0x200033f0
 800d860:	20002f1c 	.word	0x20002f1c
 800d864:	200033fc 	.word	0x200033fc
 800d868:	2000340c 	.word	0x2000340c
 800d86c:	200033f8 	.word	0x200033f8
 800d870:	20002f20 	.word	0x20002f20
 800d874:	e000ed04 	.word	0xe000ed04

0800d878 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d880:	2300      	movs	r3, #0
 800d882:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d017      	beq.n	800d8ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d88a:	4b13      	ldr	r3, [pc, #76]	; (800d8d8 <vTaskDelay+0x60>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00a      	beq.n	800d8a8 <vTaskDelay+0x30>
	__asm volatile
 800d892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d896:	f383 8811 	msr	BASEPRI, r3
 800d89a:	f3bf 8f6f 	isb	sy
 800d89e:	f3bf 8f4f 	dsb	sy
 800d8a2:	60bb      	str	r3, [r7, #8]
}
 800d8a4:	bf00      	nop
 800d8a6:	e7fe      	b.n	800d8a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d8a8:	f000 f8f4 	bl	800da94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f001 f82a 	bl	800e908 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d8b4:	f000 f8fc 	bl	800dab0 <xTaskResumeAll>
 800d8b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d107      	bne.n	800d8d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d8c0:	4b06      	ldr	r3, [pc, #24]	; (800d8dc <vTaskDelay+0x64>)
 800d8c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8d0:	bf00      	nop
 800d8d2:	3710      	adds	r7, #16
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	20003418 	.word	0x20003418
 800d8dc:	e000ed04 	.word	0xe000ed04

0800d8e0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10a      	bne.n	800d908 <eTaskGetState+0x28>
	__asm volatile
 800d8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f6:	f383 8811 	msr	BASEPRI, r3
 800d8fa:	f3bf 8f6f 	isb	sy
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	60bb      	str	r3, [r7, #8]
}
 800d904:	bf00      	nop
 800d906:	e7fe      	b.n	800d906 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800d908:	4b23      	ldr	r3, [pc, #140]	; (800d998 <eTaskGetState+0xb8>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	69ba      	ldr	r2, [r7, #24]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d102      	bne.n	800d918 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800d912:	2300      	movs	r3, #0
 800d914:	77fb      	strb	r3, [r7, #31]
 800d916:	e03a      	b.n	800d98e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800d918:	f001 fcc4 	bl	800f2a4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800d922:	4b1e      	ldr	r3, [pc, #120]	; (800d99c <eTaskGetState+0xbc>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800d928:	4b1d      	ldr	r3, [pc, #116]	; (800d9a0 <eTaskGetState+0xc0>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800d92e:	f001 fce9 	bl	800f304 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800d932:	697a      	ldr	r2, [r7, #20]
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	429a      	cmp	r2, r3
 800d938:	d003      	beq.n	800d942 <eTaskGetState+0x62>
 800d93a:	697a      	ldr	r2, [r7, #20]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d102      	bne.n	800d948 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800d942:	2302      	movs	r3, #2
 800d944:	77fb      	strb	r3, [r7, #31]
 800d946:	e022      	b.n	800d98e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	4a16      	ldr	r2, [pc, #88]	; (800d9a4 <eTaskGetState+0xc4>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d112      	bne.n	800d976 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10b      	bne.n	800d970 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	2b01      	cmp	r3, #1
 800d962:	d102      	bne.n	800d96a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800d964:	2302      	movs	r3, #2
 800d966:	77fb      	strb	r3, [r7, #31]
 800d968:	e011      	b.n	800d98e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800d96a:	2303      	movs	r3, #3
 800d96c:	77fb      	strb	r3, [r7, #31]
 800d96e:	e00e      	b.n	800d98e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800d970:	2302      	movs	r3, #2
 800d972:	77fb      	strb	r3, [r7, #31]
 800d974:	e00b      	b.n	800d98e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	4a0b      	ldr	r2, [pc, #44]	; (800d9a8 <eTaskGetState+0xc8>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d002      	beq.n	800d984 <eTaskGetState+0xa4>
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d102      	bne.n	800d98a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800d984:	2304      	movs	r3, #4
 800d986:	77fb      	strb	r3, [r7, #31]
 800d988:	e001      	b.n	800d98e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800d98a:	2301      	movs	r3, #1
 800d98c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800d98e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d990:	4618      	mov	r0, r3
 800d992:	3720      	adds	r7, #32
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	20002f1c 	.word	0x20002f1c
 800d99c:	200033a8 	.word	0x200033a8
 800d9a0:	200033ac 	.word	0x200033ac
 800d9a4:	200033dc 	.word	0x200033dc
 800d9a8:	200033c4 	.word	0x200033c4

0800d9ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b08a      	sub	sp, #40	; 0x28
 800d9b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d9ba:	463a      	mov	r2, r7
 800d9bc:	1d39      	adds	r1, r7, #4
 800d9be:	f107 0308 	add.w	r3, r7, #8
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fe ff0e 	bl	800c7e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d9c8:	6839      	ldr	r1, [r7, #0]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	9202      	str	r2, [sp, #8]
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	460a      	mov	r2, r1
 800d9da:	4925      	ldr	r1, [pc, #148]	; (800da70 <vTaskStartScheduler+0xc4>)
 800d9dc:	4825      	ldr	r0, [pc, #148]	; (800da74 <vTaskStartScheduler+0xc8>)
 800d9de:	f7ff fd8f 	bl	800d500 <xTaskCreateStatic>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	4a24      	ldr	r2, [pc, #144]	; (800da78 <vTaskStartScheduler+0xcc>)
 800d9e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d9e8:	4b23      	ldr	r3, [pc, #140]	; (800da78 <vTaskStartScheduler+0xcc>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	617b      	str	r3, [r7, #20]
 800d9f4:	e001      	b.n	800d9fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d102      	bne.n	800da06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800da00:	f000 ffd6 	bl	800e9b0 <xTimerCreateTimerTask>
 800da04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d11e      	bne.n	800da4a <vTaskStartScheduler+0x9e>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	613b      	str	r3, [r7, #16]
}
 800da1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800da20:	4b16      	ldr	r3, [pc, #88]	; (800da7c <vTaskStartScheduler+0xd0>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	3358      	adds	r3, #88	; 0x58
 800da26:	4a16      	ldr	r2, [pc, #88]	; (800da80 <vTaskStartScheduler+0xd4>)
 800da28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da2a:	4b16      	ldr	r3, [pc, #88]	; (800da84 <vTaskStartScheduler+0xd8>)
 800da2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da32:	4b15      	ldr	r3, [pc, #84]	; (800da88 <vTaskStartScheduler+0xdc>)
 800da34:	2201      	movs	r2, #1
 800da36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800da38:	4b14      	ldr	r3, [pc, #80]	; (800da8c <vTaskStartScheduler+0xe0>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800da3e:	4b14      	ldr	r3, [pc, #80]	; (800da90 <vTaskStartScheduler+0xe4>)
 800da40:	2200      	movs	r2, #0
 800da42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800da44:	f001 fb8c 	bl	800f160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da48:	e00e      	b.n	800da68 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da50:	d10a      	bne.n	800da68 <vTaskStartScheduler+0xbc>
	__asm volatile
 800da52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da56:	f383 8811 	msr	BASEPRI, r3
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	60fb      	str	r3, [r7, #12]
}
 800da64:	bf00      	nop
 800da66:	e7fe      	b.n	800da66 <vTaskStartScheduler+0xba>
}
 800da68:	bf00      	nop
 800da6a:	3718      	adds	r7, #24
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	08013434 	.word	0x08013434
 800da74:	0800e215 	.word	0x0800e215
 800da78:	20003414 	.word	0x20003414
 800da7c:	20002f1c 	.word	0x20002f1c
 800da80:	200001b0 	.word	0x200001b0
 800da84:	20003410 	.word	0x20003410
 800da88:	200033fc 	.word	0x200033fc
 800da8c:	200033f4 	.word	0x200033f4
 800da90:	2000cd30 	.word	0x2000cd30

0800da94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da94:	b480      	push	{r7}
 800da96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da98:	4b04      	ldr	r3, [pc, #16]	; (800daac <vTaskSuspendAll+0x18>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3301      	adds	r3, #1
 800da9e:	4a03      	ldr	r2, [pc, #12]	; (800daac <vTaskSuspendAll+0x18>)
 800daa0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800daa2:	bf00      	nop
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr
 800daac:	20003418 	.word	0x20003418

0800dab0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800daba:	2300      	movs	r3, #0
 800dabc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dabe:	4b42      	ldr	r3, [pc, #264]	; (800dbc8 <xTaskResumeAll+0x118>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10a      	bne.n	800dadc <xTaskResumeAll+0x2c>
	__asm volatile
 800dac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daca:	f383 8811 	msr	BASEPRI, r3
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	f3bf 8f4f 	dsb	sy
 800dad6:	603b      	str	r3, [r7, #0]
}
 800dad8:	bf00      	nop
 800dada:	e7fe      	b.n	800dada <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dadc:	f001 fbe2 	bl	800f2a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dae0:	4b39      	ldr	r3, [pc, #228]	; (800dbc8 <xTaskResumeAll+0x118>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	3b01      	subs	r3, #1
 800dae6:	4a38      	ldr	r2, [pc, #224]	; (800dbc8 <xTaskResumeAll+0x118>)
 800dae8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daea:	4b37      	ldr	r3, [pc, #220]	; (800dbc8 <xTaskResumeAll+0x118>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d162      	bne.n	800dbb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800daf2:	4b36      	ldr	r3, [pc, #216]	; (800dbcc <xTaskResumeAll+0x11c>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d05e      	beq.n	800dbb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dafa:	e02f      	b.n	800db5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dafc:	4b34      	ldr	r3, [pc, #208]	; (800dbd0 <xTaskResumeAll+0x120>)
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	3318      	adds	r3, #24
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe ff29 	bl	800c960 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	3304      	adds	r3, #4
 800db12:	4618      	mov	r0, r3
 800db14:	f7fe ff24 	bl	800c960 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db1c:	4b2d      	ldr	r3, [pc, #180]	; (800dbd4 <xTaskResumeAll+0x124>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	429a      	cmp	r2, r3
 800db22:	d903      	bls.n	800db2c <xTaskResumeAll+0x7c>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db28:	4a2a      	ldr	r2, [pc, #168]	; (800dbd4 <xTaskResumeAll+0x124>)
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db30:	4613      	mov	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	4413      	add	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4a27      	ldr	r2, [pc, #156]	; (800dbd8 <xTaskResumeAll+0x128>)
 800db3a:	441a      	add	r2, r3
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	3304      	adds	r3, #4
 800db40:	4619      	mov	r1, r3
 800db42:	4610      	mov	r0, r2
 800db44:	f7fe feaf 	bl	800c8a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db4c:	4b23      	ldr	r3, [pc, #140]	; (800dbdc <xTaskResumeAll+0x12c>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db52:	429a      	cmp	r2, r3
 800db54:	d302      	bcc.n	800db5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800db56:	4b22      	ldr	r3, [pc, #136]	; (800dbe0 <xTaskResumeAll+0x130>)
 800db58:	2201      	movs	r2, #1
 800db5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db5c:	4b1c      	ldr	r3, [pc, #112]	; (800dbd0 <xTaskResumeAll+0x120>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1cb      	bne.n	800dafc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d001      	beq.n	800db6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db6a:	f000 fce1 	bl	800e530 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db6e:	4b1d      	ldr	r3, [pc, #116]	; (800dbe4 <xTaskResumeAll+0x134>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d010      	beq.n	800db9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db7a:	f000 f8d7 	bl	800dd2c <xTaskIncrementTick>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800db84:	4b16      	ldr	r3, [pc, #88]	; (800dbe0 <xTaskResumeAll+0x130>)
 800db86:	2201      	movs	r2, #1
 800db88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	3b01      	subs	r3, #1
 800db8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1f1      	bne.n	800db7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800db96:	4b13      	ldr	r3, [pc, #76]	; (800dbe4 <xTaskResumeAll+0x134>)
 800db98:	2200      	movs	r2, #0
 800db9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db9c:	4b10      	ldr	r3, [pc, #64]	; (800dbe0 <xTaskResumeAll+0x130>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d009      	beq.n	800dbb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dba4:	2301      	movs	r3, #1
 800dba6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dba8:	4b0f      	ldr	r3, [pc, #60]	; (800dbe8 <xTaskResumeAll+0x138>)
 800dbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbae:	601a      	str	r2, [r3, #0]
 800dbb0:	f3bf 8f4f 	dsb	sy
 800dbb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dbb8:	f001 fba4 	bl	800f304 <vPortExitCritical>

	return xAlreadyYielded;
 800dbbc:	68bb      	ldr	r3, [r7, #8]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20003418 	.word	0x20003418
 800dbcc:	200033f0 	.word	0x200033f0
 800dbd0:	200033b0 	.word	0x200033b0
 800dbd4:	200033f8 	.word	0x200033f8
 800dbd8:	20002f20 	.word	0x20002f20
 800dbdc:	20002f1c 	.word	0x20002f1c
 800dbe0:	20003404 	.word	0x20003404
 800dbe4:	20003400 	.word	0x20003400
 800dbe8:	e000ed04 	.word	0xe000ed04

0800dbec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dbf2:	4b05      	ldr	r3, [pc, #20]	; (800dc08 <xTaskGetTickCount+0x1c>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dbf8:	687b      	ldr	r3, [r7, #4]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	370c      	adds	r7, #12
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	200033f4 	.word	0x200033f4

0800dc0c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	617b      	str	r3, [r7, #20]
 800dc1c:	2338      	movs	r3, #56	; 0x38
 800dc1e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800dc20:	f7ff ff38 	bl	800da94 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800dc24:	4b3a      	ldr	r3, [pc, #232]	; (800dd10 <uxTaskGetSystemState+0x104>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d369      	bcc.n	800dd02 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	3b01      	subs	r3, #1
 800dc32:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800dc34:	697a      	ldr	r2, [r7, #20]
 800dc36:	4613      	mov	r3, r2
 800dc38:	00db      	lsls	r3, r3, #3
 800dc3a:	4413      	add	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	461a      	mov	r2, r3
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	1898      	adds	r0, r3, r2
 800dc44:	693a      	ldr	r2, [r7, #16]
 800dc46:	4613      	mov	r3, r2
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	4413      	add	r3, r2
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	4a31      	ldr	r2, [pc, #196]	; (800dd14 <uxTaskGetSystemState+0x108>)
 800dc50:	4413      	add	r3, r2
 800dc52:	2201      	movs	r2, #1
 800dc54:	4619      	mov	r1, r3
 800dc56:	f000 fbc9 	bl	800e3ec <prvListTasksWithinSingleList>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	4413      	add	r3, r2
 800dc60:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1e2      	bne.n	800dc2e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800dc68:	697a      	ldr	r2, [r7, #20]
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	00db      	lsls	r3, r3, #3
 800dc6e:	4413      	add	r3, r2
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	461a      	mov	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	4413      	add	r3, r2
 800dc78:	4a27      	ldr	r2, [pc, #156]	; (800dd18 <uxTaskGetSystemState+0x10c>)
 800dc7a:	6811      	ldr	r1, [r2, #0]
 800dc7c:	2202      	movs	r2, #2
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f000 fbb4 	bl	800e3ec <prvListTasksWithinSingleList>
 800dc84:	4602      	mov	r2, r0
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	4413      	add	r3, r2
 800dc8a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800dc8c:	697a      	ldr	r2, [r7, #20]
 800dc8e:	4613      	mov	r3, r2
 800dc90:	00db      	lsls	r3, r3, #3
 800dc92:	4413      	add	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	461a      	mov	r2, r3
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	4a1f      	ldr	r2, [pc, #124]	; (800dd1c <uxTaskGetSystemState+0x110>)
 800dc9e:	6811      	ldr	r1, [r2, #0]
 800dca0:	2202      	movs	r2, #2
 800dca2:	4618      	mov	r0, r3
 800dca4:	f000 fba2 	bl	800e3ec <prvListTasksWithinSingleList>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	4413      	add	r3, r2
 800dcae:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	00db      	lsls	r3, r3, #3
 800dcb6:	4413      	add	r3, r2
 800dcb8:	009b      	lsls	r3, r3, #2
 800dcba:	461a      	mov	r2, r3
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	2204      	movs	r2, #4
 800dcc2:	4917      	ldr	r1, [pc, #92]	; (800dd20 <uxTaskGetSystemState+0x114>)
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f000 fb91 	bl	800e3ec <prvListTasksWithinSingleList>
 800dcca:	4602      	mov	r2, r0
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	4413      	add	r3, r2
 800dcd0:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800dcd2:	697a      	ldr	r2, [r7, #20]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	4413      	add	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	461a      	mov	r2, r3
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	4413      	add	r3, r2
 800dce2:	2203      	movs	r2, #3
 800dce4:	490f      	ldr	r1, [pc, #60]	; (800dd24 <uxTaskGetSystemState+0x118>)
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 fb80 	bl	800e3ec <prvListTasksWithinSingleList>
 800dcec:	4602      	mov	r2, r0
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d003      	beq.n	800dd02 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800dcfa:	4b0b      	ldr	r3, [pc, #44]	; (800dd28 <uxTaskGetSystemState+0x11c>)
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800dd02:	f7ff fed5 	bl	800dab0 <xTaskResumeAll>

		return uxTask;
 800dd06:	697b      	ldr	r3, [r7, #20]
	}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	200033f0 	.word	0x200033f0
 800dd14:	20002f20 	.word	0x20002f20
 800dd18:	200033a8 	.word	0x200033a8
 800dd1c:	200033ac 	.word	0x200033ac
 800dd20:	200033c4 	.word	0x200033c4
 800dd24:	200033dc 	.word	0x200033dc
 800dd28:	2000cd30 	.word	0x2000cd30

0800dd2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b086      	sub	sp, #24
 800dd30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd32:	2300      	movs	r3, #0
 800dd34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd36:	4b4f      	ldr	r3, [pc, #316]	; (800de74 <xTaskIncrementTick+0x148>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	f040 808f 	bne.w	800de5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd40:	4b4d      	ldr	r3, [pc, #308]	; (800de78 <xTaskIncrementTick+0x14c>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	3301      	adds	r3, #1
 800dd46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd48:	4a4b      	ldr	r2, [pc, #300]	; (800de78 <xTaskIncrementTick+0x14c>)
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d120      	bne.n	800dd96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd54:	4b49      	ldr	r3, [pc, #292]	; (800de7c <xTaskIncrementTick+0x150>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00a      	beq.n	800dd74 <xTaskIncrementTick+0x48>
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	603b      	str	r3, [r7, #0]
}
 800dd70:	bf00      	nop
 800dd72:	e7fe      	b.n	800dd72 <xTaskIncrementTick+0x46>
 800dd74:	4b41      	ldr	r3, [pc, #260]	; (800de7c <xTaskIncrementTick+0x150>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	60fb      	str	r3, [r7, #12]
 800dd7a:	4b41      	ldr	r3, [pc, #260]	; (800de80 <xTaskIncrementTick+0x154>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4a3f      	ldr	r2, [pc, #252]	; (800de7c <xTaskIncrementTick+0x150>)
 800dd80:	6013      	str	r3, [r2, #0]
 800dd82:	4a3f      	ldr	r2, [pc, #252]	; (800de80 <xTaskIncrementTick+0x154>)
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6013      	str	r3, [r2, #0]
 800dd88:	4b3e      	ldr	r3, [pc, #248]	; (800de84 <xTaskIncrementTick+0x158>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	4a3d      	ldr	r2, [pc, #244]	; (800de84 <xTaskIncrementTick+0x158>)
 800dd90:	6013      	str	r3, [r2, #0]
 800dd92:	f000 fbcd 	bl	800e530 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd96:	4b3c      	ldr	r3, [pc, #240]	; (800de88 <xTaskIncrementTick+0x15c>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	693a      	ldr	r2, [r7, #16]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d349      	bcc.n	800de34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dda0:	4b36      	ldr	r3, [pc, #216]	; (800de7c <xTaskIncrementTick+0x150>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d104      	bne.n	800ddb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddaa:	4b37      	ldr	r3, [pc, #220]	; (800de88 <xTaskIncrementTick+0x15c>)
 800ddac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddb0:	601a      	str	r2, [r3, #0]
					break;
 800ddb2:	e03f      	b.n	800de34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddb4:	4b31      	ldr	r3, [pc, #196]	; (800de7c <xTaskIncrementTick+0x150>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d203      	bcs.n	800ddd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ddcc:	4a2e      	ldr	r2, [pc, #184]	; (800de88 <xTaskIncrementTick+0x15c>)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ddd2:	e02f      	b.n	800de34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	3304      	adds	r3, #4
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7fe fdc1 	bl	800c960 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d004      	beq.n	800ddf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	3318      	adds	r3, #24
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fe fdb8 	bl	800c960 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf4:	4b25      	ldr	r3, [pc, #148]	; (800de8c <xTaskIncrementTick+0x160>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d903      	bls.n	800de04 <xTaskIncrementTick+0xd8>
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de00:	4a22      	ldr	r2, [pc, #136]	; (800de8c <xTaskIncrementTick+0x160>)
 800de02:	6013      	str	r3, [r2, #0]
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de08:	4613      	mov	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4413      	add	r3, r2
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	4a1f      	ldr	r2, [pc, #124]	; (800de90 <xTaskIncrementTick+0x164>)
 800de12:	441a      	add	r2, r3
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	3304      	adds	r3, #4
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f7fe fd43 	bl	800c8a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de24:	4b1b      	ldr	r3, [pc, #108]	; (800de94 <xTaskIncrementTick+0x168>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d3b8      	bcc.n	800dda0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800de2e:	2301      	movs	r3, #1
 800de30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de32:	e7b5      	b.n	800dda0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de34:	4b17      	ldr	r3, [pc, #92]	; (800de94 <xTaskIncrementTick+0x168>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de3a:	4915      	ldr	r1, [pc, #84]	; (800de90 <xTaskIncrementTick+0x164>)
 800de3c:	4613      	mov	r3, r2
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4413      	add	r3, r2
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	440b      	add	r3, r1
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d901      	bls.n	800de50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800de4c:	2301      	movs	r3, #1
 800de4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de50:	4b11      	ldr	r3, [pc, #68]	; (800de98 <xTaskIncrementTick+0x16c>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d007      	beq.n	800de68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800de58:	2301      	movs	r3, #1
 800de5a:	617b      	str	r3, [r7, #20]
 800de5c:	e004      	b.n	800de68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800de5e:	4b0f      	ldr	r3, [pc, #60]	; (800de9c <xTaskIncrementTick+0x170>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	3301      	adds	r3, #1
 800de64:	4a0d      	ldr	r2, [pc, #52]	; (800de9c <xTaskIncrementTick+0x170>)
 800de66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800de68:	697b      	ldr	r3, [r7, #20]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	20003418 	.word	0x20003418
 800de78:	200033f4 	.word	0x200033f4
 800de7c:	200033a8 	.word	0x200033a8
 800de80:	200033ac 	.word	0x200033ac
 800de84:	20003408 	.word	0x20003408
 800de88:	20003410 	.word	0x20003410
 800de8c:	200033f8 	.word	0x200033f8
 800de90:	20002f20 	.word	0x20002f20
 800de94:	20002f1c 	.word	0x20002f1c
 800de98:	20003404 	.word	0x20003404
 800de9c:	20003400 	.word	0x20003400

0800dea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dea0:	b480      	push	{r7}
 800dea2:	b085      	sub	sp, #20
 800dea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dea6:	4b36      	ldr	r3, [pc, #216]	; (800df80 <vTaskSwitchContext+0xe0>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d003      	beq.n	800deb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800deae:	4b35      	ldr	r3, [pc, #212]	; (800df84 <vTaskSwitchContext+0xe4>)
 800deb0:	2201      	movs	r2, #1
 800deb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800deb4:	e05e      	b.n	800df74 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800deb6:	4b33      	ldr	r3, [pc, #204]	; (800df84 <vTaskSwitchContext+0xe4>)
 800deb8:	2200      	movs	r2, #0
 800deba:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800debc:	4b32      	ldr	r3, [pc, #200]	; (800df88 <vTaskSwitchContext+0xe8>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a32      	ldr	r2, [pc, #200]	; (800df8c <vTaskSwitchContext+0xec>)
 800dec2:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800dec4:	4b31      	ldr	r3, [pc, #196]	; (800df8c <vTaskSwitchContext+0xec>)
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	4b31      	ldr	r3, [pc, #196]	; (800df90 <vTaskSwitchContext+0xf0>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	429a      	cmp	r2, r3
 800dece:	d909      	bls.n	800dee4 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ded0:	4b30      	ldr	r3, [pc, #192]	; (800df94 <vTaskSwitchContext+0xf4>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ded6:	4a2d      	ldr	r2, [pc, #180]	; (800df8c <vTaskSwitchContext+0xec>)
 800ded8:	6810      	ldr	r0, [r2, #0]
 800deda:	4a2d      	ldr	r2, [pc, #180]	; (800df90 <vTaskSwitchContext+0xf0>)
 800dedc:	6812      	ldr	r2, [r2, #0]
 800dede:	1a82      	subs	r2, r0, r2
 800dee0:	440a      	add	r2, r1
 800dee2:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800dee4:	4b29      	ldr	r3, [pc, #164]	; (800df8c <vTaskSwitchContext+0xec>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a29      	ldr	r2, [pc, #164]	; (800df90 <vTaskSwitchContext+0xf0>)
 800deea:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deec:	4b2a      	ldr	r3, [pc, #168]	; (800df98 <vTaskSwitchContext+0xf8>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	60fb      	str	r3, [r7, #12]
 800def2:	e010      	b.n	800df16 <vTaskSwitchContext+0x76>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10a      	bne.n	800df10 <vTaskSwitchContext+0x70>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	607b      	str	r3, [r7, #4]
}
 800df0c:	bf00      	nop
 800df0e:	e7fe      	b.n	800df0e <vTaskSwitchContext+0x6e>
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	3b01      	subs	r3, #1
 800df14:	60fb      	str	r3, [r7, #12]
 800df16:	4921      	ldr	r1, [pc, #132]	; (800df9c <vTaskSwitchContext+0xfc>)
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	4613      	mov	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4413      	add	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	440b      	add	r3, r1
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d0e4      	beq.n	800def4 <vTaskSwitchContext+0x54>
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	4613      	mov	r3, r2
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4413      	add	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4a19      	ldr	r2, [pc, #100]	; (800df9c <vTaskSwitchContext+0xfc>)
 800df36:	4413      	add	r3, r2
 800df38:	60bb      	str	r3, [r7, #8]
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	685a      	ldr	r2, [r3, #4]
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	605a      	str	r2, [r3, #4]
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	685a      	ldr	r2, [r3, #4]
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	3308      	adds	r3, #8
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d104      	bne.n	800df5a <vTaskSwitchContext+0xba>
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	685a      	ldr	r2, [r3, #4]
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	605a      	str	r2, [r3, #4]
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	4a0c      	ldr	r2, [pc, #48]	; (800df94 <vTaskSwitchContext+0xf4>)
 800df62:	6013      	str	r3, [r2, #0]
 800df64:	4a0c      	ldr	r2, [pc, #48]	; (800df98 <vTaskSwitchContext+0xf8>)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df6a:	4b0a      	ldr	r3, [pc, #40]	; (800df94 <vTaskSwitchContext+0xf4>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	3358      	adds	r3, #88	; 0x58
 800df70:	4a0b      	ldr	r2, [pc, #44]	; (800dfa0 <vTaskSwitchContext+0x100>)
 800df72:	6013      	str	r3, [r2, #0]
}
 800df74:	bf00      	nop
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr
 800df80:	20003418 	.word	0x20003418
 800df84:	20003404 	.word	0x20003404
 800df88:	2000cd30 	.word	0x2000cd30
 800df8c:	20003420 	.word	0x20003420
 800df90:	2000341c 	.word	0x2000341c
 800df94:	20002f1c 	.word	0x20002f1c
 800df98:	200033f8 	.word	0x200033f8
 800df9c:	20002f20 	.word	0x20002f20
 800dfa0:	200001b0 	.word	0x200001b0

0800dfa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10a      	bne.n	800dfca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb8:	f383 8811 	msr	BASEPRI, r3
 800dfbc:	f3bf 8f6f 	isb	sy
 800dfc0:	f3bf 8f4f 	dsb	sy
 800dfc4:	60fb      	str	r3, [r7, #12]
}
 800dfc6:	bf00      	nop
 800dfc8:	e7fe      	b.n	800dfc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfca:	4b07      	ldr	r3, [pc, #28]	; (800dfe8 <vTaskPlaceOnEventList+0x44>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	3318      	adds	r3, #24
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7fe fc8b 	bl	800c8ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfd8:	2101      	movs	r1, #1
 800dfda:	6838      	ldr	r0, [r7, #0]
 800dfdc:	f000 fc94 	bl	800e908 <prvAddCurrentTaskToDelayedList>
}
 800dfe0:	bf00      	nop
 800dfe2:	3710      	adds	r7, #16
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	20002f1c 	.word	0x20002f1c

0800dfec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d10a      	bne.n	800e014 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e002:	f383 8811 	msr	BASEPRI, r3
 800e006:	f3bf 8f6f 	isb	sy
 800e00a:	f3bf 8f4f 	dsb	sy
 800e00e:	617b      	str	r3, [r7, #20]
}
 800e010:	bf00      	nop
 800e012:	e7fe      	b.n	800e012 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e014:	4b0a      	ldr	r3, [pc, #40]	; (800e040 <vTaskPlaceOnEventListRestricted+0x54>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	3318      	adds	r3, #24
 800e01a:	4619      	mov	r1, r3
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f7fe fc42 	bl	800c8a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e02c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	68b8      	ldr	r0, [r7, #8]
 800e032:	f000 fc69 	bl	800e908 <prvAddCurrentTaskToDelayedList>
	}
 800e036:	bf00      	nop
 800e038:	3718      	adds	r7, #24
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	20002f1c 	.word	0x20002f1c

0800e044 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b086      	sub	sp, #24
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68db      	ldr	r3, [r3, #12]
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10a      	bne.n	800e070 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	60fb      	str	r3, [r7, #12]
}
 800e06c:	bf00      	nop
 800e06e:	e7fe      	b.n	800e06e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	3318      	adds	r3, #24
 800e074:	4618      	mov	r0, r3
 800e076:	f7fe fc73 	bl	800c960 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e07a:	4b1e      	ldr	r3, [pc, #120]	; (800e0f4 <xTaskRemoveFromEventList+0xb0>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d11d      	bne.n	800e0be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	3304      	adds	r3, #4
 800e086:	4618      	mov	r0, r3
 800e088:	f7fe fc6a 	bl	800c960 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e090:	4b19      	ldr	r3, [pc, #100]	; (800e0f8 <xTaskRemoveFromEventList+0xb4>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	429a      	cmp	r2, r3
 800e096:	d903      	bls.n	800e0a0 <xTaskRemoveFromEventList+0x5c>
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e09c:	4a16      	ldr	r2, [pc, #88]	; (800e0f8 <xTaskRemoveFromEventList+0xb4>)
 800e09e:	6013      	str	r3, [r2, #0]
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	4413      	add	r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4a13      	ldr	r2, [pc, #76]	; (800e0fc <xTaskRemoveFromEventList+0xb8>)
 800e0ae:	441a      	add	r2, r3
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	4610      	mov	r0, r2
 800e0b8:	f7fe fbf5 	bl	800c8a6 <vListInsertEnd>
 800e0bc:	e005      	b.n	800e0ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	3318      	adds	r3, #24
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	480e      	ldr	r0, [pc, #56]	; (800e100 <xTaskRemoveFromEventList+0xbc>)
 800e0c6:	f7fe fbee 	bl	800c8a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ce:	4b0d      	ldr	r3, [pc, #52]	; (800e104 <xTaskRemoveFromEventList+0xc0>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d905      	bls.n	800e0e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e0dc:	4b0a      	ldr	r3, [pc, #40]	; (800e108 <xTaskRemoveFromEventList+0xc4>)
 800e0de:	2201      	movs	r2, #1
 800e0e0:	601a      	str	r2, [r3, #0]
 800e0e2:	e001      	b.n	800e0e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e0e8:	697b      	ldr	r3, [r7, #20]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3718      	adds	r7, #24
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	20003418 	.word	0x20003418
 800e0f8:	200033f8 	.word	0x200033f8
 800e0fc:	20002f20 	.word	0x20002f20
 800e100:	200033b0 	.word	0x200033b0
 800e104:	20002f1c 	.word	0x20002f1c
 800e108:	20003404 	.word	0x20003404

0800e10c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e114:	4b06      	ldr	r3, [pc, #24]	; (800e130 <vTaskInternalSetTimeOutState+0x24>)
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e11c:	4b05      	ldr	r3, [pc, #20]	; (800e134 <vTaskInternalSetTimeOutState+0x28>)
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	605a      	str	r2, [r3, #4]
}
 800e124:	bf00      	nop
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr
 800e130:	20003408 	.word	0x20003408
 800e134:	200033f4 	.word	0x200033f4

0800e138 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10a      	bne.n	800e15e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14c:	f383 8811 	msr	BASEPRI, r3
 800e150:	f3bf 8f6f 	isb	sy
 800e154:	f3bf 8f4f 	dsb	sy
 800e158:	613b      	str	r3, [r7, #16]
}
 800e15a:	bf00      	nop
 800e15c:	e7fe      	b.n	800e15c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10a      	bne.n	800e17a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e168:	f383 8811 	msr	BASEPRI, r3
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	f3bf 8f4f 	dsb	sy
 800e174:	60fb      	str	r3, [r7, #12]
}
 800e176:	bf00      	nop
 800e178:	e7fe      	b.n	800e178 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e17a:	f001 f893 	bl	800f2a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e17e:	4b1d      	ldr	r3, [pc, #116]	; (800e1f4 <xTaskCheckForTimeOut+0xbc>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	69ba      	ldr	r2, [r7, #24]
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e196:	d102      	bne.n	800e19e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e198:	2300      	movs	r3, #0
 800e19a:	61fb      	str	r3, [r7, #28]
 800e19c:	e023      	b.n	800e1e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	4b15      	ldr	r3, [pc, #84]	; (800e1f8 <xTaskCheckForTimeOut+0xc0>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d007      	beq.n	800e1ba <xTaskCheckForTimeOut+0x82>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	69ba      	ldr	r2, [r7, #24]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d302      	bcc.n	800e1ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	61fb      	str	r3, [r7, #28]
 800e1b8:	e015      	b.n	800e1e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d20b      	bcs.n	800e1dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	1ad2      	subs	r2, r2, r3
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7ff ff9b 	bl	800e10c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	61fb      	str	r3, [r7, #28]
 800e1da:	e004      	b.n	800e1e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1e6:	f001 f88d 	bl	800f304 <vPortExitCritical>

	return xReturn;
 800e1ea:	69fb      	ldr	r3, [r7, #28]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3720      	adds	r7, #32
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	200033f4 	.word	0x200033f4
 800e1f8:	20003408 	.word	0x20003408

0800e1fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e200:	4b03      	ldr	r3, [pc, #12]	; (800e210 <vTaskMissedYield+0x14>)
 800e202:	2201      	movs	r2, #1
 800e204:	601a      	str	r2, [r3, #0]
}
 800e206:	bf00      	nop
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr
 800e210:	20003404 	.word	0x20003404

0800e214 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e21c:	f000 f852 	bl	800e2c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e220:	4b06      	ldr	r3, [pc, #24]	; (800e23c <prvIdleTask+0x28>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d9f9      	bls.n	800e21c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e228:	4b05      	ldr	r3, [pc, #20]	; (800e240 <prvIdleTask+0x2c>)
 800e22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e22e:	601a      	str	r2, [r3, #0]
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e238:	e7f0      	b.n	800e21c <prvIdleTask+0x8>
 800e23a:	bf00      	nop
 800e23c:	20002f20 	.word	0x20002f20
 800e240:	e000ed04 	.word	0xe000ed04

0800e244 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e24a:	2300      	movs	r3, #0
 800e24c:	607b      	str	r3, [r7, #4]
 800e24e:	e00c      	b.n	800e26a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	4613      	mov	r3, r2
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	4413      	add	r3, r2
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	4a12      	ldr	r2, [pc, #72]	; (800e2a4 <prvInitialiseTaskLists+0x60>)
 800e25c:	4413      	add	r3, r2
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fe faf4 	bl	800c84c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	3301      	adds	r3, #1
 800e268:	607b      	str	r3, [r7, #4]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b37      	cmp	r3, #55	; 0x37
 800e26e:	d9ef      	bls.n	800e250 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e270:	480d      	ldr	r0, [pc, #52]	; (800e2a8 <prvInitialiseTaskLists+0x64>)
 800e272:	f7fe faeb 	bl	800c84c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e276:	480d      	ldr	r0, [pc, #52]	; (800e2ac <prvInitialiseTaskLists+0x68>)
 800e278:	f7fe fae8 	bl	800c84c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e27c:	480c      	ldr	r0, [pc, #48]	; (800e2b0 <prvInitialiseTaskLists+0x6c>)
 800e27e:	f7fe fae5 	bl	800c84c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e282:	480c      	ldr	r0, [pc, #48]	; (800e2b4 <prvInitialiseTaskLists+0x70>)
 800e284:	f7fe fae2 	bl	800c84c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e288:	480b      	ldr	r0, [pc, #44]	; (800e2b8 <prvInitialiseTaskLists+0x74>)
 800e28a:	f7fe fadf 	bl	800c84c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e28e:	4b0b      	ldr	r3, [pc, #44]	; (800e2bc <prvInitialiseTaskLists+0x78>)
 800e290:	4a05      	ldr	r2, [pc, #20]	; (800e2a8 <prvInitialiseTaskLists+0x64>)
 800e292:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e294:	4b0a      	ldr	r3, [pc, #40]	; (800e2c0 <prvInitialiseTaskLists+0x7c>)
 800e296:	4a05      	ldr	r2, [pc, #20]	; (800e2ac <prvInitialiseTaskLists+0x68>)
 800e298:	601a      	str	r2, [r3, #0]
}
 800e29a:	bf00      	nop
 800e29c:	3708      	adds	r7, #8
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	20002f20 	.word	0x20002f20
 800e2a8:	20003380 	.word	0x20003380
 800e2ac:	20003394 	.word	0x20003394
 800e2b0:	200033b0 	.word	0x200033b0
 800e2b4:	200033c4 	.word	0x200033c4
 800e2b8:	200033dc 	.word	0x200033dc
 800e2bc:	200033a8 	.word	0x200033a8
 800e2c0:	200033ac 	.word	0x200033ac

0800e2c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2ca:	e019      	b.n	800e300 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2cc:	f000 ffea 	bl	800f2a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2d0:	4b10      	ldr	r3, [pc, #64]	; (800e314 <prvCheckTasksWaitingTermination+0x50>)
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	3304      	adds	r3, #4
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7fe fb3f 	bl	800c960 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2e2:	4b0d      	ldr	r3, [pc, #52]	; (800e318 <prvCheckTasksWaitingTermination+0x54>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	4a0b      	ldr	r2, [pc, #44]	; (800e318 <prvCheckTasksWaitingTermination+0x54>)
 800e2ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2ec:	4b0b      	ldr	r3, [pc, #44]	; (800e31c <prvCheckTasksWaitingTermination+0x58>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	4a0a      	ldr	r2, [pc, #40]	; (800e31c <prvCheckTasksWaitingTermination+0x58>)
 800e2f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2f6:	f001 f805 	bl	800f304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 f8e4 	bl	800e4c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e300:	4b06      	ldr	r3, [pc, #24]	; (800e31c <prvCheckTasksWaitingTermination+0x58>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1e1      	bne.n	800e2cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e308:	bf00      	nop
 800e30a:	bf00      	nop
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	200033c4 	.word	0x200033c4
 800e318:	200033f0 	.word	0x200033f0
 800e31c:	200033d8 	.word	0x200033d8

0800e320 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800e320:	b580      	push	{r7, lr}
 800e322:	b086      	sub	sp, #24
 800e324:	af00      	add	r7, sp, #0
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	607a      	str	r2, [r7, #4]
 800e32c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d102      	bne.n	800e33a <vTaskGetInfo+0x1a>
 800e334:	4b2c      	ldr	r3, [pc, #176]	; (800e3e8 <vTaskGetInfo+0xc8>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	e000      	b.n	800e33c <vTaskGetInfo+0x1c>
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	697a      	ldr	r2, [r7, #20]
 800e342:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800e376:	78fb      	ldrb	r3, [r7, #3]
 800e378:	2b05      	cmp	r3, #5
 800e37a:	d01a      	beq.n	800e3b2 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800e37c:	4b1a      	ldr	r3, [pc, #104]	; (800e3e8 <vTaskGetInfo+0xc8>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	697a      	ldr	r2, [r7, #20]
 800e382:	429a      	cmp	r2, r3
 800e384:	d103      	bne.n	800e38e <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	2200      	movs	r2, #0
 800e38a:	731a      	strb	r2, [r3, #12]
 800e38c:	e018      	b.n	800e3c0 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	78fa      	ldrb	r2, [r7, #3]
 800e392:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800e394:	78fb      	ldrb	r3, [r7, #3]
 800e396:	2b03      	cmp	r3, #3
 800e398:	d112      	bne.n	800e3c0 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800e39a:	f7ff fb7b 	bl	800da94 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d002      	beq.n	800e3ac <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2202      	movs	r2, #2
 800e3aa:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800e3ac:	f7ff fb80 	bl	800dab0 <xTaskResumeAll>
 800e3b0:	e006      	b.n	800e3c0 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800e3b2:	6978      	ldr	r0, [r7, #20]
 800e3b4:	f7ff fa94 	bl	800d8e0 <eTaskGetState>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d009      	beq.n	800e3da <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f000 f860 	bl	800e490 <prvTaskCheckFreeStackSpace>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800e3d8:	e002      	b.n	800e3e0 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	841a      	strh	r2, [r3, #32]
	}
 800e3e0:	bf00      	nop
 800e3e2:	3718      	adds	r7, #24
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	20002f1c 	.word	0x20002f1c

0800e3ec <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b08a      	sub	sp, #40	; 0x28
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	4613      	mov	r3, r2
 800e3f8:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d03f      	beq.n	800e486 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	623b      	str	r3, [r7, #32]
 800e40a:	6a3b      	ldr	r3, [r7, #32]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	685a      	ldr	r2, [r3, #4]
 800e410:	6a3b      	ldr	r3, [r7, #32]
 800e412:	605a      	str	r2, [r3, #4]
 800e414:	6a3b      	ldr	r3, [r7, #32]
 800e416:	685a      	ldr	r2, [r3, #4]
 800e418:	6a3b      	ldr	r3, [r7, #32]
 800e41a:	3308      	adds	r3, #8
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d104      	bne.n	800e42a <prvListTasksWithinSingleList+0x3e>
 800e420:	6a3b      	ldr	r3, [r7, #32]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	685a      	ldr	r2, [r3, #4]
 800e426:	6a3b      	ldr	r3, [r7, #32]
 800e428:	605a      	str	r2, [r3, #4]
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	61bb      	str	r3, [r7, #24]
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	685a      	ldr	r2, [r3, #4]
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	605a      	str	r2, [r3, #4]
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	685a      	ldr	r2, [r3, #4]
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	3308      	adds	r3, #8
 800e448:	429a      	cmp	r2, r3
 800e44a:	d104      	bne.n	800e456 <prvListTasksWithinSingleList+0x6a>
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	685a      	ldr	r2, [r3, #4]
 800e452:	69bb      	ldr	r3, [r7, #24]
 800e454:	605a      	str	r2, [r3, #4]
 800e456:	69bb      	ldr	r3, [r7, #24]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800e45e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e460:	4613      	mov	r3, r2
 800e462:	00db      	lsls	r3, r3, #3
 800e464:	4413      	add	r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	461a      	mov	r2, r3
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	1899      	adds	r1, r3, r2
 800e46e:	79fb      	ldrb	r3, [r7, #7]
 800e470:	2201      	movs	r2, #1
 800e472:	6978      	ldr	r0, [r7, #20]
 800e474:	f7ff ff54 	bl	800e320 <vTaskGetInfo>
				uxTask++;
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	3301      	adds	r3, #1
 800e47c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800e47e:	697a      	ldr	r2, [r7, #20]
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	429a      	cmp	r2, r3
 800e484:	d1d5      	bne.n	800e432 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800e486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e488:	4618      	mov	r0, r3
 800e48a:	3728      	adds	r7, #40	; 0x28
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800e490:	b480      	push	{r7}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800e498:	2300      	movs	r3, #0
 800e49a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e49c:	e005      	b.n	800e4aa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	2ba5      	cmp	r3, #165	; 0xa5
 800e4b0:	d0f5      	beq.n	800e49e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	089b      	lsrs	r3, r3, #2
 800e4b6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	b29b      	uxth	r3, r3
	}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3714      	adds	r7, #20
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	3358      	adds	r3, #88	; 0x58
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f002 fd4b 	bl	8010f70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d108      	bne.n	800e4f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f001 f8c9 	bl	800f680 <vPortFree>
				vPortFree( pxTCB );
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f001 f8c6 	bl	800f680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4f4:	e018      	b.n	800e528 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d103      	bne.n	800e508 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f001 f8bd 	bl	800f680 <vPortFree>
	}
 800e506:	e00f      	b.n	800e528 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e50e:	2b02      	cmp	r3, #2
 800e510:	d00a      	beq.n	800e528 <prvDeleteTCB+0x60>
	__asm volatile
 800e512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	60fb      	str	r3, [r7, #12]
}
 800e524:	bf00      	nop
 800e526:	e7fe      	b.n	800e526 <prvDeleteTCB+0x5e>
	}
 800e528:	bf00      	nop
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e530:	b480      	push	{r7}
 800e532:	b083      	sub	sp, #12
 800e534:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e536:	4b0c      	ldr	r3, [pc, #48]	; (800e568 <prvResetNextTaskUnblockTime+0x38>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d104      	bne.n	800e54a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e540:	4b0a      	ldr	r3, [pc, #40]	; (800e56c <prvResetNextTaskUnblockTime+0x3c>)
 800e542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e546:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e548:	e008      	b.n	800e55c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e54a:	4b07      	ldr	r3, [pc, #28]	; (800e568 <prvResetNextTaskUnblockTime+0x38>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	4a04      	ldr	r2, [pc, #16]	; (800e56c <prvResetNextTaskUnblockTime+0x3c>)
 800e55a:	6013      	str	r3, [r2, #0]
}
 800e55c:	bf00      	nop
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr
 800e568:	200033a8 	.word	0x200033a8
 800e56c:	20003410 	.word	0x20003410

0800e570 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e576:	4b0b      	ldr	r3, [pc, #44]	; (800e5a4 <xTaskGetSchedulerState+0x34>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d102      	bne.n	800e584 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e57e:	2301      	movs	r3, #1
 800e580:	607b      	str	r3, [r7, #4]
 800e582:	e008      	b.n	800e596 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e584:	4b08      	ldr	r3, [pc, #32]	; (800e5a8 <xTaskGetSchedulerState+0x38>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d102      	bne.n	800e592 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e58c:	2302      	movs	r3, #2
 800e58e:	607b      	str	r3, [r7, #4]
 800e590:	e001      	b.n	800e596 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e592:	2300      	movs	r3, #0
 800e594:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e596:	687b      	ldr	r3, [r7, #4]
	}
 800e598:	4618      	mov	r0, r3
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr
 800e5a4:	200033fc 	.word	0x200033fc
 800e5a8:	20003418 	.word	0x20003418

0800e5ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b086      	sub	sp, #24
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d056      	beq.n	800e670 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e5c2:	4b2e      	ldr	r3, [pc, #184]	; (800e67c <xTaskPriorityDisinherit+0xd0>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	693a      	ldr	r2, [r7, #16]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d00a      	beq.n	800e5e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d0:	f383 8811 	msr	BASEPRI, r3
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	60fb      	str	r3, [r7, #12]
}
 800e5de:	bf00      	nop
 800e5e0:	e7fe      	b.n	800e5e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d10a      	bne.n	800e600 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	60bb      	str	r3, [r7, #8]
}
 800e5fc:	bf00      	nop
 800e5fe:	e7fe      	b.n	800e5fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e604:	1e5a      	subs	r2, r3, #1
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e612:	429a      	cmp	r2, r3
 800e614:	d02c      	beq.n	800e670 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d128      	bne.n	800e670 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	3304      	adds	r3, #4
 800e622:	4618      	mov	r0, r3
 800e624:	f7fe f99c 	bl	800c960 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e634:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e640:	4b0f      	ldr	r3, [pc, #60]	; (800e680 <xTaskPriorityDisinherit+0xd4>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	429a      	cmp	r2, r3
 800e646:	d903      	bls.n	800e650 <xTaskPriorityDisinherit+0xa4>
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e64c:	4a0c      	ldr	r2, [pc, #48]	; (800e680 <xTaskPriorityDisinherit+0xd4>)
 800e64e:	6013      	str	r3, [r2, #0]
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e654:	4613      	mov	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	4a09      	ldr	r2, [pc, #36]	; (800e684 <xTaskPriorityDisinherit+0xd8>)
 800e65e:	441a      	add	r2, r3
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	3304      	adds	r3, #4
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f7fe f91d 	bl	800c8a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e66c:	2301      	movs	r3, #1
 800e66e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e670:	697b      	ldr	r3, [r7, #20]
	}
 800e672:	4618      	mov	r0, r3
 800e674:	3718      	adds	r7, #24
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20002f1c 	.word	0x20002f1c
 800e680:	200033f8 	.word	0x200033f8
 800e684:	20002f20 	.word	0x20002f20

0800e688 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e692:	6839      	ldr	r1, [r7, #0]
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f002 fd49 	bl	801112c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7f1 fd98 	bl	80001d0 <strlen>
 800e6a0:	60f8      	str	r0, [r7, #12]
 800e6a2:	e007      	b.n	800e6b4 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	2220      	movs	r2, #32
 800e6ac:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	60fb      	str	r3, [r7, #12]
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b0e      	cmp	r3, #14
 800e6b8:	d9f4      	bls.n	800e6a4 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	4413      	add	r3, r2
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	4413      	add	r3, r2
	}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3710      	adds	r7, #16
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
	...

0800e6d4 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800e6d4:	b590      	push	{r4, r7, lr}
 800e6d6:	b089      	sub	sp, #36	; 0x24
 800e6d8:	af02      	add	r7, sp, #8
 800e6da:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e6e2:	4b45      	ldr	r3, [pc, #276]	; (800e7f8 <vTaskList+0x124>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800e6e8:	4b43      	ldr	r3, [pc, #268]	; (800e7f8 <vTaskList+0x124>)
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	4613      	mov	r3, r2
 800e6ee:	00db      	lsls	r3, r3, #3
 800e6f0:	4413      	add	r3, r2
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f000 fef7 	bl	800f4e8 <pvPortMalloc>
 800e6fa:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d076      	beq.n	800e7f0 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800e702:	2200      	movs	r2, #0
 800e704:	68f9      	ldr	r1, [r7, #12]
 800e706:	68b8      	ldr	r0, [r7, #8]
 800e708:	f7ff fa80 	bl	800dc0c <uxTaskGetSystemState>
 800e70c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800e70e:	2300      	movs	r3, #0
 800e710:	617b      	str	r3, [r7, #20]
 800e712:	e066      	b.n	800e7e2 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e714:	697a      	ldr	r2, [r7, #20]
 800e716:	4613      	mov	r3, r2
 800e718:	00db      	lsls	r3, r3, #3
 800e71a:	4413      	add	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	461a      	mov	r2, r3
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	4413      	add	r3, r2
 800e724:	7b1b      	ldrb	r3, [r3, #12]
 800e726:	2b04      	cmp	r3, #4
 800e728:	d81b      	bhi.n	800e762 <vTaskList+0x8e>
 800e72a:	a201      	add	r2, pc, #4	; (adr r2, 800e730 <vTaskList+0x5c>)
 800e72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e730:	0800e745 	.word	0x0800e745
 800e734:	0800e74b 	.word	0x0800e74b
 800e738:	0800e751 	.word	0x0800e751
 800e73c:	0800e757 	.word	0x0800e757
 800e740:	0800e75d 	.word	0x0800e75d
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800e744:	2358      	movs	r3, #88	; 0x58
 800e746:	74fb      	strb	r3, [r7, #19]
										break;
 800e748:	e00e      	b.n	800e768 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800e74a:	2352      	movs	r3, #82	; 0x52
 800e74c:	74fb      	strb	r3, [r7, #19]
										break;
 800e74e:	e00b      	b.n	800e768 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800e750:	2342      	movs	r3, #66	; 0x42
 800e752:	74fb      	strb	r3, [r7, #19]
										break;
 800e754:	e008      	b.n	800e768 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800e756:	2353      	movs	r3, #83	; 0x53
 800e758:	74fb      	strb	r3, [r7, #19]
										break;
 800e75a:	e005      	b.n	800e768 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800e75c:	2344      	movs	r3, #68	; 0x44
 800e75e:	74fb      	strb	r3, [r7, #19]
										break;
 800e760:	e002      	b.n	800e768 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800e762:	2300      	movs	r3, #0
 800e764:	74fb      	strb	r3, [r7, #19]
										break;
 800e766:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e768:	697a      	ldr	r2, [r7, #20]
 800e76a:	4613      	mov	r3, r2
 800e76c:	00db      	lsls	r3, r3, #3
 800e76e:	4413      	add	r3, r2
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	461a      	mov	r2, r3
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	4413      	add	r3, r2
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	4619      	mov	r1, r3
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f7ff ff83 	bl	800e688 <prvWriteNameToBuffer>
 800e782:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800e784:	7cf9      	ldrb	r1, [r7, #19]
 800e786:	697a      	ldr	r2, [r7, #20]
 800e788:	4613      	mov	r3, r2
 800e78a:	00db      	lsls	r3, r3, #3
 800e78c:	4413      	add	r3, r2
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	461a      	mov	r2, r3
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	4413      	add	r3, r2
 800e796:	6918      	ldr	r0, [r3, #16]
 800e798:	697a      	ldr	r2, [r7, #20]
 800e79a:	4613      	mov	r3, r2
 800e79c:	00db      	lsls	r3, r3, #3
 800e79e:	4413      	add	r3, r2
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	8c1b      	ldrh	r3, [r3, #32]
 800e7aa:	461c      	mov	r4, r3
 800e7ac:	697a      	ldr	r2, [r7, #20]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	00db      	lsls	r3, r3, #3
 800e7b2:	4413      	add	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	9301      	str	r3, [sp, #4]
 800e7c0:	9400      	str	r4, [sp, #0]
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	460a      	mov	r2, r1
 800e7c6:	490d      	ldr	r1, [pc, #52]	; (800e7fc <vTaskList+0x128>)
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f002 fc3d 	bl	8011048 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f7f1 fcfe 	bl	80001d0 <strlen>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4413      	add	r3, r2
 800e7da:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	617b      	str	r3, [r7, #20]
 800e7e2:	697a      	ldr	r2, [r7, #20]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d394      	bcc.n	800e714 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800e7ea:	68b8      	ldr	r0, [r7, #8]
 800e7ec:	f000 ff48 	bl	800f680 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7f0:	bf00      	nop
 800e7f2:	371c      	adds	r7, #28
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd90      	pop	{r4, r7, pc}
 800e7f8:	200033f0 	.word	0x200033f0
 800e7fc:	0801343c 	.word	0x0801343c

0800e800 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800e800:	b580      	push	{r7, lr}
 800e802:	b088      	sub	sp, #32
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e80e:	4b3a      	ldr	r3, [pc, #232]	; (800e8f8 <vTaskGetRunTimeStats+0xf8>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800e814:	4b38      	ldr	r3, [pc, #224]	; (800e8f8 <vTaskGetRunTimeStats+0xf8>)
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	4613      	mov	r3, r2
 800e81a:	00db      	lsls	r3, r3, #3
 800e81c:	4413      	add	r3, r2
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	4618      	mov	r0, r3
 800e822:	f000 fe61 	bl	800f4e8 <pvPortMalloc>
 800e826:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d05f      	beq.n	800e8ee <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e82e:	f107 030c 	add.w	r3, r7, #12
 800e832:	461a      	mov	r2, r3
 800e834:	69b9      	ldr	r1, [r7, #24]
 800e836:	6978      	ldr	r0, [r7, #20]
 800e838:	f7ff f9e8 	bl	800dc0c <uxTaskGetSystemState>
 800e83c:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	4a2e      	ldr	r2, [pc, #184]	; (800e8fc <vTaskGetRunTimeStats+0xfc>)
 800e842:	fba2 2303 	umull	r2, r3, r2, r3
 800e846:	095b      	lsrs	r3, r3, #5
 800e848:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d04b      	beq.n	800e8e8 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800e850:	2300      	movs	r3, #0
 800e852:	61fb      	str	r3, [r7, #28]
 800e854:	e044      	b.n	800e8e0 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e856:	69fa      	ldr	r2, [r7, #28]
 800e858:	4613      	mov	r3, r2
 800e85a:	00db      	lsls	r3, r3, #3
 800e85c:	4413      	add	r3, r2
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	461a      	mov	r2, r3
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	4413      	add	r3, r2
 800e866:	699a      	ldr	r2, [r3, #24]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e86e:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e870:	69fa      	ldr	r2, [r7, #28]
 800e872:	4613      	mov	r3, r2
 800e874:	00db      	lsls	r3, r3, #3
 800e876:	4413      	add	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	461a      	mov	r2, r3
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	4413      	add	r3, r2
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	4619      	mov	r1, r3
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f7ff feff 	bl	800e688 <prvWriteNameToBuffer>
 800e88a:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d00e      	beq.n	800e8b0 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800e892:	69fa      	ldr	r2, [r7, #28]
 800e894:	4613      	mov	r3, r2
 800e896:	00db      	lsls	r3, r3, #3
 800e898:	4413      	add	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	461a      	mov	r2, r3
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	699a      	ldr	r2, [r3, #24]
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	4916      	ldr	r1, [pc, #88]	; (800e900 <vTaskGetRunTimeStats+0x100>)
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f002 fbcd 	bl	8011048 <siprintf>
 800e8ae:	e00d      	b.n	800e8cc <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800e8b0:	69fa      	ldr	r2, [r7, #28]
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	00db      	lsls	r3, r3, #3
 800e8b6:	4413      	add	r3, r2
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	4413      	add	r3, r2
 800e8c0:	699b      	ldr	r3, [r3, #24]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	490f      	ldr	r1, [pc, #60]	; (800e904 <vTaskGetRunTimeStats+0x104>)
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f002 fbbe 	bl	8011048 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f7f1 fc7f 	bl	80001d0 <strlen>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	61fb      	str	r3, [r7, #28]
 800e8e0:	69fa      	ldr	r2, [r7, #28]
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d3b6      	bcc.n	800e856 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800e8e8:	6978      	ldr	r0, [r7, #20]
 800e8ea:	f000 fec9 	bl	800f680 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8ee:	bf00      	nop
 800e8f0:	3720      	adds	r7, #32
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	200033f0 	.word	0x200033f0
 800e8fc:	51eb851f 	.word	0x51eb851f
 800e900:	0801344c 	.word	0x0801344c
 800e904:	08013458 	.word	0x08013458

0800e908 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e912:	4b21      	ldr	r3, [pc, #132]	; (800e998 <prvAddCurrentTaskToDelayedList+0x90>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e918:	4b20      	ldr	r3, [pc, #128]	; (800e99c <prvAddCurrentTaskToDelayedList+0x94>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	3304      	adds	r3, #4
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe f81e 	bl	800c960 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e92a:	d10a      	bne.n	800e942 <prvAddCurrentTaskToDelayedList+0x3a>
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d007      	beq.n	800e942 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e932:	4b1a      	ldr	r3, [pc, #104]	; (800e99c <prvAddCurrentTaskToDelayedList+0x94>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	3304      	adds	r3, #4
 800e938:	4619      	mov	r1, r3
 800e93a:	4819      	ldr	r0, [pc, #100]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800e93c:	f7fd ffb3 	bl	800c8a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e940:	e026      	b.n	800e990 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4413      	add	r3, r2
 800e948:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e94a:	4b14      	ldr	r3, [pc, #80]	; (800e99c <prvAddCurrentTaskToDelayedList+0x94>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e952:	68ba      	ldr	r2, [r7, #8]
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	429a      	cmp	r2, r3
 800e958:	d209      	bcs.n	800e96e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e95a:	4b12      	ldr	r3, [pc, #72]	; (800e9a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	4b0f      	ldr	r3, [pc, #60]	; (800e99c <prvAddCurrentTaskToDelayedList+0x94>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	3304      	adds	r3, #4
 800e964:	4619      	mov	r1, r3
 800e966:	4610      	mov	r0, r2
 800e968:	f7fd ffc1 	bl	800c8ee <vListInsert>
}
 800e96c:	e010      	b.n	800e990 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e96e:	4b0e      	ldr	r3, [pc, #56]	; (800e9a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	4b0a      	ldr	r3, [pc, #40]	; (800e99c <prvAddCurrentTaskToDelayedList+0x94>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	3304      	adds	r3, #4
 800e978:	4619      	mov	r1, r3
 800e97a:	4610      	mov	r0, r2
 800e97c:	f7fd ffb7 	bl	800c8ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e980:	4b0a      	ldr	r3, [pc, #40]	; (800e9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	68ba      	ldr	r2, [r7, #8]
 800e986:	429a      	cmp	r2, r3
 800e988:	d202      	bcs.n	800e990 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e98a:	4a08      	ldr	r2, [pc, #32]	; (800e9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	6013      	str	r3, [r2, #0]
}
 800e990:	bf00      	nop
 800e992:	3710      	adds	r7, #16
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	200033f4 	.word	0x200033f4
 800e99c:	20002f1c 	.word	0x20002f1c
 800e9a0:	200033dc 	.word	0x200033dc
 800e9a4:	200033ac 	.word	0x200033ac
 800e9a8:	200033a8 	.word	0x200033a8
 800e9ac:	20003410 	.word	0x20003410

0800e9b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b08a      	sub	sp, #40	; 0x28
 800e9b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e9ba:	f000 fb07 	bl	800efcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e9be:	4b1c      	ldr	r3, [pc, #112]	; (800ea30 <xTimerCreateTimerTask+0x80>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d021      	beq.n	800ea0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e9ce:	1d3a      	adds	r2, r7, #4
 800e9d0:	f107 0108 	add.w	r1, r7, #8
 800e9d4:	f107 030c 	add.w	r3, r7, #12
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fd ff1d 	bl	800c818 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e9de:	6879      	ldr	r1, [r7, #4]
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	9202      	str	r2, [sp, #8]
 800e9e6:	9301      	str	r3, [sp, #4]
 800e9e8:	2302      	movs	r3, #2
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	460a      	mov	r2, r1
 800e9f0:	4910      	ldr	r1, [pc, #64]	; (800ea34 <xTimerCreateTimerTask+0x84>)
 800e9f2:	4811      	ldr	r0, [pc, #68]	; (800ea38 <xTimerCreateTimerTask+0x88>)
 800e9f4:	f7fe fd84 	bl	800d500 <xTaskCreateStatic>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	4a10      	ldr	r2, [pc, #64]	; (800ea3c <xTimerCreateTimerTask+0x8c>)
 800e9fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ea3c <xTimerCreateTimerTask+0x8c>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d001      	beq.n	800ea0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea06:	2301      	movs	r3, #1
 800ea08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d10a      	bne.n	800ea26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ea10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea14:	f383 8811 	msr	BASEPRI, r3
 800ea18:	f3bf 8f6f 	isb	sy
 800ea1c:	f3bf 8f4f 	dsb	sy
 800ea20:	613b      	str	r3, [r7, #16]
}
 800ea22:	bf00      	nop
 800ea24:	e7fe      	b.n	800ea24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ea26:	697b      	ldr	r3, [r7, #20]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3718      	adds	r7, #24
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	20003454 	.word	0x20003454
 800ea34:	08013464 	.word	0x08013464
 800ea38:	0800eb75 	.word	0x0800eb75
 800ea3c:	20003458 	.word	0x20003458

0800ea40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b08a      	sub	sp, #40	; 0x28
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
 800ea4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d10a      	bne.n	800ea6e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ea58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5c:	f383 8811 	msr	BASEPRI, r3
 800ea60:	f3bf 8f6f 	isb	sy
 800ea64:	f3bf 8f4f 	dsb	sy
 800ea68:	623b      	str	r3, [r7, #32]
}
 800ea6a:	bf00      	nop
 800ea6c:	e7fe      	b.n	800ea6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ea6e:	4b1a      	ldr	r3, [pc, #104]	; (800ead8 <xTimerGenericCommand+0x98>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d02a      	beq.n	800eacc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	2b05      	cmp	r3, #5
 800ea86:	dc18      	bgt.n	800eaba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ea88:	f7ff fd72 	bl	800e570 <xTaskGetSchedulerState>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b02      	cmp	r3, #2
 800ea90:	d109      	bne.n	800eaa6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ea92:	4b11      	ldr	r3, [pc, #68]	; (800ead8 <xTimerGenericCommand+0x98>)
 800ea94:	6818      	ldr	r0, [r3, #0]
 800ea96:	f107 0110 	add.w	r1, r7, #16
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea9e:	f7fe f8c7 	bl	800cc30 <xQueueGenericSend>
 800eaa2:	6278      	str	r0, [r7, #36]	; 0x24
 800eaa4:	e012      	b.n	800eacc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eaa6:	4b0c      	ldr	r3, [pc, #48]	; (800ead8 <xTimerGenericCommand+0x98>)
 800eaa8:	6818      	ldr	r0, [r3, #0]
 800eaaa:	f107 0110 	add.w	r1, r7, #16
 800eaae:	2300      	movs	r3, #0
 800eab0:	2200      	movs	r2, #0
 800eab2:	f7fe f8bd 	bl	800cc30 <xQueueGenericSend>
 800eab6:	6278      	str	r0, [r7, #36]	; 0x24
 800eab8:	e008      	b.n	800eacc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eaba:	4b07      	ldr	r3, [pc, #28]	; (800ead8 <xTimerGenericCommand+0x98>)
 800eabc:	6818      	ldr	r0, [r3, #0]
 800eabe:	f107 0110 	add.w	r1, r7, #16
 800eac2:	2300      	movs	r3, #0
 800eac4:	683a      	ldr	r2, [r7, #0]
 800eac6:	f7fe f9b1 	bl	800ce2c <xQueueGenericSendFromISR>
 800eaca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3728      	adds	r7, #40	; 0x28
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	20003454 	.word	0x20003454

0800eadc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b088      	sub	sp, #32
 800eae0:	af02      	add	r7, sp, #8
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eae6:	4b22      	ldr	r3, [pc, #136]	; (800eb70 <prvProcessExpiredTimer+0x94>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	3304      	adds	r3, #4
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7fd ff33 	bl	800c960 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb00:	f003 0304 	and.w	r3, r3, #4
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d022      	beq.n	800eb4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	699a      	ldr	r2, [r3, #24]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	18d1      	adds	r1, r2, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	683a      	ldr	r2, [r7, #0]
 800eb14:	6978      	ldr	r0, [r7, #20]
 800eb16:	f000 f8d1 	bl	800ecbc <prvInsertTimerInActiveList>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d01f      	beq.n	800eb60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb20:	2300      	movs	r3, #0
 800eb22:	9300      	str	r3, [sp, #0]
 800eb24:	2300      	movs	r3, #0
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	2100      	movs	r1, #0
 800eb2a:	6978      	ldr	r0, [r7, #20]
 800eb2c:	f7ff ff88 	bl	800ea40 <xTimerGenericCommand>
 800eb30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d113      	bne.n	800eb60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb3c:	f383 8811 	msr	BASEPRI, r3
 800eb40:	f3bf 8f6f 	isb	sy
 800eb44:	f3bf 8f4f 	dsb	sy
 800eb48:	60fb      	str	r3, [r7, #12]
}
 800eb4a:	bf00      	nop
 800eb4c:	e7fe      	b.n	800eb4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb54:	f023 0301 	bic.w	r3, r3, #1
 800eb58:	b2da      	uxtb	r2, r3
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	6a1b      	ldr	r3, [r3, #32]
 800eb64:	6978      	ldr	r0, [r7, #20]
 800eb66:	4798      	blx	r3
}
 800eb68:	bf00      	nop
 800eb6a:	3718      	adds	r7, #24
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	2000344c 	.word	0x2000344c

0800eb74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb7c:	f107 0308 	add.w	r3, r7, #8
 800eb80:	4618      	mov	r0, r3
 800eb82:	f000 f857 	bl	800ec34 <prvGetNextExpireTime>
 800eb86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f000 f803 	bl	800eb98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eb92:	f000 f8d5 	bl	800ed40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb96:	e7f1      	b.n	800eb7c <prvTimerTask+0x8>

0800eb98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eba2:	f7fe ff77 	bl	800da94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eba6:	f107 0308 	add.w	r3, r7, #8
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f000 f866 	bl	800ec7c <prvSampleTimeNow>
 800ebb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d130      	bne.n	800ec1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10a      	bne.n	800ebd4 <prvProcessTimerOrBlockTask+0x3c>
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d806      	bhi.n	800ebd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ebc6:	f7fe ff73 	bl	800dab0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ebca:	68f9      	ldr	r1, [r7, #12]
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7ff ff85 	bl	800eadc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ebd2:	e024      	b.n	800ec1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d008      	beq.n	800ebec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ebda:	4b13      	ldr	r3, [pc, #76]	; (800ec28 <prvProcessTimerOrBlockTask+0x90>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d101      	bne.n	800ebe8 <prvProcessTimerOrBlockTask+0x50>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	e000      	b.n	800ebea <prvProcessTimerOrBlockTask+0x52>
 800ebe8:	2300      	movs	r3, #0
 800ebea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ebec:	4b0f      	ldr	r3, [pc, #60]	; (800ec2c <prvProcessTimerOrBlockTask+0x94>)
 800ebee:	6818      	ldr	r0, [r3, #0]
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	683a      	ldr	r2, [r7, #0]
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	f7fe fc4d 	bl	800d498 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ebfe:	f7fe ff57 	bl	800dab0 <xTaskResumeAll>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d10a      	bne.n	800ec1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec08:	4b09      	ldr	r3, [pc, #36]	; (800ec30 <prvProcessTimerOrBlockTask+0x98>)
 800ec0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	f3bf 8f4f 	dsb	sy
 800ec14:	f3bf 8f6f 	isb	sy
}
 800ec18:	e001      	b.n	800ec1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ec1a:	f7fe ff49 	bl	800dab0 <xTaskResumeAll>
}
 800ec1e:	bf00      	nop
 800ec20:	3710      	adds	r7, #16
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20003450 	.word	0x20003450
 800ec2c:	20003454 	.word	0x20003454
 800ec30:	e000ed04 	.word	0xe000ed04

0800ec34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ec34:	b480      	push	{r7}
 800ec36:	b085      	sub	sp, #20
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec3c:	4b0e      	ldr	r3, [pc, #56]	; (800ec78 <prvGetNextExpireTime+0x44>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d101      	bne.n	800ec4a <prvGetNextExpireTime+0x16>
 800ec46:	2201      	movs	r2, #1
 800ec48:	e000      	b.n	800ec4c <prvGetNextExpireTime+0x18>
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d105      	bne.n	800ec64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec58:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <prvGetNextExpireTime+0x44>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	60fb      	str	r3, [r7, #12]
 800ec62:	e001      	b.n	800ec68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ec64:	2300      	movs	r3, #0
 800ec66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ec68:	68fb      	ldr	r3, [r7, #12]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3714      	adds	r7, #20
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop
 800ec78:	2000344c 	.word	0x2000344c

0800ec7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ec84:	f7fe ffb2 	bl	800dbec <xTaskGetTickCount>
 800ec88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ec8a:	4b0b      	ldr	r3, [pc, #44]	; (800ecb8 <prvSampleTimeNow+0x3c>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d205      	bcs.n	800eca0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ec94:	f000 f936 	bl	800ef04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	601a      	str	r2, [r3, #0]
 800ec9e:	e002      	b.n	800eca6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2200      	movs	r2, #0
 800eca4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eca6:	4a04      	ldr	r2, [pc, #16]	; (800ecb8 <prvSampleTimeNow+0x3c>)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ecac:	68fb      	ldr	r3, [r7, #12]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	2000345c 	.word	0x2000345c

0800ecbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b086      	sub	sp, #24
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	607a      	str	r2, [r7, #4]
 800ecc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ecca:	2300      	movs	r3, #0
 800eccc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	68ba      	ldr	r2, [r7, #8]
 800ecd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	68fa      	ldr	r2, [r7, #12]
 800ecd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ecda:	68ba      	ldr	r2, [r7, #8]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d812      	bhi.n	800ed08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	1ad2      	subs	r2, r2, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	699b      	ldr	r3, [r3, #24]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d302      	bcc.n	800ecf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	617b      	str	r3, [r7, #20]
 800ecf4:	e01b      	b.n	800ed2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ecf6:	4b10      	ldr	r3, [pc, #64]	; (800ed38 <prvInsertTimerInActiveList+0x7c>)
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	3304      	adds	r3, #4
 800ecfe:	4619      	mov	r1, r3
 800ed00:	4610      	mov	r0, r2
 800ed02:	f7fd fdf4 	bl	800c8ee <vListInsert>
 800ed06:	e012      	b.n	800ed2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d206      	bcs.n	800ed1e <prvInsertTimerInActiveList+0x62>
 800ed10:	68ba      	ldr	r2, [r7, #8]
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d302      	bcc.n	800ed1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	617b      	str	r3, [r7, #20]
 800ed1c:	e007      	b.n	800ed2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed1e:	4b07      	ldr	r3, [pc, #28]	; (800ed3c <prvInsertTimerInActiveList+0x80>)
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	3304      	adds	r3, #4
 800ed26:	4619      	mov	r1, r3
 800ed28:	4610      	mov	r0, r2
 800ed2a:	f7fd fde0 	bl	800c8ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ed2e:	697b      	ldr	r3, [r7, #20]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3718      	adds	r7, #24
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	20003450 	.word	0x20003450
 800ed3c:	2000344c 	.word	0x2000344c

0800ed40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08e      	sub	sp, #56	; 0x38
 800ed44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed46:	e0ca      	b.n	800eede <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	da18      	bge.n	800ed80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ed4e:	1d3b      	adds	r3, r7, #4
 800ed50:	3304      	adds	r3, #4
 800ed52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ed54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d10a      	bne.n	800ed70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ed5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5e:	f383 8811 	msr	BASEPRI, r3
 800ed62:	f3bf 8f6f 	isb	sy
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	61fb      	str	r3, [r7, #28]
}
 800ed6c:	bf00      	nop
 800ed6e:	e7fe      	b.n	800ed6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ed70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed76:	6850      	ldr	r0, [r2, #4]
 800ed78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed7a:	6892      	ldr	r2, [r2, #8]
 800ed7c:	4611      	mov	r1, r2
 800ed7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f2c0 80aa 	blt.w	800eedc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ed8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8e:	695b      	ldr	r3, [r3, #20]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d004      	beq.n	800ed9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed96:	3304      	adds	r3, #4
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fd fde1 	bl	800c960 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed9e:	463b      	mov	r3, r7
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7ff ff6b 	bl	800ec7c <prvSampleTimeNow>
 800eda6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b09      	cmp	r3, #9
 800edac:	f200 8097 	bhi.w	800eede <prvProcessReceivedCommands+0x19e>
 800edb0:	a201      	add	r2, pc, #4	; (adr r2, 800edb8 <prvProcessReceivedCommands+0x78>)
 800edb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb6:	bf00      	nop
 800edb8:	0800ede1 	.word	0x0800ede1
 800edbc:	0800ede1 	.word	0x0800ede1
 800edc0:	0800ede1 	.word	0x0800ede1
 800edc4:	0800ee55 	.word	0x0800ee55
 800edc8:	0800ee69 	.word	0x0800ee69
 800edcc:	0800eeb3 	.word	0x0800eeb3
 800edd0:	0800ede1 	.word	0x0800ede1
 800edd4:	0800ede1 	.word	0x0800ede1
 800edd8:	0800ee55 	.word	0x0800ee55
 800eddc:	0800ee69 	.word	0x0800ee69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ede0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ede6:	f043 0301 	orr.w	r3, r3, #1
 800edea:	b2da      	uxtb	r2, r3
 800edec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800edf2:	68ba      	ldr	r2, [r7, #8]
 800edf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf6:	699b      	ldr	r3, [r3, #24]
 800edf8:	18d1      	adds	r1, r2, r3
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee00:	f7ff ff5c 	bl	800ecbc <prvInsertTimerInActiveList>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d069      	beq.n	800eede <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	6a1b      	ldr	r3, [r3, #32]
 800ee0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee18:	f003 0304 	and.w	r3, r3, #4
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d05e      	beq.n	800eede <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee24:	699b      	ldr	r3, [r3, #24]
 800ee26:	441a      	add	r2, r3
 800ee28:	2300      	movs	r3, #0
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	2100      	movs	r1, #0
 800ee30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee32:	f7ff fe05 	bl	800ea40 <xTimerGenericCommand>
 800ee36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ee38:	6a3b      	ldr	r3, [r7, #32]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d14f      	bne.n	800eede <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ee3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee42:	f383 8811 	msr	BASEPRI, r3
 800ee46:	f3bf 8f6f 	isb	sy
 800ee4a:	f3bf 8f4f 	dsb	sy
 800ee4e:	61bb      	str	r3, [r7, #24]
}
 800ee50:	bf00      	nop
 800ee52:	e7fe      	b.n	800ee52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee5a:	f023 0301 	bic.w	r3, r3, #1
 800ee5e:	b2da      	uxtb	r2, r3
 800ee60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ee66:	e03a      	b.n	800eede <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee6e:	f043 0301 	orr.w	r3, r3, #1
 800ee72:	b2da      	uxtb	r2, r3
 800ee74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ee7a:	68ba      	ldr	r2, [r7, #8]
 800ee7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee82:	699b      	ldr	r3, [r3, #24]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d10a      	bne.n	800ee9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ee88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8c:	f383 8811 	msr	BASEPRI, r3
 800ee90:	f3bf 8f6f 	isb	sy
 800ee94:	f3bf 8f4f 	dsb	sy
 800ee98:	617b      	str	r3, [r7, #20]
}
 800ee9a:	bf00      	nop
 800ee9c:	e7fe      	b.n	800ee9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ee9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea0:	699a      	ldr	r2, [r3, #24]
 800eea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea4:	18d1      	adds	r1, r2, r3
 800eea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeac:	f7ff ff06 	bl	800ecbc <prvInsertTimerInActiveList>
					break;
 800eeb0:	e015      	b.n	800eede <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eeb8:	f003 0302 	and.w	r3, r3, #2
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d103      	bne.n	800eec8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800eec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eec2:	f000 fbdd 	bl	800f680 <vPortFree>
 800eec6:	e00a      	b.n	800eede <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eece:	f023 0301 	bic.w	r3, r3, #1
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eeda:	e000      	b.n	800eede <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eedc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eede:	4b08      	ldr	r3, [pc, #32]	; (800ef00 <prvProcessReceivedCommands+0x1c0>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	1d39      	adds	r1, r7, #4
 800eee4:	2200      	movs	r2, #0
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fe f83c 	bl	800cf64 <xQueueReceive>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	f47f af2a 	bne.w	800ed48 <prvProcessReceivedCommands+0x8>
	}
}
 800eef4:	bf00      	nop
 800eef6:	bf00      	nop
 800eef8:	3730      	adds	r7, #48	; 0x30
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	20003454 	.word	0x20003454

0800ef04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b088      	sub	sp, #32
 800ef08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef0a:	e048      	b.n	800ef9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef0c:	4b2d      	ldr	r3, [pc, #180]	; (800efc4 <prvSwitchTimerLists+0xc0>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef16:	4b2b      	ldr	r3, [pc, #172]	; (800efc4 <prvSwitchTimerLists+0xc0>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	3304      	adds	r3, #4
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7fd fd1b 	bl	800c960 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	6a1b      	ldr	r3, [r3, #32]
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef38:	f003 0304 	and.w	r3, r3, #4
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d02e      	beq.n	800ef9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	699b      	ldr	r3, [r3, #24]
 800ef44:	693a      	ldr	r2, [r7, #16]
 800ef46:	4413      	add	r3, r2
 800ef48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef4a:	68ba      	ldr	r2, [r7, #8]
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d90e      	bls.n	800ef70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	68ba      	ldr	r2, [r7, #8]
 800ef56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef5e:	4b19      	ldr	r3, [pc, #100]	; (800efc4 <prvSwitchTimerLists+0xc0>)
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	3304      	adds	r3, #4
 800ef66:	4619      	mov	r1, r3
 800ef68:	4610      	mov	r0, r2
 800ef6a:	f7fd fcc0 	bl	800c8ee <vListInsert>
 800ef6e:	e016      	b.n	800ef9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef70:	2300      	movs	r3, #0
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	2300      	movs	r3, #0
 800ef76:	693a      	ldr	r2, [r7, #16]
 800ef78:	2100      	movs	r1, #0
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	f7ff fd60 	bl	800ea40 <xTimerGenericCommand>
 800ef80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d10a      	bne.n	800ef9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ef88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8c:	f383 8811 	msr	BASEPRI, r3
 800ef90:	f3bf 8f6f 	isb	sy
 800ef94:	f3bf 8f4f 	dsb	sy
 800ef98:	603b      	str	r3, [r7, #0]
}
 800ef9a:	bf00      	nop
 800ef9c:	e7fe      	b.n	800ef9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef9e:	4b09      	ldr	r3, [pc, #36]	; (800efc4 <prvSwitchTimerLists+0xc0>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1b1      	bne.n	800ef0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800efa8:	4b06      	ldr	r3, [pc, #24]	; (800efc4 <prvSwitchTimerLists+0xc0>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800efae:	4b06      	ldr	r3, [pc, #24]	; (800efc8 <prvSwitchTimerLists+0xc4>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	4a04      	ldr	r2, [pc, #16]	; (800efc4 <prvSwitchTimerLists+0xc0>)
 800efb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800efb6:	4a04      	ldr	r2, [pc, #16]	; (800efc8 <prvSwitchTimerLists+0xc4>)
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	6013      	str	r3, [r2, #0]
}
 800efbc:	bf00      	nop
 800efbe:	3718      	adds	r7, #24
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	2000344c 	.word	0x2000344c
 800efc8:	20003450 	.word	0x20003450

0800efcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b082      	sub	sp, #8
 800efd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800efd2:	f000 f967 	bl	800f2a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800efd6:	4b15      	ldr	r3, [pc, #84]	; (800f02c <prvCheckForValidListAndQueue+0x60>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d120      	bne.n	800f020 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800efde:	4814      	ldr	r0, [pc, #80]	; (800f030 <prvCheckForValidListAndQueue+0x64>)
 800efe0:	f7fd fc34 	bl	800c84c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800efe4:	4813      	ldr	r0, [pc, #76]	; (800f034 <prvCheckForValidListAndQueue+0x68>)
 800efe6:	f7fd fc31 	bl	800c84c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800efea:	4b13      	ldr	r3, [pc, #76]	; (800f038 <prvCheckForValidListAndQueue+0x6c>)
 800efec:	4a10      	ldr	r2, [pc, #64]	; (800f030 <prvCheckForValidListAndQueue+0x64>)
 800efee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eff0:	4b12      	ldr	r3, [pc, #72]	; (800f03c <prvCheckForValidListAndQueue+0x70>)
 800eff2:	4a10      	ldr	r2, [pc, #64]	; (800f034 <prvCheckForValidListAndQueue+0x68>)
 800eff4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eff6:	2300      	movs	r3, #0
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	4b11      	ldr	r3, [pc, #68]	; (800f040 <prvCheckForValidListAndQueue+0x74>)
 800effc:	4a11      	ldr	r2, [pc, #68]	; (800f044 <prvCheckForValidListAndQueue+0x78>)
 800effe:	2110      	movs	r1, #16
 800f000:	200a      	movs	r0, #10
 800f002:	f7fd fd3f 	bl	800ca84 <xQueueGenericCreateStatic>
 800f006:	4603      	mov	r3, r0
 800f008:	4a08      	ldr	r2, [pc, #32]	; (800f02c <prvCheckForValidListAndQueue+0x60>)
 800f00a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f00c:	4b07      	ldr	r3, [pc, #28]	; (800f02c <prvCheckForValidListAndQueue+0x60>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d005      	beq.n	800f020 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f014:	4b05      	ldr	r3, [pc, #20]	; (800f02c <prvCheckForValidListAndQueue+0x60>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	490b      	ldr	r1, [pc, #44]	; (800f048 <prvCheckForValidListAndQueue+0x7c>)
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fe fa12 	bl	800d444 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f020:	f000 f970 	bl	800f304 <vPortExitCritical>
}
 800f024:	bf00      	nop
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	20003454 	.word	0x20003454
 800f030:	20003424 	.word	0x20003424
 800f034:	20003438 	.word	0x20003438
 800f038:	2000344c 	.word	0x2000344c
 800f03c:	20003450 	.word	0x20003450
 800f040:	20003500 	.word	0x20003500
 800f044:	20003460 	.word	0x20003460
 800f048:	0801346c 	.word	0x0801346c

0800f04c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	3b04      	subs	r3, #4
 800f05c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	3b04      	subs	r3, #4
 800f06a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	f023 0201 	bic.w	r2, r3, #1
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	3b04      	subs	r3, #4
 800f07a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f07c:	4a0c      	ldr	r2, [pc, #48]	; (800f0b0 <pxPortInitialiseStack+0x64>)
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	3b14      	subs	r3, #20
 800f086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3b04      	subs	r3, #4
 800f092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f06f 0202 	mvn.w	r2, #2
 800f09a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	3b20      	subs	r3, #32
 800f0a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3714      	adds	r7, #20
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr
 800f0b0:	0800f0b5 	.word	0x0800f0b5

0800f0b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b085      	sub	sp, #20
 800f0b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f0be:	4b12      	ldr	r3, [pc, #72]	; (800f108 <prvTaskExitError+0x54>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0c6:	d00a      	beq.n	800f0de <prvTaskExitError+0x2a>
	__asm volatile
 800f0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0cc:	f383 8811 	msr	BASEPRI, r3
 800f0d0:	f3bf 8f6f 	isb	sy
 800f0d4:	f3bf 8f4f 	dsb	sy
 800f0d8:	60fb      	str	r3, [r7, #12]
}
 800f0da:	bf00      	nop
 800f0dc:	e7fe      	b.n	800f0dc <prvTaskExitError+0x28>
	__asm volatile
 800f0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e2:	f383 8811 	msr	BASEPRI, r3
 800f0e6:	f3bf 8f6f 	isb	sy
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	60bb      	str	r3, [r7, #8]
}
 800f0f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f0f2:	bf00      	nop
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d0fc      	beq.n	800f0f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f0fa:	bf00      	nop
 800f0fc:	bf00      	nop
 800f0fe:	3714      	adds	r7, #20
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr
 800f108:	20000148 	.word	0x20000148
 800f10c:	00000000 	.word	0x00000000

0800f110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f110:	4b07      	ldr	r3, [pc, #28]	; (800f130 <pxCurrentTCBConst2>)
 800f112:	6819      	ldr	r1, [r3, #0]
 800f114:	6808      	ldr	r0, [r1, #0]
 800f116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11a:	f380 8809 	msr	PSP, r0
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f04f 0000 	mov.w	r0, #0
 800f126:	f380 8811 	msr	BASEPRI, r0
 800f12a:	4770      	bx	lr
 800f12c:	f3af 8000 	nop.w

0800f130 <pxCurrentTCBConst2>:
 800f130:	20002f1c 	.word	0x20002f1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f134:	bf00      	nop
 800f136:	bf00      	nop

0800f138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f138:	4808      	ldr	r0, [pc, #32]	; (800f15c <prvPortStartFirstTask+0x24>)
 800f13a:	6800      	ldr	r0, [r0, #0]
 800f13c:	6800      	ldr	r0, [r0, #0]
 800f13e:	f380 8808 	msr	MSP, r0
 800f142:	f04f 0000 	mov.w	r0, #0
 800f146:	f380 8814 	msr	CONTROL, r0
 800f14a:	b662      	cpsie	i
 800f14c:	b661      	cpsie	f
 800f14e:	f3bf 8f4f 	dsb	sy
 800f152:	f3bf 8f6f 	isb	sy
 800f156:	df00      	svc	0
 800f158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f15a:	bf00      	nop
 800f15c:	e000ed08 	.word	0xe000ed08

0800f160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b086      	sub	sp, #24
 800f164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f166:	4b46      	ldr	r3, [pc, #280]	; (800f280 <xPortStartScheduler+0x120>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4a46      	ldr	r2, [pc, #280]	; (800f284 <xPortStartScheduler+0x124>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d10a      	bne.n	800f186 <xPortStartScheduler+0x26>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	613b      	str	r3, [r7, #16]
}
 800f182:	bf00      	nop
 800f184:	e7fe      	b.n	800f184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f186:	4b3e      	ldr	r3, [pc, #248]	; (800f280 <xPortStartScheduler+0x120>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4a3f      	ldr	r2, [pc, #252]	; (800f288 <xPortStartScheduler+0x128>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d10a      	bne.n	800f1a6 <xPortStartScheduler+0x46>
	__asm volatile
 800f190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	60fb      	str	r3, [r7, #12]
}
 800f1a2:	bf00      	nop
 800f1a4:	e7fe      	b.n	800f1a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1a6:	4b39      	ldr	r3, [pc, #228]	; (800f28c <xPortStartScheduler+0x12c>)
 800f1a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	22ff      	movs	r2, #255	; 0xff
 800f1b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f1c0:	78fb      	ldrb	r3, [r7, #3]
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1c8:	b2da      	uxtb	r2, r3
 800f1ca:	4b31      	ldr	r3, [pc, #196]	; (800f290 <xPortStartScheduler+0x130>)
 800f1cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f1ce:	4b31      	ldr	r3, [pc, #196]	; (800f294 <xPortStartScheduler+0x134>)
 800f1d0:	2207      	movs	r2, #7
 800f1d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1d4:	e009      	b.n	800f1ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f1d6:	4b2f      	ldr	r3, [pc, #188]	; (800f294 <xPortStartScheduler+0x134>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	4a2d      	ldr	r2, [pc, #180]	; (800f294 <xPortStartScheduler+0x134>)
 800f1de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f1e0:	78fb      	ldrb	r3, [r7, #3]
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	005b      	lsls	r3, r3, #1
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1ea:	78fb      	ldrb	r3, [r7, #3]
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1f2:	2b80      	cmp	r3, #128	; 0x80
 800f1f4:	d0ef      	beq.n	800f1d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f1f6:	4b27      	ldr	r3, [pc, #156]	; (800f294 <xPortStartScheduler+0x134>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f1c3 0307 	rsb	r3, r3, #7
 800f1fe:	2b04      	cmp	r3, #4
 800f200:	d00a      	beq.n	800f218 <xPortStartScheduler+0xb8>
	__asm volatile
 800f202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f206:	f383 8811 	msr	BASEPRI, r3
 800f20a:	f3bf 8f6f 	isb	sy
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	60bb      	str	r3, [r7, #8]
}
 800f214:	bf00      	nop
 800f216:	e7fe      	b.n	800f216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f218:	4b1e      	ldr	r3, [pc, #120]	; (800f294 <xPortStartScheduler+0x134>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	021b      	lsls	r3, r3, #8
 800f21e:	4a1d      	ldr	r2, [pc, #116]	; (800f294 <xPortStartScheduler+0x134>)
 800f220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f222:	4b1c      	ldr	r3, [pc, #112]	; (800f294 <xPortStartScheduler+0x134>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f22a:	4a1a      	ldr	r2, [pc, #104]	; (800f294 <xPortStartScheduler+0x134>)
 800f22c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	b2da      	uxtb	r2, r3
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f236:	4b18      	ldr	r3, [pc, #96]	; (800f298 <xPortStartScheduler+0x138>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	4a17      	ldr	r2, [pc, #92]	; (800f298 <xPortStartScheduler+0x138>)
 800f23c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f242:	4b15      	ldr	r3, [pc, #84]	; (800f298 <xPortStartScheduler+0x138>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4a14      	ldr	r2, [pc, #80]	; (800f298 <xPortStartScheduler+0x138>)
 800f248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f24c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f24e:	f000 f8dd 	bl	800f40c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f252:	4b12      	ldr	r3, [pc, #72]	; (800f29c <xPortStartScheduler+0x13c>)
 800f254:	2200      	movs	r2, #0
 800f256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f258:	f000 f8fc 	bl	800f454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f25c:	4b10      	ldr	r3, [pc, #64]	; (800f2a0 <xPortStartScheduler+0x140>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4a0f      	ldr	r2, [pc, #60]	; (800f2a0 <xPortStartScheduler+0x140>)
 800f262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f268:	f7ff ff66 	bl	800f138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f26c:	f7fe fe18 	bl	800dea0 <vTaskSwitchContext>
	prvTaskExitError();
 800f270:	f7ff ff20 	bl	800f0b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f274:	2300      	movs	r3, #0
}
 800f276:	4618      	mov	r0, r3
 800f278:	3718      	adds	r7, #24
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	e000ed00 	.word	0xe000ed00
 800f284:	410fc271 	.word	0x410fc271
 800f288:	410fc270 	.word	0x410fc270
 800f28c:	e000e400 	.word	0xe000e400
 800f290:	20003550 	.word	0x20003550
 800f294:	20003554 	.word	0x20003554
 800f298:	e000ed20 	.word	0xe000ed20
 800f29c:	20000148 	.word	0x20000148
 800f2a0:	e000ef34 	.word	0xe000ef34

0800f2a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	af00      	add	r7, sp, #0
	__asm volatile
 800f2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ae:	f383 8811 	msr	BASEPRI, r3
 800f2b2:	f3bf 8f6f 	isb	sy
 800f2b6:	f3bf 8f4f 	dsb	sy
 800f2ba:	607b      	str	r3, [r7, #4]
}
 800f2bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2be:	4b0f      	ldr	r3, [pc, #60]	; (800f2fc <vPortEnterCritical+0x58>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	4a0d      	ldr	r2, [pc, #52]	; (800f2fc <vPortEnterCritical+0x58>)
 800f2c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f2c8:	4b0c      	ldr	r3, [pc, #48]	; (800f2fc <vPortEnterCritical+0x58>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d10f      	bne.n	800f2f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f2d0:	4b0b      	ldr	r3, [pc, #44]	; (800f300 <vPortEnterCritical+0x5c>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00a      	beq.n	800f2f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2de:	f383 8811 	msr	BASEPRI, r3
 800f2e2:	f3bf 8f6f 	isb	sy
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	603b      	str	r3, [r7, #0]
}
 800f2ec:	bf00      	nop
 800f2ee:	e7fe      	b.n	800f2ee <vPortEnterCritical+0x4a>
	}
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr
 800f2fc:	20000148 	.word	0x20000148
 800f300:	e000ed04 	.word	0xe000ed04

0800f304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f30a:	4b12      	ldr	r3, [pc, #72]	; (800f354 <vPortExitCritical+0x50>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10a      	bne.n	800f328 <vPortExitCritical+0x24>
	__asm volatile
 800f312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f316:	f383 8811 	msr	BASEPRI, r3
 800f31a:	f3bf 8f6f 	isb	sy
 800f31e:	f3bf 8f4f 	dsb	sy
 800f322:	607b      	str	r3, [r7, #4]
}
 800f324:	bf00      	nop
 800f326:	e7fe      	b.n	800f326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f328:	4b0a      	ldr	r3, [pc, #40]	; (800f354 <vPortExitCritical+0x50>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	3b01      	subs	r3, #1
 800f32e:	4a09      	ldr	r2, [pc, #36]	; (800f354 <vPortExitCritical+0x50>)
 800f330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f332:	4b08      	ldr	r3, [pc, #32]	; (800f354 <vPortExitCritical+0x50>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d105      	bne.n	800f346 <vPortExitCritical+0x42>
 800f33a:	2300      	movs	r3, #0
 800f33c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	f383 8811 	msr	BASEPRI, r3
}
 800f344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f346:	bf00      	nop
 800f348:	370c      	adds	r7, #12
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	20000148 	.word	0x20000148
	...

0800f360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f360:	f3ef 8009 	mrs	r0, PSP
 800f364:	f3bf 8f6f 	isb	sy
 800f368:	4b15      	ldr	r3, [pc, #84]	; (800f3c0 <pxCurrentTCBConst>)
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	f01e 0f10 	tst.w	lr, #16
 800f370:	bf08      	it	eq
 800f372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f37a:	6010      	str	r0, [r2, #0]
 800f37c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f380:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f384:	f380 8811 	msr	BASEPRI, r0
 800f388:	f3bf 8f4f 	dsb	sy
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f7fe fd86 	bl	800dea0 <vTaskSwitchContext>
 800f394:	f04f 0000 	mov.w	r0, #0
 800f398:	f380 8811 	msr	BASEPRI, r0
 800f39c:	bc09      	pop	{r0, r3}
 800f39e:	6819      	ldr	r1, [r3, #0]
 800f3a0:	6808      	ldr	r0, [r1, #0]
 800f3a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a6:	f01e 0f10 	tst.w	lr, #16
 800f3aa:	bf08      	it	eq
 800f3ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3b0:	f380 8809 	msr	PSP, r0
 800f3b4:	f3bf 8f6f 	isb	sy
 800f3b8:	4770      	bx	lr
 800f3ba:	bf00      	nop
 800f3bc:	f3af 8000 	nop.w

0800f3c0 <pxCurrentTCBConst>:
 800f3c0:	20002f1c 	.word	0x20002f1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f3c4:	bf00      	nop
 800f3c6:	bf00      	nop

0800f3c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800f3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d2:	f383 8811 	msr	BASEPRI, r3
 800f3d6:	f3bf 8f6f 	isb	sy
 800f3da:	f3bf 8f4f 	dsb	sy
 800f3de:	607b      	str	r3, [r7, #4]
}
 800f3e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f3e2:	f7fe fca3 	bl	800dd2c <xTaskIncrementTick>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d003      	beq.n	800f3f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f3ec:	4b06      	ldr	r3, [pc, #24]	; (800f408 <xPortSysTickHandler+0x40>)
 800f3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3f2:	601a      	str	r2, [r3, #0]
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	f383 8811 	msr	BASEPRI, r3
}
 800f3fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f400:	bf00      	nop
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	e000ed04 	.word	0xe000ed04

0800f40c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f40c:	b480      	push	{r7}
 800f40e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f410:	4b0b      	ldr	r3, [pc, #44]	; (800f440 <vPortSetupTimerInterrupt+0x34>)
 800f412:	2200      	movs	r2, #0
 800f414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f416:	4b0b      	ldr	r3, [pc, #44]	; (800f444 <vPortSetupTimerInterrupt+0x38>)
 800f418:	2200      	movs	r2, #0
 800f41a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f41c:	4b0a      	ldr	r3, [pc, #40]	; (800f448 <vPortSetupTimerInterrupt+0x3c>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4a0a      	ldr	r2, [pc, #40]	; (800f44c <vPortSetupTimerInterrupt+0x40>)
 800f422:	fba2 2303 	umull	r2, r3, r2, r3
 800f426:	099b      	lsrs	r3, r3, #6
 800f428:	4a09      	ldr	r2, [pc, #36]	; (800f450 <vPortSetupTimerInterrupt+0x44>)
 800f42a:	3b01      	subs	r3, #1
 800f42c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f42e:	4b04      	ldr	r3, [pc, #16]	; (800f440 <vPortSetupTimerInterrupt+0x34>)
 800f430:	2207      	movs	r2, #7
 800f432:	601a      	str	r2, [r3, #0]
}
 800f434:	bf00      	nop
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr
 800f43e:	bf00      	nop
 800f440:	e000e010 	.word	0xe000e010
 800f444:	e000e018 	.word	0xe000e018
 800f448:	2000002c 	.word	0x2000002c
 800f44c:	10624dd3 	.word	0x10624dd3
 800f450:	e000e014 	.word	0xe000e014

0800f454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f464 <vPortEnableVFP+0x10>
 800f458:	6801      	ldr	r1, [r0, #0]
 800f45a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f45e:	6001      	str	r1, [r0, #0]
 800f460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f462:	bf00      	nop
 800f464:	e000ed88 	.word	0xe000ed88

0800f468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f46e:	f3ef 8305 	mrs	r3, IPSR
 800f472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2b0f      	cmp	r3, #15
 800f478:	d914      	bls.n	800f4a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f47a:	4a17      	ldr	r2, [pc, #92]	; (800f4d8 <vPortValidateInterruptPriority+0x70>)
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	4413      	add	r3, r2
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f484:	4b15      	ldr	r3, [pc, #84]	; (800f4dc <vPortValidateInterruptPriority+0x74>)
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	7afa      	ldrb	r2, [r7, #11]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d20a      	bcs.n	800f4a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f492:	f383 8811 	msr	BASEPRI, r3
 800f496:	f3bf 8f6f 	isb	sy
 800f49a:	f3bf 8f4f 	dsb	sy
 800f49e:	607b      	str	r3, [r7, #4]
}
 800f4a0:	bf00      	nop
 800f4a2:	e7fe      	b.n	800f4a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f4a4:	4b0e      	ldr	r3, [pc, #56]	; (800f4e0 <vPortValidateInterruptPriority+0x78>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f4ac:	4b0d      	ldr	r3, [pc, #52]	; (800f4e4 <vPortValidateInterruptPriority+0x7c>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d90a      	bls.n	800f4ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b8:	f383 8811 	msr	BASEPRI, r3
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	603b      	str	r3, [r7, #0]
}
 800f4c6:	bf00      	nop
 800f4c8:	e7fe      	b.n	800f4c8 <vPortValidateInterruptPriority+0x60>
	}
 800f4ca:	bf00      	nop
 800f4cc:	3714      	adds	r7, #20
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	e000e3f0 	.word	0xe000e3f0
 800f4dc:	20003550 	.word	0x20003550
 800f4e0:	e000ed0c 	.word	0xe000ed0c
 800f4e4:	20003554 	.word	0x20003554

0800f4e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b08a      	sub	sp, #40	; 0x28
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f4f4:	f7fe face 	bl	800da94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f4f8:	4b5b      	ldr	r3, [pc, #364]	; (800f668 <pvPortMalloc+0x180>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d101      	bne.n	800f504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f500:	f000 f92c 	bl	800f75c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f504:	4b59      	ldr	r3, [pc, #356]	; (800f66c <pvPortMalloc+0x184>)
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4013      	ands	r3, r2
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f040 8093 	bne.w	800f638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d01d      	beq.n	800f554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f518:	2208      	movs	r2, #8
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4413      	add	r3, r2
 800f51e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f003 0307 	and.w	r3, r3, #7
 800f526:	2b00      	cmp	r3, #0
 800f528:	d014      	beq.n	800f554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f023 0307 	bic.w	r3, r3, #7
 800f530:	3308      	adds	r3, #8
 800f532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f003 0307 	and.w	r3, r3, #7
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00a      	beq.n	800f554 <pvPortMalloc+0x6c>
	__asm volatile
 800f53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f542:	f383 8811 	msr	BASEPRI, r3
 800f546:	f3bf 8f6f 	isb	sy
 800f54a:	f3bf 8f4f 	dsb	sy
 800f54e:	617b      	str	r3, [r7, #20]
}
 800f550:	bf00      	nop
 800f552:	e7fe      	b.n	800f552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d06e      	beq.n	800f638 <pvPortMalloc+0x150>
 800f55a:	4b45      	ldr	r3, [pc, #276]	; (800f670 <pvPortMalloc+0x188>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	429a      	cmp	r2, r3
 800f562:	d869      	bhi.n	800f638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f564:	4b43      	ldr	r3, [pc, #268]	; (800f674 <pvPortMalloc+0x18c>)
 800f566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f568:	4b42      	ldr	r3, [pc, #264]	; (800f674 <pvPortMalloc+0x18c>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f56e:	e004      	b.n	800f57a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	429a      	cmp	r2, r3
 800f582:	d903      	bls.n	800f58c <pvPortMalloc+0xa4>
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d1f1      	bne.n	800f570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f58c:	4b36      	ldr	r3, [pc, #216]	; (800f668 <pvPortMalloc+0x180>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f592:	429a      	cmp	r2, r3
 800f594:	d050      	beq.n	800f638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f596:	6a3b      	ldr	r3, [r7, #32]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2208      	movs	r2, #8
 800f59c:	4413      	add	r3, r2
 800f59e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	6a3b      	ldr	r3, [r7, #32]
 800f5a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5aa:	685a      	ldr	r2, [r3, #4]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	1ad2      	subs	r2, r2, r3
 800f5b0:	2308      	movs	r3, #8
 800f5b2:	005b      	lsls	r3, r3, #1
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d91f      	bls.n	800f5f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4413      	add	r3, r2
 800f5be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	f003 0307 	and.w	r3, r3, #7
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00a      	beq.n	800f5e0 <pvPortMalloc+0xf8>
	__asm volatile
 800f5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	613b      	str	r3, [r7, #16]
}
 800f5dc:	bf00      	nop
 800f5de:	e7fe      	b.n	800f5de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e2:	685a      	ldr	r2, [r3, #4]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	1ad2      	subs	r2, r2, r3
 800f5e8:	69bb      	ldr	r3, [r7, #24]
 800f5ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f5f2:	69b8      	ldr	r0, [r7, #24]
 800f5f4:	f000 f914 	bl	800f820 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f5f8:	4b1d      	ldr	r3, [pc, #116]	; (800f670 <pvPortMalloc+0x188>)
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	1ad3      	subs	r3, r2, r3
 800f602:	4a1b      	ldr	r2, [pc, #108]	; (800f670 <pvPortMalloc+0x188>)
 800f604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f606:	4b1a      	ldr	r3, [pc, #104]	; (800f670 <pvPortMalloc+0x188>)
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	4b1b      	ldr	r3, [pc, #108]	; (800f678 <pvPortMalloc+0x190>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d203      	bcs.n	800f61a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f612:	4b17      	ldr	r3, [pc, #92]	; (800f670 <pvPortMalloc+0x188>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	4a18      	ldr	r2, [pc, #96]	; (800f678 <pvPortMalloc+0x190>)
 800f618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61c:	685a      	ldr	r2, [r3, #4]
 800f61e:	4b13      	ldr	r3, [pc, #76]	; (800f66c <pvPortMalloc+0x184>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	431a      	orrs	r2, r3
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	2200      	movs	r2, #0
 800f62c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f62e:	4b13      	ldr	r3, [pc, #76]	; (800f67c <pvPortMalloc+0x194>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	3301      	adds	r3, #1
 800f634:	4a11      	ldr	r2, [pc, #68]	; (800f67c <pvPortMalloc+0x194>)
 800f636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f638:	f7fe fa3a 	bl	800dab0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	f003 0307 	and.w	r3, r3, #7
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00a      	beq.n	800f65c <pvPortMalloc+0x174>
	__asm volatile
 800f646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64a:	f383 8811 	msr	BASEPRI, r3
 800f64e:	f3bf 8f6f 	isb	sy
 800f652:	f3bf 8f4f 	dsb	sy
 800f656:	60fb      	str	r3, [r7, #12]
}
 800f658:	bf00      	nop
 800f65a:	e7fe      	b.n	800f65a <pvPortMalloc+0x172>
	return pvReturn;
 800f65c:	69fb      	ldr	r3, [r7, #28]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3728      	adds	r7, #40	; 0x28
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	200073e0 	.word	0x200073e0
 800f66c:	200073f4 	.word	0x200073f4
 800f670:	200073e4 	.word	0x200073e4
 800f674:	200073d8 	.word	0x200073d8
 800f678:	200073e8 	.word	0x200073e8
 800f67c:	200073ec 	.word	0x200073ec

0800f680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d04d      	beq.n	800f72e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f692:	2308      	movs	r3, #8
 800f694:	425b      	negs	r3, r3
 800f696:	697a      	ldr	r2, [r7, #20]
 800f698:	4413      	add	r3, r2
 800f69a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	685a      	ldr	r2, [r3, #4]
 800f6a4:	4b24      	ldr	r3, [pc, #144]	; (800f738 <vPortFree+0xb8>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4013      	ands	r3, r2
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d10a      	bne.n	800f6c4 <vPortFree+0x44>
	__asm volatile
 800f6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b2:	f383 8811 	msr	BASEPRI, r3
 800f6b6:	f3bf 8f6f 	isb	sy
 800f6ba:	f3bf 8f4f 	dsb	sy
 800f6be:	60fb      	str	r3, [r7, #12]
}
 800f6c0:	bf00      	nop
 800f6c2:	e7fe      	b.n	800f6c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00a      	beq.n	800f6e2 <vPortFree+0x62>
	__asm volatile
 800f6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d0:	f383 8811 	msr	BASEPRI, r3
 800f6d4:	f3bf 8f6f 	isb	sy
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	60bb      	str	r3, [r7, #8]
}
 800f6de:	bf00      	nop
 800f6e0:	e7fe      	b.n	800f6e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	685a      	ldr	r2, [r3, #4]
 800f6e6:	4b14      	ldr	r3, [pc, #80]	; (800f738 <vPortFree+0xb8>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4013      	ands	r3, r2
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d01e      	beq.n	800f72e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d11a      	bne.n	800f72e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	685a      	ldr	r2, [r3, #4]
 800f6fc:	4b0e      	ldr	r3, [pc, #56]	; (800f738 <vPortFree+0xb8>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	43db      	mvns	r3, r3
 800f702:	401a      	ands	r2, r3
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f708:	f7fe f9c4 	bl	800da94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	685a      	ldr	r2, [r3, #4]
 800f710:	4b0a      	ldr	r3, [pc, #40]	; (800f73c <vPortFree+0xbc>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4413      	add	r3, r2
 800f716:	4a09      	ldr	r2, [pc, #36]	; (800f73c <vPortFree+0xbc>)
 800f718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f71a:	6938      	ldr	r0, [r7, #16]
 800f71c:	f000 f880 	bl	800f820 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f720:	4b07      	ldr	r3, [pc, #28]	; (800f740 <vPortFree+0xc0>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	3301      	adds	r3, #1
 800f726:	4a06      	ldr	r2, [pc, #24]	; (800f740 <vPortFree+0xc0>)
 800f728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f72a:	f7fe f9c1 	bl	800dab0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f72e:	bf00      	nop
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	200073f4 	.word	0x200073f4
 800f73c:	200073e4 	.word	0x200073e4
 800f740:	200073f0 	.word	0x200073f0

0800f744 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800f744:	b480      	push	{r7}
 800f746:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800f748:	4b03      	ldr	r3, [pc, #12]	; (800f758 <xPortGetFreeHeapSize+0x14>)
 800f74a:	681b      	ldr	r3, [r3, #0]
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	200073e4 	.word	0x200073e4

0800f75c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f762:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800f766:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f768:	4b27      	ldr	r3, [pc, #156]	; (800f808 <prvHeapInit+0xac>)
 800f76a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f003 0307 	and.w	r3, r3, #7
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00c      	beq.n	800f790 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	3307      	adds	r3, #7
 800f77a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f023 0307 	bic.w	r3, r3, #7
 800f782:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	1ad3      	subs	r3, r2, r3
 800f78a:	4a1f      	ldr	r2, [pc, #124]	; (800f808 <prvHeapInit+0xac>)
 800f78c:	4413      	add	r3, r2
 800f78e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f794:	4a1d      	ldr	r2, [pc, #116]	; (800f80c <prvHeapInit+0xb0>)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f79a:	4b1c      	ldr	r3, [pc, #112]	; (800f80c <prvHeapInit+0xb0>)
 800f79c:	2200      	movs	r2, #0
 800f79e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f7a8:	2208      	movs	r2, #8
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	1a9b      	subs	r3, r3, r2
 800f7ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f023 0307 	bic.w	r3, r3, #7
 800f7b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	4a15      	ldr	r2, [pc, #84]	; (800f810 <prvHeapInit+0xb4>)
 800f7bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f7be:	4b14      	ldr	r3, [pc, #80]	; (800f810 <prvHeapInit+0xb4>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f7c6:	4b12      	ldr	r3, [pc, #72]	; (800f810 <prvHeapInit+0xb4>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	1ad2      	subs	r2, r2, r3
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f7dc:	4b0c      	ldr	r3, [pc, #48]	; (800f810 <prvHeapInit+0xb4>)
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	4a0a      	ldr	r2, [pc, #40]	; (800f814 <prvHeapInit+0xb8>)
 800f7ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	4a09      	ldr	r2, [pc, #36]	; (800f818 <prvHeapInit+0xbc>)
 800f7f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f7f4:	4b09      	ldr	r3, [pc, #36]	; (800f81c <prvHeapInit+0xc0>)
 800f7f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f7fa:	601a      	str	r2, [r3, #0]
}
 800f7fc:	bf00      	nop
 800f7fe:	3714      	adds	r7, #20
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr
 800f808:	20003558 	.word	0x20003558
 800f80c:	200073d8 	.word	0x200073d8
 800f810:	200073e0 	.word	0x200073e0
 800f814:	200073e8 	.word	0x200073e8
 800f818:	200073e4 	.word	0x200073e4
 800f81c:	200073f4 	.word	0x200073f4

0800f820 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f820:	b480      	push	{r7}
 800f822:	b085      	sub	sp, #20
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f828:	4b28      	ldr	r3, [pc, #160]	; (800f8cc <prvInsertBlockIntoFreeList+0xac>)
 800f82a:	60fb      	str	r3, [r7, #12]
 800f82c:	e002      	b.n	800f834 <prvInsertBlockIntoFreeList+0x14>
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	60fb      	str	r3, [r7, #12]
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	687a      	ldr	r2, [r7, #4]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d8f7      	bhi.n	800f82e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	68ba      	ldr	r2, [r7, #8]
 800f848:	4413      	add	r3, r2
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d108      	bne.n	800f862 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	685a      	ldr	r2, [r3, #4]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	441a      	add	r2, r3
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	68ba      	ldr	r2, [r7, #8]
 800f86c:	441a      	add	r2, r3
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	429a      	cmp	r2, r3
 800f874:	d118      	bne.n	800f8a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681a      	ldr	r2, [r3, #0]
 800f87a:	4b15      	ldr	r3, [pc, #84]	; (800f8d0 <prvInsertBlockIntoFreeList+0xb0>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d00d      	beq.n	800f89e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	685a      	ldr	r2, [r3, #4]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	441a      	add	r2, r3
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	601a      	str	r2, [r3, #0]
 800f89c:	e008      	b.n	800f8b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f89e:	4b0c      	ldr	r3, [pc, #48]	; (800f8d0 <prvInsertBlockIntoFreeList+0xb0>)
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	601a      	str	r2, [r3, #0]
 800f8a6:	e003      	b.n	800f8b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f8b0:	68fa      	ldr	r2, [r7, #12]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d002      	beq.n	800f8be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	687a      	ldr	r2, [r7, #4]
 800f8bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8be:	bf00      	nop
 800f8c0:	3714      	adds	r7, #20
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr
 800f8ca:	bf00      	nop
 800f8cc:	200073d8 	.word	0x200073d8
 800f8d0:	200073e0 	.word	0x200073e0

0800f8d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f8d8:	2200      	movs	r2, #0
 800f8da:	4912      	ldr	r1, [pc, #72]	; (800f924 <MX_USB_DEVICE_Init+0x50>)
 800f8dc:	4812      	ldr	r0, [pc, #72]	; (800f928 <MX_USB_DEVICE_Init+0x54>)
 800f8de:	f7fb fbab 	bl	800b038 <USBD_Init>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d001      	beq.n	800f8ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f8e8:	f7f3 fb92 	bl	8003010 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f8ec:	490f      	ldr	r1, [pc, #60]	; (800f92c <MX_USB_DEVICE_Init+0x58>)
 800f8ee:	480e      	ldr	r0, [pc, #56]	; (800f928 <MX_USB_DEVICE_Init+0x54>)
 800f8f0:	f7fb fbd2 	bl	800b098 <USBD_RegisterClass>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d001      	beq.n	800f8fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f8fa:	f7f3 fb89 	bl	8003010 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f8fe:	490c      	ldr	r1, [pc, #48]	; (800f930 <MX_USB_DEVICE_Init+0x5c>)
 800f900:	4809      	ldr	r0, [pc, #36]	; (800f928 <MX_USB_DEVICE_Init+0x54>)
 800f902:	f7fb faf3 	bl	800aeec <USBD_CDC_RegisterInterface>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d001      	beq.n	800f910 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f90c:	f7f3 fb80 	bl	8003010 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f910:	4805      	ldr	r0, [pc, #20]	; (800f928 <MX_USB_DEVICE_Init+0x54>)
 800f912:	f7fb fbe8 	bl	800b0e6 <USBD_Start>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d001      	beq.n	800f920 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f91c:	f7f3 fb78 	bl	8003010 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f920:	bf00      	nop
 800f922:	bd80      	pop	{r7, pc}
 800f924:	20000160 	.word	0x20000160
 800f928:	2000d610 	.word	0x2000d610
 800f92c:	20000044 	.word	0x20000044
 800f930:	2000014c 	.word	0x2000014c

0800f934 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f938:	2200      	movs	r2, #0
 800f93a:	4905      	ldr	r1, [pc, #20]	; (800f950 <CDC_Init_FS+0x1c>)
 800f93c:	4805      	ldr	r0, [pc, #20]	; (800f954 <CDC_Init_FS+0x20>)
 800f93e:	f7fb faea 	bl	800af16 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f942:	4905      	ldr	r1, [pc, #20]	; (800f958 <CDC_Init_FS+0x24>)
 800f944:	4803      	ldr	r0, [pc, #12]	; (800f954 <CDC_Init_FS+0x20>)
 800f946:	f7fb fb04 	bl	800af52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f94a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	bd80      	pop	{r7, pc}
 800f950:	2000e0e0 	.word	0x2000e0e0
 800f954:	2000d610 	.word	0x2000d610
 800f958:	2000d8e0 	.word	0x2000d8e0

0800f95c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f95c:	b480      	push	{r7}
 800f95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f960:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f962:	4618      	mov	r0, r3
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	4603      	mov	r3, r0
 800f974:	6039      	str	r1, [r7, #0]
 800f976:	71fb      	strb	r3, [r7, #7]
 800f978:	4613      	mov	r3, r2
 800f97a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f97c:	79fb      	ldrb	r3, [r7, #7]
 800f97e:	2b23      	cmp	r3, #35	; 0x23
 800f980:	d84a      	bhi.n	800fa18 <CDC_Control_FS+0xac>
 800f982:	a201      	add	r2, pc, #4	; (adr r2, 800f988 <CDC_Control_FS+0x1c>)
 800f984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f988:	0800fa19 	.word	0x0800fa19
 800f98c:	0800fa19 	.word	0x0800fa19
 800f990:	0800fa19 	.word	0x0800fa19
 800f994:	0800fa19 	.word	0x0800fa19
 800f998:	0800fa19 	.word	0x0800fa19
 800f99c:	0800fa19 	.word	0x0800fa19
 800f9a0:	0800fa19 	.word	0x0800fa19
 800f9a4:	0800fa19 	.word	0x0800fa19
 800f9a8:	0800fa19 	.word	0x0800fa19
 800f9ac:	0800fa19 	.word	0x0800fa19
 800f9b0:	0800fa19 	.word	0x0800fa19
 800f9b4:	0800fa19 	.word	0x0800fa19
 800f9b8:	0800fa19 	.word	0x0800fa19
 800f9bc:	0800fa19 	.word	0x0800fa19
 800f9c0:	0800fa19 	.word	0x0800fa19
 800f9c4:	0800fa19 	.word	0x0800fa19
 800f9c8:	0800fa19 	.word	0x0800fa19
 800f9cc:	0800fa19 	.word	0x0800fa19
 800f9d0:	0800fa19 	.word	0x0800fa19
 800f9d4:	0800fa19 	.word	0x0800fa19
 800f9d8:	0800fa19 	.word	0x0800fa19
 800f9dc:	0800fa19 	.word	0x0800fa19
 800f9e0:	0800fa19 	.word	0x0800fa19
 800f9e4:	0800fa19 	.word	0x0800fa19
 800f9e8:	0800fa19 	.word	0x0800fa19
 800f9ec:	0800fa19 	.word	0x0800fa19
 800f9f0:	0800fa19 	.word	0x0800fa19
 800f9f4:	0800fa19 	.word	0x0800fa19
 800f9f8:	0800fa19 	.word	0x0800fa19
 800f9fc:	0800fa19 	.word	0x0800fa19
 800fa00:	0800fa19 	.word	0x0800fa19
 800fa04:	0800fa19 	.word	0x0800fa19
 800fa08:	0800fa19 	.word	0x0800fa19
 800fa0c:	0800fa19 	.word	0x0800fa19
 800fa10:	0800fa19 	.word	0x0800fa19
 800fa14:	0800fa19 	.word	0x0800fa19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fa18:	bf00      	nop
  }

  return (USBD_OK);
 800fa1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fa32:	6879      	ldr	r1, [r7, #4]
 800fa34:	4805      	ldr	r0, [pc, #20]	; (800fa4c <CDC_Receive_FS+0x24>)
 800fa36:	f7fb fa8c 	bl	800af52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fa3a:	4804      	ldr	r0, [pc, #16]	; (800fa4c <CDC_Receive_FS+0x24>)
 800fa3c:	f7fb fad2 	bl	800afe4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fa40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3708      	adds	r7, #8
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	2000d610 	.word	0x2000d610

0800fa50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fa60:	4b0d      	ldr	r3, [pc, #52]	; (800fa98 <CDC_Transmit_FS+0x48>)
 800fa62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d001      	beq.n	800fa76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fa72:	2301      	movs	r3, #1
 800fa74:	e00b      	b.n	800fa8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fa76:	887b      	ldrh	r3, [r7, #2]
 800fa78:	461a      	mov	r2, r3
 800fa7a:	6879      	ldr	r1, [r7, #4]
 800fa7c:	4806      	ldr	r0, [pc, #24]	; (800fa98 <CDC_Transmit_FS+0x48>)
 800fa7e:	f7fb fa4a 	bl	800af16 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fa82:	4805      	ldr	r0, [pc, #20]	; (800fa98 <CDC_Transmit_FS+0x48>)
 800fa84:	f7fb fa7e 	bl	800af84 <USBD_CDC_TransmitPacket>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	2000d610 	.word	0x2000d610

0800fa9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b087      	sub	sp, #28
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	60f8      	str	r0, [r7, #12]
 800faa4:	60b9      	str	r1, [r7, #8]
 800faa6:	4613      	mov	r3, r2
 800faa8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800faaa:	2300      	movs	r3, #0
 800faac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800faae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	371c      	adds	r7, #28
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr
	...

0800fac0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	4603      	mov	r3, r0
 800fac8:	6039      	str	r1, [r7, #0]
 800faca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	2212      	movs	r2, #18
 800fad0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fad2:	4b03      	ldr	r3, [pc, #12]	; (800fae0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	370c      	adds	r7, #12
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr
 800fae0:	2000017c 	.word	0x2000017c

0800fae4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	4603      	mov	r3, r0
 800faec:	6039      	str	r1, [r7, #0]
 800faee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	2204      	movs	r2, #4
 800faf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800faf6:	4b03      	ldr	r3, [pc, #12]	; (800fb04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	370c      	adds	r7, #12
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr
 800fb04:	20000190 	.word	0x20000190

0800fb08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	4603      	mov	r3, r0
 800fb10:	6039      	str	r1, [r7, #0]
 800fb12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb14:	79fb      	ldrb	r3, [r7, #7]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d105      	bne.n	800fb26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fb1a:	683a      	ldr	r2, [r7, #0]
 800fb1c:	4907      	ldr	r1, [pc, #28]	; (800fb3c <USBD_FS_ProductStrDescriptor+0x34>)
 800fb1e:	4808      	ldr	r0, [pc, #32]	; (800fb40 <USBD_FS_ProductStrDescriptor+0x38>)
 800fb20:	f7fc fb13 	bl	800c14a <USBD_GetString>
 800fb24:	e004      	b.n	800fb30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fb26:	683a      	ldr	r2, [r7, #0]
 800fb28:	4904      	ldr	r1, [pc, #16]	; (800fb3c <USBD_FS_ProductStrDescriptor+0x34>)
 800fb2a:	4805      	ldr	r0, [pc, #20]	; (800fb40 <USBD_FS_ProductStrDescriptor+0x38>)
 800fb2c:	f7fc fb0d 	bl	800c14a <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb30:	4b02      	ldr	r3, [pc, #8]	; (800fb3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3708      	adds	r7, #8
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	2000e8e0 	.word	0x2000e8e0
 800fb40:	08013474 	.word	0x08013474

0800fb44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	6039      	str	r1, [r7, #0]
 800fb4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fb50:	683a      	ldr	r2, [r7, #0]
 800fb52:	4904      	ldr	r1, [pc, #16]	; (800fb64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fb54:	4804      	ldr	r0, [pc, #16]	; (800fb68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fb56:	f7fc faf8 	bl	800c14a <USBD_GetString>
  return USBD_StrDesc;
 800fb5a:	4b02      	ldr	r3, [pc, #8]	; (800fb64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3708      	adds	r7, #8
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	2000e8e0 	.word	0x2000e8e0
 800fb68:	0801348c 	.word	0x0801348c

0800fb6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	4603      	mov	r3, r0
 800fb74:	6039      	str	r1, [r7, #0]
 800fb76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	221a      	movs	r2, #26
 800fb7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fb7e:	f000 f843 	bl	800fc08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fb82:	4b02      	ldr	r3, [pc, #8]	; (800fb8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	20000194 	.word	0x20000194

0800fb90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	4603      	mov	r3, r0
 800fb98:	6039      	str	r1, [r7, #0]
 800fb9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fb9c:	79fb      	ldrb	r3, [r7, #7]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d105      	bne.n	800fbae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fba2:	683a      	ldr	r2, [r7, #0]
 800fba4:	4907      	ldr	r1, [pc, #28]	; (800fbc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fba6:	4808      	ldr	r0, [pc, #32]	; (800fbc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fba8:	f7fc facf 	bl	800c14a <USBD_GetString>
 800fbac:	e004      	b.n	800fbb8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	4904      	ldr	r1, [pc, #16]	; (800fbc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fbb2:	4805      	ldr	r0, [pc, #20]	; (800fbc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fbb4:	f7fc fac9 	bl	800c14a <USBD_GetString>
  }
  return USBD_StrDesc;
 800fbb8:	4b02      	ldr	r3, [pc, #8]	; (800fbc4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3708      	adds	r7, #8
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	2000e8e0 	.word	0x2000e8e0
 800fbc8:	080134a0 	.word	0x080134a0

0800fbcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	6039      	str	r1, [r7, #0]
 800fbd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fbd8:	79fb      	ldrb	r3, [r7, #7]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d105      	bne.n	800fbea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fbde:	683a      	ldr	r2, [r7, #0]
 800fbe0:	4907      	ldr	r1, [pc, #28]	; (800fc00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fbe2:	4808      	ldr	r0, [pc, #32]	; (800fc04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fbe4:	f7fc fab1 	bl	800c14a <USBD_GetString>
 800fbe8:	e004      	b.n	800fbf4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fbea:	683a      	ldr	r2, [r7, #0]
 800fbec:	4904      	ldr	r1, [pc, #16]	; (800fc00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fbee:	4805      	ldr	r0, [pc, #20]	; (800fc04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fbf0:	f7fc faab 	bl	800c14a <USBD_GetString>
  }
  return USBD_StrDesc;
 800fbf4:	4b02      	ldr	r3, [pc, #8]	; (800fc00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	2000e8e0 	.word	0x2000e8e0
 800fc04:	080134ac 	.word	0x080134ac

0800fc08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fc0e:	4b0f      	ldr	r3, [pc, #60]	; (800fc4c <Get_SerialNum+0x44>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fc14:	4b0e      	ldr	r3, [pc, #56]	; (800fc50 <Get_SerialNum+0x48>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fc1a:	4b0e      	ldr	r3, [pc, #56]	; (800fc54 <Get_SerialNum+0x4c>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4413      	add	r3, r2
 800fc26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d009      	beq.n	800fc42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fc2e:	2208      	movs	r2, #8
 800fc30:	4909      	ldr	r1, [pc, #36]	; (800fc58 <Get_SerialNum+0x50>)
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	f000 f814 	bl	800fc60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fc38:	2204      	movs	r2, #4
 800fc3a:	4908      	ldr	r1, [pc, #32]	; (800fc5c <Get_SerialNum+0x54>)
 800fc3c:	68b8      	ldr	r0, [r7, #8]
 800fc3e:	f000 f80f 	bl	800fc60 <IntToUnicode>
  }
}
 800fc42:	bf00      	nop
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	1fff7a10 	.word	0x1fff7a10
 800fc50:	1fff7a14 	.word	0x1fff7a14
 800fc54:	1fff7a18 	.word	0x1fff7a18
 800fc58:	20000196 	.word	0x20000196
 800fc5c:	200001a6 	.word	0x200001a6

0800fc60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b087      	sub	sp, #28
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fc72:	2300      	movs	r3, #0
 800fc74:	75fb      	strb	r3, [r7, #23]
 800fc76:	e027      	b.n	800fcc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	0f1b      	lsrs	r3, r3, #28
 800fc7c:	2b09      	cmp	r3, #9
 800fc7e:	d80b      	bhi.n	800fc98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	0f1b      	lsrs	r3, r3, #28
 800fc84:	b2da      	uxtb	r2, r3
 800fc86:	7dfb      	ldrb	r3, [r7, #23]
 800fc88:	005b      	lsls	r3, r3, #1
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	440b      	add	r3, r1
 800fc90:	3230      	adds	r2, #48	; 0x30
 800fc92:	b2d2      	uxtb	r2, r2
 800fc94:	701a      	strb	r2, [r3, #0]
 800fc96:	e00a      	b.n	800fcae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	0f1b      	lsrs	r3, r3, #28
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	7dfb      	ldrb	r3, [r7, #23]
 800fca0:	005b      	lsls	r3, r3, #1
 800fca2:	4619      	mov	r1, r3
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	440b      	add	r3, r1
 800fca8:	3237      	adds	r2, #55	; 0x37
 800fcaa:	b2d2      	uxtb	r2, r2
 800fcac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	011b      	lsls	r3, r3, #4
 800fcb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fcb4:	7dfb      	ldrb	r3, [r7, #23]
 800fcb6:	005b      	lsls	r3, r3, #1
 800fcb8:	3301      	adds	r3, #1
 800fcba:	68ba      	ldr	r2, [r7, #8]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fcc2:	7dfb      	ldrb	r3, [r7, #23]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	75fb      	strb	r3, [r7, #23]
 800fcc8:	7dfa      	ldrb	r2, [r7, #23]
 800fcca:	79fb      	ldrb	r3, [r7, #7]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d3d3      	bcc.n	800fc78 <IntToUnicode+0x18>
  }
}
 800fcd0:	bf00      	nop
 800fcd2:	bf00      	nop
 800fcd4:	371c      	adds	r7, #28
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr
	...

0800fce0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b08a      	sub	sp, #40	; 0x28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fce8:	f107 0314 	add.w	r3, r7, #20
 800fcec:	2200      	movs	r2, #0
 800fcee:	601a      	str	r2, [r3, #0]
 800fcf0:	605a      	str	r2, [r3, #4]
 800fcf2:	609a      	str	r2, [r3, #8]
 800fcf4:	60da      	str	r2, [r3, #12]
 800fcf6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fd00:	d147      	bne.n	800fd92 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fd02:	2300      	movs	r3, #0
 800fd04:	613b      	str	r3, [r7, #16]
 800fd06:	4b25      	ldr	r3, [pc, #148]	; (800fd9c <HAL_PCD_MspInit+0xbc>)
 800fd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd0a:	4a24      	ldr	r2, [pc, #144]	; (800fd9c <HAL_PCD_MspInit+0xbc>)
 800fd0c:	f043 0301 	orr.w	r3, r3, #1
 800fd10:	6313      	str	r3, [r2, #48]	; 0x30
 800fd12:	4b22      	ldr	r3, [pc, #136]	; (800fd9c <HAL_PCD_MspInit+0xbc>)
 800fd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd16:	f003 0301 	and.w	r3, r3, #1
 800fd1a:	613b      	str	r3, [r7, #16]
 800fd1c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800fd1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fd24:	2300      	movs	r3, #0
 800fd26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800fd2c:	f107 0314 	add.w	r3, r7, #20
 800fd30:	4619      	mov	r1, r3
 800fd32:	481b      	ldr	r0, [pc, #108]	; (800fda0 <HAL_PCD_MspInit+0xc0>)
 800fd34:	f7f5 f84e 	bl	8004dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800fd38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800fd3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd3e:	2302      	movs	r3, #2
 800fd40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd46:	2300      	movs	r3, #0
 800fd48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fd4a:	230a      	movs	r3, #10
 800fd4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd4e:	f107 0314 	add.w	r3, r7, #20
 800fd52:	4619      	mov	r1, r3
 800fd54:	4812      	ldr	r0, [pc, #72]	; (800fda0 <HAL_PCD_MspInit+0xc0>)
 800fd56:	f7f5 f83d 	bl	8004dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fd5a:	4b10      	ldr	r3, [pc, #64]	; (800fd9c <HAL_PCD_MspInit+0xbc>)
 800fd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd5e:	4a0f      	ldr	r2, [pc, #60]	; (800fd9c <HAL_PCD_MspInit+0xbc>)
 800fd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd64:	6353      	str	r3, [r2, #52]	; 0x34
 800fd66:	2300      	movs	r3, #0
 800fd68:	60fb      	str	r3, [r7, #12]
 800fd6a:	4b0c      	ldr	r3, [pc, #48]	; (800fd9c <HAL_PCD_MspInit+0xbc>)
 800fd6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd6e:	4a0b      	ldr	r2, [pc, #44]	; (800fd9c <HAL_PCD_MspInit+0xbc>)
 800fd70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fd74:	6453      	str	r3, [r2, #68]	; 0x44
 800fd76:	4b09      	ldr	r3, [pc, #36]	; (800fd9c <HAL_PCD_MspInit+0xbc>)
 800fd78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd7e:	60fb      	str	r3, [r7, #12]
 800fd80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fd82:	2200      	movs	r2, #0
 800fd84:	2105      	movs	r1, #5
 800fd86:	2043      	movs	r0, #67	; 0x43
 800fd88:	f7f4 fb8c 	bl	80044a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fd8c:	2043      	movs	r0, #67	; 0x43
 800fd8e:	f7f4 fba5 	bl	80044dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fd92:	bf00      	nop
 800fd94:	3728      	adds	r7, #40	; 0x28
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	40023800 	.word	0x40023800
 800fda0:	40020000 	.word	0x40020000

0800fda4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fdb8:	4619      	mov	r1, r3
 800fdba:	4610      	mov	r0, r2
 800fdbc:	f7fb f9de 	bl	800b17c <USBD_LL_SetupStage>
}
 800fdc0:	bf00      	nop
 800fdc2:	3708      	adds	r7, #8
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fdda:	78fa      	ldrb	r2, [r7, #3]
 800fddc:	6879      	ldr	r1, [r7, #4]
 800fdde:	4613      	mov	r3, r2
 800fde0:	00db      	lsls	r3, r3, #3
 800fde2:	1a9b      	subs	r3, r3, r2
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	440b      	add	r3, r1
 800fde8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fdec:	681a      	ldr	r2, [r3, #0]
 800fdee:	78fb      	ldrb	r3, [r7, #3]
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	f7fb fa18 	bl	800b226 <USBD_LL_DataOutStage>
}
 800fdf6:	bf00      	nop
 800fdf8:	3708      	adds	r7, #8
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}

0800fdfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b082      	sub	sp, #8
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
 800fe06:	460b      	mov	r3, r1
 800fe08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fe10:	78fa      	ldrb	r2, [r7, #3]
 800fe12:	6879      	ldr	r1, [r7, #4]
 800fe14:	4613      	mov	r3, r2
 800fe16:	00db      	lsls	r3, r3, #3
 800fe18:	1a9b      	subs	r3, r3, r2
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	440b      	add	r3, r1
 800fe1e:	3348      	adds	r3, #72	; 0x48
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	78fb      	ldrb	r3, [r7, #3]
 800fe24:	4619      	mov	r1, r3
 800fe26:	f7fb fa61 	bl	800b2ec <USBD_LL_DataInStage>
}
 800fe2a:	bf00      	nop
 800fe2c:	3708      	adds	r7, #8
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}

0800fe32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe32:	b580      	push	{r7, lr}
 800fe34:	b082      	sub	sp, #8
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7fb fb75 	bl	800b530 <USBD_LL_SOF>
}
 800fe46:	bf00      	nop
 800fe48:	3708      	adds	r7, #8
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b084      	sub	sp, #16
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fe56:	2301      	movs	r3, #1
 800fe58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d102      	bne.n	800fe68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fe62:	2300      	movs	r3, #0
 800fe64:	73fb      	strb	r3, [r7, #15]
 800fe66:	e008      	b.n	800fe7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	68db      	ldr	r3, [r3, #12]
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	d102      	bne.n	800fe76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fe70:	2301      	movs	r3, #1
 800fe72:	73fb      	strb	r3, [r7, #15]
 800fe74:	e001      	b.n	800fe7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fe76:	f7f3 f8cb 	bl	8003010 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe80:	7bfa      	ldrb	r2, [r7, #15]
 800fe82:	4611      	mov	r1, r2
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fb fb15 	bl	800b4b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7fb fac1 	bl	800b418 <USBD_LL_Reset>
}
 800fe96:	bf00      	nop
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
	...

0800fea0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fb fb10 	bl	800b4d4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	6812      	ldr	r2, [r2, #0]
 800fec2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fec6:	f043 0301 	orr.w	r3, r3, #1
 800feca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a1b      	ldr	r3, [r3, #32]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d005      	beq.n	800fee0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fed4:	4b04      	ldr	r3, [pc, #16]	; (800fee8 <HAL_PCD_SuspendCallback+0x48>)
 800fed6:	691b      	ldr	r3, [r3, #16]
 800fed8:	4a03      	ldr	r2, [pc, #12]	; (800fee8 <HAL_PCD_SuspendCallback+0x48>)
 800feda:	f043 0306 	orr.w	r3, r3, #6
 800fede:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fee0:	bf00      	nop
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	e000ed00 	.word	0xe000ed00

0800feec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fb fb00 	bl	800b500 <USBD_LL_Resume>
}
 800ff00:	bf00      	nop
 800ff02:	3708      	adds	r7, #8
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	460b      	mov	r3, r1
 800ff12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff1a:	78fa      	ldrb	r2, [r7, #3]
 800ff1c:	4611      	mov	r1, r2
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7fb fb4e 	bl	800b5c0 <USBD_LL_IsoOUTIncomplete>
}
 800ff24:	bf00      	nop
 800ff26:	3708      	adds	r7, #8
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}

0800ff2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	460b      	mov	r3, r1
 800ff36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff3e:	78fa      	ldrb	r2, [r7, #3]
 800ff40:	4611      	mov	r1, r2
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fb fb16 	bl	800b574 <USBD_LL_IsoINIncomplete>
}
 800ff48:	bf00      	nop
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fb fb54 	bl	800b60c <USBD_LL_DevConnected>
}
 800ff64:	bf00      	nop
 800ff66:	3708      	adds	r7, #8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fb fb51 	bl	800b622 <USBD_LL_DevDisconnected>
}
 800ff80:	bf00      	nop
 800ff82:	3708      	adds	r7, #8
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}

0800ff88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d13c      	bne.n	8010012 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ff98:	4a20      	ldr	r2, [pc, #128]	; (801001c <USBD_LL_Init+0x94>)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4a1e      	ldr	r2, [pc, #120]	; (801001c <USBD_LL_Init+0x94>)
 800ffa4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ffa8:	4b1c      	ldr	r3, [pc, #112]	; (801001c <USBD_LL_Init+0x94>)
 800ffaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ffae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ffb0:	4b1a      	ldr	r3, [pc, #104]	; (801001c <USBD_LL_Init+0x94>)
 800ffb2:	2204      	movs	r2, #4
 800ffb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ffb6:	4b19      	ldr	r3, [pc, #100]	; (801001c <USBD_LL_Init+0x94>)
 800ffb8:	2202      	movs	r2, #2
 800ffba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ffbc:	4b17      	ldr	r3, [pc, #92]	; (801001c <USBD_LL_Init+0x94>)
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ffc2:	4b16      	ldr	r3, [pc, #88]	; (801001c <USBD_LL_Init+0x94>)
 800ffc4:	2202      	movs	r2, #2
 800ffc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ffc8:	4b14      	ldr	r3, [pc, #80]	; (801001c <USBD_LL_Init+0x94>)
 800ffca:	2200      	movs	r2, #0
 800ffcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ffce:	4b13      	ldr	r3, [pc, #76]	; (801001c <USBD_LL_Init+0x94>)
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ffd4:	4b11      	ldr	r3, [pc, #68]	; (801001c <USBD_LL_Init+0x94>)
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ffda:	4b10      	ldr	r3, [pc, #64]	; (801001c <USBD_LL_Init+0x94>)
 800ffdc:	2200      	movs	r2, #0
 800ffde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ffe0:	4b0e      	ldr	r3, [pc, #56]	; (801001c <USBD_LL_Init+0x94>)
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ffe6:	480d      	ldr	r0, [pc, #52]	; (801001c <USBD_LL_Init+0x94>)
 800ffe8:	f7f6 f96d 	bl	80062c6 <HAL_PCD_Init>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d001      	beq.n	800fff6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fff2:	f7f3 f80d 	bl	8003010 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fff6:	2180      	movs	r1, #128	; 0x80
 800fff8:	4808      	ldr	r0, [pc, #32]	; (801001c <USBD_LL_Init+0x94>)
 800fffa:	f7f7 faca 	bl	8007592 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fffe:	2240      	movs	r2, #64	; 0x40
 8010000:	2100      	movs	r1, #0
 8010002:	4806      	ldr	r0, [pc, #24]	; (801001c <USBD_LL_Init+0x94>)
 8010004:	f7f7 fa7e 	bl	8007504 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010008:	2280      	movs	r2, #128	; 0x80
 801000a:	2101      	movs	r1, #1
 801000c:	4803      	ldr	r0, [pc, #12]	; (801001c <USBD_LL_Init+0x94>)
 801000e:	f7f7 fa79 	bl	8007504 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010012:	2300      	movs	r3, #0
}
 8010014:	4618      	mov	r0, r3
 8010016:	3708      	adds	r7, #8
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	2000eae0 	.word	0x2000eae0

08010020 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010028:	2300      	movs	r3, #0
 801002a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801002c:	2300      	movs	r3, #0
 801002e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010036:	4618      	mov	r0, r3
 8010038:	f7f6 fa62 	bl	8006500 <HAL_PCD_Start>
 801003c:	4603      	mov	r3, r0
 801003e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010040:	7bfb      	ldrb	r3, [r7, #15]
 8010042:	4618      	mov	r0, r3
 8010044:	f000 f942 	bl	80102cc <USBD_Get_USB_Status>
 8010048:	4603      	mov	r3, r0
 801004a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801004c:	7bbb      	ldrb	r3, [r7, #14]
}
 801004e:	4618      	mov	r0, r3
 8010050:	3710      	adds	r7, #16
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}

08010056 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010056:	b580      	push	{r7, lr}
 8010058:	b084      	sub	sp, #16
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
 801005e:	4608      	mov	r0, r1
 8010060:	4611      	mov	r1, r2
 8010062:	461a      	mov	r2, r3
 8010064:	4603      	mov	r3, r0
 8010066:	70fb      	strb	r3, [r7, #3]
 8010068:	460b      	mov	r3, r1
 801006a:	70bb      	strb	r3, [r7, #2]
 801006c:	4613      	mov	r3, r2
 801006e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010070:	2300      	movs	r3, #0
 8010072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010074:	2300      	movs	r3, #0
 8010076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801007e:	78bb      	ldrb	r3, [r7, #2]
 8010080:	883a      	ldrh	r2, [r7, #0]
 8010082:	78f9      	ldrb	r1, [r7, #3]
 8010084:	f7f6 fe46 	bl	8006d14 <HAL_PCD_EP_Open>
 8010088:	4603      	mov	r3, r0
 801008a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801008c:	7bfb      	ldrb	r3, [r7, #15]
 801008e:	4618      	mov	r0, r3
 8010090:	f000 f91c 	bl	80102cc <USBD_Get_USB_Status>
 8010094:	4603      	mov	r3, r0
 8010096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010098:	7bbb      	ldrb	r3, [r7, #14]
}
 801009a:	4618      	mov	r0, r3
 801009c:	3710      	adds	r7, #16
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b084      	sub	sp, #16
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
 80100aa:	460b      	mov	r3, r1
 80100ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100ae:	2300      	movs	r3, #0
 80100b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100b2:	2300      	movs	r3, #0
 80100b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100bc:	78fa      	ldrb	r2, [r7, #3]
 80100be:	4611      	mov	r1, r2
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7f6 fe8f 	bl	8006de4 <HAL_PCD_EP_Close>
 80100c6:	4603      	mov	r3, r0
 80100c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100ca:	7bfb      	ldrb	r3, [r7, #15]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f000 f8fd 	bl	80102cc <USBD_Get_USB_Status>
 80100d2:	4603      	mov	r3, r0
 80100d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3710      	adds	r7, #16
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	460b      	mov	r3, r1
 80100ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100ec:	2300      	movs	r3, #0
 80100ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100f0:	2300      	movs	r3, #0
 80100f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100fa:	78fa      	ldrb	r2, [r7, #3]
 80100fc:	4611      	mov	r1, r2
 80100fe:	4618      	mov	r0, r3
 8010100:	f7f6 ff67 	bl	8006fd2 <HAL_PCD_EP_SetStall>
 8010104:	4603      	mov	r3, r0
 8010106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010108:	7bfb      	ldrb	r3, [r7, #15]
 801010a:	4618      	mov	r0, r3
 801010c:	f000 f8de 	bl	80102cc <USBD_Get_USB_Status>
 8010110:	4603      	mov	r3, r0
 8010112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010114:	7bbb      	ldrb	r3, [r7, #14]
}
 8010116:	4618      	mov	r0, r3
 8010118:	3710      	adds	r7, #16
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}

0801011e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801011e:	b580      	push	{r7, lr}
 8010120:	b084      	sub	sp, #16
 8010122:	af00      	add	r7, sp, #0
 8010124:	6078      	str	r0, [r7, #4]
 8010126:	460b      	mov	r3, r1
 8010128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801012a:	2300      	movs	r3, #0
 801012c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801012e:	2300      	movs	r3, #0
 8010130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010138:	78fa      	ldrb	r2, [r7, #3]
 801013a:	4611      	mov	r1, r2
 801013c:	4618      	mov	r0, r3
 801013e:	f7f6 ffac 	bl	800709a <HAL_PCD_EP_ClrStall>
 8010142:	4603      	mov	r3, r0
 8010144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010146:	7bfb      	ldrb	r3, [r7, #15]
 8010148:	4618      	mov	r0, r3
 801014a:	f000 f8bf 	bl	80102cc <USBD_Get_USB_Status>
 801014e:	4603      	mov	r3, r0
 8010150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010152:	7bbb      	ldrb	r3, [r7, #14]
}
 8010154:	4618      	mov	r0, r3
 8010156:	3710      	adds	r7, #16
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801015c:	b480      	push	{r7}
 801015e:	b085      	sub	sp, #20
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	460b      	mov	r3, r1
 8010166:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801016e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010174:	2b00      	cmp	r3, #0
 8010176:	da0b      	bge.n	8010190 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010178:	78fb      	ldrb	r3, [r7, #3]
 801017a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801017e:	68f9      	ldr	r1, [r7, #12]
 8010180:	4613      	mov	r3, r2
 8010182:	00db      	lsls	r3, r3, #3
 8010184:	1a9b      	subs	r3, r3, r2
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	440b      	add	r3, r1
 801018a:	333e      	adds	r3, #62	; 0x3e
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	e00b      	b.n	80101a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010190:	78fb      	ldrb	r3, [r7, #3]
 8010192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010196:	68f9      	ldr	r1, [r7, #12]
 8010198:	4613      	mov	r3, r2
 801019a:	00db      	lsls	r3, r3, #3
 801019c:	1a9b      	subs	r3, r3, r2
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	440b      	add	r3, r1
 80101a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80101a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3714      	adds	r7, #20
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr

080101b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	460b      	mov	r3, r1
 80101be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101c0:	2300      	movs	r3, #0
 80101c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101c4:	2300      	movs	r3, #0
 80101c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80101ce:	78fa      	ldrb	r2, [r7, #3]
 80101d0:	4611      	mov	r1, r2
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7f6 fd79 	bl	8006cca <HAL_PCD_SetAddress>
 80101d8:	4603      	mov	r3, r0
 80101da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101dc:	7bfb      	ldrb	r3, [r7, #15]
 80101de:	4618      	mov	r0, r3
 80101e0:	f000 f874 	bl	80102cc <USBD_Get_USB_Status>
 80101e4:	4603      	mov	r3, r0
 80101e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3710      	adds	r7, #16
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101f2:	b580      	push	{r7, lr}
 80101f4:	b086      	sub	sp, #24
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	60f8      	str	r0, [r7, #12]
 80101fa:	607a      	str	r2, [r7, #4]
 80101fc:	603b      	str	r3, [r7, #0]
 80101fe:	460b      	mov	r3, r1
 8010200:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010202:	2300      	movs	r3, #0
 8010204:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010206:	2300      	movs	r3, #0
 8010208:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010210:	7af9      	ldrb	r1, [r7, #11]
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	f7f6 fe92 	bl	8006f3e <HAL_PCD_EP_Transmit>
 801021a:	4603      	mov	r3, r0
 801021c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801021e:	7dfb      	ldrb	r3, [r7, #23]
 8010220:	4618      	mov	r0, r3
 8010222:	f000 f853 	bl	80102cc <USBD_Get_USB_Status>
 8010226:	4603      	mov	r3, r0
 8010228:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801022a:	7dbb      	ldrb	r3, [r7, #22]
}
 801022c:	4618      	mov	r0, r3
 801022e:	3718      	adds	r7, #24
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b086      	sub	sp, #24
 8010238:	af00      	add	r7, sp, #0
 801023a:	60f8      	str	r0, [r7, #12]
 801023c:	607a      	str	r2, [r7, #4]
 801023e:	603b      	str	r3, [r7, #0]
 8010240:	460b      	mov	r3, r1
 8010242:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010244:	2300      	movs	r3, #0
 8010246:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010248:	2300      	movs	r3, #0
 801024a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010252:	7af9      	ldrb	r1, [r7, #11]
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	687a      	ldr	r2, [r7, #4]
 8010258:	f7f6 fe0e 	bl	8006e78 <HAL_PCD_EP_Receive>
 801025c:	4603      	mov	r3, r0
 801025e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010260:	7dfb      	ldrb	r3, [r7, #23]
 8010262:	4618      	mov	r0, r3
 8010264:	f000 f832 	bl	80102cc <USBD_Get_USB_Status>
 8010268:	4603      	mov	r3, r0
 801026a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801026c:	7dbb      	ldrb	r3, [r7, #22]
}
 801026e:	4618      	mov	r0, r3
 8010270:	3718      	adds	r7, #24
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}

08010276 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010276:	b580      	push	{r7, lr}
 8010278:	b082      	sub	sp, #8
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
 801027e:	460b      	mov	r3, r1
 8010280:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010288:	78fa      	ldrb	r2, [r7, #3]
 801028a:	4611      	mov	r1, r2
 801028c:	4618      	mov	r0, r3
 801028e:	f7f6 fe3e 	bl	8006f0e <HAL_PCD_EP_GetRxCount>
 8010292:	4603      	mov	r3, r0
}
 8010294:	4618      	mov	r0, r3
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801029c:	b480      	push	{r7}
 801029e:	b083      	sub	sp, #12
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80102a4:	4b03      	ldr	r3, [pc, #12]	; (80102b4 <USBD_static_malloc+0x18>)
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	370c      	adds	r7, #12
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop
 80102b4:	200073f8 	.word	0x200073f8

080102b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]

}
 80102c0:	bf00      	nop
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b085      	sub	sp, #20
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	4603      	mov	r3, r0
 80102d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102d6:	2300      	movs	r3, #0
 80102d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80102da:	79fb      	ldrb	r3, [r7, #7]
 80102dc:	2b03      	cmp	r3, #3
 80102de:	d817      	bhi.n	8010310 <USBD_Get_USB_Status+0x44>
 80102e0:	a201      	add	r2, pc, #4	; (adr r2, 80102e8 <USBD_Get_USB_Status+0x1c>)
 80102e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102e6:	bf00      	nop
 80102e8:	080102f9 	.word	0x080102f9
 80102ec:	080102ff 	.word	0x080102ff
 80102f0:	08010305 	.word	0x08010305
 80102f4:	0801030b 	.word	0x0801030b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80102f8:	2300      	movs	r3, #0
 80102fa:	73fb      	strb	r3, [r7, #15]
    break;
 80102fc:	e00b      	b.n	8010316 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80102fe:	2303      	movs	r3, #3
 8010300:	73fb      	strb	r3, [r7, #15]
    break;
 8010302:	e008      	b.n	8010316 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010304:	2301      	movs	r3, #1
 8010306:	73fb      	strb	r3, [r7, #15]
    break;
 8010308:	e005      	b.n	8010316 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801030a:	2303      	movs	r3, #3
 801030c:	73fb      	strb	r3, [r7, #15]
    break;
 801030e:	e002      	b.n	8010316 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010310:	2303      	movs	r3, #3
 8010312:	73fb      	strb	r3, [r7, #15]
    break;
 8010314:	bf00      	nop
  }
  return usb_status;
 8010316:	7bfb      	ldrb	r3, [r7, #15]
}
 8010318:	4618      	mov	r0, r3
 801031a:	3714      	adds	r7, #20
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <__errno>:
 8010324:	4b01      	ldr	r3, [pc, #4]	; (801032c <__errno+0x8>)
 8010326:	6818      	ldr	r0, [r3, #0]
 8010328:	4770      	bx	lr
 801032a:	bf00      	nop
 801032c:	200001b0 	.word	0x200001b0

08010330 <std>:
 8010330:	2300      	movs	r3, #0
 8010332:	b510      	push	{r4, lr}
 8010334:	4604      	mov	r4, r0
 8010336:	e9c0 3300 	strd	r3, r3, [r0]
 801033a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801033e:	6083      	str	r3, [r0, #8]
 8010340:	8181      	strh	r1, [r0, #12]
 8010342:	6643      	str	r3, [r0, #100]	; 0x64
 8010344:	81c2      	strh	r2, [r0, #14]
 8010346:	6183      	str	r3, [r0, #24]
 8010348:	4619      	mov	r1, r3
 801034a:	2208      	movs	r2, #8
 801034c:	305c      	adds	r0, #92	; 0x5c
 801034e:	f000 f934 	bl	80105ba <memset>
 8010352:	4b05      	ldr	r3, [pc, #20]	; (8010368 <std+0x38>)
 8010354:	6263      	str	r3, [r4, #36]	; 0x24
 8010356:	4b05      	ldr	r3, [pc, #20]	; (801036c <std+0x3c>)
 8010358:	62a3      	str	r3, [r4, #40]	; 0x28
 801035a:	4b05      	ldr	r3, [pc, #20]	; (8010370 <std+0x40>)
 801035c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801035e:	4b05      	ldr	r3, [pc, #20]	; (8010374 <std+0x44>)
 8010360:	6224      	str	r4, [r4, #32]
 8010362:	6323      	str	r3, [r4, #48]	; 0x30
 8010364:	bd10      	pop	{r4, pc}
 8010366:	bf00      	nop
 8010368:	08011089 	.word	0x08011089
 801036c:	080110ab 	.word	0x080110ab
 8010370:	080110e3 	.word	0x080110e3
 8010374:	08011107 	.word	0x08011107

08010378 <_cleanup_r>:
 8010378:	4901      	ldr	r1, [pc, #4]	; (8010380 <_cleanup_r+0x8>)
 801037a:	f000 b8af 	b.w	80104dc <_fwalk_reent>
 801037e:	bf00      	nop
 8010380:	08012005 	.word	0x08012005

08010384 <__sfmoreglue>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	1e4a      	subs	r2, r1, #1
 8010388:	2568      	movs	r5, #104	; 0x68
 801038a:	4355      	muls	r5, r2
 801038c:	460e      	mov	r6, r1
 801038e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010392:	f000 f91b 	bl	80105cc <_malloc_r>
 8010396:	4604      	mov	r4, r0
 8010398:	b140      	cbz	r0, 80103ac <__sfmoreglue+0x28>
 801039a:	2100      	movs	r1, #0
 801039c:	e9c0 1600 	strd	r1, r6, [r0]
 80103a0:	300c      	adds	r0, #12
 80103a2:	60a0      	str	r0, [r4, #8]
 80103a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80103a8:	f000 f907 	bl	80105ba <memset>
 80103ac:	4620      	mov	r0, r4
 80103ae:	bd70      	pop	{r4, r5, r6, pc}

080103b0 <__sfp_lock_acquire>:
 80103b0:	4801      	ldr	r0, [pc, #4]	; (80103b8 <__sfp_lock_acquire+0x8>)
 80103b2:	f000 b8f2 	b.w	801059a <__retarget_lock_acquire_recursive>
 80103b6:	bf00      	nop
 80103b8:	2000eef0 	.word	0x2000eef0

080103bc <__sfp_lock_release>:
 80103bc:	4801      	ldr	r0, [pc, #4]	; (80103c4 <__sfp_lock_release+0x8>)
 80103be:	f000 b8ed 	b.w	801059c <__retarget_lock_release_recursive>
 80103c2:	bf00      	nop
 80103c4:	2000eef0 	.word	0x2000eef0

080103c8 <__sinit_lock_acquire>:
 80103c8:	4801      	ldr	r0, [pc, #4]	; (80103d0 <__sinit_lock_acquire+0x8>)
 80103ca:	f000 b8e6 	b.w	801059a <__retarget_lock_acquire_recursive>
 80103ce:	bf00      	nop
 80103d0:	2000eeeb 	.word	0x2000eeeb

080103d4 <__sinit_lock_release>:
 80103d4:	4801      	ldr	r0, [pc, #4]	; (80103dc <__sinit_lock_release+0x8>)
 80103d6:	f000 b8e1 	b.w	801059c <__retarget_lock_release_recursive>
 80103da:	bf00      	nop
 80103dc:	2000eeeb 	.word	0x2000eeeb

080103e0 <__sinit>:
 80103e0:	b510      	push	{r4, lr}
 80103e2:	4604      	mov	r4, r0
 80103e4:	f7ff fff0 	bl	80103c8 <__sinit_lock_acquire>
 80103e8:	69a3      	ldr	r3, [r4, #24]
 80103ea:	b11b      	cbz	r3, 80103f4 <__sinit+0x14>
 80103ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103f0:	f7ff bff0 	b.w	80103d4 <__sinit_lock_release>
 80103f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80103f8:	6523      	str	r3, [r4, #80]	; 0x50
 80103fa:	4b13      	ldr	r3, [pc, #76]	; (8010448 <__sinit+0x68>)
 80103fc:	4a13      	ldr	r2, [pc, #76]	; (801044c <__sinit+0x6c>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	62a2      	str	r2, [r4, #40]	; 0x28
 8010402:	42a3      	cmp	r3, r4
 8010404:	bf04      	itt	eq
 8010406:	2301      	moveq	r3, #1
 8010408:	61a3      	streq	r3, [r4, #24]
 801040a:	4620      	mov	r0, r4
 801040c:	f000 f820 	bl	8010450 <__sfp>
 8010410:	6060      	str	r0, [r4, #4]
 8010412:	4620      	mov	r0, r4
 8010414:	f000 f81c 	bl	8010450 <__sfp>
 8010418:	60a0      	str	r0, [r4, #8]
 801041a:	4620      	mov	r0, r4
 801041c:	f000 f818 	bl	8010450 <__sfp>
 8010420:	2200      	movs	r2, #0
 8010422:	60e0      	str	r0, [r4, #12]
 8010424:	2104      	movs	r1, #4
 8010426:	6860      	ldr	r0, [r4, #4]
 8010428:	f7ff ff82 	bl	8010330 <std>
 801042c:	68a0      	ldr	r0, [r4, #8]
 801042e:	2201      	movs	r2, #1
 8010430:	2109      	movs	r1, #9
 8010432:	f7ff ff7d 	bl	8010330 <std>
 8010436:	68e0      	ldr	r0, [r4, #12]
 8010438:	2202      	movs	r2, #2
 801043a:	2112      	movs	r1, #18
 801043c:	f7ff ff78 	bl	8010330 <std>
 8010440:	2301      	movs	r3, #1
 8010442:	61a3      	str	r3, [r4, #24]
 8010444:	e7d2      	b.n	80103ec <__sinit+0xc>
 8010446:	bf00      	nop
 8010448:	08019788 	.word	0x08019788
 801044c:	08010379 	.word	0x08010379

08010450 <__sfp>:
 8010450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010452:	4607      	mov	r7, r0
 8010454:	f7ff ffac 	bl	80103b0 <__sfp_lock_acquire>
 8010458:	4b1e      	ldr	r3, [pc, #120]	; (80104d4 <__sfp+0x84>)
 801045a:	681e      	ldr	r6, [r3, #0]
 801045c:	69b3      	ldr	r3, [r6, #24]
 801045e:	b913      	cbnz	r3, 8010466 <__sfp+0x16>
 8010460:	4630      	mov	r0, r6
 8010462:	f7ff ffbd 	bl	80103e0 <__sinit>
 8010466:	3648      	adds	r6, #72	; 0x48
 8010468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801046c:	3b01      	subs	r3, #1
 801046e:	d503      	bpl.n	8010478 <__sfp+0x28>
 8010470:	6833      	ldr	r3, [r6, #0]
 8010472:	b30b      	cbz	r3, 80104b8 <__sfp+0x68>
 8010474:	6836      	ldr	r6, [r6, #0]
 8010476:	e7f7      	b.n	8010468 <__sfp+0x18>
 8010478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801047c:	b9d5      	cbnz	r5, 80104b4 <__sfp+0x64>
 801047e:	4b16      	ldr	r3, [pc, #88]	; (80104d8 <__sfp+0x88>)
 8010480:	60e3      	str	r3, [r4, #12]
 8010482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010486:	6665      	str	r5, [r4, #100]	; 0x64
 8010488:	f000 f886 	bl	8010598 <__retarget_lock_init_recursive>
 801048c:	f7ff ff96 	bl	80103bc <__sfp_lock_release>
 8010490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010498:	6025      	str	r5, [r4, #0]
 801049a:	61a5      	str	r5, [r4, #24]
 801049c:	2208      	movs	r2, #8
 801049e:	4629      	mov	r1, r5
 80104a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80104a4:	f000 f889 	bl	80105ba <memset>
 80104a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80104ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80104b0:	4620      	mov	r0, r4
 80104b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104b4:	3468      	adds	r4, #104	; 0x68
 80104b6:	e7d9      	b.n	801046c <__sfp+0x1c>
 80104b8:	2104      	movs	r1, #4
 80104ba:	4638      	mov	r0, r7
 80104bc:	f7ff ff62 	bl	8010384 <__sfmoreglue>
 80104c0:	4604      	mov	r4, r0
 80104c2:	6030      	str	r0, [r6, #0]
 80104c4:	2800      	cmp	r0, #0
 80104c6:	d1d5      	bne.n	8010474 <__sfp+0x24>
 80104c8:	f7ff ff78 	bl	80103bc <__sfp_lock_release>
 80104cc:	230c      	movs	r3, #12
 80104ce:	603b      	str	r3, [r7, #0]
 80104d0:	e7ee      	b.n	80104b0 <__sfp+0x60>
 80104d2:	bf00      	nop
 80104d4:	08019788 	.word	0x08019788
 80104d8:	ffff0001 	.word	0xffff0001

080104dc <_fwalk_reent>:
 80104dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104e0:	4606      	mov	r6, r0
 80104e2:	4688      	mov	r8, r1
 80104e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104e8:	2700      	movs	r7, #0
 80104ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104ee:	f1b9 0901 	subs.w	r9, r9, #1
 80104f2:	d505      	bpl.n	8010500 <_fwalk_reent+0x24>
 80104f4:	6824      	ldr	r4, [r4, #0]
 80104f6:	2c00      	cmp	r4, #0
 80104f8:	d1f7      	bne.n	80104ea <_fwalk_reent+0xe>
 80104fa:	4638      	mov	r0, r7
 80104fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010500:	89ab      	ldrh	r3, [r5, #12]
 8010502:	2b01      	cmp	r3, #1
 8010504:	d907      	bls.n	8010516 <_fwalk_reent+0x3a>
 8010506:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801050a:	3301      	adds	r3, #1
 801050c:	d003      	beq.n	8010516 <_fwalk_reent+0x3a>
 801050e:	4629      	mov	r1, r5
 8010510:	4630      	mov	r0, r6
 8010512:	47c0      	blx	r8
 8010514:	4307      	orrs	r7, r0
 8010516:	3568      	adds	r5, #104	; 0x68
 8010518:	e7e9      	b.n	80104ee <_fwalk_reent+0x12>
	...

0801051c <__libc_init_array>:
 801051c:	b570      	push	{r4, r5, r6, lr}
 801051e:	4d0d      	ldr	r5, [pc, #52]	; (8010554 <__libc_init_array+0x38>)
 8010520:	4c0d      	ldr	r4, [pc, #52]	; (8010558 <__libc_init_array+0x3c>)
 8010522:	1b64      	subs	r4, r4, r5
 8010524:	10a4      	asrs	r4, r4, #2
 8010526:	2600      	movs	r6, #0
 8010528:	42a6      	cmp	r6, r4
 801052a:	d109      	bne.n	8010540 <__libc_init_array+0x24>
 801052c:	4d0b      	ldr	r5, [pc, #44]	; (801055c <__libc_init_array+0x40>)
 801052e:	4c0c      	ldr	r4, [pc, #48]	; (8010560 <__libc_init_array+0x44>)
 8010530:	f002 fe9e 	bl	8013270 <_init>
 8010534:	1b64      	subs	r4, r4, r5
 8010536:	10a4      	asrs	r4, r4, #2
 8010538:	2600      	movs	r6, #0
 801053a:	42a6      	cmp	r6, r4
 801053c:	d105      	bne.n	801054a <__libc_init_array+0x2e>
 801053e:	bd70      	pop	{r4, r5, r6, pc}
 8010540:	f855 3b04 	ldr.w	r3, [r5], #4
 8010544:	4798      	blx	r3
 8010546:	3601      	adds	r6, #1
 8010548:	e7ee      	b.n	8010528 <__libc_init_array+0xc>
 801054a:	f855 3b04 	ldr.w	r3, [r5], #4
 801054e:	4798      	blx	r3
 8010550:	3601      	adds	r6, #1
 8010552:	e7f2      	b.n	801053a <__libc_init_array+0x1e>
 8010554:	08019b3c 	.word	0x08019b3c
 8010558:	08019b3c 	.word	0x08019b3c
 801055c:	08019b3c 	.word	0x08019b3c
 8010560:	08019b40 	.word	0x08019b40

08010564 <__itoa>:
 8010564:	1e93      	subs	r3, r2, #2
 8010566:	2b22      	cmp	r3, #34	; 0x22
 8010568:	b510      	push	{r4, lr}
 801056a:	460c      	mov	r4, r1
 801056c:	d904      	bls.n	8010578 <__itoa+0x14>
 801056e:	2300      	movs	r3, #0
 8010570:	700b      	strb	r3, [r1, #0]
 8010572:	461c      	mov	r4, r3
 8010574:	4620      	mov	r0, r4
 8010576:	bd10      	pop	{r4, pc}
 8010578:	2a0a      	cmp	r2, #10
 801057a:	d109      	bne.n	8010590 <__itoa+0x2c>
 801057c:	2800      	cmp	r0, #0
 801057e:	da07      	bge.n	8010590 <__itoa+0x2c>
 8010580:	232d      	movs	r3, #45	; 0x2d
 8010582:	700b      	strb	r3, [r1, #0]
 8010584:	4240      	negs	r0, r0
 8010586:	2101      	movs	r1, #1
 8010588:	4421      	add	r1, r4
 801058a:	f000 fdd7 	bl	801113c <__utoa>
 801058e:	e7f1      	b.n	8010574 <__itoa+0x10>
 8010590:	2100      	movs	r1, #0
 8010592:	e7f9      	b.n	8010588 <__itoa+0x24>

08010594 <itoa>:
 8010594:	f7ff bfe6 	b.w	8010564 <__itoa>

08010598 <__retarget_lock_init_recursive>:
 8010598:	4770      	bx	lr

0801059a <__retarget_lock_acquire_recursive>:
 801059a:	4770      	bx	lr

0801059c <__retarget_lock_release_recursive>:
 801059c:	4770      	bx	lr

0801059e <memcpy>:
 801059e:	440a      	add	r2, r1
 80105a0:	4291      	cmp	r1, r2
 80105a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80105a6:	d100      	bne.n	80105aa <memcpy+0xc>
 80105a8:	4770      	bx	lr
 80105aa:	b510      	push	{r4, lr}
 80105ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105b4:	4291      	cmp	r1, r2
 80105b6:	d1f9      	bne.n	80105ac <memcpy+0xe>
 80105b8:	bd10      	pop	{r4, pc}

080105ba <memset>:
 80105ba:	4402      	add	r2, r0
 80105bc:	4603      	mov	r3, r0
 80105be:	4293      	cmp	r3, r2
 80105c0:	d100      	bne.n	80105c4 <memset+0xa>
 80105c2:	4770      	bx	lr
 80105c4:	f803 1b01 	strb.w	r1, [r3], #1
 80105c8:	e7f9      	b.n	80105be <memset+0x4>
	...

080105cc <_malloc_r>:
 80105cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ce:	1ccd      	adds	r5, r1, #3
 80105d0:	f025 0503 	bic.w	r5, r5, #3
 80105d4:	3508      	adds	r5, #8
 80105d6:	2d0c      	cmp	r5, #12
 80105d8:	bf38      	it	cc
 80105da:	250c      	movcc	r5, #12
 80105dc:	2d00      	cmp	r5, #0
 80105de:	4606      	mov	r6, r0
 80105e0:	db01      	blt.n	80105e6 <_malloc_r+0x1a>
 80105e2:	42a9      	cmp	r1, r5
 80105e4:	d903      	bls.n	80105ee <_malloc_r+0x22>
 80105e6:	230c      	movs	r3, #12
 80105e8:	6033      	str	r3, [r6, #0]
 80105ea:	2000      	movs	r0, #0
 80105ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105ee:	f001 fd63 	bl	80120b8 <__malloc_lock>
 80105f2:	4921      	ldr	r1, [pc, #132]	; (8010678 <_malloc_r+0xac>)
 80105f4:	680a      	ldr	r2, [r1, #0]
 80105f6:	4614      	mov	r4, r2
 80105f8:	b99c      	cbnz	r4, 8010622 <_malloc_r+0x56>
 80105fa:	4f20      	ldr	r7, [pc, #128]	; (801067c <_malloc_r+0xb0>)
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	b923      	cbnz	r3, 801060a <_malloc_r+0x3e>
 8010600:	4621      	mov	r1, r4
 8010602:	4630      	mov	r0, r6
 8010604:	f000 fd10 	bl	8011028 <_sbrk_r>
 8010608:	6038      	str	r0, [r7, #0]
 801060a:	4629      	mov	r1, r5
 801060c:	4630      	mov	r0, r6
 801060e:	f000 fd0b 	bl	8011028 <_sbrk_r>
 8010612:	1c43      	adds	r3, r0, #1
 8010614:	d123      	bne.n	801065e <_malloc_r+0x92>
 8010616:	230c      	movs	r3, #12
 8010618:	6033      	str	r3, [r6, #0]
 801061a:	4630      	mov	r0, r6
 801061c:	f001 fd52 	bl	80120c4 <__malloc_unlock>
 8010620:	e7e3      	b.n	80105ea <_malloc_r+0x1e>
 8010622:	6823      	ldr	r3, [r4, #0]
 8010624:	1b5b      	subs	r3, r3, r5
 8010626:	d417      	bmi.n	8010658 <_malloc_r+0x8c>
 8010628:	2b0b      	cmp	r3, #11
 801062a:	d903      	bls.n	8010634 <_malloc_r+0x68>
 801062c:	6023      	str	r3, [r4, #0]
 801062e:	441c      	add	r4, r3
 8010630:	6025      	str	r5, [r4, #0]
 8010632:	e004      	b.n	801063e <_malloc_r+0x72>
 8010634:	6863      	ldr	r3, [r4, #4]
 8010636:	42a2      	cmp	r2, r4
 8010638:	bf0c      	ite	eq
 801063a:	600b      	streq	r3, [r1, #0]
 801063c:	6053      	strne	r3, [r2, #4]
 801063e:	4630      	mov	r0, r6
 8010640:	f001 fd40 	bl	80120c4 <__malloc_unlock>
 8010644:	f104 000b 	add.w	r0, r4, #11
 8010648:	1d23      	adds	r3, r4, #4
 801064a:	f020 0007 	bic.w	r0, r0, #7
 801064e:	1ac2      	subs	r2, r0, r3
 8010650:	d0cc      	beq.n	80105ec <_malloc_r+0x20>
 8010652:	1a1b      	subs	r3, r3, r0
 8010654:	50a3      	str	r3, [r4, r2]
 8010656:	e7c9      	b.n	80105ec <_malloc_r+0x20>
 8010658:	4622      	mov	r2, r4
 801065a:	6864      	ldr	r4, [r4, #4]
 801065c:	e7cc      	b.n	80105f8 <_malloc_r+0x2c>
 801065e:	1cc4      	adds	r4, r0, #3
 8010660:	f024 0403 	bic.w	r4, r4, #3
 8010664:	42a0      	cmp	r0, r4
 8010666:	d0e3      	beq.n	8010630 <_malloc_r+0x64>
 8010668:	1a21      	subs	r1, r4, r0
 801066a:	4630      	mov	r0, r6
 801066c:	f000 fcdc 	bl	8011028 <_sbrk_r>
 8010670:	3001      	adds	r0, #1
 8010672:	d1dd      	bne.n	8010630 <_malloc_r+0x64>
 8010674:	e7cf      	b.n	8010616 <_malloc_r+0x4a>
 8010676:	bf00      	nop
 8010678:	20007618 	.word	0x20007618
 801067c:	2000761c 	.word	0x2000761c

08010680 <__cvt>:
 8010680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010684:	ec55 4b10 	vmov	r4, r5, d0
 8010688:	2d00      	cmp	r5, #0
 801068a:	460e      	mov	r6, r1
 801068c:	4619      	mov	r1, r3
 801068e:	462b      	mov	r3, r5
 8010690:	bfbb      	ittet	lt
 8010692:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010696:	461d      	movlt	r5, r3
 8010698:	2300      	movge	r3, #0
 801069a:	232d      	movlt	r3, #45	; 0x2d
 801069c:	700b      	strb	r3, [r1, #0]
 801069e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80106a4:	4691      	mov	r9, r2
 80106a6:	f023 0820 	bic.w	r8, r3, #32
 80106aa:	bfbc      	itt	lt
 80106ac:	4622      	movlt	r2, r4
 80106ae:	4614      	movlt	r4, r2
 80106b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80106b4:	d005      	beq.n	80106c2 <__cvt+0x42>
 80106b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80106ba:	d100      	bne.n	80106be <__cvt+0x3e>
 80106bc:	3601      	adds	r6, #1
 80106be:	2102      	movs	r1, #2
 80106c0:	e000      	b.n	80106c4 <__cvt+0x44>
 80106c2:	2103      	movs	r1, #3
 80106c4:	ab03      	add	r3, sp, #12
 80106c6:	9301      	str	r3, [sp, #4]
 80106c8:	ab02      	add	r3, sp, #8
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	ec45 4b10 	vmov	d0, r4, r5
 80106d0:	4653      	mov	r3, sl
 80106d2:	4632      	mov	r2, r6
 80106d4:	f000 fe24 	bl	8011320 <_dtoa_r>
 80106d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80106dc:	4607      	mov	r7, r0
 80106de:	d102      	bne.n	80106e6 <__cvt+0x66>
 80106e0:	f019 0f01 	tst.w	r9, #1
 80106e4:	d022      	beq.n	801072c <__cvt+0xac>
 80106e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80106ea:	eb07 0906 	add.w	r9, r7, r6
 80106ee:	d110      	bne.n	8010712 <__cvt+0x92>
 80106f0:	783b      	ldrb	r3, [r7, #0]
 80106f2:	2b30      	cmp	r3, #48	; 0x30
 80106f4:	d10a      	bne.n	801070c <__cvt+0x8c>
 80106f6:	2200      	movs	r2, #0
 80106f8:	2300      	movs	r3, #0
 80106fa:	4620      	mov	r0, r4
 80106fc:	4629      	mov	r1, r5
 80106fe:	f7f0 f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8010702:	b918      	cbnz	r0, 801070c <__cvt+0x8c>
 8010704:	f1c6 0601 	rsb	r6, r6, #1
 8010708:	f8ca 6000 	str.w	r6, [sl]
 801070c:	f8da 3000 	ldr.w	r3, [sl]
 8010710:	4499      	add	r9, r3
 8010712:	2200      	movs	r2, #0
 8010714:	2300      	movs	r3, #0
 8010716:	4620      	mov	r0, r4
 8010718:	4629      	mov	r1, r5
 801071a:	f7f0 f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 801071e:	b108      	cbz	r0, 8010724 <__cvt+0xa4>
 8010720:	f8cd 900c 	str.w	r9, [sp, #12]
 8010724:	2230      	movs	r2, #48	; 0x30
 8010726:	9b03      	ldr	r3, [sp, #12]
 8010728:	454b      	cmp	r3, r9
 801072a:	d307      	bcc.n	801073c <__cvt+0xbc>
 801072c:	9b03      	ldr	r3, [sp, #12]
 801072e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010730:	1bdb      	subs	r3, r3, r7
 8010732:	4638      	mov	r0, r7
 8010734:	6013      	str	r3, [r2, #0]
 8010736:	b004      	add	sp, #16
 8010738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801073c:	1c59      	adds	r1, r3, #1
 801073e:	9103      	str	r1, [sp, #12]
 8010740:	701a      	strb	r2, [r3, #0]
 8010742:	e7f0      	b.n	8010726 <__cvt+0xa6>

08010744 <__exponent>:
 8010744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010746:	4603      	mov	r3, r0
 8010748:	2900      	cmp	r1, #0
 801074a:	bfb8      	it	lt
 801074c:	4249      	neglt	r1, r1
 801074e:	f803 2b02 	strb.w	r2, [r3], #2
 8010752:	bfb4      	ite	lt
 8010754:	222d      	movlt	r2, #45	; 0x2d
 8010756:	222b      	movge	r2, #43	; 0x2b
 8010758:	2909      	cmp	r1, #9
 801075a:	7042      	strb	r2, [r0, #1]
 801075c:	dd2a      	ble.n	80107b4 <__exponent+0x70>
 801075e:	f10d 0407 	add.w	r4, sp, #7
 8010762:	46a4      	mov	ip, r4
 8010764:	270a      	movs	r7, #10
 8010766:	46a6      	mov	lr, r4
 8010768:	460a      	mov	r2, r1
 801076a:	fb91 f6f7 	sdiv	r6, r1, r7
 801076e:	fb07 1516 	mls	r5, r7, r6, r1
 8010772:	3530      	adds	r5, #48	; 0x30
 8010774:	2a63      	cmp	r2, #99	; 0x63
 8010776:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801077a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801077e:	4631      	mov	r1, r6
 8010780:	dcf1      	bgt.n	8010766 <__exponent+0x22>
 8010782:	3130      	adds	r1, #48	; 0x30
 8010784:	f1ae 0502 	sub.w	r5, lr, #2
 8010788:	f804 1c01 	strb.w	r1, [r4, #-1]
 801078c:	1c44      	adds	r4, r0, #1
 801078e:	4629      	mov	r1, r5
 8010790:	4561      	cmp	r1, ip
 8010792:	d30a      	bcc.n	80107aa <__exponent+0x66>
 8010794:	f10d 0209 	add.w	r2, sp, #9
 8010798:	eba2 020e 	sub.w	r2, r2, lr
 801079c:	4565      	cmp	r5, ip
 801079e:	bf88      	it	hi
 80107a0:	2200      	movhi	r2, #0
 80107a2:	4413      	add	r3, r2
 80107a4:	1a18      	subs	r0, r3, r0
 80107a6:	b003      	add	sp, #12
 80107a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80107b2:	e7ed      	b.n	8010790 <__exponent+0x4c>
 80107b4:	2330      	movs	r3, #48	; 0x30
 80107b6:	3130      	adds	r1, #48	; 0x30
 80107b8:	7083      	strb	r3, [r0, #2]
 80107ba:	70c1      	strb	r1, [r0, #3]
 80107bc:	1d03      	adds	r3, r0, #4
 80107be:	e7f1      	b.n	80107a4 <__exponent+0x60>

080107c0 <_printf_float>:
 80107c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c4:	ed2d 8b02 	vpush	{d8}
 80107c8:	b08d      	sub	sp, #52	; 0x34
 80107ca:	460c      	mov	r4, r1
 80107cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80107d0:	4616      	mov	r6, r2
 80107d2:	461f      	mov	r7, r3
 80107d4:	4605      	mov	r5, r0
 80107d6:	f001 fc51 	bl	801207c <_localeconv_r>
 80107da:	f8d0 a000 	ldr.w	sl, [r0]
 80107de:	4650      	mov	r0, sl
 80107e0:	f7ef fcf6 	bl	80001d0 <strlen>
 80107e4:	2300      	movs	r3, #0
 80107e6:	930a      	str	r3, [sp, #40]	; 0x28
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	9305      	str	r3, [sp, #20]
 80107ec:	f8d8 3000 	ldr.w	r3, [r8]
 80107f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80107f4:	3307      	adds	r3, #7
 80107f6:	f023 0307 	bic.w	r3, r3, #7
 80107fa:	f103 0208 	add.w	r2, r3, #8
 80107fe:	f8c8 2000 	str.w	r2, [r8]
 8010802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010806:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801080a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801080e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010812:	9307      	str	r3, [sp, #28]
 8010814:	f8cd 8018 	str.w	r8, [sp, #24]
 8010818:	ee08 0a10 	vmov	s16, r0
 801081c:	4b9f      	ldr	r3, [pc, #636]	; (8010a9c <_printf_float+0x2dc>)
 801081e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010826:	f7f0 f981 	bl	8000b2c <__aeabi_dcmpun>
 801082a:	bb88      	cbnz	r0, 8010890 <_printf_float+0xd0>
 801082c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010830:	4b9a      	ldr	r3, [pc, #616]	; (8010a9c <_printf_float+0x2dc>)
 8010832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010836:	f7f0 f95b 	bl	8000af0 <__aeabi_dcmple>
 801083a:	bb48      	cbnz	r0, 8010890 <_printf_float+0xd0>
 801083c:	2200      	movs	r2, #0
 801083e:	2300      	movs	r3, #0
 8010840:	4640      	mov	r0, r8
 8010842:	4649      	mov	r1, r9
 8010844:	f7f0 f94a 	bl	8000adc <__aeabi_dcmplt>
 8010848:	b110      	cbz	r0, 8010850 <_printf_float+0x90>
 801084a:	232d      	movs	r3, #45	; 0x2d
 801084c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010850:	4b93      	ldr	r3, [pc, #588]	; (8010aa0 <_printf_float+0x2e0>)
 8010852:	4894      	ldr	r0, [pc, #592]	; (8010aa4 <_printf_float+0x2e4>)
 8010854:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010858:	bf94      	ite	ls
 801085a:	4698      	movls	r8, r3
 801085c:	4680      	movhi	r8, r0
 801085e:	2303      	movs	r3, #3
 8010860:	6123      	str	r3, [r4, #16]
 8010862:	9b05      	ldr	r3, [sp, #20]
 8010864:	f023 0204 	bic.w	r2, r3, #4
 8010868:	6022      	str	r2, [r4, #0]
 801086a:	f04f 0900 	mov.w	r9, #0
 801086e:	9700      	str	r7, [sp, #0]
 8010870:	4633      	mov	r3, r6
 8010872:	aa0b      	add	r2, sp, #44	; 0x2c
 8010874:	4621      	mov	r1, r4
 8010876:	4628      	mov	r0, r5
 8010878:	f000 f9d8 	bl	8010c2c <_printf_common>
 801087c:	3001      	adds	r0, #1
 801087e:	f040 8090 	bne.w	80109a2 <_printf_float+0x1e2>
 8010882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010886:	b00d      	add	sp, #52	; 0x34
 8010888:	ecbd 8b02 	vpop	{d8}
 801088c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010890:	4642      	mov	r2, r8
 8010892:	464b      	mov	r3, r9
 8010894:	4640      	mov	r0, r8
 8010896:	4649      	mov	r1, r9
 8010898:	f7f0 f948 	bl	8000b2c <__aeabi_dcmpun>
 801089c:	b140      	cbz	r0, 80108b0 <_printf_float+0xf0>
 801089e:	464b      	mov	r3, r9
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	bfbc      	itt	lt
 80108a4:	232d      	movlt	r3, #45	; 0x2d
 80108a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80108aa:	487f      	ldr	r0, [pc, #508]	; (8010aa8 <_printf_float+0x2e8>)
 80108ac:	4b7f      	ldr	r3, [pc, #508]	; (8010aac <_printf_float+0x2ec>)
 80108ae:	e7d1      	b.n	8010854 <_printf_float+0x94>
 80108b0:	6863      	ldr	r3, [r4, #4]
 80108b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80108b6:	9206      	str	r2, [sp, #24]
 80108b8:	1c5a      	adds	r2, r3, #1
 80108ba:	d13f      	bne.n	801093c <_printf_float+0x17c>
 80108bc:	2306      	movs	r3, #6
 80108be:	6063      	str	r3, [r4, #4]
 80108c0:	9b05      	ldr	r3, [sp, #20]
 80108c2:	6861      	ldr	r1, [r4, #4]
 80108c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80108c8:	2300      	movs	r3, #0
 80108ca:	9303      	str	r3, [sp, #12]
 80108cc:	ab0a      	add	r3, sp, #40	; 0x28
 80108ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80108d2:	ab09      	add	r3, sp, #36	; 0x24
 80108d4:	ec49 8b10 	vmov	d0, r8, r9
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	6022      	str	r2, [r4, #0]
 80108dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80108e0:	4628      	mov	r0, r5
 80108e2:	f7ff fecd 	bl	8010680 <__cvt>
 80108e6:	9b06      	ldr	r3, [sp, #24]
 80108e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108ea:	2b47      	cmp	r3, #71	; 0x47
 80108ec:	4680      	mov	r8, r0
 80108ee:	d108      	bne.n	8010902 <_printf_float+0x142>
 80108f0:	1cc8      	adds	r0, r1, #3
 80108f2:	db02      	blt.n	80108fa <_printf_float+0x13a>
 80108f4:	6863      	ldr	r3, [r4, #4]
 80108f6:	4299      	cmp	r1, r3
 80108f8:	dd41      	ble.n	801097e <_printf_float+0x1be>
 80108fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80108fe:	fa5f fb8b 	uxtb.w	fp, fp
 8010902:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010906:	d820      	bhi.n	801094a <_printf_float+0x18a>
 8010908:	3901      	subs	r1, #1
 801090a:	465a      	mov	r2, fp
 801090c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010910:	9109      	str	r1, [sp, #36]	; 0x24
 8010912:	f7ff ff17 	bl	8010744 <__exponent>
 8010916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010918:	1813      	adds	r3, r2, r0
 801091a:	2a01      	cmp	r2, #1
 801091c:	4681      	mov	r9, r0
 801091e:	6123      	str	r3, [r4, #16]
 8010920:	dc02      	bgt.n	8010928 <_printf_float+0x168>
 8010922:	6822      	ldr	r2, [r4, #0]
 8010924:	07d2      	lsls	r2, r2, #31
 8010926:	d501      	bpl.n	801092c <_printf_float+0x16c>
 8010928:	3301      	adds	r3, #1
 801092a:	6123      	str	r3, [r4, #16]
 801092c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010930:	2b00      	cmp	r3, #0
 8010932:	d09c      	beq.n	801086e <_printf_float+0xae>
 8010934:	232d      	movs	r3, #45	; 0x2d
 8010936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801093a:	e798      	b.n	801086e <_printf_float+0xae>
 801093c:	9a06      	ldr	r2, [sp, #24]
 801093e:	2a47      	cmp	r2, #71	; 0x47
 8010940:	d1be      	bne.n	80108c0 <_printf_float+0x100>
 8010942:	2b00      	cmp	r3, #0
 8010944:	d1bc      	bne.n	80108c0 <_printf_float+0x100>
 8010946:	2301      	movs	r3, #1
 8010948:	e7b9      	b.n	80108be <_printf_float+0xfe>
 801094a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801094e:	d118      	bne.n	8010982 <_printf_float+0x1c2>
 8010950:	2900      	cmp	r1, #0
 8010952:	6863      	ldr	r3, [r4, #4]
 8010954:	dd0b      	ble.n	801096e <_printf_float+0x1ae>
 8010956:	6121      	str	r1, [r4, #16]
 8010958:	b913      	cbnz	r3, 8010960 <_printf_float+0x1a0>
 801095a:	6822      	ldr	r2, [r4, #0]
 801095c:	07d0      	lsls	r0, r2, #31
 801095e:	d502      	bpl.n	8010966 <_printf_float+0x1a6>
 8010960:	3301      	adds	r3, #1
 8010962:	440b      	add	r3, r1
 8010964:	6123      	str	r3, [r4, #16]
 8010966:	65a1      	str	r1, [r4, #88]	; 0x58
 8010968:	f04f 0900 	mov.w	r9, #0
 801096c:	e7de      	b.n	801092c <_printf_float+0x16c>
 801096e:	b913      	cbnz	r3, 8010976 <_printf_float+0x1b6>
 8010970:	6822      	ldr	r2, [r4, #0]
 8010972:	07d2      	lsls	r2, r2, #31
 8010974:	d501      	bpl.n	801097a <_printf_float+0x1ba>
 8010976:	3302      	adds	r3, #2
 8010978:	e7f4      	b.n	8010964 <_printf_float+0x1a4>
 801097a:	2301      	movs	r3, #1
 801097c:	e7f2      	b.n	8010964 <_printf_float+0x1a4>
 801097e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010984:	4299      	cmp	r1, r3
 8010986:	db05      	blt.n	8010994 <_printf_float+0x1d4>
 8010988:	6823      	ldr	r3, [r4, #0]
 801098a:	6121      	str	r1, [r4, #16]
 801098c:	07d8      	lsls	r0, r3, #31
 801098e:	d5ea      	bpl.n	8010966 <_printf_float+0x1a6>
 8010990:	1c4b      	adds	r3, r1, #1
 8010992:	e7e7      	b.n	8010964 <_printf_float+0x1a4>
 8010994:	2900      	cmp	r1, #0
 8010996:	bfd4      	ite	le
 8010998:	f1c1 0202 	rsble	r2, r1, #2
 801099c:	2201      	movgt	r2, #1
 801099e:	4413      	add	r3, r2
 80109a0:	e7e0      	b.n	8010964 <_printf_float+0x1a4>
 80109a2:	6823      	ldr	r3, [r4, #0]
 80109a4:	055a      	lsls	r2, r3, #21
 80109a6:	d407      	bmi.n	80109b8 <_printf_float+0x1f8>
 80109a8:	6923      	ldr	r3, [r4, #16]
 80109aa:	4642      	mov	r2, r8
 80109ac:	4631      	mov	r1, r6
 80109ae:	4628      	mov	r0, r5
 80109b0:	47b8      	blx	r7
 80109b2:	3001      	adds	r0, #1
 80109b4:	d12c      	bne.n	8010a10 <_printf_float+0x250>
 80109b6:	e764      	b.n	8010882 <_printf_float+0xc2>
 80109b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80109bc:	f240 80e0 	bls.w	8010b80 <_printf_float+0x3c0>
 80109c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80109c4:	2200      	movs	r2, #0
 80109c6:	2300      	movs	r3, #0
 80109c8:	f7f0 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 80109cc:	2800      	cmp	r0, #0
 80109ce:	d034      	beq.n	8010a3a <_printf_float+0x27a>
 80109d0:	4a37      	ldr	r2, [pc, #220]	; (8010ab0 <_printf_float+0x2f0>)
 80109d2:	2301      	movs	r3, #1
 80109d4:	4631      	mov	r1, r6
 80109d6:	4628      	mov	r0, r5
 80109d8:	47b8      	blx	r7
 80109da:	3001      	adds	r0, #1
 80109dc:	f43f af51 	beq.w	8010882 <_printf_float+0xc2>
 80109e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80109e4:	429a      	cmp	r2, r3
 80109e6:	db02      	blt.n	80109ee <_printf_float+0x22e>
 80109e8:	6823      	ldr	r3, [r4, #0]
 80109ea:	07d8      	lsls	r0, r3, #31
 80109ec:	d510      	bpl.n	8010a10 <_printf_float+0x250>
 80109ee:	ee18 3a10 	vmov	r3, s16
 80109f2:	4652      	mov	r2, sl
 80109f4:	4631      	mov	r1, r6
 80109f6:	4628      	mov	r0, r5
 80109f8:	47b8      	blx	r7
 80109fa:	3001      	adds	r0, #1
 80109fc:	f43f af41 	beq.w	8010882 <_printf_float+0xc2>
 8010a00:	f04f 0800 	mov.w	r8, #0
 8010a04:	f104 091a 	add.w	r9, r4, #26
 8010a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a0a:	3b01      	subs	r3, #1
 8010a0c:	4543      	cmp	r3, r8
 8010a0e:	dc09      	bgt.n	8010a24 <_printf_float+0x264>
 8010a10:	6823      	ldr	r3, [r4, #0]
 8010a12:	079b      	lsls	r3, r3, #30
 8010a14:	f100 8105 	bmi.w	8010c22 <_printf_float+0x462>
 8010a18:	68e0      	ldr	r0, [r4, #12]
 8010a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a1c:	4298      	cmp	r0, r3
 8010a1e:	bfb8      	it	lt
 8010a20:	4618      	movlt	r0, r3
 8010a22:	e730      	b.n	8010886 <_printf_float+0xc6>
 8010a24:	2301      	movs	r3, #1
 8010a26:	464a      	mov	r2, r9
 8010a28:	4631      	mov	r1, r6
 8010a2a:	4628      	mov	r0, r5
 8010a2c:	47b8      	blx	r7
 8010a2e:	3001      	adds	r0, #1
 8010a30:	f43f af27 	beq.w	8010882 <_printf_float+0xc2>
 8010a34:	f108 0801 	add.w	r8, r8, #1
 8010a38:	e7e6      	b.n	8010a08 <_printf_float+0x248>
 8010a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	dc39      	bgt.n	8010ab4 <_printf_float+0x2f4>
 8010a40:	4a1b      	ldr	r2, [pc, #108]	; (8010ab0 <_printf_float+0x2f0>)
 8010a42:	2301      	movs	r3, #1
 8010a44:	4631      	mov	r1, r6
 8010a46:	4628      	mov	r0, r5
 8010a48:	47b8      	blx	r7
 8010a4a:	3001      	adds	r0, #1
 8010a4c:	f43f af19 	beq.w	8010882 <_printf_float+0xc2>
 8010a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a54:	4313      	orrs	r3, r2
 8010a56:	d102      	bne.n	8010a5e <_printf_float+0x29e>
 8010a58:	6823      	ldr	r3, [r4, #0]
 8010a5a:	07d9      	lsls	r1, r3, #31
 8010a5c:	d5d8      	bpl.n	8010a10 <_printf_float+0x250>
 8010a5e:	ee18 3a10 	vmov	r3, s16
 8010a62:	4652      	mov	r2, sl
 8010a64:	4631      	mov	r1, r6
 8010a66:	4628      	mov	r0, r5
 8010a68:	47b8      	blx	r7
 8010a6a:	3001      	adds	r0, #1
 8010a6c:	f43f af09 	beq.w	8010882 <_printf_float+0xc2>
 8010a70:	f04f 0900 	mov.w	r9, #0
 8010a74:	f104 0a1a 	add.w	sl, r4, #26
 8010a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a7a:	425b      	negs	r3, r3
 8010a7c:	454b      	cmp	r3, r9
 8010a7e:	dc01      	bgt.n	8010a84 <_printf_float+0x2c4>
 8010a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a82:	e792      	b.n	80109aa <_printf_float+0x1ea>
 8010a84:	2301      	movs	r3, #1
 8010a86:	4652      	mov	r2, sl
 8010a88:	4631      	mov	r1, r6
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	47b8      	blx	r7
 8010a8e:	3001      	adds	r0, #1
 8010a90:	f43f aef7 	beq.w	8010882 <_printf_float+0xc2>
 8010a94:	f109 0901 	add.w	r9, r9, #1
 8010a98:	e7ee      	b.n	8010a78 <_printf_float+0x2b8>
 8010a9a:	bf00      	nop
 8010a9c:	7fefffff 	.word	0x7fefffff
 8010aa0:	0801978c 	.word	0x0801978c
 8010aa4:	08019790 	.word	0x08019790
 8010aa8:	08019798 	.word	0x08019798
 8010aac:	08019794 	.word	0x08019794
 8010ab0:	0801979c 	.word	0x0801979c
 8010ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ab6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	bfa8      	it	ge
 8010abc:	461a      	movge	r2, r3
 8010abe:	2a00      	cmp	r2, #0
 8010ac0:	4691      	mov	r9, r2
 8010ac2:	dc37      	bgt.n	8010b34 <_printf_float+0x374>
 8010ac4:	f04f 0b00 	mov.w	fp, #0
 8010ac8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010acc:	f104 021a 	add.w	r2, r4, #26
 8010ad0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ad2:	9305      	str	r3, [sp, #20]
 8010ad4:	eba3 0309 	sub.w	r3, r3, r9
 8010ad8:	455b      	cmp	r3, fp
 8010ada:	dc33      	bgt.n	8010b44 <_printf_float+0x384>
 8010adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	db3b      	blt.n	8010b5c <_printf_float+0x39c>
 8010ae4:	6823      	ldr	r3, [r4, #0]
 8010ae6:	07da      	lsls	r2, r3, #31
 8010ae8:	d438      	bmi.n	8010b5c <_printf_float+0x39c>
 8010aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010aec:	9b05      	ldr	r3, [sp, #20]
 8010aee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010af0:	1ad3      	subs	r3, r2, r3
 8010af2:	eba2 0901 	sub.w	r9, r2, r1
 8010af6:	4599      	cmp	r9, r3
 8010af8:	bfa8      	it	ge
 8010afa:	4699      	movge	r9, r3
 8010afc:	f1b9 0f00 	cmp.w	r9, #0
 8010b00:	dc35      	bgt.n	8010b6e <_printf_float+0x3ae>
 8010b02:	f04f 0800 	mov.w	r8, #0
 8010b06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b0a:	f104 0a1a 	add.w	sl, r4, #26
 8010b0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b12:	1a9b      	subs	r3, r3, r2
 8010b14:	eba3 0309 	sub.w	r3, r3, r9
 8010b18:	4543      	cmp	r3, r8
 8010b1a:	f77f af79 	ble.w	8010a10 <_printf_float+0x250>
 8010b1e:	2301      	movs	r3, #1
 8010b20:	4652      	mov	r2, sl
 8010b22:	4631      	mov	r1, r6
 8010b24:	4628      	mov	r0, r5
 8010b26:	47b8      	blx	r7
 8010b28:	3001      	adds	r0, #1
 8010b2a:	f43f aeaa 	beq.w	8010882 <_printf_float+0xc2>
 8010b2e:	f108 0801 	add.w	r8, r8, #1
 8010b32:	e7ec      	b.n	8010b0e <_printf_float+0x34e>
 8010b34:	4613      	mov	r3, r2
 8010b36:	4631      	mov	r1, r6
 8010b38:	4642      	mov	r2, r8
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	47b8      	blx	r7
 8010b3e:	3001      	adds	r0, #1
 8010b40:	d1c0      	bne.n	8010ac4 <_printf_float+0x304>
 8010b42:	e69e      	b.n	8010882 <_printf_float+0xc2>
 8010b44:	2301      	movs	r3, #1
 8010b46:	4631      	mov	r1, r6
 8010b48:	4628      	mov	r0, r5
 8010b4a:	9205      	str	r2, [sp, #20]
 8010b4c:	47b8      	blx	r7
 8010b4e:	3001      	adds	r0, #1
 8010b50:	f43f ae97 	beq.w	8010882 <_printf_float+0xc2>
 8010b54:	9a05      	ldr	r2, [sp, #20]
 8010b56:	f10b 0b01 	add.w	fp, fp, #1
 8010b5a:	e7b9      	b.n	8010ad0 <_printf_float+0x310>
 8010b5c:	ee18 3a10 	vmov	r3, s16
 8010b60:	4652      	mov	r2, sl
 8010b62:	4631      	mov	r1, r6
 8010b64:	4628      	mov	r0, r5
 8010b66:	47b8      	blx	r7
 8010b68:	3001      	adds	r0, #1
 8010b6a:	d1be      	bne.n	8010aea <_printf_float+0x32a>
 8010b6c:	e689      	b.n	8010882 <_printf_float+0xc2>
 8010b6e:	9a05      	ldr	r2, [sp, #20]
 8010b70:	464b      	mov	r3, r9
 8010b72:	4442      	add	r2, r8
 8010b74:	4631      	mov	r1, r6
 8010b76:	4628      	mov	r0, r5
 8010b78:	47b8      	blx	r7
 8010b7a:	3001      	adds	r0, #1
 8010b7c:	d1c1      	bne.n	8010b02 <_printf_float+0x342>
 8010b7e:	e680      	b.n	8010882 <_printf_float+0xc2>
 8010b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b82:	2a01      	cmp	r2, #1
 8010b84:	dc01      	bgt.n	8010b8a <_printf_float+0x3ca>
 8010b86:	07db      	lsls	r3, r3, #31
 8010b88:	d538      	bpl.n	8010bfc <_printf_float+0x43c>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	4642      	mov	r2, r8
 8010b8e:	4631      	mov	r1, r6
 8010b90:	4628      	mov	r0, r5
 8010b92:	47b8      	blx	r7
 8010b94:	3001      	adds	r0, #1
 8010b96:	f43f ae74 	beq.w	8010882 <_printf_float+0xc2>
 8010b9a:	ee18 3a10 	vmov	r3, s16
 8010b9e:	4652      	mov	r2, sl
 8010ba0:	4631      	mov	r1, r6
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	47b8      	blx	r7
 8010ba6:	3001      	adds	r0, #1
 8010ba8:	f43f ae6b 	beq.w	8010882 <_printf_float+0xc2>
 8010bac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	f7ef ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 8010bb8:	b9d8      	cbnz	r0, 8010bf2 <_printf_float+0x432>
 8010bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bbc:	f108 0201 	add.w	r2, r8, #1
 8010bc0:	3b01      	subs	r3, #1
 8010bc2:	4631      	mov	r1, r6
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	47b8      	blx	r7
 8010bc8:	3001      	adds	r0, #1
 8010bca:	d10e      	bne.n	8010bea <_printf_float+0x42a>
 8010bcc:	e659      	b.n	8010882 <_printf_float+0xc2>
 8010bce:	2301      	movs	r3, #1
 8010bd0:	4652      	mov	r2, sl
 8010bd2:	4631      	mov	r1, r6
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	47b8      	blx	r7
 8010bd8:	3001      	adds	r0, #1
 8010bda:	f43f ae52 	beq.w	8010882 <_printf_float+0xc2>
 8010bde:	f108 0801 	add.w	r8, r8, #1
 8010be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010be4:	3b01      	subs	r3, #1
 8010be6:	4543      	cmp	r3, r8
 8010be8:	dcf1      	bgt.n	8010bce <_printf_float+0x40e>
 8010bea:	464b      	mov	r3, r9
 8010bec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010bf0:	e6dc      	b.n	80109ac <_printf_float+0x1ec>
 8010bf2:	f04f 0800 	mov.w	r8, #0
 8010bf6:	f104 0a1a 	add.w	sl, r4, #26
 8010bfa:	e7f2      	b.n	8010be2 <_printf_float+0x422>
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	4642      	mov	r2, r8
 8010c00:	e7df      	b.n	8010bc2 <_printf_float+0x402>
 8010c02:	2301      	movs	r3, #1
 8010c04:	464a      	mov	r2, r9
 8010c06:	4631      	mov	r1, r6
 8010c08:	4628      	mov	r0, r5
 8010c0a:	47b8      	blx	r7
 8010c0c:	3001      	adds	r0, #1
 8010c0e:	f43f ae38 	beq.w	8010882 <_printf_float+0xc2>
 8010c12:	f108 0801 	add.w	r8, r8, #1
 8010c16:	68e3      	ldr	r3, [r4, #12]
 8010c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c1a:	1a5b      	subs	r3, r3, r1
 8010c1c:	4543      	cmp	r3, r8
 8010c1e:	dcf0      	bgt.n	8010c02 <_printf_float+0x442>
 8010c20:	e6fa      	b.n	8010a18 <_printf_float+0x258>
 8010c22:	f04f 0800 	mov.w	r8, #0
 8010c26:	f104 0919 	add.w	r9, r4, #25
 8010c2a:	e7f4      	b.n	8010c16 <_printf_float+0x456>

08010c2c <_printf_common>:
 8010c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c30:	4616      	mov	r6, r2
 8010c32:	4699      	mov	r9, r3
 8010c34:	688a      	ldr	r2, [r1, #8]
 8010c36:	690b      	ldr	r3, [r1, #16]
 8010c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	bfb8      	it	lt
 8010c40:	4613      	movlt	r3, r2
 8010c42:	6033      	str	r3, [r6, #0]
 8010c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c48:	4607      	mov	r7, r0
 8010c4a:	460c      	mov	r4, r1
 8010c4c:	b10a      	cbz	r2, 8010c52 <_printf_common+0x26>
 8010c4e:	3301      	adds	r3, #1
 8010c50:	6033      	str	r3, [r6, #0]
 8010c52:	6823      	ldr	r3, [r4, #0]
 8010c54:	0699      	lsls	r1, r3, #26
 8010c56:	bf42      	ittt	mi
 8010c58:	6833      	ldrmi	r3, [r6, #0]
 8010c5a:	3302      	addmi	r3, #2
 8010c5c:	6033      	strmi	r3, [r6, #0]
 8010c5e:	6825      	ldr	r5, [r4, #0]
 8010c60:	f015 0506 	ands.w	r5, r5, #6
 8010c64:	d106      	bne.n	8010c74 <_printf_common+0x48>
 8010c66:	f104 0a19 	add.w	sl, r4, #25
 8010c6a:	68e3      	ldr	r3, [r4, #12]
 8010c6c:	6832      	ldr	r2, [r6, #0]
 8010c6e:	1a9b      	subs	r3, r3, r2
 8010c70:	42ab      	cmp	r3, r5
 8010c72:	dc26      	bgt.n	8010cc2 <_printf_common+0x96>
 8010c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010c78:	1e13      	subs	r3, r2, #0
 8010c7a:	6822      	ldr	r2, [r4, #0]
 8010c7c:	bf18      	it	ne
 8010c7e:	2301      	movne	r3, #1
 8010c80:	0692      	lsls	r2, r2, #26
 8010c82:	d42b      	bmi.n	8010cdc <_printf_common+0xb0>
 8010c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c88:	4649      	mov	r1, r9
 8010c8a:	4638      	mov	r0, r7
 8010c8c:	47c0      	blx	r8
 8010c8e:	3001      	adds	r0, #1
 8010c90:	d01e      	beq.n	8010cd0 <_printf_common+0xa4>
 8010c92:	6823      	ldr	r3, [r4, #0]
 8010c94:	68e5      	ldr	r5, [r4, #12]
 8010c96:	6832      	ldr	r2, [r6, #0]
 8010c98:	f003 0306 	and.w	r3, r3, #6
 8010c9c:	2b04      	cmp	r3, #4
 8010c9e:	bf08      	it	eq
 8010ca0:	1aad      	subeq	r5, r5, r2
 8010ca2:	68a3      	ldr	r3, [r4, #8]
 8010ca4:	6922      	ldr	r2, [r4, #16]
 8010ca6:	bf0c      	ite	eq
 8010ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cac:	2500      	movne	r5, #0
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	bfc4      	itt	gt
 8010cb2:	1a9b      	subgt	r3, r3, r2
 8010cb4:	18ed      	addgt	r5, r5, r3
 8010cb6:	2600      	movs	r6, #0
 8010cb8:	341a      	adds	r4, #26
 8010cba:	42b5      	cmp	r5, r6
 8010cbc:	d11a      	bne.n	8010cf4 <_printf_common+0xc8>
 8010cbe:	2000      	movs	r0, #0
 8010cc0:	e008      	b.n	8010cd4 <_printf_common+0xa8>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	4652      	mov	r2, sl
 8010cc6:	4649      	mov	r1, r9
 8010cc8:	4638      	mov	r0, r7
 8010cca:	47c0      	blx	r8
 8010ccc:	3001      	adds	r0, #1
 8010cce:	d103      	bne.n	8010cd8 <_printf_common+0xac>
 8010cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cd8:	3501      	adds	r5, #1
 8010cda:	e7c6      	b.n	8010c6a <_printf_common+0x3e>
 8010cdc:	18e1      	adds	r1, r4, r3
 8010cde:	1c5a      	adds	r2, r3, #1
 8010ce0:	2030      	movs	r0, #48	; 0x30
 8010ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ce6:	4422      	add	r2, r4
 8010ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010cf0:	3302      	adds	r3, #2
 8010cf2:	e7c7      	b.n	8010c84 <_printf_common+0x58>
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	4622      	mov	r2, r4
 8010cf8:	4649      	mov	r1, r9
 8010cfa:	4638      	mov	r0, r7
 8010cfc:	47c0      	blx	r8
 8010cfe:	3001      	adds	r0, #1
 8010d00:	d0e6      	beq.n	8010cd0 <_printf_common+0xa4>
 8010d02:	3601      	adds	r6, #1
 8010d04:	e7d9      	b.n	8010cba <_printf_common+0x8e>
	...

08010d08 <_printf_i>:
 8010d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d0c:	460c      	mov	r4, r1
 8010d0e:	4691      	mov	r9, r2
 8010d10:	7e27      	ldrb	r7, [r4, #24]
 8010d12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d14:	2f78      	cmp	r7, #120	; 0x78
 8010d16:	4680      	mov	r8, r0
 8010d18:	469a      	mov	sl, r3
 8010d1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d1e:	d807      	bhi.n	8010d30 <_printf_i+0x28>
 8010d20:	2f62      	cmp	r7, #98	; 0x62
 8010d22:	d80a      	bhi.n	8010d3a <_printf_i+0x32>
 8010d24:	2f00      	cmp	r7, #0
 8010d26:	f000 80d8 	beq.w	8010eda <_printf_i+0x1d2>
 8010d2a:	2f58      	cmp	r7, #88	; 0x58
 8010d2c:	f000 80a3 	beq.w	8010e76 <_printf_i+0x16e>
 8010d30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d38:	e03a      	b.n	8010db0 <_printf_i+0xa8>
 8010d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d3e:	2b15      	cmp	r3, #21
 8010d40:	d8f6      	bhi.n	8010d30 <_printf_i+0x28>
 8010d42:	a001      	add	r0, pc, #4	; (adr r0, 8010d48 <_printf_i+0x40>)
 8010d44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010d48:	08010da1 	.word	0x08010da1
 8010d4c:	08010db5 	.word	0x08010db5
 8010d50:	08010d31 	.word	0x08010d31
 8010d54:	08010d31 	.word	0x08010d31
 8010d58:	08010d31 	.word	0x08010d31
 8010d5c:	08010d31 	.word	0x08010d31
 8010d60:	08010db5 	.word	0x08010db5
 8010d64:	08010d31 	.word	0x08010d31
 8010d68:	08010d31 	.word	0x08010d31
 8010d6c:	08010d31 	.word	0x08010d31
 8010d70:	08010d31 	.word	0x08010d31
 8010d74:	08010ec1 	.word	0x08010ec1
 8010d78:	08010de5 	.word	0x08010de5
 8010d7c:	08010ea3 	.word	0x08010ea3
 8010d80:	08010d31 	.word	0x08010d31
 8010d84:	08010d31 	.word	0x08010d31
 8010d88:	08010ee3 	.word	0x08010ee3
 8010d8c:	08010d31 	.word	0x08010d31
 8010d90:	08010de5 	.word	0x08010de5
 8010d94:	08010d31 	.word	0x08010d31
 8010d98:	08010d31 	.word	0x08010d31
 8010d9c:	08010eab 	.word	0x08010eab
 8010da0:	680b      	ldr	r3, [r1, #0]
 8010da2:	1d1a      	adds	r2, r3, #4
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	600a      	str	r2, [r1, #0]
 8010da8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010db0:	2301      	movs	r3, #1
 8010db2:	e0a3      	b.n	8010efc <_printf_i+0x1f4>
 8010db4:	6825      	ldr	r5, [r4, #0]
 8010db6:	6808      	ldr	r0, [r1, #0]
 8010db8:	062e      	lsls	r6, r5, #24
 8010dba:	f100 0304 	add.w	r3, r0, #4
 8010dbe:	d50a      	bpl.n	8010dd6 <_printf_i+0xce>
 8010dc0:	6805      	ldr	r5, [r0, #0]
 8010dc2:	600b      	str	r3, [r1, #0]
 8010dc4:	2d00      	cmp	r5, #0
 8010dc6:	da03      	bge.n	8010dd0 <_printf_i+0xc8>
 8010dc8:	232d      	movs	r3, #45	; 0x2d
 8010dca:	426d      	negs	r5, r5
 8010dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010dd0:	485e      	ldr	r0, [pc, #376]	; (8010f4c <_printf_i+0x244>)
 8010dd2:	230a      	movs	r3, #10
 8010dd4:	e019      	b.n	8010e0a <_printf_i+0x102>
 8010dd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010dda:	6805      	ldr	r5, [r0, #0]
 8010ddc:	600b      	str	r3, [r1, #0]
 8010dde:	bf18      	it	ne
 8010de0:	b22d      	sxthne	r5, r5
 8010de2:	e7ef      	b.n	8010dc4 <_printf_i+0xbc>
 8010de4:	680b      	ldr	r3, [r1, #0]
 8010de6:	6825      	ldr	r5, [r4, #0]
 8010de8:	1d18      	adds	r0, r3, #4
 8010dea:	6008      	str	r0, [r1, #0]
 8010dec:	0628      	lsls	r0, r5, #24
 8010dee:	d501      	bpl.n	8010df4 <_printf_i+0xec>
 8010df0:	681d      	ldr	r5, [r3, #0]
 8010df2:	e002      	b.n	8010dfa <_printf_i+0xf2>
 8010df4:	0669      	lsls	r1, r5, #25
 8010df6:	d5fb      	bpl.n	8010df0 <_printf_i+0xe8>
 8010df8:	881d      	ldrh	r5, [r3, #0]
 8010dfa:	4854      	ldr	r0, [pc, #336]	; (8010f4c <_printf_i+0x244>)
 8010dfc:	2f6f      	cmp	r7, #111	; 0x6f
 8010dfe:	bf0c      	ite	eq
 8010e00:	2308      	moveq	r3, #8
 8010e02:	230a      	movne	r3, #10
 8010e04:	2100      	movs	r1, #0
 8010e06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e0a:	6866      	ldr	r6, [r4, #4]
 8010e0c:	60a6      	str	r6, [r4, #8]
 8010e0e:	2e00      	cmp	r6, #0
 8010e10:	bfa2      	ittt	ge
 8010e12:	6821      	ldrge	r1, [r4, #0]
 8010e14:	f021 0104 	bicge.w	r1, r1, #4
 8010e18:	6021      	strge	r1, [r4, #0]
 8010e1a:	b90d      	cbnz	r5, 8010e20 <_printf_i+0x118>
 8010e1c:	2e00      	cmp	r6, #0
 8010e1e:	d04d      	beq.n	8010ebc <_printf_i+0x1b4>
 8010e20:	4616      	mov	r6, r2
 8010e22:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e26:	fb03 5711 	mls	r7, r3, r1, r5
 8010e2a:	5dc7      	ldrb	r7, [r0, r7]
 8010e2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e30:	462f      	mov	r7, r5
 8010e32:	42bb      	cmp	r3, r7
 8010e34:	460d      	mov	r5, r1
 8010e36:	d9f4      	bls.n	8010e22 <_printf_i+0x11a>
 8010e38:	2b08      	cmp	r3, #8
 8010e3a:	d10b      	bne.n	8010e54 <_printf_i+0x14c>
 8010e3c:	6823      	ldr	r3, [r4, #0]
 8010e3e:	07df      	lsls	r7, r3, #31
 8010e40:	d508      	bpl.n	8010e54 <_printf_i+0x14c>
 8010e42:	6923      	ldr	r3, [r4, #16]
 8010e44:	6861      	ldr	r1, [r4, #4]
 8010e46:	4299      	cmp	r1, r3
 8010e48:	bfde      	ittt	le
 8010e4a:	2330      	movle	r3, #48	; 0x30
 8010e4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e50:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010e54:	1b92      	subs	r2, r2, r6
 8010e56:	6122      	str	r2, [r4, #16]
 8010e58:	f8cd a000 	str.w	sl, [sp]
 8010e5c:	464b      	mov	r3, r9
 8010e5e:	aa03      	add	r2, sp, #12
 8010e60:	4621      	mov	r1, r4
 8010e62:	4640      	mov	r0, r8
 8010e64:	f7ff fee2 	bl	8010c2c <_printf_common>
 8010e68:	3001      	adds	r0, #1
 8010e6a:	d14c      	bne.n	8010f06 <_printf_i+0x1fe>
 8010e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e70:	b004      	add	sp, #16
 8010e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e76:	4835      	ldr	r0, [pc, #212]	; (8010f4c <_printf_i+0x244>)
 8010e78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010e7c:	6823      	ldr	r3, [r4, #0]
 8010e7e:	680e      	ldr	r6, [r1, #0]
 8010e80:	061f      	lsls	r7, r3, #24
 8010e82:	f856 5b04 	ldr.w	r5, [r6], #4
 8010e86:	600e      	str	r6, [r1, #0]
 8010e88:	d514      	bpl.n	8010eb4 <_printf_i+0x1ac>
 8010e8a:	07d9      	lsls	r1, r3, #31
 8010e8c:	bf44      	itt	mi
 8010e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8010e92:	6023      	strmi	r3, [r4, #0]
 8010e94:	b91d      	cbnz	r5, 8010e9e <_printf_i+0x196>
 8010e96:	6823      	ldr	r3, [r4, #0]
 8010e98:	f023 0320 	bic.w	r3, r3, #32
 8010e9c:	6023      	str	r3, [r4, #0]
 8010e9e:	2310      	movs	r3, #16
 8010ea0:	e7b0      	b.n	8010e04 <_printf_i+0xfc>
 8010ea2:	6823      	ldr	r3, [r4, #0]
 8010ea4:	f043 0320 	orr.w	r3, r3, #32
 8010ea8:	6023      	str	r3, [r4, #0]
 8010eaa:	2378      	movs	r3, #120	; 0x78
 8010eac:	4828      	ldr	r0, [pc, #160]	; (8010f50 <_printf_i+0x248>)
 8010eae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010eb2:	e7e3      	b.n	8010e7c <_printf_i+0x174>
 8010eb4:	065e      	lsls	r6, r3, #25
 8010eb6:	bf48      	it	mi
 8010eb8:	b2ad      	uxthmi	r5, r5
 8010eba:	e7e6      	b.n	8010e8a <_printf_i+0x182>
 8010ebc:	4616      	mov	r6, r2
 8010ebe:	e7bb      	b.n	8010e38 <_printf_i+0x130>
 8010ec0:	680b      	ldr	r3, [r1, #0]
 8010ec2:	6826      	ldr	r6, [r4, #0]
 8010ec4:	6960      	ldr	r0, [r4, #20]
 8010ec6:	1d1d      	adds	r5, r3, #4
 8010ec8:	600d      	str	r5, [r1, #0]
 8010eca:	0635      	lsls	r5, r6, #24
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	d501      	bpl.n	8010ed4 <_printf_i+0x1cc>
 8010ed0:	6018      	str	r0, [r3, #0]
 8010ed2:	e002      	b.n	8010eda <_printf_i+0x1d2>
 8010ed4:	0671      	lsls	r1, r6, #25
 8010ed6:	d5fb      	bpl.n	8010ed0 <_printf_i+0x1c8>
 8010ed8:	8018      	strh	r0, [r3, #0]
 8010eda:	2300      	movs	r3, #0
 8010edc:	6123      	str	r3, [r4, #16]
 8010ede:	4616      	mov	r6, r2
 8010ee0:	e7ba      	b.n	8010e58 <_printf_i+0x150>
 8010ee2:	680b      	ldr	r3, [r1, #0]
 8010ee4:	1d1a      	adds	r2, r3, #4
 8010ee6:	600a      	str	r2, [r1, #0]
 8010ee8:	681e      	ldr	r6, [r3, #0]
 8010eea:	6862      	ldr	r2, [r4, #4]
 8010eec:	2100      	movs	r1, #0
 8010eee:	4630      	mov	r0, r6
 8010ef0:	f7ef f976 	bl	80001e0 <memchr>
 8010ef4:	b108      	cbz	r0, 8010efa <_printf_i+0x1f2>
 8010ef6:	1b80      	subs	r0, r0, r6
 8010ef8:	6060      	str	r0, [r4, #4]
 8010efa:	6863      	ldr	r3, [r4, #4]
 8010efc:	6123      	str	r3, [r4, #16]
 8010efe:	2300      	movs	r3, #0
 8010f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f04:	e7a8      	b.n	8010e58 <_printf_i+0x150>
 8010f06:	6923      	ldr	r3, [r4, #16]
 8010f08:	4632      	mov	r2, r6
 8010f0a:	4649      	mov	r1, r9
 8010f0c:	4640      	mov	r0, r8
 8010f0e:	47d0      	blx	sl
 8010f10:	3001      	adds	r0, #1
 8010f12:	d0ab      	beq.n	8010e6c <_printf_i+0x164>
 8010f14:	6823      	ldr	r3, [r4, #0]
 8010f16:	079b      	lsls	r3, r3, #30
 8010f18:	d413      	bmi.n	8010f42 <_printf_i+0x23a>
 8010f1a:	68e0      	ldr	r0, [r4, #12]
 8010f1c:	9b03      	ldr	r3, [sp, #12]
 8010f1e:	4298      	cmp	r0, r3
 8010f20:	bfb8      	it	lt
 8010f22:	4618      	movlt	r0, r3
 8010f24:	e7a4      	b.n	8010e70 <_printf_i+0x168>
 8010f26:	2301      	movs	r3, #1
 8010f28:	4632      	mov	r2, r6
 8010f2a:	4649      	mov	r1, r9
 8010f2c:	4640      	mov	r0, r8
 8010f2e:	47d0      	blx	sl
 8010f30:	3001      	adds	r0, #1
 8010f32:	d09b      	beq.n	8010e6c <_printf_i+0x164>
 8010f34:	3501      	adds	r5, #1
 8010f36:	68e3      	ldr	r3, [r4, #12]
 8010f38:	9903      	ldr	r1, [sp, #12]
 8010f3a:	1a5b      	subs	r3, r3, r1
 8010f3c:	42ab      	cmp	r3, r5
 8010f3e:	dcf2      	bgt.n	8010f26 <_printf_i+0x21e>
 8010f40:	e7eb      	b.n	8010f1a <_printf_i+0x212>
 8010f42:	2500      	movs	r5, #0
 8010f44:	f104 0619 	add.w	r6, r4, #25
 8010f48:	e7f5      	b.n	8010f36 <_printf_i+0x22e>
 8010f4a:	bf00      	nop
 8010f4c:	0801979e 	.word	0x0801979e
 8010f50:	080197af 	.word	0x080197af

08010f54 <cleanup_glue>:
 8010f54:	b538      	push	{r3, r4, r5, lr}
 8010f56:	460c      	mov	r4, r1
 8010f58:	6809      	ldr	r1, [r1, #0]
 8010f5a:	4605      	mov	r5, r0
 8010f5c:	b109      	cbz	r1, 8010f62 <cleanup_glue+0xe>
 8010f5e:	f7ff fff9 	bl	8010f54 <cleanup_glue>
 8010f62:	4621      	mov	r1, r4
 8010f64:	4628      	mov	r0, r5
 8010f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f6a:	f001 bc3f 	b.w	80127ec <_free_r>
	...

08010f70 <_reclaim_reent>:
 8010f70:	4b2c      	ldr	r3, [pc, #176]	; (8011024 <_reclaim_reent+0xb4>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	4283      	cmp	r3, r0
 8010f76:	b570      	push	{r4, r5, r6, lr}
 8010f78:	4604      	mov	r4, r0
 8010f7a:	d051      	beq.n	8011020 <_reclaim_reent+0xb0>
 8010f7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010f7e:	b143      	cbz	r3, 8010f92 <_reclaim_reent+0x22>
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d14a      	bne.n	801101c <_reclaim_reent+0xac>
 8010f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f88:	6819      	ldr	r1, [r3, #0]
 8010f8a:	b111      	cbz	r1, 8010f92 <_reclaim_reent+0x22>
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	f001 fc2d 	bl	80127ec <_free_r>
 8010f92:	6961      	ldr	r1, [r4, #20]
 8010f94:	b111      	cbz	r1, 8010f9c <_reclaim_reent+0x2c>
 8010f96:	4620      	mov	r0, r4
 8010f98:	f001 fc28 	bl	80127ec <_free_r>
 8010f9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010f9e:	b111      	cbz	r1, 8010fa6 <_reclaim_reent+0x36>
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f001 fc23 	bl	80127ec <_free_r>
 8010fa6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010fa8:	b111      	cbz	r1, 8010fb0 <_reclaim_reent+0x40>
 8010faa:	4620      	mov	r0, r4
 8010fac:	f001 fc1e 	bl	80127ec <_free_r>
 8010fb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010fb2:	b111      	cbz	r1, 8010fba <_reclaim_reent+0x4a>
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f001 fc19 	bl	80127ec <_free_r>
 8010fba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010fbc:	b111      	cbz	r1, 8010fc4 <_reclaim_reent+0x54>
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f001 fc14 	bl	80127ec <_free_r>
 8010fc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010fc6:	b111      	cbz	r1, 8010fce <_reclaim_reent+0x5e>
 8010fc8:	4620      	mov	r0, r4
 8010fca:	f001 fc0f 	bl	80127ec <_free_r>
 8010fce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010fd0:	b111      	cbz	r1, 8010fd8 <_reclaim_reent+0x68>
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	f001 fc0a 	bl	80127ec <_free_r>
 8010fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010fda:	b111      	cbz	r1, 8010fe2 <_reclaim_reent+0x72>
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f001 fc05 	bl	80127ec <_free_r>
 8010fe2:	69a3      	ldr	r3, [r4, #24]
 8010fe4:	b1e3      	cbz	r3, 8011020 <_reclaim_reent+0xb0>
 8010fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010fe8:	4620      	mov	r0, r4
 8010fea:	4798      	blx	r3
 8010fec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010fee:	b1b9      	cbz	r1, 8011020 <_reclaim_reent+0xb0>
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ff6:	f7ff bfad 	b.w	8010f54 <cleanup_glue>
 8010ffa:	5949      	ldr	r1, [r1, r5]
 8010ffc:	b941      	cbnz	r1, 8011010 <_reclaim_reent+0xa0>
 8010ffe:	3504      	adds	r5, #4
 8011000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011002:	2d80      	cmp	r5, #128	; 0x80
 8011004:	68d9      	ldr	r1, [r3, #12]
 8011006:	d1f8      	bne.n	8010ffa <_reclaim_reent+0x8a>
 8011008:	4620      	mov	r0, r4
 801100a:	f001 fbef 	bl	80127ec <_free_r>
 801100e:	e7ba      	b.n	8010f86 <_reclaim_reent+0x16>
 8011010:	680e      	ldr	r6, [r1, #0]
 8011012:	4620      	mov	r0, r4
 8011014:	f001 fbea 	bl	80127ec <_free_r>
 8011018:	4631      	mov	r1, r6
 801101a:	e7ef      	b.n	8010ffc <_reclaim_reent+0x8c>
 801101c:	2500      	movs	r5, #0
 801101e:	e7ef      	b.n	8011000 <_reclaim_reent+0x90>
 8011020:	bd70      	pop	{r4, r5, r6, pc}
 8011022:	bf00      	nop
 8011024:	200001b0 	.word	0x200001b0

08011028 <_sbrk_r>:
 8011028:	b538      	push	{r3, r4, r5, lr}
 801102a:	4d06      	ldr	r5, [pc, #24]	; (8011044 <_sbrk_r+0x1c>)
 801102c:	2300      	movs	r3, #0
 801102e:	4604      	mov	r4, r0
 8011030:	4608      	mov	r0, r1
 8011032:	602b      	str	r3, [r5, #0]
 8011034:	f7f2 fbc0 	bl	80037b8 <_sbrk>
 8011038:	1c43      	adds	r3, r0, #1
 801103a:	d102      	bne.n	8011042 <_sbrk_r+0x1a>
 801103c:	682b      	ldr	r3, [r5, #0]
 801103e:	b103      	cbz	r3, 8011042 <_sbrk_r+0x1a>
 8011040:	6023      	str	r3, [r4, #0]
 8011042:	bd38      	pop	{r3, r4, r5, pc}
 8011044:	2000eef4 	.word	0x2000eef4

08011048 <siprintf>:
 8011048:	b40e      	push	{r1, r2, r3}
 801104a:	b500      	push	{lr}
 801104c:	b09c      	sub	sp, #112	; 0x70
 801104e:	ab1d      	add	r3, sp, #116	; 0x74
 8011050:	9002      	str	r0, [sp, #8]
 8011052:	9006      	str	r0, [sp, #24]
 8011054:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011058:	4809      	ldr	r0, [pc, #36]	; (8011080 <siprintf+0x38>)
 801105a:	9107      	str	r1, [sp, #28]
 801105c:	9104      	str	r1, [sp, #16]
 801105e:	4909      	ldr	r1, [pc, #36]	; (8011084 <siprintf+0x3c>)
 8011060:	f853 2b04 	ldr.w	r2, [r3], #4
 8011064:	9105      	str	r1, [sp, #20]
 8011066:	6800      	ldr	r0, [r0, #0]
 8011068:	9301      	str	r3, [sp, #4]
 801106a:	a902      	add	r1, sp, #8
 801106c:	f001 fc6a 	bl	8012944 <_svfiprintf_r>
 8011070:	9b02      	ldr	r3, [sp, #8]
 8011072:	2200      	movs	r2, #0
 8011074:	701a      	strb	r2, [r3, #0]
 8011076:	b01c      	add	sp, #112	; 0x70
 8011078:	f85d eb04 	ldr.w	lr, [sp], #4
 801107c:	b003      	add	sp, #12
 801107e:	4770      	bx	lr
 8011080:	200001b0 	.word	0x200001b0
 8011084:	ffff0208 	.word	0xffff0208

08011088 <__sread>:
 8011088:	b510      	push	{r4, lr}
 801108a:	460c      	mov	r4, r1
 801108c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011090:	f001 fd58 	bl	8012b44 <_read_r>
 8011094:	2800      	cmp	r0, #0
 8011096:	bfab      	itete	ge
 8011098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801109a:	89a3      	ldrhlt	r3, [r4, #12]
 801109c:	181b      	addge	r3, r3, r0
 801109e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80110a2:	bfac      	ite	ge
 80110a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80110a6:	81a3      	strhlt	r3, [r4, #12]
 80110a8:	bd10      	pop	{r4, pc}

080110aa <__swrite>:
 80110aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ae:	461f      	mov	r7, r3
 80110b0:	898b      	ldrh	r3, [r1, #12]
 80110b2:	05db      	lsls	r3, r3, #23
 80110b4:	4605      	mov	r5, r0
 80110b6:	460c      	mov	r4, r1
 80110b8:	4616      	mov	r6, r2
 80110ba:	d505      	bpl.n	80110c8 <__swrite+0x1e>
 80110bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110c0:	2302      	movs	r3, #2
 80110c2:	2200      	movs	r2, #0
 80110c4:	f000 ffde 	bl	8012084 <_lseek_r>
 80110c8:	89a3      	ldrh	r3, [r4, #12]
 80110ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80110d2:	81a3      	strh	r3, [r4, #12]
 80110d4:	4632      	mov	r2, r6
 80110d6:	463b      	mov	r3, r7
 80110d8:	4628      	mov	r0, r5
 80110da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110de:	f000 b86f 	b.w	80111c0 <_write_r>

080110e2 <__sseek>:
 80110e2:	b510      	push	{r4, lr}
 80110e4:	460c      	mov	r4, r1
 80110e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110ea:	f000 ffcb 	bl	8012084 <_lseek_r>
 80110ee:	1c43      	adds	r3, r0, #1
 80110f0:	89a3      	ldrh	r3, [r4, #12]
 80110f2:	bf15      	itete	ne
 80110f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80110f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80110fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80110fe:	81a3      	strheq	r3, [r4, #12]
 8011100:	bf18      	it	ne
 8011102:	81a3      	strhne	r3, [r4, #12]
 8011104:	bd10      	pop	{r4, pc}

08011106 <__sclose>:
 8011106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801110a:	f000 b86b 	b.w	80111e4 <_close_r>

0801110e <strcat>:
 801110e:	b510      	push	{r4, lr}
 8011110:	4602      	mov	r2, r0
 8011112:	7814      	ldrb	r4, [r2, #0]
 8011114:	4613      	mov	r3, r2
 8011116:	3201      	adds	r2, #1
 8011118:	2c00      	cmp	r4, #0
 801111a:	d1fa      	bne.n	8011112 <strcat+0x4>
 801111c:	3b01      	subs	r3, #1
 801111e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011122:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011126:	2a00      	cmp	r2, #0
 8011128:	d1f9      	bne.n	801111e <strcat+0x10>
 801112a:	bd10      	pop	{r4, pc}

0801112c <strcpy>:
 801112c:	4603      	mov	r3, r0
 801112e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011132:	f803 2b01 	strb.w	r2, [r3], #1
 8011136:	2a00      	cmp	r2, #0
 8011138:	d1f9      	bne.n	801112e <strcpy+0x2>
 801113a:	4770      	bx	lr

0801113c <__utoa>:
 801113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801113e:	4c1f      	ldr	r4, [pc, #124]	; (80111bc <__utoa+0x80>)
 8011140:	b08b      	sub	sp, #44	; 0x2c
 8011142:	4605      	mov	r5, r0
 8011144:	460b      	mov	r3, r1
 8011146:	466e      	mov	r6, sp
 8011148:	f104 0c20 	add.w	ip, r4, #32
 801114c:	6820      	ldr	r0, [r4, #0]
 801114e:	6861      	ldr	r1, [r4, #4]
 8011150:	4637      	mov	r7, r6
 8011152:	c703      	stmia	r7!, {r0, r1}
 8011154:	3408      	adds	r4, #8
 8011156:	4564      	cmp	r4, ip
 8011158:	463e      	mov	r6, r7
 801115a:	d1f7      	bne.n	801114c <__utoa+0x10>
 801115c:	7921      	ldrb	r1, [r4, #4]
 801115e:	7139      	strb	r1, [r7, #4]
 8011160:	1e91      	subs	r1, r2, #2
 8011162:	6820      	ldr	r0, [r4, #0]
 8011164:	6038      	str	r0, [r7, #0]
 8011166:	2922      	cmp	r1, #34	; 0x22
 8011168:	f04f 0100 	mov.w	r1, #0
 801116c:	d904      	bls.n	8011178 <__utoa+0x3c>
 801116e:	7019      	strb	r1, [r3, #0]
 8011170:	460b      	mov	r3, r1
 8011172:	4618      	mov	r0, r3
 8011174:	b00b      	add	sp, #44	; 0x2c
 8011176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011178:	1e58      	subs	r0, r3, #1
 801117a:	4684      	mov	ip, r0
 801117c:	fbb5 f7f2 	udiv	r7, r5, r2
 8011180:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8011184:	fb02 5617 	mls	r6, r2, r7, r5
 8011188:	4476      	add	r6, lr
 801118a:	460c      	mov	r4, r1
 801118c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8011190:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8011194:	462e      	mov	r6, r5
 8011196:	42b2      	cmp	r2, r6
 8011198:	f101 0101 	add.w	r1, r1, #1
 801119c:	463d      	mov	r5, r7
 801119e:	d9ed      	bls.n	801117c <__utoa+0x40>
 80111a0:	2200      	movs	r2, #0
 80111a2:	545a      	strb	r2, [r3, r1]
 80111a4:	1919      	adds	r1, r3, r4
 80111a6:	1aa5      	subs	r5, r4, r2
 80111a8:	42aa      	cmp	r2, r5
 80111aa:	dae2      	bge.n	8011172 <__utoa+0x36>
 80111ac:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80111b0:	780e      	ldrb	r6, [r1, #0]
 80111b2:	7006      	strb	r6, [r0, #0]
 80111b4:	3201      	adds	r2, #1
 80111b6:	f801 5901 	strb.w	r5, [r1], #-1
 80111ba:	e7f4      	b.n	80111a6 <__utoa+0x6a>
 80111bc:	080197c0 	.word	0x080197c0

080111c0 <_write_r>:
 80111c0:	b538      	push	{r3, r4, r5, lr}
 80111c2:	4d07      	ldr	r5, [pc, #28]	; (80111e0 <_write_r+0x20>)
 80111c4:	4604      	mov	r4, r0
 80111c6:	4608      	mov	r0, r1
 80111c8:	4611      	mov	r1, r2
 80111ca:	2200      	movs	r2, #0
 80111cc:	602a      	str	r2, [r5, #0]
 80111ce:	461a      	mov	r2, r3
 80111d0:	f7f2 faa1 	bl	8003716 <_write>
 80111d4:	1c43      	adds	r3, r0, #1
 80111d6:	d102      	bne.n	80111de <_write_r+0x1e>
 80111d8:	682b      	ldr	r3, [r5, #0]
 80111da:	b103      	cbz	r3, 80111de <_write_r+0x1e>
 80111dc:	6023      	str	r3, [r4, #0]
 80111de:	bd38      	pop	{r3, r4, r5, pc}
 80111e0:	2000eef4 	.word	0x2000eef4

080111e4 <_close_r>:
 80111e4:	b538      	push	{r3, r4, r5, lr}
 80111e6:	4d06      	ldr	r5, [pc, #24]	; (8011200 <_close_r+0x1c>)
 80111e8:	2300      	movs	r3, #0
 80111ea:	4604      	mov	r4, r0
 80111ec:	4608      	mov	r0, r1
 80111ee:	602b      	str	r3, [r5, #0]
 80111f0:	f7f2 faad 	bl	800374e <_close>
 80111f4:	1c43      	adds	r3, r0, #1
 80111f6:	d102      	bne.n	80111fe <_close_r+0x1a>
 80111f8:	682b      	ldr	r3, [r5, #0]
 80111fa:	b103      	cbz	r3, 80111fe <_close_r+0x1a>
 80111fc:	6023      	str	r3, [r4, #0]
 80111fe:	bd38      	pop	{r3, r4, r5, pc}
 8011200:	2000eef4 	.word	0x2000eef4

08011204 <quorem>:
 8011204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011208:	6903      	ldr	r3, [r0, #16]
 801120a:	690c      	ldr	r4, [r1, #16]
 801120c:	42a3      	cmp	r3, r4
 801120e:	4607      	mov	r7, r0
 8011210:	f2c0 8081 	blt.w	8011316 <quorem+0x112>
 8011214:	3c01      	subs	r4, #1
 8011216:	f101 0814 	add.w	r8, r1, #20
 801121a:	f100 0514 	add.w	r5, r0, #20
 801121e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011222:	9301      	str	r3, [sp, #4]
 8011224:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801122c:	3301      	adds	r3, #1
 801122e:	429a      	cmp	r2, r3
 8011230:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011234:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011238:	fbb2 f6f3 	udiv	r6, r2, r3
 801123c:	d331      	bcc.n	80112a2 <quorem+0x9e>
 801123e:	f04f 0e00 	mov.w	lr, #0
 8011242:	4640      	mov	r0, r8
 8011244:	46ac      	mov	ip, r5
 8011246:	46f2      	mov	sl, lr
 8011248:	f850 2b04 	ldr.w	r2, [r0], #4
 801124c:	b293      	uxth	r3, r2
 801124e:	fb06 e303 	mla	r3, r6, r3, lr
 8011252:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011256:	b29b      	uxth	r3, r3
 8011258:	ebaa 0303 	sub.w	r3, sl, r3
 801125c:	0c12      	lsrs	r2, r2, #16
 801125e:	f8dc a000 	ldr.w	sl, [ip]
 8011262:	fb06 e202 	mla	r2, r6, r2, lr
 8011266:	fa13 f38a 	uxtah	r3, r3, sl
 801126a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801126e:	fa1f fa82 	uxth.w	sl, r2
 8011272:	f8dc 2000 	ldr.w	r2, [ip]
 8011276:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801127a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801127e:	b29b      	uxth	r3, r3
 8011280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011284:	4581      	cmp	r9, r0
 8011286:	f84c 3b04 	str.w	r3, [ip], #4
 801128a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801128e:	d2db      	bcs.n	8011248 <quorem+0x44>
 8011290:	f855 300b 	ldr.w	r3, [r5, fp]
 8011294:	b92b      	cbnz	r3, 80112a2 <quorem+0x9e>
 8011296:	9b01      	ldr	r3, [sp, #4]
 8011298:	3b04      	subs	r3, #4
 801129a:	429d      	cmp	r5, r3
 801129c:	461a      	mov	r2, r3
 801129e:	d32e      	bcc.n	80112fe <quorem+0xfa>
 80112a0:	613c      	str	r4, [r7, #16]
 80112a2:	4638      	mov	r0, r7
 80112a4:	f001 f992 	bl	80125cc <__mcmp>
 80112a8:	2800      	cmp	r0, #0
 80112aa:	db24      	blt.n	80112f6 <quorem+0xf2>
 80112ac:	3601      	adds	r6, #1
 80112ae:	4628      	mov	r0, r5
 80112b0:	f04f 0c00 	mov.w	ip, #0
 80112b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80112b8:	f8d0 e000 	ldr.w	lr, [r0]
 80112bc:	b293      	uxth	r3, r2
 80112be:	ebac 0303 	sub.w	r3, ip, r3
 80112c2:	0c12      	lsrs	r2, r2, #16
 80112c4:	fa13 f38e 	uxtah	r3, r3, lr
 80112c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80112cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112d6:	45c1      	cmp	r9, r8
 80112d8:	f840 3b04 	str.w	r3, [r0], #4
 80112dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80112e0:	d2e8      	bcs.n	80112b4 <quorem+0xb0>
 80112e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80112e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80112ea:	b922      	cbnz	r2, 80112f6 <quorem+0xf2>
 80112ec:	3b04      	subs	r3, #4
 80112ee:	429d      	cmp	r5, r3
 80112f0:	461a      	mov	r2, r3
 80112f2:	d30a      	bcc.n	801130a <quorem+0x106>
 80112f4:	613c      	str	r4, [r7, #16]
 80112f6:	4630      	mov	r0, r6
 80112f8:	b003      	add	sp, #12
 80112fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112fe:	6812      	ldr	r2, [r2, #0]
 8011300:	3b04      	subs	r3, #4
 8011302:	2a00      	cmp	r2, #0
 8011304:	d1cc      	bne.n	80112a0 <quorem+0x9c>
 8011306:	3c01      	subs	r4, #1
 8011308:	e7c7      	b.n	801129a <quorem+0x96>
 801130a:	6812      	ldr	r2, [r2, #0]
 801130c:	3b04      	subs	r3, #4
 801130e:	2a00      	cmp	r2, #0
 8011310:	d1f0      	bne.n	80112f4 <quorem+0xf0>
 8011312:	3c01      	subs	r4, #1
 8011314:	e7eb      	b.n	80112ee <quorem+0xea>
 8011316:	2000      	movs	r0, #0
 8011318:	e7ee      	b.n	80112f8 <quorem+0xf4>
 801131a:	0000      	movs	r0, r0
 801131c:	0000      	movs	r0, r0
	...

08011320 <_dtoa_r>:
 8011320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011324:	ed2d 8b02 	vpush	{d8}
 8011328:	ec57 6b10 	vmov	r6, r7, d0
 801132c:	b095      	sub	sp, #84	; 0x54
 801132e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011330:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011334:	9105      	str	r1, [sp, #20]
 8011336:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801133a:	4604      	mov	r4, r0
 801133c:	9209      	str	r2, [sp, #36]	; 0x24
 801133e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011340:	b975      	cbnz	r5, 8011360 <_dtoa_r+0x40>
 8011342:	2010      	movs	r0, #16
 8011344:	f000 feb0 	bl	80120a8 <malloc>
 8011348:	4602      	mov	r2, r0
 801134a:	6260      	str	r0, [r4, #36]	; 0x24
 801134c:	b920      	cbnz	r0, 8011358 <_dtoa_r+0x38>
 801134e:	4bb2      	ldr	r3, [pc, #712]	; (8011618 <_dtoa_r+0x2f8>)
 8011350:	21ea      	movs	r1, #234	; 0xea
 8011352:	48b2      	ldr	r0, [pc, #712]	; (801161c <_dtoa_r+0x2fc>)
 8011354:	f001 fc08 	bl	8012b68 <__assert_func>
 8011358:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801135c:	6005      	str	r5, [r0, #0]
 801135e:	60c5      	str	r5, [r0, #12]
 8011360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011362:	6819      	ldr	r1, [r3, #0]
 8011364:	b151      	cbz	r1, 801137c <_dtoa_r+0x5c>
 8011366:	685a      	ldr	r2, [r3, #4]
 8011368:	604a      	str	r2, [r1, #4]
 801136a:	2301      	movs	r3, #1
 801136c:	4093      	lsls	r3, r2
 801136e:	608b      	str	r3, [r1, #8]
 8011370:	4620      	mov	r0, r4
 8011372:	f000 feed 	bl	8012150 <_Bfree>
 8011376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011378:	2200      	movs	r2, #0
 801137a:	601a      	str	r2, [r3, #0]
 801137c:	1e3b      	subs	r3, r7, #0
 801137e:	bfb9      	ittee	lt
 8011380:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011384:	9303      	strlt	r3, [sp, #12]
 8011386:	2300      	movge	r3, #0
 8011388:	f8c8 3000 	strge.w	r3, [r8]
 801138c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011390:	4ba3      	ldr	r3, [pc, #652]	; (8011620 <_dtoa_r+0x300>)
 8011392:	bfbc      	itt	lt
 8011394:	2201      	movlt	r2, #1
 8011396:	f8c8 2000 	strlt.w	r2, [r8]
 801139a:	ea33 0309 	bics.w	r3, r3, r9
 801139e:	d11b      	bne.n	80113d8 <_dtoa_r+0xb8>
 80113a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80113a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80113a6:	6013      	str	r3, [r2, #0]
 80113a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80113ac:	4333      	orrs	r3, r6
 80113ae:	f000 857a 	beq.w	8011ea6 <_dtoa_r+0xb86>
 80113b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113b4:	b963      	cbnz	r3, 80113d0 <_dtoa_r+0xb0>
 80113b6:	4b9b      	ldr	r3, [pc, #620]	; (8011624 <_dtoa_r+0x304>)
 80113b8:	e024      	b.n	8011404 <_dtoa_r+0xe4>
 80113ba:	4b9b      	ldr	r3, [pc, #620]	; (8011628 <_dtoa_r+0x308>)
 80113bc:	9300      	str	r3, [sp, #0]
 80113be:	3308      	adds	r3, #8
 80113c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80113c2:	6013      	str	r3, [r2, #0]
 80113c4:	9800      	ldr	r0, [sp, #0]
 80113c6:	b015      	add	sp, #84	; 0x54
 80113c8:	ecbd 8b02 	vpop	{d8}
 80113cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d0:	4b94      	ldr	r3, [pc, #592]	; (8011624 <_dtoa_r+0x304>)
 80113d2:	9300      	str	r3, [sp, #0]
 80113d4:	3303      	adds	r3, #3
 80113d6:	e7f3      	b.n	80113c0 <_dtoa_r+0xa0>
 80113d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113dc:	2200      	movs	r2, #0
 80113de:	ec51 0b17 	vmov	r0, r1, d7
 80113e2:	2300      	movs	r3, #0
 80113e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80113e8:	f7ef fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80113ec:	4680      	mov	r8, r0
 80113ee:	b158      	cbz	r0, 8011408 <_dtoa_r+0xe8>
 80113f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80113f2:	2301      	movs	r3, #1
 80113f4:	6013      	str	r3, [r2, #0]
 80113f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f000 8551 	beq.w	8011ea0 <_dtoa_r+0xb80>
 80113fe:	488b      	ldr	r0, [pc, #556]	; (801162c <_dtoa_r+0x30c>)
 8011400:	6018      	str	r0, [r3, #0]
 8011402:	1e43      	subs	r3, r0, #1
 8011404:	9300      	str	r3, [sp, #0]
 8011406:	e7dd      	b.n	80113c4 <_dtoa_r+0xa4>
 8011408:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801140c:	aa12      	add	r2, sp, #72	; 0x48
 801140e:	a913      	add	r1, sp, #76	; 0x4c
 8011410:	4620      	mov	r0, r4
 8011412:	f001 f97f 	bl	8012714 <__d2b>
 8011416:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801141a:	4683      	mov	fp, r0
 801141c:	2d00      	cmp	r5, #0
 801141e:	d07c      	beq.n	801151a <_dtoa_r+0x1fa>
 8011420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011422:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801142a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801142e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011432:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801143a:	4b7d      	ldr	r3, [pc, #500]	; (8011630 <_dtoa_r+0x310>)
 801143c:	2200      	movs	r2, #0
 801143e:	4630      	mov	r0, r6
 8011440:	4639      	mov	r1, r7
 8011442:	f7ee ff21 	bl	8000288 <__aeabi_dsub>
 8011446:	a36e      	add	r3, pc, #440	; (adr r3, 8011600 <_dtoa_r+0x2e0>)
 8011448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144c:	f7ef f8d4 	bl	80005f8 <__aeabi_dmul>
 8011450:	a36d      	add	r3, pc, #436	; (adr r3, 8011608 <_dtoa_r+0x2e8>)
 8011452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011456:	f7ee ff19 	bl	800028c <__adddf3>
 801145a:	4606      	mov	r6, r0
 801145c:	4628      	mov	r0, r5
 801145e:	460f      	mov	r7, r1
 8011460:	f7ef f860 	bl	8000524 <__aeabi_i2d>
 8011464:	a36a      	add	r3, pc, #424	; (adr r3, 8011610 <_dtoa_r+0x2f0>)
 8011466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146a:	f7ef f8c5 	bl	80005f8 <__aeabi_dmul>
 801146e:	4602      	mov	r2, r0
 8011470:	460b      	mov	r3, r1
 8011472:	4630      	mov	r0, r6
 8011474:	4639      	mov	r1, r7
 8011476:	f7ee ff09 	bl	800028c <__adddf3>
 801147a:	4606      	mov	r6, r0
 801147c:	460f      	mov	r7, r1
 801147e:	f7ef fb6b 	bl	8000b58 <__aeabi_d2iz>
 8011482:	2200      	movs	r2, #0
 8011484:	4682      	mov	sl, r0
 8011486:	2300      	movs	r3, #0
 8011488:	4630      	mov	r0, r6
 801148a:	4639      	mov	r1, r7
 801148c:	f7ef fb26 	bl	8000adc <__aeabi_dcmplt>
 8011490:	b148      	cbz	r0, 80114a6 <_dtoa_r+0x186>
 8011492:	4650      	mov	r0, sl
 8011494:	f7ef f846 	bl	8000524 <__aeabi_i2d>
 8011498:	4632      	mov	r2, r6
 801149a:	463b      	mov	r3, r7
 801149c:	f7ef fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 80114a0:	b908      	cbnz	r0, 80114a6 <_dtoa_r+0x186>
 80114a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80114a6:	f1ba 0f16 	cmp.w	sl, #22
 80114aa:	d854      	bhi.n	8011556 <_dtoa_r+0x236>
 80114ac:	4b61      	ldr	r3, [pc, #388]	; (8011634 <_dtoa_r+0x314>)
 80114ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80114b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80114ba:	f7ef fb0f 	bl	8000adc <__aeabi_dcmplt>
 80114be:	2800      	cmp	r0, #0
 80114c0:	d04b      	beq.n	801155a <_dtoa_r+0x23a>
 80114c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80114c6:	2300      	movs	r3, #0
 80114c8:	930e      	str	r3, [sp, #56]	; 0x38
 80114ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80114cc:	1b5d      	subs	r5, r3, r5
 80114ce:	1e6b      	subs	r3, r5, #1
 80114d0:	9304      	str	r3, [sp, #16]
 80114d2:	bf43      	ittte	mi
 80114d4:	2300      	movmi	r3, #0
 80114d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80114da:	9304      	strmi	r3, [sp, #16]
 80114dc:	f04f 0800 	movpl.w	r8, #0
 80114e0:	f1ba 0f00 	cmp.w	sl, #0
 80114e4:	db3b      	blt.n	801155e <_dtoa_r+0x23e>
 80114e6:	9b04      	ldr	r3, [sp, #16]
 80114e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80114ec:	4453      	add	r3, sl
 80114ee:	9304      	str	r3, [sp, #16]
 80114f0:	2300      	movs	r3, #0
 80114f2:	9306      	str	r3, [sp, #24]
 80114f4:	9b05      	ldr	r3, [sp, #20]
 80114f6:	2b09      	cmp	r3, #9
 80114f8:	d869      	bhi.n	80115ce <_dtoa_r+0x2ae>
 80114fa:	2b05      	cmp	r3, #5
 80114fc:	bfc4      	itt	gt
 80114fe:	3b04      	subgt	r3, #4
 8011500:	9305      	strgt	r3, [sp, #20]
 8011502:	9b05      	ldr	r3, [sp, #20]
 8011504:	f1a3 0302 	sub.w	r3, r3, #2
 8011508:	bfcc      	ite	gt
 801150a:	2500      	movgt	r5, #0
 801150c:	2501      	movle	r5, #1
 801150e:	2b03      	cmp	r3, #3
 8011510:	d869      	bhi.n	80115e6 <_dtoa_r+0x2c6>
 8011512:	e8df f003 	tbb	[pc, r3]
 8011516:	4e2c      	.short	0x4e2c
 8011518:	5a4c      	.short	0x5a4c
 801151a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801151e:	441d      	add	r5, r3
 8011520:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011524:	2b20      	cmp	r3, #32
 8011526:	bfc1      	itttt	gt
 8011528:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801152c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011530:	fa09 f303 	lslgt.w	r3, r9, r3
 8011534:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011538:	bfda      	itte	le
 801153a:	f1c3 0320 	rsble	r3, r3, #32
 801153e:	fa06 f003 	lslle.w	r0, r6, r3
 8011542:	4318      	orrgt	r0, r3
 8011544:	f7ee ffde 	bl	8000504 <__aeabi_ui2d>
 8011548:	2301      	movs	r3, #1
 801154a:	4606      	mov	r6, r0
 801154c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011550:	3d01      	subs	r5, #1
 8011552:	9310      	str	r3, [sp, #64]	; 0x40
 8011554:	e771      	b.n	801143a <_dtoa_r+0x11a>
 8011556:	2301      	movs	r3, #1
 8011558:	e7b6      	b.n	80114c8 <_dtoa_r+0x1a8>
 801155a:	900e      	str	r0, [sp, #56]	; 0x38
 801155c:	e7b5      	b.n	80114ca <_dtoa_r+0x1aa>
 801155e:	f1ca 0300 	rsb	r3, sl, #0
 8011562:	9306      	str	r3, [sp, #24]
 8011564:	2300      	movs	r3, #0
 8011566:	eba8 080a 	sub.w	r8, r8, sl
 801156a:	930d      	str	r3, [sp, #52]	; 0x34
 801156c:	e7c2      	b.n	80114f4 <_dtoa_r+0x1d4>
 801156e:	2300      	movs	r3, #0
 8011570:	9308      	str	r3, [sp, #32]
 8011572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011574:	2b00      	cmp	r3, #0
 8011576:	dc39      	bgt.n	80115ec <_dtoa_r+0x2cc>
 8011578:	f04f 0901 	mov.w	r9, #1
 801157c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011580:	464b      	mov	r3, r9
 8011582:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011586:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011588:	2200      	movs	r2, #0
 801158a:	6042      	str	r2, [r0, #4]
 801158c:	2204      	movs	r2, #4
 801158e:	f102 0614 	add.w	r6, r2, #20
 8011592:	429e      	cmp	r6, r3
 8011594:	6841      	ldr	r1, [r0, #4]
 8011596:	d92f      	bls.n	80115f8 <_dtoa_r+0x2d8>
 8011598:	4620      	mov	r0, r4
 801159a:	f000 fd99 	bl	80120d0 <_Balloc>
 801159e:	9000      	str	r0, [sp, #0]
 80115a0:	2800      	cmp	r0, #0
 80115a2:	d14b      	bne.n	801163c <_dtoa_r+0x31c>
 80115a4:	4b24      	ldr	r3, [pc, #144]	; (8011638 <_dtoa_r+0x318>)
 80115a6:	4602      	mov	r2, r0
 80115a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80115ac:	e6d1      	b.n	8011352 <_dtoa_r+0x32>
 80115ae:	2301      	movs	r3, #1
 80115b0:	e7de      	b.n	8011570 <_dtoa_r+0x250>
 80115b2:	2300      	movs	r3, #0
 80115b4:	9308      	str	r3, [sp, #32]
 80115b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115b8:	eb0a 0903 	add.w	r9, sl, r3
 80115bc:	f109 0301 	add.w	r3, r9, #1
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	9301      	str	r3, [sp, #4]
 80115c4:	bfb8      	it	lt
 80115c6:	2301      	movlt	r3, #1
 80115c8:	e7dd      	b.n	8011586 <_dtoa_r+0x266>
 80115ca:	2301      	movs	r3, #1
 80115cc:	e7f2      	b.n	80115b4 <_dtoa_r+0x294>
 80115ce:	2501      	movs	r5, #1
 80115d0:	2300      	movs	r3, #0
 80115d2:	9305      	str	r3, [sp, #20]
 80115d4:	9508      	str	r5, [sp, #32]
 80115d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80115da:	2200      	movs	r2, #0
 80115dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80115e0:	2312      	movs	r3, #18
 80115e2:	9209      	str	r2, [sp, #36]	; 0x24
 80115e4:	e7cf      	b.n	8011586 <_dtoa_r+0x266>
 80115e6:	2301      	movs	r3, #1
 80115e8:	9308      	str	r3, [sp, #32]
 80115ea:	e7f4      	b.n	80115d6 <_dtoa_r+0x2b6>
 80115ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80115f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80115f4:	464b      	mov	r3, r9
 80115f6:	e7c6      	b.n	8011586 <_dtoa_r+0x266>
 80115f8:	3101      	adds	r1, #1
 80115fa:	6041      	str	r1, [r0, #4]
 80115fc:	0052      	lsls	r2, r2, #1
 80115fe:	e7c6      	b.n	801158e <_dtoa_r+0x26e>
 8011600:	636f4361 	.word	0x636f4361
 8011604:	3fd287a7 	.word	0x3fd287a7
 8011608:	8b60c8b3 	.word	0x8b60c8b3
 801160c:	3fc68a28 	.word	0x3fc68a28
 8011610:	509f79fb 	.word	0x509f79fb
 8011614:	3fd34413 	.word	0x3fd34413
 8011618:	080197f2 	.word	0x080197f2
 801161c:	08019809 	.word	0x08019809
 8011620:	7ff00000 	.word	0x7ff00000
 8011624:	080197ee 	.word	0x080197ee
 8011628:	080197e5 	.word	0x080197e5
 801162c:	0801979d 	.word	0x0801979d
 8011630:	3ff80000 	.word	0x3ff80000
 8011634:	08019908 	.word	0x08019908
 8011638:	08019868 	.word	0x08019868
 801163c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801163e:	9a00      	ldr	r2, [sp, #0]
 8011640:	601a      	str	r2, [r3, #0]
 8011642:	9b01      	ldr	r3, [sp, #4]
 8011644:	2b0e      	cmp	r3, #14
 8011646:	f200 80ad 	bhi.w	80117a4 <_dtoa_r+0x484>
 801164a:	2d00      	cmp	r5, #0
 801164c:	f000 80aa 	beq.w	80117a4 <_dtoa_r+0x484>
 8011650:	f1ba 0f00 	cmp.w	sl, #0
 8011654:	dd36      	ble.n	80116c4 <_dtoa_r+0x3a4>
 8011656:	4ac3      	ldr	r2, [pc, #780]	; (8011964 <_dtoa_r+0x644>)
 8011658:	f00a 030f 	and.w	r3, sl, #15
 801165c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011660:	ed93 7b00 	vldr	d7, [r3]
 8011664:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011668:	ea4f 172a 	mov.w	r7, sl, asr #4
 801166c:	eeb0 8a47 	vmov.f32	s16, s14
 8011670:	eef0 8a67 	vmov.f32	s17, s15
 8011674:	d016      	beq.n	80116a4 <_dtoa_r+0x384>
 8011676:	4bbc      	ldr	r3, [pc, #752]	; (8011968 <_dtoa_r+0x648>)
 8011678:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801167c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011680:	f7ef f8e4 	bl	800084c <__aeabi_ddiv>
 8011684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011688:	f007 070f 	and.w	r7, r7, #15
 801168c:	2503      	movs	r5, #3
 801168e:	4eb6      	ldr	r6, [pc, #728]	; (8011968 <_dtoa_r+0x648>)
 8011690:	b957      	cbnz	r7, 80116a8 <_dtoa_r+0x388>
 8011692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011696:	ec53 2b18 	vmov	r2, r3, d8
 801169a:	f7ef f8d7 	bl	800084c <__aeabi_ddiv>
 801169e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116a2:	e029      	b.n	80116f8 <_dtoa_r+0x3d8>
 80116a4:	2502      	movs	r5, #2
 80116a6:	e7f2      	b.n	801168e <_dtoa_r+0x36e>
 80116a8:	07f9      	lsls	r1, r7, #31
 80116aa:	d508      	bpl.n	80116be <_dtoa_r+0x39e>
 80116ac:	ec51 0b18 	vmov	r0, r1, d8
 80116b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80116b4:	f7ee ffa0 	bl	80005f8 <__aeabi_dmul>
 80116b8:	ec41 0b18 	vmov	d8, r0, r1
 80116bc:	3501      	adds	r5, #1
 80116be:	107f      	asrs	r7, r7, #1
 80116c0:	3608      	adds	r6, #8
 80116c2:	e7e5      	b.n	8011690 <_dtoa_r+0x370>
 80116c4:	f000 80a6 	beq.w	8011814 <_dtoa_r+0x4f4>
 80116c8:	f1ca 0600 	rsb	r6, sl, #0
 80116cc:	4ba5      	ldr	r3, [pc, #660]	; (8011964 <_dtoa_r+0x644>)
 80116ce:	4fa6      	ldr	r7, [pc, #664]	; (8011968 <_dtoa_r+0x648>)
 80116d0:	f006 020f 	and.w	r2, r6, #15
 80116d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80116e0:	f7ee ff8a 	bl	80005f8 <__aeabi_dmul>
 80116e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116e8:	1136      	asrs	r6, r6, #4
 80116ea:	2300      	movs	r3, #0
 80116ec:	2502      	movs	r5, #2
 80116ee:	2e00      	cmp	r6, #0
 80116f0:	f040 8085 	bne.w	80117fe <_dtoa_r+0x4de>
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d1d2      	bne.n	801169e <_dtoa_r+0x37e>
 80116f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	f000 808c 	beq.w	8011818 <_dtoa_r+0x4f8>
 8011700:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011704:	4b99      	ldr	r3, [pc, #612]	; (801196c <_dtoa_r+0x64c>)
 8011706:	2200      	movs	r2, #0
 8011708:	4630      	mov	r0, r6
 801170a:	4639      	mov	r1, r7
 801170c:	f7ef f9e6 	bl	8000adc <__aeabi_dcmplt>
 8011710:	2800      	cmp	r0, #0
 8011712:	f000 8081 	beq.w	8011818 <_dtoa_r+0x4f8>
 8011716:	9b01      	ldr	r3, [sp, #4]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d07d      	beq.n	8011818 <_dtoa_r+0x4f8>
 801171c:	f1b9 0f00 	cmp.w	r9, #0
 8011720:	dd3c      	ble.n	801179c <_dtoa_r+0x47c>
 8011722:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011726:	9307      	str	r3, [sp, #28]
 8011728:	2200      	movs	r2, #0
 801172a:	4b91      	ldr	r3, [pc, #580]	; (8011970 <_dtoa_r+0x650>)
 801172c:	4630      	mov	r0, r6
 801172e:	4639      	mov	r1, r7
 8011730:	f7ee ff62 	bl	80005f8 <__aeabi_dmul>
 8011734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011738:	3501      	adds	r5, #1
 801173a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801173e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011742:	4628      	mov	r0, r5
 8011744:	f7ee feee 	bl	8000524 <__aeabi_i2d>
 8011748:	4632      	mov	r2, r6
 801174a:	463b      	mov	r3, r7
 801174c:	f7ee ff54 	bl	80005f8 <__aeabi_dmul>
 8011750:	4b88      	ldr	r3, [pc, #544]	; (8011974 <_dtoa_r+0x654>)
 8011752:	2200      	movs	r2, #0
 8011754:	f7ee fd9a 	bl	800028c <__adddf3>
 8011758:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801175c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011760:	9303      	str	r3, [sp, #12]
 8011762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011764:	2b00      	cmp	r3, #0
 8011766:	d15c      	bne.n	8011822 <_dtoa_r+0x502>
 8011768:	4b83      	ldr	r3, [pc, #524]	; (8011978 <_dtoa_r+0x658>)
 801176a:	2200      	movs	r2, #0
 801176c:	4630      	mov	r0, r6
 801176e:	4639      	mov	r1, r7
 8011770:	f7ee fd8a 	bl	8000288 <__aeabi_dsub>
 8011774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011778:	4606      	mov	r6, r0
 801177a:	460f      	mov	r7, r1
 801177c:	f7ef f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 8011780:	2800      	cmp	r0, #0
 8011782:	f040 8296 	bne.w	8011cb2 <_dtoa_r+0x992>
 8011786:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801178a:	4630      	mov	r0, r6
 801178c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011790:	4639      	mov	r1, r7
 8011792:	f7ef f9a3 	bl	8000adc <__aeabi_dcmplt>
 8011796:	2800      	cmp	r0, #0
 8011798:	f040 8288 	bne.w	8011cac <_dtoa_r+0x98c>
 801179c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80117a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80117a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	f2c0 8158 	blt.w	8011a5c <_dtoa_r+0x73c>
 80117ac:	f1ba 0f0e 	cmp.w	sl, #14
 80117b0:	f300 8154 	bgt.w	8011a5c <_dtoa_r+0x73c>
 80117b4:	4b6b      	ldr	r3, [pc, #428]	; (8011964 <_dtoa_r+0x644>)
 80117b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80117ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80117be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	f280 80e3 	bge.w	801198c <_dtoa_r+0x66c>
 80117c6:	9b01      	ldr	r3, [sp, #4]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f300 80df 	bgt.w	801198c <_dtoa_r+0x66c>
 80117ce:	f040 826d 	bne.w	8011cac <_dtoa_r+0x98c>
 80117d2:	4b69      	ldr	r3, [pc, #420]	; (8011978 <_dtoa_r+0x658>)
 80117d4:	2200      	movs	r2, #0
 80117d6:	4640      	mov	r0, r8
 80117d8:	4649      	mov	r1, r9
 80117da:	f7ee ff0d 	bl	80005f8 <__aeabi_dmul>
 80117de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117e2:	f7ef f98f 	bl	8000b04 <__aeabi_dcmpge>
 80117e6:	9e01      	ldr	r6, [sp, #4]
 80117e8:	4637      	mov	r7, r6
 80117ea:	2800      	cmp	r0, #0
 80117ec:	f040 8243 	bne.w	8011c76 <_dtoa_r+0x956>
 80117f0:	9d00      	ldr	r5, [sp, #0]
 80117f2:	2331      	movs	r3, #49	; 0x31
 80117f4:	f805 3b01 	strb.w	r3, [r5], #1
 80117f8:	f10a 0a01 	add.w	sl, sl, #1
 80117fc:	e23f      	b.n	8011c7e <_dtoa_r+0x95e>
 80117fe:	07f2      	lsls	r2, r6, #31
 8011800:	d505      	bpl.n	801180e <_dtoa_r+0x4ee>
 8011802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011806:	f7ee fef7 	bl	80005f8 <__aeabi_dmul>
 801180a:	3501      	adds	r5, #1
 801180c:	2301      	movs	r3, #1
 801180e:	1076      	asrs	r6, r6, #1
 8011810:	3708      	adds	r7, #8
 8011812:	e76c      	b.n	80116ee <_dtoa_r+0x3ce>
 8011814:	2502      	movs	r5, #2
 8011816:	e76f      	b.n	80116f8 <_dtoa_r+0x3d8>
 8011818:	9b01      	ldr	r3, [sp, #4]
 801181a:	f8cd a01c 	str.w	sl, [sp, #28]
 801181e:	930c      	str	r3, [sp, #48]	; 0x30
 8011820:	e78d      	b.n	801173e <_dtoa_r+0x41e>
 8011822:	9900      	ldr	r1, [sp, #0]
 8011824:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011828:	4b4e      	ldr	r3, [pc, #312]	; (8011964 <_dtoa_r+0x644>)
 801182a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801182e:	4401      	add	r1, r0
 8011830:	9102      	str	r1, [sp, #8]
 8011832:	9908      	ldr	r1, [sp, #32]
 8011834:	eeb0 8a47 	vmov.f32	s16, s14
 8011838:	eef0 8a67 	vmov.f32	s17, s15
 801183c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011840:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011844:	2900      	cmp	r1, #0
 8011846:	d045      	beq.n	80118d4 <_dtoa_r+0x5b4>
 8011848:	494c      	ldr	r1, [pc, #304]	; (801197c <_dtoa_r+0x65c>)
 801184a:	2000      	movs	r0, #0
 801184c:	f7ee fffe 	bl	800084c <__aeabi_ddiv>
 8011850:	ec53 2b18 	vmov	r2, r3, d8
 8011854:	f7ee fd18 	bl	8000288 <__aeabi_dsub>
 8011858:	9d00      	ldr	r5, [sp, #0]
 801185a:	ec41 0b18 	vmov	d8, r0, r1
 801185e:	4639      	mov	r1, r7
 8011860:	4630      	mov	r0, r6
 8011862:	f7ef f979 	bl	8000b58 <__aeabi_d2iz>
 8011866:	900c      	str	r0, [sp, #48]	; 0x30
 8011868:	f7ee fe5c 	bl	8000524 <__aeabi_i2d>
 801186c:	4602      	mov	r2, r0
 801186e:	460b      	mov	r3, r1
 8011870:	4630      	mov	r0, r6
 8011872:	4639      	mov	r1, r7
 8011874:	f7ee fd08 	bl	8000288 <__aeabi_dsub>
 8011878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801187a:	3330      	adds	r3, #48	; 0x30
 801187c:	f805 3b01 	strb.w	r3, [r5], #1
 8011880:	ec53 2b18 	vmov	r2, r3, d8
 8011884:	4606      	mov	r6, r0
 8011886:	460f      	mov	r7, r1
 8011888:	f7ef f928 	bl	8000adc <__aeabi_dcmplt>
 801188c:	2800      	cmp	r0, #0
 801188e:	d165      	bne.n	801195c <_dtoa_r+0x63c>
 8011890:	4632      	mov	r2, r6
 8011892:	463b      	mov	r3, r7
 8011894:	4935      	ldr	r1, [pc, #212]	; (801196c <_dtoa_r+0x64c>)
 8011896:	2000      	movs	r0, #0
 8011898:	f7ee fcf6 	bl	8000288 <__aeabi_dsub>
 801189c:	ec53 2b18 	vmov	r2, r3, d8
 80118a0:	f7ef f91c 	bl	8000adc <__aeabi_dcmplt>
 80118a4:	2800      	cmp	r0, #0
 80118a6:	f040 80b9 	bne.w	8011a1c <_dtoa_r+0x6fc>
 80118aa:	9b02      	ldr	r3, [sp, #8]
 80118ac:	429d      	cmp	r5, r3
 80118ae:	f43f af75 	beq.w	801179c <_dtoa_r+0x47c>
 80118b2:	4b2f      	ldr	r3, [pc, #188]	; (8011970 <_dtoa_r+0x650>)
 80118b4:	ec51 0b18 	vmov	r0, r1, d8
 80118b8:	2200      	movs	r2, #0
 80118ba:	f7ee fe9d 	bl	80005f8 <__aeabi_dmul>
 80118be:	4b2c      	ldr	r3, [pc, #176]	; (8011970 <_dtoa_r+0x650>)
 80118c0:	ec41 0b18 	vmov	d8, r0, r1
 80118c4:	2200      	movs	r2, #0
 80118c6:	4630      	mov	r0, r6
 80118c8:	4639      	mov	r1, r7
 80118ca:	f7ee fe95 	bl	80005f8 <__aeabi_dmul>
 80118ce:	4606      	mov	r6, r0
 80118d0:	460f      	mov	r7, r1
 80118d2:	e7c4      	b.n	801185e <_dtoa_r+0x53e>
 80118d4:	ec51 0b17 	vmov	r0, r1, d7
 80118d8:	f7ee fe8e 	bl	80005f8 <__aeabi_dmul>
 80118dc:	9b02      	ldr	r3, [sp, #8]
 80118de:	9d00      	ldr	r5, [sp, #0]
 80118e0:	930c      	str	r3, [sp, #48]	; 0x30
 80118e2:	ec41 0b18 	vmov	d8, r0, r1
 80118e6:	4639      	mov	r1, r7
 80118e8:	4630      	mov	r0, r6
 80118ea:	f7ef f935 	bl	8000b58 <__aeabi_d2iz>
 80118ee:	9011      	str	r0, [sp, #68]	; 0x44
 80118f0:	f7ee fe18 	bl	8000524 <__aeabi_i2d>
 80118f4:	4602      	mov	r2, r0
 80118f6:	460b      	mov	r3, r1
 80118f8:	4630      	mov	r0, r6
 80118fa:	4639      	mov	r1, r7
 80118fc:	f7ee fcc4 	bl	8000288 <__aeabi_dsub>
 8011900:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011902:	3330      	adds	r3, #48	; 0x30
 8011904:	f805 3b01 	strb.w	r3, [r5], #1
 8011908:	9b02      	ldr	r3, [sp, #8]
 801190a:	429d      	cmp	r5, r3
 801190c:	4606      	mov	r6, r0
 801190e:	460f      	mov	r7, r1
 8011910:	f04f 0200 	mov.w	r2, #0
 8011914:	d134      	bne.n	8011980 <_dtoa_r+0x660>
 8011916:	4b19      	ldr	r3, [pc, #100]	; (801197c <_dtoa_r+0x65c>)
 8011918:	ec51 0b18 	vmov	r0, r1, d8
 801191c:	f7ee fcb6 	bl	800028c <__adddf3>
 8011920:	4602      	mov	r2, r0
 8011922:	460b      	mov	r3, r1
 8011924:	4630      	mov	r0, r6
 8011926:	4639      	mov	r1, r7
 8011928:	f7ef f8f6 	bl	8000b18 <__aeabi_dcmpgt>
 801192c:	2800      	cmp	r0, #0
 801192e:	d175      	bne.n	8011a1c <_dtoa_r+0x6fc>
 8011930:	ec53 2b18 	vmov	r2, r3, d8
 8011934:	4911      	ldr	r1, [pc, #68]	; (801197c <_dtoa_r+0x65c>)
 8011936:	2000      	movs	r0, #0
 8011938:	f7ee fca6 	bl	8000288 <__aeabi_dsub>
 801193c:	4602      	mov	r2, r0
 801193e:	460b      	mov	r3, r1
 8011940:	4630      	mov	r0, r6
 8011942:	4639      	mov	r1, r7
 8011944:	f7ef f8ca 	bl	8000adc <__aeabi_dcmplt>
 8011948:	2800      	cmp	r0, #0
 801194a:	f43f af27 	beq.w	801179c <_dtoa_r+0x47c>
 801194e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011950:	1e6b      	subs	r3, r5, #1
 8011952:	930c      	str	r3, [sp, #48]	; 0x30
 8011954:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011958:	2b30      	cmp	r3, #48	; 0x30
 801195a:	d0f8      	beq.n	801194e <_dtoa_r+0x62e>
 801195c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011960:	e04a      	b.n	80119f8 <_dtoa_r+0x6d8>
 8011962:	bf00      	nop
 8011964:	08019908 	.word	0x08019908
 8011968:	080198e0 	.word	0x080198e0
 801196c:	3ff00000 	.word	0x3ff00000
 8011970:	40240000 	.word	0x40240000
 8011974:	401c0000 	.word	0x401c0000
 8011978:	40140000 	.word	0x40140000
 801197c:	3fe00000 	.word	0x3fe00000
 8011980:	4baf      	ldr	r3, [pc, #700]	; (8011c40 <_dtoa_r+0x920>)
 8011982:	f7ee fe39 	bl	80005f8 <__aeabi_dmul>
 8011986:	4606      	mov	r6, r0
 8011988:	460f      	mov	r7, r1
 801198a:	e7ac      	b.n	80118e6 <_dtoa_r+0x5c6>
 801198c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011990:	9d00      	ldr	r5, [sp, #0]
 8011992:	4642      	mov	r2, r8
 8011994:	464b      	mov	r3, r9
 8011996:	4630      	mov	r0, r6
 8011998:	4639      	mov	r1, r7
 801199a:	f7ee ff57 	bl	800084c <__aeabi_ddiv>
 801199e:	f7ef f8db 	bl	8000b58 <__aeabi_d2iz>
 80119a2:	9002      	str	r0, [sp, #8]
 80119a4:	f7ee fdbe 	bl	8000524 <__aeabi_i2d>
 80119a8:	4642      	mov	r2, r8
 80119aa:	464b      	mov	r3, r9
 80119ac:	f7ee fe24 	bl	80005f8 <__aeabi_dmul>
 80119b0:	4602      	mov	r2, r0
 80119b2:	460b      	mov	r3, r1
 80119b4:	4630      	mov	r0, r6
 80119b6:	4639      	mov	r1, r7
 80119b8:	f7ee fc66 	bl	8000288 <__aeabi_dsub>
 80119bc:	9e02      	ldr	r6, [sp, #8]
 80119be:	9f01      	ldr	r7, [sp, #4]
 80119c0:	3630      	adds	r6, #48	; 0x30
 80119c2:	f805 6b01 	strb.w	r6, [r5], #1
 80119c6:	9e00      	ldr	r6, [sp, #0]
 80119c8:	1bae      	subs	r6, r5, r6
 80119ca:	42b7      	cmp	r7, r6
 80119cc:	4602      	mov	r2, r0
 80119ce:	460b      	mov	r3, r1
 80119d0:	d137      	bne.n	8011a42 <_dtoa_r+0x722>
 80119d2:	f7ee fc5b 	bl	800028c <__adddf3>
 80119d6:	4642      	mov	r2, r8
 80119d8:	464b      	mov	r3, r9
 80119da:	4606      	mov	r6, r0
 80119dc:	460f      	mov	r7, r1
 80119de:	f7ef f89b 	bl	8000b18 <__aeabi_dcmpgt>
 80119e2:	b9c8      	cbnz	r0, 8011a18 <_dtoa_r+0x6f8>
 80119e4:	4642      	mov	r2, r8
 80119e6:	464b      	mov	r3, r9
 80119e8:	4630      	mov	r0, r6
 80119ea:	4639      	mov	r1, r7
 80119ec:	f7ef f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 80119f0:	b110      	cbz	r0, 80119f8 <_dtoa_r+0x6d8>
 80119f2:	9b02      	ldr	r3, [sp, #8]
 80119f4:	07d9      	lsls	r1, r3, #31
 80119f6:	d40f      	bmi.n	8011a18 <_dtoa_r+0x6f8>
 80119f8:	4620      	mov	r0, r4
 80119fa:	4659      	mov	r1, fp
 80119fc:	f000 fba8 	bl	8012150 <_Bfree>
 8011a00:	2300      	movs	r3, #0
 8011a02:	702b      	strb	r3, [r5, #0]
 8011a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a06:	f10a 0001 	add.w	r0, sl, #1
 8011a0a:	6018      	str	r0, [r3, #0]
 8011a0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f43f acd8 	beq.w	80113c4 <_dtoa_r+0xa4>
 8011a14:	601d      	str	r5, [r3, #0]
 8011a16:	e4d5      	b.n	80113c4 <_dtoa_r+0xa4>
 8011a18:	f8cd a01c 	str.w	sl, [sp, #28]
 8011a1c:	462b      	mov	r3, r5
 8011a1e:	461d      	mov	r5, r3
 8011a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a24:	2a39      	cmp	r2, #57	; 0x39
 8011a26:	d108      	bne.n	8011a3a <_dtoa_r+0x71a>
 8011a28:	9a00      	ldr	r2, [sp, #0]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d1f7      	bne.n	8011a1e <_dtoa_r+0x6fe>
 8011a2e:	9a07      	ldr	r2, [sp, #28]
 8011a30:	9900      	ldr	r1, [sp, #0]
 8011a32:	3201      	adds	r2, #1
 8011a34:	9207      	str	r2, [sp, #28]
 8011a36:	2230      	movs	r2, #48	; 0x30
 8011a38:	700a      	strb	r2, [r1, #0]
 8011a3a:	781a      	ldrb	r2, [r3, #0]
 8011a3c:	3201      	adds	r2, #1
 8011a3e:	701a      	strb	r2, [r3, #0]
 8011a40:	e78c      	b.n	801195c <_dtoa_r+0x63c>
 8011a42:	4b7f      	ldr	r3, [pc, #508]	; (8011c40 <_dtoa_r+0x920>)
 8011a44:	2200      	movs	r2, #0
 8011a46:	f7ee fdd7 	bl	80005f8 <__aeabi_dmul>
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	4606      	mov	r6, r0
 8011a50:	460f      	mov	r7, r1
 8011a52:	f7ef f839 	bl	8000ac8 <__aeabi_dcmpeq>
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d09b      	beq.n	8011992 <_dtoa_r+0x672>
 8011a5a:	e7cd      	b.n	80119f8 <_dtoa_r+0x6d8>
 8011a5c:	9a08      	ldr	r2, [sp, #32]
 8011a5e:	2a00      	cmp	r2, #0
 8011a60:	f000 80c4 	beq.w	8011bec <_dtoa_r+0x8cc>
 8011a64:	9a05      	ldr	r2, [sp, #20]
 8011a66:	2a01      	cmp	r2, #1
 8011a68:	f300 80a8 	bgt.w	8011bbc <_dtoa_r+0x89c>
 8011a6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011a6e:	2a00      	cmp	r2, #0
 8011a70:	f000 80a0 	beq.w	8011bb4 <_dtoa_r+0x894>
 8011a74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011a78:	9e06      	ldr	r6, [sp, #24]
 8011a7a:	4645      	mov	r5, r8
 8011a7c:	9a04      	ldr	r2, [sp, #16]
 8011a7e:	2101      	movs	r1, #1
 8011a80:	441a      	add	r2, r3
 8011a82:	4620      	mov	r0, r4
 8011a84:	4498      	add	r8, r3
 8011a86:	9204      	str	r2, [sp, #16]
 8011a88:	f000 fc1e 	bl	80122c8 <__i2b>
 8011a8c:	4607      	mov	r7, r0
 8011a8e:	2d00      	cmp	r5, #0
 8011a90:	dd0b      	ble.n	8011aaa <_dtoa_r+0x78a>
 8011a92:	9b04      	ldr	r3, [sp, #16]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	dd08      	ble.n	8011aaa <_dtoa_r+0x78a>
 8011a98:	42ab      	cmp	r3, r5
 8011a9a:	9a04      	ldr	r2, [sp, #16]
 8011a9c:	bfa8      	it	ge
 8011a9e:	462b      	movge	r3, r5
 8011aa0:	eba8 0803 	sub.w	r8, r8, r3
 8011aa4:	1aed      	subs	r5, r5, r3
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	9304      	str	r3, [sp, #16]
 8011aaa:	9b06      	ldr	r3, [sp, #24]
 8011aac:	b1fb      	cbz	r3, 8011aee <_dtoa_r+0x7ce>
 8011aae:	9b08      	ldr	r3, [sp, #32]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	f000 809f 	beq.w	8011bf4 <_dtoa_r+0x8d4>
 8011ab6:	2e00      	cmp	r6, #0
 8011ab8:	dd11      	ble.n	8011ade <_dtoa_r+0x7be>
 8011aba:	4639      	mov	r1, r7
 8011abc:	4632      	mov	r2, r6
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f000 fcbe 	bl	8012440 <__pow5mult>
 8011ac4:	465a      	mov	r2, fp
 8011ac6:	4601      	mov	r1, r0
 8011ac8:	4607      	mov	r7, r0
 8011aca:	4620      	mov	r0, r4
 8011acc:	f000 fc12 	bl	80122f4 <__multiply>
 8011ad0:	4659      	mov	r1, fp
 8011ad2:	9007      	str	r0, [sp, #28]
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	f000 fb3b 	bl	8012150 <_Bfree>
 8011ada:	9b07      	ldr	r3, [sp, #28]
 8011adc:	469b      	mov	fp, r3
 8011ade:	9b06      	ldr	r3, [sp, #24]
 8011ae0:	1b9a      	subs	r2, r3, r6
 8011ae2:	d004      	beq.n	8011aee <_dtoa_r+0x7ce>
 8011ae4:	4659      	mov	r1, fp
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	f000 fcaa 	bl	8012440 <__pow5mult>
 8011aec:	4683      	mov	fp, r0
 8011aee:	2101      	movs	r1, #1
 8011af0:	4620      	mov	r0, r4
 8011af2:	f000 fbe9 	bl	80122c8 <__i2b>
 8011af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	4606      	mov	r6, r0
 8011afc:	dd7c      	ble.n	8011bf8 <_dtoa_r+0x8d8>
 8011afe:	461a      	mov	r2, r3
 8011b00:	4601      	mov	r1, r0
 8011b02:	4620      	mov	r0, r4
 8011b04:	f000 fc9c 	bl	8012440 <__pow5mult>
 8011b08:	9b05      	ldr	r3, [sp, #20]
 8011b0a:	2b01      	cmp	r3, #1
 8011b0c:	4606      	mov	r6, r0
 8011b0e:	dd76      	ble.n	8011bfe <_dtoa_r+0x8de>
 8011b10:	2300      	movs	r3, #0
 8011b12:	9306      	str	r3, [sp, #24]
 8011b14:	6933      	ldr	r3, [r6, #16]
 8011b16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011b1a:	6918      	ldr	r0, [r3, #16]
 8011b1c:	f000 fb84 	bl	8012228 <__hi0bits>
 8011b20:	f1c0 0020 	rsb	r0, r0, #32
 8011b24:	9b04      	ldr	r3, [sp, #16]
 8011b26:	4418      	add	r0, r3
 8011b28:	f010 001f 	ands.w	r0, r0, #31
 8011b2c:	f000 8086 	beq.w	8011c3c <_dtoa_r+0x91c>
 8011b30:	f1c0 0320 	rsb	r3, r0, #32
 8011b34:	2b04      	cmp	r3, #4
 8011b36:	dd7f      	ble.n	8011c38 <_dtoa_r+0x918>
 8011b38:	f1c0 001c 	rsb	r0, r0, #28
 8011b3c:	9b04      	ldr	r3, [sp, #16]
 8011b3e:	4403      	add	r3, r0
 8011b40:	4480      	add	r8, r0
 8011b42:	4405      	add	r5, r0
 8011b44:	9304      	str	r3, [sp, #16]
 8011b46:	f1b8 0f00 	cmp.w	r8, #0
 8011b4a:	dd05      	ble.n	8011b58 <_dtoa_r+0x838>
 8011b4c:	4659      	mov	r1, fp
 8011b4e:	4642      	mov	r2, r8
 8011b50:	4620      	mov	r0, r4
 8011b52:	f000 fccf 	bl	80124f4 <__lshift>
 8011b56:	4683      	mov	fp, r0
 8011b58:	9b04      	ldr	r3, [sp, #16]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	dd05      	ble.n	8011b6a <_dtoa_r+0x84a>
 8011b5e:	4631      	mov	r1, r6
 8011b60:	461a      	mov	r2, r3
 8011b62:	4620      	mov	r0, r4
 8011b64:	f000 fcc6 	bl	80124f4 <__lshift>
 8011b68:	4606      	mov	r6, r0
 8011b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d069      	beq.n	8011c44 <_dtoa_r+0x924>
 8011b70:	4631      	mov	r1, r6
 8011b72:	4658      	mov	r0, fp
 8011b74:	f000 fd2a 	bl	80125cc <__mcmp>
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	da63      	bge.n	8011c44 <_dtoa_r+0x924>
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	4659      	mov	r1, fp
 8011b80:	220a      	movs	r2, #10
 8011b82:	4620      	mov	r0, r4
 8011b84:	f000 fb06 	bl	8012194 <__multadd>
 8011b88:	9b08      	ldr	r3, [sp, #32]
 8011b8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011b8e:	4683      	mov	fp, r0
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	f000 818f 	beq.w	8011eb4 <_dtoa_r+0xb94>
 8011b96:	4639      	mov	r1, r7
 8011b98:	2300      	movs	r3, #0
 8011b9a:	220a      	movs	r2, #10
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	f000 faf9 	bl	8012194 <__multadd>
 8011ba2:	f1b9 0f00 	cmp.w	r9, #0
 8011ba6:	4607      	mov	r7, r0
 8011ba8:	f300 808e 	bgt.w	8011cc8 <_dtoa_r+0x9a8>
 8011bac:	9b05      	ldr	r3, [sp, #20]
 8011bae:	2b02      	cmp	r3, #2
 8011bb0:	dc50      	bgt.n	8011c54 <_dtoa_r+0x934>
 8011bb2:	e089      	b.n	8011cc8 <_dtoa_r+0x9a8>
 8011bb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011bb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011bba:	e75d      	b.n	8011a78 <_dtoa_r+0x758>
 8011bbc:	9b01      	ldr	r3, [sp, #4]
 8011bbe:	1e5e      	subs	r6, r3, #1
 8011bc0:	9b06      	ldr	r3, [sp, #24]
 8011bc2:	42b3      	cmp	r3, r6
 8011bc4:	bfbf      	itttt	lt
 8011bc6:	9b06      	ldrlt	r3, [sp, #24]
 8011bc8:	9606      	strlt	r6, [sp, #24]
 8011bca:	1af2      	sublt	r2, r6, r3
 8011bcc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011bce:	bfb6      	itet	lt
 8011bd0:	189b      	addlt	r3, r3, r2
 8011bd2:	1b9e      	subge	r6, r3, r6
 8011bd4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011bd6:	9b01      	ldr	r3, [sp, #4]
 8011bd8:	bfb8      	it	lt
 8011bda:	2600      	movlt	r6, #0
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	bfb5      	itete	lt
 8011be0:	eba8 0503 	sublt.w	r5, r8, r3
 8011be4:	9b01      	ldrge	r3, [sp, #4]
 8011be6:	2300      	movlt	r3, #0
 8011be8:	4645      	movge	r5, r8
 8011bea:	e747      	b.n	8011a7c <_dtoa_r+0x75c>
 8011bec:	9e06      	ldr	r6, [sp, #24]
 8011bee:	9f08      	ldr	r7, [sp, #32]
 8011bf0:	4645      	mov	r5, r8
 8011bf2:	e74c      	b.n	8011a8e <_dtoa_r+0x76e>
 8011bf4:	9a06      	ldr	r2, [sp, #24]
 8011bf6:	e775      	b.n	8011ae4 <_dtoa_r+0x7c4>
 8011bf8:	9b05      	ldr	r3, [sp, #20]
 8011bfa:	2b01      	cmp	r3, #1
 8011bfc:	dc18      	bgt.n	8011c30 <_dtoa_r+0x910>
 8011bfe:	9b02      	ldr	r3, [sp, #8]
 8011c00:	b9b3      	cbnz	r3, 8011c30 <_dtoa_r+0x910>
 8011c02:	9b03      	ldr	r3, [sp, #12]
 8011c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c08:	b9a3      	cbnz	r3, 8011c34 <_dtoa_r+0x914>
 8011c0a:	9b03      	ldr	r3, [sp, #12]
 8011c0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c10:	0d1b      	lsrs	r3, r3, #20
 8011c12:	051b      	lsls	r3, r3, #20
 8011c14:	b12b      	cbz	r3, 8011c22 <_dtoa_r+0x902>
 8011c16:	9b04      	ldr	r3, [sp, #16]
 8011c18:	3301      	adds	r3, #1
 8011c1a:	9304      	str	r3, [sp, #16]
 8011c1c:	f108 0801 	add.w	r8, r8, #1
 8011c20:	2301      	movs	r3, #1
 8011c22:	9306      	str	r3, [sp, #24]
 8011c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	f47f af74 	bne.w	8011b14 <_dtoa_r+0x7f4>
 8011c2c:	2001      	movs	r0, #1
 8011c2e:	e779      	b.n	8011b24 <_dtoa_r+0x804>
 8011c30:	2300      	movs	r3, #0
 8011c32:	e7f6      	b.n	8011c22 <_dtoa_r+0x902>
 8011c34:	9b02      	ldr	r3, [sp, #8]
 8011c36:	e7f4      	b.n	8011c22 <_dtoa_r+0x902>
 8011c38:	d085      	beq.n	8011b46 <_dtoa_r+0x826>
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	301c      	adds	r0, #28
 8011c3e:	e77d      	b.n	8011b3c <_dtoa_r+0x81c>
 8011c40:	40240000 	.word	0x40240000
 8011c44:	9b01      	ldr	r3, [sp, #4]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	dc38      	bgt.n	8011cbc <_dtoa_r+0x99c>
 8011c4a:	9b05      	ldr	r3, [sp, #20]
 8011c4c:	2b02      	cmp	r3, #2
 8011c4e:	dd35      	ble.n	8011cbc <_dtoa_r+0x99c>
 8011c50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011c54:	f1b9 0f00 	cmp.w	r9, #0
 8011c58:	d10d      	bne.n	8011c76 <_dtoa_r+0x956>
 8011c5a:	4631      	mov	r1, r6
 8011c5c:	464b      	mov	r3, r9
 8011c5e:	2205      	movs	r2, #5
 8011c60:	4620      	mov	r0, r4
 8011c62:	f000 fa97 	bl	8012194 <__multadd>
 8011c66:	4601      	mov	r1, r0
 8011c68:	4606      	mov	r6, r0
 8011c6a:	4658      	mov	r0, fp
 8011c6c:	f000 fcae 	bl	80125cc <__mcmp>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	f73f adbd 	bgt.w	80117f0 <_dtoa_r+0x4d0>
 8011c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c78:	9d00      	ldr	r5, [sp, #0]
 8011c7a:	ea6f 0a03 	mvn.w	sl, r3
 8011c7e:	f04f 0800 	mov.w	r8, #0
 8011c82:	4631      	mov	r1, r6
 8011c84:	4620      	mov	r0, r4
 8011c86:	f000 fa63 	bl	8012150 <_Bfree>
 8011c8a:	2f00      	cmp	r7, #0
 8011c8c:	f43f aeb4 	beq.w	80119f8 <_dtoa_r+0x6d8>
 8011c90:	f1b8 0f00 	cmp.w	r8, #0
 8011c94:	d005      	beq.n	8011ca2 <_dtoa_r+0x982>
 8011c96:	45b8      	cmp	r8, r7
 8011c98:	d003      	beq.n	8011ca2 <_dtoa_r+0x982>
 8011c9a:	4641      	mov	r1, r8
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	f000 fa57 	bl	8012150 <_Bfree>
 8011ca2:	4639      	mov	r1, r7
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	f000 fa53 	bl	8012150 <_Bfree>
 8011caa:	e6a5      	b.n	80119f8 <_dtoa_r+0x6d8>
 8011cac:	2600      	movs	r6, #0
 8011cae:	4637      	mov	r7, r6
 8011cb0:	e7e1      	b.n	8011c76 <_dtoa_r+0x956>
 8011cb2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011cb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011cb8:	4637      	mov	r7, r6
 8011cba:	e599      	b.n	80117f0 <_dtoa_r+0x4d0>
 8011cbc:	9b08      	ldr	r3, [sp, #32]
 8011cbe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	f000 80fd 	beq.w	8011ec2 <_dtoa_r+0xba2>
 8011cc8:	2d00      	cmp	r5, #0
 8011cca:	dd05      	ble.n	8011cd8 <_dtoa_r+0x9b8>
 8011ccc:	4639      	mov	r1, r7
 8011cce:	462a      	mov	r2, r5
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	f000 fc0f 	bl	80124f4 <__lshift>
 8011cd6:	4607      	mov	r7, r0
 8011cd8:	9b06      	ldr	r3, [sp, #24]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d05c      	beq.n	8011d98 <_dtoa_r+0xa78>
 8011cde:	6879      	ldr	r1, [r7, #4]
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f000 f9f5 	bl	80120d0 <_Balloc>
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	b928      	cbnz	r0, 8011cf6 <_dtoa_r+0x9d6>
 8011cea:	4b80      	ldr	r3, [pc, #512]	; (8011eec <_dtoa_r+0xbcc>)
 8011cec:	4602      	mov	r2, r0
 8011cee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011cf2:	f7ff bb2e 	b.w	8011352 <_dtoa_r+0x32>
 8011cf6:	693a      	ldr	r2, [r7, #16]
 8011cf8:	3202      	adds	r2, #2
 8011cfa:	0092      	lsls	r2, r2, #2
 8011cfc:	f107 010c 	add.w	r1, r7, #12
 8011d00:	300c      	adds	r0, #12
 8011d02:	f7fe fc4c 	bl	801059e <memcpy>
 8011d06:	2201      	movs	r2, #1
 8011d08:	4629      	mov	r1, r5
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f000 fbf2 	bl	80124f4 <__lshift>
 8011d10:	9b00      	ldr	r3, [sp, #0]
 8011d12:	3301      	adds	r3, #1
 8011d14:	9301      	str	r3, [sp, #4]
 8011d16:	9b00      	ldr	r3, [sp, #0]
 8011d18:	444b      	add	r3, r9
 8011d1a:	9307      	str	r3, [sp, #28]
 8011d1c:	9b02      	ldr	r3, [sp, #8]
 8011d1e:	f003 0301 	and.w	r3, r3, #1
 8011d22:	46b8      	mov	r8, r7
 8011d24:	9306      	str	r3, [sp, #24]
 8011d26:	4607      	mov	r7, r0
 8011d28:	9b01      	ldr	r3, [sp, #4]
 8011d2a:	4631      	mov	r1, r6
 8011d2c:	3b01      	subs	r3, #1
 8011d2e:	4658      	mov	r0, fp
 8011d30:	9302      	str	r3, [sp, #8]
 8011d32:	f7ff fa67 	bl	8011204 <quorem>
 8011d36:	4603      	mov	r3, r0
 8011d38:	3330      	adds	r3, #48	; 0x30
 8011d3a:	9004      	str	r0, [sp, #16]
 8011d3c:	4641      	mov	r1, r8
 8011d3e:	4658      	mov	r0, fp
 8011d40:	9308      	str	r3, [sp, #32]
 8011d42:	f000 fc43 	bl	80125cc <__mcmp>
 8011d46:	463a      	mov	r2, r7
 8011d48:	4681      	mov	r9, r0
 8011d4a:	4631      	mov	r1, r6
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f000 fc59 	bl	8012604 <__mdiff>
 8011d52:	68c2      	ldr	r2, [r0, #12]
 8011d54:	9b08      	ldr	r3, [sp, #32]
 8011d56:	4605      	mov	r5, r0
 8011d58:	bb02      	cbnz	r2, 8011d9c <_dtoa_r+0xa7c>
 8011d5a:	4601      	mov	r1, r0
 8011d5c:	4658      	mov	r0, fp
 8011d5e:	f000 fc35 	bl	80125cc <__mcmp>
 8011d62:	9b08      	ldr	r3, [sp, #32]
 8011d64:	4602      	mov	r2, r0
 8011d66:	4629      	mov	r1, r5
 8011d68:	4620      	mov	r0, r4
 8011d6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011d6e:	f000 f9ef 	bl	8012150 <_Bfree>
 8011d72:	9b05      	ldr	r3, [sp, #20]
 8011d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d76:	9d01      	ldr	r5, [sp, #4]
 8011d78:	ea43 0102 	orr.w	r1, r3, r2
 8011d7c:	9b06      	ldr	r3, [sp, #24]
 8011d7e:	430b      	orrs	r3, r1
 8011d80:	9b08      	ldr	r3, [sp, #32]
 8011d82:	d10d      	bne.n	8011da0 <_dtoa_r+0xa80>
 8011d84:	2b39      	cmp	r3, #57	; 0x39
 8011d86:	d029      	beq.n	8011ddc <_dtoa_r+0xabc>
 8011d88:	f1b9 0f00 	cmp.w	r9, #0
 8011d8c:	dd01      	ble.n	8011d92 <_dtoa_r+0xa72>
 8011d8e:	9b04      	ldr	r3, [sp, #16]
 8011d90:	3331      	adds	r3, #49	; 0x31
 8011d92:	9a02      	ldr	r2, [sp, #8]
 8011d94:	7013      	strb	r3, [r2, #0]
 8011d96:	e774      	b.n	8011c82 <_dtoa_r+0x962>
 8011d98:	4638      	mov	r0, r7
 8011d9a:	e7b9      	b.n	8011d10 <_dtoa_r+0x9f0>
 8011d9c:	2201      	movs	r2, #1
 8011d9e:	e7e2      	b.n	8011d66 <_dtoa_r+0xa46>
 8011da0:	f1b9 0f00 	cmp.w	r9, #0
 8011da4:	db06      	blt.n	8011db4 <_dtoa_r+0xa94>
 8011da6:	9905      	ldr	r1, [sp, #20]
 8011da8:	ea41 0909 	orr.w	r9, r1, r9
 8011dac:	9906      	ldr	r1, [sp, #24]
 8011dae:	ea59 0101 	orrs.w	r1, r9, r1
 8011db2:	d120      	bne.n	8011df6 <_dtoa_r+0xad6>
 8011db4:	2a00      	cmp	r2, #0
 8011db6:	ddec      	ble.n	8011d92 <_dtoa_r+0xa72>
 8011db8:	4659      	mov	r1, fp
 8011dba:	2201      	movs	r2, #1
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	9301      	str	r3, [sp, #4]
 8011dc0:	f000 fb98 	bl	80124f4 <__lshift>
 8011dc4:	4631      	mov	r1, r6
 8011dc6:	4683      	mov	fp, r0
 8011dc8:	f000 fc00 	bl	80125cc <__mcmp>
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	9b01      	ldr	r3, [sp, #4]
 8011dd0:	dc02      	bgt.n	8011dd8 <_dtoa_r+0xab8>
 8011dd2:	d1de      	bne.n	8011d92 <_dtoa_r+0xa72>
 8011dd4:	07da      	lsls	r2, r3, #31
 8011dd6:	d5dc      	bpl.n	8011d92 <_dtoa_r+0xa72>
 8011dd8:	2b39      	cmp	r3, #57	; 0x39
 8011dda:	d1d8      	bne.n	8011d8e <_dtoa_r+0xa6e>
 8011ddc:	9a02      	ldr	r2, [sp, #8]
 8011dde:	2339      	movs	r3, #57	; 0x39
 8011de0:	7013      	strb	r3, [r2, #0]
 8011de2:	462b      	mov	r3, r5
 8011de4:	461d      	mov	r5, r3
 8011de6:	3b01      	subs	r3, #1
 8011de8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011dec:	2a39      	cmp	r2, #57	; 0x39
 8011dee:	d050      	beq.n	8011e92 <_dtoa_r+0xb72>
 8011df0:	3201      	adds	r2, #1
 8011df2:	701a      	strb	r2, [r3, #0]
 8011df4:	e745      	b.n	8011c82 <_dtoa_r+0x962>
 8011df6:	2a00      	cmp	r2, #0
 8011df8:	dd03      	ble.n	8011e02 <_dtoa_r+0xae2>
 8011dfa:	2b39      	cmp	r3, #57	; 0x39
 8011dfc:	d0ee      	beq.n	8011ddc <_dtoa_r+0xabc>
 8011dfe:	3301      	adds	r3, #1
 8011e00:	e7c7      	b.n	8011d92 <_dtoa_r+0xa72>
 8011e02:	9a01      	ldr	r2, [sp, #4]
 8011e04:	9907      	ldr	r1, [sp, #28]
 8011e06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011e0a:	428a      	cmp	r2, r1
 8011e0c:	d02a      	beq.n	8011e64 <_dtoa_r+0xb44>
 8011e0e:	4659      	mov	r1, fp
 8011e10:	2300      	movs	r3, #0
 8011e12:	220a      	movs	r2, #10
 8011e14:	4620      	mov	r0, r4
 8011e16:	f000 f9bd 	bl	8012194 <__multadd>
 8011e1a:	45b8      	cmp	r8, r7
 8011e1c:	4683      	mov	fp, r0
 8011e1e:	f04f 0300 	mov.w	r3, #0
 8011e22:	f04f 020a 	mov.w	r2, #10
 8011e26:	4641      	mov	r1, r8
 8011e28:	4620      	mov	r0, r4
 8011e2a:	d107      	bne.n	8011e3c <_dtoa_r+0xb1c>
 8011e2c:	f000 f9b2 	bl	8012194 <__multadd>
 8011e30:	4680      	mov	r8, r0
 8011e32:	4607      	mov	r7, r0
 8011e34:	9b01      	ldr	r3, [sp, #4]
 8011e36:	3301      	adds	r3, #1
 8011e38:	9301      	str	r3, [sp, #4]
 8011e3a:	e775      	b.n	8011d28 <_dtoa_r+0xa08>
 8011e3c:	f000 f9aa 	bl	8012194 <__multadd>
 8011e40:	4639      	mov	r1, r7
 8011e42:	4680      	mov	r8, r0
 8011e44:	2300      	movs	r3, #0
 8011e46:	220a      	movs	r2, #10
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f000 f9a3 	bl	8012194 <__multadd>
 8011e4e:	4607      	mov	r7, r0
 8011e50:	e7f0      	b.n	8011e34 <_dtoa_r+0xb14>
 8011e52:	f1b9 0f00 	cmp.w	r9, #0
 8011e56:	9a00      	ldr	r2, [sp, #0]
 8011e58:	bfcc      	ite	gt
 8011e5a:	464d      	movgt	r5, r9
 8011e5c:	2501      	movle	r5, #1
 8011e5e:	4415      	add	r5, r2
 8011e60:	f04f 0800 	mov.w	r8, #0
 8011e64:	4659      	mov	r1, fp
 8011e66:	2201      	movs	r2, #1
 8011e68:	4620      	mov	r0, r4
 8011e6a:	9301      	str	r3, [sp, #4]
 8011e6c:	f000 fb42 	bl	80124f4 <__lshift>
 8011e70:	4631      	mov	r1, r6
 8011e72:	4683      	mov	fp, r0
 8011e74:	f000 fbaa 	bl	80125cc <__mcmp>
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	dcb2      	bgt.n	8011de2 <_dtoa_r+0xac2>
 8011e7c:	d102      	bne.n	8011e84 <_dtoa_r+0xb64>
 8011e7e:	9b01      	ldr	r3, [sp, #4]
 8011e80:	07db      	lsls	r3, r3, #31
 8011e82:	d4ae      	bmi.n	8011de2 <_dtoa_r+0xac2>
 8011e84:	462b      	mov	r3, r5
 8011e86:	461d      	mov	r5, r3
 8011e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e8c:	2a30      	cmp	r2, #48	; 0x30
 8011e8e:	d0fa      	beq.n	8011e86 <_dtoa_r+0xb66>
 8011e90:	e6f7      	b.n	8011c82 <_dtoa_r+0x962>
 8011e92:	9a00      	ldr	r2, [sp, #0]
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d1a5      	bne.n	8011de4 <_dtoa_r+0xac4>
 8011e98:	f10a 0a01 	add.w	sl, sl, #1
 8011e9c:	2331      	movs	r3, #49	; 0x31
 8011e9e:	e779      	b.n	8011d94 <_dtoa_r+0xa74>
 8011ea0:	4b13      	ldr	r3, [pc, #76]	; (8011ef0 <_dtoa_r+0xbd0>)
 8011ea2:	f7ff baaf 	b.w	8011404 <_dtoa_r+0xe4>
 8011ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	f47f aa86 	bne.w	80113ba <_dtoa_r+0x9a>
 8011eae:	4b11      	ldr	r3, [pc, #68]	; (8011ef4 <_dtoa_r+0xbd4>)
 8011eb0:	f7ff baa8 	b.w	8011404 <_dtoa_r+0xe4>
 8011eb4:	f1b9 0f00 	cmp.w	r9, #0
 8011eb8:	dc03      	bgt.n	8011ec2 <_dtoa_r+0xba2>
 8011eba:	9b05      	ldr	r3, [sp, #20]
 8011ebc:	2b02      	cmp	r3, #2
 8011ebe:	f73f aec9 	bgt.w	8011c54 <_dtoa_r+0x934>
 8011ec2:	9d00      	ldr	r5, [sp, #0]
 8011ec4:	4631      	mov	r1, r6
 8011ec6:	4658      	mov	r0, fp
 8011ec8:	f7ff f99c 	bl	8011204 <quorem>
 8011ecc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011ed0:	f805 3b01 	strb.w	r3, [r5], #1
 8011ed4:	9a00      	ldr	r2, [sp, #0]
 8011ed6:	1aaa      	subs	r2, r5, r2
 8011ed8:	4591      	cmp	r9, r2
 8011eda:	ddba      	ble.n	8011e52 <_dtoa_r+0xb32>
 8011edc:	4659      	mov	r1, fp
 8011ede:	2300      	movs	r3, #0
 8011ee0:	220a      	movs	r2, #10
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	f000 f956 	bl	8012194 <__multadd>
 8011ee8:	4683      	mov	fp, r0
 8011eea:	e7eb      	b.n	8011ec4 <_dtoa_r+0xba4>
 8011eec:	08019868 	.word	0x08019868
 8011ef0:	0801979c 	.word	0x0801979c
 8011ef4:	080197e5 	.word	0x080197e5

08011ef8 <__sflush_r>:
 8011ef8:	898a      	ldrh	r2, [r1, #12]
 8011efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011efe:	4605      	mov	r5, r0
 8011f00:	0710      	lsls	r0, r2, #28
 8011f02:	460c      	mov	r4, r1
 8011f04:	d458      	bmi.n	8011fb8 <__sflush_r+0xc0>
 8011f06:	684b      	ldr	r3, [r1, #4]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	dc05      	bgt.n	8011f18 <__sflush_r+0x20>
 8011f0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	dc02      	bgt.n	8011f18 <__sflush_r+0x20>
 8011f12:	2000      	movs	r0, #0
 8011f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f1a:	2e00      	cmp	r6, #0
 8011f1c:	d0f9      	beq.n	8011f12 <__sflush_r+0x1a>
 8011f1e:	2300      	movs	r3, #0
 8011f20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011f24:	682f      	ldr	r7, [r5, #0]
 8011f26:	602b      	str	r3, [r5, #0]
 8011f28:	d032      	beq.n	8011f90 <__sflush_r+0x98>
 8011f2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011f2c:	89a3      	ldrh	r3, [r4, #12]
 8011f2e:	075a      	lsls	r2, r3, #29
 8011f30:	d505      	bpl.n	8011f3e <__sflush_r+0x46>
 8011f32:	6863      	ldr	r3, [r4, #4]
 8011f34:	1ac0      	subs	r0, r0, r3
 8011f36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011f38:	b10b      	cbz	r3, 8011f3e <__sflush_r+0x46>
 8011f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f3c:	1ac0      	subs	r0, r0, r3
 8011f3e:	2300      	movs	r3, #0
 8011f40:	4602      	mov	r2, r0
 8011f42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f44:	6a21      	ldr	r1, [r4, #32]
 8011f46:	4628      	mov	r0, r5
 8011f48:	47b0      	blx	r6
 8011f4a:	1c43      	adds	r3, r0, #1
 8011f4c:	89a3      	ldrh	r3, [r4, #12]
 8011f4e:	d106      	bne.n	8011f5e <__sflush_r+0x66>
 8011f50:	6829      	ldr	r1, [r5, #0]
 8011f52:	291d      	cmp	r1, #29
 8011f54:	d82c      	bhi.n	8011fb0 <__sflush_r+0xb8>
 8011f56:	4a2a      	ldr	r2, [pc, #168]	; (8012000 <__sflush_r+0x108>)
 8011f58:	40ca      	lsrs	r2, r1
 8011f5a:	07d6      	lsls	r6, r2, #31
 8011f5c:	d528      	bpl.n	8011fb0 <__sflush_r+0xb8>
 8011f5e:	2200      	movs	r2, #0
 8011f60:	6062      	str	r2, [r4, #4]
 8011f62:	04d9      	lsls	r1, r3, #19
 8011f64:	6922      	ldr	r2, [r4, #16]
 8011f66:	6022      	str	r2, [r4, #0]
 8011f68:	d504      	bpl.n	8011f74 <__sflush_r+0x7c>
 8011f6a:	1c42      	adds	r2, r0, #1
 8011f6c:	d101      	bne.n	8011f72 <__sflush_r+0x7a>
 8011f6e:	682b      	ldr	r3, [r5, #0]
 8011f70:	b903      	cbnz	r3, 8011f74 <__sflush_r+0x7c>
 8011f72:	6560      	str	r0, [r4, #84]	; 0x54
 8011f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f76:	602f      	str	r7, [r5, #0]
 8011f78:	2900      	cmp	r1, #0
 8011f7a:	d0ca      	beq.n	8011f12 <__sflush_r+0x1a>
 8011f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f80:	4299      	cmp	r1, r3
 8011f82:	d002      	beq.n	8011f8a <__sflush_r+0x92>
 8011f84:	4628      	mov	r0, r5
 8011f86:	f000 fc31 	bl	80127ec <_free_r>
 8011f8a:	2000      	movs	r0, #0
 8011f8c:	6360      	str	r0, [r4, #52]	; 0x34
 8011f8e:	e7c1      	b.n	8011f14 <__sflush_r+0x1c>
 8011f90:	6a21      	ldr	r1, [r4, #32]
 8011f92:	2301      	movs	r3, #1
 8011f94:	4628      	mov	r0, r5
 8011f96:	47b0      	blx	r6
 8011f98:	1c41      	adds	r1, r0, #1
 8011f9a:	d1c7      	bne.n	8011f2c <__sflush_r+0x34>
 8011f9c:	682b      	ldr	r3, [r5, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d0c4      	beq.n	8011f2c <__sflush_r+0x34>
 8011fa2:	2b1d      	cmp	r3, #29
 8011fa4:	d001      	beq.n	8011faa <__sflush_r+0xb2>
 8011fa6:	2b16      	cmp	r3, #22
 8011fa8:	d101      	bne.n	8011fae <__sflush_r+0xb6>
 8011faa:	602f      	str	r7, [r5, #0]
 8011fac:	e7b1      	b.n	8011f12 <__sflush_r+0x1a>
 8011fae:	89a3      	ldrh	r3, [r4, #12]
 8011fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fb4:	81a3      	strh	r3, [r4, #12]
 8011fb6:	e7ad      	b.n	8011f14 <__sflush_r+0x1c>
 8011fb8:	690f      	ldr	r7, [r1, #16]
 8011fba:	2f00      	cmp	r7, #0
 8011fbc:	d0a9      	beq.n	8011f12 <__sflush_r+0x1a>
 8011fbe:	0793      	lsls	r3, r2, #30
 8011fc0:	680e      	ldr	r6, [r1, #0]
 8011fc2:	bf08      	it	eq
 8011fc4:	694b      	ldreq	r3, [r1, #20]
 8011fc6:	600f      	str	r7, [r1, #0]
 8011fc8:	bf18      	it	ne
 8011fca:	2300      	movne	r3, #0
 8011fcc:	eba6 0807 	sub.w	r8, r6, r7
 8011fd0:	608b      	str	r3, [r1, #8]
 8011fd2:	f1b8 0f00 	cmp.w	r8, #0
 8011fd6:	dd9c      	ble.n	8011f12 <__sflush_r+0x1a>
 8011fd8:	6a21      	ldr	r1, [r4, #32]
 8011fda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011fdc:	4643      	mov	r3, r8
 8011fde:	463a      	mov	r2, r7
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	47b0      	blx	r6
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	dc06      	bgt.n	8011ff6 <__sflush_r+0xfe>
 8011fe8:	89a3      	ldrh	r3, [r4, #12]
 8011fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fee:	81a3      	strh	r3, [r4, #12]
 8011ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ff4:	e78e      	b.n	8011f14 <__sflush_r+0x1c>
 8011ff6:	4407      	add	r7, r0
 8011ff8:	eba8 0800 	sub.w	r8, r8, r0
 8011ffc:	e7e9      	b.n	8011fd2 <__sflush_r+0xda>
 8011ffe:	bf00      	nop
 8012000:	20400001 	.word	0x20400001

08012004 <_fflush_r>:
 8012004:	b538      	push	{r3, r4, r5, lr}
 8012006:	690b      	ldr	r3, [r1, #16]
 8012008:	4605      	mov	r5, r0
 801200a:	460c      	mov	r4, r1
 801200c:	b913      	cbnz	r3, 8012014 <_fflush_r+0x10>
 801200e:	2500      	movs	r5, #0
 8012010:	4628      	mov	r0, r5
 8012012:	bd38      	pop	{r3, r4, r5, pc}
 8012014:	b118      	cbz	r0, 801201e <_fflush_r+0x1a>
 8012016:	6983      	ldr	r3, [r0, #24]
 8012018:	b90b      	cbnz	r3, 801201e <_fflush_r+0x1a>
 801201a:	f7fe f9e1 	bl	80103e0 <__sinit>
 801201e:	4b14      	ldr	r3, [pc, #80]	; (8012070 <_fflush_r+0x6c>)
 8012020:	429c      	cmp	r4, r3
 8012022:	d11b      	bne.n	801205c <_fflush_r+0x58>
 8012024:	686c      	ldr	r4, [r5, #4]
 8012026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d0ef      	beq.n	801200e <_fflush_r+0xa>
 801202e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012030:	07d0      	lsls	r0, r2, #31
 8012032:	d404      	bmi.n	801203e <_fflush_r+0x3a>
 8012034:	0599      	lsls	r1, r3, #22
 8012036:	d402      	bmi.n	801203e <_fflush_r+0x3a>
 8012038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801203a:	f7fe faae 	bl	801059a <__retarget_lock_acquire_recursive>
 801203e:	4628      	mov	r0, r5
 8012040:	4621      	mov	r1, r4
 8012042:	f7ff ff59 	bl	8011ef8 <__sflush_r>
 8012046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012048:	07da      	lsls	r2, r3, #31
 801204a:	4605      	mov	r5, r0
 801204c:	d4e0      	bmi.n	8012010 <_fflush_r+0xc>
 801204e:	89a3      	ldrh	r3, [r4, #12]
 8012050:	059b      	lsls	r3, r3, #22
 8012052:	d4dd      	bmi.n	8012010 <_fflush_r+0xc>
 8012054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012056:	f7fe faa1 	bl	801059c <__retarget_lock_release_recursive>
 801205a:	e7d9      	b.n	8012010 <_fflush_r+0xc>
 801205c:	4b05      	ldr	r3, [pc, #20]	; (8012074 <_fflush_r+0x70>)
 801205e:	429c      	cmp	r4, r3
 8012060:	d101      	bne.n	8012066 <_fflush_r+0x62>
 8012062:	68ac      	ldr	r4, [r5, #8]
 8012064:	e7df      	b.n	8012026 <_fflush_r+0x22>
 8012066:	4b04      	ldr	r3, [pc, #16]	; (8012078 <_fflush_r+0x74>)
 8012068:	429c      	cmp	r4, r3
 801206a:	bf08      	it	eq
 801206c:	68ec      	ldreq	r4, [r5, #12]
 801206e:	e7da      	b.n	8012026 <_fflush_r+0x22>
 8012070:	08019748 	.word	0x08019748
 8012074:	08019768 	.word	0x08019768
 8012078:	08019728 	.word	0x08019728

0801207c <_localeconv_r>:
 801207c:	4800      	ldr	r0, [pc, #0]	; (8012080 <_localeconv_r+0x4>)
 801207e:	4770      	bx	lr
 8012080:	20000304 	.word	0x20000304

08012084 <_lseek_r>:
 8012084:	b538      	push	{r3, r4, r5, lr}
 8012086:	4d07      	ldr	r5, [pc, #28]	; (80120a4 <_lseek_r+0x20>)
 8012088:	4604      	mov	r4, r0
 801208a:	4608      	mov	r0, r1
 801208c:	4611      	mov	r1, r2
 801208e:	2200      	movs	r2, #0
 8012090:	602a      	str	r2, [r5, #0]
 8012092:	461a      	mov	r2, r3
 8012094:	f7f1 fb82 	bl	800379c <_lseek>
 8012098:	1c43      	adds	r3, r0, #1
 801209a:	d102      	bne.n	80120a2 <_lseek_r+0x1e>
 801209c:	682b      	ldr	r3, [r5, #0]
 801209e:	b103      	cbz	r3, 80120a2 <_lseek_r+0x1e>
 80120a0:	6023      	str	r3, [r4, #0]
 80120a2:	bd38      	pop	{r3, r4, r5, pc}
 80120a4:	2000eef4 	.word	0x2000eef4

080120a8 <malloc>:
 80120a8:	4b02      	ldr	r3, [pc, #8]	; (80120b4 <malloc+0xc>)
 80120aa:	4601      	mov	r1, r0
 80120ac:	6818      	ldr	r0, [r3, #0]
 80120ae:	f7fe ba8d 	b.w	80105cc <_malloc_r>
 80120b2:	bf00      	nop
 80120b4:	200001b0 	.word	0x200001b0

080120b8 <__malloc_lock>:
 80120b8:	4801      	ldr	r0, [pc, #4]	; (80120c0 <__malloc_lock+0x8>)
 80120ba:	f7fe ba6e 	b.w	801059a <__retarget_lock_acquire_recursive>
 80120be:	bf00      	nop
 80120c0:	2000eeec 	.word	0x2000eeec

080120c4 <__malloc_unlock>:
 80120c4:	4801      	ldr	r0, [pc, #4]	; (80120cc <__malloc_unlock+0x8>)
 80120c6:	f7fe ba69 	b.w	801059c <__retarget_lock_release_recursive>
 80120ca:	bf00      	nop
 80120cc:	2000eeec 	.word	0x2000eeec

080120d0 <_Balloc>:
 80120d0:	b570      	push	{r4, r5, r6, lr}
 80120d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120d4:	4604      	mov	r4, r0
 80120d6:	460d      	mov	r5, r1
 80120d8:	b976      	cbnz	r6, 80120f8 <_Balloc+0x28>
 80120da:	2010      	movs	r0, #16
 80120dc:	f7ff ffe4 	bl	80120a8 <malloc>
 80120e0:	4602      	mov	r2, r0
 80120e2:	6260      	str	r0, [r4, #36]	; 0x24
 80120e4:	b920      	cbnz	r0, 80120f0 <_Balloc+0x20>
 80120e6:	4b18      	ldr	r3, [pc, #96]	; (8012148 <_Balloc+0x78>)
 80120e8:	4818      	ldr	r0, [pc, #96]	; (801214c <_Balloc+0x7c>)
 80120ea:	2166      	movs	r1, #102	; 0x66
 80120ec:	f000 fd3c 	bl	8012b68 <__assert_func>
 80120f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120f4:	6006      	str	r6, [r0, #0]
 80120f6:	60c6      	str	r6, [r0, #12]
 80120f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80120fa:	68f3      	ldr	r3, [r6, #12]
 80120fc:	b183      	cbz	r3, 8012120 <_Balloc+0x50>
 80120fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012100:	68db      	ldr	r3, [r3, #12]
 8012102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012106:	b9b8      	cbnz	r0, 8012138 <_Balloc+0x68>
 8012108:	2101      	movs	r1, #1
 801210a:	fa01 f605 	lsl.w	r6, r1, r5
 801210e:	1d72      	adds	r2, r6, #5
 8012110:	0092      	lsls	r2, r2, #2
 8012112:	4620      	mov	r0, r4
 8012114:	f000 fb5a 	bl	80127cc <_calloc_r>
 8012118:	b160      	cbz	r0, 8012134 <_Balloc+0x64>
 801211a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801211e:	e00e      	b.n	801213e <_Balloc+0x6e>
 8012120:	2221      	movs	r2, #33	; 0x21
 8012122:	2104      	movs	r1, #4
 8012124:	4620      	mov	r0, r4
 8012126:	f000 fb51 	bl	80127cc <_calloc_r>
 801212a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801212c:	60f0      	str	r0, [r6, #12]
 801212e:	68db      	ldr	r3, [r3, #12]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1e4      	bne.n	80120fe <_Balloc+0x2e>
 8012134:	2000      	movs	r0, #0
 8012136:	bd70      	pop	{r4, r5, r6, pc}
 8012138:	6802      	ldr	r2, [r0, #0]
 801213a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801213e:	2300      	movs	r3, #0
 8012140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012144:	e7f7      	b.n	8012136 <_Balloc+0x66>
 8012146:	bf00      	nop
 8012148:	080197f2 	.word	0x080197f2
 801214c:	08019879 	.word	0x08019879

08012150 <_Bfree>:
 8012150:	b570      	push	{r4, r5, r6, lr}
 8012152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012154:	4605      	mov	r5, r0
 8012156:	460c      	mov	r4, r1
 8012158:	b976      	cbnz	r6, 8012178 <_Bfree+0x28>
 801215a:	2010      	movs	r0, #16
 801215c:	f7ff ffa4 	bl	80120a8 <malloc>
 8012160:	4602      	mov	r2, r0
 8012162:	6268      	str	r0, [r5, #36]	; 0x24
 8012164:	b920      	cbnz	r0, 8012170 <_Bfree+0x20>
 8012166:	4b09      	ldr	r3, [pc, #36]	; (801218c <_Bfree+0x3c>)
 8012168:	4809      	ldr	r0, [pc, #36]	; (8012190 <_Bfree+0x40>)
 801216a:	218a      	movs	r1, #138	; 0x8a
 801216c:	f000 fcfc 	bl	8012b68 <__assert_func>
 8012170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012174:	6006      	str	r6, [r0, #0]
 8012176:	60c6      	str	r6, [r0, #12]
 8012178:	b13c      	cbz	r4, 801218a <_Bfree+0x3a>
 801217a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801217c:	6862      	ldr	r2, [r4, #4]
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012184:	6021      	str	r1, [r4, #0]
 8012186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801218a:	bd70      	pop	{r4, r5, r6, pc}
 801218c:	080197f2 	.word	0x080197f2
 8012190:	08019879 	.word	0x08019879

08012194 <__multadd>:
 8012194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012198:	690e      	ldr	r6, [r1, #16]
 801219a:	4607      	mov	r7, r0
 801219c:	4698      	mov	r8, r3
 801219e:	460c      	mov	r4, r1
 80121a0:	f101 0014 	add.w	r0, r1, #20
 80121a4:	2300      	movs	r3, #0
 80121a6:	6805      	ldr	r5, [r0, #0]
 80121a8:	b2a9      	uxth	r1, r5
 80121aa:	fb02 8101 	mla	r1, r2, r1, r8
 80121ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80121b2:	0c2d      	lsrs	r5, r5, #16
 80121b4:	fb02 c505 	mla	r5, r2, r5, ip
 80121b8:	b289      	uxth	r1, r1
 80121ba:	3301      	adds	r3, #1
 80121bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80121c0:	429e      	cmp	r6, r3
 80121c2:	f840 1b04 	str.w	r1, [r0], #4
 80121c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80121ca:	dcec      	bgt.n	80121a6 <__multadd+0x12>
 80121cc:	f1b8 0f00 	cmp.w	r8, #0
 80121d0:	d022      	beq.n	8012218 <__multadd+0x84>
 80121d2:	68a3      	ldr	r3, [r4, #8]
 80121d4:	42b3      	cmp	r3, r6
 80121d6:	dc19      	bgt.n	801220c <__multadd+0x78>
 80121d8:	6861      	ldr	r1, [r4, #4]
 80121da:	4638      	mov	r0, r7
 80121dc:	3101      	adds	r1, #1
 80121de:	f7ff ff77 	bl	80120d0 <_Balloc>
 80121e2:	4605      	mov	r5, r0
 80121e4:	b928      	cbnz	r0, 80121f2 <__multadd+0x5e>
 80121e6:	4602      	mov	r2, r0
 80121e8:	4b0d      	ldr	r3, [pc, #52]	; (8012220 <__multadd+0x8c>)
 80121ea:	480e      	ldr	r0, [pc, #56]	; (8012224 <__multadd+0x90>)
 80121ec:	21b5      	movs	r1, #181	; 0xb5
 80121ee:	f000 fcbb 	bl	8012b68 <__assert_func>
 80121f2:	6922      	ldr	r2, [r4, #16]
 80121f4:	3202      	adds	r2, #2
 80121f6:	f104 010c 	add.w	r1, r4, #12
 80121fa:	0092      	lsls	r2, r2, #2
 80121fc:	300c      	adds	r0, #12
 80121fe:	f7fe f9ce 	bl	801059e <memcpy>
 8012202:	4621      	mov	r1, r4
 8012204:	4638      	mov	r0, r7
 8012206:	f7ff ffa3 	bl	8012150 <_Bfree>
 801220a:	462c      	mov	r4, r5
 801220c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012210:	3601      	adds	r6, #1
 8012212:	f8c3 8014 	str.w	r8, [r3, #20]
 8012216:	6126      	str	r6, [r4, #16]
 8012218:	4620      	mov	r0, r4
 801221a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801221e:	bf00      	nop
 8012220:	08019868 	.word	0x08019868
 8012224:	08019879 	.word	0x08019879

08012228 <__hi0bits>:
 8012228:	0c03      	lsrs	r3, r0, #16
 801222a:	041b      	lsls	r3, r3, #16
 801222c:	b9d3      	cbnz	r3, 8012264 <__hi0bits+0x3c>
 801222e:	0400      	lsls	r0, r0, #16
 8012230:	2310      	movs	r3, #16
 8012232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012236:	bf04      	itt	eq
 8012238:	0200      	lsleq	r0, r0, #8
 801223a:	3308      	addeq	r3, #8
 801223c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012240:	bf04      	itt	eq
 8012242:	0100      	lsleq	r0, r0, #4
 8012244:	3304      	addeq	r3, #4
 8012246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801224a:	bf04      	itt	eq
 801224c:	0080      	lsleq	r0, r0, #2
 801224e:	3302      	addeq	r3, #2
 8012250:	2800      	cmp	r0, #0
 8012252:	db05      	blt.n	8012260 <__hi0bits+0x38>
 8012254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012258:	f103 0301 	add.w	r3, r3, #1
 801225c:	bf08      	it	eq
 801225e:	2320      	moveq	r3, #32
 8012260:	4618      	mov	r0, r3
 8012262:	4770      	bx	lr
 8012264:	2300      	movs	r3, #0
 8012266:	e7e4      	b.n	8012232 <__hi0bits+0xa>

08012268 <__lo0bits>:
 8012268:	6803      	ldr	r3, [r0, #0]
 801226a:	f013 0207 	ands.w	r2, r3, #7
 801226e:	4601      	mov	r1, r0
 8012270:	d00b      	beq.n	801228a <__lo0bits+0x22>
 8012272:	07da      	lsls	r2, r3, #31
 8012274:	d424      	bmi.n	80122c0 <__lo0bits+0x58>
 8012276:	0798      	lsls	r0, r3, #30
 8012278:	bf49      	itett	mi
 801227a:	085b      	lsrmi	r3, r3, #1
 801227c:	089b      	lsrpl	r3, r3, #2
 801227e:	2001      	movmi	r0, #1
 8012280:	600b      	strmi	r3, [r1, #0]
 8012282:	bf5c      	itt	pl
 8012284:	600b      	strpl	r3, [r1, #0]
 8012286:	2002      	movpl	r0, #2
 8012288:	4770      	bx	lr
 801228a:	b298      	uxth	r0, r3
 801228c:	b9b0      	cbnz	r0, 80122bc <__lo0bits+0x54>
 801228e:	0c1b      	lsrs	r3, r3, #16
 8012290:	2010      	movs	r0, #16
 8012292:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012296:	bf04      	itt	eq
 8012298:	0a1b      	lsreq	r3, r3, #8
 801229a:	3008      	addeq	r0, #8
 801229c:	071a      	lsls	r2, r3, #28
 801229e:	bf04      	itt	eq
 80122a0:	091b      	lsreq	r3, r3, #4
 80122a2:	3004      	addeq	r0, #4
 80122a4:	079a      	lsls	r2, r3, #30
 80122a6:	bf04      	itt	eq
 80122a8:	089b      	lsreq	r3, r3, #2
 80122aa:	3002      	addeq	r0, #2
 80122ac:	07da      	lsls	r2, r3, #31
 80122ae:	d403      	bmi.n	80122b8 <__lo0bits+0x50>
 80122b0:	085b      	lsrs	r3, r3, #1
 80122b2:	f100 0001 	add.w	r0, r0, #1
 80122b6:	d005      	beq.n	80122c4 <__lo0bits+0x5c>
 80122b8:	600b      	str	r3, [r1, #0]
 80122ba:	4770      	bx	lr
 80122bc:	4610      	mov	r0, r2
 80122be:	e7e8      	b.n	8012292 <__lo0bits+0x2a>
 80122c0:	2000      	movs	r0, #0
 80122c2:	4770      	bx	lr
 80122c4:	2020      	movs	r0, #32
 80122c6:	4770      	bx	lr

080122c8 <__i2b>:
 80122c8:	b510      	push	{r4, lr}
 80122ca:	460c      	mov	r4, r1
 80122cc:	2101      	movs	r1, #1
 80122ce:	f7ff feff 	bl	80120d0 <_Balloc>
 80122d2:	4602      	mov	r2, r0
 80122d4:	b928      	cbnz	r0, 80122e2 <__i2b+0x1a>
 80122d6:	4b05      	ldr	r3, [pc, #20]	; (80122ec <__i2b+0x24>)
 80122d8:	4805      	ldr	r0, [pc, #20]	; (80122f0 <__i2b+0x28>)
 80122da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80122de:	f000 fc43 	bl	8012b68 <__assert_func>
 80122e2:	2301      	movs	r3, #1
 80122e4:	6144      	str	r4, [r0, #20]
 80122e6:	6103      	str	r3, [r0, #16]
 80122e8:	bd10      	pop	{r4, pc}
 80122ea:	bf00      	nop
 80122ec:	08019868 	.word	0x08019868
 80122f0:	08019879 	.word	0x08019879

080122f4 <__multiply>:
 80122f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f8:	4614      	mov	r4, r2
 80122fa:	690a      	ldr	r2, [r1, #16]
 80122fc:	6923      	ldr	r3, [r4, #16]
 80122fe:	429a      	cmp	r2, r3
 8012300:	bfb8      	it	lt
 8012302:	460b      	movlt	r3, r1
 8012304:	460d      	mov	r5, r1
 8012306:	bfbc      	itt	lt
 8012308:	4625      	movlt	r5, r4
 801230a:	461c      	movlt	r4, r3
 801230c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012310:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012314:	68ab      	ldr	r3, [r5, #8]
 8012316:	6869      	ldr	r1, [r5, #4]
 8012318:	eb0a 0709 	add.w	r7, sl, r9
 801231c:	42bb      	cmp	r3, r7
 801231e:	b085      	sub	sp, #20
 8012320:	bfb8      	it	lt
 8012322:	3101      	addlt	r1, #1
 8012324:	f7ff fed4 	bl	80120d0 <_Balloc>
 8012328:	b930      	cbnz	r0, 8012338 <__multiply+0x44>
 801232a:	4602      	mov	r2, r0
 801232c:	4b42      	ldr	r3, [pc, #264]	; (8012438 <__multiply+0x144>)
 801232e:	4843      	ldr	r0, [pc, #268]	; (801243c <__multiply+0x148>)
 8012330:	f240 115d 	movw	r1, #349	; 0x15d
 8012334:	f000 fc18 	bl	8012b68 <__assert_func>
 8012338:	f100 0614 	add.w	r6, r0, #20
 801233c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012340:	4633      	mov	r3, r6
 8012342:	2200      	movs	r2, #0
 8012344:	4543      	cmp	r3, r8
 8012346:	d31e      	bcc.n	8012386 <__multiply+0x92>
 8012348:	f105 0c14 	add.w	ip, r5, #20
 801234c:	f104 0314 	add.w	r3, r4, #20
 8012350:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012354:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012358:	9202      	str	r2, [sp, #8]
 801235a:	ebac 0205 	sub.w	r2, ip, r5
 801235e:	3a15      	subs	r2, #21
 8012360:	f022 0203 	bic.w	r2, r2, #3
 8012364:	3204      	adds	r2, #4
 8012366:	f105 0115 	add.w	r1, r5, #21
 801236a:	458c      	cmp	ip, r1
 801236c:	bf38      	it	cc
 801236e:	2204      	movcc	r2, #4
 8012370:	9201      	str	r2, [sp, #4]
 8012372:	9a02      	ldr	r2, [sp, #8]
 8012374:	9303      	str	r3, [sp, #12]
 8012376:	429a      	cmp	r2, r3
 8012378:	d808      	bhi.n	801238c <__multiply+0x98>
 801237a:	2f00      	cmp	r7, #0
 801237c:	dc55      	bgt.n	801242a <__multiply+0x136>
 801237e:	6107      	str	r7, [r0, #16]
 8012380:	b005      	add	sp, #20
 8012382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012386:	f843 2b04 	str.w	r2, [r3], #4
 801238a:	e7db      	b.n	8012344 <__multiply+0x50>
 801238c:	f8b3 a000 	ldrh.w	sl, [r3]
 8012390:	f1ba 0f00 	cmp.w	sl, #0
 8012394:	d020      	beq.n	80123d8 <__multiply+0xe4>
 8012396:	f105 0e14 	add.w	lr, r5, #20
 801239a:	46b1      	mov	r9, r6
 801239c:	2200      	movs	r2, #0
 801239e:	f85e 4b04 	ldr.w	r4, [lr], #4
 80123a2:	f8d9 b000 	ldr.w	fp, [r9]
 80123a6:	b2a1      	uxth	r1, r4
 80123a8:	fa1f fb8b 	uxth.w	fp, fp
 80123ac:	fb0a b101 	mla	r1, sl, r1, fp
 80123b0:	4411      	add	r1, r2
 80123b2:	f8d9 2000 	ldr.w	r2, [r9]
 80123b6:	0c24      	lsrs	r4, r4, #16
 80123b8:	0c12      	lsrs	r2, r2, #16
 80123ba:	fb0a 2404 	mla	r4, sl, r4, r2
 80123be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80123c2:	b289      	uxth	r1, r1
 80123c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80123c8:	45f4      	cmp	ip, lr
 80123ca:	f849 1b04 	str.w	r1, [r9], #4
 80123ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80123d2:	d8e4      	bhi.n	801239e <__multiply+0xaa>
 80123d4:	9901      	ldr	r1, [sp, #4]
 80123d6:	5072      	str	r2, [r6, r1]
 80123d8:	9a03      	ldr	r2, [sp, #12]
 80123da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80123de:	3304      	adds	r3, #4
 80123e0:	f1b9 0f00 	cmp.w	r9, #0
 80123e4:	d01f      	beq.n	8012426 <__multiply+0x132>
 80123e6:	6834      	ldr	r4, [r6, #0]
 80123e8:	f105 0114 	add.w	r1, r5, #20
 80123ec:	46b6      	mov	lr, r6
 80123ee:	f04f 0a00 	mov.w	sl, #0
 80123f2:	880a      	ldrh	r2, [r1, #0]
 80123f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80123f8:	fb09 b202 	mla	r2, r9, r2, fp
 80123fc:	4492      	add	sl, r2
 80123fe:	b2a4      	uxth	r4, r4
 8012400:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012404:	f84e 4b04 	str.w	r4, [lr], #4
 8012408:	f851 4b04 	ldr.w	r4, [r1], #4
 801240c:	f8be 2000 	ldrh.w	r2, [lr]
 8012410:	0c24      	lsrs	r4, r4, #16
 8012412:	fb09 2404 	mla	r4, r9, r4, r2
 8012416:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801241a:	458c      	cmp	ip, r1
 801241c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012420:	d8e7      	bhi.n	80123f2 <__multiply+0xfe>
 8012422:	9a01      	ldr	r2, [sp, #4]
 8012424:	50b4      	str	r4, [r6, r2]
 8012426:	3604      	adds	r6, #4
 8012428:	e7a3      	b.n	8012372 <__multiply+0x7e>
 801242a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801242e:	2b00      	cmp	r3, #0
 8012430:	d1a5      	bne.n	801237e <__multiply+0x8a>
 8012432:	3f01      	subs	r7, #1
 8012434:	e7a1      	b.n	801237a <__multiply+0x86>
 8012436:	bf00      	nop
 8012438:	08019868 	.word	0x08019868
 801243c:	08019879 	.word	0x08019879

08012440 <__pow5mult>:
 8012440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012444:	4615      	mov	r5, r2
 8012446:	f012 0203 	ands.w	r2, r2, #3
 801244a:	4606      	mov	r6, r0
 801244c:	460f      	mov	r7, r1
 801244e:	d007      	beq.n	8012460 <__pow5mult+0x20>
 8012450:	4c25      	ldr	r4, [pc, #148]	; (80124e8 <__pow5mult+0xa8>)
 8012452:	3a01      	subs	r2, #1
 8012454:	2300      	movs	r3, #0
 8012456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801245a:	f7ff fe9b 	bl	8012194 <__multadd>
 801245e:	4607      	mov	r7, r0
 8012460:	10ad      	asrs	r5, r5, #2
 8012462:	d03d      	beq.n	80124e0 <__pow5mult+0xa0>
 8012464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012466:	b97c      	cbnz	r4, 8012488 <__pow5mult+0x48>
 8012468:	2010      	movs	r0, #16
 801246a:	f7ff fe1d 	bl	80120a8 <malloc>
 801246e:	4602      	mov	r2, r0
 8012470:	6270      	str	r0, [r6, #36]	; 0x24
 8012472:	b928      	cbnz	r0, 8012480 <__pow5mult+0x40>
 8012474:	4b1d      	ldr	r3, [pc, #116]	; (80124ec <__pow5mult+0xac>)
 8012476:	481e      	ldr	r0, [pc, #120]	; (80124f0 <__pow5mult+0xb0>)
 8012478:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801247c:	f000 fb74 	bl	8012b68 <__assert_func>
 8012480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012484:	6004      	str	r4, [r0, #0]
 8012486:	60c4      	str	r4, [r0, #12]
 8012488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801248c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012490:	b94c      	cbnz	r4, 80124a6 <__pow5mult+0x66>
 8012492:	f240 2171 	movw	r1, #625	; 0x271
 8012496:	4630      	mov	r0, r6
 8012498:	f7ff ff16 	bl	80122c8 <__i2b>
 801249c:	2300      	movs	r3, #0
 801249e:	f8c8 0008 	str.w	r0, [r8, #8]
 80124a2:	4604      	mov	r4, r0
 80124a4:	6003      	str	r3, [r0, #0]
 80124a6:	f04f 0900 	mov.w	r9, #0
 80124aa:	07eb      	lsls	r3, r5, #31
 80124ac:	d50a      	bpl.n	80124c4 <__pow5mult+0x84>
 80124ae:	4639      	mov	r1, r7
 80124b0:	4622      	mov	r2, r4
 80124b2:	4630      	mov	r0, r6
 80124b4:	f7ff ff1e 	bl	80122f4 <__multiply>
 80124b8:	4639      	mov	r1, r7
 80124ba:	4680      	mov	r8, r0
 80124bc:	4630      	mov	r0, r6
 80124be:	f7ff fe47 	bl	8012150 <_Bfree>
 80124c2:	4647      	mov	r7, r8
 80124c4:	106d      	asrs	r5, r5, #1
 80124c6:	d00b      	beq.n	80124e0 <__pow5mult+0xa0>
 80124c8:	6820      	ldr	r0, [r4, #0]
 80124ca:	b938      	cbnz	r0, 80124dc <__pow5mult+0x9c>
 80124cc:	4622      	mov	r2, r4
 80124ce:	4621      	mov	r1, r4
 80124d0:	4630      	mov	r0, r6
 80124d2:	f7ff ff0f 	bl	80122f4 <__multiply>
 80124d6:	6020      	str	r0, [r4, #0]
 80124d8:	f8c0 9000 	str.w	r9, [r0]
 80124dc:	4604      	mov	r4, r0
 80124de:	e7e4      	b.n	80124aa <__pow5mult+0x6a>
 80124e0:	4638      	mov	r0, r7
 80124e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124e6:	bf00      	nop
 80124e8:	080199d0 	.word	0x080199d0
 80124ec:	080197f2 	.word	0x080197f2
 80124f0:	08019879 	.word	0x08019879

080124f4 <__lshift>:
 80124f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124f8:	460c      	mov	r4, r1
 80124fa:	6849      	ldr	r1, [r1, #4]
 80124fc:	6923      	ldr	r3, [r4, #16]
 80124fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012502:	68a3      	ldr	r3, [r4, #8]
 8012504:	4607      	mov	r7, r0
 8012506:	4691      	mov	r9, r2
 8012508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801250c:	f108 0601 	add.w	r6, r8, #1
 8012510:	42b3      	cmp	r3, r6
 8012512:	db0b      	blt.n	801252c <__lshift+0x38>
 8012514:	4638      	mov	r0, r7
 8012516:	f7ff fddb 	bl	80120d0 <_Balloc>
 801251a:	4605      	mov	r5, r0
 801251c:	b948      	cbnz	r0, 8012532 <__lshift+0x3e>
 801251e:	4602      	mov	r2, r0
 8012520:	4b28      	ldr	r3, [pc, #160]	; (80125c4 <__lshift+0xd0>)
 8012522:	4829      	ldr	r0, [pc, #164]	; (80125c8 <__lshift+0xd4>)
 8012524:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012528:	f000 fb1e 	bl	8012b68 <__assert_func>
 801252c:	3101      	adds	r1, #1
 801252e:	005b      	lsls	r3, r3, #1
 8012530:	e7ee      	b.n	8012510 <__lshift+0x1c>
 8012532:	2300      	movs	r3, #0
 8012534:	f100 0114 	add.w	r1, r0, #20
 8012538:	f100 0210 	add.w	r2, r0, #16
 801253c:	4618      	mov	r0, r3
 801253e:	4553      	cmp	r3, sl
 8012540:	db33      	blt.n	80125aa <__lshift+0xb6>
 8012542:	6920      	ldr	r0, [r4, #16]
 8012544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012548:	f104 0314 	add.w	r3, r4, #20
 801254c:	f019 091f 	ands.w	r9, r9, #31
 8012550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012558:	d02b      	beq.n	80125b2 <__lshift+0xbe>
 801255a:	f1c9 0e20 	rsb	lr, r9, #32
 801255e:	468a      	mov	sl, r1
 8012560:	2200      	movs	r2, #0
 8012562:	6818      	ldr	r0, [r3, #0]
 8012564:	fa00 f009 	lsl.w	r0, r0, r9
 8012568:	4302      	orrs	r2, r0
 801256a:	f84a 2b04 	str.w	r2, [sl], #4
 801256e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012572:	459c      	cmp	ip, r3
 8012574:	fa22 f20e 	lsr.w	r2, r2, lr
 8012578:	d8f3      	bhi.n	8012562 <__lshift+0x6e>
 801257a:	ebac 0304 	sub.w	r3, ip, r4
 801257e:	3b15      	subs	r3, #21
 8012580:	f023 0303 	bic.w	r3, r3, #3
 8012584:	3304      	adds	r3, #4
 8012586:	f104 0015 	add.w	r0, r4, #21
 801258a:	4584      	cmp	ip, r0
 801258c:	bf38      	it	cc
 801258e:	2304      	movcc	r3, #4
 8012590:	50ca      	str	r2, [r1, r3]
 8012592:	b10a      	cbz	r2, 8012598 <__lshift+0xa4>
 8012594:	f108 0602 	add.w	r6, r8, #2
 8012598:	3e01      	subs	r6, #1
 801259a:	4638      	mov	r0, r7
 801259c:	612e      	str	r6, [r5, #16]
 801259e:	4621      	mov	r1, r4
 80125a0:	f7ff fdd6 	bl	8012150 <_Bfree>
 80125a4:	4628      	mov	r0, r5
 80125a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80125ae:	3301      	adds	r3, #1
 80125b0:	e7c5      	b.n	801253e <__lshift+0x4a>
 80125b2:	3904      	subs	r1, #4
 80125b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80125b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80125bc:	459c      	cmp	ip, r3
 80125be:	d8f9      	bhi.n	80125b4 <__lshift+0xc0>
 80125c0:	e7ea      	b.n	8012598 <__lshift+0xa4>
 80125c2:	bf00      	nop
 80125c4:	08019868 	.word	0x08019868
 80125c8:	08019879 	.word	0x08019879

080125cc <__mcmp>:
 80125cc:	b530      	push	{r4, r5, lr}
 80125ce:	6902      	ldr	r2, [r0, #16]
 80125d0:	690c      	ldr	r4, [r1, #16]
 80125d2:	1b12      	subs	r2, r2, r4
 80125d4:	d10e      	bne.n	80125f4 <__mcmp+0x28>
 80125d6:	f100 0314 	add.w	r3, r0, #20
 80125da:	3114      	adds	r1, #20
 80125dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80125e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80125e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80125e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80125ec:	42a5      	cmp	r5, r4
 80125ee:	d003      	beq.n	80125f8 <__mcmp+0x2c>
 80125f0:	d305      	bcc.n	80125fe <__mcmp+0x32>
 80125f2:	2201      	movs	r2, #1
 80125f4:	4610      	mov	r0, r2
 80125f6:	bd30      	pop	{r4, r5, pc}
 80125f8:	4283      	cmp	r3, r0
 80125fa:	d3f3      	bcc.n	80125e4 <__mcmp+0x18>
 80125fc:	e7fa      	b.n	80125f4 <__mcmp+0x28>
 80125fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012602:	e7f7      	b.n	80125f4 <__mcmp+0x28>

08012604 <__mdiff>:
 8012604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012608:	460c      	mov	r4, r1
 801260a:	4606      	mov	r6, r0
 801260c:	4611      	mov	r1, r2
 801260e:	4620      	mov	r0, r4
 8012610:	4617      	mov	r7, r2
 8012612:	f7ff ffdb 	bl	80125cc <__mcmp>
 8012616:	1e05      	subs	r5, r0, #0
 8012618:	d110      	bne.n	801263c <__mdiff+0x38>
 801261a:	4629      	mov	r1, r5
 801261c:	4630      	mov	r0, r6
 801261e:	f7ff fd57 	bl	80120d0 <_Balloc>
 8012622:	b930      	cbnz	r0, 8012632 <__mdiff+0x2e>
 8012624:	4b39      	ldr	r3, [pc, #228]	; (801270c <__mdiff+0x108>)
 8012626:	4602      	mov	r2, r0
 8012628:	f240 2132 	movw	r1, #562	; 0x232
 801262c:	4838      	ldr	r0, [pc, #224]	; (8012710 <__mdiff+0x10c>)
 801262e:	f000 fa9b 	bl	8012b68 <__assert_func>
 8012632:	2301      	movs	r3, #1
 8012634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801263c:	bfa4      	itt	ge
 801263e:	463b      	movge	r3, r7
 8012640:	4627      	movge	r7, r4
 8012642:	4630      	mov	r0, r6
 8012644:	6879      	ldr	r1, [r7, #4]
 8012646:	bfa6      	itte	ge
 8012648:	461c      	movge	r4, r3
 801264a:	2500      	movge	r5, #0
 801264c:	2501      	movlt	r5, #1
 801264e:	f7ff fd3f 	bl	80120d0 <_Balloc>
 8012652:	b920      	cbnz	r0, 801265e <__mdiff+0x5a>
 8012654:	4b2d      	ldr	r3, [pc, #180]	; (801270c <__mdiff+0x108>)
 8012656:	4602      	mov	r2, r0
 8012658:	f44f 7110 	mov.w	r1, #576	; 0x240
 801265c:	e7e6      	b.n	801262c <__mdiff+0x28>
 801265e:	693e      	ldr	r6, [r7, #16]
 8012660:	60c5      	str	r5, [r0, #12]
 8012662:	6925      	ldr	r5, [r4, #16]
 8012664:	f107 0114 	add.w	r1, r7, #20
 8012668:	f104 0914 	add.w	r9, r4, #20
 801266c:	f100 0e14 	add.w	lr, r0, #20
 8012670:	f107 0210 	add.w	r2, r7, #16
 8012674:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012678:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801267c:	46f2      	mov	sl, lr
 801267e:	2700      	movs	r7, #0
 8012680:	f859 3b04 	ldr.w	r3, [r9], #4
 8012684:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012688:	fa1f f883 	uxth.w	r8, r3
 801268c:	fa17 f78b 	uxtah	r7, r7, fp
 8012690:	0c1b      	lsrs	r3, r3, #16
 8012692:	eba7 0808 	sub.w	r8, r7, r8
 8012696:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801269a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801269e:	fa1f f888 	uxth.w	r8, r8
 80126a2:	141f      	asrs	r7, r3, #16
 80126a4:	454d      	cmp	r5, r9
 80126a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80126aa:	f84a 3b04 	str.w	r3, [sl], #4
 80126ae:	d8e7      	bhi.n	8012680 <__mdiff+0x7c>
 80126b0:	1b2b      	subs	r3, r5, r4
 80126b2:	3b15      	subs	r3, #21
 80126b4:	f023 0303 	bic.w	r3, r3, #3
 80126b8:	3304      	adds	r3, #4
 80126ba:	3415      	adds	r4, #21
 80126bc:	42a5      	cmp	r5, r4
 80126be:	bf38      	it	cc
 80126c0:	2304      	movcc	r3, #4
 80126c2:	4419      	add	r1, r3
 80126c4:	4473      	add	r3, lr
 80126c6:	469e      	mov	lr, r3
 80126c8:	460d      	mov	r5, r1
 80126ca:	4565      	cmp	r5, ip
 80126cc:	d30e      	bcc.n	80126ec <__mdiff+0xe8>
 80126ce:	f10c 0203 	add.w	r2, ip, #3
 80126d2:	1a52      	subs	r2, r2, r1
 80126d4:	f022 0203 	bic.w	r2, r2, #3
 80126d8:	3903      	subs	r1, #3
 80126da:	458c      	cmp	ip, r1
 80126dc:	bf38      	it	cc
 80126de:	2200      	movcc	r2, #0
 80126e0:	441a      	add	r2, r3
 80126e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80126e6:	b17b      	cbz	r3, 8012708 <__mdiff+0x104>
 80126e8:	6106      	str	r6, [r0, #16]
 80126ea:	e7a5      	b.n	8012638 <__mdiff+0x34>
 80126ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80126f0:	fa17 f488 	uxtah	r4, r7, r8
 80126f4:	1422      	asrs	r2, r4, #16
 80126f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80126fa:	b2a4      	uxth	r4, r4
 80126fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012700:	f84e 4b04 	str.w	r4, [lr], #4
 8012704:	1417      	asrs	r7, r2, #16
 8012706:	e7e0      	b.n	80126ca <__mdiff+0xc6>
 8012708:	3e01      	subs	r6, #1
 801270a:	e7ea      	b.n	80126e2 <__mdiff+0xde>
 801270c:	08019868 	.word	0x08019868
 8012710:	08019879 	.word	0x08019879

08012714 <__d2b>:
 8012714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012718:	4689      	mov	r9, r1
 801271a:	2101      	movs	r1, #1
 801271c:	ec57 6b10 	vmov	r6, r7, d0
 8012720:	4690      	mov	r8, r2
 8012722:	f7ff fcd5 	bl	80120d0 <_Balloc>
 8012726:	4604      	mov	r4, r0
 8012728:	b930      	cbnz	r0, 8012738 <__d2b+0x24>
 801272a:	4602      	mov	r2, r0
 801272c:	4b25      	ldr	r3, [pc, #148]	; (80127c4 <__d2b+0xb0>)
 801272e:	4826      	ldr	r0, [pc, #152]	; (80127c8 <__d2b+0xb4>)
 8012730:	f240 310a 	movw	r1, #778	; 0x30a
 8012734:	f000 fa18 	bl	8012b68 <__assert_func>
 8012738:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801273c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012740:	bb35      	cbnz	r5, 8012790 <__d2b+0x7c>
 8012742:	2e00      	cmp	r6, #0
 8012744:	9301      	str	r3, [sp, #4]
 8012746:	d028      	beq.n	801279a <__d2b+0x86>
 8012748:	4668      	mov	r0, sp
 801274a:	9600      	str	r6, [sp, #0]
 801274c:	f7ff fd8c 	bl	8012268 <__lo0bits>
 8012750:	9900      	ldr	r1, [sp, #0]
 8012752:	b300      	cbz	r0, 8012796 <__d2b+0x82>
 8012754:	9a01      	ldr	r2, [sp, #4]
 8012756:	f1c0 0320 	rsb	r3, r0, #32
 801275a:	fa02 f303 	lsl.w	r3, r2, r3
 801275e:	430b      	orrs	r3, r1
 8012760:	40c2      	lsrs	r2, r0
 8012762:	6163      	str	r3, [r4, #20]
 8012764:	9201      	str	r2, [sp, #4]
 8012766:	9b01      	ldr	r3, [sp, #4]
 8012768:	61a3      	str	r3, [r4, #24]
 801276a:	2b00      	cmp	r3, #0
 801276c:	bf14      	ite	ne
 801276e:	2202      	movne	r2, #2
 8012770:	2201      	moveq	r2, #1
 8012772:	6122      	str	r2, [r4, #16]
 8012774:	b1d5      	cbz	r5, 80127ac <__d2b+0x98>
 8012776:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801277a:	4405      	add	r5, r0
 801277c:	f8c9 5000 	str.w	r5, [r9]
 8012780:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012784:	f8c8 0000 	str.w	r0, [r8]
 8012788:	4620      	mov	r0, r4
 801278a:	b003      	add	sp, #12
 801278c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012794:	e7d5      	b.n	8012742 <__d2b+0x2e>
 8012796:	6161      	str	r1, [r4, #20]
 8012798:	e7e5      	b.n	8012766 <__d2b+0x52>
 801279a:	a801      	add	r0, sp, #4
 801279c:	f7ff fd64 	bl	8012268 <__lo0bits>
 80127a0:	9b01      	ldr	r3, [sp, #4]
 80127a2:	6163      	str	r3, [r4, #20]
 80127a4:	2201      	movs	r2, #1
 80127a6:	6122      	str	r2, [r4, #16]
 80127a8:	3020      	adds	r0, #32
 80127aa:	e7e3      	b.n	8012774 <__d2b+0x60>
 80127ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80127b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80127b4:	f8c9 0000 	str.w	r0, [r9]
 80127b8:	6918      	ldr	r0, [r3, #16]
 80127ba:	f7ff fd35 	bl	8012228 <__hi0bits>
 80127be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80127c2:	e7df      	b.n	8012784 <__d2b+0x70>
 80127c4:	08019868 	.word	0x08019868
 80127c8:	08019879 	.word	0x08019879

080127cc <_calloc_r>:
 80127cc:	b513      	push	{r0, r1, r4, lr}
 80127ce:	434a      	muls	r2, r1
 80127d0:	4611      	mov	r1, r2
 80127d2:	9201      	str	r2, [sp, #4]
 80127d4:	f7fd fefa 	bl	80105cc <_malloc_r>
 80127d8:	4604      	mov	r4, r0
 80127da:	b118      	cbz	r0, 80127e4 <_calloc_r+0x18>
 80127dc:	9a01      	ldr	r2, [sp, #4]
 80127de:	2100      	movs	r1, #0
 80127e0:	f7fd feeb 	bl	80105ba <memset>
 80127e4:	4620      	mov	r0, r4
 80127e6:	b002      	add	sp, #8
 80127e8:	bd10      	pop	{r4, pc}
	...

080127ec <_free_r>:
 80127ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127ee:	2900      	cmp	r1, #0
 80127f0:	d048      	beq.n	8012884 <_free_r+0x98>
 80127f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127f6:	9001      	str	r0, [sp, #4]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f1a1 0404 	sub.w	r4, r1, #4
 80127fe:	bfb8      	it	lt
 8012800:	18e4      	addlt	r4, r4, r3
 8012802:	f7ff fc59 	bl	80120b8 <__malloc_lock>
 8012806:	4a20      	ldr	r2, [pc, #128]	; (8012888 <_free_r+0x9c>)
 8012808:	9801      	ldr	r0, [sp, #4]
 801280a:	6813      	ldr	r3, [r2, #0]
 801280c:	4615      	mov	r5, r2
 801280e:	b933      	cbnz	r3, 801281e <_free_r+0x32>
 8012810:	6063      	str	r3, [r4, #4]
 8012812:	6014      	str	r4, [r2, #0]
 8012814:	b003      	add	sp, #12
 8012816:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801281a:	f7ff bc53 	b.w	80120c4 <__malloc_unlock>
 801281e:	42a3      	cmp	r3, r4
 8012820:	d90b      	bls.n	801283a <_free_r+0x4e>
 8012822:	6821      	ldr	r1, [r4, #0]
 8012824:	1862      	adds	r2, r4, r1
 8012826:	4293      	cmp	r3, r2
 8012828:	bf04      	itt	eq
 801282a:	681a      	ldreq	r2, [r3, #0]
 801282c:	685b      	ldreq	r3, [r3, #4]
 801282e:	6063      	str	r3, [r4, #4]
 8012830:	bf04      	itt	eq
 8012832:	1852      	addeq	r2, r2, r1
 8012834:	6022      	streq	r2, [r4, #0]
 8012836:	602c      	str	r4, [r5, #0]
 8012838:	e7ec      	b.n	8012814 <_free_r+0x28>
 801283a:	461a      	mov	r2, r3
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	b10b      	cbz	r3, 8012844 <_free_r+0x58>
 8012840:	42a3      	cmp	r3, r4
 8012842:	d9fa      	bls.n	801283a <_free_r+0x4e>
 8012844:	6811      	ldr	r1, [r2, #0]
 8012846:	1855      	adds	r5, r2, r1
 8012848:	42a5      	cmp	r5, r4
 801284a:	d10b      	bne.n	8012864 <_free_r+0x78>
 801284c:	6824      	ldr	r4, [r4, #0]
 801284e:	4421      	add	r1, r4
 8012850:	1854      	adds	r4, r2, r1
 8012852:	42a3      	cmp	r3, r4
 8012854:	6011      	str	r1, [r2, #0]
 8012856:	d1dd      	bne.n	8012814 <_free_r+0x28>
 8012858:	681c      	ldr	r4, [r3, #0]
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	6053      	str	r3, [r2, #4]
 801285e:	4421      	add	r1, r4
 8012860:	6011      	str	r1, [r2, #0]
 8012862:	e7d7      	b.n	8012814 <_free_r+0x28>
 8012864:	d902      	bls.n	801286c <_free_r+0x80>
 8012866:	230c      	movs	r3, #12
 8012868:	6003      	str	r3, [r0, #0]
 801286a:	e7d3      	b.n	8012814 <_free_r+0x28>
 801286c:	6825      	ldr	r5, [r4, #0]
 801286e:	1961      	adds	r1, r4, r5
 8012870:	428b      	cmp	r3, r1
 8012872:	bf04      	itt	eq
 8012874:	6819      	ldreq	r1, [r3, #0]
 8012876:	685b      	ldreq	r3, [r3, #4]
 8012878:	6063      	str	r3, [r4, #4]
 801287a:	bf04      	itt	eq
 801287c:	1949      	addeq	r1, r1, r5
 801287e:	6021      	streq	r1, [r4, #0]
 8012880:	6054      	str	r4, [r2, #4]
 8012882:	e7c7      	b.n	8012814 <_free_r+0x28>
 8012884:	b003      	add	sp, #12
 8012886:	bd30      	pop	{r4, r5, pc}
 8012888:	20007618 	.word	0x20007618

0801288c <__ssputs_r>:
 801288c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012890:	688e      	ldr	r6, [r1, #8]
 8012892:	429e      	cmp	r6, r3
 8012894:	4682      	mov	sl, r0
 8012896:	460c      	mov	r4, r1
 8012898:	4690      	mov	r8, r2
 801289a:	461f      	mov	r7, r3
 801289c:	d838      	bhi.n	8012910 <__ssputs_r+0x84>
 801289e:	898a      	ldrh	r2, [r1, #12]
 80128a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80128a4:	d032      	beq.n	801290c <__ssputs_r+0x80>
 80128a6:	6825      	ldr	r5, [r4, #0]
 80128a8:	6909      	ldr	r1, [r1, #16]
 80128aa:	eba5 0901 	sub.w	r9, r5, r1
 80128ae:	6965      	ldr	r5, [r4, #20]
 80128b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80128b8:	3301      	adds	r3, #1
 80128ba:	444b      	add	r3, r9
 80128bc:	106d      	asrs	r5, r5, #1
 80128be:	429d      	cmp	r5, r3
 80128c0:	bf38      	it	cc
 80128c2:	461d      	movcc	r5, r3
 80128c4:	0553      	lsls	r3, r2, #21
 80128c6:	d531      	bpl.n	801292c <__ssputs_r+0xa0>
 80128c8:	4629      	mov	r1, r5
 80128ca:	f7fd fe7f 	bl	80105cc <_malloc_r>
 80128ce:	4606      	mov	r6, r0
 80128d0:	b950      	cbnz	r0, 80128e8 <__ssputs_r+0x5c>
 80128d2:	230c      	movs	r3, #12
 80128d4:	f8ca 3000 	str.w	r3, [sl]
 80128d8:	89a3      	ldrh	r3, [r4, #12]
 80128da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128de:	81a3      	strh	r3, [r4, #12]
 80128e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128e8:	6921      	ldr	r1, [r4, #16]
 80128ea:	464a      	mov	r2, r9
 80128ec:	f7fd fe57 	bl	801059e <memcpy>
 80128f0:	89a3      	ldrh	r3, [r4, #12]
 80128f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80128f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128fa:	81a3      	strh	r3, [r4, #12]
 80128fc:	6126      	str	r6, [r4, #16]
 80128fe:	6165      	str	r5, [r4, #20]
 8012900:	444e      	add	r6, r9
 8012902:	eba5 0509 	sub.w	r5, r5, r9
 8012906:	6026      	str	r6, [r4, #0]
 8012908:	60a5      	str	r5, [r4, #8]
 801290a:	463e      	mov	r6, r7
 801290c:	42be      	cmp	r6, r7
 801290e:	d900      	bls.n	8012912 <__ssputs_r+0x86>
 8012910:	463e      	mov	r6, r7
 8012912:	4632      	mov	r2, r6
 8012914:	6820      	ldr	r0, [r4, #0]
 8012916:	4641      	mov	r1, r8
 8012918:	f000 f968 	bl	8012bec <memmove>
 801291c:	68a3      	ldr	r3, [r4, #8]
 801291e:	6822      	ldr	r2, [r4, #0]
 8012920:	1b9b      	subs	r3, r3, r6
 8012922:	4432      	add	r2, r6
 8012924:	60a3      	str	r3, [r4, #8]
 8012926:	6022      	str	r2, [r4, #0]
 8012928:	2000      	movs	r0, #0
 801292a:	e7db      	b.n	80128e4 <__ssputs_r+0x58>
 801292c:	462a      	mov	r2, r5
 801292e:	f000 f977 	bl	8012c20 <_realloc_r>
 8012932:	4606      	mov	r6, r0
 8012934:	2800      	cmp	r0, #0
 8012936:	d1e1      	bne.n	80128fc <__ssputs_r+0x70>
 8012938:	6921      	ldr	r1, [r4, #16]
 801293a:	4650      	mov	r0, sl
 801293c:	f7ff ff56 	bl	80127ec <_free_r>
 8012940:	e7c7      	b.n	80128d2 <__ssputs_r+0x46>
	...

08012944 <_svfiprintf_r>:
 8012944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012948:	4698      	mov	r8, r3
 801294a:	898b      	ldrh	r3, [r1, #12]
 801294c:	061b      	lsls	r3, r3, #24
 801294e:	b09d      	sub	sp, #116	; 0x74
 8012950:	4607      	mov	r7, r0
 8012952:	460d      	mov	r5, r1
 8012954:	4614      	mov	r4, r2
 8012956:	d50e      	bpl.n	8012976 <_svfiprintf_r+0x32>
 8012958:	690b      	ldr	r3, [r1, #16]
 801295a:	b963      	cbnz	r3, 8012976 <_svfiprintf_r+0x32>
 801295c:	2140      	movs	r1, #64	; 0x40
 801295e:	f7fd fe35 	bl	80105cc <_malloc_r>
 8012962:	6028      	str	r0, [r5, #0]
 8012964:	6128      	str	r0, [r5, #16]
 8012966:	b920      	cbnz	r0, 8012972 <_svfiprintf_r+0x2e>
 8012968:	230c      	movs	r3, #12
 801296a:	603b      	str	r3, [r7, #0]
 801296c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012970:	e0d1      	b.n	8012b16 <_svfiprintf_r+0x1d2>
 8012972:	2340      	movs	r3, #64	; 0x40
 8012974:	616b      	str	r3, [r5, #20]
 8012976:	2300      	movs	r3, #0
 8012978:	9309      	str	r3, [sp, #36]	; 0x24
 801297a:	2320      	movs	r3, #32
 801297c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012980:	f8cd 800c 	str.w	r8, [sp, #12]
 8012984:	2330      	movs	r3, #48	; 0x30
 8012986:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012b30 <_svfiprintf_r+0x1ec>
 801298a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801298e:	f04f 0901 	mov.w	r9, #1
 8012992:	4623      	mov	r3, r4
 8012994:	469a      	mov	sl, r3
 8012996:	f813 2b01 	ldrb.w	r2, [r3], #1
 801299a:	b10a      	cbz	r2, 80129a0 <_svfiprintf_r+0x5c>
 801299c:	2a25      	cmp	r2, #37	; 0x25
 801299e:	d1f9      	bne.n	8012994 <_svfiprintf_r+0x50>
 80129a0:	ebba 0b04 	subs.w	fp, sl, r4
 80129a4:	d00b      	beq.n	80129be <_svfiprintf_r+0x7a>
 80129a6:	465b      	mov	r3, fp
 80129a8:	4622      	mov	r2, r4
 80129aa:	4629      	mov	r1, r5
 80129ac:	4638      	mov	r0, r7
 80129ae:	f7ff ff6d 	bl	801288c <__ssputs_r>
 80129b2:	3001      	adds	r0, #1
 80129b4:	f000 80aa 	beq.w	8012b0c <_svfiprintf_r+0x1c8>
 80129b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129ba:	445a      	add	r2, fp
 80129bc:	9209      	str	r2, [sp, #36]	; 0x24
 80129be:	f89a 3000 	ldrb.w	r3, [sl]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	f000 80a2 	beq.w	8012b0c <_svfiprintf_r+0x1c8>
 80129c8:	2300      	movs	r3, #0
 80129ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80129ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129d2:	f10a 0a01 	add.w	sl, sl, #1
 80129d6:	9304      	str	r3, [sp, #16]
 80129d8:	9307      	str	r3, [sp, #28]
 80129da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129de:	931a      	str	r3, [sp, #104]	; 0x68
 80129e0:	4654      	mov	r4, sl
 80129e2:	2205      	movs	r2, #5
 80129e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129e8:	4851      	ldr	r0, [pc, #324]	; (8012b30 <_svfiprintf_r+0x1ec>)
 80129ea:	f7ed fbf9 	bl	80001e0 <memchr>
 80129ee:	9a04      	ldr	r2, [sp, #16]
 80129f0:	b9d8      	cbnz	r0, 8012a2a <_svfiprintf_r+0xe6>
 80129f2:	06d0      	lsls	r0, r2, #27
 80129f4:	bf44      	itt	mi
 80129f6:	2320      	movmi	r3, #32
 80129f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129fc:	0711      	lsls	r1, r2, #28
 80129fe:	bf44      	itt	mi
 8012a00:	232b      	movmi	r3, #43	; 0x2b
 8012a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a06:	f89a 3000 	ldrb.w	r3, [sl]
 8012a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8012a0c:	d015      	beq.n	8012a3a <_svfiprintf_r+0xf6>
 8012a0e:	9a07      	ldr	r2, [sp, #28]
 8012a10:	4654      	mov	r4, sl
 8012a12:	2000      	movs	r0, #0
 8012a14:	f04f 0c0a 	mov.w	ip, #10
 8012a18:	4621      	mov	r1, r4
 8012a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a1e:	3b30      	subs	r3, #48	; 0x30
 8012a20:	2b09      	cmp	r3, #9
 8012a22:	d94e      	bls.n	8012ac2 <_svfiprintf_r+0x17e>
 8012a24:	b1b0      	cbz	r0, 8012a54 <_svfiprintf_r+0x110>
 8012a26:	9207      	str	r2, [sp, #28]
 8012a28:	e014      	b.n	8012a54 <_svfiprintf_r+0x110>
 8012a2a:	eba0 0308 	sub.w	r3, r0, r8
 8012a2e:	fa09 f303 	lsl.w	r3, r9, r3
 8012a32:	4313      	orrs	r3, r2
 8012a34:	9304      	str	r3, [sp, #16]
 8012a36:	46a2      	mov	sl, r4
 8012a38:	e7d2      	b.n	80129e0 <_svfiprintf_r+0x9c>
 8012a3a:	9b03      	ldr	r3, [sp, #12]
 8012a3c:	1d19      	adds	r1, r3, #4
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	9103      	str	r1, [sp, #12]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	bfbb      	ittet	lt
 8012a46:	425b      	neglt	r3, r3
 8012a48:	f042 0202 	orrlt.w	r2, r2, #2
 8012a4c:	9307      	strge	r3, [sp, #28]
 8012a4e:	9307      	strlt	r3, [sp, #28]
 8012a50:	bfb8      	it	lt
 8012a52:	9204      	strlt	r2, [sp, #16]
 8012a54:	7823      	ldrb	r3, [r4, #0]
 8012a56:	2b2e      	cmp	r3, #46	; 0x2e
 8012a58:	d10c      	bne.n	8012a74 <_svfiprintf_r+0x130>
 8012a5a:	7863      	ldrb	r3, [r4, #1]
 8012a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8012a5e:	d135      	bne.n	8012acc <_svfiprintf_r+0x188>
 8012a60:	9b03      	ldr	r3, [sp, #12]
 8012a62:	1d1a      	adds	r2, r3, #4
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	9203      	str	r2, [sp, #12]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	bfb8      	it	lt
 8012a6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012a70:	3402      	adds	r4, #2
 8012a72:	9305      	str	r3, [sp, #20]
 8012a74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012b40 <_svfiprintf_r+0x1fc>
 8012a78:	7821      	ldrb	r1, [r4, #0]
 8012a7a:	2203      	movs	r2, #3
 8012a7c:	4650      	mov	r0, sl
 8012a7e:	f7ed fbaf 	bl	80001e0 <memchr>
 8012a82:	b140      	cbz	r0, 8012a96 <_svfiprintf_r+0x152>
 8012a84:	2340      	movs	r3, #64	; 0x40
 8012a86:	eba0 000a 	sub.w	r0, r0, sl
 8012a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8012a8e:	9b04      	ldr	r3, [sp, #16]
 8012a90:	4303      	orrs	r3, r0
 8012a92:	3401      	adds	r4, #1
 8012a94:	9304      	str	r3, [sp, #16]
 8012a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a9a:	4826      	ldr	r0, [pc, #152]	; (8012b34 <_svfiprintf_r+0x1f0>)
 8012a9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012aa0:	2206      	movs	r2, #6
 8012aa2:	f7ed fb9d 	bl	80001e0 <memchr>
 8012aa6:	2800      	cmp	r0, #0
 8012aa8:	d038      	beq.n	8012b1c <_svfiprintf_r+0x1d8>
 8012aaa:	4b23      	ldr	r3, [pc, #140]	; (8012b38 <_svfiprintf_r+0x1f4>)
 8012aac:	bb1b      	cbnz	r3, 8012af6 <_svfiprintf_r+0x1b2>
 8012aae:	9b03      	ldr	r3, [sp, #12]
 8012ab0:	3307      	adds	r3, #7
 8012ab2:	f023 0307 	bic.w	r3, r3, #7
 8012ab6:	3308      	adds	r3, #8
 8012ab8:	9303      	str	r3, [sp, #12]
 8012aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012abc:	4433      	add	r3, r6
 8012abe:	9309      	str	r3, [sp, #36]	; 0x24
 8012ac0:	e767      	b.n	8012992 <_svfiprintf_r+0x4e>
 8012ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ac6:	460c      	mov	r4, r1
 8012ac8:	2001      	movs	r0, #1
 8012aca:	e7a5      	b.n	8012a18 <_svfiprintf_r+0xd4>
 8012acc:	2300      	movs	r3, #0
 8012ace:	3401      	adds	r4, #1
 8012ad0:	9305      	str	r3, [sp, #20]
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	f04f 0c0a 	mov.w	ip, #10
 8012ad8:	4620      	mov	r0, r4
 8012ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ade:	3a30      	subs	r2, #48	; 0x30
 8012ae0:	2a09      	cmp	r2, #9
 8012ae2:	d903      	bls.n	8012aec <_svfiprintf_r+0x1a8>
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d0c5      	beq.n	8012a74 <_svfiprintf_r+0x130>
 8012ae8:	9105      	str	r1, [sp, #20]
 8012aea:	e7c3      	b.n	8012a74 <_svfiprintf_r+0x130>
 8012aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8012af0:	4604      	mov	r4, r0
 8012af2:	2301      	movs	r3, #1
 8012af4:	e7f0      	b.n	8012ad8 <_svfiprintf_r+0x194>
 8012af6:	ab03      	add	r3, sp, #12
 8012af8:	9300      	str	r3, [sp, #0]
 8012afa:	462a      	mov	r2, r5
 8012afc:	4b0f      	ldr	r3, [pc, #60]	; (8012b3c <_svfiprintf_r+0x1f8>)
 8012afe:	a904      	add	r1, sp, #16
 8012b00:	4638      	mov	r0, r7
 8012b02:	f7fd fe5d 	bl	80107c0 <_printf_float>
 8012b06:	1c42      	adds	r2, r0, #1
 8012b08:	4606      	mov	r6, r0
 8012b0a:	d1d6      	bne.n	8012aba <_svfiprintf_r+0x176>
 8012b0c:	89ab      	ldrh	r3, [r5, #12]
 8012b0e:	065b      	lsls	r3, r3, #25
 8012b10:	f53f af2c 	bmi.w	801296c <_svfiprintf_r+0x28>
 8012b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b16:	b01d      	add	sp, #116	; 0x74
 8012b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b1c:	ab03      	add	r3, sp, #12
 8012b1e:	9300      	str	r3, [sp, #0]
 8012b20:	462a      	mov	r2, r5
 8012b22:	4b06      	ldr	r3, [pc, #24]	; (8012b3c <_svfiprintf_r+0x1f8>)
 8012b24:	a904      	add	r1, sp, #16
 8012b26:	4638      	mov	r0, r7
 8012b28:	f7fe f8ee 	bl	8010d08 <_printf_i>
 8012b2c:	e7eb      	b.n	8012b06 <_svfiprintf_r+0x1c2>
 8012b2e:	bf00      	nop
 8012b30:	080199dc 	.word	0x080199dc
 8012b34:	080199e6 	.word	0x080199e6
 8012b38:	080107c1 	.word	0x080107c1
 8012b3c:	0801288d 	.word	0x0801288d
 8012b40:	080199e2 	.word	0x080199e2

08012b44 <_read_r>:
 8012b44:	b538      	push	{r3, r4, r5, lr}
 8012b46:	4d07      	ldr	r5, [pc, #28]	; (8012b64 <_read_r+0x20>)
 8012b48:	4604      	mov	r4, r0
 8012b4a:	4608      	mov	r0, r1
 8012b4c:	4611      	mov	r1, r2
 8012b4e:	2200      	movs	r2, #0
 8012b50:	602a      	str	r2, [r5, #0]
 8012b52:	461a      	mov	r2, r3
 8012b54:	f7f0 fdc2 	bl	80036dc <_read>
 8012b58:	1c43      	adds	r3, r0, #1
 8012b5a:	d102      	bne.n	8012b62 <_read_r+0x1e>
 8012b5c:	682b      	ldr	r3, [r5, #0]
 8012b5e:	b103      	cbz	r3, 8012b62 <_read_r+0x1e>
 8012b60:	6023      	str	r3, [r4, #0]
 8012b62:	bd38      	pop	{r3, r4, r5, pc}
 8012b64:	2000eef4 	.word	0x2000eef4

08012b68 <__assert_func>:
 8012b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b6a:	4614      	mov	r4, r2
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	4b09      	ldr	r3, [pc, #36]	; (8012b94 <__assert_func+0x2c>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	4605      	mov	r5, r0
 8012b74:	68d8      	ldr	r0, [r3, #12]
 8012b76:	b14c      	cbz	r4, 8012b8c <__assert_func+0x24>
 8012b78:	4b07      	ldr	r3, [pc, #28]	; (8012b98 <__assert_func+0x30>)
 8012b7a:	9100      	str	r1, [sp, #0]
 8012b7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012b80:	4906      	ldr	r1, [pc, #24]	; (8012b9c <__assert_func+0x34>)
 8012b82:	462b      	mov	r3, r5
 8012b84:	f000 f80e 	bl	8012ba4 <fiprintf>
 8012b88:	f000 fa98 	bl	80130bc <abort>
 8012b8c:	4b04      	ldr	r3, [pc, #16]	; (8012ba0 <__assert_func+0x38>)
 8012b8e:	461c      	mov	r4, r3
 8012b90:	e7f3      	b.n	8012b7a <__assert_func+0x12>
 8012b92:	bf00      	nop
 8012b94:	200001b0 	.word	0x200001b0
 8012b98:	080199ed 	.word	0x080199ed
 8012b9c:	080199fa 	.word	0x080199fa
 8012ba0:	08019a28 	.word	0x08019a28

08012ba4 <fiprintf>:
 8012ba4:	b40e      	push	{r1, r2, r3}
 8012ba6:	b503      	push	{r0, r1, lr}
 8012ba8:	4601      	mov	r1, r0
 8012baa:	ab03      	add	r3, sp, #12
 8012bac:	4805      	ldr	r0, [pc, #20]	; (8012bc4 <fiprintf+0x20>)
 8012bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bb2:	6800      	ldr	r0, [r0, #0]
 8012bb4:	9301      	str	r3, [sp, #4]
 8012bb6:	f000 f883 	bl	8012cc0 <_vfiprintf_r>
 8012bba:	b002      	add	sp, #8
 8012bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bc0:	b003      	add	sp, #12
 8012bc2:	4770      	bx	lr
 8012bc4:	200001b0 	.word	0x200001b0

08012bc8 <__ascii_mbtowc>:
 8012bc8:	b082      	sub	sp, #8
 8012bca:	b901      	cbnz	r1, 8012bce <__ascii_mbtowc+0x6>
 8012bcc:	a901      	add	r1, sp, #4
 8012bce:	b142      	cbz	r2, 8012be2 <__ascii_mbtowc+0x1a>
 8012bd0:	b14b      	cbz	r3, 8012be6 <__ascii_mbtowc+0x1e>
 8012bd2:	7813      	ldrb	r3, [r2, #0]
 8012bd4:	600b      	str	r3, [r1, #0]
 8012bd6:	7812      	ldrb	r2, [r2, #0]
 8012bd8:	1e10      	subs	r0, r2, #0
 8012bda:	bf18      	it	ne
 8012bdc:	2001      	movne	r0, #1
 8012bde:	b002      	add	sp, #8
 8012be0:	4770      	bx	lr
 8012be2:	4610      	mov	r0, r2
 8012be4:	e7fb      	b.n	8012bde <__ascii_mbtowc+0x16>
 8012be6:	f06f 0001 	mvn.w	r0, #1
 8012bea:	e7f8      	b.n	8012bde <__ascii_mbtowc+0x16>

08012bec <memmove>:
 8012bec:	4288      	cmp	r0, r1
 8012bee:	b510      	push	{r4, lr}
 8012bf0:	eb01 0402 	add.w	r4, r1, r2
 8012bf4:	d902      	bls.n	8012bfc <memmove+0x10>
 8012bf6:	4284      	cmp	r4, r0
 8012bf8:	4623      	mov	r3, r4
 8012bfa:	d807      	bhi.n	8012c0c <memmove+0x20>
 8012bfc:	1e43      	subs	r3, r0, #1
 8012bfe:	42a1      	cmp	r1, r4
 8012c00:	d008      	beq.n	8012c14 <memmove+0x28>
 8012c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c0a:	e7f8      	b.n	8012bfe <memmove+0x12>
 8012c0c:	4402      	add	r2, r0
 8012c0e:	4601      	mov	r1, r0
 8012c10:	428a      	cmp	r2, r1
 8012c12:	d100      	bne.n	8012c16 <memmove+0x2a>
 8012c14:	bd10      	pop	{r4, pc}
 8012c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c1e:	e7f7      	b.n	8012c10 <memmove+0x24>

08012c20 <_realloc_r>:
 8012c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c22:	4607      	mov	r7, r0
 8012c24:	4614      	mov	r4, r2
 8012c26:	460e      	mov	r6, r1
 8012c28:	b921      	cbnz	r1, 8012c34 <_realloc_r+0x14>
 8012c2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012c2e:	4611      	mov	r1, r2
 8012c30:	f7fd bccc 	b.w	80105cc <_malloc_r>
 8012c34:	b922      	cbnz	r2, 8012c40 <_realloc_r+0x20>
 8012c36:	f7ff fdd9 	bl	80127ec <_free_r>
 8012c3a:	4625      	mov	r5, r4
 8012c3c:	4628      	mov	r0, r5
 8012c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c40:	f000 faa8 	bl	8013194 <_malloc_usable_size_r>
 8012c44:	42a0      	cmp	r0, r4
 8012c46:	d20f      	bcs.n	8012c68 <_realloc_r+0x48>
 8012c48:	4621      	mov	r1, r4
 8012c4a:	4638      	mov	r0, r7
 8012c4c:	f7fd fcbe 	bl	80105cc <_malloc_r>
 8012c50:	4605      	mov	r5, r0
 8012c52:	2800      	cmp	r0, #0
 8012c54:	d0f2      	beq.n	8012c3c <_realloc_r+0x1c>
 8012c56:	4631      	mov	r1, r6
 8012c58:	4622      	mov	r2, r4
 8012c5a:	f7fd fca0 	bl	801059e <memcpy>
 8012c5e:	4631      	mov	r1, r6
 8012c60:	4638      	mov	r0, r7
 8012c62:	f7ff fdc3 	bl	80127ec <_free_r>
 8012c66:	e7e9      	b.n	8012c3c <_realloc_r+0x1c>
 8012c68:	4635      	mov	r5, r6
 8012c6a:	e7e7      	b.n	8012c3c <_realloc_r+0x1c>

08012c6c <__sfputc_r>:
 8012c6c:	6893      	ldr	r3, [r2, #8]
 8012c6e:	3b01      	subs	r3, #1
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	b410      	push	{r4}
 8012c74:	6093      	str	r3, [r2, #8]
 8012c76:	da08      	bge.n	8012c8a <__sfputc_r+0x1e>
 8012c78:	6994      	ldr	r4, [r2, #24]
 8012c7a:	42a3      	cmp	r3, r4
 8012c7c:	db01      	blt.n	8012c82 <__sfputc_r+0x16>
 8012c7e:	290a      	cmp	r1, #10
 8012c80:	d103      	bne.n	8012c8a <__sfputc_r+0x1e>
 8012c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c86:	f000 b94b 	b.w	8012f20 <__swbuf_r>
 8012c8a:	6813      	ldr	r3, [r2, #0]
 8012c8c:	1c58      	adds	r0, r3, #1
 8012c8e:	6010      	str	r0, [r2, #0]
 8012c90:	7019      	strb	r1, [r3, #0]
 8012c92:	4608      	mov	r0, r1
 8012c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c98:	4770      	bx	lr

08012c9a <__sfputs_r>:
 8012c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c9c:	4606      	mov	r6, r0
 8012c9e:	460f      	mov	r7, r1
 8012ca0:	4614      	mov	r4, r2
 8012ca2:	18d5      	adds	r5, r2, r3
 8012ca4:	42ac      	cmp	r4, r5
 8012ca6:	d101      	bne.n	8012cac <__sfputs_r+0x12>
 8012ca8:	2000      	movs	r0, #0
 8012caa:	e007      	b.n	8012cbc <__sfputs_r+0x22>
 8012cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cb0:	463a      	mov	r2, r7
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	f7ff ffda 	bl	8012c6c <__sfputc_r>
 8012cb8:	1c43      	adds	r3, r0, #1
 8012cba:	d1f3      	bne.n	8012ca4 <__sfputs_r+0xa>
 8012cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012cc0 <_vfiprintf_r>:
 8012cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc4:	460d      	mov	r5, r1
 8012cc6:	b09d      	sub	sp, #116	; 0x74
 8012cc8:	4614      	mov	r4, r2
 8012cca:	4698      	mov	r8, r3
 8012ccc:	4606      	mov	r6, r0
 8012cce:	b118      	cbz	r0, 8012cd8 <_vfiprintf_r+0x18>
 8012cd0:	6983      	ldr	r3, [r0, #24]
 8012cd2:	b90b      	cbnz	r3, 8012cd8 <_vfiprintf_r+0x18>
 8012cd4:	f7fd fb84 	bl	80103e0 <__sinit>
 8012cd8:	4b89      	ldr	r3, [pc, #548]	; (8012f00 <_vfiprintf_r+0x240>)
 8012cda:	429d      	cmp	r5, r3
 8012cdc:	d11b      	bne.n	8012d16 <_vfiprintf_r+0x56>
 8012cde:	6875      	ldr	r5, [r6, #4]
 8012ce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ce2:	07d9      	lsls	r1, r3, #31
 8012ce4:	d405      	bmi.n	8012cf2 <_vfiprintf_r+0x32>
 8012ce6:	89ab      	ldrh	r3, [r5, #12]
 8012ce8:	059a      	lsls	r2, r3, #22
 8012cea:	d402      	bmi.n	8012cf2 <_vfiprintf_r+0x32>
 8012cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012cee:	f7fd fc54 	bl	801059a <__retarget_lock_acquire_recursive>
 8012cf2:	89ab      	ldrh	r3, [r5, #12]
 8012cf4:	071b      	lsls	r3, r3, #28
 8012cf6:	d501      	bpl.n	8012cfc <_vfiprintf_r+0x3c>
 8012cf8:	692b      	ldr	r3, [r5, #16]
 8012cfa:	b9eb      	cbnz	r3, 8012d38 <_vfiprintf_r+0x78>
 8012cfc:	4629      	mov	r1, r5
 8012cfe:	4630      	mov	r0, r6
 8012d00:	f000 f96e 	bl	8012fe0 <__swsetup_r>
 8012d04:	b1c0      	cbz	r0, 8012d38 <_vfiprintf_r+0x78>
 8012d06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d08:	07dc      	lsls	r4, r3, #31
 8012d0a:	d50e      	bpl.n	8012d2a <_vfiprintf_r+0x6a>
 8012d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d10:	b01d      	add	sp, #116	; 0x74
 8012d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d16:	4b7b      	ldr	r3, [pc, #492]	; (8012f04 <_vfiprintf_r+0x244>)
 8012d18:	429d      	cmp	r5, r3
 8012d1a:	d101      	bne.n	8012d20 <_vfiprintf_r+0x60>
 8012d1c:	68b5      	ldr	r5, [r6, #8]
 8012d1e:	e7df      	b.n	8012ce0 <_vfiprintf_r+0x20>
 8012d20:	4b79      	ldr	r3, [pc, #484]	; (8012f08 <_vfiprintf_r+0x248>)
 8012d22:	429d      	cmp	r5, r3
 8012d24:	bf08      	it	eq
 8012d26:	68f5      	ldreq	r5, [r6, #12]
 8012d28:	e7da      	b.n	8012ce0 <_vfiprintf_r+0x20>
 8012d2a:	89ab      	ldrh	r3, [r5, #12]
 8012d2c:	0598      	lsls	r0, r3, #22
 8012d2e:	d4ed      	bmi.n	8012d0c <_vfiprintf_r+0x4c>
 8012d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d32:	f7fd fc33 	bl	801059c <__retarget_lock_release_recursive>
 8012d36:	e7e9      	b.n	8012d0c <_vfiprintf_r+0x4c>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8012d3c:	2320      	movs	r3, #32
 8012d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d42:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d46:	2330      	movs	r3, #48	; 0x30
 8012d48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012f0c <_vfiprintf_r+0x24c>
 8012d4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d50:	f04f 0901 	mov.w	r9, #1
 8012d54:	4623      	mov	r3, r4
 8012d56:	469a      	mov	sl, r3
 8012d58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d5c:	b10a      	cbz	r2, 8012d62 <_vfiprintf_r+0xa2>
 8012d5e:	2a25      	cmp	r2, #37	; 0x25
 8012d60:	d1f9      	bne.n	8012d56 <_vfiprintf_r+0x96>
 8012d62:	ebba 0b04 	subs.w	fp, sl, r4
 8012d66:	d00b      	beq.n	8012d80 <_vfiprintf_r+0xc0>
 8012d68:	465b      	mov	r3, fp
 8012d6a:	4622      	mov	r2, r4
 8012d6c:	4629      	mov	r1, r5
 8012d6e:	4630      	mov	r0, r6
 8012d70:	f7ff ff93 	bl	8012c9a <__sfputs_r>
 8012d74:	3001      	adds	r0, #1
 8012d76:	f000 80aa 	beq.w	8012ece <_vfiprintf_r+0x20e>
 8012d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d7c:	445a      	add	r2, fp
 8012d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8012d80:	f89a 3000 	ldrb.w	r3, [sl]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	f000 80a2 	beq.w	8012ece <_vfiprintf_r+0x20e>
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d94:	f10a 0a01 	add.w	sl, sl, #1
 8012d98:	9304      	str	r3, [sp, #16]
 8012d9a:	9307      	str	r3, [sp, #28]
 8012d9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012da0:	931a      	str	r3, [sp, #104]	; 0x68
 8012da2:	4654      	mov	r4, sl
 8012da4:	2205      	movs	r2, #5
 8012da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012daa:	4858      	ldr	r0, [pc, #352]	; (8012f0c <_vfiprintf_r+0x24c>)
 8012dac:	f7ed fa18 	bl	80001e0 <memchr>
 8012db0:	9a04      	ldr	r2, [sp, #16]
 8012db2:	b9d8      	cbnz	r0, 8012dec <_vfiprintf_r+0x12c>
 8012db4:	06d1      	lsls	r1, r2, #27
 8012db6:	bf44      	itt	mi
 8012db8:	2320      	movmi	r3, #32
 8012dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012dbe:	0713      	lsls	r3, r2, #28
 8012dc0:	bf44      	itt	mi
 8012dc2:	232b      	movmi	r3, #43	; 0x2b
 8012dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8012dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8012dce:	d015      	beq.n	8012dfc <_vfiprintf_r+0x13c>
 8012dd0:	9a07      	ldr	r2, [sp, #28]
 8012dd2:	4654      	mov	r4, sl
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	f04f 0c0a 	mov.w	ip, #10
 8012dda:	4621      	mov	r1, r4
 8012ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012de0:	3b30      	subs	r3, #48	; 0x30
 8012de2:	2b09      	cmp	r3, #9
 8012de4:	d94e      	bls.n	8012e84 <_vfiprintf_r+0x1c4>
 8012de6:	b1b0      	cbz	r0, 8012e16 <_vfiprintf_r+0x156>
 8012de8:	9207      	str	r2, [sp, #28]
 8012dea:	e014      	b.n	8012e16 <_vfiprintf_r+0x156>
 8012dec:	eba0 0308 	sub.w	r3, r0, r8
 8012df0:	fa09 f303 	lsl.w	r3, r9, r3
 8012df4:	4313      	orrs	r3, r2
 8012df6:	9304      	str	r3, [sp, #16]
 8012df8:	46a2      	mov	sl, r4
 8012dfa:	e7d2      	b.n	8012da2 <_vfiprintf_r+0xe2>
 8012dfc:	9b03      	ldr	r3, [sp, #12]
 8012dfe:	1d19      	adds	r1, r3, #4
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	9103      	str	r1, [sp, #12]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	bfbb      	ittet	lt
 8012e08:	425b      	neglt	r3, r3
 8012e0a:	f042 0202 	orrlt.w	r2, r2, #2
 8012e0e:	9307      	strge	r3, [sp, #28]
 8012e10:	9307      	strlt	r3, [sp, #28]
 8012e12:	bfb8      	it	lt
 8012e14:	9204      	strlt	r2, [sp, #16]
 8012e16:	7823      	ldrb	r3, [r4, #0]
 8012e18:	2b2e      	cmp	r3, #46	; 0x2e
 8012e1a:	d10c      	bne.n	8012e36 <_vfiprintf_r+0x176>
 8012e1c:	7863      	ldrb	r3, [r4, #1]
 8012e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8012e20:	d135      	bne.n	8012e8e <_vfiprintf_r+0x1ce>
 8012e22:	9b03      	ldr	r3, [sp, #12]
 8012e24:	1d1a      	adds	r2, r3, #4
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	9203      	str	r2, [sp, #12]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	bfb8      	it	lt
 8012e2e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012e32:	3402      	adds	r4, #2
 8012e34:	9305      	str	r3, [sp, #20]
 8012e36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012f1c <_vfiprintf_r+0x25c>
 8012e3a:	7821      	ldrb	r1, [r4, #0]
 8012e3c:	2203      	movs	r2, #3
 8012e3e:	4650      	mov	r0, sl
 8012e40:	f7ed f9ce 	bl	80001e0 <memchr>
 8012e44:	b140      	cbz	r0, 8012e58 <_vfiprintf_r+0x198>
 8012e46:	2340      	movs	r3, #64	; 0x40
 8012e48:	eba0 000a 	sub.w	r0, r0, sl
 8012e4c:	fa03 f000 	lsl.w	r0, r3, r0
 8012e50:	9b04      	ldr	r3, [sp, #16]
 8012e52:	4303      	orrs	r3, r0
 8012e54:	3401      	adds	r4, #1
 8012e56:	9304      	str	r3, [sp, #16]
 8012e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e5c:	482c      	ldr	r0, [pc, #176]	; (8012f10 <_vfiprintf_r+0x250>)
 8012e5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e62:	2206      	movs	r2, #6
 8012e64:	f7ed f9bc 	bl	80001e0 <memchr>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	d03f      	beq.n	8012eec <_vfiprintf_r+0x22c>
 8012e6c:	4b29      	ldr	r3, [pc, #164]	; (8012f14 <_vfiprintf_r+0x254>)
 8012e6e:	bb1b      	cbnz	r3, 8012eb8 <_vfiprintf_r+0x1f8>
 8012e70:	9b03      	ldr	r3, [sp, #12]
 8012e72:	3307      	adds	r3, #7
 8012e74:	f023 0307 	bic.w	r3, r3, #7
 8012e78:	3308      	adds	r3, #8
 8012e7a:	9303      	str	r3, [sp, #12]
 8012e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e7e:	443b      	add	r3, r7
 8012e80:	9309      	str	r3, [sp, #36]	; 0x24
 8012e82:	e767      	b.n	8012d54 <_vfiprintf_r+0x94>
 8012e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e88:	460c      	mov	r4, r1
 8012e8a:	2001      	movs	r0, #1
 8012e8c:	e7a5      	b.n	8012dda <_vfiprintf_r+0x11a>
 8012e8e:	2300      	movs	r3, #0
 8012e90:	3401      	adds	r4, #1
 8012e92:	9305      	str	r3, [sp, #20]
 8012e94:	4619      	mov	r1, r3
 8012e96:	f04f 0c0a 	mov.w	ip, #10
 8012e9a:	4620      	mov	r0, r4
 8012e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ea0:	3a30      	subs	r2, #48	; 0x30
 8012ea2:	2a09      	cmp	r2, #9
 8012ea4:	d903      	bls.n	8012eae <_vfiprintf_r+0x1ee>
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d0c5      	beq.n	8012e36 <_vfiprintf_r+0x176>
 8012eaa:	9105      	str	r1, [sp, #20]
 8012eac:	e7c3      	b.n	8012e36 <_vfiprintf_r+0x176>
 8012eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8012eb2:	4604      	mov	r4, r0
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	e7f0      	b.n	8012e9a <_vfiprintf_r+0x1da>
 8012eb8:	ab03      	add	r3, sp, #12
 8012eba:	9300      	str	r3, [sp, #0]
 8012ebc:	462a      	mov	r2, r5
 8012ebe:	4b16      	ldr	r3, [pc, #88]	; (8012f18 <_vfiprintf_r+0x258>)
 8012ec0:	a904      	add	r1, sp, #16
 8012ec2:	4630      	mov	r0, r6
 8012ec4:	f7fd fc7c 	bl	80107c0 <_printf_float>
 8012ec8:	4607      	mov	r7, r0
 8012eca:	1c78      	adds	r0, r7, #1
 8012ecc:	d1d6      	bne.n	8012e7c <_vfiprintf_r+0x1bc>
 8012ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ed0:	07d9      	lsls	r1, r3, #31
 8012ed2:	d405      	bmi.n	8012ee0 <_vfiprintf_r+0x220>
 8012ed4:	89ab      	ldrh	r3, [r5, #12]
 8012ed6:	059a      	lsls	r2, r3, #22
 8012ed8:	d402      	bmi.n	8012ee0 <_vfiprintf_r+0x220>
 8012eda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012edc:	f7fd fb5e 	bl	801059c <__retarget_lock_release_recursive>
 8012ee0:	89ab      	ldrh	r3, [r5, #12]
 8012ee2:	065b      	lsls	r3, r3, #25
 8012ee4:	f53f af12 	bmi.w	8012d0c <_vfiprintf_r+0x4c>
 8012ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012eea:	e711      	b.n	8012d10 <_vfiprintf_r+0x50>
 8012eec:	ab03      	add	r3, sp, #12
 8012eee:	9300      	str	r3, [sp, #0]
 8012ef0:	462a      	mov	r2, r5
 8012ef2:	4b09      	ldr	r3, [pc, #36]	; (8012f18 <_vfiprintf_r+0x258>)
 8012ef4:	a904      	add	r1, sp, #16
 8012ef6:	4630      	mov	r0, r6
 8012ef8:	f7fd ff06 	bl	8010d08 <_printf_i>
 8012efc:	e7e4      	b.n	8012ec8 <_vfiprintf_r+0x208>
 8012efe:	bf00      	nop
 8012f00:	08019748 	.word	0x08019748
 8012f04:	08019768 	.word	0x08019768
 8012f08:	08019728 	.word	0x08019728
 8012f0c:	080199dc 	.word	0x080199dc
 8012f10:	080199e6 	.word	0x080199e6
 8012f14:	080107c1 	.word	0x080107c1
 8012f18:	08012c9b 	.word	0x08012c9b
 8012f1c:	080199e2 	.word	0x080199e2

08012f20 <__swbuf_r>:
 8012f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f22:	460e      	mov	r6, r1
 8012f24:	4614      	mov	r4, r2
 8012f26:	4605      	mov	r5, r0
 8012f28:	b118      	cbz	r0, 8012f32 <__swbuf_r+0x12>
 8012f2a:	6983      	ldr	r3, [r0, #24]
 8012f2c:	b90b      	cbnz	r3, 8012f32 <__swbuf_r+0x12>
 8012f2e:	f7fd fa57 	bl	80103e0 <__sinit>
 8012f32:	4b21      	ldr	r3, [pc, #132]	; (8012fb8 <__swbuf_r+0x98>)
 8012f34:	429c      	cmp	r4, r3
 8012f36:	d12b      	bne.n	8012f90 <__swbuf_r+0x70>
 8012f38:	686c      	ldr	r4, [r5, #4]
 8012f3a:	69a3      	ldr	r3, [r4, #24]
 8012f3c:	60a3      	str	r3, [r4, #8]
 8012f3e:	89a3      	ldrh	r3, [r4, #12]
 8012f40:	071a      	lsls	r2, r3, #28
 8012f42:	d52f      	bpl.n	8012fa4 <__swbuf_r+0x84>
 8012f44:	6923      	ldr	r3, [r4, #16]
 8012f46:	b36b      	cbz	r3, 8012fa4 <__swbuf_r+0x84>
 8012f48:	6923      	ldr	r3, [r4, #16]
 8012f4a:	6820      	ldr	r0, [r4, #0]
 8012f4c:	1ac0      	subs	r0, r0, r3
 8012f4e:	6963      	ldr	r3, [r4, #20]
 8012f50:	b2f6      	uxtb	r6, r6
 8012f52:	4283      	cmp	r3, r0
 8012f54:	4637      	mov	r7, r6
 8012f56:	dc04      	bgt.n	8012f62 <__swbuf_r+0x42>
 8012f58:	4621      	mov	r1, r4
 8012f5a:	4628      	mov	r0, r5
 8012f5c:	f7ff f852 	bl	8012004 <_fflush_r>
 8012f60:	bb30      	cbnz	r0, 8012fb0 <__swbuf_r+0x90>
 8012f62:	68a3      	ldr	r3, [r4, #8]
 8012f64:	3b01      	subs	r3, #1
 8012f66:	60a3      	str	r3, [r4, #8]
 8012f68:	6823      	ldr	r3, [r4, #0]
 8012f6a:	1c5a      	adds	r2, r3, #1
 8012f6c:	6022      	str	r2, [r4, #0]
 8012f6e:	701e      	strb	r6, [r3, #0]
 8012f70:	6963      	ldr	r3, [r4, #20]
 8012f72:	3001      	adds	r0, #1
 8012f74:	4283      	cmp	r3, r0
 8012f76:	d004      	beq.n	8012f82 <__swbuf_r+0x62>
 8012f78:	89a3      	ldrh	r3, [r4, #12]
 8012f7a:	07db      	lsls	r3, r3, #31
 8012f7c:	d506      	bpl.n	8012f8c <__swbuf_r+0x6c>
 8012f7e:	2e0a      	cmp	r6, #10
 8012f80:	d104      	bne.n	8012f8c <__swbuf_r+0x6c>
 8012f82:	4621      	mov	r1, r4
 8012f84:	4628      	mov	r0, r5
 8012f86:	f7ff f83d 	bl	8012004 <_fflush_r>
 8012f8a:	b988      	cbnz	r0, 8012fb0 <__swbuf_r+0x90>
 8012f8c:	4638      	mov	r0, r7
 8012f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f90:	4b0a      	ldr	r3, [pc, #40]	; (8012fbc <__swbuf_r+0x9c>)
 8012f92:	429c      	cmp	r4, r3
 8012f94:	d101      	bne.n	8012f9a <__swbuf_r+0x7a>
 8012f96:	68ac      	ldr	r4, [r5, #8]
 8012f98:	e7cf      	b.n	8012f3a <__swbuf_r+0x1a>
 8012f9a:	4b09      	ldr	r3, [pc, #36]	; (8012fc0 <__swbuf_r+0xa0>)
 8012f9c:	429c      	cmp	r4, r3
 8012f9e:	bf08      	it	eq
 8012fa0:	68ec      	ldreq	r4, [r5, #12]
 8012fa2:	e7ca      	b.n	8012f3a <__swbuf_r+0x1a>
 8012fa4:	4621      	mov	r1, r4
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	f000 f81a 	bl	8012fe0 <__swsetup_r>
 8012fac:	2800      	cmp	r0, #0
 8012fae:	d0cb      	beq.n	8012f48 <__swbuf_r+0x28>
 8012fb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012fb4:	e7ea      	b.n	8012f8c <__swbuf_r+0x6c>
 8012fb6:	bf00      	nop
 8012fb8:	08019748 	.word	0x08019748
 8012fbc:	08019768 	.word	0x08019768
 8012fc0:	08019728 	.word	0x08019728

08012fc4 <__ascii_wctomb>:
 8012fc4:	b149      	cbz	r1, 8012fda <__ascii_wctomb+0x16>
 8012fc6:	2aff      	cmp	r2, #255	; 0xff
 8012fc8:	bf85      	ittet	hi
 8012fca:	238a      	movhi	r3, #138	; 0x8a
 8012fcc:	6003      	strhi	r3, [r0, #0]
 8012fce:	700a      	strbls	r2, [r1, #0]
 8012fd0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012fd4:	bf98      	it	ls
 8012fd6:	2001      	movls	r0, #1
 8012fd8:	4770      	bx	lr
 8012fda:	4608      	mov	r0, r1
 8012fdc:	4770      	bx	lr
	...

08012fe0 <__swsetup_r>:
 8012fe0:	4b32      	ldr	r3, [pc, #200]	; (80130ac <__swsetup_r+0xcc>)
 8012fe2:	b570      	push	{r4, r5, r6, lr}
 8012fe4:	681d      	ldr	r5, [r3, #0]
 8012fe6:	4606      	mov	r6, r0
 8012fe8:	460c      	mov	r4, r1
 8012fea:	b125      	cbz	r5, 8012ff6 <__swsetup_r+0x16>
 8012fec:	69ab      	ldr	r3, [r5, #24]
 8012fee:	b913      	cbnz	r3, 8012ff6 <__swsetup_r+0x16>
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	f7fd f9f5 	bl	80103e0 <__sinit>
 8012ff6:	4b2e      	ldr	r3, [pc, #184]	; (80130b0 <__swsetup_r+0xd0>)
 8012ff8:	429c      	cmp	r4, r3
 8012ffa:	d10f      	bne.n	801301c <__swsetup_r+0x3c>
 8012ffc:	686c      	ldr	r4, [r5, #4]
 8012ffe:	89a3      	ldrh	r3, [r4, #12]
 8013000:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013004:	0719      	lsls	r1, r3, #28
 8013006:	d42c      	bmi.n	8013062 <__swsetup_r+0x82>
 8013008:	06dd      	lsls	r5, r3, #27
 801300a:	d411      	bmi.n	8013030 <__swsetup_r+0x50>
 801300c:	2309      	movs	r3, #9
 801300e:	6033      	str	r3, [r6, #0]
 8013010:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013014:	81a3      	strh	r3, [r4, #12]
 8013016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801301a:	e03e      	b.n	801309a <__swsetup_r+0xba>
 801301c:	4b25      	ldr	r3, [pc, #148]	; (80130b4 <__swsetup_r+0xd4>)
 801301e:	429c      	cmp	r4, r3
 8013020:	d101      	bne.n	8013026 <__swsetup_r+0x46>
 8013022:	68ac      	ldr	r4, [r5, #8]
 8013024:	e7eb      	b.n	8012ffe <__swsetup_r+0x1e>
 8013026:	4b24      	ldr	r3, [pc, #144]	; (80130b8 <__swsetup_r+0xd8>)
 8013028:	429c      	cmp	r4, r3
 801302a:	bf08      	it	eq
 801302c:	68ec      	ldreq	r4, [r5, #12]
 801302e:	e7e6      	b.n	8012ffe <__swsetup_r+0x1e>
 8013030:	0758      	lsls	r0, r3, #29
 8013032:	d512      	bpl.n	801305a <__swsetup_r+0x7a>
 8013034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013036:	b141      	cbz	r1, 801304a <__swsetup_r+0x6a>
 8013038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801303c:	4299      	cmp	r1, r3
 801303e:	d002      	beq.n	8013046 <__swsetup_r+0x66>
 8013040:	4630      	mov	r0, r6
 8013042:	f7ff fbd3 	bl	80127ec <_free_r>
 8013046:	2300      	movs	r3, #0
 8013048:	6363      	str	r3, [r4, #52]	; 0x34
 801304a:	89a3      	ldrh	r3, [r4, #12]
 801304c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013050:	81a3      	strh	r3, [r4, #12]
 8013052:	2300      	movs	r3, #0
 8013054:	6063      	str	r3, [r4, #4]
 8013056:	6923      	ldr	r3, [r4, #16]
 8013058:	6023      	str	r3, [r4, #0]
 801305a:	89a3      	ldrh	r3, [r4, #12]
 801305c:	f043 0308 	orr.w	r3, r3, #8
 8013060:	81a3      	strh	r3, [r4, #12]
 8013062:	6923      	ldr	r3, [r4, #16]
 8013064:	b94b      	cbnz	r3, 801307a <__swsetup_r+0x9a>
 8013066:	89a3      	ldrh	r3, [r4, #12]
 8013068:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801306c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013070:	d003      	beq.n	801307a <__swsetup_r+0x9a>
 8013072:	4621      	mov	r1, r4
 8013074:	4630      	mov	r0, r6
 8013076:	f000 f84d 	bl	8013114 <__smakebuf_r>
 801307a:	89a0      	ldrh	r0, [r4, #12]
 801307c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013080:	f010 0301 	ands.w	r3, r0, #1
 8013084:	d00a      	beq.n	801309c <__swsetup_r+0xbc>
 8013086:	2300      	movs	r3, #0
 8013088:	60a3      	str	r3, [r4, #8]
 801308a:	6963      	ldr	r3, [r4, #20]
 801308c:	425b      	negs	r3, r3
 801308e:	61a3      	str	r3, [r4, #24]
 8013090:	6923      	ldr	r3, [r4, #16]
 8013092:	b943      	cbnz	r3, 80130a6 <__swsetup_r+0xc6>
 8013094:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013098:	d1ba      	bne.n	8013010 <__swsetup_r+0x30>
 801309a:	bd70      	pop	{r4, r5, r6, pc}
 801309c:	0781      	lsls	r1, r0, #30
 801309e:	bf58      	it	pl
 80130a0:	6963      	ldrpl	r3, [r4, #20]
 80130a2:	60a3      	str	r3, [r4, #8]
 80130a4:	e7f4      	b.n	8013090 <__swsetup_r+0xb0>
 80130a6:	2000      	movs	r0, #0
 80130a8:	e7f7      	b.n	801309a <__swsetup_r+0xba>
 80130aa:	bf00      	nop
 80130ac:	200001b0 	.word	0x200001b0
 80130b0:	08019748 	.word	0x08019748
 80130b4:	08019768 	.word	0x08019768
 80130b8:	08019728 	.word	0x08019728

080130bc <abort>:
 80130bc:	b508      	push	{r3, lr}
 80130be:	2006      	movs	r0, #6
 80130c0:	f000 f898 	bl	80131f4 <raise>
 80130c4:	2001      	movs	r0, #1
 80130c6:	f7f0 faff 	bl	80036c8 <_exit>

080130ca <__swhatbuf_r>:
 80130ca:	b570      	push	{r4, r5, r6, lr}
 80130cc:	460e      	mov	r6, r1
 80130ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130d2:	2900      	cmp	r1, #0
 80130d4:	b096      	sub	sp, #88	; 0x58
 80130d6:	4614      	mov	r4, r2
 80130d8:	461d      	mov	r5, r3
 80130da:	da07      	bge.n	80130ec <__swhatbuf_r+0x22>
 80130dc:	2300      	movs	r3, #0
 80130de:	602b      	str	r3, [r5, #0]
 80130e0:	89b3      	ldrh	r3, [r6, #12]
 80130e2:	061a      	lsls	r2, r3, #24
 80130e4:	d410      	bmi.n	8013108 <__swhatbuf_r+0x3e>
 80130e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130ea:	e00e      	b.n	801310a <__swhatbuf_r+0x40>
 80130ec:	466a      	mov	r2, sp
 80130ee:	f000 f89d 	bl	801322c <_fstat_r>
 80130f2:	2800      	cmp	r0, #0
 80130f4:	dbf2      	blt.n	80130dc <__swhatbuf_r+0x12>
 80130f6:	9a01      	ldr	r2, [sp, #4]
 80130f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80130fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013100:	425a      	negs	r2, r3
 8013102:	415a      	adcs	r2, r3
 8013104:	602a      	str	r2, [r5, #0]
 8013106:	e7ee      	b.n	80130e6 <__swhatbuf_r+0x1c>
 8013108:	2340      	movs	r3, #64	; 0x40
 801310a:	2000      	movs	r0, #0
 801310c:	6023      	str	r3, [r4, #0]
 801310e:	b016      	add	sp, #88	; 0x58
 8013110:	bd70      	pop	{r4, r5, r6, pc}
	...

08013114 <__smakebuf_r>:
 8013114:	898b      	ldrh	r3, [r1, #12]
 8013116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013118:	079d      	lsls	r5, r3, #30
 801311a:	4606      	mov	r6, r0
 801311c:	460c      	mov	r4, r1
 801311e:	d507      	bpl.n	8013130 <__smakebuf_r+0x1c>
 8013120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013124:	6023      	str	r3, [r4, #0]
 8013126:	6123      	str	r3, [r4, #16]
 8013128:	2301      	movs	r3, #1
 801312a:	6163      	str	r3, [r4, #20]
 801312c:	b002      	add	sp, #8
 801312e:	bd70      	pop	{r4, r5, r6, pc}
 8013130:	ab01      	add	r3, sp, #4
 8013132:	466a      	mov	r2, sp
 8013134:	f7ff ffc9 	bl	80130ca <__swhatbuf_r>
 8013138:	9900      	ldr	r1, [sp, #0]
 801313a:	4605      	mov	r5, r0
 801313c:	4630      	mov	r0, r6
 801313e:	f7fd fa45 	bl	80105cc <_malloc_r>
 8013142:	b948      	cbnz	r0, 8013158 <__smakebuf_r+0x44>
 8013144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013148:	059a      	lsls	r2, r3, #22
 801314a:	d4ef      	bmi.n	801312c <__smakebuf_r+0x18>
 801314c:	f023 0303 	bic.w	r3, r3, #3
 8013150:	f043 0302 	orr.w	r3, r3, #2
 8013154:	81a3      	strh	r3, [r4, #12]
 8013156:	e7e3      	b.n	8013120 <__smakebuf_r+0xc>
 8013158:	4b0d      	ldr	r3, [pc, #52]	; (8013190 <__smakebuf_r+0x7c>)
 801315a:	62b3      	str	r3, [r6, #40]	; 0x28
 801315c:	89a3      	ldrh	r3, [r4, #12]
 801315e:	6020      	str	r0, [r4, #0]
 8013160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013164:	81a3      	strh	r3, [r4, #12]
 8013166:	9b00      	ldr	r3, [sp, #0]
 8013168:	6163      	str	r3, [r4, #20]
 801316a:	9b01      	ldr	r3, [sp, #4]
 801316c:	6120      	str	r0, [r4, #16]
 801316e:	b15b      	cbz	r3, 8013188 <__smakebuf_r+0x74>
 8013170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013174:	4630      	mov	r0, r6
 8013176:	f000 f86b 	bl	8013250 <_isatty_r>
 801317a:	b128      	cbz	r0, 8013188 <__smakebuf_r+0x74>
 801317c:	89a3      	ldrh	r3, [r4, #12]
 801317e:	f023 0303 	bic.w	r3, r3, #3
 8013182:	f043 0301 	orr.w	r3, r3, #1
 8013186:	81a3      	strh	r3, [r4, #12]
 8013188:	89a0      	ldrh	r0, [r4, #12]
 801318a:	4305      	orrs	r5, r0
 801318c:	81a5      	strh	r5, [r4, #12]
 801318e:	e7cd      	b.n	801312c <__smakebuf_r+0x18>
 8013190:	08010379 	.word	0x08010379

08013194 <_malloc_usable_size_r>:
 8013194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013198:	1f18      	subs	r0, r3, #4
 801319a:	2b00      	cmp	r3, #0
 801319c:	bfbc      	itt	lt
 801319e:	580b      	ldrlt	r3, [r1, r0]
 80131a0:	18c0      	addlt	r0, r0, r3
 80131a2:	4770      	bx	lr

080131a4 <_raise_r>:
 80131a4:	291f      	cmp	r1, #31
 80131a6:	b538      	push	{r3, r4, r5, lr}
 80131a8:	4604      	mov	r4, r0
 80131aa:	460d      	mov	r5, r1
 80131ac:	d904      	bls.n	80131b8 <_raise_r+0x14>
 80131ae:	2316      	movs	r3, #22
 80131b0:	6003      	str	r3, [r0, #0]
 80131b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80131b6:	bd38      	pop	{r3, r4, r5, pc}
 80131b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80131ba:	b112      	cbz	r2, 80131c2 <_raise_r+0x1e>
 80131bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80131c0:	b94b      	cbnz	r3, 80131d6 <_raise_r+0x32>
 80131c2:	4620      	mov	r0, r4
 80131c4:	f000 f830 	bl	8013228 <_getpid_r>
 80131c8:	462a      	mov	r2, r5
 80131ca:	4601      	mov	r1, r0
 80131cc:	4620      	mov	r0, r4
 80131ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131d2:	f000 b817 	b.w	8013204 <_kill_r>
 80131d6:	2b01      	cmp	r3, #1
 80131d8:	d00a      	beq.n	80131f0 <_raise_r+0x4c>
 80131da:	1c59      	adds	r1, r3, #1
 80131dc:	d103      	bne.n	80131e6 <_raise_r+0x42>
 80131de:	2316      	movs	r3, #22
 80131e0:	6003      	str	r3, [r0, #0]
 80131e2:	2001      	movs	r0, #1
 80131e4:	e7e7      	b.n	80131b6 <_raise_r+0x12>
 80131e6:	2400      	movs	r4, #0
 80131e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80131ec:	4628      	mov	r0, r5
 80131ee:	4798      	blx	r3
 80131f0:	2000      	movs	r0, #0
 80131f2:	e7e0      	b.n	80131b6 <_raise_r+0x12>

080131f4 <raise>:
 80131f4:	4b02      	ldr	r3, [pc, #8]	; (8013200 <raise+0xc>)
 80131f6:	4601      	mov	r1, r0
 80131f8:	6818      	ldr	r0, [r3, #0]
 80131fa:	f7ff bfd3 	b.w	80131a4 <_raise_r>
 80131fe:	bf00      	nop
 8013200:	200001b0 	.word	0x200001b0

08013204 <_kill_r>:
 8013204:	b538      	push	{r3, r4, r5, lr}
 8013206:	4d07      	ldr	r5, [pc, #28]	; (8013224 <_kill_r+0x20>)
 8013208:	2300      	movs	r3, #0
 801320a:	4604      	mov	r4, r0
 801320c:	4608      	mov	r0, r1
 801320e:	4611      	mov	r1, r2
 8013210:	602b      	str	r3, [r5, #0]
 8013212:	f7f0 fa49 	bl	80036a8 <_kill>
 8013216:	1c43      	adds	r3, r0, #1
 8013218:	d102      	bne.n	8013220 <_kill_r+0x1c>
 801321a:	682b      	ldr	r3, [r5, #0]
 801321c:	b103      	cbz	r3, 8013220 <_kill_r+0x1c>
 801321e:	6023      	str	r3, [r4, #0]
 8013220:	bd38      	pop	{r3, r4, r5, pc}
 8013222:	bf00      	nop
 8013224:	2000eef4 	.word	0x2000eef4

08013228 <_getpid_r>:
 8013228:	f7f0 ba36 	b.w	8003698 <_getpid>

0801322c <_fstat_r>:
 801322c:	b538      	push	{r3, r4, r5, lr}
 801322e:	4d07      	ldr	r5, [pc, #28]	; (801324c <_fstat_r+0x20>)
 8013230:	2300      	movs	r3, #0
 8013232:	4604      	mov	r4, r0
 8013234:	4608      	mov	r0, r1
 8013236:	4611      	mov	r1, r2
 8013238:	602b      	str	r3, [r5, #0]
 801323a:	f7f0 fa94 	bl	8003766 <_fstat>
 801323e:	1c43      	adds	r3, r0, #1
 8013240:	d102      	bne.n	8013248 <_fstat_r+0x1c>
 8013242:	682b      	ldr	r3, [r5, #0]
 8013244:	b103      	cbz	r3, 8013248 <_fstat_r+0x1c>
 8013246:	6023      	str	r3, [r4, #0]
 8013248:	bd38      	pop	{r3, r4, r5, pc}
 801324a:	bf00      	nop
 801324c:	2000eef4 	.word	0x2000eef4

08013250 <_isatty_r>:
 8013250:	b538      	push	{r3, r4, r5, lr}
 8013252:	4d06      	ldr	r5, [pc, #24]	; (801326c <_isatty_r+0x1c>)
 8013254:	2300      	movs	r3, #0
 8013256:	4604      	mov	r4, r0
 8013258:	4608      	mov	r0, r1
 801325a:	602b      	str	r3, [r5, #0]
 801325c:	f7f0 fa93 	bl	8003786 <_isatty>
 8013260:	1c43      	adds	r3, r0, #1
 8013262:	d102      	bne.n	801326a <_isatty_r+0x1a>
 8013264:	682b      	ldr	r3, [r5, #0]
 8013266:	b103      	cbz	r3, 801326a <_isatty_r+0x1a>
 8013268:	6023      	str	r3, [r4, #0]
 801326a:	bd38      	pop	{r3, r4, r5, pc}
 801326c:	2000eef4 	.word	0x2000eef4

08013270 <_init>:
 8013270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013272:	bf00      	nop
 8013274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013276:	bc08      	pop	{r3}
 8013278:	469e      	mov	lr, r3
 801327a:	4770      	bx	lr

0801327c <_fini>:
 801327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801327e:	bf00      	nop
 8013280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013282:	bc08      	pop	{r3}
 8013284:	469e      	mov	lr, r3
 8013286:	4770      	bx	lr
