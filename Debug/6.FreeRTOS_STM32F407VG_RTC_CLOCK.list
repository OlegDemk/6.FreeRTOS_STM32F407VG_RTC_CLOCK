
6.FreeRTOS_STM32F407VG_RTC_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014348  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006944  080144d8  080144d8  000244d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae1c  0801ae1c  00030380  2**0
                  CONTENTS
  4 .ARM          00000008  0801ae1c  0801ae1c  0002ae1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae24  0801ae24  00030380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae24  0801ae24  0002ae24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ae28  0801ae28  0002ae28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  0801ae2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030380  2**0
                  CONTENTS
 10 .bss          0000ebd0  20000380  20000380  00030380  2**2
                  ALLOC
 11 ._user_heap_stack 00001100  2000ef50  2000ef50  00030380  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034d96  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006da3  00000000  00000000  00065146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023f8  00000000  00000000  0006bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002118  00000000  00000000  0006e2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b10  00000000  00000000  00070400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c623  00000000  00000000  00099f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec20f  00000000  00000000  000c6533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b2742  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a758  00000000  00000000  001b2798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000380 	.word	0x20000380
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080144c0 	.word	0x080144c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000384 	.word	0x20000384
 80001cc:	080144c0 	.word	0x080144c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <TP_Read>:
#include "stm32f4xx_hal.h"


//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8000ee6:	2310      	movs	r3, #16
 8000ee8:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8000eee:	e019      	b.n	8000f24 <TP_Read+0x44>
    {
        value <<= 1;
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <TP_Read+0x54>)
 8000efc:	f005 f858 	bl	8005fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <TP_Read+0x54>)
 8000f06:	f005 f853 	bl	8005fb0 <HAL_GPIO_WritePin>

        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <TP_Read+0x58>)
 8000f0e:	f005 f837 	bl	8005f80 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <TP_Read+0x3e>
        {
            value++;
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1e2      	bne.n	8000ef0 <TP_Read+0x10>
    };

    return value;
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40021000 	.word	0x40021000

08000f3c <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8000f46:	2308      	movs	r3, #8
 8000f48:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <TP_Write+0x68>)
 8000f50:	f005 f82e 	bl	8005fb0 <HAL_GPIO_WritePin>

    while(i > 0)
 8000f54:	e01e      	b.n	8000f94 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da05      	bge.n	8000f6a <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2104      	movs	r1, #4
 8000f62:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <TP_Write+0x6c>)
 8000f64:	f005 f824 	bl	8005fb0 <HAL_GPIO_WritePin>
 8000f68:	e004      	b.n	8000f74 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <TP_Write+0x6c>)
 8000f70:	f005 f81e 	bl	8005fb0 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <TP_Write+0x68>)
 8000f80:	f005 f816 	bl	8005fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <TP_Write+0x68>)
 8000f8a:	f005 f811 	bl	8005fb0 <HAL_GPIO_WritePin>
        i--;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1dd      	bne.n	8000f56 <TP_Write+0x1a>
    };
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	00000000 	.word	0x00000000

08000fb0 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b08b      	sub	sp, #44	; 0x2c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	4862      	ldr	r0, [pc, #392]	; (8001148 <TP_Read_Coordinates+0x198>)
 8000fbe:	f004 fff7 	bl	8005fb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4861      	ldr	r0, [pc, #388]	; (800114c <TP_Read_Coordinates+0x19c>)
 8000fc8:	f004 fff2 	bl	8005fb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd2:	485d      	ldr	r0, [pc, #372]	; (8001148 <TP_Read_Coordinates+0x198>)
 8000fd4:	f004 ffec 	bl	8005fb0 <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
	uint16_t rawx = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	81fb      	strh	r3, [r7, #14]
	uint16_t rawy = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	81bb      	strh	r3, [r7, #12]
	uint32_t calculating_x =0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
	uint32_t calculating_y = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]

    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8000ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff4:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001000:	4851      	ldr	r0, [pc, #324]	; (8001148 <TP_Read_Coordinates+0x198>)
 8001002:	f004 ffd5 	bl	8005fb0 <HAL_GPIO_WritePin>


    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001006:	e023      	b.n	8001050 <TP_Read_Coordinates+0xa0>
    {
        TP_Write(CMD_RDY);
 8001008:	2090      	movs	r0, #144	; 0x90
 800100a:	f7ff ff97 	bl	8000f3c <TP_Write>

		rawy = TP_Read();
 800100e:	f7ff ff67 	bl	8000ee0 <TP_Read>
 8001012:	4603      	mov	r3, r0
 8001014:	81bb      	strh	r3, [r7, #12]
		avg_y += rawy;
 8001016:	89bb      	ldrh	r3, [r7, #12]
 8001018:	6a3a      	ldr	r2, [r7, #32]
 800101a:	4413      	add	r3, r2
 800101c:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 800101e:	89bb      	ldrh	r3, [r7, #12]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4413      	add	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]


        TP_Write(CMD_RDX);
 8001026:	20d0      	movs	r0, #208	; 0xd0
 8001028:	f7ff ff88 	bl	8000f3c <TP_Write>
        rawx = TP_Read();
 800102c:	f7ff ff58 	bl	8000ee0 <TP_Read>
 8001030:	4603      	mov	r3, r0
 8001032:	81fb      	strh	r3, [r7, #14]
		avg_x += rawx;
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001038:	4413      	add	r3, r2
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 800103c:	89fb      	ldrh	r3, [r7, #14]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	4413      	add	r3, r2
 8001042:	61fb      	str	r3, [r7, #28]
        samples--;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3b01      	subs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
		counted_samples++;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <TP_Read_Coordinates+0xb6>
 8001056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105a:	483d      	ldr	r0, [pc, #244]	; (8001150 <TP_Read_Coordinates+0x1a0>)
 800105c:	f004 ff90 	bl	8005f80 <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0d0      	beq.n	8001008 <TP_Read_Coordinates+0x58>
    };

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106c:	4836      	ldr	r0, [pc, #216]	; (8001148 <TP_Read_Coordinates+0x198>)
 800106e:	f004 ff9f 	bl	8005fb0 <HAL_GPIO_WritePin>


		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001078:	d154      	bne.n	8001124 <TP_Read_Coordinates+0x174>
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	4834      	ldr	r0, [pc, #208]	; (8001150 <TP_Read_Coordinates+0x1a0>)
 8001080:	f004 ff7e 	bl	8005f80 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d14c      	bne.n	8001124 <TP_Read_Coordinates+0x174>
		{

		calculating_x /= counted_samples;
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fbb2 f3f3 	udiv	r3, r2, r3
 800109c:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	81fb      	strh	r3, [r7, #14]
		rawy = calculating_y;
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	81bb      	strh	r3, [r7, #12]

		rawx *= -1;
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	425b      	negs	r3, r3
 80010aa:	81fb      	strh	r3, [r7, #14]
		rawy *= -1;
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	425b      	negs	r3, r3
 80010b0:	81bb      	strh	r3, [r7, #12]

		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
        Coordinates[1] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 80010b2:	89fa      	ldrh	r2, [r7, #14]
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <TP_Read_Coordinates+0x1a4>)
 80010b6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	0852      	lsrs	r2, r2, #1
 80010be:	4413      	add	r3, r2
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa2b 	bl	8000524 <__aeabi_i2d>
 80010ce:	a31c      	add	r3, pc, #112	; (adr r3, 8001140 <TP_Read_Coordinates+0x190>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fa90 	bl	80005f8 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1c9c      	adds	r4, r3, #2
 80010e4:	f7ff fd60 	bl	8000ba8 <__aeabi_d2uiz>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	8023      	strh	r3, [r4, #0]
		Coordinates[0] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 80010ee:	89bb      	ldrh	r3, [r7, #12]
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <TP_Read_Coordinates+0x1a8>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	09db      	lsrs	r3, r3, #7
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	3b0f      	subs	r3, #15
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa11 	bl	8000524 <__aeabi_i2d>
 8001102:	a30f      	add	r3, pc, #60	; (adr r3, 8001140 <TP_Read_Coordinates+0x190>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fa76 	bl	80005f8 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fd48 	bl	8000ba8 <__aeabi_d2uiz>
 8001118:	4603      	mov	r3, r0
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 8001120:	2301      	movs	r3, #1
 8001122:	e007      	b.n	8001134 <TP_Read_Coordinates+0x184>
		}
		else
		{
			Coordinates[0] = 0;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3302      	adds	r3, #2
 800112e:	2200      	movs	r2, #0
 8001130:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8001132:	2300      	movs	r3, #0
		}
}
 8001134:	4618      	mov	r0, r3
 8001136:	372c      	adds	r7, #44	; 0x2c
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	f3af 8000 	nop.w
 8001140:	28f5c28f 	.word	0x28f5c28f
 8001144:	3ff28f5c 	.word	0x3ff28f5c
 8001148:	40020400 	.word	0x40020400
 800114c:	40021000 	.word	0x40021000
 8001150:	40020800 	.word	0x40020800
 8001154:	e01e01e1 	.word	0xe01e01e1
 8001158:	a0a0a0a1 	.word	0xa0a0a0a1

0800115c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <TP_Touchpad_Pressed+0x20>)
 8001166:	f004 ff0b 	bl	8005f80 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <TP_Touchpad_Pressed+0x18>
	{
		return TOUCHPAD_PRESSED;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <TP_Touchpad_Pressed+0x1a>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001174:	2300      	movs	r3, #0
	}
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020800 	.word	0x40020800

08001180 <TFT9341_FontsIni>:

static void TFT9341_WriteData(uint8_t* buff, size_t buff_size);

// ---------------------------------------------------------------------------------
void TFT9341_FontsIni(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  Font8.Height = 8;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <TFT9341_FontsIni+0x60>)
 8001186:	2208      	movs	r2, #8
 8001188:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <TFT9341_FontsIni+0x60>)
 800118c:	2205      	movs	r2, #5
 800118e:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <TFT9341_FontsIni+0x64>)
 8001192:	220c      	movs	r2, #12
 8001194:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <TFT9341_FontsIni+0x64>)
 8001198:	2207      	movs	r2, #7
 800119a:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <TFT9341_FontsIni+0x68>)
 800119e:	2210      	movs	r2, #16
 80011a0:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <TFT9341_FontsIni+0x68>)
 80011a4:	220b      	movs	r2, #11
 80011a6:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <TFT9341_FontsIni+0x6c>)
 80011aa:	2214      	movs	r2, #20
 80011ac:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <TFT9341_FontsIni+0x6c>)
 80011b0:	220e      	movs	r2, #14
 80011b2:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <TFT9341_FontsIni+0x70>)
 80011b6:	2218      	movs	r2, #24
 80011b8:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <TFT9341_FontsIni+0x70>)
 80011bc:	2211      	movs	r2, #17
 80011be:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT9341_BLACK;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT9341_GREEN;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011c8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011cc:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <TFT9341_FontsIni+0x68>)
 80011d2:	605a      	str	r2, [r3, #4]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000020 	.word	0x20000020
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000010 	.word	0x20000010
 80011f0:	20000018 	.word	0x20000018
 80011f4:	20007634 	.word	0x20007634

080011f8 <TFT9341_SendData>:
// ---------------------------------------------------------------------------------
void TFT9341_SendData(uint8_t dt)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	DC_DATA();
 8001202:	2201      	movs	r2, #1
 8001204:	2140      	movs	r1, #64	; 0x40
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <TFT9341_SendData+0x2c>)
 8001208:	f004 fed2 	bl	8005fb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi2, &dt, 1, 5000);
 800120c:	1df9      	adds	r1, r7, #7
 800120e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001212:	2201      	movs	r2, #1
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <TFT9341_SendData+0x30>)
 8001216:	f007 ff14 	bl	8009042 <HAL_SPI_Transmit>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	200076e4 	.word	0x200076e4

0800122c <TFT9341_SendCommand>:
// ---------------------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <TFT9341_SendCommand+0x2c>)
 800123c:	f004 feb8 	bl	8005fb0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi2, &cmd, 1, 5000);
 8001240:	1df9      	adds	r1, r7, #7
 8001242:	f241 3388 	movw	r3, #5000	; 0x1388
 8001246:	2201      	movs	r2, #1
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <TFT9341_SendCommand+0x30>)
 800124a:	f007 fefa 	bl	8009042 <HAL_SPI_Transmit>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	200076e4 	.word	0x200076e4

08001260 <TFT9341_reset>:
// ---------------------------------------------------------------------------------
void TFT9341_reset(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8001264:	2200      	movs	r2, #0
 8001266:	2120      	movs	r1, #32
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <TFT9341_reset+0x24>)
 800126a:	f004 fea1 	bl	8005fb0 <HAL_GPIO_WritePin>
	osDelay(5);
 800126e:	2005      	movs	r0, #5
 8001270:	f00c fa94 	bl	800d79c <osDelay>
	RESET_IDLE();
 8001274:	2201      	movs	r2, #1
 8001276:	2120      	movs	r1, #32
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TFT9341_reset+0x24>)
 800127a:	f004 fe99 	bl	8005fb0 <HAL_GPIO_WritePin>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <TFT9341_ini>:
// ---------------------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	4613      	mov	r3, r2
 8001296:	80bb      	strh	r3, [r7, #4]
  uint8_t data[15];
  CS_ACTIVE();
 8001298:	2200      	movs	r2, #0
 800129a:	2110      	movs	r1, #16
 800129c:	48a3      	ldr	r0, [pc, #652]	; (800152c <TFT9341_ini+0x2a4>)
 800129e:	f004 fe87 	bl	8005fb0 <HAL_GPIO_WritePin>
  TFT9341_reset();
 80012a2:	f7ff ffdd 	bl	8001260 <TFT9341_reset>

  //Software Reset
  TFT9341_SendCommand(0x01);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff ffc0 	bl	800122c <TFT9341_SendCommand>
  osDelay(1000);
 80012ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b0:	f00c fa74 	bl	800d79c <osDelay>

  //Power Control A
    data[0] = 0x39;
 80012b4:	2339      	movs	r3, #57	; 0x39
 80012b6:	723b      	strb	r3, [r7, #8]
    data[1] = 0x2C;
 80012b8:	232c      	movs	r3, #44	; 0x2c
 80012ba:	727b      	strb	r3, [r7, #9]
    data[2] = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x34;
 80012c0:	2334      	movs	r3, #52	; 0x34
 80012c2:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x02;
 80012c4:	2302      	movs	r3, #2
 80012c6:	733b      	strb	r3, [r7, #12]
    TFT9341_SendCommand(0xCB);
 80012c8:	20cb      	movs	r0, #203	; 0xcb
 80012ca:	f7ff ffaf 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 5);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2105      	movs	r1, #5
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f92f 	bl	8001538 <TFT9341_WriteData>
    //Power Control B
    data[0] = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	723b      	strb	r3, [r7, #8]
    data[1] = 0xC1;
 80012de:	23c1      	movs	r3, #193	; 0xc1
 80012e0:	727b      	strb	r3, [r7, #9]
    data[2] = 0x30;
 80012e2:	2330      	movs	r3, #48	; 0x30
 80012e4:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xCF);
 80012e6:	20cf      	movs	r0, #207	; 0xcf
 80012e8:	f7ff ffa0 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2103      	movs	r1, #3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f920 	bl	8001538 <TFT9341_WriteData>
    //Driver timing control A
    data[0] = 0x85;
 80012f8:	2385      	movs	r3, #133	; 0x85
 80012fa:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	727b      	strb	r3, [r7, #9]
    data[2] = 0x78;
 8001300:	2378      	movs	r3, #120	; 0x78
 8001302:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xE8);
 8001304:	20e8      	movs	r0, #232	; 0xe8
 8001306:	f7ff ff91 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	2103      	movs	r1, #3
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f911 	bl	8001538 <TFT9341_WriteData>
    //Driver timing control B
    data[0] = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 800131a:	2300      	movs	r3, #0
 800131c:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xEA);
 800131e:	20ea      	movs	r0, #234	; 0xea
 8001320:	f7ff ff84 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f904 	bl	8001538 <TFT9341_WriteData>
    //Power on Sequence control
    data[0] = 0x64;
 8001330:	2364      	movs	r3, #100	; 0x64
 8001332:	723b      	strb	r3, [r7, #8]
    data[1] = 0x03;
 8001334:	2303      	movs	r3, #3
 8001336:	727b      	strb	r3, [r7, #9]
    data[2] = 0x12;
 8001338:	2312      	movs	r3, #18
 800133a:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x81;
 800133c:	2381      	movs	r3, #129	; 0x81
 800133e:	72fb      	strb	r3, [r7, #11]
    TFT9341_SendCommand(0xED);
 8001340:	20ed      	movs	r0, #237	; 0xed
 8001342:	f7ff ff73 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 4);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2104      	movs	r1, #4
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f8f3 	bl	8001538 <TFT9341_WriteData>
    //Pump ratio control
    data[0] = 0x20;
 8001352:	2320      	movs	r3, #32
 8001354:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF7);
 8001356:	20f7      	movs	r0, #247	; 0xf7
 8001358:	f7ff ff68 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f8e8 	bl	8001538 <TFT9341_WriteData>
    //Power Control,VRH[5:0]
    data[0] = 0x10;
 8001368:	2310      	movs	r3, #16
 800136a:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC0);
 800136c:	20c0      	movs	r0, #192	; 0xc0
 800136e:	f7ff ff5d 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f8dd 	bl	8001538 <TFT9341_WriteData>
    //Power Control,SAP[2:0];BT[3:0]
    data[0] = 0x10;
 800137e:	2310      	movs	r3, #16
 8001380:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC1);
 8001382:	20c1      	movs	r0, #193	; 0xc1
 8001384:	f7ff ff52 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	2101      	movs	r1, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f8d2 	bl	8001538 <TFT9341_WriteData>
    //VCOM Control 1
    data[0] = 0x3E;
 8001394:	233e      	movs	r3, #62	; 0x3e
 8001396:	723b      	strb	r3, [r7, #8]
    data[1] = 0x28;
 8001398:	2328      	movs	r3, #40	; 0x28
 800139a:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xC5);
 800139c:	20c5      	movs	r0, #197	; 0xc5
 800139e:	f7ff ff45 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2102      	movs	r1, #2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f8c5 	bl	8001538 <TFT9341_WriteData>
    //VCOM Control 2
    data[0] = 0x86;
 80013ae:	2386      	movs	r3, #134	; 0x86
 80013b0:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC7);
 80013b2:	20c7      	movs	r0, #199	; 0xc7
 80013b4:	f7ff ff3a 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f8ba 	bl	8001538 <TFT9341_WriteData>
    //Memory Acsess Control
    data[0] = 0x48;
 80013c4:	2348      	movs	r3, #72	; 0x48
 80013c6:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x36);
 80013c8:	2036      	movs	r0, #54	; 0x36
 80013ca:	f7ff ff2f 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f8af 	bl	8001538 <TFT9341_WriteData>
    //Pixel Format Set
    data[0] = 0x55;//16bit
 80013da:	2355      	movs	r3, #85	; 0x55
 80013dc:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x3A);
 80013de:	203a      	movs	r0, #58	; 0x3a
 80013e0:	f7ff ff24 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2101      	movs	r1, #1
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f8a4 	bl	8001538 <TFT9341_WriteData>
    //Frame Rratio Control, Standard RGB Color
    data[0] = 0x00;
 80013f0:	2300      	movs	r3, #0
 80013f2:	723b      	strb	r3, [r7, #8]
    data[1] = 0x18;
 80013f4:	2318      	movs	r3, #24
 80013f6:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xB1);
 80013f8:	20b1      	movs	r0, #177	; 0xb1
 80013fa:	f7ff ff17 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	2102      	movs	r1, #2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f897 	bl	8001538 <TFT9341_WriteData>
    //Display Function Control
    data[0] = 0x08;
 800140a:	2308      	movs	r3, #8
 800140c:	723b      	strb	r3, [r7, #8]
    data[1] = 0x82;
 800140e:	2382      	movs	r3, #130	; 0x82
 8001410:	727b      	strb	r3, [r7, #9]
    data[2] = 0x27;//320 строк
 8001412:	2327      	movs	r3, #39	; 0x27
 8001414:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xB6);
 8001416:	20b6      	movs	r0, #182	; 0xb6
 8001418:	f7ff ff08 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	2103      	movs	r1, #3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f888 	bl	8001538 <TFT9341_WriteData>
    //Enable 3G (пока не знаю что это за режим)
    data[0] = 0x00;//не включаем
 8001428:	2300      	movs	r3, #0
 800142a:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF2);
 800142c:	20f2      	movs	r0, #242	; 0xf2
 800142e:	f7ff fefd 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2101      	movs	r1, #1
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f87d 	bl	8001538 <TFT9341_WriteData>
    //Gamma set
    data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 800143e:	2301      	movs	r3, #1
 8001440:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x26);
 8001442:	2026      	movs	r0, #38	; 0x26
 8001444:	f7ff fef2 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f872 	bl	8001538 <TFT9341_WriteData>
    //Positive Gamma  Correction
    data[0] = 0x0F;
 8001454:	230f      	movs	r3, #15
 8001456:	723b      	strb	r3, [r7, #8]
    data[1] = 0x31;
 8001458:	2331      	movs	r3, #49	; 0x31
 800145a:	727b      	strb	r3, [r7, #9]
    data[2] = 0x2B;
 800145c:	232b      	movs	r3, #43	; 0x2b
 800145e:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x0C;
 8001460:	230c      	movs	r3, #12
 8001462:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x0E;
 8001464:	230e      	movs	r3, #14
 8001466:	733b      	strb	r3, [r7, #12]
    data[5] = 0x08;
 8001468:	2308      	movs	r3, #8
 800146a:	737b      	strb	r3, [r7, #13]
    data[6] = 0x4E;
 800146c:	234e      	movs	r3, #78	; 0x4e
 800146e:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xF1;
 8001470:	23f1      	movs	r3, #241	; 0xf1
 8001472:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x37;
 8001474:	2337      	movs	r3, #55	; 0x37
 8001476:	743b      	strb	r3, [r7, #16]
    data[9] = 0x07;
 8001478:	2307      	movs	r3, #7
 800147a:	747b      	strb	r3, [r7, #17]
    data[10] = 0x10;
 800147c:	2310      	movs	r3, #16
 800147e:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x03;
 8001480:	2303      	movs	r3, #3
 8001482:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x0E;
 8001484:	230e      	movs	r3, #14
 8001486:	753b      	strb	r3, [r7, #20]
    data[13] = 0x09;
 8001488:	2309      	movs	r3, #9
 800148a:	757b      	strb	r3, [r7, #21]
    data[14] = 0x00;
 800148c:	2300      	movs	r3, #0
 800148e:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE0);
 8001490:	20e0      	movs	r0, #224	; 0xe0
 8001492:	f7ff fecb 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	210f      	movs	r1, #15
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f84b 	bl	8001538 <TFT9341_WriteData>
    //Negative Gamma  Correction
    data[0] = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	723b      	strb	r3, [r7, #8]
    data[1] = 0x0E;
 80014a6:	230e      	movs	r3, #14
 80014a8:	727b      	strb	r3, [r7, #9]
    data[2] = 0x14;
 80014aa:	2314      	movs	r3, #20
 80014ac:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x03;
 80014ae:	2303      	movs	r3, #3
 80014b0:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x11;
 80014b2:	2311      	movs	r3, #17
 80014b4:	733b      	strb	r3, [r7, #12]
    data[5] = 0x07;
 80014b6:	2307      	movs	r3, #7
 80014b8:	737b      	strb	r3, [r7, #13]
    data[6] = 0x31;
 80014ba:	2331      	movs	r3, #49	; 0x31
 80014bc:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xC1;
 80014be:	23c1      	movs	r3, #193	; 0xc1
 80014c0:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x48;
 80014c2:	2348      	movs	r3, #72	; 0x48
 80014c4:	743b      	strb	r3, [r7, #16]
    data[9] = 0x08;
 80014c6:	2308      	movs	r3, #8
 80014c8:	747b      	strb	r3, [r7, #17]
    data[10] = 0x0F;
 80014ca:	230f      	movs	r3, #15
 80014cc:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x0C;
 80014ce:	230c      	movs	r3, #12
 80014d0:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x31;
 80014d2:	2331      	movs	r3, #49	; 0x31
 80014d4:	753b      	strb	r3, [r7, #20]
    data[13] = 0x36;
 80014d6:	2336      	movs	r3, #54	; 0x36
 80014d8:	757b      	strb	r3, [r7, #21]
    data[14] = 0x0F;
 80014da:	230f      	movs	r3, #15
 80014dc:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE1);
 80014de:	20e1      	movs	r0, #225	; 0xe1
 80014e0:	f7ff fea4 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	210f      	movs	r1, #15
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f824 	bl	8001538 <TFT9341_WriteData>
    TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 80014f0:	2011      	movs	r0, #17
 80014f2:	f7ff fe9b 	bl	800122c <TFT9341_SendCommand>

    osDelay(120);
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f00c f950 	bl	800d79c <osDelay>

    //Display ON
    data[0] = TFT9341_ROTATION;
 80014fc:	2348      	movs	r3, #72	; 0x48
 80014fe:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x29);
 8001500:	2029      	movs	r0, #41	; 0x29
 8001502:	f7ff fe93 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f000 f813 	bl	8001538 <TFT9341_WriteData>

    TFT9341_WIDTH = w_size;
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <TFT9341_ini+0x2a8>)
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	8013      	strh	r3, [r2, #0]
    TFT9341_HEIGHT = h_size;
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <TFT9341_ini+0x2ac>)
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	8013      	strh	r3, [r2, #0]

    TFT9341_FontsIni();
 800151e:	f7ff fe2f 	bl	8001180 <TFT9341_FontsIni>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	20007632 	.word	0x20007632
 8001534:	20007630 	.word	0x20007630

08001538 <TFT9341_WriteData>:
// ---------------------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8001542:	2201      	movs	r2, #1
 8001544:	2140      	movs	r1, #64	; 0x40
 8001546:	4811      	ldr	r0, [pc, #68]	; (800158c <TFT9341_WriteData+0x54>)
 8001548:	f004 fd32 	bl	8005fb0 <HAL_GPIO_WritePin>
	while(buff_size > 0)
 800154c:	e015      	b.n	800157a <TFT9341_WriteData+0x42>
	{
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001554:	bf28      	it	cs
 8001556:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800155a:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 800155c:	89fa      	ldrh	r2, [r7, #14]
 800155e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <TFT9341_WriteData+0x58>)
 8001566:	f007 fd6c 	bl	8009042 <HAL_SPI_Transmit>
		buff += chunk_size;
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	603b      	str	r3, [r7, #0]
	while(buff_size > 0)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e6      	bne.n	800154e <TFT9341_WriteData+0x16>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	200076e4 	.word	0x200076e4

08001594 <TFT9341_SetAddrWindow>:
// ---------------------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	80fb      	strh	r3, [r7, #6]
 80015a6:	4603      	mov	r3, r0
 80015a8:	80bb      	strh	r3, [r7, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	807b      	strh	r3, [r7, #2]
 80015ae:	4613      	mov	r3, r2
 80015b0:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 80015b2:	202a      	movs	r0, #42	; 0x2a
 80015b4:	f7ff fe3a 	bl	800122c <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	733b      	strb	r3, [r7, #12]
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	737b      	strb	r3, [r7, #13]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	73bb      	strb	r3, [r7, #14]
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2104      	movs	r1, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ffaa 	bl	8001538 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 80015e4:	202b      	movs	r0, #43	; 0x2b
 80015e6:	f7ff fe21 	bl	800122c <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80015ea:	88bb      	ldrh	r3, [r7, #4]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	723b      	strb	r3, [r7, #8]
 80015f4:	88bb      	ldrh	r3, [r7, #4]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	727b      	strb	r3, [r7, #9]
 80015fa:	883b      	ldrh	r3, [r7, #0]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	b29b      	uxth	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	72bb      	strb	r3, [r7, #10]
 8001604:	883b      	ldrh	r3, [r7, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2104      	movs	r1, #4
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff91 	bl	8001538 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 8001616:	202c      	movs	r0, #44	; 0x2c
 8001618:	f7ff fe08 	bl	800122c <TFT9341_SendCommand>
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}

08001624 <TFT9341_FillScreen>:
//      HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
//  }
}
// ---------------------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
	// With DMA
	uint32_t i, n;
	  TFT9341_SetAddrWindow(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1);
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <TFT9341_FillScreen+0x90>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	3b01      	subs	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <TFT9341_FillScreen+0x94>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	3b01      	subs	r3, #1
 800163c:	b29b      	uxth	r3, r3
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff ffa7 	bl	8001594 <TFT9341_SetAddrWindow>
	  for(i=0;i<3200;i++)
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e011      	b.n	8001670 <TFT9341_FillScreen+0x4c>
	  {
	    frm_buf[i*2] = color >> 8;
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b2d1      	uxtb	r1, r2
 8001658:	4a18      	ldr	r2, [pc, #96]	; (80016bc <TFT9341_FillScreen+0x98>)
 800165a:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	3301      	adds	r3, #1
 8001662:	88fa      	ldrh	r2, [r7, #6]
 8001664:	b2d1      	uxtb	r1, r2
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <TFT9341_FillScreen+0x98>)
 8001668:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<3200;i++)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3301      	adds	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001676:	d3e9      	bcc.n	800164c <TFT9341_FillScreen+0x28>
	  }
	  n = 6400;
 8001678:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800167c:	60bb      	str	r3, [r7, #8]
	  DC_DATA();
 800167e:	2201      	movs	r2, #1
 8001680:	2140      	movs	r1, #64	; 0x40
 8001682:	480f      	ldr	r0, [pc, #60]	; (80016c0 <TFT9341_FillScreen+0x9c>)
 8001684:	f004 fc94 	bl	8005fb0 <HAL_GPIO_WritePin>
	  dma_spi_cnt = 24;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <TFT9341_FillScreen+0xa0>)
 800168a:	2218      	movs	r2, #24
 800168c:	601a      	str	r2, [r3, #0]
	  HAL_SPI_Transmit_DMA(&hspi2, frm_buf, n);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	b29b      	uxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	4909      	ldr	r1, [pc, #36]	; (80016bc <TFT9341_FillScreen+0x98>)
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <TFT9341_FillScreen+0xa4>)
 8001698:	f007 fe10 	bl	80092bc <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 800169c:	bf00      	nop
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <TFT9341_FillScreen+0xa8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0fb      	beq.n	800169e <TFT9341_FillScreen+0x7a>
	  dma_spi_fl=0;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <TFT9341_FillScreen+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]

	///////////////////////////////////////////////////////////////////////////
	//   Without DMA
//  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20007632 	.word	0x20007632
 80016b8:	20007630 	.word	0x20007630
 80016bc:	2000039c 	.word	0x2000039c
 80016c0:	40021000 	.word	0x40021000
 80016c4:	20000028 	.word	0x20000028
 80016c8:	200076e4 	.word	0x200076e4
 80016cc:	2000279c 	.word	0x2000279c

080016d0 <TFT9341_SetTextColor>:
		TFT9341_DrawPixel(x0-y,y0-x,color);
	}
}
// ---------------------------------------------------------------------------------
void TFT9341_SetTextColor(uint16_t color)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
  lcdprop.TextColor=color;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <TFT9341_SetTextColor+0x1c>)
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	8013      	strh	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20007634 	.word	0x20007634

080016f0 <TFT9341_SetBackColor>:
// ---------------------------------------------------------------------------------
void TFT9341_SetBackColor(uint16_t color)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
  lcdprop.BackColor=color;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <TFT9341_SetBackColor+0x1c>)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	8053      	strh	r3, [r2, #2]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	20007634 	.word	0x20007634

08001710 <TFT9341_DrawChar_DMA>:
    y++;
  }
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawChar_DMA(uint16_t x, uint16_t y, uint8_t c)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b08b      	sub	sp, #44	; 0x2c
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
 800171a:	460b      	mov	r3, r1
 800171c:	80bb      	strh	r3, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	70fb      	strb	r3, [r7, #3]

	uint32_t i = 0, j = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *c_t;
	uint8_t *pchar;
	uint32_t line=0;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]


	height = lcdprop.pFont->Height;
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	88db      	ldrh	r3, [r3, #6]
 8001734:	837b      	strh	r3, [r7, #26]
	width = lcdprop.pFont->Width;
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	889b      	ldrh	r3, [r3, #4]
 800173c:	833b      	strh	r3, [r7, #24]
	offset = 8 *((width + 7)/8) - width ;
 800173e:	8b3b      	ldrh	r3, [r7, #24]
 8001740:	3307      	adds	r3, #7
 8001742:	2b00      	cmp	r3, #0
 8001744:	da00      	bge.n	8001748 <TFT9341_DrawChar_DMA+0x38>
 8001746:	3307      	adds	r3, #7
 8001748:	10db      	asrs	r3, r3, #3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	8b3b      	ldrh	r3, [r7, #24]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	75fb      	strb	r3, [r7, #23]
	c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
 8001758:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	3b20      	subs	r3, #32
 8001762:	4965      	ldr	r1, [pc, #404]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001764:	6849      	ldr	r1, [r1, #4]
 8001766:	88c9      	ldrh	r1, [r1, #6]
 8001768:	fb01 f103 	mul.w	r1, r1, r3
 800176c:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	3307      	adds	r3, #7
 8001774:	2b00      	cmp	r3, #0
 8001776:	da00      	bge.n	800177a <TFT9341_DrawChar_DMA+0x6a>
 8001778:	3307      	adds	r3, #7
 800177a:	10db      	asrs	r3, r3, #3
 800177c:	fb03 f301 	mul.w	r3, r3, r1
 8001780:	4413      	add	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

	y = y - height;											// Because BUG inside function
 8001784:	88ba      	ldrh	r2, [r7, #4]
 8001786:	8b7b      	ldrh	r3, [r7, #26]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	80bb      	strh	r3, [r7, #4]

	for(i = 0; i < height; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
 8001790:	e07c      	b.n	800188c <TFT9341_DrawChar_DMA+0x17c>
	{
		pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 8001792:	8b3b      	ldrh	r3, [r7, #24]
 8001794:	3307      	adds	r3, #7
 8001796:	2b00      	cmp	r3, #0
 8001798:	da00      	bge.n	800179c <TFT9341_DrawChar_DMA+0x8c>
 800179a:	3307      	adds	r3, #7
 800179c:	10db      	asrs	r3, r3, #3
 800179e:	461a      	mov	r2, r3
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	fb03 f302 	mul.w	r3, r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4413      	add	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
		switch(((width + 7)/8))
 80017ac:	8b3b      	ldrh	r3, [r7, #24]
 80017ae:	3307      	adds	r3, #7
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da00      	bge.n	80017b6 <TFT9341_DrawChar_DMA+0xa6>
 80017b4:	3307      	adds	r3, #7
 80017b6:	10db      	asrs	r3, r3, #3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d002      	beq.n	80017c2 <TFT9341_DrawChar_DMA+0xb2>
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d004      	beq.n	80017ca <TFT9341_DrawChar_DMA+0xba>
 80017c0:	e00c      	b.n	80017dc <TFT9341_DrawChar_DMA+0xcc>
		{
			case 1:
				line = pchar[0];
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	61fb      	str	r3, [r7, #28]
				break;
 80017c8:	e016      	b.n	80017f8 <TFT9341_DrawChar_DMA+0xe8>
			case 2:
				line = (pchar[0]<< 8) | pchar[1];
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	3201      	adds	r2, #1
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61fb      	str	r3, [r7, #28]
				break;
 80017da:	e00d      	b.n	80017f8 <TFT9341_DrawChar_DMA+0xe8>
			case 3:
			default:
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	3202      	adds	r2, #2
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61fb      	str	r3, [r7, #28]
				break;
 80017f6:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	e03c      	b.n	8001878 <TFT9341_DrawChar_DMA+0x168>
		{
			int buf_index = j + i*(width+1);
 80017fe:	8b3b      	ldrh	r3, [r7, #24]
 8001800:	3301      	adds	r3, #1
 8001802:	461a      	mov	r2, r3
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	fb03 f202 	mul.w	r2, r3, r2
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	4413      	add	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
			if(line & (1 << (width- j + offset- 1)))
 8001810:	8b3a      	ldrh	r2, [r7, #24]
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	1ad2      	subs	r2, r2, r3
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	4413      	add	r3, r2
 800181a:	3b01      	subs	r3, #1
 800181c:	2201      	movs	r2, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	461a      	mov	r2, r3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d011      	beq.n	8001850 <TFT9341_DrawChar_DMA+0x140>
			{
				frm_buf[buf_index*2] = lcdprop.TextColor >> 8;
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29a      	uxth	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	b2d1      	uxtb	r1, r2
 800183a:	4a30      	ldr	r2, [pc, #192]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 800183c:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.TextColor & 0xFF;
 800183e:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	3301      	adds	r3, #1
 8001848:	b2d1      	uxtb	r1, r2
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 800184c:	54d1      	strb	r1, [r2, r3]
 800184e:	e010      	b.n	8001872 <TFT9341_DrawChar_DMA+0x162>
			}
			else
			{
				frm_buf[buf_index*2] = lcdprop.BackColor >> 8;
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001852:	885b      	ldrh	r3, [r3, #2]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b29a      	uxth	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	b2d1      	uxtb	r1, r2
 800185e:	4a27      	ldr	r2, [pc, #156]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 8001860:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.BackColor & 0xFF;
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001864:	885a      	ldrh	r2, [r3, #2]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	3301      	adds	r3, #1
 800186c:	b2d1      	uxtb	r1, r2
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 8001870:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < width; j++)
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	3301      	adds	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	8b3b      	ldrh	r3, [r7, #24]
 800187a:	6a3a      	ldr	r2, [r7, #32]
 800187c:	429a      	cmp	r2, r3
 800187e:	d3be      	bcc.n	80017fe <TFT9341_DrawChar_DMA+0xee>
			}
		}
		y++;
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	3301      	adds	r3, #1
 8001884:	80bb      	strh	r3, [r7, #4]
	for(i = 0; i < height; i++)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	8b7b      	ldrh	r3, [r7, #26]
 800188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001890:	429a      	cmp	r2, r3
 8001892:	f4ff af7e 	bcc.w	8001792 <TFT9341_DrawChar_DMA+0x82>
	}

	TFT9341_SetAddrWindow(x, y, x+width, y+height);
 8001896:	88fa      	ldrh	r2, [r7, #6]
 8001898:	8b3b      	ldrh	r3, [r7, #24]
 800189a:	4413      	add	r3, r2
 800189c:	b29c      	uxth	r4, r3
 800189e:	88ba      	ldrh	r2, [r7, #4]
 80018a0:	8b7b      	ldrh	r3, [r7, #26]
 80018a2:	4413      	add	r3, r2
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	88b9      	ldrh	r1, [r7, #4]
 80018a8:	88f8      	ldrh	r0, [r7, #6]
 80018aa:	4622      	mov	r2, r4
 80018ac:	f7ff fe72 	bl	8001594 <TFT9341_SetAddrWindow>
	DC_DATA();
 80018b0:	2201      	movs	r2, #1
 80018b2:	2140      	movs	r1, #64	; 0x40
 80018b4:	4812      	ldr	r0, [pc, #72]	; (8001900 <TFT9341_DrawChar_DMA+0x1f0>)
 80018b6:	f004 fb7b 	bl	8005fb0 <HAL_GPIO_WritePin>
	dma_spi_cnt = 1;
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <TFT9341_DrawChar_DMA+0x1f4>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi2, frm_buf, (width+1)*(height+1)*2);
 80018c0:	8b3b      	ldrh	r3, [r7, #24]
 80018c2:	3301      	adds	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	8b7b      	ldrh	r3, [r7, #26]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	fb12 f303 	smulbb	r3, r2, r3
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4908      	ldr	r1, [pc, #32]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 80018da:	480b      	ldr	r0, [pc, #44]	; (8001908 <TFT9341_DrawChar_DMA+0x1f8>)
 80018dc:	f007 fcee 	bl	80092bc <HAL_SPI_Transmit_DMA>
	while(!dma_spi_fl) {}
 80018e0:	bf00      	nop
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <TFT9341_DrawChar_DMA+0x1fc>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0fb      	beq.n	80018e2 <TFT9341_DrawChar_DMA+0x1d2>
	dma_spi_fl=0;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <TFT9341_DrawChar_DMA+0x1fc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	372c      	adds	r7, #44	; 0x2c
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	20007634 	.word	0x20007634
 80018fc:	2000039c 	.word	0x2000039c
 8001900:	40021000 	.word	0x40021000
 8001904:	20000028 	.word	0x20000028
 8001908:	200076e4 	.word	0x200076e4
 800190c:	2000279c 	.word	0x2000279c

08001910 <TFT9341_String_DMA>:
    (void)*str++;
  }
}
// ---------------------------------------------------------------------------------
void TFT9341_String_DMA(uint16_t x,uint16_t y, char *str)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	603a      	str	r2, [r7, #0]
 800191a:	80fb      	strh	r3, [r7, #6]
 800191c:	460b      	mov	r3, r1
 800191e:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8001920:	e00f      	b.n	8001942 <TFT9341_String_DMA+0x32>
  {
	TFT9341_DrawChar_DMA(x,y,str[0]);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	88b9      	ldrh	r1, [r7, #4]
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fef0 	bl	8001710 <TFT9341_DrawChar_DMA>
    x+=lcdprop.pFont->Width;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <TFT9341_String_DMA+0x44>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	889a      	ldrh	r2, [r3, #4]
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4413      	add	r3, r2
 800193a:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	603b      	str	r3, [r7, #0]
  while(*str)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1eb      	bne.n	8001922 <TFT9341_String_DMA+0x12>
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20007634 	.word	0x20007634

08001958 <TFT9341_SetRotation>:
// ---------------------------------------------------------------------------------
void TFT9341_SetRotation(uint8_t r)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  TFT9341_SendCommand(0x36);
 8001962:	2036      	movs	r0, #54	; 0x36
 8001964:	f7ff fc62 	bl	800122c <TFT9341_SendCommand>
  switch(r)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d836      	bhi.n	80019dc <TFT9341_SetRotation+0x84>
 800196e:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <TFT9341_SetRotation+0x1c>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	08001985 	.word	0x08001985
 8001978:	0800199b 	.word	0x0800199b
 800197c:	080019b1 	.word	0x080019b1
 8001980:	080019c7 	.word	0x080019c7
  {
    case 0:
      TFT9341_SendData(0x48);
 8001984:	2048      	movs	r0, #72	; 0x48
 8001986:	f7ff fc37 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 800198c:	22f0      	movs	r2, #240	; 0xf0
 800198e:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <TFT9341_SetRotation+0x90>)
 8001992:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001996:	801a      	strh	r2, [r3, #0]
      break;
 8001998:	e020      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 1:
      TFT9341_SendData(0x28);
 800199a:	2028      	movs	r0, #40	; 0x28
 800199c:	f7ff fc2c 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019a6:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019aa:	22f0      	movs	r2, #240	; 0xf0
 80019ac:	801a      	strh	r2, [r3, #0]
      break;
 80019ae:	e015      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 2:
      TFT9341_SendData(0x88);
 80019b0:	2088      	movs	r0, #136	; 0x88
 80019b2:	f7ff fc21 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019b8:	22f0      	movs	r2, #240	; 0xf0
 80019ba:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019c2:	801a      	strh	r2, [r3, #0]
      break;
 80019c4:	e00a      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 3:
      TFT9341_SendData(0xE8);
 80019c6:	20e8      	movs	r0, #232	; 0xe8
 80019c8:	f7ff fc16 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019d2:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019d6:	22f0      	movs	r2, #240	; 0xf0
 80019d8:	801a      	strh	r2, [r3, #0]
      break;
 80019da:	bf00      	nop
  }
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20007632 	.word	0x20007632
 80019e8:	20007630 	.word	0x20007630

080019ec <time_i2c_write_single>:



/*function to transmit one byte of data to register_address on ds3231 (device_address: 0X68)*/
void time_i2c_write_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	4603      	mov	r3, r0
 80019f4:	603a      	str	r2, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	460b      	mov	r3, r1
 80019fa:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Write(&hi2c3, DS3231_I2C_ADDRESS<<1, DS3231_REGISTER_SECONDS_DEFAULT, 1, &seco, 1, 1000);
	//HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	HAL_I2C_Mem_Write(&hi2c3, (uint16_t)device_address<<1, register_address, 1, data_byte, 1, 1000);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	b299      	uxth	r1, r3
 8001a04:	79bb      	ldrb	r3, [r7, #6]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	4803      	ldr	r0, [pc, #12]	; (8001a28 <time_i2c_write_single+0x3c>)
 8001a1a:	f004 fd25 	bl	8006468 <HAL_I2C_Mem_Write>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20007640 	.word	0x20007640

08001a2c <time_i2c_write_multi>:

/*function to transmit an array of data to device_address, starting from start_register_address*/
void time_i2c_write_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af04      	add	r7, sp, #16
 8001a32:	603a      	str	r2, [r7, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	71bb      	strb	r3, [r7, #6]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, device_address<<1, start_register_address, 1, data_array, data_length, 1000);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	797b      	ldrb	r3, [r7, #5]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a56:	9002      	str	r0, [sp, #8]
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <time_i2c_write_multi+0x44>)
 8001a62:	f004 fd01 	bl	8006468 <HAL_I2C_Mem_Write>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20007640 	.word	0x20007640

08001a74 <time_i2c_read_single>:

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	603a      	str	r2, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	460b      	mov	r3, r1
 8001a82:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c3, device_address<<1,register_address, 1, data_byte, 1, 1000);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	b299      	uxth	r1, r3
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a94:	9302      	str	r3, [sp, #8]
 8001a96:	2301      	movs	r3, #1
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <time_i2c_read_single+0x3c>)
 8001aa2:	f004 fddb 	bl	800665c <HAL_I2C_Mem_Read>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20007640 	.word	0x20007640

08001ab4 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	603a      	str	r2, [r7, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	71bb      	strb	r3, [r7, #6]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	797b      	ldrb	r3, [r7, #5]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ade:	9002      	str	r0, [sp, #8]
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <time_i2c_read_multi+0x44>)
 8001aea:	f004 fdb7 	bl	800665c <HAL_I2C_Mem_Read>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20007640 	.word	0x20007640

08001afc <ds3231_I2C_init>:

/*function to initialize I2C peripheral in 100khz or 400khz*/
void ds3231_I2C_init()
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b0e      	cmp	r3, #14
 8001b1c:	f200 80ac 	bhi.w	8001c78 <ds3231_read+0x16c>
 8001b20:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <ds3231_read+0x1c>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b65 	.word	0x08001b65
 8001b2c:	08001b81 	.word	0x08001b81
 8001b30:	08001b9d 	.word	0x08001b9d
 8001b34:	08001bb9 	.word	0x08001bb9
 8001b38:	08001bd5 	.word	0x08001bd5
 8001b3c:	08001bf1 	.word	0x08001bf1
 8001b40:	08001c0d 	.word	0x08001c0d
 8001b44:	08001c29 	.word	0x08001c29
 8001b48:	08001c3d 	.word	0x08001c3d
 8001b4c:	08001c51 	.word	0x08001c51
 8001b50:	08001c79 	.word	0x08001c79
 8001b54:	08001c79 	.word	0x08001c79
 8001b58:	08001c79 	.word	0x08001c79
 8001b5c:	08001c79 	.word	0x08001c79
 8001b60:	08001c63 	.word	0x08001c63
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8001b64:	4a48      	ldr	r2, [pc, #288]	; (8001c88 <ds3231_read+0x17c>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	2068      	movs	r0, #104	; 0x68
 8001b6a:	f7ff ff83 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <ds3231_read+0x17c>)
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b76:	2101      	movs	r1, #1
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	f000 f9cf 	bl	8001f1c <BCD_to_HEX>
      break;
 8001b7e:	e07d      	b.n	8001c7c <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 8001b80:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <ds3231_read+0x17c>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	2068      	movs	r0, #104	; 0x68
 8001b86:	f7ff ff75 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <ds3231_read+0x17c>)
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b92:	2101      	movs	r1, #1
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f000 f9c1 	bl	8001f1c <BCD_to_HEX>
      break;
 8001b9a:	e06f      	b.n	8001c7c <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 8001b9c:	4a3a      	ldr	r2, [pc, #232]	; (8001c88 <ds3231_read+0x17c>)
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	2068      	movs	r0, #104	; 0x68
 8001ba2:	f7ff ff67 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <ds3231_read+0x17c>)
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001bae:	2101      	movs	r1, #1
 8001bb0:	6838      	ldr	r0, [r7, #0]
 8001bb2:	f000 f9b3 	bl	8001f1c <BCD_to_HEX>
      break;
 8001bb6:	e061      	b.n	8001c7c <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 8001bb8:	4a33      	ldr	r2, [pc, #204]	; (8001c88 <ds3231_read+0x17c>)
 8001bba:	2103      	movs	r1, #3
 8001bbc:	2068      	movs	r0, #104	; 0x68
 8001bbe:	f7ff ff59 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <ds3231_read+0x17c>)
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	6838      	ldr	r0, [r7, #0]
 8001bce:	f000 f9a5 	bl	8001f1c <BCD_to_HEX>
      break;
 8001bd2:	e053      	b.n	8001c7c <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <ds3231_read+0x17c>)
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	2068      	movs	r0, #104	; 0x68
 8001bda:	f7ff ff4b 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001bde:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <ds3231_read+0x17c>)
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001be6:	2101      	movs	r1, #1
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	f000 f997 	bl	8001f1c <BCD_to_HEX>
      break;
 8001bee:	e045      	b.n	8001c7c <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 8001bf0:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <ds3231_read+0x17c>)
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	2068      	movs	r0, #104	; 0x68
 8001bf6:	f7ff ff3d 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <ds3231_read+0x17c>)
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001c02:	2101      	movs	r1, #1
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	f000 f989 	bl	8001f1c <BCD_to_HEX>
      break;
 8001c0a:	e037      	b.n	8001c7c <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 8001c0c:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <ds3231_read+0x17c>)
 8001c0e:	2106      	movs	r1, #6
 8001c10:	2068      	movs	r0, #104	; 0x68
 8001c12:	f7ff ff2f 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <ds3231_read+0x17c>)
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001c1e:	2101      	movs	r1, #1
 8001c20:	6838      	ldr	r0, [r7, #0]
 8001c22:	f000 f97b 	bl	8001f1c <BCD_to_HEX>
      break;
 8001c26:	e029      	b.n	8001c7c <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <ds3231_read+0x17c>)
 8001c2a:	210e      	movs	r1, #14
 8001c2c:	2068      	movs	r0, #104	; 0x68
 8001c2e:	f7ff ff21 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <ds3231_read+0x17c>)
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	701a      	strb	r2, [r3, #0]
      break;
 8001c3a:	e01f      	b.n	8001c7c <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8001c3c:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <ds3231_read+0x17c>)
 8001c3e:	210f      	movs	r1, #15
 8001c40:	2068      	movs	r0, #104	; 0x68
 8001c42:	f7ff ff17 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <ds3231_read+0x17c>)
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	701a      	strb	r2, [r3, #0]
      break;
 8001c4e:	e015      	b.n	8001c7c <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <ds3231_read+0x17c>)
 8001c52:	2110      	movs	r1, #16
 8001c54:	2068      	movs	r0, #104	; 0x68
 8001c56:	f7ff ff0d 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <ds3231_read+0x17c>)
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 8001c62:	2307      	movs	r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	2100      	movs	r1, #0
 8001c68:	2068      	movs	r0, #104	; 0x68
 8001c6a:	f7ff ff23 	bl	8001ab4 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 8001c6e:	2107      	movs	r1, #7
 8001c70:	6838      	ldr	r0, [r7, #0]
 8001c72:	f000 f953 	bl	8001f1c <BCD_to_HEX>
      break;
 8001c76:	e001      	b.n	8001c7c <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e000      	b.n	8001c7e <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8001c7c:	2301      	movs	r3, #1
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000239c 	.word	0x2000239c

08001c8c <ds3231_set>:

/*function to set internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_set(uint8_t option, uint8_t *data_array)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b0e      	cmp	r3, #14
 8001c9c:	f200 80d5 	bhi.w	8001e4a <ds3231_set+0x1be>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <ds3231_set+0x1c>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001ce5 	.word	0x08001ce5
 8001cac:	08001d01 	.word	0x08001d01
 8001cb0:	08001d1d 	.word	0x08001d1d
 8001cb4:	08001d39 	.word	0x08001d39
 8001cb8:	08001d55 	.word	0x08001d55
 8001cbc:	08001d71 	.word	0x08001d71
 8001cc0:	08001d8d 	.word	0x08001d8d
 8001cc4:	08001da9 	.word	0x08001da9
 8001cc8:	08001de1 	.word	0x08001de1
 8001ccc:	08001e37 	.word	0x08001e37
 8001cd0:	08001e4b 	.word	0x08001e4b
 8001cd4:	08001e4b 	.word	0x08001e4b
 8001cd8:	08001e4b 	.word	0x08001e4b
 8001cdc:	08001e4b 	.word	0x08001e4b
 8001ce0:	08001e19 	.word	0x08001e19
  {
    case SECOND:
      time_registers_clone[0] = *data_array;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	4b5b      	ldr	r3, [pc, #364]	; (8001e58 <ds3231_set+0x1cc>)
 8001cea:	701a      	strb	r2, [r3, #0]
      HEX_to_BCD(&time_registers_clone[0], 1);
 8001cec:	2101      	movs	r1, #1
 8001cee:	485a      	ldr	r0, [pc, #360]	; (8001e58 <ds3231_set+0x1cc>)
 8001cf0:	f000 f953 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 8001cf4:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <ds3231_set+0x1cc>)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2068      	movs	r0, #104	; 0x68
 8001cfa:	f7ff fe77 	bl	80019ec <time_i2c_write_single>
      break;
 8001cfe:	e0a6      	b.n	8001e4e <ds3231_set+0x1c2>
    case MINUTE:
      time_registers_clone[1] = *data_array;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	4b54      	ldr	r3, [pc, #336]	; (8001e58 <ds3231_set+0x1cc>)
 8001d06:	705a      	strb	r2, [r3, #1]
      HEX_to_BCD(&time_registers_clone[1], 1);
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4854      	ldr	r0, [pc, #336]	; (8001e5c <ds3231_set+0x1d0>)
 8001d0c:	f000 f945 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 8001d10:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <ds3231_set+0x1d0>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	2068      	movs	r0, #104	; 0x68
 8001d16:	f7ff fe69 	bl	80019ec <time_i2c_write_single>
      break;
 8001d1a:	e098      	b.n	8001e4e <ds3231_set+0x1c2>
    case HOUR:
      time_registers_clone[2] = *data_array;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <ds3231_set+0x1cc>)
 8001d22:	709a      	strb	r2, [r3, #2]
      HEX_to_BCD(&time_registers_clone[2], 1);
 8001d24:	2101      	movs	r1, #1
 8001d26:	484e      	ldr	r0, [pc, #312]	; (8001e60 <ds3231_set+0x1d4>)
 8001d28:	f000 f937 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <ds3231_set+0x1d4>)
 8001d2e:	2102      	movs	r1, #2
 8001d30:	2068      	movs	r0, #104	; 0x68
 8001d32:	f7ff fe5b 	bl	80019ec <time_i2c_write_single>
      break;
 8001d36:	e08a      	b.n	8001e4e <ds3231_set+0x1c2>
    case DAY_OF_WEEK:
      time_registers_clone[3] = *data_array;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <ds3231_set+0x1cc>)
 8001d3e:	70da      	strb	r2, [r3, #3]
      HEX_to_BCD(&time_registers_clone[3], 1);
 8001d40:	2101      	movs	r1, #1
 8001d42:	4848      	ldr	r0, [pc, #288]	; (8001e64 <ds3231_set+0x1d8>)
 8001d44:	f000 f929 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 8001d48:	4a46      	ldr	r2, [pc, #280]	; (8001e64 <ds3231_set+0x1d8>)
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	2068      	movs	r0, #104	; 0x68
 8001d4e:	f7ff fe4d 	bl	80019ec <time_i2c_write_single>
      break;
 8001d52:	e07c      	b.n	8001e4e <ds3231_set+0x1c2>
    case DATE:
      time_registers_clone[4] = *data_array;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <ds3231_set+0x1cc>)
 8001d5a:	711a      	strb	r2, [r3, #4]
      HEX_to_BCD(&time_registers_clone[4], 1);
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	4842      	ldr	r0, [pc, #264]	; (8001e68 <ds3231_set+0x1dc>)
 8001d60:	f000 f91b 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 8001d64:	4a40      	ldr	r2, [pc, #256]	; (8001e68 <ds3231_set+0x1dc>)
 8001d66:	2104      	movs	r1, #4
 8001d68:	2068      	movs	r0, #104	; 0x68
 8001d6a:	f7ff fe3f 	bl	80019ec <time_i2c_write_single>
      break;
 8001d6e:	e06e      	b.n	8001e4e <ds3231_set+0x1c2>
    case MONTH:
      time_registers_clone[5] = *data_array;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <ds3231_set+0x1cc>)
 8001d76:	715a      	strb	r2, [r3, #5]
      HEX_to_BCD(&time_registers_clone[5], 1);
 8001d78:	2101      	movs	r1, #1
 8001d7a:	483c      	ldr	r0, [pc, #240]	; (8001e6c <ds3231_set+0x1e0>)
 8001d7c:	f000 f90d 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 8001d80:	4a3a      	ldr	r2, [pc, #232]	; (8001e6c <ds3231_set+0x1e0>)
 8001d82:	2105      	movs	r1, #5
 8001d84:	2068      	movs	r0, #104	; 0x68
 8001d86:	f7ff fe31 	bl	80019ec <time_i2c_write_single>
      break;
 8001d8a:	e060      	b.n	8001e4e <ds3231_set+0x1c2>
    case YEAR:
      time_registers_clone[6] = *data_array;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <ds3231_set+0x1cc>)
 8001d92:	719a      	strb	r2, [r3, #6]
      HEX_to_BCD(&time_registers_clone[6], 1);
 8001d94:	2101      	movs	r1, #1
 8001d96:	4836      	ldr	r0, [pc, #216]	; (8001e70 <ds3231_set+0x1e4>)
 8001d98:	f000 f8ff 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8001d9c:	4a34      	ldr	r2, [pc, #208]	; (8001e70 <ds3231_set+0x1e4>)
 8001d9e:	2106      	movs	r1, #6
 8001da0:	2068      	movs	r0, #104	; 0x68
 8001da2:	f7ff fe23 	bl	80019ec <time_i2c_write_single>
      break;
 8001da6:	e052      	b.n	8001e4e <ds3231_set+0x1c2>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8001da8:	4a32      	ldr	r2, [pc, #200]	; (8001e74 <ds3231_set+0x1e8>)
 8001daa:	210e      	movs	r1, #14
 8001dac:	2068      	movs	r0, #104	; 0x68
 8001dae:	f7ff fe61 	bl	8001a74 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (*data_array & (~(1 << DS3231_BIT_EOSC)));
 8001db2:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <ds3231_set+0x1e8>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001dbc:	b25a      	sxtb	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b25b      	sxtb	r3, r3
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <ds3231_set+0x1ec>)
 8001dd2:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8001dd4:	4a28      	ldr	r2, [pc, #160]	; (8001e78 <ds3231_set+0x1ec>)
 8001dd6:	210e      	movs	r1, #14
 8001dd8:	2068      	movs	r0, #104	; 0x68
 8001dda:	f7ff fe07 	bl	80019ec <time_i2c_write_single>
      break;
 8001dde:	e036      	b.n	8001e4e <ds3231_set+0x1c2>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <ds3231_set+0x1e8>)
 8001de2:	210f      	movs	r1, #15
 8001de4:	2068      	movs	r0, #104	; 0x68
 8001de6:	f7ff fe45 	bl	8001a74 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (*data_array & (~(1 << DS3231_BIT_OSF)));
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <ds3231_set+0x1e8>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001df4:	b25a      	sxtb	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	4313      	orrs	r3, r2
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <ds3231_set+0x1ec>)
 8001e0a:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <ds3231_set+0x1ec>)
 8001e0e:	210f      	movs	r1, #15
 8001e10:	2068      	movs	r0, #104	; 0x68
 8001e12:	f7ff fdeb 	bl	80019ec <time_i2c_write_single>
      break;
 8001e16:	e01a      	b.n	8001e4e <ds3231_set+0x1c2>
    case TIME:
      ds3231_data_clone(TIME, data_array);
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	200e      	movs	r0, #14
 8001e1c:	f000 f82e 	bl	8001e7c <ds3231_data_clone>
      HEX_to_BCD(&time_registers_clone[0], 7);
 8001e20:	2107      	movs	r1, #7
 8001e22:	480d      	ldr	r0, [pc, #52]	; (8001e58 <ds3231_set+0x1cc>)
 8001e24:	f000 f8b9 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 8001e28:	2307      	movs	r3, #7
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <ds3231_set+0x1cc>)
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2068      	movs	r0, #104	; 0x68
 8001e30:	f7ff fdfc 	bl	8001a2c <time_i2c_write_multi>
      break;
 8001e34:	e00b      	b.n	8001e4e <ds3231_set+0x1c2>
    case AGING_OFFSET:
      register_new_value = *data_array;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <ds3231_set+0x1ec>)
 8001e3c:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 8001e3e:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <ds3231_set+0x1ec>)
 8001e40:	2110      	movs	r1, #16
 8001e42:	2068      	movs	r0, #104	; 0x68
 8001e44:	f7ff fdd2 	bl	80019ec <time_i2c_write_single>
      break;
 8001e48:	e001      	b.n	8001e4e <ds3231_set+0x1c2>
    default:
      return OPERATION_FAILED;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <ds3231_set+0x1c4>
  }
  return OPERATION_DONE;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200023a0 	.word	0x200023a0
 8001e5c:	200023a1 	.word	0x200023a1
 8001e60:	200023a2 	.word	0x200023a2
 8001e64:	200023a3 	.word	0x200023a3
 8001e68:	200023a4 	.word	0x200023a4
 8001e6c:	200023a5 	.word	0x200023a5
 8001e70:	200023a6 	.word	0x200023a6
 8001e74:	2000239c 	.word	0x2000239c
 8001e78:	2000239d 	.word	0x2000239d

08001e7c <ds3231_data_clone>:

/*to clone the desired data and prevent reconversion of BCD to HEX*/
static void ds3231_data_clone(uint8_t option, uint8_t *input_array)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2b0e      	cmp	r3, #14
 8001e8c:	d006      	beq.n	8001e9c <ds3231_data_clone+0x20>
 8001e8e:	2b0e      	cmp	r3, #14
 8001e90:	dc37      	bgt.n	8001f02 <ds3231_data_clone+0x86>
 8001e92:	2b0a      	cmp	r3, #10
 8001e94:	d013      	beq.n	8001ebe <ds3231_data_clone+0x42>
 8001e96:	2b0b      	cmp	r3, #11
 8001e98:	d022      	beq.n	8001ee0 <ds3231_data_clone+0x64>
      {
        alarm2_registers_clone[counter] = input_array[counter];
      }
      break;
    default:
      break;
 8001e9a:	e032      	b.n	8001f02 <ds3231_data_clone+0x86>
      for (uint8_t counter = 0; counter < 7; counter++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e009      	b.n	8001eb6 <ds3231_data_clone+0x3a>
        time_registers_clone[counter] = input_array[counter];
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	441a      	add	r2, r3
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	7811      	ldrb	r1, [r2, #0]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <ds3231_data_clone+0x94>)
 8001eae:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 7; counter++)
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d9f2      	bls.n	8001ea2 <ds3231_data_clone+0x26>
      break;
 8001ebc:	e022      	b.n	8001f04 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 4; counter++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73bb      	strb	r3, [r7, #14]
 8001ec2:	e009      	b.n	8001ed8 <ds3231_data_clone+0x5c>
        alarm1_registers_clone[counter] = input_array[counter];
 8001ec4:	7bbb      	ldrb	r3, [r7, #14]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	441a      	add	r2, r3
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	7811      	ldrb	r1, [r2, #0]
 8001ece:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <ds3231_data_clone+0x98>)
 8001ed0:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 4; counter++)
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73bb      	strb	r3, [r7, #14]
 8001ed8:	7bbb      	ldrb	r3, [r7, #14]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d9f2      	bls.n	8001ec4 <ds3231_data_clone+0x48>
      break;
 8001ede:	e011      	b.n	8001f04 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 3; counter++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	737b      	strb	r3, [r7, #13]
 8001ee4:	e009      	b.n	8001efa <ds3231_data_clone+0x7e>
        alarm2_registers_clone[counter] = input_array[counter];
 8001ee6:	7b7b      	ldrb	r3, [r7, #13]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	441a      	add	r2, r3
 8001eec:	7b7b      	ldrb	r3, [r7, #13]
 8001eee:	7811      	ldrb	r1, [r2, #0]
 8001ef0:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <ds3231_data_clone+0x9c>)
 8001ef2:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 3; counter++)
 8001ef4:	7b7b      	ldrb	r3, [r7, #13]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	737b      	strb	r3, [r7, #13]
 8001efa:	7b7b      	ldrb	r3, [r7, #13]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d9f2      	bls.n	8001ee6 <ds3231_data_clone+0x6a>
      break;
 8001f00:	e000      	b.n	8001f04 <ds3231_data_clone+0x88>
      break;
 8001f02:	bf00      	nop
  }
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	200023a0 	.word	0x200023a0
 8001f14:	200023a8 	.word	0x200023a8
 8001f18:	200023ac 	.word	0x200023ac

08001f1c <BCD_to_HEX>:

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e028      	b.n	8001f84 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	b2d9      	uxtb	r1, r3
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	4403      	add	r3, r0
 8001f72:	440a      	add	r2, r1
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	dad2      	bge.n	8001f32 <BCD_to_HEX+0x16>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HEX_to_BCD>:

/*internal function related to this file and not accessible from outside*/
static void HEX_to_BCD(uint8_t *data_array, uint8_t array_length)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	70fb      	strb	r3, [r7, #3]
  uint8_t temporary_value;
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	73bb      	strb	r3, [r7, #14]
 8001fae:	e02d      	b.n	800200c <HEX_to_BCD+0x72>
  {
    temporary_value = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8001fb4:	e00e      	b.n	8001fd4 <HEX_to_BCD+0x3a>
    {
      temporary_value += 0X10;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	3310      	adds	r3, #16
 8001fba:	73fb      	strb	r3, [r7, #15]
      data_array[index] -= 0X0A;
 8001fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	440b      	add	r3, r1
 8001fce:	3a0a      	subs	r2, #10
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8001fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	2b09      	cmp	r3, #9
 8001fe2:	dce8      	bgt.n	8001fb6 <HEX_to_BCD+0x1c>
    }
    temporary_value += data_array[index];
 8001fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	73fb      	strb	r3, [r7, #15]
    data_array[index] = temporary_value;
 8001ff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8002000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	73bb      	strb	r3, [r7, #14]
 800200c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002010:	2b00      	cmp	r3, #0
 8002012:	dacd      	bge.n	8001fb0 <HEX_to_BCD+0x16>
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_SPI_TxCpltCallback>:


//--------------------------------------------------------------------------------
// For DMA SPI2 (LCD)
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <HAL_SPI_TxCpltCallback+0x3c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d111      	bne.n	8002058 <HAL_SPI_TxCpltCallback+0x34>
	{
	    dma_spi_cnt--;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3b01      	subs	r3, #1
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 800203c:	6013      	str	r3, [r2, #0]
	    if(dma_spi_cnt==0)
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d108      	bne.n	8002058 <HAL_SPI_TxCpltCallback+0x34>
	    {
	    	HAL_SPI_DMAStop(&hspi2);
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <HAL_SPI_TxCpltCallback+0x3c>)
 8002048:	f007 f9ee 	bl	8009428 <HAL_SPI_DMAStop>
	    	dma_spi_cnt=1;
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]
	    	dma_spi_fl=1;
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_SPI_TxCpltCallback+0x44>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200076e4 	.word	0x200076e4
 8002064:	20000028 	.word	0x20000028
 8002068:	2000279c 	.word	0x2000279c

0800206c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002070:	f002 fcb2 	bl	80049d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002074:	f000 f89c 	bl	80021b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002078:	f000 fb1a 	bl	80026b0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800207c:	f000 fa88 	bl	8002590 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002080:	f000 f980 	bl	8002384 <MX_I2C3_Init>
  MX_TIM10_Init();
 8002084:	f000 fad2 	bl	800262c <MX_TIM10_Init>
  MX_SPI1_Init();
 8002088:	f000 f9be 	bl	8002408 <MX_SPI1_Init>
  MX_SPI2_Init();
 800208c:	f000 f9f2 	bl	8002474 <MX_SPI2_Init>
  MX_DMA_Init();
 8002090:	f000 faee 	bl	8002670 <MX_DMA_Init>
  MX_RNG_Init();
 8002094:	f000 f9a4 	bl	80023e0 <MX_RNG_Init>
  MX_I2C2_Init();
 8002098:	f000 f946 	bl	8002328 <MX_I2C2_Init>
  MX_ADC1_Init();
 800209c:	f000 f8f2 	bl	8002284 <MX_ADC1_Init>
  MX_TIM1_Init();
 80020a0:	f000 fa1e 	bl	80024e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 80020a4:	4829      	ldr	r0, [pc, #164]	; (800214c <main+0xe0>)
 80020a6:	f007 fcc3 	bl	8009a30 <HAL_TIM_Base_Start_IT>
  /* IF LCD DOESN'T WORK !
  RIGHT IN RIGHT ORDER SPI2 AND DMA !!!!
  MX_DMA_Init();
  MX_SPI2_Init();
  */
  HAL_DMA_DeInit(&hdma_spi2_tx);
 80020aa:	4829      	ldr	r0, [pc, #164]	; (8002150 <main+0xe4>)
 80020ac:	f003 f91e 	bl	80052ec <HAL_DMA_DeInit>
  HAL_SPI_DeInit(&hspi2);
 80020b0:	4828      	ldr	r0, [pc, #160]	; (8002154 <main+0xe8>)
 80020b2:	f006 ff9e 	bl	8008ff2 <HAL_SPI_DeInit>
  MX_DMA_Init();
 80020b6:	f000 fadb 	bl	8002670 <MX_DMA_Init>
  MX_SPI2_Init();
 80020ba:	f000 f9db 	bl	8002474 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020be:	f00b fa91 	bl	800d5e4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 80020c2:	4a25      	ldr	r2, [pc, #148]	; (8002158 <main+0xec>)
 80020c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020c8:	200a      	movs	r0, #10
 80020ca:	f00b fb82 	bl	800d7d2 <osMessageQueueNew>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <main+0xf0>)
 80020d2:	6013      	str	r3, [r2, #0]

  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (1, sizeof(LCDQUEUE), &LCDQueue_attributes);
 80020d4:	4a22      	ldr	r2, [pc, #136]	; (8002160 <main+0xf4>)
 80020d6:	2164      	movs	r1, #100	; 0x64
 80020d8:	2001      	movs	r0, #1
 80020da:	f00b fb7a 	bl	800d7d2 <osMessageQueueNew>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <main+0xf8>)
 80020e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <main+0xfc>)
 80020e6:	2100      	movs	r1, #0
 80020e8:	4820      	ldr	r0, [pc, #128]	; (800216c <main+0x100>)
 80020ea:	f00b fac5 	bl	800d678 <osThreadNew>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <main+0x104>)
 80020f2:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 80020f4:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <main+0x108>)
 80020f6:	2100      	movs	r1, #0
 80020f8:	481f      	ldr	r0, [pc, #124]	; (8002178 <main+0x10c>)
 80020fa:	f00b fabd 	bl	800d678 <osThreadNew>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a1e      	ldr	r2, [pc, #120]	; (800217c <main+0x110>)
 8002102:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <main+0x114>)
 8002106:	2100      	movs	r1, #0
 8002108:	481e      	ldr	r0, [pc, #120]	; (8002184 <main+0x118>)
 800210a:	f00b fab5 	bl	800d678 <osThreadNew>
 800210e:	4603      	mov	r3, r0
 8002110:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <main+0x11c>)
 8002112:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Start_LCD, NULL, &LCD_attributes);
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <main+0x120>)
 8002116:	2100      	movs	r1, #0
 8002118:	481d      	ldr	r0, [pc, #116]	; (8002190 <main+0x124>)
 800211a:	f00b faad 	bl	800d678 <osThreadNew>
 800211e:	4603      	mov	r3, r0
 8002120:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <main+0x128>)
 8002122:	6013      	str	r3, [r2, #0]

  /* creation of LCD_touchscreen */
  LCD_touchscreenHandle = osThreadNew(Start_LCD_touchscreen, NULL, &LCD_touchscreen_attributes);
 8002124:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <main+0x12c>)
 8002126:	2100      	movs	r1, #0
 8002128:	481c      	ldr	r0, [pc, #112]	; (800219c <main+0x130>)
 800212a:	f00b faa5 	bl	800d678 <osThreadNew>
 800212e:	4603      	mov	r3, r0
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <main+0x134>)
 8002132:	6013      	str	r3, [r2, #0]

  /* creation of RTC */
  RTCHandle = osThreadNew(Start_RTC, NULL, &RTC_attributes);
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <main+0x138>)
 8002136:	2100      	movs	r1, #0
 8002138:	481b      	ldr	r0, [pc, #108]	; (80021a8 <main+0x13c>)
 800213a:	f00b fa9d 	bl	800d678 <osThreadNew>
 800213e:	4603      	mov	r3, r0
 8002140:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <main+0x140>)
 8002142:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002144:	f00b fa72 	bl	800d62c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002148:	e7fe      	b.n	8002148 <main+0xdc>
 800214a:	bf00      	nop
 800214c:	2000aaa0 	.word	0x2000aaa0
 8002150:	2000d0b8 	.word	0x2000d0b8
 8002154:	200076e4 	.word	0x200076e4
 8002158:	08018558 	.word	0x08018558
 800215c:	200081dc 	.word	0x200081dc
 8002160:	08018570 	.word	0x08018570
 8002164:	2000c364 	.word	0x2000c364
 8002168:	08018480 	.word	0x08018480
 800216c:	080029a5 	.word	0x080029a5
 8002170:	2000763c 	.word	0x2000763c
 8002174:	080184a4 	.word	0x080184a4
 8002178:	080029b9 	.word	0x080029b9
 800217c:	2000cd9c 	.word	0x2000cd9c
 8002180:	080184c8 	.word	0x080184c8
 8002184:	08002c35 	.word	0x08002c35
 8002188:	2000ab30 	.word	0x2000ab30
 800218c:	080184ec 	.word	0x080184ec
 8002190:	08002c91 	.word	0x08002c91
 8002194:	2000c36c 	.word	0x2000c36c
 8002198:	08018510 	.word	0x08018510
 800219c:	08002cd5 	.word	0x08002cd5
 80021a0:	2000c368 	.word	0x2000c368
 80021a4:	08018534 	.word	0x08018534
 80021a8:	08002ebd 	.word	0x08002ebd
 80021ac:	2000d1d8 	.word	0x2000d1d8

080021b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b094      	sub	sp, #80	; 0x50
 80021b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021b6:	f107 0320 	add.w	r3, r7, #32
 80021ba:	2230      	movs	r2, #48	; 0x30
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f00f fb23 	bl	801180a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <SystemClock_Config+0xcc>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <SystemClock_Config+0xcc>)
 80021de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6413      	str	r3, [r2, #64]	; 0x40
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <SystemClock_Config+0xcc>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <SystemClock_Config+0xd0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <SystemClock_Config+0xd0>)
 80021fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <SystemClock_Config+0xd0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800220c:	2301      	movs	r3, #1
 800220e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002216:	2302      	movs	r3, #2
 8002218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002220:	2308      	movs	r3, #8
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002224:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002228:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800222a:	2302      	movs	r3, #2
 800222c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800222e:	2307      	movs	r3, #7
 8002230:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002232:	f107 0320 	add.w	r3, r7, #32
 8002236:	4618      	mov	r0, r3
 8002238:	f006 f996 	bl	8008568 <HAL_RCC_OscConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002242:	f001 fccf 	bl	8003be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002246:	230f      	movs	r3, #15
 8002248:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224a:	2302      	movs	r3, #2
 800224c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002252:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002256:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	2105      	movs	r1, #5
 8002264:	4618      	mov	r0, r3
 8002266:	f006 fbf7 	bl	8008a58 <HAL_RCC_ClockConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002270:	f001 fcb8 	bl	8003be4 <Error_Handler>
  }
}
 8002274:	bf00      	nop
 8002276:	3750      	adds	r7, #80	; 0x50
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000

08002284 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800228a:	463b      	mov	r3, r7
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <MX_ADC1_Init+0x98>)
 8002298:	4a21      	ldr	r2, [pc, #132]	; (8002320 <MX_ADC1_Init+0x9c>)
 800229a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <MX_ADC1_Init+0x98>)
 800229e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <MX_ADC1_Init+0x98>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <MX_ADC1_Init+0x98>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_ADC1_Init+0x98>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <MX_ADC1_Init+0x98>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_ADC1_Init+0x98>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_ADC1_Init+0x98>)
 80022c6:	4a17      	ldr	r2, [pc, #92]	; (8002324 <MX_ADC1_Init+0xa0>)
 80022c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_ADC1_Init+0x98>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <MX_ADC1_Init+0x98>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_ADC1_Init+0x98>)
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_ADC1_Init+0x98>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022e4:	480d      	ldr	r0, [pc, #52]	; (800231c <MX_ADC1_Init+0x98>)
 80022e6:	f002 fbdd 	bl	8004aa4 <HAL_ADC_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022f0:	f001 fc78 	bl	8003be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022f4:	2309      	movs	r3, #9
 80022f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002300:	463b      	mov	r3, r7
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_ADC1_Init+0x98>)
 8002306:	f002 fc11 	bl	8004b2c <HAL_ADC_ConfigChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002310:	f001 fc68 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000aae8 	.word	0x2000aae8
 8002320:	40012000 	.word	0x40012000
 8002324:	0f000001 	.word	0x0f000001

08002328 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <MX_I2C2_Init+0x50>)
 800232e:	4a13      	ldr	r2, [pc, #76]	; (800237c <MX_I2C2_Init+0x54>)
 8002330:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_I2C2_Init+0x50>)
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <MX_I2C2_Init+0x58>)
 8002336:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_I2C2_Init+0x50>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_I2C2_Init+0x50>)
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_I2C2_Init+0x50>)
 8002346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800234a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <MX_I2C2_Init+0x50>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_I2C2_Init+0x50>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <MX_I2C2_Init+0x50>)
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_I2C2_Init+0x50>)
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <MX_I2C2_Init+0x50>)
 8002366:	f003 fe3d 	bl	8005fe4 <HAL_I2C_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002370:	f001 fc38 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200077d4 	.word	0x200077d4
 800237c:	40005800 	.word	0x40005800
 8002380:	000186a0 	.word	0x000186a0

08002384 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <MX_I2C3_Init+0x50>)
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <MX_I2C3_Init+0x54>)
 800238c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_I2C3_Init+0x50>)
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <MX_I2C3_Init+0x58>)
 8002392:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <MX_I2C3_Init+0x50>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_I2C3_Init+0x50>)
 800239c:	2200      	movs	r2, #0
 800239e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023bc:	2200      	movs	r2, #0
 80023be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023c0:	4804      	ldr	r0, [pc, #16]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023c2:	f003 fe0f 	bl	8005fe4 <HAL_I2C_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80023cc:	f001 fc0a 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20007640 	.word	0x20007640
 80023d8:	40005c00 	.word	0x40005c00
 80023dc:	000186a0 	.word	0x000186a0

080023e0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <MX_RNG_Init+0x20>)
 80023e6:	4a07      	ldr	r2, [pc, #28]	; (8002404 <MX_RNG_Init+0x24>)
 80023e8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023ea:	4805      	ldr	r0, [pc, #20]	; (8002400 <MX_RNG_Init+0x20>)
 80023ec:	f006 fd4e 	bl	8008e8c <HAL_RNG_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023f6:	f001 fbf5 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	2000cd8c 	.word	0x2000cd8c
 8002404:	50060800 	.word	0x50060800

08002408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <MX_SPI1_Init+0x64>)
 800240e:	4a18      	ldr	r2, [pc, #96]	; (8002470 <MX_SPI1_Init+0x68>)
 8002410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <MX_SPI1_Init+0x64>)
 8002414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <MX_SPI1_Init+0x64>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <MX_SPI1_Init+0x64>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_SPI1_Init+0x64>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <MX_SPI1_Init+0x64>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_SPI1_Init+0x64>)
 8002434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002438:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <MX_SPI1_Init+0x64>)
 800243c:	2220      	movs	r2, #32
 800243e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <MX_SPI1_Init+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <MX_SPI1_Init+0x64>)
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <MX_SPI1_Init+0x64>)
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <MX_SPI1_Init+0x64>)
 8002454:	220a      	movs	r2, #10
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002458:	4804      	ldr	r0, [pc, #16]	; (800246c <MX_SPI1_Init+0x64>)
 800245a:	f006 fd41 	bl	8008ee0 <HAL_SPI_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002464:	f001 fbbe 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}
 800246c:	2000cda0 	.word	0x2000cda0
 8002470:	40013000 	.word	0x40013000

08002474 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <MX_SPI2_Init+0x64>)
 800247a:	4a18      	ldr	r2, [pc, #96]	; (80024dc <MX_SPI2_Init+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <MX_SPI2_Init+0x64>)
 8002480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <MX_SPI2_Init+0x64>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <MX_SPI2_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <MX_SPI2_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <MX_SPI2_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024c0:	220a      	movs	r2, #10
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024c6:	f006 fd0b 	bl	8008ee0 <HAL_SPI_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024d0:	f001 fb88 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	200076e4 	.word	0x200076e4
 80024dc:	40003800 	.word	0x40003800

080024e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	; 0x30
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f00f f98b 	bl	801180a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024fc:	4b22      	ldr	r3, [pc, #136]	; (8002588 <MX_TIM1_Init+0xa8>)
 80024fe:	4a23      	ldr	r2, [pc, #140]	; (800258c <MX_TIM1_Init+0xac>)
 8002500:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002502:	4b21      	ldr	r3, [pc, #132]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002504:	2200      	movs	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <MX_TIM1_Init+0xa8>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002514:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <MX_TIM1_Init+0xa8>)
 800251e:	2200      	movs	r2, #0
 8002520:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002528:	2301      	movs	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002530:	2301      	movs	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002540:	2301      	movs	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	4619      	mov	r1, r3
 8002552:	480d      	ldr	r0, [pc, #52]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002554:	f007 fadc 	bl	8009b10 <HAL_TIM_Encoder_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800255e:	f001 fb41 	bl	8003be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4806      	ldr	r0, [pc, #24]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002570:	f007 ff5a 	bl	800a428 <HAL_TIMEx_MasterConfigSynchronization>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800257a:	f001 fb33 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	3730      	adds	r7, #48	; 0x30
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000cb40 	.word	0x2000cb40
 800258c:	40010000 	.word	0x40010000

08002590 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	463b      	mov	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <MX_TIM3_Init+0x94>)
 80025ae:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <MX_TIM3_Init+0x98>)
 80025b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 80025b2:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <MX_TIM3_Init+0x94>)
 80025b4:	f240 3247 	movw	r2, #839	; 0x347
 80025b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <MX_TIM3_Init+0x94>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80025c0:	4b18      	ldr	r3, [pc, #96]	; (8002624 <MX_TIM3_Init+0x94>)
 80025c2:	220a      	movs	r2, #10
 80025c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <MX_TIM3_Init+0x94>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <MX_TIM3_Init+0x94>)
 80025ce:	2280      	movs	r2, #128	; 0x80
 80025d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025d2:	4814      	ldr	r0, [pc, #80]	; (8002624 <MX_TIM3_Init+0x94>)
 80025d4:	f007 f9dc 	bl	8009990 <HAL_TIM_Base_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025de:	f001 fb01 	bl	8003be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	4619      	mov	r1, r3
 80025ee:	480d      	ldr	r0, [pc, #52]	; (8002624 <MX_TIM3_Init+0x94>)
 80025f0:	f007 fcca 	bl	8009f88 <HAL_TIM_ConfigClockSource>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80025fa:	f001 faf3 	bl	8003be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002606:	463b      	mov	r3, r7
 8002608:	4619      	mov	r1, r3
 800260a:	4806      	ldr	r0, [pc, #24]	; (8002624 <MX_TIM3_Init+0x94>)
 800260c:	f007 ff0c 	bl	800a428 <HAL_TIMEx_MasterConfigSynchronization>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002616:	f001 fae5 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000aaa0 	.word	0x2000aaa0
 8002628:	40000400 	.word	0x40000400

0800262c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <MX_TIM10_Init+0x3c>)
 8002632:	4a0e      	ldr	r2, [pc, #56]	; (800266c <MX_TIM10_Init+0x40>)
 8002634:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <MX_TIM10_Init+0x3c>)
 8002638:	22a7      	movs	r2, #167	; 0xa7
 800263a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <MX_TIM10_Init+0x3c>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <MX_TIM10_Init+0x3c>)
 8002644:	2209      	movs	r2, #9
 8002646:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <MX_TIM10_Init+0x3c>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_TIM10_Init+0x3c>)
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002654:	4804      	ldr	r0, [pc, #16]	; (8002668 <MX_TIM10_Init+0x3c>)
 8002656:	f007 f99b 	bl	8009990 <HAL_TIM_Base_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002660:	f001 fac0 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	2000778c 	.word	0x2000778c
 800266c:	40014400 	.word	0x40014400

08002670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <MX_DMA_Init+0x3c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <MX_DMA_Init+0x3c>)
 8002680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <MX_DMA_Init+0x3c>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2105      	movs	r1, #5
 8002696:	200f      	movs	r0, #15
 8002698:	f002 fd42 	bl	8005120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800269c:	200f      	movs	r0, #15
 800269e:	f002 fd5b 	bl	8005158 <HAL_NVIC_EnableIRQ>

}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800

080026b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	; 0x30
 80026b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]
 80026c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	4bb0      	ldr	r3, [pc, #704]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4aaf      	ldr	r2, [pc, #700]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026d0:	f043 0310 	orr.w	r3, r3, #16
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4bad      	ldr	r3, [pc, #692]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	4ba9      	ldr	r3, [pc, #676]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4aa8      	ldr	r2, [pc, #672]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4ba6      	ldr	r3, [pc, #664]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4ba2      	ldr	r3, [pc, #648]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4aa1      	ldr	r2, [pc, #644]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b9f      	ldr	r3, [pc, #636]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b9b      	ldr	r3, [pc, #620]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a9a      	ldr	r2, [pc, #616]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b98      	ldr	r3, [pc, #608]	; (800298c <MX_GPIO_Init+0x2dc>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	4b94      	ldr	r3, [pc, #592]	; (800298c <MX_GPIO_Init+0x2dc>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a93      	ldr	r2, [pc, #588]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b91      	ldr	r3, [pc, #580]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	4b8d      	ldr	r3, [pc, #564]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a8c      	ldr	r2, [pc, #560]	; (800298c <MX_GPIO_Init+0x2dc>)
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b8a      	ldr	r3, [pc, #552]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 800276e:	2200      	movs	r2, #0
 8002770:	217c      	movs	r1, #124	; 0x7c
 8002772:	4887      	ldr	r0, [pc, #540]	; (8002990 <MX_GPIO_Init+0x2e0>)
 8002774:	f003 fc1c 	bl	8005fb0 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002778:	2201      	movs	r2, #1
 800277a:	2101      	movs	r1, #1
 800277c:	4885      	ldr	r0, [pc, #532]	; (8002994 <MX_GPIO_Init+0x2e4>)
 800277e:	f003 fc17 	bl	8005fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 8002782:	2200      	movs	r2, #0
 8002784:	2142      	movs	r1, #66	; 0x42
 8002786:	4883      	ldr	r0, [pc, #524]	; (8002994 <MX_GPIO_Init+0x2e4>)
 8002788:	f003 fc12 	bl	8005fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800278c:	2200      	movs	r2, #0
 800278e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002792:	4881      	ldr	r0, [pc, #516]	; (8002998 <MX_GPIO_Init+0x2e8>)
 8002794:	f003 fc0c 	bl	8005fb0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800279e:	487f      	ldr	r0, [pc, #508]	; (800299c <MX_GPIO_Init+0x2ec>)
 80027a0:	f003 fc06 	bl	8005fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 80027a4:	231c      	movs	r3, #28
 80027a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	4619      	mov	r1, r3
 80027ba:	4875      	ldr	r0, [pc, #468]	; (8002990 <MX_GPIO_Init+0x2e0>)
 80027bc:	f003 f948 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 80027c0:	2360      	movs	r3, #96	; 0x60
 80027c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c4:	2301      	movs	r3, #1
 80027c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	4619      	mov	r1, r3
 80027d6:	486e      	ldr	r0, [pc, #440]	; (8002990 <MX_GPIO_Init+0x2e0>)
 80027d8:	f003 f93a 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80027dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	4868      	ldr	r0, [pc, #416]	; (8002994 <MX_GPIO_Init+0x2e4>)
 80027f2:	f003 f92d 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 80027f6:	2303      	movs	r3, #3
 80027f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fa:	2301      	movs	r3, #1
 80027fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	4861      	ldr	r0, [pc, #388]	; (8002994 <MX_GPIO_Init+0x2e4>)
 800280e:	f003 f91f 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002812:	2308      	movs	r3, #8
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002822:	2305      	movs	r3, #5
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	4619      	mov	r1, r3
 800282c:	4859      	ldr	r0, [pc, #356]	; (8002994 <MX_GPIO_Init+0x2e4>)
 800282e:	f003 f90f 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002832:	2301      	movs	r3, #1
 8002834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002836:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800283a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4619      	mov	r1, r3
 8002846:	4856      	ldr	r0, [pc, #344]	; (80029a0 <MX_GPIO_Init+0x2f0>)
 8002848:	f003 f902 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800284c:	2310      	movs	r3, #16
 800284e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800285c:	2306      	movs	r3, #6
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	4619      	mov	r1, r3
 8002866:	484e      	ldr	r0, [pc, #312]	; (80029a0 <MX_GPIO_Init+0x2f0>)
 8002868:	f003 f8f2 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800286c:	2304      	movs	r3, #4
 800286e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	4847      	ldr	r0, [pc, #284]	; (800299c <MX_GPIO_Init+0x2ec>)
 8002880:	f003 f8e6 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8002884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800288e:	2301      	movs	r3, #1
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8002892:	f107 031c 	add.w	r3, r7, #28
 8002896:	4619      	mov	r1, r3
 8002898:	483d      	ldr	r0, [pc, #244]	; (8002990 <MX_GPIO_Init+0x2e0>)
 800289a:	f003 f8d9 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800289e:	f24f 0310 	movw	r3, #61456	; 0xf010
 80028a2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	4838      	ldr	r0, [pc, #224]	; (8002998 <MX_GPIO_Init+0x2e8>)
 80028b8:	f003 f8ca 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 80028bc:	2340      	movs	r3, #64	; 0x40
 80028be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c0:	2301      	movs	r3, #1
 80028c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c8:	2302      	movs	r3, #2
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 80028cc:	f107 031c 	add.w	r3, r7, #28
 80028d0:	4619      	mov	r1, r3
 80028d2:	4830      	ldr	r0, [pc, #192]	; (8002994 <MX_GPIO_Init+0x2e4>)
 80028d4:	f003 f8bc 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80028d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80028dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028ea:	2306      	movs	r3, #6
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	4619      	mov	r1, r3
 80028f4:	4827      	ldr	r0, [pc, #156]	; (8002994 <MX_GPIO_Init+0x2e4>)
 80028f6:	f003 f8ab 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80028fa:	2320      	movs	r3, #32
 80028fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	4619      	mov	r1, r3
 800290c:	4822      	ldr	r0, [pc, #136]	; (8002998 <MX_GPIO_Init+0x2e8>)
 800290e:	f003 f89f 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002912:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002918:	2312      	movs	r3, #18
 800291a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800291c:	2301      	movs	r3, #1
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002924:	2304      	movs	r3, #4
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	4619      	mov	r1, r3
 800292e:	481b      	ldr	r0, [pc, #108]	; (800299c <MX_GPIO_Init+0x2ec>)
 8002930:	f003 f88e 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8002934:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293a:	2301      	movs	r3, #1
 800293c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	f107 031c 	add.w	r3, r7, #28
 800294a:	4619      	mov	r1, r3
 800294c:	4813      	ldr	r0, [pc, #76]	; (800299c <MX_GPIO_Init+0x2ec>)
 800294e:	f003 f87f 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8002952:	2301      	movs	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	4619      	mov	r1, r3
 8002964:	480a      	ldr	r0, [pc, #40]	; (8002990 <MX_GPIO_Init+0x2e0>)
 8002966:	f003 f873 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800296a:	2302      	movs	r3, #2
 800296c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800296e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	4619      	mov	r1, r3
 800297e:	4804      	ldr	r0, [pc, #16]	; (8002990 <MX_GPIO_Init+0x2e0>)
 8002980:	f003 f866 	bl	8005a50 <HAL_GPIO_Init>

}
 8002984:	bf00      	nop
 8002986:	3730      	adds	r7, #48	; 0x30
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	40021000 	.word	0x40021000
 8002994:	40020800 	.word	0x40020800
 8002998:	40020c00 	.word	0x40020c00
 800299c:	40020400 	.word	0x40020400
 80029a0:	40020000 	.word	0x40020000

080029a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80029ac:	f00e f8ba 	bl	8010b24 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 80029b0:	200a      	movs	r0, #10
 80029b2:	f00a fef3 	bl	800d79c <osDelay>
 80029b6:	e7fb      	b.n	80029b0 <StartDefaultTask+0xc>

080029b8 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80029be:	af00      	add	r7, sp, #0
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 80029c4:	f241 3088 	movw	r0, #5000	; 0x1388
 80029c8:	f00a fee8 	bl	800d79c <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 80029cc:	4a90      	ldr	r2, [pc, #576]	; (8002c10 <Start_Show_Resources+0x258>)
 80029ce:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	4611      	mov	r1, r2
 80029d6:	8019      	strh	r1, [r3, #0]
 80029d8:	3302      	adds	r3, #2
 80029da:	0c12      	lsrs	r2, r2, #16
 80029dc:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 80029de:	232d      	movs	r3, #45	; 0x2d
 80029e0:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  char buff[10] = {0};
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 80029ea:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 80029f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f00e ff03 	bl	801180a <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8002a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fbe1 	bl	80001d0 <strlen>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a16:	4413      	add	r3, r2
 8002a18:	4a7e      	ldr	r2, [pc, #504]	; (8002c14 <Start_Show_Resources+0x25c>)
 8002a1a:	461d      	mov	r5, r3
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a20:	6028      	str	r0, [r5, #0]
 8002a22:	6069      	str	r1, [r5, #4]
 8002a24:	60aa      	str	r2, [r5, #8]
 8002a26:	60eb      	str	r3, [r5, #12]
 8002a28:	cc03      	ldmia	r4!, {r0, r1}
 8002a2a:	6128      	str	r0, [r5, #16]
 8002a2c:	6169      	str	r1, [r5, #20]
 8002a2e:	7823      	ldrb	r3, [r4, #0]
 8002a30:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8002a32:	f00d ffaf 	bl	8010994 <xPortGetFreeHeapSize>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b77      	ldr	r3, [pc, #476]	; (8002c18 <Start_Show_Resources+0x260>)
 8002a3c:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8002a3e:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <Start_Show_Resources+0x260>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002a46:	220a      	movs	r2, #10
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f00e fecb 	bl	80117e4 <itoa>
	  strcat(msg.Buf, buff);
 8002a4e:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8002a52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f00f fc80 	bl	801235e <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8002a5e:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8002a62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00f fc78 	bl	801235e <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 8002a6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fbac 	bl	80001d0 <strlen>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a80:	4413      	add	r3, r2
 8002a82:	4a66      	ldr	r2, [pc, #408]	; (8002c1c <Start_Show_Resources+0x264>)
 8002a84:	4614      	mov	r4, r2
 8002a86:	469c      	mov	ip, r3
 8002a88:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002a8c:	4665      	mov	r5, ip
 8002a8e:	4626      	mov	r6, r4
 8002a90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a92:	6028      	str	r0, [r5, #0]
 8002a94:	6069      	str	r1, [r5, #4]
 8002a96:	60aa      	str	r2, [r5, #8]
 8002a98:	60eb      	str	r3, [r5, #12]
 8002a9a:	3410      	adds	r4, #16
 8002a9c:	f10c 0c10 	add.w	ip, ip, #16
 8002aa0:	4574      	cmp	r4, lr
 8002aa2:	d1f3      	bne.n	8002a8c <Start_Show_Resources+0xd4>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8002aa4:	485e      	ldr	r0, [pc, #376]	; (8002c20 <Start_Show_Resources+0x268>)
 8002aa6:	f00c ff3d 	bl	800f924 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8002ab0:	e004      	b.n	8002abc <Start_Show_Resources+0x104>
	  {
	  	buffer_size ++;
 8002ab2:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8002abc:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002ac0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f3      	bne.n	8002ab2 <Start_Show_Resources+0xfa>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002ad6:	e011      	b.n	8002afc <Start_Show_Resources+0x144>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002ad8:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002adc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002ae0:	4413      	add	r3, r2
 8002ae2:	494f      	ldr	r1, [pc, #316]	; (8002c20 <Start_Show_Resources+0x268>)
 8002ae4:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8002ae8:	440a      	add	r2, r1
 8002aea:	7811      	ldrb	r1, [r2, #0]
 8002aec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002af0:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002af2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002af6:	3301      	adds	r3, #1
 8002af8:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002afc:	4a48      	ldr	r2, [pc, #288]	; (8002c20 <Start_Show_Resources+0x268>)
 8002afe:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002b02:	4413      	add	r3, r2
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e6      	bne.n	8002ad8 <Start_Show_Resources+0x120>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8002b0a:	4b46      	ldr	r3, [pc, #280]	; (8002c24 <Start_Show_Resources+0x26c>)
 8002b0c:	f207 4434 	addw	r4, r7, #1076	; 0x434
 8002b10:	461d      	mov	r5, r3
 8002b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b1a:	c403      	stmia	r4!, {r0, r1}
 8002b1c:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	4a41      	ldr	r2, [pc, #260]	; (8002c28 <Start_Show_Resources+0x270>)
 8002b24:	461c      	mov	r4, r3
 8002b26:	4615      	mov	r5, r2
 8002b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b34:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 8002b38:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8002b3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f00f fc0b 	bl	801235e <strcat>
	  strcat(msg.Buf, str_head_2);
 8002b48:	f107 020c 	add.w	r2, r7, #12
 8002b4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f00f fc03 	bl	801235e <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8002b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4830      	ldr	r0, [pc, #192]	; (8002c20 <Start_Show_Resources+0x268>)
 8002b60:	f00e fe53 	bl	801180a <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8002b64:	482e      	ldr	r0, [pc, #184]	; (8002c20 <Start_Show_Resources+0x268>)
 8002b66:	f00c ff73 	bl	800fa50 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 8002b6a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002b74:	4413      	add	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3340      	adds	r3, #64	; 0x40
 8002b7a:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002b84:	e011      	b.n	8002baa <Start_Show_Resources+0x1f2>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002b86:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002b8a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002b8e:	4413      	add	r3, r2
 8002b90:	4923      	ldr	r1, [pc, #140]	; (8002c20 <Start_Show_Resources+0x268>)
 8002b92:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8002b96:	440a      	add	r2, r1
 8002b98:	7811      	ldrb	r1, [r2, #0]
 8002b9a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b9e:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002ba0:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002baa:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <Start_Show_Resources+0x268>)
 8002bac:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002bb0:	4413      	add	r3, r2
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e6      	bne.n	8002b86 <Start_Show_Resources+0x1ce>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8002bb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fb07 	bl	80001d0 <strlen>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <Start_Show_Resources+0x274>)
 8002bce:	4614      	mov	r4, r2
 8002bd0:	469c      	mov	ip, r3
 8002bd2:	f104 0e20 	add.w	lr, r4, #32
 8002bd6:	4665      	mov	r5, ip
 8002bd8:	4626      	mov	r6, r4
 8002bda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002bdc:	6028      	str	r0, [r5, #0]
 8002bde:	6069      	str	r1, [r5, #4]
 8002be0:	60aa      	str	r2, [r5, #8]
 8002be2:	60eb      	str	r3, [r5, #12]
 8002be4:	3410      	adds	r4, #16
 8002be6:	f10c 0c10 	add.w	ip, ip, #16
 8002bea:	4574      	cmp	r4, lr
 8002bec:	d1f3      	bne.n	8002bd6 <Start_Show_Resources+0x21e>
 8002bee:	4665      	mov	r5, ip
 8002bf0:	4623      	mov	r3, r4
 8002bf2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002bf4:	6028      	str	r0, [r5, #0]
 8002bf6:	6069      	str	r1, [r5, #4]
 8002bf8:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <Start_Show_Resources+0x278>)
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c06:	2200      	movs	r2, #0
 8002c08:	f00a fe56 	bl	800d8b8 <osMessageQueuePut>
  {
 8002c0c:	e6da      	b.n	80029c4 <Start_Show_Resources+0xc>
 8002c0e:	bf00      	nop
 8002c10:	080145ac 	.word	0x080145ac
 8002c14:	08014530 	.word	0x08014530
 8002c18:	20002798 	.word	0x20002798
 8002c1c:	0801454c 	.word	0x0801454c
 8002c20:	200023b0 	.word	0x200023b0
 8002c24:	080145b0 	.word	0x080145b0
 8002c28:	080145cc 	.word	0x080145cc
 8002c2c:	08014580 	.word	0x08014580
 8002c30:	200081dc 	.word	0x200081dc

08002c34 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <Start_UART_Task+0x58>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	f107 010c 	add.w	r1, r7, #12
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f00a fe93 	bl	800d978 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002c58:	e004      	b.n	8002c64 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8002c5a:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002c64:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002c68:	f107 020c 	add.w	r2, r7, #12
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f3      	bne.n	8002c5a <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8002c72:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8002c76:	f107 030c 	add.w	r3, r7, #12
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f00e f80f 	bl	8010ca0 <CDC_Transmit_FS>
    osDelay(1);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f00a fd8a 	bl	800d79c <osDelay>
  {
 8002c88:	e7da      	b.n	8002c40 <Start_UART_Task+0xc>
 8002c8a:	bf00      	nop
 8002c8c:	200081dc 	.word	0x200081dc

08002c90 <Start_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD */
void Start_LCD(void *argument)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD */
  /* Infinite loop */

	// Init LCD
	TFT9341_ini(240, 320);
 8002c98:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002c9c:	20f0      	movs	r0, #240	; 0xf0
 8002c9e:	f7fe faf3 	bl	8001288 <TFT9341_ini>
	TFT9341_SetRotation(3);
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	f7fe fe58 	bl	8001958 <TFT9341_SetRotation>
	TFT9341_SetTextColor(TFT9341_WHITE);
 8002ca8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cac:	f7fe fd10 	bl	80016d0 <TFT9341_SetTextColor>
	TFT9341_SetBackColor(TFT9341_BLUE);
 8002cb0:	201f      	movs	r0, #31
 8002cb2:	f7fe fd1d 	bl	80016f0 <TFT9341_SetBackColor>
	TFT9341_FillScreen(TFT9341_BLUE);
 8002cb6:	201f      	movs	r0, #31
 8002cb8:	f7fe fcb4 	bl	8001624 <TFT9341_FillScreen>

	// Init names sensors
	TFT9341_String_DMA(2,30, "TEST ");
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <Start_LCD+0x40>)
 8002cbe:	211e      	movs	r1, #30
 8002cc0:	2002      	movs	r0, #2
 8002cc2:	f7fe fe25 	bl	8001910 <TFT9341_String_DMA>
	{




		osDelay(1000);
 8002cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cca:	f00a fd67 	bl	800d79c <osDelay>
 8002cce:	e7fa      	b.n	8002cc6 <Start_LCD+0x36>
 8002cd0:	080145f4 	.word	0x080145f4

08002cd4 <Start_LCD_touchscreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD_touchscreen */
void Start_LCD_touchscreen(void *argument)
{
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b0b2      	sub	sp, #200	; 0xc8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD_touchscreen */
  /* Infinite loop */
	LCDQUEUE msg;												// Make QUEUE
	memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002cdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002ce0:	2264      	movs	r2, #100	; 0x64
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f00e fd90 	bl	801180a <memset>
	char buffer[50] = {0};
 8002cea:	2300      	movs	r3, #0
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cf2:	222e      	movs	r2, #46	; 0x2e
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f00e fd87 	bl	801180a <memset>

	for(;;)
  	 {
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002cfc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d00:	2264      	movs	r2, #100	; 0x64
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f00e fd80 	bl	801180a <memset>
	  //СЕНСОР ЕКРАНУ
	  if(TP_Touchpad_Pressed() == TOUCHPAD_PRESSED)
 8002d0a:	f7fe fa27 	bl	800115c <TP_Touchpad_Pressed>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 8091 	bne.w	8002e38 <Start_LCD_touchscreen+0x164>
	  {
		  strcat(buffer, "PRESED ");
 8002d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fa58 	bl	80001d0 <strlen>
 8002d20:	4603      	mov	r3, r0
 8002d22:	461a      	mov	r2, r3
 8002d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d28:	4413      	add	r3, r2
 8002d2a:	495e      	ldr	r1, [pc, #376]	; (8002ea4 <Start_LCD_touchscreen+0x1d0>)
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	460b      	mov	r3, r1
 8002d30:	cb03      	ldmia	r3!, {r0, r1}
 8002d32:	6010      	str	r0, [r2, #0]
 8002d34:	6051      	str	r1, [r2, #4]

		  uint16_t x_and_y[2] = {0};
 8002d36:	2300      	movs	r3, #0
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
		  uint8_t status_ts = TP_Read_Coordinates(x_and_y);
 8002d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe f936 	bl	8000fb0 <TP_Read_Coordinates>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		  if(status_ts == TOUCHPAD_DATA_OK)
 8002d4a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	f040 808c 	bne.w	8002e6c <Start_LCD_touchscreen+0x198>
		  {
			  // Convert coordinate from uint16_t format in string format
			  // And save it in main buffer
			  char buff_x_coordinates[6] = {0};
 8002d54:	2300      	movs	r3, #0
 8002d56:	623b      	str	r3, [r7, #32]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	84bb      	strh	r3, [r7, #36]	; 0x24
			  char buff_y_coordinates[6] = {0};
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	2300      	movs	r3, #0
 8002d62:	83bb      	strh	r3, [r7, #28]
			  char buff_coordinates[15] = {0};
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	f8c3 2007 	str.w	r2, [r3, #7]

			  strcat(buff_x_coordinates, "x: ");
 8002d76:	f107 0320 	add.w	r3, r7, #32
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd fa28 	bl	80001d0 <strlen>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	f107 0320 	add.w	r3, r7, #32
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a47      	ldr	r2, [pc, #284]	; (8002ea8 <Start_LCD_touchscreen+0x1d4>)
 8002d8c:	6810      	ldr	r0, [r2, #0]
 8002d8e:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[0], buff_x_coordinates, 10);
 8002d90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d92:	4618      	mov	r0, r3
 8002d94:	f107 0320 	add.w	r3, r7, #32
 8002d98:	220a      	movs	r2, #10
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f00e fd22 	bl	80117e4 <itoa>
			  strcat(buff_x_coordinates, " ");
 8002da0:	f107 0320 	add.w	r3, r7, #32
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fa13 	bl	80001d0 <strlen>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461a      	mov	r2, r3
 8002dae:	f107 0320 	add.w	r3, r7, #32
 8002db2:	4413      	add	r3, r2
 8002db4:	493d      	ldr	r1, [pc, #244]	; (8002eac <Start_LCD_touchscreen+0x1d8>)
 8002db6:	461a      	mov	r2, r3
 8002db8:	460b      	mov	r3, r1
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	8013      	strh	r3, [r2, #0]

			  strcat(buff_y_coordinates, "y: ");
 8002dbe:	f107 0318 	add.w	r3, r7, #24
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fa04 	bl	80001d0 <strlen>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f107 0318 	add.w	r3, r7, #24
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a37      	ldr	r2, [pc, #220]	; (8002eb0 <Start_LCD_touchscreen+0x1dc>)
 8002dd4:	6810      	ldr	r0, [r2, #0]
 8002dd6:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[1], buff_y_coordinates, 10);
 8002dd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f107 0318 	add.w	r3, r7, #24
 8002de0:	220a      	movs	r2, #10
 8002de2:	4619      	mov	r1, r3
 8002de4:	f00e fcfe 	bl	80117e4 <itoa>
			  strcat(buff_y_coordinates, " ");
 8002de8:	f107 0318 	add.w	r3, r7, #24
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd f9ef 	bl	80001d0 <strlen>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	f107 0318 	add.w	r3, r7, #24
 8002dfa:	4413      	add	r3, r2
 8002dfc:	492b      	ldr	r1, [pc, #172]	; (8002eac <Start_LCD_touchscreen+0x1d8>)
 8002dfe:	461a      	mov	r2, r3
 8002e00:	460b      	mov	r3, r1
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	8013      	strh	r3, [r2, #0]

			  strcat(buff_coordinates, buff_x_coordinates);
 8002e06:	f107 0220 	add.w	r2, r7, #32
 8002e0a:	f107 0308 	add.w	r3, r7, #8
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f00f faa4 	bl	801235e <strcat>
			  strcat(buff_coordinates, buff_y_coordinates);
 8002e16:	f107 0218 	add.w	r2, r7, #24
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f00f fa9c 	bl	801235e <strcat>
			  strcat(buffer, buff_coordinates);
 8002e26:	f107 0208 	add.w	r2, r7, #8
 8002e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f00f fa94 	bl	801235e <strcat>
 8002e36:	e019      	b.n	8002e6c <Start_LCD_touchscreen+0x198>
		  }
	  }
	  else
	  {
		  strcat(buffer, "NO PRESS                  ");
 8002e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd f9c7 	bl	80001d0 <strlen>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <Start_LCD_touchscreen+0x1e0>)
 8002e4e:	461d      	mov	r5, r3
 8002e50:	4614      	mov	r4, r2
 8002e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e54:	6028      	str	r0, [r5, #0]
 8002e56:	6069      	str	r1, [r5, #4]
 8002e58:	60aa      	str	r2, [r5, #8]
 8002e5a:	60eb      	str	r3, [r5, #12]
 8002e5c:	cc03      	ldmia	r4!, {r0, r1}
 8002e5e:	6128      	str	r0, [r5, #16]
 8002e60:	6169      	str	r1, [r5, #20]
 8002e62:	8823      	ldrh	r3, [r4, #0]
 8002e64:	78a2      	ldrb	r2, [r4, #2]
 8002e66:	832b      	strh	r3, [r5, #24]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	76ab      	strb	r3, [r5, #26]
	  }

	  strcat(msg.buff, buffer);
 8002e6c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002e70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f00f fa71 	bl	801235e <strcat>
	  osMessageQueuePut(LCDQueueHandle, &msg, 0, osWaitForever);  	// Write data on queue (In will print on StartUART_Task task)
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <Start_LCD_touchscreen+0x1e4>)
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f00a fd15 	bl	800d8b8 <osMessageQueuePut>
	  memset(buffer, 0, sizeof(buffer));
 8002e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e92:	2232      	movs	r2, #50	; 0x32
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f00e fcb7 	bl	801180a <memset>

	  osDelay(200);
 8002e9c:	20c8      	movs	r0, #200	; 0xc8
 8002e9e:	f00a fc7d 	bl	800d79c <osDelay>
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002ea2:	e72b      	b.n	8002cfc <Start_LCD_touchscreen+0x28>
 8002ea4:	080145fc 	.word	0x080145fc
 8002ea8:	08014604 	.word	0x08014604
 8002eac:	08014608 	.word	0x08014608
 8002eb0:	0801460c 	.word	0x0801460c
 8002eb4:	08014610 	.word	0x08014610
 8002eb8:	2000c364 	.word	0x2000c364

08002ebc <Start_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RTC */
void Start_RTC(void *argument)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b0a1      	sub	sp, #132	; 0x84
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RTC */
  /* Infinite loop */
	osDelay(1000);
 8002ec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ec8:	f00a fc68 	bl	800d79c <osDelay>
	oled_init();
 8002ecc:	f001 fce8 	bl	80048a0 <oled_init>
	oled_update();
 8002ed0:	f001 fc92 	bl	80047f8 <oled_update>

	#define DEVICE_FOUND 0

	ds3231_I2C_init();
 8002ed4:	f7fe fe12 	bl	8001afc <ds3231_I2C_init>

	  // Encoder /////////////////////////////////////////
	  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002ed8:	213c      	movs	r1, #60	; 0x3c
 8002eda:	48be      	ldr	r0, [pc, #760]	; (80031d4 <Start_RTC+0x318>)
 8002edc:	f006 febe 	bl	8009c5c <HAL_TIM_Encoder_Start>
	  int32_t prevCounter = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
	  ////////////////////////////////////////////////////

	for(;;)
	{
		// 1. Set time
		bool set_time = false;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		bool exit_from_set_time = false;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

		uint8_t clik = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		char klik_buf[3] = {0};
 8002ef6:	4bb8      	ldr	r3, [pc, #736]	; (80031d8 <Start_RTC+0x31c>)
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)	// If button pressed
 8002f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f08:	48b4      	ldr	r0, [pc, #720]	; (80031dc <Start_RTC+0x320>)
 8002f0a:	f003 f839 	bl	8005f80 <HAL_GPIO_ReadPin>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f040 8373 	bne.w	80035fc <Start_RTC+0x740>
		{
			clik = 1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				do{
					int currCounter = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	673b      	str	r3, [r7, #112]	; 0x70

					switch (clik)
 8002f20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002f24:	3b01      	subs	r3, #1
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	f200 835e 	bhi.w	80035e8 <Start_RTC+0x72c>
 8002f2c:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <Start_RTC+0x78>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f51 	.word	0x08002f51
 8002f38:	08003027 	.word	0x08003027
 8002f3c:	080030fd 	.word	0x080030fd
 8002f40:	080031f9 	.word	0x080031f9
 8002f44:	080032cf 	.word	0x080032cf
 8002f48:	080033a5 	.word	0x080033a5
 8002f4c:	0800349d 	.word	0x0800349d
					{
						case 1:
							// set the yers
							currCounter = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	673b      	str	r3, [r7, #112]	; 0x70
							prevCounter = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	66fb      	str	r3, [r7, #108]	; 0x6c

							graphics_text(0, 0, 1, "   SET:");
 8002f58:	4ba1      	ldr	r3, [pc, #644]	; (80031e0 <Start_RTC+0x324>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f001 fb96 	bl	8004690 <graphics_text>
							graphics_text(0, 8, 1, "YEAR   ");
 8002f64:	4b9f      	ldr	r3, [pc, #636]	; (80031e4 <Start_RTC+0x328>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	2108      	movs	r1, #8
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f001 fb90 	bl	8004690 <graphics_text>
							oled_update();
 8002f70:	f001 fc42 	bl	80047f8 <oled_update>

							osDelay(500);
 8002f74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f78:	f00a fc10 	bl	800d79c <osDelay>

							__HAL_TIM_SET_COUNTER(&htim1, 10);
 8002f7c:	4b95      	ldr	r3, [pc, #596]	; (80031d4 <Start_RTC+0x318>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	220a      	movs	r2, #10
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

							while(1)
							{
								currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002f84:	4b93      	ldr	r3, [pc, #588]	; (80031d4 <Start_RTC+0x318>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	673b      	str	r3, [r7, #112]	; 0x70
								currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	0fda      	lsrs	r2, r3, #31
 8002f94:	4413      	add	r3, r2
 8002f96:	105b      	asrs	r3, r3, #1
 8002f98:	425b      	negs	r3, r3
 8002f9a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002f9e:	337f      	adds	r3, #127	; 0x7f
 8002fa0:	673b      	str	r3, [r7, #112]	; 0x70
								if(currCounter != prevCounter)
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d02a      	beq.n	8003000 <Start_RTC+0x144>
								{
									prevCounter = currCounter;
 8002faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fac:	66fb      	str	r3, [r7, #108]	; 0x6c
									if(prevCounter < 10)
 8002fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb0:	2b09      	cmp	r3, #9
 8002fb2:	dc01      	bgt.n	8002fb8 <Start_RTC+0xfc>
									{
										prevCounter = 10;
 8002fb4:	230a      	movs	r3, #10
 8002fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
										//_HAL_TIM_SET_COUNTER(&htim1, 10);
									}
									if(prevCounter > 99)
 8002fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fba:	2b63      	cmp	r3, #99	; 0x63
 8002fbc:	dd01      	ble.n	8002fc2 <Start_RTC+0x106>
									{
										prevCounter = 99;
 8002fbe:	2363      	movs	r3, #99	; 0x63
 8002fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
										//__HAL_TIM_SET_COUNTER(&htim1, 99);
									}

									graphics_text(0, 16, 1, "         ");
 8002fc2:	4b89      	ldr	r3, [pc, #548]	; (80031e8 <Start_RTC+0x32c>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2110      	movs	r1, #16
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f001 fb61 	bl	8004690 <graphics_text>
 									oled_update();
 8002fce:	f001 fc13 	bl	80047f8 <oled_update>

									sprintf(klik_buf, "%d", prevCounter);
 8002fd2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fd4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002fd8:	4984      	ldr	r1, [pc, #528]	; (80031ec <Start_RTC+0x330>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f00f f95c 	bl	8012298 <siprintf>
									graphics_text(0, 16, 1, klik_buf);
 8002fe0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f001 fb51 	bl	8004690 <graphics_text>
									oled_update();
 8002fee:	f001 fc03 	bl	80047f8 <oled_update>
									memset(klik_buf, 0, sizeof(klik_buf));
 8002ff2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f00e fc05 	bl	801180a <memset>
								}
								if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)
 8003000:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003004:	4875      	ldr	r0, [pc, #468]	; (80031dc <Start_RTC+0x320>)
 8003006:	f002 ffbb 	bl	8005f80 <HAL_GPIO_ReadPin>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1b9      	bne.n	8002f84 <Start_RTC+0xc8>
								{
																		// write data
									ds3231_set(DS3231_REGISTER_YEAR_DEFAULT, &prevCounter);
 8003010:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003014:	4619      	mov	r1, r3
 8003016:	2006      	movs	r0, #6
 8003018:	f7fe fe38 	bl	8001c8c <ds3231_set>
									clik = 2;
 800301c:	2302      	movs	r3, #2
 800301e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
									break;
 8003022:	bf00      	nop
								}
							}

						break;
 8003024:	e2e0      	b.n	80035e8 <Start_RTC+0x72c>

						case 2:
							// set mounth
							currCounter = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	673b      	str	r3, [r7, #112]	; 0x70
							prevCounter = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	66fb      	str	r3, [r7, #108]	; 0x6c

							graphics_text(0, 0, 1, "   SET:");
 800302e:	4b6c      	ldr	r3, [pc, #432]	; (80031e0 <Start_RTC+0x324>)
 8003030:	2201      	movs	r2, #1
 8003032:	2100      	movs	r1, #0
 8003034:	2000      	movs	r0, #0
 8003036:	f001 fb2b 	bl	8004690 <graphics_text>
							graphics_text(0, 8, 1, "MONTH ");
 800303a:	4b6d      	ldr	r3, [pc, #436]	; (80031f0 <Start_RTC+0x334>)
 800303c:	2201      	movs	r2, #1
 800303e:	2108      	movs	r1, #8
 8003040:	2000      	movs	r0, #0
 8003042:	f001 fb25 	bl	8004690 <graphics_text>
							oled_update();
 8003046:	f001 fbd7 	bl	80047f8 <oled_update>

							__HAL_TIM_SET_COUNTER(&htim1, 1);
 800304a:	4b62      	ldr	r3, [pc, #392]	; (80031d4 <Start_RTC+0x318>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2201      	movs	r2, #1
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

							osDelay(500);
 8003052:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003056:	f00a fba1 	bl	800d79c <osDelay>
							while(1)
							{
								currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800305a:	4b5e      	ldr	r3, [pc, #376]	; (80031d4 <Start_RTC+0x318>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	673b      	str	r3, [r7, #112]	; 0x70
								currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8003062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003064:	3b01      	subs	r3, #1
 8003066:	b29b      	uxth	r3, r3
 8003068:	0fda      	lsrs	r2, r3, #31
 800306a:	4413      	add	r3, r2
 800306c:	105b      	asrs	r3, r3, #1
 800306e:	425b      	negs	r3, r3
 8003070:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003074:	337f      	adds	r3, #127	; 0x7f
 8003076:	673b      	str	r3, [r7, #112]	; 0x70
								if(currCounter != prevCounter)
 8003078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800307c:	429a      	cmp	r2, r3
 800307e:	d02a      	beq.n	80030d6 <Start_RTC+0x21a>
								{
									prevCounter = currCounter;
 8003080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003082:	66fb      	str	r3, [r7, #108]	; 0x6c
									if(prevCounter <= 0)
 8003084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003086:	2b00      	cmp	r3, #0
 8003088:	dc01      	bgt.n	800308e <Start_RTC+0x1d2>
									{
										prevCounter = 1;
 800308a:	2301      	movs	r3, #1
 800308c:	66fb      	str	r3, [r7, #108]	; 0x6c
									}
									if(prevCounter > 12)
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	2b0c      	cmp	r3, #12
 8003092:	dd01      	ble.n	8003098 <Start_RTC+0x1dc>
									{
										prevCounter = 12;
 8003094:	230c      	movs	r3, #12
 8003096:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									graphics_text(0, 16, 1, "         ");
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <Start_RTC+0x32c>)
 800309a:	2201      	movs	r2, #1
 800309c:	2110      	movs	r1, #16
 800309e:	2000      	movs	r0, #0
 80030a0:	f001 faf6 	bl	8004690 <graphics_text>
 									oled_update();
 80030a4:	f001 fba8 	bl	80047f8 <oled_update>

									sprintf(klik_buf, "%d", prevCounter);
 80030a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030ae:	494f      	ldr	r1, [pc, #316]	; (80031ec <Start_RTC+0x330>)
 80030b0:	4618      	mov	r0, r3
 80030b2:	f00f f8f1 	bl	8012298 <siprintf>
									graphics_text(0, 16, 1, klik_buf);
 80030b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030ba:	2201      	movs	r2, #1
 80030bc:	2110      	movs	r1, #16
 80030be:	2000      	movs	r0, #0
 80030c0:	f001 fae6 	bl	8004690 <graphics_text>
									oled_update();
 80030c4:	f001 fb98 	bl	80047f8 <oled_update>
									memset(klik_buf, 0, sizeof(klik_buf));
 80030c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030cc:	2203      	movs	r2, #3
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f00e fb9a 	bl	801180a <memset>
								}
								if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)
 80030d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030da:	4840      	ldr	r0, [pc, #256]	; (80031dc <Start_RTC+0x320>)
 80030dc:	f002 ff50 	bl	8005f80 <HAL_GPIO_ReadPin>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1b9      	bne.n	800305a <Start_RTC+0x19e>
								{
									// write data
									ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 80030e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030ea:	4619      	mov	r1, r3
 80030ec:	2005      	movs	r0, #5
 80030ee:	f7fe fdcd 	bl	8001c8c <ds3231_set>
									clik = 3;
 80030f2:	2303      	movs	r3, #3
 80030f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
									break;
 80030f8:	bf00      	nop
								}
							}
						break;
 80030fa:	e275      	b.n	80035e8 <Start_RTC+0x72c>

						case 3:
							// set date
							currCounter = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	673b      	str	r3, [r7, #112]	; 0x70
							prevCounter = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	66fb      	str	r3, [r7, #108]	; 0x6c

							graphics_text(0, 0, 1, "   SET:");
 8003104:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <Start_RTC+0x324>)
 8003106:	2201      	movs	r2, #1
 8003108:	2100      	movs	r1, #0
 800310a:	2000      	movs	r0, #0
 800310c:	f001 fac0 	bl	8004690 <graphics_text>
							graphics_text(0, 8, 1, "DATE    ");
 8003110:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <Start_RTC+0x338>)
 8003112:	2201      	movs	r2, #1
 8003114:	2108      	movs	r1, #8
 8003116:	2000      	movs	r0, #0
 8003118:	f001 faba 	bl	8004690 <graphics_text>
							oled_update();
 800311c:	f001 fb6c 	bl	80047f8 <oled_update>

							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8003120:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <Start_RTC+0x318>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	625a      	str	r2, [r3, #36]	; 0x24

							osDelay(500);
 8003128:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800312c:	f00a fb36 	bl	800d79c <osDelay>
							while(1)
							{
								currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8003130:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <Start_RTC+0x318>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	673b      	str	r3, [r7, #112]	; 0x70
								currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8003138:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800313a:	3b01      	subs	r3, #1
 800313c:	b29b      	uxth	r3, r3
 800313e:	0fda      	lsrs	r2, r3, #31
 8003140:	4413      	add	r3, r2
 8003142:	105b      	asrs	r3, r3, #1
 8003144:	425b      	negs	r3, r3
 8003146:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800314a:	337f      	adds	r3, #127	; 0x7f
 800314c:	673b      	str	r3, [r7, #112]	; 0x70
								if(currCounter != prevCounter)
 800314e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003150:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003152:	429a      	cmp	r2, r3
 8003154:	d02a      	beq.n	80031ac <Start_RTC+0x2f0>
								{
									prevCounter = currCounter;
 8003156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003158:	66fb      	str	r3, [r7, #108]	; 0x6c
									if(prevCounter <= 0)
 800315a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315c:	2b00      	cmp	r3, #0
 800315e:	dc01      	bgt.n	8003164 <Start_RTC+0x2a8>
									{
										prevCounter = 1;
 8003160:	2301      	movs	r3, #1
 8003162:	66fb      	str	r3, [r7, #108]	; 0x6c
									}
									if(prevCounter > 31)
 8003164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003166:	2b1f      	cmp	r3, #31
 8003168:	dd01      	ble.n	800316e <Start_RTC+0x2b2>
									{
										prevCounter = 1;
 800316a:	2301      	movs	r3, #1
 800316c:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									graphics_text(0, 16, 1, "         ");
 800316e:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <Start_RTC+0x32c>)
 8003170:	2201      	movs	r2, #1
 8003172:	2110      	movs	r1, #16
 8003174:	2000      	movs	r0, #0
 8003176:	f001 fa8b 	bl	8004690 <graphics_text>
 									oled_update();
 800317a:	f001 fb3d 	bl	80047f8 <oled_update>

									sprintf(klik_buf, "%d", prevCounter);
 800317e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003180:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003184:	4919      	ldr	r1, [pc, #100]	; (80031ec <Start_RTC+0x330>)
 8003186:	4618      	mov	r0, r3
 8003188:	f00f f886 	bl	8012298 <siprintf>
									graphics_text(0, 16, 1, klik_buf);
 800318c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003190:	2201      	movs	r2, #1
 8003192:	2110      	movs	r1, #16
 8003194:	2000      	movs	r0, #0
 8003196:	f001 fa7b 	bl	8004690 <graphics_text>
									oled_update();
 800319a:	f001 fb2d 	bl	80047f8 <oled_update>
									memset(klik_buf, 0, sizeof(klik_buf));
 800319e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031a2:	2203      	movs	r2, #3
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f00e fb2f 	bl	801180a <memset>
								}
								if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)
 80031ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031b0:	480a      	ldr	r0, [pc, #40]	; (80031dc <Start_RTC+0x320>)
 80031b2:	f002 fee5 	bl	8005f80 <HAL_GPIO_ReadPin>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1b9      	bne.n	8003130 <Start_RTC+0x274>
								{
									// write data
									ds3231_set(DS3231_REGISTER_DATE_DEFAULT, &prevCounter);
 80031bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031c0:	4619      	mov	r1, r3
 80031c2:	2004      	movs	r0, #4
 80031c4:	f7fe fd62 	bl	8001c8c <ds3231_set>
									clik = 4;
 80031c8:	2304      	movs	r3, #4
 80031ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
									break;
 80031ce:	bf00      	nop
								}
							}
						break;
 80031d0:	e20a      	b.n	80035e8 <Start_RTC+0x72c>
 80031d2:	bf00      	nop
 80031d4:	2000cb40 	.word	0x2000cb40
 80031d8:	08014718 	.word	0x08014718
 80031dc:	40021000 	.word	0x40021000
 80031e0:	0801462c 	.word	0x0801462c
 80031e4:	08014634 	.word	0x08014634
 80031e8:	0801463c 	.word	0x0801463c
 80031ec:	08014648 	.word	0x08014648
 80031f0:	0801464c 	.word	0x0801464c
 80031f4:	08014654 	.word	0x08014654

						case 4:
							// set day of week
							currCounter = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	673b      	str	r3, [r7, #112]	; 0x70
							prevCounter = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	66fb      	str	r3, [r7, #108]	; 0x6c

							graphics_text(0, 0, 1, "   SET:");
 8003200:	4b9e      	ldr	r3, [pc, #632]	; (800347c <Start_RTC+0x5c0>)
 8003202:	2201      	movs	r2, #1
 8003204:	2100      	movs	r1, #0
 8003206:	2000      	movs	r0, #0
 8003208:	f001 fa42 	bl	8004690 <graphics_text>
							graphics_text(0, 8, 1, "DAY      ");
 800320c:	4b9c      	ldr	r3, [pc, #624]	; (8003480 <Start_RTC+0x5c4>)
 800320e:	2201      	movs	r2, #1
 8003210:	2108      	movs	r1, #8
 8003212:	2000      	movs	r0, #0
 8003214:	f001 fa3c 	bl	8004690 <graphics_text>
							oled_update();
 8003218:	f001 faee 	bl	80047f8 <oled_update>

							__HAL_TIM_SET_COUNTER(&htim1, 1);
 800321c:	4b99      	ldr	r3, [pc, #612]	; (8003484 <Start_RTC+0x5c8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2201      	movs	r2, #1
 8003222:	625a      	str	r2, [r3, #36]	; 0x24

							osDelay(500);
 8003224:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003228:	f00a fab8 	bl	800d79c <osDelay>
							while(1)
							{
								currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800322c:	4b95      	ldr	r3, [pc, #596]	; (8003484 <Start_RTC+0x5c8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	673b      	str	r3, [r7, #112]	; 0x70
								currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8003234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003236:	3b01      	subs	r3, #1
 8003238:	b29b      	uxth	r3, r3
 800323a:	0fda      	lsrs	r2, r3, #31
 800323c:	4413      	add	r3, r2
 800323e:	105b      	asrs	r3, r3, #1
 8003240:	425b      	negs	r3, r3
 8003242:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003246:	337f      	adds	r3, #127	; 0x7f
 8003248:	673b      	str	r3, [r7, #112]	; 0x70
								if(currCounter != prevCounter)
 800324a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800324e:	429a      	cmp	r2, r3
 8003250:	d02a      	beq.n	80032a8 <Start_RTC+0x3ec>
								{
									prevCounter = currCounter;
 8003252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003254:	66fb      	str	r3, [r7, #108]	; 0x6c
									if(prevCounter <= 0)
 8003256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003258:	2b00      	cmp	r3, #0
 800325a:	dc01      	bgt.n	8003260 <Start_RTC+0x3a4>
									{
										prevCounter = 1;
 800325c:	2301      	movs	r3, #1
 800325e:	66fb      	str	r3, [r7, #108]	; 0x6c
									}
									if(prevCounter > 7)
 8003260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003262:	2b07      	cmp	r3, #7
 8003264:	dd01      	ble.n	800326a <Start_RTC+0x3ae>
									{
										prevCounter = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									graphics_text(0, 16, 1, "         ");
 800326a:	4b87      	ldr	r3, [pc, #540]	; (8003488 <Start_RTC+0x5cc>)
 800326c:	2201      	movs	r2, #1
 800326e:	2110      	movs	r1, #16
 8003270:	2000      	movs	r0, #0
 8003272:	f001 fa0d 	bl	8004690 <graphics_text>
 									oled_update();
 8003276:	f001 fabf 	bl	80047f8 <oled_update>

									sprintf(klik_buf, "%d", prevCounter);
 800327a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800327c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003280:	4982      	ldr	r1, [pc, #520]	; (800348c <Start_RTC+0x5d0>)
 8003282:	4618      	mov	r0, r3
 8003284:	f00f f808 	bl	8012298 <siprintf>
									graphics_text(0, 16, 1, klik_buf);
 8003288:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800328c:	2201      	movs	r2, #1
 800328e:	2110      	movs	r1, #16
 8003290:	2000      	movs	r0, #0
 8003292:	f001 f9fd 	bl	8004690 <graphics_text>
									oled_update();
 8003296:	f001 faaf 	bl	80047f8 <oled_update>
									memset(klik_buf, 0, sizeof(klik_buf));
 800329a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800329e:	2203      	movs	r2, #3
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f00e fab1 	bl	801180a <memset>
								}
								if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)
 80032a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032ac:	4878      	ldr	r0, [pc, #480]	; (8003490 <Start_RTC+0x5d4>)
 80032ae:	f002 fe67 	bl	8005f80 <HAL_GPIO_ReadPin>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1b9      	bne.n	800322c <Start_RTC+0x370>
								{
																// write data
									ds3231_set(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &prevCounter);
 80032b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032bc:	4619      	mov	r1, r3
 80032be:	2003      	movs	r0, #3
 80032c0:	f7fe fce4 	bl	8001c8c <ds3231_set>
									clik = 5;
 80032c4:	2305      	movs	r3, #5
 80032c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
									break;
 80032ca:	bf00      	nop
								}
							}

						break;
 80032cc:	e18c      	b.n	80035e8 <Start_RTC+0x72c>

						case 5:
							// set hours
							// set date
							currCounter = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	673b      	str	r3, [r7, #112]	; 0x70
							prevCounter = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	66fb      	str	r3, [r7, #108]	; 0x6c

							graphics_text(0, 0, 1, "   SET:");
 80032d6:	4b69      	ldr	r3, [pc, #420]	; (800347c <Start_RTC+0x5c0>)
 80032d8:	2201      	movs	r2, #1
 80032da:	2100      	movs	r1, #0
 80032dc:	2000      	movs	r0, #0
 80032de:	f001 f9d7 	bl	8004690 <graphics_text>
							graphics_text(0, 8, 1, "HOUR    ");
 80032e2:	4b6c      	ldr	r3, [pc, #432]	; (8003494 <Start_RTC+0x5d8>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	2108      	movs	r1, #8
 80032e8:	2000      	movs	r0, #0
 80032ea:	f001 f9d1 	bl	8004690 <graphics_text>
							oled_update();
 80032ee:	f001 fa83 	bl	80047f8 <oled_update>

							__HAL_TIM_SET_COUNTER(&htim1, 0);
 80032f2:	4b64      	ldr	r3, [pc, #400]	; (8003484 <Start_RTC+0x5c8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

							osDelay(500);
 80032fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032fe:	f00a fa4d 	bl	800d79c <osDelay>
							while(1)
							{
								currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8003302:	4b60      	ldr	r3, [pc, #384]	; (8003484 <Start_RTC+0x5c8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	673b      	str	r3, [r7, #112]	; 0x70
								currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 800330a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800330c:	3b01      	subs	r3, #1
 800330e:	b29b      	uxth	r3, r3
 8003310:	0fda      	lsrs	r2, r3, #31
 8003312:	4413      	add	r3, r2
 8003314:	105b      	asrs	r3, r3, #1
 8003316:	425b      	negs	r3, r3
 8003318:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800331c:	337f      	adds	r3, #127	; 0x7f
 800331e:	673b      	str	r3, [r7, #112]	; 0x70
								if(currCounter != prevCounter)
 8003320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003322:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003324:	429a      	cmp	r2, r3
 8003326:	d02a      	beq.n	800337e <Start_RTC+0x4c2>
								{
									prevCounter = currCounter;
 8003328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800332a:	66fb      	str	r3, [r7, #108]	; 0x6c
									if(prevCounter < 0)
 800332c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332e:	2b00      	cmp	r3, #0
 8003330:	da01      	bge.n	8003336 <Start_RTC+0x47a>
									{
										prevCounter = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	66fb      	str	r3, [r7, #108]	; 0x6c
									}
									if(prevCounter > 24)
 8003336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003338:	2b18      	cmp	r3, #24
 800333a:	dd01      	ble.n	8003340 <Start_RTC+0x484>
									{
										prevCounter = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									graphics_text(0, 16, 1, "         ");
 8003340:	4b51      	ldr	r3, [pc, #324]	; (8003488 <Start_RTC+0x5cc>)
 8003342:	2201      	movs	r2, #1
 8003344:	2110      	movs	r1, #16
 8003346:	2000      	movs	r0, #0
 8003348:	f001 f9a2 	bl	8004690 <graphics_text>
 									oled_update();
 800334c:	f001 fa54 	bl	80047f8 <oled_update>

									sprintf(klik_buf, "%d", prevCounter);
 8003350:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003352:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003356:	494d      	ldr	r1, [pc, #308]	; (800348c <Start_RTC+0x5d0>)
 8003358:	4618      	mov	r0, r3
 800335a:	f00e ff9d 	bl	8012298 <siprintf>
									graphics_text(0, 16, 1, klik_buf);
 800335e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003362:	2201      	movs	r2, #1
 8003364:	2110      	movs	r1, #16
 8003366:	2000      	movs	r0, #0
 8003368:	f001 f992 	bl	8004690 <graphics_text>
									oled_update();
 800336c:	f001 fa44 	bl	80047f8 <oled_update>
									memset(klik_buf, 0, sizeof(klik_buf));
 8003370:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003374:	2203      	movs	r2, #3
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f00e fa46 	bl	801180a <memset>
								}
								if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)
 800337e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003382:	4843      	ldr	r0, [pc, #268]	; (8003490 <Start_RTC+0x5d4>)
 8003384:	f002 fdfc 	bl	8005f80 <HAL_GPIO_ReadPin>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1b9      	bne.n	8003302 <Start_RTC+0x446>
								{
									// write data
									ds3231_set(DS3231_REGISTER_HOURS_DEFAULT, &prevCounter);
 800338e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003392:	4619      	mov	r1, r3
 8003394:	2002      	movs	r0, #2
 8003396:	f7fe fc79 	bl	8001c8c <ds3231_set>
									clik = 6;
 800339a:	2306      	movs	r3, #6
 800339c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
									break;
 80033a0:	bf00      	nop
								}
							}
						break;
 80033a2:	e121      	b.n	80035e8 <Start_RTC+0x72c>

						case 6:
							// set minutes
							// set hours
							// set date
							currCounter = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	673b      	str	r3, [r7, #112]	; 0x70
							prevCounter = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	66fb      	str	r3, [r7, #108]	; 0x6c

							graphics_text(0, 0, 1, "   SET:");
 80033ac:	4b33      	ldr	r3, [pc, #204]	; (800347c <Start_RTC+0x5c0>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	2100      	movs	r1, #0
 80033b2:	2000      	movs	r0, #0
 80033b4:	f001 f96c 	bl	8004690 <graphics_text>
							graphics_text(0, 8, 1, "MINUTE ");
 80033b8:	4b37      	ldr	r3, [pc, #220]	; (8003498 <Start_RTC+0x5dc>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	2108      	movs	r1, #8
 80033be:	2000      	movs	r0, #0
 80033c0:	f001 f966 	bl	8004690 <graphics_text>
							oled_update();
 80033c4:	f001 fa18 	bl	80047f8 <oled_update>

							__HAL_TIM_SET_COUNTER(&htim1, 0);
 80033c8:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <Start_RTC+0x5c8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2200      	movs	r2, #0
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

							osDelay(500);
 80033d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033d4:	f00a f9e2 	bl	800d79c <osDelay>
							while(1)
							{
								currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80033d8:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <Start_RTC+0x5c8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	673b      	str	r3, [r7, #112]	; 0x70
								currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80033e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	0fda      	lsrs	r2, r3, #31
 80033e8:	4413      	add	r3, r2
 80033ea:	105b      	asrs	r3, r3, #1
 80033ec:	425b      	negs	r3, r3
 80033ee:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80033f2:	337f      	adds	r3, #127	; 0x7f
 80033f4:	673b      	str	r3, [r7, #112]	; 0x70
								if(currCounter != prevCounter)
 80033f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d02a      	beq.n	8003454 <Start_RTC+0x598>
								{
									prevCounter = currCounter;
 80033fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003400:	66fb      	str	r3, [r7, #108]	; 0x6c
									if(prevCounter < 0)
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003404:	2b00      	cmp	r3, #0
 8003406:	da01      	bge.n	800340c <Start_RTC+0x550>
									{
										prevCounter = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	66fb      	str	r3, [r7, #108]	; 0x6c
									}
									if(prevCounter > 59)
 800340c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340e:	2b3b      	cmp	r3, #59	; 0x3b
 8003410:	dd01      	ble.n	8003416 <Start_RTC+0x55a>
									{
										prevCounter = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									graphics_text(0, 16, 1, "         ");
 8003416:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <Start_RTC+0x5cc>)
 8003418:	2201      	movs	r2, #1
 800341a:	2110      	movs	r1, #16
 800341c:	2000      	movs	r0, #0
 800341e:	f001 f937 	bl	8004690 <graphics_text>
 									oled_update();
 8003422:	f001 f9e9 	bl	80047f8 <oled_update>

									sprintf(klik_buf, "%d", prevCounter);
 8003426:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003428:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800342c:	4917      	ldr	r1, [pc, #92]	; (800348c <Start_RTC+0x5d0>)
 800342e:	4618      	mov	r0, r3
 8003430:	f00e ff32 	bl	8012298 <siprintf>
									graphics_text(0, 16, 1, klik_buf);
 8003434:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003438:	2201      	movs	r2, #1
 800343a:	2110      	movs	r1, #16
 800343c:	2000      	movs	r0, #0
 800343e:	f001 f927 	bl	8004690 <graphics_text>
									oled_update();
 8003442:	f001 f9d9 	bl	80047f8 <oled_update>
									memset(klik_buf, 0, sizeof(klik_buf));
 8003446:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800344a:	2203      	movs	r2, #3
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f00e f9db 	bl	801180a <memset>
								}
								if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)
 8003454:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003458:	480d      	ldr	r0, [pc, #52]	; (8003490 <Start_RTC+0x5d4>)
 800345a:	f002 fd91 	bl	8005f80 <HAL_GPIO_ReadPin>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1b9      	bne.n	80033d8 <Start_RTC+0x51c>
								{
									// write data
									ds3231_set(DS3231_REGISTER_MINUTES_DEFAULT, &prevCounter);
 8003464:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003468:	4619      	mov	r1, r3
 800346a:	2001      	movs	r0, #1
 800346c:	f7fe fc0e 	bl	8001c8c <ds3231_set>
									clik = 7;
 8003470:	2307      	movs	r3, #7
 8003472:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
									break;
 8003476:	bf00      	nop
								}
							}

						break;
 8003478:	e0b6      	b.n	80035e8 <Start_RTC+0x72c>
 800347a:	bf00      	nop
 800347c:	0801462c 	.word	0x0801462c
 8003480:	08014660 	.word	0x08014660
 8003484:	2000cb40 	.word	0x2000cb40
 8003488:	0801463c 	.word	0x0801463c
 800348c:	08014648 	.word	0x08014648
 8003490:	40021000 	.word	0x40021000
 8003494:	0801466c 	.word	0x0801466c
 8003498:	08014678 	.word	0x08014678

						case 7:
							// set seconds
							currCounter = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	673b      	str	r3, [r7, #112]	; 0x70
							prevCounter = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	66fb      	str	r3, [r7, #108]	; 0x6c

							graphics_text(0, 0, 1, "   SET:");
 80034a4:	4bd9      	ldr	r3, [pc, #868]	; (800380c <Start_RTC+0x950>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	2100      	movs	r1, #0
 80034aa:	2000      	movs	r0, #0
 80034ac:	f001 f8f0 	bl	8004690 <graphics_text>
							graphics_text(0, 8, 1, "SECOND   ");
 80034b0:	4bd7      	ldr	r3, [pc, #860]	; (8003810 <Start_RTC+0x954>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	2108      	movs	r1, #8
 80034b6:	2000      	movs	r0, #0
 80034b8:	f001 f8ea 	bl	8004690 <graphics_text>
							oled_update();
 80034bc:	f001 f99c 	bl	80047f8 <oled_update>

							__HAL_TIM_SET_COUNTER(&htim1, 1);
 80034c0:	4bd4      	ldr	r3, [pc, #848]	; (8003814 <Start_RTC+0x958>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2201      	movs	r2, #1
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24

							osDelay(500);
 80034c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034cc:	f00a f966 	bl	800d79c <osDelay>
							while(1)
							{
								currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80034d0:	4bd0      	ldr	r3, [pc, #832]	; (8003814 <Start_RTC+0x958>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	673b      	str	r3, [r7, #112]	; 0x70
								currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80034d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29b      	uxth	r3, r3
 80034de:	0fda      	lsrs	r2, r3, #31
 80034e0:	4413      	add	r3, r2
 80034e2:	105b      	asrs	r3, r3, #1
 80034e4:	425b      	negs	r3, r3
 80034e6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80034ea:	337f      	adds	r3, #127	; 0x7f
 80034ec:	673b      	str	r3, [r7, #112]	; 0x70
								if(currCounter != prevCounter)
 80034ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d02a      	beq.n	800354c <Start_RTC+0x690>
								{
									prevCounter = currCounter;
 80034f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f8:	66fb      	str	r3, [r7, #108]	; 0x6c
									if(prevCounter < 0)
 80034fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da01      	bge.n	8003504 <Start_RTC+0x648>
									{
										prevCounter = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	66fb      	str	r3, [r7, #108]	; 0x6c
									}
									if(prevCounter > 59)
 8003504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003506:	2b3b      	cmp	r3, #59	; 0x3b
 8003508:	dd01      	ble.n	800350e <Start_RTC+0x652>
									{
										prevCounter = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									graphics_text(0, 16, 1, "         ");
 800350e:	4bc2      	ldr	r3, [pc, #776]	; (8003818 <Start_RTC+0x95c>)
 8003510:	2201      	movs	r2, #1
 8003512:	2110      	movs	r1, #16
 8003514:	2000      	movs	r0, #0
 8003516:	f001 f8bb 	bl	8004690 <graphics_text>
 									oled_update();
 800351a:	f001 f96d 	bl	80047f8 <oled_update>

									sprintf(klik_buf, "%d", prevCounter);
 800351e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003520:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003524:	49bd      	ldr	r1, [pc, #756]	; (800381c <Start_RTC+0x960>)
 8003526:	4618      	mov	r0, r3
 8003528:	f00e feb6 	bl	8012298 <siprintf>
									graphics_text(0, 16, 1, klik_buf);
 800352c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003530:	2201      	movs	r2, #1
 8003532:	2110      	movs	r1, #16
 8003534:	2000      	movs	r0, #0
 8003536:	f001 f8ab 	bl	8004690 <graphics_text>
									oled_update();
 800353a:	f001 f95d 	bl	80047f8 <oled_update>
									memset(klik_buf, 0, sizeof(klik_buf));
 800353e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003542:	2203      	movs	r2, #3
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f00e f95f 	bl	801180a <memset>

								}
								if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)
 800354c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003550:	48b3      	ldr	r0, [pc, #716]	; (8003820 <Start_RTC+0x964>)
 8003552:	f002 fd15 	bl	8005f80 <HAL_GPIO_ReadPin>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1b9      	bne.n	80034d0 <Start_RTC+0x614>
								{
									// write data
									ds3231_set(DS3231_REGISTER_SECONDS_DEFAULT, &prevCounter);
 800355c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003560:	4619      	mov	r1, r3
 8003562:	2000      	movs	r0, #0
 8003564:	f7fe fb92 	bl	8001c8c <ds3231_set>
									clik = 8;
 8003568:	2308      	movs	r3, #8
 800356a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f


									osDelay(500);
 800356e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003572:	f00a f913 	bl	800d79c <osDelay>
									graphics_text(0, 0, 1, "                  ");
 8003576:	4bab      	ldr	r3, [pc, #684]	; (8003824 <Start_RTC+0x968>)
 8003578:	2201      	movs	r2, #1
 800357a:	2100      	movs	r1, #0
 800357c:	2000      	movs	r0, #0
 800357e:	f001 f887 	bl	8004690 <graphics_text>
									graphics_text(0, 8, 1, "               ");
 8003582:	4ba9      	ldr	r3, [pc, #676]	; (8003828 <Start_RTC+0x96c>)
 8003584:	2201      	movs	r2, #1
 8003586:	2108      	movs	r1, #8
 8003588:	2000      	movs	r0, #0
 800358a:	f001 f881 	bl	8004690 <graphics_text>
									graphics_text(0, 16, 1, "               ");
 800358e:	4ba6      	ldr	r3, [pc, #664]	; (8003828 <Start_RTC+0x96c>)
 8003590:	2201      	movs	r2, #1
 8003592:	2110      	movs	r1, #16
 8003594:	2000      	movs	r0, #0
 8003596:	f001 f87b 	bl	8004690 <graphics_text>
									oled_update();
 800359a:	f001 f92d 	bl	80047f8 <oled_update>

									for(uint8_t k =0; k< 5; k++)
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80035a4:	e01b      	b.n	80035de <Start_RTC+0x722>
									{
										graphics_text(0, 0, 1, " END");
 80035a6:	4ba1      	ldr	r3, [pc, #644]	; (800382c <Start_RTC+0x970>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	2100      	movs	r1, #0
 80035ac:	2000      	movs	r0, #0
 80035ae:	f001 f86f 	bl	8004690 <graphics_text>
										oled_update();
 80035b2:	f001 f921 	bl	80047f8 <oled_update>
										osDelay(300);
 80035b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80035ba:	f00a f8ef 	bl	800d79c <osDelay>
										graphics_text(0, 0, 1, "         ");
 80035be:	4b96      	ldr	r3, [pc, #600]	; (8003818 <Start_RTC+0x95c>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	2100      	movs	r1, #0
 80035c4:	2000      	movs	r0, #0
 80035c6:	f001 f863 	bl	8004690 <graphics_text>
										oled_update();
 80035ca:	f001 f915 	bl	80047f8 <oled_update>
										osDelay(100);
 80035ce:	2064      	movs	r0, #100	; 0x64
 80035d0:	f00a f8e4 	bl	800d79c <osDelay>
									for(uint8_t k =0; k< 5; k++)
 80035d4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80035d8:	3301      	adds	r3, #1
 80035da:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80035de:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d9df      	bls.n	80035a6 <Start_RTC+0x6ea>

									break;
								}
							}

							break;
 80035e6:	bf00      	nop

					}

					osDelay(300);
 80035e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80035ec:	f00a f8d6 	bl	800d79c <osDelay>

			}while(clik <= 7);
 80035f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80035f4:	2b07      	cmp	r3, #7
 80035f6:	f67f ac91 	bls.w	8002f1c <Start_RTC+0x60>
 80035fa:	e2b5      	b.n	8003b68 <Start_RTC+0xcac>

		}
		else		// Print current time
		{
			// 1. Read time from RTS
			char time[20] = {0};
 80035fc:	2300      	movs	r3, #0
 80035fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003600:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
			char date[40] = {0};
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	f107 0310 	add.w	r3, r7, #16
 8003616:	2224      	movs	r2, #36	; 0x24
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f00e f8f5 	bl	801180a <memset>
			char time_buf[10] = {0};
 8003620:	2300      	movs	r3, #0
 8003622:	64bb      	str	r3, [r7, #72]	; 0x48
 8003624:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	809a      	strh	r2, [r3, #4]
			char time_buf_2[10] = {0};
 800362e:	2300      	movs	r3, #0
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003632:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	809a      	strh	r2, [r3, #4]

			uint8_t seconds = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			uint8_t minutes = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			uint8_t hours = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			uint8_t day = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			uint8_t date_day = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			uint8_t mounth = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			uint8_t year = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			uint8_t status = 99;
 8003666:	2363      	movs	r3, #99	; 0x63
 8003668:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

			status = ds3231_read(DS3231_REGISTER_SECONDS_DEFAULT, &seconds);
 800366c:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8003670:	4619      	mov	r1, r3
 8003672:	2000      	movs	r0, #0
 8003674:	f7fe fa4a 	bl	8001b0c <ds3231_read>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			if(HAL_OK != status)
 800367e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <Start_RTC+0x7ce>
			{
				int ff = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	677b      	str	r3, [r7, #116]	; 0x74
			}
			ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &minutes);
 800368a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 800368e:	4619      	mov	r1, r3
 8003690:	2001      	movs	r0, #1
 8003692:	f7fe fa3b 	bl	8001b0c <ds3231_read>
			ds3231_read(DS3231_REGISTER_HOURS_DEFAULT, &hours);
 8003696:	f107 0339 	add.w	r3, r7, #57	; 0x39
 800369a:	4619      	mov	r1, r3
 800369c:	2002      	movs	r0, #2
 800369e:	f7fe fa35 	bl	8001b0c <ds3231_read>

			ds3231_read(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &day);
 80036a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80036a6:	4619      	mov	r1, r3
 80036a8:	2003      	movs	r0, #3
 80036aa:	f7fe fa2f 	bl	8001b0c <ds3231_read>
			ds3231_read(DS3231_REGISTER_DATE_DEFAULT, &date_day);
 80036ae:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80036b2:	4619      	mov	r1, r3
 80036b4:	2004      	movs	r0, #4
 80036b6:	f7fe fa29 	bl	8001b0c <ds3231_read>
			ds3231_read(DS3231_REGISTER_MONTH_DEFAULT, &mounth);
 80036ba:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80036be:	4619      	mov	r1, r3
 80036c0:	2005      	movs	r0, #5
 80036c2:	f7fe fa23 	bl	8001b0c <ds3231_read>
			ds3231_read(DS3231_REGISTER_YEAR_DEFAULT, &year);
 80036c6:	f107 0335 	add.w	r3, r7, #53	; 0x35
 80036ca:	4619      	mov	r1, r3
 80036cc:	2006      	movs	r0, #6
 80036ce:	f7fe fa1d 	bl	8001b0c <ds3231_read>

			// Convert in string
			// Print minutes on OLED
			if(hours < 10)
 80036d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80036d6:	2b09      	cmp	r3, #9
 80036d8:	d836      	bhi.n	8003748 <Start_RTC+0x88c>
			{
				memset(time_buf, 0, sizeof(time_buf));
 80036da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036de:	220a      	movs	r2, #10
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f00e f891 	bl	801180a <memset>
				sprintf(time_buf, "%c", '0');
 80036e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036ec:	2230      	movs	r2, #48	; 0x30
 80036ee:	4950      	ldr	r1, [pc, #320]	; (8003830 <Start_RTC+0x974>)
 80036f0:	4618      	mov	r0, r3
 80036f2:	f00e fdd1 	bl	8012298 <siprintf>
				sprintf(time_buf_2, "%d", hours);
 80036f6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80036fa:	461a      	mov	r2, r3
 80036fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003700:	4946      	ldr	r1, [pc, #280]	; (800381c <Start_RTC+0x960>)
 8003702:	4618      	mov	r0, r3
 8003704:	f00e fdc8 	bl	8012298 <siprintf>
				strcat(time_buf, time_buf_2);
 8003708:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800370c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f00e fe23 	bl	801235e <strcat>
				strcat(time, time_buf);
 8003718:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800371c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f00e fe1b 	bl	801235e <strcat>
				strcat(time, ":");
 8003728:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800372c:	4618      	mov	r0, r3
 800372e:	f7fc fd4f 	bl	80001d0 <strlen>
 8003732:	4603      	mov	r3, r0
 8003734:	461a      	mov	r2, r3
 8003736:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800373a:	4413      	add	r3, r2
 800373c:	493d      	ldr	r1, [pc, #244]	; (8003834 <Start_RTC+0x978>)
 800373e:	461a      	mov	r2, r3
 8003740:	460b      	mov	r3, r1
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	8013      	strh	r3, [r2, #0]
 8003746:	e026      	b.n	8003796 <Start_RTC+0x8da>
			}
			else
			{
				sprintf(time_buf, "%d", hours);
 8003748:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800374c:	461a      	mov	r2, r3
 800374e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003752:	4932      	ldr	r1, [pc, #200]	; (800381c <Start_RTC+0x960>)
 8003754:	4618      	mov	r0, r3
 8003756:	f00e fd9f 	bl	8012298 <siprintf>
				strcat(time, time_buf);
 800375a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800375e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f00e fdfa 	bl	801235e <strcat>
				strcat(time, ":");
 800376a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800376e:	4618      	mov	r0, r3
 8003770:	f7fc fd2e 	bl	80001d0 <strlen>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800377c:	4413      	add	r3, r2
 800377e:	492d      	ldr	r1, [pc, #180]	; (8003834 <Start_RTC+0x978>)
 8003780:	461a      	mov	r2, r3
 8003782:	460b      	mov	r3, r1
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	8013      	strh	r3, [r2, #0]
				memset(time_buf, 0, sizeof(time_buf));
 8003788:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800378c:	220a      	movs	r2, #10
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f00e f83a 	bl	801180a <memset>
//			strcat(time, time_buf);
//			strcat(time, ":");
//			memset(time_buf, 0, sizeof(time_buf));

			// Print minutes on OLED
			if(minutes < 10)
 8003796:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800379a:	2b09      	cmp	r3, #9
 800379c:	d84c      	bhi.n	8003838 <Start_RTC+0x97c>
			{
				memset(time_buf, 0, sizeof(time_buf));
 800379e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037a2:	220a      	movs	r2, #10
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f00e f82f 	bl	801180a <memset>
				sprintf(time_buf, "%c", '0');
 80037ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037b0:	2230      	movs	r2, #48	; 0x30
 80037b2:	491f      	ldr	r1, [pc, #124]	; (8003830 <Start_RTC+0x974>)
 80037b4:	4618      	mov	r0, r3
 80037b6:	f00e fd6f 	bl	8012298 <siprintf>
				sprintf(time_buf_2, "%d", minutes);
 80037ba:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80037be:	461a      	mov	r2, r3
 80037c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037c4:	4915      	ldr	r1, [pc, #84]	; (800381c <Start_RTC+0x960>)
 80037c6:	4618      	mov	r0, r3
 80037c8:	f00e fd66 	bl	8012298 <siprintf>
				strcat(time_buf, time_buf_2);
 80037cc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80037d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f00e fdc1 	bl	801235e <strcat>
				strcat(time, time_buf);
 80037dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f00e fdb9 	bl	801235e <strcat>
				strcat(time, ":");
 80037ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fc fced 	bl	80001d0 <strlen>
 80037f6:	4603      	mov	r3, r0
 80037f8:	461a      	mov	r2, r3
 80037fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037fe:	4413      	add	r3, r2
 8003800:	490c      	ldr	r1, [pc, #48]	; (8003834 <Start_RTC+0x978>)
 8003802:	461a      	mov	r2, r3
 8003804:	460b      	mov	r3, r1
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	8013      	strh	r3, [r2, #0]
 800380a:	e03c      	b.n	8003886 <Start_RTC+0x9ca>
 800380c:	0801462c 	.word	0x0801462c
 8003810:	08014680 	.word	0x08014680
 8003814:	2000cb40 	.word	0x2000cb40
 8003818:	0801463c 	.word	0x0801463c
 800381c:	08014648 	.word	0x08014648
 8003820:	40021000 	.word	0x40021000
 8003824:	0801468c 	.word	0x0801468c
 8003828:	080146a0 	.word	0x080146a0
 800382c:	080146b0 	.word	0x080146b0
 8003830:	080146b8 	.word	0x080146b8
 8003834:	080146bc 	.word	0x080146bc
			}
			else
			{
				sprintf(time_buf, "%d", minutes);
 8003838:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800383c:	461a      	mov	r2, r3
 800383e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003842:	49cc      	ldr	r1, [pc, #816]	; (8003b74 <Start_RTC+0xcb8>)
 8003844:	4618      	mov	r0, r3
 8003846:	f00e fd27 	bl	8012298 <siprintf>
				strcat(time, time_buf);
 800384a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800384e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f00e fd82 	bl	801235e <strcat>
				strcat(time, ":");
 800385a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc fcb6 	bl	80001d0 <strlen>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800386c:	4413      	add	r3, r2
 800386e:	49c2      	ldr	r1, [pc, #776]	; (8003b78 <Start_RTC+0xcbc>)
 8003870:	461a      	mov	r2, r3
 8003872:	460b      	mov	r3, r1
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	8013      	strh	r3, [r2, #0]
				memset(time_buf, 0, sizeof(time_buf));
 8003878:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800387c:	220a      	movs	r2, #10
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f00d ffc2 	bl	801180a <memset>
			}

			// Print seconds on OLED
			if(seconds == 0)
 8003886:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <Start_RTC+0x9da>
			{
				clear();
 800388e:	f000 fe6b 	bl	8004568 <clear>
				oled_update();
 8003892:	f000 ffb1 	bl	80047f8 <oled_update>
			}
			if(seconds < 10)
 8003896:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800389a:	2b09      	cmp	r3, #9
 800389c:	d827      	bhi.n	80038ee <Start_RTC+0xa32>
			{
				memset(time_buf, 0, sizeof(time_buf));
 800389e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038a2:	220a      	movs	r2, #10
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f00d ffaf 	bl	801180a <memset>
				sprintf(time_buf, "%c", '0');
 80038ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038b0:	2230      	movs	r2, #48	; 0x30
 80038b2:	49b2      	ldr	r1, [pc, #712]	; (8003b7c <Start_RTC+0xcc0>)
 80038b4:	4618      	mov	r0, r3
 80038b6:	f00e fcef 	bl	8012298 <siprintf>
				sprintf(time_buf_2, "%d", seconds);
 80038ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80038be:	461a      	mov	r2, r3
 80038c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038c4:	49ab      	ldr	r1, [pc, #684]	; (8003b74 <Start_RTC+0xcb8>)
 80038c6:	4618      	mov	r0, r3
 80038c8:	f00e fce6 	bl	8012298 <siprintf>
				strcat(time_buf, time_buf_2);
 80038cc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80038d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f00e fd41 	bl	801235e <strcat>
				strcat(time, time_buf);
 80038dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f00e fd39 	bl	801235e <strcat>
 80038ec:	e017      	b.n	800391e <Start_RTC+0xa62>
			}
			else
			{
				sprintf(time_buf, "%d", seconds);
 80038ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80038f2:	461a      	mov	r2, r3
 80038f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038f8:	499e      	ldr	r1, [pc, #632]	; (8003b74 <Start_RTC+0xcb8>)
 80038fa:	4618      	mov	r0, r3
 80038fc:	f00e fccc 	bl	8012298 <siprintf>
				strcat(time, time_buf);
 8003900:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003904:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f00e fd27 	bl	801235e <strcat>
				memset(time_buf, 0, sizeof(time_buf));
 8003910:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003914:	220a      	movs	r2, #10
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f00d ff76 	bl	801180a <memset>
			}


			// Print date
			sprintf(time_buf, "%d", date_day);
 800391e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003922:	461a      	mov	r2, r3
 8003924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003928:	4992      	ldr	r1, [pc, #584]	; (8003b74 <Start_RTC+0xcb8>)
 800392a:	4618      	mov	r0, r3
 800392c:	f00e fcb4 	bl	8012298 <siprintf>
			strcat(date, time_buf);
 8003930:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003934:	f107 030c 	add.w	r3, r7, #12
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f00e fd0f 	bl	801235e <strcat>
			strcat(date, " ");
 8003940:	f107 030c 	add.w	r3, r7, #12
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fc43 	bl	80001d0 <strlen>
 800394a:	4603      	mov	r3, r0
 800394c:	461a      	mov	r2, r3
 800394e:	f107 030c 	add.w	r3, r7, #12
 8003952:	4413      	add	r3, r2
 8003954:	498a      	ldr	r1, [pc, #552]	; (8003b80 <Start_RTC+0xcc4>)
 8003956:	461a      	mov	r2, r3
 8003958:	460b      	mov	r3, r1
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	8013      	strh	r3, [r2, #0]
			memset(time_buf, 0, sizeof(time_buf));
 800395e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003962:	220a      	movs	r2, #10
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f00d ff4f 	bl	801180a <memset>

			sprintf(time_buf, "%d", mounth);
 800396c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003970:	461a      	mov	r2, r3
 8003972:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003976:	497f      	ldr	r1, [pc, #508]	; (8003b74 <Start_RTC+0xcb8>)
 8003978:	4618      	mov	r0, r3
 800397a:	f00e fc8d 	bl	8012298 <siprintf>
			strcat(date, time_buf);
 800397e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003982:	f107 030c 	add.w	r3, r7, #12
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f00e fce8 	bl	801235e <strcat>
			strcat(date, " ");
 800398e:	f107 030c 	add.w	r3, r7, #12
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc fc1c 	bl	80001d0 <strlen>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	4413      	add	r3, r2
 80039a2:	4977      	ldr	r1, [pc, #476]	; (8003b80 <Start_RTC+0xcc4>)
 80039a4:	461a      	mov	r2, r3
 80039a6:	460b      	mov	r3, r1
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	8013      	strh	r3, [r2, #0]
			memset(time_buf, 0, sizeof(time_buf));
 80039ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039b0:	220a      	movs	r2, #10
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f00d ff28 	bl	801180a <memset>

			sprintf(time_buf, "%d", year);
 80039ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80039be:	461a      	mov	r2, r3
 80039c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039c4:	496b      	ldr	r1, [pc, #428]	; (8003b74 <Start_RTC+0xcb8>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	f00e fc66 	bl	8012298 <siprintf>
			strcat(date, "20");
 80039cc:	f107 030c 	add.w	r3, r7, #12
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fbfd 	bl	80001d0 <strlen>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	f107 030c 	add.w	r3, r7, #12
 80039de:	4413      	add	r3, r2
 80039e0:	4a68      	ldr	r2, [pc, #416]	; (8003b84 <Start_RTC+0xcc8>)
 80039e2:	8811      	ldrh	r1, [r2, #0]
 80039e4:	7892      	ldrb	r2, [r2, #2]
 80039e6:	8019      	strh	r1, [r3, #0]
 80039e8:	709a      	strb	r2, [r3, #2]
			strcat(date, time_buf);
 80039ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80039ee:	f107 030c 	add.w	r3, r7, #12
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f00e fcb2 	bl	801235e <strcat>
			memset(time_buf, 0, sizeof(time_buf));
 80039fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039fe:	220a      	movs	r2, #10
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f00d ff01 	bl	801180a <memset>

			// day
			switch (day)
 8003a08:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	f200 809a 	bhi.w	8003b48 <Start_RTC+0xc8c>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <Start_RTC+0xb60>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a39 	.word	0x08003a39
 8003a20:	08003a5f 	.word	0x08003a5f
 8003a24:	08003a85 	.word	0x08003a85
 8003a28:	08003aa9 	.word	0x08003aa9
 8003a2c:	08003ad3 	.word	0x08003ad3
 8003a30:	08003af9 	.word	0x08003af9
 8003a34:	08003b23 	.word	0x08003b23
			{
				case 1:
					strcat(date, "  Monday");
 8003a38:	f107 030c 	add.w	r3, r7, #12
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fc fbc7 	bl	80001d0 <strlen>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	f107 030c 	add.w	r3, r7, #12
 8003a4a:	4413      	add	r3, r2
 8003a4c:	494e      	ldr	r1, [pc, #312]	; (8003b88 <Start_RTC+0xccc>)
 8003a4e:	461a      	mov	r2, r3
 8003a50:	460b      	mov	r3, r1
 8003a52:	cb03      	ldmia	r3!, {r0, r1}
 8003a54:	6010      	str	r0, [r2, #0]
 8003a56:	6051      	str	r1, [r2, #4]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	7213      	strb	r3, [r2, #8]
					break;
 8003a5c:	e074      	b.n	8003b48 <Start_RTC+0xc8c>
				case 2:
					strcat(date, "  Tuesday");
 8003a5e:	f107 030c 	add.w	r3, r7, #12
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fc fbb4 	bl	80001d0 <strlen>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f107 030c 	add.w	r3, r7, #12
 8003a70:	4413      	add	r3, r2
 8003a72:	4946      	ldr	r1, [pc, #280]	; (8003b8c <Start_RTC+0xcd0>)
 8003a74:	461a      	mov	r2, r3
 8003a76:	460b      	mov	r3, r1
 8003a78:	cb03      	ldmia	r3!, {r0, r1}
 8003a7a:	6010      	str	r0, [r2, #0]
 8003a7c:	6051      	str	r1, [r2, #4]
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	8113      	strh	r3, [r2, #8]
					break;
 8003a82:	e061      	b.n	8003b48 <Start_RTC+0xc8c>
				case 3:
					strcat(date, "  Wednesday");
 8003a84:	f107 030c 	add.w	r3, r7, #12
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fba1 	bl	80001d0 <strlen>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	f107 030c 	add.w	r3, r7, #12
 8003a96:	4413      	add	r3, r2
 8003a98:	4a3d      	ldr	r2, [pc, #244]	; (8003b90 <Start_RTC+0xcd4>)
 8003a9a:	461c      	mov	r4, r3
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003aa0:	6020      	str	r0, [r4, #0]
 8003aa2:	6061      	str	r1, [r4, #4]
 8003aa4:	60a2      	str	r2, [r4, #8]
					break;
 8003aa6:	e04f      	b.n	8003b48 <Start_RTC+0xc8c>
				case 4:
					strcat(date, "  Thursday");
 8003aa8:	f107 030c 	add.w	r3, r7, #12
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fc fb8f 	bl	80001d0 <strlen>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f107 030c 	add.w	r3, r7, #12
 8003aba:	4413      	add	r3, r2
 8003abc:	4935      	ldr	r1, [pc, #212]	; (8003b94 <Start_RTC+0xcd8>)
 8003abe:	461a      	mov	r2, r3
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	cb03      	ldmia	r3!, {r0, r1}
 8003ac4:	6010      	str	r0, [r2, #0]
 8003ac6:	6051      	str	r1, [r2, #4]
 8003ac8:	8819      	ldrh	r1, [r3, #0]
 8003aca:	789b      	ldrb	r3, [r3, #2]
 8003acc:	8111      	strh	r1, [r2, #8]
 8003ace:	7293      	strb	r3, [r2, #10]
					break;
 8003ad0:	e03a      	b.n	8003b48 <Start_RTC+0xc8c>
				case 5:
					strcat(date, "  Friday");
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fc fb7a 	bl	80001d0 <strlen>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f107 030c 	add.w	r3, r7, #12
 8003ae4:	4413      	add	r3, r2
 8003ae6:	492c      	ldr	r1, [pc, #176]	; (8003b98 <Start_RTC+0xcdc>)
 8003ae8:	461a      	mov	r2, r3
 8003aea:	460b      	mov	r3, r1
 8003aec:	cb03      	ldmia	r3!, {r0, r1}
 8003aee:	6010      	str	r0, [r2, #0]
 8003af0:	6051      	str	r1, [r2, #4]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	7213      	strb	r3, [r2, #8]
					break;
 8003af6:	e027      	b.n	8003b48 <Start_RTC+0xc8c>
				case 6:
					strcat(date, "  Saturday");
 8003af8:	f107 030c 	add.w	r3, r7, #12
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fc fb67 	bl	80001d0 <strlen>
 8003b02:	4603      	mov	r3, r0
 8003b04:	461a      	mov	r2, r3
 8003b06:	f107 030c 	add.w	r3, r7, #12
 8003b0a:	4413      	add	r3, r2
 8003b0c:	4923      	ldr	r1, [pc, #140]	; (8003b9c <Start_RTC+0xce0>)
 8003b0e:	461a      	mov	r2, r3
 8003b10:	460b      	mov	r3, r1
 8003b12:	cb03      	ldmia	r3!, {r0, r1}
 8003b14:	6010      	str	r0, [r2, #0]
 8003b16:	6051      	str	r1, [r2, #4]
 8003b18:	8819      	ldrh	r1, [r3, #0]
 8003b1a:	789b      	ldrb	r3, [r3, #2]
 8003b1c:	8111      	strh	r1, [r2, #8]
 8003b1e:	7293      	strb	r3, [r2, #10]
					break;
 8003b20:	e012      	b.n	8003b48 <Start_RTC+0xc8c>
				case 7:
					strcat(date, "  Sunday");
 8003b22:	f107 030c 	add.w	r3, r7, #12
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fb52 	bl	80001d0 <strlen>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f107 030c 	add.w	r3, r7, #12
 8003b34:	4413      	add	r3, r2
 8003b36:	491a      	ldr	r1, [pc, #104]	; (8003ba0 <Start_RTC+0xce4>)
 8003b38:	461a      	mov	r2, r3
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	cb03      	ldmia	r3!, {r0, r1}
 8003b3e:	6010      	str	r0, [r2, #0]
 8003b40:	6051      	str	r1, [r2, #4]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	7213      	strb	r3, [r2, #8]
					break;
 8003b46:	bf00      	nop
			}

			graphics_text(40, 0, 3, time);
 8003b48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	2100      	movs	r1, #0
 8003b50:	2028      	movs	r0, #40	; 0x28
 8003b52:	f000 fd9d 	bl	8004690 <graphics_text>
			graphics_text(5, 24, 2, date);
 8003b56:	f107 030c 	add.w	r3, r7, #12
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	2118      	movs	r1, #24
 8003b5e:	2005      	movs	r0, #5
 8003b60:	f000 fd96 	bl	8004690 <graphics_text>
			oled_update();
 8003b64:	f000 fe48 	bl	80047f8 <oled_update>
		}

		osDelay(1000);
 8003b68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b6c:	f009 fe16 	bl	800d79c <osDelay>
	{
 8003b70:	f7ff b9b8 	b.w	8002ee4 <Start_RTC+0x28>
 8003b74:	08014648 	.word	0x08014648
 8003b78:	080146bc 	.word	0x080146bc
 8003b7c:	080146b8 	.word	0x080146b8
 8003b80:	08014608 	.word	0x08014608
 8003b84:	080146c0 	.word	0x080146c0
 8003b88:	080146c4 	.word	0x080146c4
 8003b8c:	080146d0 	.word	0x080146d0
 8003b90:	080146dc 	.word	0x080146dc
 8003b94:	080146e8 	.word	0x080146e8
 8003b98:	080146f4 	.word	0x080146f4
 8003b9c:	08014700 	.word	0x08014700
 8003ba0:	0801470c 	.word	0x0801470c

08003ba4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]




	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d104      	bne.n	8003bc0 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8003bb6:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4a07      	ldr	r2, [pc, #28]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003bbe:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a06      	ldr	r2, [pc, #24]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8003bca:	f000 ff27 	bl	8004a1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	2000cd88 	.word	0x2000cd88
 8003be0:	40002000 	.word	0x40002000

08003be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003be8:	b672      	cpsid	i
}
 8003bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bec:	e7fe      	b.n	8003bec <Error_Handler+0x8>
	...

08003bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <HAL_MspInit+0x54>)
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	4a11      	ldr	r2, [pc, #68]	; (8003c44 <HAL_MspInit+0x54>)
 8003c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c04:	6453      	str	r3, [r2, #68]	; 0x44
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <HAL_MspInit+0x54>)
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_MspInit+0x54>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <HAL_MspInit+0x54>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6413      	str	r3, [r2, #64]	; 0x40
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <HAL_MspInit+0x54>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	210f      	movs	r1, #15
 8003c32:	f06f 0001 	mvn.w	r0, #1
 8003c36:	f001 fa73 	bl	8005120 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800

08003c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c50:	f107 0314 	add.w	r3, r7, #20
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <HAL_ADC_MspInit+0x7c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d127      	bne.n	8003cba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <HAL_ADC_MspInit+0x80>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	4a15      	ldr	r2, [pc, #84]	; (8003cc8 <HAL_ADC_MspInit+0x80>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_ADC_MspInit+0x80>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_ADC_MspInit+0x80>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <HAL_ADC_MspInit+0x80>)
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	6313      	str	r3, [r2, #48]	; 0x30
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_ADC_MspInit+0x80>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cae:	f107 0314 	add.w	r3, r7, #20
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4805      	ldr	r0, [pc, #20]	; (8003ccc <HAL_ADC_MspInit+0x84>)
 8003cb6:	f001 fecb 	bl	8005a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003cba:	bf00      	nop
 8003cbc:	3728      	adds	r7, #40	; 0x28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40012000 	.word	0x40012000
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40020400 	.word	0x40020400

08003cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	; 0x30
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd8:	f107 031c 	add.w	r3, r7, #28
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a42      	ldr	r2, [pc, #264]	; (8003df8 <HAL_I2C_MspInit+0x128>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d12d      	bne.n	8003d4e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4a40      	ldr	r2, [pc, #256]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	6313      	str	r3, [r2, #48]	; 0x30
 8003d02:	4b3e      	ldr	r3, [pc, #248]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d14:	2312      	movs	r3, #18
 8003d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d20:	2304      	movs	r3, #4
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d24:	f107 031c 	add.w	r3, r7, #28
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4835      	ldr	r0, [pc, #212]	; (8003e00 <HAL_I2C_MspInit+0x130>)
 8003d2c:	f001 fe90 	bl	8005a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	4a30      	ldr	r2, [pc, #192]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003d3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d40:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003d4c:	e050      	b.n	8003df0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <HAL_I2C_MspInit+0x134>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d14b      	bne.n	8003df0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	6313      	str	r3, [r2, #48]	; 0x30
 8003d68:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	4a1f      	ldr	r2, [pc, #124]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	6313      	str	r3, [r2, #48]	; 0x30
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d96:	2312      	movs	r3, #18
 8003d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003da2:	2304      	movs	r3, #4
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003da6:	f107 031c 	add.w	r3, r7, #28
 8003daa:	4619      	mov	r1, r3
 8003dac:	4816      	ldr	r0, [pc, #88]	; (8003e08 <HAL_I2C_MspInit+0x138>)
 8003dae:	f001 fe4f 	bl	8005a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003db8:	2312      	movs	r3, #18
 8003dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc8:	f107 031c 	add.w	r3, r7, #28
 8003dcc:	4619      	mov	r1, r3
 8003dce:	480f      	ldr	r0, [pc, #60]	; (8003e0c <HAL_I2C_MspInit+0x13c>)
 8003dd0:	f001 fe3e 	bl	8005a50 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003dde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003de2:	6413      	str	r3, [r2, #64]	; 0x40
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_I2C_MspInit+0x12c>)
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	68bb      	ldr	r3, [r7, #8]
}
 8003df0:	bf00      	nop
 8003df2:	3730      	adds	r7, #48	; 0x30
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40005800 	.word	0x40005800
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40020400 	.word	0x40020400
 8003e04:	40005c00 	.word	0x40005c00
 8003e08:	40020800 	.word	0x40020800
 8003e0c:	40020000 	.word	0x40020000

08003e10 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0b      	ldr	r2, [pc, #44]	; (8003e4c <HAL_RNG_MspInit+0x3c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10d      	bne.n	8003e3e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <HAL_RNG_MspInit+0x40>)
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <HAL_RNG_MspInit+0x40>)
 8003e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e30:	6353      	str	r3, [r2, #52]	; 0x34
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_RNG_MspInit+0x40>)
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	50060800 	.word	0x50060800
 8003e50:	40023800 	.word	0x40023800

08003e54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08c      	sub	sp, #48	; 0x30
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5c:	f107 031c 	add.w	r3, r7, #28
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5d      	ldr	r2, [pc, #372]	; (8003fe8 <HAL_SPI_MspInit+0x194>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d12c      	bne.n	8003ed0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	4b5c      	ldr	r3, [pc, #368]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	4a5b      	ldr	r2, [pc, #364]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e84:	6453      	str	r3, [r2, #68]	; 0x44
 8003e86:	4b59      	ldr	r3, [pc, #356]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	4b55      	ldr	r3, [pc, #340]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a54      	ldr	r2, [pc, #336]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	4b52      	ldr	r3, [pc, #328]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003eae:	23e0      	movs	r3, #224	; 0xe0
 8003eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ebe:	2305      	movs	r3, #5
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec2:	f107 031c 	add.w	r3, r7, #28
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4849      	ldr	r0, [pc, #292]	; (8003ff0 <HAL_SPI_MspInit+0x19c>)
 8003eca:	f001 fdc1 	bl	8005a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003ece:	e086      	b.n	8003fde <HAL_SPI_MspInit+0x18a>
  else if(hspi->Instance==SPI2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a47      	ldr	r2, [pc, #284]	; (8003ff4 <HAL_SPI_MspInit+0x1a0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f040 8081 	bne.w	8003fde <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	4b42      	ldr	r3, [pc, #264]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	4a41      	ldr	r2, [pc, #260]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eea:	6413      	str	r3, [r2, #64]	; 0x40
 8003eec:	4b3f      	ldr	r3, [pc, #252]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	4a3a      	ldr	r2, [pc, #232]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	6313      	str	r3, [r2, #48]	; 0x30
 8003f08:	4b38      	ldr	r3, [pc, #224]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f14:	2300      	movs	r3, #0
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	4b34      	ldr	r3, [pc, #208]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	4a33      	ldr	r2, [pc, #204]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003f1e:	f043 0302 	orr.w	r3, r3, #2
 8003f22:	6313      	str	r3, [r2, #48]	; 0x30
 8003f24:	4b31      	ldr	r3, [pc, #196]	; (8003fec <HAL_SPI_MspInit+0x198>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f30:	2304      	movs	r3, #4
 8003f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f34:	2302      	movs	r3, #2
 8003f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f40:	2305      	movs	r3, #5
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f44:	f107 031c 	add.w	r3, r7, #28
 8003f48:	4619      	mov	r1, r3
 8003f4a:	482b      	ldr	r0, [pc, #172]	; (8003ff8 <HAL_SPI_MspInit+0x1a4>)
 8003f4c:	f001 fd80 	bl	8005a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003f50:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f56:	2302      	movs	r3, #2
 8003f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f62:	2305      	movs	r3, #5
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f66:	f107 031c 	add.w	r3, r7, #28
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4823      	ldr	r0, [pc, #140]	; (8003ffc <HAL_SPI_MspInit+0x1a8>)
 8003f6e:	f001 fd6f 	bl	8005a50 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003f72:	4b23      	ldr	r3, [pc, #140]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003f74:	4a23      	ldr	r2, [pc, #140]	; (8004004 <HAL_SPI_MspInit+0x1b0>)
 8003f76:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003f80:	2240      	movs	r2, #64	; 0x40
 8003f82:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f90:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8003f9e:	4b18      	ldr	r3, [pc, #96]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fa4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fa6:	4b16      	ldr	r3, [pc, #88]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fac:	4b14      	ldr	r3, [pc, #80]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003fb2:	4813      	ldr	r0, [pc, #76]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003fb4:	f001 f8ec 	bl	8005190 <HAL_DMA_Init>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_SPI_MspInit+0x16e>
      Error_Handler();
 8003fbe:	f7ff fe11 	bl	8003be4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a0e      	ldr	r2, [pc, #56]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003fc6:	649a      	str	r2, [r3, #72]	; 0x48
 8003fc8:	4a0d      	ldr	r2, [pc, #52]	; (8004000 <HAL_SPI_MspInit+0x1ac>)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2105      	movs	r1, #5
 8003fd2:	2024      	movs	r0, #36	; 0x24
 8003fd4:	f001 f8a4 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003fd8:	2024      	movs	r0, #36	; 0x24
 8003fda:	f001 f8bd 	bl	8005158 <HAL_NVIC_EnableIRQ>
}
 8003fde:	bf00      	nop
 8003fe0:	3730      	adds	r7, #48	; 0x30
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40013000 	.word	0x40013000
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40020000 	.word	0x40020000
 8003ff4:	40003800 	.word	0x40003800
 8003ff8:	40020800 	.word	0x40020800
 8003ffc:	40020400 	.word	0x40020400
 8004000:	2000d0b8 	.word	0x2000d0b8
 8004004:	40026070 	.word	0x40026070

08004008 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a16      	ldr	r2, [pc, #88]	; (8004070 <HAL_SPI_MspDeInit+0x68>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10a      	bne.n	8004030 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800401a:	4b16      	ldr	r3, [pc, #88]	; (8004074 <HAL_SPI_MspDeInit+0x6c>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	4a15      	ldr	r2, [pc, #84]	; (8004074 <HAL_SPI_MspDeInit+0x6c>)
 8004020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004024:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8004026:	21e0      	movs	r1, #224	; 0xe0
 8004028:	4813      	ldr	r0, [pc, #76]	; (8004078 <HAL_SPI_MspDeInit+0x70>)
 800402a:	f001 fead 	bl	8005d88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800402e:	e01b      	b.n	8004068 <HAL_SPI_MspDeInit+0x60>
  else if(hspi->Instance==SPI2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a11      	ldr	r2, [pc, #68]	; (800407c <HAL_SPI_MspDeInit+0x74>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d116      	bne.n	8004068 <HAL_SPI_MspDeInit+0x60>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_SPI_MspDeInit+0x6c>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <HAL_SPI_MspDeInit+0x6c>)
 8004040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004044:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 8004046:	2104      	movs	r1, #4
 8004048:	480d      	ldr	r0, [pc, #52]	; (8004080 <HAL_SPI_MspDeInit+0x78>)
 800404a:	f001 fe9d 	bl	8005d88 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 800404e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8004052:	480c      	ldr	r0, [pc, #48]	; (8004084 <HAL_SPI_MspDeInit+0x7c>)
 8004054:	f001 fe98 	bl	8005d88 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405c:	4618      	mov	r0, r3
 800405e:	f001 f945 	bl	80052ec <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8004062:	2024      	movs	r0, #36	; 0x24
 8004064:	f001 f886 	bl	8005174 <HAL_NVIC_DisableIRQ>
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40013000 	.word	0x40013000
 8004074:	40023800 	.word	0x40023800
 8004078:	40020000 	.word	0x40020000
 800407c:	40003800 	.word	0x40003800
 8004080:	40020800 	.word	0x40020800
 8004084:	40020400 	.word	0x40020400

08004088 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	; 0x28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1d      	ldr	r2, [pc, #116]	; (800411c <HAL_TIM_Encoder_MspInit+0x94>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d134      	bne.n	8004114 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <HAL_TIM_Encoder_MspInit+0x98>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	4a1b      	ldr	r2, [pc, #108]	; (8004120 <HAL_TIM_Encoder_MspInit+0x98>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ba:	4b19      	ldr	r3, [pc, #100]	; (8004120 <HAL_TIM_Encoder_MspInit+0x98>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_TIM_Encoder_MspInit+0x98>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	4a14      	ldr	r2, [pc, #80]	; (8004120 <HAL_TIM_Encoder_MspInit+0x98>)
 80040d0:	f043 0310 	orr.w	r3, r3, #16
 80040d4:	6313      	str	r3, [r2, #48]	; 0x30
 80040d6:	4b12      	ldr	r3, [pc, #72]	; (8004120 <HAL_TIM_Encoder_MspInit+0x98>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80040e2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80040e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e8:	2302      	movs	r3, #2
 80040ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f0:	2300      	movs	r3, #0
 80040f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80040f4:	2301      	movs	r3, #1
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	4619      	mov	r1, r3
 80040fe:	4809      	ldr	r0, [pc, #36]	; (8004124 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004100:	f001 fca6 	bl	8005a50 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004104:	2200      	movs	r2, #0
 8004106:	2105      	movs	r1, #5
 8004108:	2019      	movs	r0, #25
 800410a:	f001 f809 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800410e:	2019      	movs	r0, #25
 8004110:	f001 f822 	bl	8005158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004114:	bf00      	nop
 8004116:	3728      	adds	r7, #40	; 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40010000 	.word	0x40010000
 8004120:	40023800 	.word	0x40023800
 8004124:	40021000 	.word	0x40021000

08004128 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <HAL_TIM_Base_MspInit+0x80>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d116      	bne.n	8004168 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <HAL_TIM_Base_MspInit+0x84>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <HAL_TIM_Base_MspInit+0x84>)
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
 800414a:	4b18      	ldr	r3, [pc, #96]	; (80041ac <HAL_TIM_Base_MspInit+0x84>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004156:	2200      	movs	r2, #0
 8004158:	2105      	movs	r1, #5
 800415a:	201d      	movs	r0, #29
 800415c:	f000 ffe0 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004160:	201d      	movs	r0, #29
 8004162:	f000 fff9 	bl	8005158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004166:	e01a      	b.n	800419e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a10      	ldr	r2, [pc, #64]	; (80041b0 <HAL_TIM_Base_MspInit+0x88>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d115      	bne.n	800419e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <HAL_TIM_Base_MspInit+0x84>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <HAL_TIM_Base_MspInit+0x84>)
 800417c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004180:	6453      	str	r3, [r2, #68]	; 0x44
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <HAL_TIM_Base_MspInit+0x84>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800418e:	2200      	movs	r2, #0
 8004190:	2105      	movs	r1, #5
 8004192:	2019      	movs	r0, #25
 8004194:	f000 ffc4 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004198:	2019      	movs	r0, #25
 800419a:	f000 ffdd 	bl	8005158 <HAL_NVIC_EnableIRQ>
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40014400 	.word	0x40014400

080041b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08c      	sub	sp, #48	; 0x30
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80041c4:	2200      	movs	r2, #0
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	202d      	movs	r0, #45	; 0x2d
 80041ca:	f000 ffa9 	bl	8005120 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80041ce:	202d      	movs	r0, #45	; 0x2d
 80041d0:	f000 ffc2 	bl	8005158 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <HAL_InitTick+0xa4>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <HAL_InitTick+0xa4>)
 80041de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e2:	6413      	str	r3, [r2, #64]	; 0x40
 80041e4:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <HAL_InitTick+0xa4>)
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041f0:	f107 0210 	add.w	r2, r7, #16
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f004 fe14 	bl	8008e28 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004200:	f004 fdfe 	bl	8008e00 <HAL_RCC_GetPCLK1Freq>
 8004204:	4603      	mov	r3, r0
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <HAL_InitTick+0xa8>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0c9b      	lsrs	r3, r3, #18
 8004214:	3b01      	subs	r3, #1
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <HAL_InitTick+0xac>)
 800421a:	4a12      	ldr	r2, [pc, #72]	; (8004264 <HAL_InitTick+0xb0>)
 800421c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_InitTick+0xac>)
 8004220:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004224:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004226:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <HAL_InitTick+0xac>)
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <HAL_InitTick+0xac>)
 800422e:	2200      	movs	r2, #0
 8004230:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_InitTick+0xac>)
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004238:	4809      	ldr	r0, [pc, #36]	; (8004260 <HAL_InitTick+0xac>)
 800423a:	f005 fba9 	bl	8009990 <HAL_TIM_Base_Init>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004244:	4806      	ldr	r0, [pc, #24]	; (8004260 <HAL_InitTick+0xac>)
 8004246:	f005 fbf3 	bl	8009a30 <HAL_TIM_Base_Start_IT>
 800424a:	4603      	mov	r3, r0
 800424c:	e000      	b.n	8004250 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
}
 8004250:	4618      	mov	r0, r3
 8004252:	3730      	adds	r7, #48	; 0x30
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	431bde83 	.word	0x431bde83
 8004260:	2000d3dc 	.word	0x2000d3dc
 8004264:	40002000 	.word	0x40002000

08004268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800426c:	e7fe      	b.n	800426c <NMI_Handler+0x4>

0800426e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004272:	e7fe      	b.n	8004272 <HardFault_Handler+0x4>

08004274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004278:	e7fe      	b.n	8004278 <MemManage_Handler+0x4>

0800427a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800427e:	e7fe      	b.n	800427e <BusFault_Handler+0x4>

08004280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004284:	e7fe      	b.n	8004284 <UsageFault_Handler+0x4>

08004286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004298:	4802      	ldr	r0, [pc, #8]	; (80042a4 <DMA1_Stream4_IRQHandler+0x10>)
 800429a:	f001 f96f 	bl	800557c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	2000d0b8 	.word	0x2000d0b8

080042a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042ac:	4803      	ldr	r0, [pc, #12]	; (80042bc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80042ae:	f005 fd63 	bl	8009d78 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80042b2:	4803      	ldr	r0, [pc, #12]	; (80042c0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80042b4:	f005 fd60 	bl	8009d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	2000cb40 	.word	0x2000cb40
 80042c0:	2000778c 	.word	0x2000778c

080042c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042c8:	4802      	ldr	r0, [pc, #8]	; (80042d4 <TIM3_IRQHandler+0x10>)
 80042ca:	f005 fd55 	bl	8009d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	2000aaa0 	.word	0x2000aaa0

080042d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80042dc:	4802      	ldr	r0, [pc, #8]	; (80042e8 <SPI2_IRQHandler+0x10>)
 80042de:	f005 f8e3 	bl	80094a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	200076e4 	.word	0x200076e4

080042ec <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80042f0:	4802      	ldr	r0, [pc, #8]	; (80042fc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80042f2:	f005 fd41 	bl	8009d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	2000d3dc 	.word	0x2000d3dc

08004300 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004304:	4802      	ldr	r0, [pc, #8]	; (8004310 <OTG_FS_IRQHandler+0x10>)
 8004306:	f003 f8fc 	bl	8007502 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	2000eb38 	.word	0x2000eb38

08004314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
	return 1;
 8004318:	2301      	movs	r3, #1
}
 800431a:	4618      	mov	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <_kill>:

int _kill(int pid, int sig)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800432e:	f00d f921 	bl	8011574 <__errno>
 8004332:	4603      	mov	r3, r0
 8004334:	2216      	movs	r2, #22
 8004336:	601a      	str	r2, [r3, #0]
	return -1;
 8004338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <_exit>:

void _exit (int status)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800434c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ffe7 	bl	8004324 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004356:	e7fe      	b.n	8004356 <_exit+0x12>

08004358 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e00a      	b.n	8004380 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800436a:	f3af 8000 	nop.w
 800436e:	4601      	mov	r1, r0
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	60ba      	str	r2, [r7, #8]
 8004376:	b2ca      	uxtb	r2, r1
 8004378:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	3301      	adds	r3, #1
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	dbf0      	blt.n	800436a <_read+0x12>
	}

return len;
 8004388:	687b      	ldr	r3, [r7, #4]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e009      	b.n	80043b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	60ba      	str	r2, [r7, #8]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	3301      	adds	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	429a      	cmp	r2, r3
 80043be:	dbf1      	blt.n	80043a4 <_write+0x12>
	}
	return len;
 80043c0:	687b      	ldr	r3, [r7, #4]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <_close>:

int _close(int file)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
	return -1;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043f2:	605a      	str	r2, [r3, #4]
	return 0;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <_isatty>:

int _isatty(int file)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
	return 1;
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
	return 0;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <_sbrk+0x5c>)
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <_sbrk+0x60>)
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <_sbrk+0x64>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <_sbrk+0x64>)
 8004452:	4a12      	ldr	r2, [pc, #72]	; (800449c <_sbrk+0x68>)
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <_sbrk+0x64>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	429a      	cmp	r2, r3
 8004462:	d207      	bcs.n	8004474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004464:	f00d f886 	bl	8011574 <__errno>
 8004468:	4603      	mov	r3, r0
 800446a:	220c      	movs	r2, #12
 800446c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004472:	e009      	b.n	8004488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <_sbrk+0x64>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <_sbrk+0x64>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	4a05      	ldr	r2, [pc, #20]	; (8004498 <_sbrk+0x64>)
 8004484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004486:	68fb      	ldr	r3, [r7, #12]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20020000 	.word	0x20020000
 8004494:	00000900 	.word	0x00000900
 8004498:	200027a0 	.word	0x200027a0
 800449c:	2000ef50 	.word	0x2000ef50

080044a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <SystemInit+0x20>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <SystemInit+0x20>)
 80044ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	71fb      	strb	r3, [r7, #7]
 80044ce:	460b      	mov	r3, r1
 80044d0:	71bb      	strb	r3, [r7, #6]
 80044d2:	4613      	mov	r3, r2
 80044d4:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	db3b      	blt.n	8004556 <draw_pixel+0x92>
 80044de:	79bb      	ldrb	r3, [r7, #6]
 80044e0:	2b1f      	cmp	r3, #31
 80044e2:	d838      	bhi.n	8004556 <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 80044e4:	2301      	movs	r3, #1
 80044e6:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 80044e8:	79bb      	ldrb	r3, [r7, #6]
 80044ea:	08db      	lsrs	r3, r3, #3
 80044ec:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	79bb      	ldrb	r3, [r7, #6]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	737b      	strb	r3, [r7, #13]
		if(color)
 80044fc:	797b      	ldrb	r3, [r7, #5]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d012      	beq.n	8004528 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8004502:	7bba      	ldrb	r2, [r7, #14]
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	4917      	ldr	r1, [pc, #92]	; (8004564 <draw_pixel+0xa0>)
 8004508:	01d2      	lsls	r2, r2, #7
 800450a:	440a      	add	r2, r1
 800450c:	4413      	add	r3, r2
 800450e:	7818      	ldrb	r0, [r3, #0]
 8004510:	7bba      	ldrb	r2, [r7, #14]
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	7b79      	ldrb	r1, [r7, #13]
 8004516:	4301      	orrs	r1, r0
 8004518:	b2c8      	uxtb	r0, r1
 800451a:	4912      	ldr	r1, [pc, #72]	; (8004564 <draw_pixel+0xa0>)
 800451c:	01d2      	lsls	r2, r2, #7
 800451e:	440a      	add	r2, r1
 8004520:	4413      	add	r3, r2
 8004522:	4602      	mov	r2, r0
 8004524:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 8004526:	e016      	b.n	8004556 <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 8004528:	7bba      	ldrb	r2, [r7, #14]
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	490d      	ldr	r1, [pc, #52]	; (8004564 <draw_pixel+0xa0>)
 800452e:	01d2      	lsls	r2, r2, #7
 8004530:	440a      	add	r2, r1
 8004532:	4413      	add	r3, r2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b25a      	sxtb	r2, r3
 8004538:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800453c:	43db      	mvns	r3, r3
 800453e:	b25b      	sxtb	r3, r3
 8004540:	4013      	ands	r3, r2
 8004542:	b259      	sxtb	r1, r3
 8004544:	7bba      	ldrb	r2, [r7, #14]
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	b2c8      	uxtb	r0, r1
 800454a:	4906      	ldr	r1, [pc, #24]	; (8004564 <draw_pixel+0xa0>)
 800454c:	01d2      	lsls	r2, r2, #7
 800454e:	440a      	add	r2, r1
 8004550:	4413      	add	r3, r2
 8004552:	4602      	mov	r2, r0
 8004554:	701a      	strb	r2, [r3, #0]
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000d424 	.word	0x2000d424

08004568 <clear>:
		for(j=y0;j<y1;j++)
			invert_pixel(i,j);
}

void clear(void)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i=0;i<4;i++)
 800456e:	2300      	movs	r3, #0
 8004570:	71fb      	strb	r3, [r7, #7]
 8004572:	e014      	b.n	800459e <clear+0x36>
		for(j=0;j<128;j++)
 8004574:	2300      	movs	r3, #0
 8004576:	71bb      	strb	r3, [r7, #6]
 8004578:	e00a      	b.n	8004590 <clear+0x28>
			gddram[i][j]=0x00;
 800457a:	79fa      	ldrb	r2, [r7, #7]
 800457c:	79bb      	ldrb	r3, [r7, #6]
 800457e:	490d      	ldr	r1, [pc, #52]	; (80045b4 <clear+0x4c>)
 8004580:	01d2      	lsls	r2, r2, #7
 8004582:	440a      	add	r2, r1
 8004584:	4413      	add	r3, r2
 8004586:	2200      	movs	r2, #0
 8004588:	701a      	strb	r2, [r3, #0]
		for(j=0;j<128;j++)
 800458a:	79bb      	ldrb	r3, [r7, #6]
 800458c:	3301      	adds	r3, #1
 800458e:	71bb      	strb	r3, [r7, #6]
 8004590:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004594:	2b00      	cmp	r3, #0
 8004596:	daf0      	bge.n	800457a <clear+0x12>
	for(i=0;i<4;i++)
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	3301      	adds	r3, #1
 800459c:	71fb      	strb	r3, [r7, #7]
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d9e7      	bls.n	8004574 <clear+0xc>
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	2000d424 	.word	0x2000d424

080045b8 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4604      	mov	r4, r0
 80045c0:	4608      	mov	r0, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	461a      	mov	r2, r3
 80045c6:	4623      	mov	r3, r4
 80045c8:	71fb      	strb	r3, [r7, #7]
 80045ca:	4603      	mov	r3, r0
 80045cc:	71bb      	strb	r3, [r7, #6]
 80045ce:	460b      	mov	r3, r1
 80045d0:	717b      	strb	r3, [r7, #5]
 80045d2:	4613      	mov	r3, r2
 80045d4:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 80045da:	2300      	movs	r3, #0
 80045dc:	75fb      	strb	r3, [r7, #23]
 80045de:	e04d      	b.n	800467c <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 80045e0:	2300      	movs	r3, #0
 80045e2:	75bb      	strb	r3, [r7, #22]
 80045e4:	e042      	b.n	800466c <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	08db      	lsrs	r3, r3, #3
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	7dbb      	ldrb	r3, [r7, #22]
 80045ee:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80045f2:	fb11 f303 	smulbb	r3, r1, r3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4413      	add	r3, r2
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 8004606:	7dfb      	ldrb	r3, [r7, #23]
 8004608:	43db      	mvns	r3, r3
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	2201      	movs	r2, #1
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 8004616:	7bba      	ldrb	r2, [r7, #14]
 8004618:	7b7b      	ldrb	r3, [r7, #13]
 800461a:	4013      	ands	r3, r2
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00f      	beq.n	8004642 <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 8004622:	79fa      	ldrb	r2, [r7, #7]
 8004624:	797b      	ldrb	r3, [r7, #5]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	b2da      	uxtb	r2, r3
 800462a:	7dfb      	ldrb	r3, [r7, #23]
 800462c:	4413      	add	r3, r2
 800462e:	b2d8      	uxtb	r0, r3
 8004630:	7dba      	ldrb	r2, [r7, #22]
 8004632:	79bb      	ldrb	r3, [r7, #6]
 8004634:	4413      	add	r3, r2
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2201      	movs	r2, #1
 800463a:	4619      	mov	r1, r3
 800463c:	f7ff ff42 	bl	80044c4 <draw_pixel>
 8004640:	e00e      	b.n	8004660 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8004642:	79fa      	ldrb	r2, [r7, #7]
 8004644:	797b      	ldrb	r3, [r7, #5]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	b2da      	uxtb	r2, r3
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	4413      	add	r3, r2
 800464e:	b2d8      	uxtb	r0, r3
 8004650:	7dba      	ldrb	r2, [r7, #22]
 8004652:	79bb      	ldrb	r3, [r7, #6]
 8004654:	4413      	add	r3, r2
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2200      	movs	r2, #0
 800465a:	4619      	mov	r1, r3
 800465c:	f7ff ff32 	bl	80044c4 <draw_pixel>
		for (y=0; y<height; y++)
 8004660:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	3301      	adds	r3, #1
 8004668:	b2db      	uxtb	r3, r3
 800466a:	75bb      	strb	r3, [r7, #22]
 800466c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8004670:	793b      	ldrb	r3, [r7, #4]
 8004672:	429a      	cmp	r2, r3
 8004674:	dbb7      	blt.n	80045e6 <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	3301      	adds	r3, #1
 800467a:	75fb      	strb	r3, [r7, #23]
 800467c:	7dfa      	ldrb	r2, [r7, #23]
 800467e:	797b      	ldrb	r3, [r7, #5]
 8004680:	429a      	cmp	r2, r3
 8004682:	d3ad      	bcc.n	80045e0 <graphics_Glyph+0x28>
		}
	}
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	bd90      	pop	{r4, r7, pc}
	...

08004690 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af02      	add	r7, sp, #8
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4603      	mov	r3, r0
 800469a:	71fb      	strb	r3, [r7, #7]
 800469c:	460b      	mov	r3, r1
 800469e:	71bb      	strb	r3, [r7, #6]
 80046a0:	4613      	mov	r3, r2
 80046a2:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 80046a8:	e081      	b.n	80047ae <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 80046b0:	797a      	ldrb	r2, [r7, #5]
 80046b2:	4944      	ldr	r1, [pc, #272]	; (80047c4 <graphics_text+0x134>)
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	3310      	adds	r3, #16
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	7dba      	ldrb	r2, [r7, #22]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d30b      	bcc.n	80046e0 <graphics_text+0x50>
 80046c8:	797a      	ldrb	r2, [r7, #5]
 80046ca:	493e      	ldr	r1, [pc, #248]	; (80047c4 <graphics_text+0x134>)
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	3311      	adds	r3, #17
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	7dba      	ldrb	r2, [r7, #22]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d909      	bls.n	80046f4 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 80046e0:	797a      	ldrb	r2, [r7, #5]
 80046e2:	4938      	ldr	r1, [pc, #224]	; (80047c4 <graphics_text+0x134>)
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	3312      	adds	r3, #18
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 80046f4:	797a      	ldrb	r2, [r7, #5]
 80046f6:	4933      	ldr	r1, [pc, #204]	; (80047c4 <graphics_text+0x134>)
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	3310      	adds	r3, #16
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	7dba      	ldrb	r2, [r7, #22]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 800470c:	797a      	ldrb	r2, [r7, #5]
 800470e:	492d      	ldr	r1, [pc, #180]	; (80047c4 <graphics_text+0x134>)
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	3308      	adds	r3, #8
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8004720:	7d7b      	ldrb	r3, [r7, #21]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 8004726:	797a      	ldrb	r2, [r7, #5]
 8004728:	4926      	ldr	r1, [pc, #152]	; (80047c4 <graphics_text+0x134>)
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	330c      	adds	r3, #12
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	7dbb      	ldrb	r3, [r7, #22]
 800473a:	4413      	add	r3, r2
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8004740:	797a      	ldrb	r2, [r7, #5]
 8004742:	4920      	ldr	r1, [pc, #128]	; (80047c4 <graphics_text+0x134>)
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	3301      	adds	r3, #1
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 8004754:	797a      	ldrb	r2, [r7, #5]
 8004756:	491b      	ldr	r1, [pc, #108]	; (80047c4 <graphics_text+0x134>)
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 8004766:	797a      	ldrb	r2, [r7, #5]
 8004768:	4916      	ldr	r1, [pc, #88]	; (80047c4 <graphics_text+0x134>)
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	3304      	adds	r3, #4
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	7dbb      	ldrb	r3, [r7, #22]
 800477a:	7cf9      	ldrb	r1, [r7, #19]
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	7d39      	ldrb	r1, [r7, #20]
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]


		x+=width;
 800478a:	7dfa      	ldrb	r2, [r7, #23]
 800478c:	7d7b      	ldrb	r3, [r7, #21]
 800478e:	4413      	add	r3, r2
 8004790:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 8004792:	7d3c      	ldrb	r4, [r7, #20]
 8004794:	7d7a      	ldrb	r2, [r7, #21]
 8004796:	79b9      	ldrb	r1, [r7, #6]
 8004798:	7df8      	ldrb	r0, [r7, #23]
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	4623      	mov	r3, r4
 80047a4:	f7ff ff08 	bl	80045b8 <graphics_Glyph>
		str++;								/* point to next character in string */
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f47f af79 	bne.w	80046aa <graphics_text+0x1a>
	}

}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd90      	pop	{r4, r7, pc}
 80047c2:	bf00      	nop
 80047c4:	080185a0 	.word	0x080185a0

080047c8 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 80047d2:	2300      	movs	r3, #0
 80047d4:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 80047da:	f107 020c 	add.w	r2, r7, #12
 80047de:	2332      	movs	r3, #50	; 0x32
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	2302      	movs	r3, #2
 80047e4:	2178      	movs	r1, #120	; 0x78
 80047e6:	4803      	ldr	r0, [pc, #12]	; (80047f4 <ssd1306_command+0x2c>)
 80047e8:	f001 fd40 	bl	800626c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 80047ec:	bf00      	nop
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20007640 	.word	0x20007640

080047f8 <oled_update>:

void oled_update(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 80047fe:	2021      	movs	r0, #33	; 0x21
 8004800:	f7ff ffe2 	bl	80047c8 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 8004804:	2000      	movs	r0, #0
 8004806:	f7ff ffdf 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 800480a:	207f      	movs	r0, #127	; 0x7f
 800480c:	f7ff ffdc 	bl	80047c8 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8004810:	2022      	movs	r0, #34	; 0x22
 8004812:	f7ff ffd9 	bl	80047c8 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 8004816:	2000      	movs	r0, #0
 8004818:	f7ff ffd6 	bl	80047c8 <ssd1306_command>
  ssd1306_command(3); // Page end address
 800481c:	2003      	movs	r0, #3
 800481e:	f7ff ffd3 	bl	80047c8 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 8004822:	2340      	movs	r3, #64	; 0x40
 8004824:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 8004826:	2300      	movs	r3, #0
 8004828:	82fb      	strh	r3, [r7, #22]
 800482a:	e02d      	b.n	8004888 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 800482c:	2300      	movs	r3, #0
 800482e:	757b      	strb	r3, [r7, #21]
 8004830:	e024      	b.n	800487c <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 8004832:	2301      	movs	r3, #1
 8004834:	753b      	strb	r3, [r7, #20]
 8004836:	e012      	b.n	800485e <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8004838:	8af9      	ldrh	r1, [r7, #22]
 800483a:	7d7a      	ldrb	r2, [r7, #21]
 800483c:	7d3b      	ldrb	r3, [r7, #20]
 800483e:	4413      	add	r3, r2
 8004840:	1e5a      	subs	r2, r3, #1
 8004842:	7d3b      	ldrb	r3, [r7, #20]
 8004844:	4814      	ldr	r0, [pc, #80]	; (8004898 <oled_update+0xa0>)
 8004846:	01c9      	lsls	r1, r1, #7
 8004848:	4401      	add	r1, r0
 800484a:	440a      	add	r2, r1
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	f107 0118 	add.w	r1, r7, #24
 8004852:	440b      	add	r3, r1
 8004854:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8004858:	7d3b      	ldrb	r3, [r7, #20]
 800485a:	3301      	adds	r3, #1
 800485c:	753b      	strb	r3, [r7, #20]
 800485e:	7d3b      	ldrb	r3, [r7, #20]
 8004860:	2b10      	cmp	r3, #16
 8004862:	d9e9      	bls.n	8004838 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 8004864:	463a      	mov	r2, r7
 8004866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2311      	movs	r3, #17
 800486e:	2178      	movs	r1, #120	; 0x78
 8004870:	480a      	ldr	r0, [pc, #40]	; (800489c <oled_update+0xa4>)
 8004872:	f001 fcfb 	bl	800626c <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 8004876:	7d7b      	ldrb	r3, [r7, #21]
 8004878:	3310      	adds	r3, #16
 800487a:	757b      	strb	r3, [r7, #21]
 800487c:	7d7b      	ldrb	r3, [r7, #21]
 800487e:	2b7e      	cmp	r3, #126	; 0x7e
 8004880:	d9d7      	bls.n	8004832 <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 8004882:	8afb      	ldrh	r3, [r7, #22]
 8004884:	3301      	adds	r3, #1
 8004886:	82fb      	strh	r3, [r7, #22]
 8004888:	8afb      	ldrh	r3, [r7, #22]
 800488a:	2b03      	cmp	r3, #3
 800488c:	d9ce      	bls.n	800482c <oled_update+0x34>
		}
	}

}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	2000d424 	.word	0x2000d424
 800489c:	20007640 	.word	0x20007640

080048a0 <oled_init>:

void oled_init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 80048a6:	20ae      	movs	r0, #174	; 0xae
 80048a8:	f7ff ff8e 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 80048ac:	20d5      	movs	r0, #213	; 0xd5
 80048ae:	f7ff ff8b 	bl	80047c8 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 80048b2:	2080      	movs	r0, #128	; 0x80
 80048b4:	f7ff ff88 	bl	80047c8 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 80048b8:	20a8      	movs	r0, #168	; 0xa8
 80048ba:	f7ff ff85 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 80048be:	201f      	movs	r0, #31
 80048c0:	f7ff ff82 	bl	80047c8 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 80048c4:	20d3      	movs	r0, #211	; 0xd3
 80048c6:	f7ff ff7f 	bl	80047c8 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 80048ca:	2000      	movs	r0, #0
 80048cc:	f7ff ff7c 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 80048d0:	2040      	movs	r0, #64	; 0x40
 80048d2:	f7ff ff79 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 80048d6:	208d      	movs	r0, #141	; 0x8d
 80048d8:	f7ff ff76 	bl	80047c8 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 80048dc:	2014      	movs	r0, #20
 80048de:	f7ff ff73 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 80048e2:	2020      	movs	r0, #32
 80048e4:	f7ff ff70 	bl	80047c8 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 80048e8:	2000      	movs	r0, #0
 80048ea:	f7ff ff6d 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 80048ee:	20a1      	movs	r0, #161	; 0xa1
 80048f0:	f7ff ff6a 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 80048f4:	20c8      	movs	r0, #200	; 0xc8
 80048f6:	f7ff ff67 	bl	80047c8 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 80048fa:	20da      	movs	r0, #218	; 0xda
 80048fc:	f7ff ff64 	bl	80047c8 <ssd1306_command>
  ssd1306_command(0x02);
 8004900:	2002      	movs	r0, #2
 8004902:	f7ff ff61 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 8004906:	2081      	movs	r0, #129	; 0x81
 8004908:	f7ff ff5e 	bl	80047c8 <ssd1306_command>
  ssd1306_command(0x8F);
 800490c:	208f      	movs	r0, #143	; 0x8f
 800490e:	f7ff ff5b 	bl	80047c8 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8004912:	20d9      	movs	r0, #217	; 0xd9
 8004914:	f7ff ff58 	bl	80047c8 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8004918:	20f1      	movs	r0, #241	; 0xf1
 800491a:	f7ff ff55 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 800491e:	20db      	movs	r0, #219	; 0xdb
 8004920:	f7ff ff52 	bl	80047c8 <ssd1306_command>
  ssd1306_command(0x40);
 8004924:	2040      	movs	r0, #64	; 0x40
 8004926:	f7ff ff4f 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 800492a:	20a4      	movs	r0, #164	; 0xa4
 800492c:	f7ff ff4c 	bl	80047c8 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8004930:	20a6      	movs	r0, #166	; 0xa6
 8004932:	f7ff ff49 	bl	80047c8 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 8004936:	202e      	movs	r0, #46	; 0x2e
 8004938:	f7ff ff46 	bl	80047c8 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 800493c:	20af      	movs	r0, #175	; 0xaf
 800493e:	f7ff ff43 	bl	80047c8 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8004942:	2300      	movs	r3, #0
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	e013      	b.n	8004970 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8004948:	2300      	movs	r3, #0
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	e00a      	b.n	8004964 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 800494e:	4a0c      	ldr	r2, [pc, #48]	; (8004980 <oled_init+0xe0>)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	01db      	lsls	r3, r3, #7
 8004954:	441a      	add	r2, r3
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	4413      	add	r3, r2
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	3301      	adds	r3, #1
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b7f      	cmp	r3, #127	; 0x7f
 8004968:	ddf1      	ble.n	800494e <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3301      	adds	r3, #1
 800496e:	607b      	str	r3, [r7, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b03      	cmp	r3, #3
 8004974:	dde8      	ble.n	8004948 <oled_init+0xa8>
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	2000d424 	.word	0x2000d424

08004984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004988:	480d      	ldr	r0, [pc, #52]	; (80049c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800498a:	490e      	ldr	r1, [pc, #56]	; (80049c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800498c:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800498e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004990:	e002      	b.n	8004998 <LoopCopyDataInit>

08004992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004996:	3304      	adds	r3, #4

08004998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800499a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800499c:	d3f9      	bcc.n	8004992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800499e:	4a0b      	ldr	r2, [pc, #44]	; (80049cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049a0:	4c0b      	ldr	r4, [pc, #44]	; (80049d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80049a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049a4:	e001      	b.n	80049aa <LoopFillZerobss>

080049a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049a8:	3204      	adds	r2, #4

080049aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049ac:	d3fb      	bcc.n	80049a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80049ae:	f7ff fd77 	bl	80044a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049b2:	f00c fedb 	bl	801176c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049b6:	f7fd fb59 	bl	800206c <main>
  bx  lr    
 80049ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80049bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049c4:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 80049c8:	0801ae2c 	.word	0x0801ae2c
  ldr r2, =_sbss
 80049cc:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 80049d0:	2000ef50 	.word	0x2000ef50

080049d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049d4:	e7fe      	b.n	80049d4 <ADC_IRQHandler>
	...

080049d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049dc:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <HAL_Init+0x40>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0d      	ldr	r2, [pc, #52]	; (8004a18 <HAL_Init+0x40>)
 80049e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_Init+0x40>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <HAL_Init+0x40>)
 80049ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_Init+0x40>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <HAL_Init+0x40>)
 80049fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a00:	2003      	movs	r0, #3
 8004a02:	f000 fb82 	bl	800510a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a06:	200f      	movs	r0, #15
 8004a08:	f7ff fbd4 	bl	80041b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a0c:	f7ff f8f0 	bl	8003bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40023c00 	.word	0x40023c00

08004a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_IncTick+0x20>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <HAL_IncTick+0x24>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <HAL_IncTick+0x24>)
 8004a2e:	6013      	str	r3, [r2, #0]
}
 8004a30:	bf00      	nop
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	20000034 	.word	0x20000034
 8004a40:	2000d624 	.word	0x2000d624

08004a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return uwTick;
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <HAL_GetTick+0x14>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	2000d624 	.word	0x2000d624

08004a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a64:	f7ff ffee 	bl	8004a44 <HAL_GetTick>
 8004a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a74:	d005      	beq.n	8004a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a76:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <HAL_Delay+0x44>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a82:	bf00      	nop
 8004a84:	f7ff ffde 	bl	8004a44 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d8f7      	bhi.n	8004a84 <HAL_Delay+0x28>
  {
  }
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000034 	.word	0x20000034

08004aa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e033      	b.n	8004b22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff f8c0 	bl	8003c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d118      	bne.n	8004b14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004aea:	f023 0302 	bic.w	r3, r3, #2
 8004aee:	f043 0202 	orr.w	r2, r3, #2
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f93a 	bl	8004d70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f023 0303 	bic.w	r3, r3, #3
 8004b0a:	f043 0201 	orr.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
 8004b12:	e001      	b.n	8004b18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x1c>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e105      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x228>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b09      	cmp	r3, #9
 8004b56:	d925      	bls.n	8004ba4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68d9      	ldr	r1, [r3, #12]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	4613      	mov	r3, r2
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3b1e      	subs	r3, #30
 8004b6e:	2207      	movs	r2, #7
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	43da      	mvns	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68d9      	ldr	r1, [r3, #12]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	4618      	mov	r0, r3
 8004b90:	4603      	mov	r3, r0
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	4403      	add	r3, r0
 8004b96:	3b1e      	subs	r3, #30
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	e022      	b.n	8004bea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6919      	ldr	r1, [r3, #16]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4413      	add	r3, r2
 8004bb8:	2207      	movs	r2, #7
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43da      	mvns	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6919      	ldr	r1, [r3, #16]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	4618      	mov	r0, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4403      	add	r3, r0
 8004be0:	409a      	lsls	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b06      	cmp	r3, #6
 8004bf0:	d824      	bhi.n	8004c3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	3b05      	subs	r3, #5
 8004c04:	221f      	movs	r2, #31
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	400a      	ands	r2, r1
 8004c12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	4618      	mov	r0, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3b05      	subs	r3, #5
 8004c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	635a      	str	r2, [r3, #52]	; 0x34
 8004c3a:	e04c      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b0c      	cmp	r3, #12
 8004c42:	d824      	bhi.n	8004c8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	3b23      	subs	r3, #35	; 0x23
 8004c56:	221f      	movs	r2, #31
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43da      	mvns	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	400a      	ands	r2, r1
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	4618      	mov	r0, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3b23      	subs	r3, #35	; 0x23
 8004c80:	fa00 f203 	lsl.w	r2, r0, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c8c:	e023      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	3b41      	subs	r3, #65	; 0x41
 8004ca0:	221f      	movs	r2, #31
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43da      	mvns	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	400a      	ands	r2, r1
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3b41      	subs	r3, #65	; 0x41
 8004cca:	fa00 f203 	lsl.w	r2, r0, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cd6:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <HAL_ADC_ConfigChannel+0x234>)
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a21      	ldr	r2, [pc, #132]	; (8004d64 <HAL_ADC_ConfigChannel+0x238>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d109      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x1cc>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b12      	cmp	r3, #18
 8004cea:	d105      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <HAL_ADC_ConfigChannel+0x238>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d123      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x21e>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d003      	beq.n	8004d12 <HAL_ADC_ConfigChannel+0x1e6>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b11      	cmp	r3, #17
 8004d10:	d11b      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	d111      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <HAL_ADC_ConfigChannel+0x23c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a10      	ldr	r2, [pc, #64]	; (8004d6c <HAL_ADC_ConfigChannel+0x240>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	0c9a      	lsrs	r2, r3, #18
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d3c:	e002      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f9      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40012300 	.word	0x40012300
 8004d64:	40012000 	.word	0x40012000
 8004d68:	2000002c 	.word	0x2000002c
 8004d6c:	431bde83 	.word	0x431bde83

08004d70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d78:	4b79      	ldr	r3, [pc, #484]	; (8004f60 <ADC_Init+0x1f0>)
 8004d7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004da4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6859      	ldr	r1, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	021a      	lsls	r2, r3, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6859      	ldr	r1, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6899      	ldr	r1, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	4a58      	ldr	r2, [pc, #352]	; (8004f64 <ADC_Init+0x1f4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d022      	beq.n	8004e4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6899      	ldr	r1, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6899      	ldr	r1, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	609a      	str	r2, [r3, #8]
 8004e4c:	e00f      	b.n	8004e6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0202 	bic.w	r2, r2, #2
 8004e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6899      	ldr	r1, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	7e1b      	ldrb	r3, [r3, #24]
 8004e88:	005a      	lsls	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01b      	beq.n	8004ed4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eaa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004eba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	035a      	lsls	r2, r3, #13
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	e007      	b.n	8004ee4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	051a      	lsls	r2, r3, #20
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6899      	ldr	r1, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f26:	025a      	lsls	r2, r3, #9
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6899      	ldr	r1, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	029a      	lsls	r2, r3, #10
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40012300 	.word	0x40012300
 8004f64:	0f000001 	.word	0x0f000001

08004f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f78:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <__NVIC_SetPriorityGrouping+0x44>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f84:	4013      	ands	r3, r2
 8004f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f9a:	4a04      	ldr	r2, [pc, #16]	; (8004fac <__NVIC_SetPriorityGrouping+0x44>)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	60d3      	str	r3, [r2, #12]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	e000ed00 	.word	0xe000ed00

08004fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	0a1b      	lsrs	r3, r3, #8
 8004fba:	f003 0307 	and.w	r3, r3, #7
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	db0b      	blt.n	8004ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	f003 021f 	and.w	r2, r3, #31
 8004fe4:	4907      	ldr	r1, [pc, #28]	; (8005004 <__NVIC_EnableIRQ+0x38>)
 8004fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2001      	movs	r0, #1
 8004fee:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	e000e100 	.word	0xe000e100

08005008 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005016:	2b00      	cmp	r3, #0
 8005018:	db12      	blt.n	8005040 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	f003 021f 	and.w	r2, r3, #31
 8005020:	490a      	ldr	r1, [pc, #40]	; (800504c <__NVIC_DisableIRQ+0x44>)
 8005022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2001      	movs	r0, #1
 800502a:	fa00 f202 	lsl.w	r2, r0, r2
 800502e:	3320      	adds	r3, #32
 8005030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005034:	f3bf 8f4f 	dsb	sy
}
 8005038:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800503a:	f3bf 8f6f 	isb	sy
}
 800503e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000e100 	.word	0xe000e100

08005050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	6039      	str	r1, [r7, #0]
 800505a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800505c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005060:	2b00      	cmp	r3, #0
 8005062:	db0a      	blt.n	800507a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	490c      	ldr	r1, [pc, #48]	; (800509c <__NVIC_SetPriority+0x4c>)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	0112      	lsls	r2, r2, #4
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	440b      	add	r3, r1
 8005074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005078:	e00a      	b.n	8005090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4908      	ldr	r1, [pc, #32]	; (80050a0 <__NVIC_SetPriority+0x50>)
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	3b04      	subs	r3, #4
 8005088:	0112      	lsls	r2, r2, #4
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	440b      	add	r3, r1
 800508e:	761a      	strb	r2, [r3, #24]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	e000e100 	.word	0xe000e100
 80050a0:	e000ed00 	.word	0xe000ed00

080050a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b089      	sub	sp, #36	; 0x24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f1c3 0307 	rsb	r3, r3, #7
 80050be:	2b04      	cmp	r3, #4
 80050c0:	bf28      	it	cs
 80050c2:	2304      	movcs	r3, #4
 80050c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3304      	adds	r3, #4
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	d902      	bls.n	80050d4 <NVIC_EncodePriority+0x30>
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	3b03      	subs	r3, #3
 80050d2:	e000      	b.n	80050d6 <NVIC_EncodePriority+0x32>
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43da      	mvns	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	401a      	ands	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	fa01 f303 	lsl.w	r3, r1, r3
 80050f6:	43d9      	mvns	r1, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050fc:	4313      	orrs	r3, r2
         );
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3724      	adds	r7, #36	; 0x24
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff ff28 	bl	8004f68 <__NVIC_SetPriorityGrouping>
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005132:	f7ff ff3d 	bl	8004fb0 <__NVIC_GetPriorityGrouping>
 8005136:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	6978      	ldr	r0, [r7, #20]
 800513e:	f7ff ffb1 	bl	80050a4 <NVIC_EncodePriority>
 8005142:	4602      	mov	r2, r0
 8005144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005148:	4611      	mov	r1, r2
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff ff80 	bl	8005050 <__NVIC_SetPriority>
}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff ff30 	bl	8004fcc <__NVIC_EnableIRQ>
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800517e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff ff40 	bl	8005008 <__NVIC_DisableIRQ>
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800519c:	f7ff fc52 	bl	8004a44 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e099      	b.n	80052e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051cc:	e00f      	b.n	80051ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051ce:	f7ff fc39 	bl	8004a44 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b05      	cmp	r3, #5
 80051da:	d908      	bls.n	80051ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2203      	movs	r2, #3
 80051e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e078      	b.n	80052e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e8      	bne.n	80051ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <HAL_DMA_Init+0x158>)
 8005208:	4013      	ands	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800521a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	2b04      	cmp	r3, #4
 8005246:	d107      	bne.n	8005258 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	4313      	orrs	r3, r2
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0307 	bic.w	r3, r3, #7
 800526e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2b04      	cmp	r3, #4
 8005280:	d117      	bne.n	80052b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00e      	beq.n	80052b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fb5f 	bl	8005958 <DMA_CheckFifoParam>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2240      	movs	r2, #64	; 0x40
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052ae:	2301      	movs	r3, #1
 80052b0:	e016      	b.n	80052e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fb16 	bl	80058ec <DMA_CalcBaseAndBitshift>
 80052c0:	4603      	mov	r3, r0
 80052c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	223f      	movs	r2, #63	; 0x3f
 80052ca:	409a      	lsls	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	f010803f 	.word	0xf010803f

080052ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e050      	b.n	80053a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d101      	bne.n	800530e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800530a:	2302      	movs	r3, #2
 800530c:	e048      	b.n	80053a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2200      	movs	r2, #0
 800533c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2221      	movs	r2, #33	; 0x21
 800534c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 facc 	bl	80058ec <DMA_CalcBaseAndBitshift>
 8005354:	4603      	mov	r3, r0
 8005356:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005380:	223f      	movs	r2, #63	; 0x3f
 8005382:	409a      	lsls	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_DMA_Start_IT+0x26>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e040      	b.n	8005450 <HAL_DMA_Start_IT+0xa8>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d12f      	bne.n	8005442 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 fa4a 	bl	8005890 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005400:	223f      	movs	r2, #63	; 0x3f
 8005402:	409a      	lsls	r2, r3
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0216 	orr.w	r2, r2, #22
 8005416:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0208 	orr.w	r2, r2, #8
 800542e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	e005      	b.n	800544e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800544a:	2302      	movs	r3, #2
 800544c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800544e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005464:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005466:	f7ff faed 	bl	8004a44 <HAL_GetTick>
 800546a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d008      	beq.n	800548a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2280      	movs	r2, #128	; 0x80
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e052      	b.n	8005530 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0216 	bic.w	r2, r2, #22
 8005498:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695a      	ldr	r2, [r3, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <HAL_DMA_Abort+0x62>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0208 	bic.w	r2, r2, #8
 80054c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054da:	e013      	b.n	8005504 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054dc:	f7ff fab2 	bl	8004a44 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d90c      	bls.n	8005504 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2203      	movs	r2, #3
 80054f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e015      	b.n	8005530 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e4      	bne.n	80054dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005516:	223f      	movs	r2, #63	; 0x3f
 8005518:	409a      	lsls	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d004      	beq.n	8005556 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2280      	movs	r2, #128	; 0x80
 8005550:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e00c      	b.n	8005570 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2205      	movs	r2, #5
 800555a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005588:	4b92      	ldr	r3, [pc, #584]	; (80057d4 <HAL_DMA_IRQHandler+0x258>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a92      	ldr	r2, [pc, #584]	; (80057d8 <HAL_DMA_IRQHandler+0x25c>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	0a9b      	lsrs	r3, r3, #10
 8005594:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	2208      	movs	r2, #8
 80055a8:	409a      	lsls	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01a      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d013      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0204 	bic.w	r2, r2, #4
 80055ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d4:	2208      	movs	r2, #8
 80055d6:	409a      	lsls	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e0:	f043 0201 	orr.w	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ec:	2201      	movs	r2, #1
 80055ee:	409a      	lsls	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d012      	beq.n	800561e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560a:	2201      	movs	r2, #1
 800560c:	409a      	lsls	r2, r3
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005616:	f043 0202 	orr.w	r2, r3, #2
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005622:	2204      	movs	r2, #4
 8005624:	409a      	lsls	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d012      	beq.n	8005654 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005640:	2204      	movs	r2, #4
 8005642:	409a      	lsls	r2, r3
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564c:	f043 0204 	orr.w	r2, r3, #4
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005658:	2210      	movs	r2, #16
 800565a:	409a      	lsls	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d043      	beq.n	80056ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d03c      	beq.n	80056ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005676:	2210      	movs	r2, #16
 8005678:	409a      	lsls	r2, r3
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d018      	beq.n	80056be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d108      	bne.n	80056ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d024      	beq.n	80056ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	4798      	blx	r3
 80056aa:	e01f      	b.n	80056ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01b      	beq.n	80056ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	4798      	blx	r3
 80056bc:	e016      	b.n	80056ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d107      	bne.n	80056dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0208 	bic.w	r2, r2, #8
 80056da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f0:	2220      	movs	r2, #32
 80056f2:	409a      	lsls	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 808e 	beq.w	800581a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 8086 	beq.w	800581a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005712:	2220      	movs	r2, #32
 8005714:	409a      	lsls	r2, r3
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b05      	cmp	r3, #5
 8005724:	d136      	bne.n	8005794 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0216 	bic.w	r2, r2, #22
 8005734:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695a      	ldr	r2, [r3, #20]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005744:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <HAL_DMA_IRQHandler+0x1da>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0208 	bic.w	r2, r2, #8
 8005764:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576a:	223f      	movs	r2, #63	; 0x3f
 800576c:	409a      	lsls	r2, r3
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d07d      	beq.n	8005886 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	4798      	blx	r3
        }
        return;
 8005792:	e078      	b.n	8005886 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01c      	beq.n	80057dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d108      	bne.n	80057c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d030      	beq.n	800581a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4798      	blx	r3
 80057c0:	e02b      	b.n	800581a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d027      	beq.n	800581a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	4798      	blx	r3
 80057d2:	e022      	b.n	800581a <HAL_DMA_IRQHandler+0x29e>
 80057d4:	2000002c 	.word	0x2000002c
 80057d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10f      	bne.n	800580a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0210 	bic.w	r2, r2, #16
 80057f8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	2b00      	cmp	r3, #0
 8005820:	d032      	beq.n	8005888 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d022      	beq.n	8005874 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2205      	movs	r2, #5
 8005832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	3301      	adds	r3, #1
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	429a      	cmp	r2, r3
 8005850:	d307      	bcc.n	8005862 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f2      	bne.n	8005846 <HAL_DMA_IRQHandler+0x2ca>
 8005860:	e000      	b.n	8005864 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005862:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	4798      	blx	r3
 8005884:	e000      	b.n	8005888 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005886:	bf00      	nop
    }
  }
}
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop

08005890 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b40      	cmp	r3, #64	; 0x40
 80058bc:	d108      	bne.n	80058d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80058ce:	e007      	b.n	80058e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	60da      	str	r2, [r3, #12]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	3b10      	subs	r3, #16
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <DMA_CalcBaseAndBitshift+0x64>)
 80058fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005906:	4a13      	ldr	r2, [pc, #76]	; (8005954 <DMA_CalcBaseAndBitshift+0x68>)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b03      	cmp	r3, #3
 8005918:	d909      	bls.n	800592e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005922:	f023 0303 	bic.w	r3, r3, #3
 8005926:	1d1a      	adds	r2, r3, #4
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	659a      	str	r2, [r3, #88]	; 0x58
 800592c:	e007      	b.n	800593e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	aaaaaaab 	.word	0xaaaaaaab
 8005954:	0801aa08 	.word	0x0801aa08

08005958 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d11f      	bne.n	80059b2 <DMA_CheckFifoParam+0x5a>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b03      	cmp	r3, #3
 8005976:	d856      	bhi.n	8005a26 <DMA_CheckFifoParam+0xce>
 8005978:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <DMA_CheckFifoParam+0x28>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	08005991 	.word	0x08005991
 8005984:	080059a3 	.word	0x080059a3
 8005988:	08005991 	.word	0x08005991
 800598c:	08005a27 	.word	0x08005a27
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d046      	beq.n	8005a2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a0:	e043      	b.n	8005a2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059aa:	d140      	bne.n	8005a2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b0:	e03d      	b.n	8005a2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ba:	d121      	bne.n	8005a00 <DMA_CheckFifoParam+0xa8>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d837      	bhi.n	8005a32 <DMA_CheckFifoParam+0xda>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <DMA_CheckFifoParam+0x70>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059d9 	.word	0x080059d9
 80059cc:	080059df 	.word	0x080059df
 80059d0:	080059d9 	.word	0x080059d9
 80059d4:	080059f1 	.word	0x080059f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
      break;
 80059dc:	e030      	b.n	8005a40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d025      	beq.n	8005a36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ee:	e022      	b.n	8005a36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059f8:	d11f      	bne.n	8005a3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059fe:	e01c      	b.n	8005a3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d903      	bls.n	8005a0e <DMA_CheckFifoParam+0xb6>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d003      	beq.n	8005a14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a0c:	e018      	b.n	8005a40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	73fb      	strb	r3, [r7, #15]
      break;
 8005a12:	e015      	b.n	8005a40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00e      	beq.n	8005a3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	73fb      	strb	r3, [r7, #15]
      break;
 8005a24:	e00b      	b.n	8005a3e <DMA_CheckFifoParam+0xe6>
      break;
 8005a26:	bf00      	nop
 8005a28:	e00a      	b.n	8005a40 <DMA_CheckFifoParam+0xe8>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e008      	b.n	8005a40 <DMA_CheckFifoParam+0xe8>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e006      	b.n	8005a40 <DMA_CheckFifoParam+0xe8>
      break;
 8005a32:	bf00      	nop
 8005a34:	e004      	b.n	8005a40 <DMA_CheckFifoParam+0xe8>
      break;
 8005a36:	bf00      	nop
 8005a38:	e002      	b.n	8005a40 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a3a:	bf00      	nop
 8005a3c:	e000      	b.n	8005a40 <DMA_CheckFifoParam+0xe8>
      break;
 8005a3e:	bf00      	nop
    }
  } 
  
  return status; 
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop

08005a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b089      	sub	sp, #36	; 0x24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	e16b      	b.n	8005d44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	f040 815a 	bne.w	8005d3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d005      	beq.n	8005aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d130      	bne.n	8005b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	2203      	movs	r2, #3
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ad8:	2201      	movs	r2, #1
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 0201 	and.w	r2, r3, #1
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 0303 	and.w	r3, r3, #3
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d017      	beq.n	8005b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4013      	ands	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d123      	bne.n	8005b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	08da      	lsrs	r2, r3, #3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3208      	adds	r2, #8
 8005b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	220f      	movs	r2, #15
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	08da      	lsrs	r2, r3, #3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3208      	adds	r2, #8
 8005b8e:	69b9      	ldr	r1, [r7, #24]
 8005b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	2203      	movs	r2, #3
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f003 0203 	and.w	r2, r3, #3
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80b4 	beq.w	8005d3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	4b60      	ldr	r3, [pc, #384]	; (8005d5c <HAL_GPIO_Init+0x30c>)
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	4a5f      	ldr	r2, [pc, #380]	; (8005d5c <HAL_GPIO_Init+0x30c>)
 8005be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be4:	6453      	str	r3, [r2, #68]	; 0x44
 8005be6:	4b5d      	ldr	r3, [pc, #372]	; (8005d5c <HAL_GPIO_Init+0x30c>)
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bf2:	4a5b      	ldr	r2, [pc, #364]	; (8005d60 <HAL_GPIO_Init+0x310>)
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	089b      	lsrs	r3, r3, #2
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	220f      	movs	r2, #15
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4013      	ands	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a52      	ldr	r2, [pc, #328]	; (8005d64 <HAL_GPIO_Init+0x314>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d02b      	beq.n	8005c76 <HAL_GPIO_Init+0x226>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a51      	ldr	r2, [pc, #324]	; (8005d68 <HAL_GPIO_Init+0x318>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d025      	beq.n	8005c72 <HAL_GPIO_Init+0x222>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a50      	ldr	r2, [pc, #320]	; (8005d6c <HAL_GPIO_Init+0x31c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d01f      	beq.n	8005c6e <HAL_GPIO_Init+0x21e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a4f      	ldr	r2, [pc, #316]	; (8005d70 <HAL_GPIO_Init+0x320>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d019      	beq.n	8005c6a <HAL_GPIO_Init+0x21a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a4e      	ldr	r2, [pc, #312]	; (8005d74 <HAL_GPIO_Init+0x324>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d013      	beq.n	8005c66 <HAL_GPIO_Init+0x216>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a4d      	ldr	r2, [pc, #308]	; (8005d78 <HAL_GPIO_Init+0x328>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00d      	beq.n	8005c62 <HAL_GPIO_Init+0x212>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a4c      	ldr	r2, [pc, #304]	; (8005d7c <HAL_GPIO_Init+0x32c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <HAL_GPIO_Init+0x20e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a4b      	ldr	r2, [pc, #300]	; (8005d80 <HAL_GPIO_Init+0x330>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d101      	bne.n	8005c5a <HAL_GPIO_Init+0x20a>
 8005c56:	2307      	movs	r3, #7
 8005c58:	e00e      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	e00c      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c5e:	2306      	movs	r3, #6
 8005c60:	e00a      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c62:	2305      	movs	r3, #5
 8005c64:	e008      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c66:	2304      	movs	r3, #4
 8005c68:	e006      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e004      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e002      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c76:	2300      	movs	r3, #0
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	f002 0203 	and.w	r2, r2, #3
 8005c7e:	0092      	lsls	r2, r2, #2
 8005c80:	4093      	lsls	r3, r2
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c88:	4935      	ldr	r1, [pc, #212]	; (8005d60 <HAL_GPIO_Init+0x310>)
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	089b      	lsrs	r3, r3, #2
 8005c8e:	3302      	adds	r3, #2
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c96:	4b3b      	ldr	r3, [pc, #236]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cba:	4a32      	ldr	r2, [pc, #200]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005cc0:	4b30      	ldr	r3, [pc, #192]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ce4:	4a27      	ldr	r2, [pc, #156]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cea:	4b26      	ldr	r3, [pc, #152]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d0e:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d14:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4013      	ands	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d38:	4a12      	ldr	r2, [pc, #72]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	3301      	adds	r3, #1
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2b0f      	cmp	r3, #15
 8005d48:	f67f ae90 	bls.w	8005a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	3724      	adds	r7, #36	; 0x24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	40013800 	.word	0x40013800
 8005d64:	40020000 	.word	0x40020000
 8005d68:	40020400 	.word	0x40020400
 8005d6c:	40020800 	.word	0x40020800
 8005d70:	40020c00 	.word	0x40020c00
 8005d74:	40021000 	.word	0x40021000
 8005d78:	40021400 	.word	0x40021400
 8005d7c:	40021800 	.word	0x40021800
 8005d80:	40021c00 	.word	0x40021c00
 8005d84:	40013c00 	.word	0x40013c00

08005d88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	e0cd      	b.n	8005f40 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005da4:	2201      	movs	r2, #1
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4013      	ands	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	f040 80bd 	bne.w	8005f3a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005dc0:	4a65      	ldr	r2, [pc, #404]	; (8005f58 <HAL_GPIO_DeInit+0x1d0>)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	089b      	lsrs	r3, r3, #2
 8005dc6:	3302      	adds	r3, #2
 8005dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dcc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	220f      	movs	r2, #15
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	4013      	ands	r3, r2
 8005de0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a5d      	ldr	r2, [pc, #372]	; (8005f5c <HAL_GPIO_DeInit+0x1d4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d02b      	beq.n	8005e42 <HAL_GPIO_DeInit+0xba>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a5c      	ldr	r2, [pc, #368]	; (8005f60 <HAL_GPIO_DeInit+0x1d8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d025      	beq.n	8005e3e <HAL_GPIO_DeInit+0xb6>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a5b      	ldr	r2, [pc, #364]	; (8005f64 <HAL_GPIO_DeInit+0x1dc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d01f      	beq.n	8005e3a <HAL_GPIO_DeInit+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a5a      	ldr	r2, [pc, #360]	; (8005f68 <HAL_GPIO_DeInit+0x1e0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d019      	beq.n	8005e36 <HAL_GPIO_DeInit+0xae>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a59      	ldr	r2, [pc, #356]	; (8005f6c <HAL_GPIO_DeInit+0x1e4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d013      	beq.n	8005e32 <HAL_GPIO_DeInit+0xaa>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a58      	ldr	r2, [pc, #352]	; (8005f70 <HAL_GPIO_DeInit+0x1e8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00d      	beq.n	8005e2e <HAL_GPIO_DeInit+0xa6>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a57      	ldr	r2, [pc, #348]	; (8005f74 <HAL_GPIO_DeInit+0x1ec>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d007      	beq.n	8005e2a <HAL_GPIO_DeInit+0xa2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a56      	ldr	r2, [pc, #344]	; (8005f78 <HAL_GPIO_DeInit+0x1f0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d101      	bne.n	8005e26 <HAL_GPIO_DeInit+0x9e>
 8005e22:	2307      	movs	r3, #7
 8005e24:	e00e      	b.n	8005e44 <HAL_GPIO_DeInit+0xbc>
 8005e26:	2308      	movs	r3, #8
 8005e28:	e00c      	b.n	8005e44 <HAL_GPIO_DeInit+0xbc>
 8005e2a:	2306      	movs	r3, #6
 8005e2c:	e00a      	b.n	8005e44 <HAL_GPIO_DeInit+0xbc>
 8005e2e:	2305      	movs	r3, #5
 8005e30:	e008      	b.n	8005e44 <HAL_GPIO_DeInit+0xbc>
 8005e32:	2304      	movs	r3, #4
 8005e34:	e006      	b.n	8005e44 <HAL_GPIO_DeInit+0xbc>
 8005e36:	2303      	movs	r3, #3
 8005e38:	e004      	b.n	8005e44 <HAL_GPIO_DeInit+0xbc>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e002      	b.n	8005e44 <HAL_GPIO_DeInit+0xbc>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <HAL_GPIO_DeInit+0xbc>
 8005e42:	2300      	movs	r3, #0
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	f002 0203 	and.w	r2, r2, #3
 8005e4a:	0092      	lsls	r2, r2, #2
 8005e4c:	4093      	lsls	r3, r2
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d132      	bne.n	8005eba <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e54:	4b49      	ldr	r3, [pc, #292]	; (8005f7c <HAL_GPIO_DeInit+0x1f4>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	4947      	ldr	r1, [pc, #284]	; (8005f7c <HAL_GPIO_DeInit+0x1f4>)
 8005e5e:	4013      	ands	r3, r2
 8005e60:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e62:	4b46      	ldr	r3, [pc, #280]	; (8005f7c <HAL_GPIO_DeInit+0x1f4>)
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	4944      	ldr	r1, [pc, #272]	; (8005f7c <HAL_GPIO_DeInit+0x1f4>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005e70:	4b42      	ldr	r3, [pc, #264]	; (8005f7c <HAL_GPIO_DeInit+0x1f4>)
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	43db      	mvns	r3, r3
 8005e78:	4940      	ldr	r1, [pc, #256]	; (8005f7c <HAL_GPIO_DeInit+0x1f4>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005e7e:	4b3f      	ldr	r3, [pc, #252]	; (8005f7c <HAL_GPIO_DeInit+0x1f4>)
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	493d      	ldr	r1, [pc, #244]	; (8005f7c <HAL_GPIO_DeInit+0x1f4>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	220f      	movs	r2, #15
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005e9c:	4a2e      	ldr	r2, [pc, #184]	; (8005f58 <HAL_GPIO_DeInit+0x1d0>)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	089b      	lsrs	r3, r3, #2
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	43da      	mvns	r2, r3
 8005eac:	482a      	ldr	r0, [pc, #168]	; (8005f58 <HAL_GPIO_DeInit+0x1d0>)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	089b      	lsrs	r3, r3, #2
 8005eb2:	400a      	ands	r2, r1
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	2103      	movs	r1, #3
 8005ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	401a      	ands	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	08da      	lsrs	r2, r3, #3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3208      	adds	r2, #8
 8005ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	220f      	movs	r2, #15
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	08d2      	lsrs	r2, r2, #3
 8005ef0:	4019      	ands	r1, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3208      	adds	r2, #8
 8005ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	2103      	movs	r1, #3
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	2101      	movs	r1, #1
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	401a      	ands	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	2103      	movs	r1, #3
 8005f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f32:	43db      	mvns	r3, r3
 8005f34:	401a      	ands	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b0f      	cmp	r3, #15
 8005f44:	f67f af2e 	bls.w	8005da4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40013800 	.word	0x40013800
 8005f5c:	40020000 	.word	0x40020000
 8005f60:	40020400 	.word	0x40020400
 8005f64:	40020800 	.word	0x40020800
 8005f68:	40020c00 	.word	0x40020c00
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40021400 	.word	0x40021400
 8005f74:	40021800 	.word	0x40021800
 8005f78:	40021c00 	.word	0x40021c00
 8005f7c:	40013c00 	.word	0x40013c00

08005f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	887b      	ldrh	r3, [r7, #2]
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
 8005f9c:	e001      	b.n	8005fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	807b      	strh	r3, [r7, #2]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fc0:	787b      	ldrb	r3, [r7, #1]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fc6:	887a      	ldrh	r2, [r7, #2]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fcc:	e003      	b.n	8005fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fce:	887b      	ldrh	r3, [r7, #2]
 8005fd0:	041a      	lsls	r2, r3, #16
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	619a      	str	r2, [r3, #24]
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e12b      	b.n	800624e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fd fe60 	bl	8003cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2224      	movs	r2, #36	; 0x24
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006048:	f002 feda 	bl	8008e00 <HAL_RCC_GetPCLK1Freq>
 800604c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	4a81      	ldr	r2, [pc, #516]	; (8006258 <HAL_I2C_Init+0x274>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d807      	bhi.n	8006068 <HAL_I2C_Init+0x84>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4a80      	ldr	r2, [pc, #512]	; (800625c <HAL_I2C_Init+0x278>)
 800605c:	4293      	cmp	r3, r2
 800605e:	bf94      	ite	ls
 8006060:	2301      	movls	r3, #1
 8006062:	2300      	movhi	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	e006      	b.n	8006076 <HAL_I2C_Init+0x92>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4a7d      	ldr	r2, [pc, #500]	; (8006260 <HAL_I2C_Init+0x27c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	bf94      	ite	ls
 8006070:	2301      	movls	r3, #1
 8006072:	2300      	movhi	r3, #0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e0e7      	b.n	800624e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a78      	ldr	r2, [pc, #480]	; (8006264 <HAL_I2C_Init+0x280>)
 8006082:	fba2 2303 	umull	r2, r3, r2, r3
 8006086:	0c9b      	lsrs	r3, r3, #18
 8006088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4a6a      	ldr	r2, [pc, #424]	; (8006258 <HAL_I2C_Init+0x274>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d802      	bhi.n	80060b8 <HAL_I2C_Init+0xd4>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	3301      	adds	r3, #1
 80060b6:	e009      	b.n	80060cc <HAL_I2C_Init+0xe8>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060be:	fb02 f303 	mul.w	r3, r2, r3
 80060c2:	4a69      	ldr	r2, [pc, #420]	; (8006268 <HAL_I2C_Init+0x284>)
 80060c4:	fba2 2303 	umull	r2, r3, r2, r3
 80060c8:	099b      	lsrs	r3, r3, #6
 80060ca:	3301      	adds	r3, #1
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	495c      	ldr	r1, [pc, #368]	; (8006258 <HAL_I2C_Init+0x274>)
 80060e8:	428b      	cmp	r3, r1
 80060ea:	d819      	bhi.n	8006120 <HAL_I2C_Init+0x13c>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	1e59      	subs	r1, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006100:	400b      	ands	r3, r1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_I2C_Init+0x138>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1e59      	subs	r1, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	fbb1 f3f3 	udiv	r3, r1, r3
 8006114:	3301      	adds	r3, #1
 8006116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611a:	e051      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 800611c:	2304      	movs	r3, #4
 800611e:	e04f      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d111      	bne.n	800614c <HAL_I2C_Init+0x168>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	1e58      	subs	r0, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6859      	ldr	r1, [r3, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	440b      	add	r3, r1
 8006136:	fbb0 f3f3 	udiv	r3, r0, r3
 800613a:	3301      	adds	r3, #1
 800613c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006140:	2b00      	cmp	r3, #0
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	e012      	b.n	8006172 <HAL_I2C_Init+0x18e>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	1e58      	subs	r0, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6859      	ldr	r1, [r3, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	0099      	lsls	r1, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006162:	3301      	adds	r3, #1
 8006164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006168:	2b00      	cmp	r3, #0
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_I2C_Init+0x196>
 8006176:	2301      	movs	r3, #1
 8006178:	e022      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10e      	bne.n	80061a0 <HAL_I2C_Init+0x1bc>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1e58      	subs	r0, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6859      	ldr	r1, [r3, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	440b      	add	r3, r1
 8006190:	fbb0 f3f3 	udiv	r3, r0, r3
 8006194:	3301      	adds	r3, #1
 8006196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800619a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619e:	e00f      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	1e58      	subs	r0, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6859      	ldr	r1, [r3, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	0099      	lsls	r1, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061b6:	3301      	adds	r3, #1
 80061b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	6809      	ldr	r1, [r1, #0]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69da      	ldr	r2, [r3, #28]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6911      	ldr	r1, [r2, #16]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	68d2      	ldr	r2, [r2, #12]
 80061fa:	4311      	orrs	r1, r2
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6812      	ldr	r2, [r2, #0]
 8006200:	430b      	orrs	r3, r1
 8006202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695a      	ldr	r2, [r3, #20]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0201 	orr.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	000186a0 	.word	0x000186a0
 800625c:	001e847f 	.word	0x001e847f
 8006260:	003d08ff 	.word	0x003d08ff
 8006264:	431bde83 	.word	0x431bde83
 8006268:	10624dd3 	.word	0x10624dd3

0800626c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	461a      	mov	r2, r3
 8006278:	460b      	mov	r3, r1
 800627a:	817b      	strh	r3, [r7, #10]
 800627c:	4613      	mov	r3, r2
 800627e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006280:	f7fe fbe0 	bl	8004a44 <HAL_GetTick>
 8006284:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b20      	cmp	r3, #32
 8006290:	f040 80e0 	bne.w	8006454 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2319      	movs	r3, #25
 800629a:	2201      	movs	r2, #1
 800629c:	4970      	ldr	r1, [pc, #448]	; (8006460 <HAL_I2C_Master_Transmit+0x1f4>)
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fe02 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	e0d3      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_I2C_Master_Transmit+0x50>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0cc      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d007      	beq.n	80062e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2221      	movs	r2, #33	; 0x21
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2210      	movs	r2, #16
 80062fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	893a      	ldrh	r2, [r7, #8]
 8006312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4a50      	ldr	r2, [pc, #320]	; (8006464 <HAL_I2C_Master_Transmit+0x1f8>)
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006324:	8979      	ldrh	r1, [r7, #10]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6a3a      	ldr	r2, [r7, #32]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 fbbc 	bl	8006aa8 <I2C_MasterRequestWrite>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e08d      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800633a:	2300      	movs	r3, #0
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006350:	e066      	b.n	8006420 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	6a39      	ldr	r1, [r7, #32]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fe7c 	bl	8007054 <I2C_WaitOnTXEFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00d      	beq.n	800637e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	2b04      	cmp	r3, #4
 8006368:	d107      	bne.n	800637a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e06b      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d11b      	bne.n	80063f4 <HAL_I2C_Master_Transmit+0x188>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d017      	beq.n	80063f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	781a      	ldrb	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	6a39      	ldr	r1, [r7, #32]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fe6c 	bl	80070d6 <I2C_WaitOnBTFFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00d      	beq.n	8006420 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	2b04      	cmp	r3, #4
 800640a:	d107      	bne.n	800641c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800641a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e01a      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006424:	2b00      	cmp	r3, #0
 8006426:	d194      	bne.n	8006352 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	00100002 	.word	0x00100002
 8006464:	ffff0000 	.word	0xffff0000

08006468 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	4608      	mov	r0, r1
 8006472:	4611      	mov	r1, r2
 8006474:	461a      	mov	r2, r3
 8006476:	4603      	mov	r3, r0
 8006478:	817b      	strh	r3, [r7, #10]
 800647a:	460b      	mov	r3, r1
 800647c:	813b      	strh	r3, [r7, #8]
 800647e:	4613      	mov	r3, r2
 8006480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006482:	f7fe fadf 	bl	8004a44 <HAL_GetTick>
 8006486:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b20      	cmp	r3, #32
 8006492:	f040 80d9 	bne.w	8006648 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	2319      	movs	r3, #25
 800649c:	2201      	movs	r2, #1
 800649e:	496d      	ldr	r1, [pc, #436]	; (8006654 <HAL_I2C_Mem_Write+0x1ec>)
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fd01 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
 80064ae:	e0cc      	b.n	800664a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_I2C_Mem_Write+0x56>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e0c5      	b.n	800664a <HAL_I2C_Mem_Write+0x1e2>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d007      	beq.n	80064e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2221      	movs	r2, #33	; 0x21
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2240      	movs	r2, #64	; 0x40
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a4d      	ldr	r2, [pc, #308]	; (8006658 <HAL_I2C_Mem_Write+0x1f0>)
 8006524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006526:	88f8      	ldrh	r0, [r7, #6]
 8006528:	893a      	ldrh	r2, [r7, #8]
 800652a:	8979      	ldrh	r1, [r7, #10]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	4603      	mov	r3, r0
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fb38 	bl	8006bac <I2C_RequestMemoryWrite>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d052      	beq.n	80065e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e081      	b.n	800664a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 fd82 	bl	8007054 <I2C_WaitOnTXEFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00d      	beq.n	8006572 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	2b04      	cmp	r3, #4
 800655c:	d107      	bne.n	800656e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800656c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e06b      	b.n	800664a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	781a      	ldrb	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	d11b      	bne.n	80065e8 <HAL_I2C_Mem_Write+0x180>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d017      	beq.n	80065e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065de:	b29b      	uxth	r3, r3
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1aa      	bne.n	8006546 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 fd6e 	bl	80070d6 <I2C_WaitOnBTFFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00d      	beq.n	800661c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	2b04      	cmp	r3, #4
 8006606:	d107      	bne.n	8006618 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006616:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e016      	b.n	800664a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800662a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	e000      	b.n	800664a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006648:	2302      	movs	r3, #2
  }
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	00100002 	.word	0x00100002
 8006658:	ffff0000 	.word	0xffff0000

0800665c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08c      	sub	sp, #48	; 0x30
 8006660:	af02      	add	r7, sp, #8
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	4608      	mov	r0, r1
 8006666:	4611      	mov	r1, r2
 8006668:	461a      	mov	r2, r3
 800666a:	4603      	mov	r3, r0
 800666c:	817b      	strh	r3, [r7, #10]
 800666e:	460b      	mov	r3, r1
 8006670:	813b      	strh	r3, [r7, #8]
 8006672:	4613      	mov	r3, r2
 8006674:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006676:	f7fe f9e5 	bl	8004a44 <HAL_GetTick>
 800667a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b20      	cmp	r3, #32
 8006686:	f040 8208 	bne.w	8006a9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	2319      	movs	r3, #25
 8006690:	2201      	movs	r2, #1
 8006692:	497b      	ldr	r1, [pc, #492]	; (8006880 <HAL_I2C_Mem_Read+0x224>)
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fc07 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80066a0:	2302      	movs	r3, #2
 80066a2:	e1fb      	b.n	8006a9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_I2C_Mem_Read+0x56>
 80066ae:	2302      	movs	r3, #2
 80066b0:	e1f4      	b.n	8006a9c <HAL_I2C_Mem_Read+0x440>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d007      	beq.n	80066d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2222      	movs	r2, #34	; 0x22
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2240      	movs	r2, #64	; 0x40
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006708:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4a5b      	ldr	r2, [pc, #364]	; (8006884 <HAL_I2C_Mem_Read+0x228>)
 8006718:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800671a:	88f8      	ldrh	r0, [r7, #6]
 800671c:	893a      	ldrh	r2, [r7, #8]
 800671e:	8979      	ldrh	r1, [r7, #10]
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	4603      	mov	r3, r0
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 fad4 	bl	8006cd8 <I2C_RequestMemoryRead>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e1b0      	b.n	8006a9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673e:	2b00      	cmp	r3, #0
 8006740:	d113      	bne.n	800676a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006742:	2300      	movs	r3, #0
 8006744:	623b      	str	r3, [r7, #32]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	623b      	str	r3, [r7, #32]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	623b      	str	r3, [r7, #32]
 8006756:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	e184      	b.n	8006a74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800676e:	2b01      	cmp	r3, #1
 8006770:	d11b      	bne.n	80067aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	e164      	b.n	8006a74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d11b      	bne.n	80067ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d2:	2300      	movs	r3, #0
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	e144      	b.n	8006a74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006800:	e138      	b.n	8006a74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006806:	2b03      	cmp	r3, #3
 8006808:	f200 80f1 	bhi.w	80069ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006810:	2b01      	cmp	r3, #1
 8006812:	d123      	bne.n	800685c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006816:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fc9d 	bl	8007158 <I2C_WaitOnRXNEFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e139      	b.n	8006a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691a      	ldr	r2, [r3, #16]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	855a      	strh	r2, [r3, #42]	; 0x2a
 800685a:	e10b      	b.n	8006a74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006860:	2b02      	cmp	r3, #2
 8006862:	d14e      	bne.n	8006902 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686a:	2200      	movs	r2, #0
 800686c:	4906      	ldr	r1, [pc, #24]	; (8006888 <HAL_I2C_Mem_Read+0x22c>)
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fb1a 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d008      	beq.n	800688c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e10e      	b.n	8006a9c <HAL_I2C_Mem_Read+0x440>
 800687e:	bf00      	nop
 8006880:	00100002 	.word	0x00100002
 8006884:	ffff0000 	.word	0xffff0000
 8006888:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800689a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	3b01      	subs	r3, #1
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006900:	e0b8      	b.n	8006a74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	2200      	movs	r2, #0
 800690a:	4966      	ldr	r1, [pc, #408]	; (8006aa4 <HAL_I2C_Mem_Read+0x448>)
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 facb 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e0bf      	b.n	8006a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800692a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691a      	ldr	r2, [r3, #16]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	2200      	movs	r2, #0
 8006966:	494f      	ldr	r1, [pc, #316]	; (8006aa4 <HAL_I2C_Mem_Read+0x448>)
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 fa9d 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e091      	b.n	8006a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069ec:	e042      	b.n	8006a74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 fbb0 	bl	8007158 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e04c      	b.n	8006a9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d118      	bne.n	8006a74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f47f aec2 	bne.w	8006802 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e000      	b.n	8006a9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a9a:	2302      	movs	r3, #2
  }
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3728      	adds	r7, #40	; 0x28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	00010004 	.word	0x00010004

08006aa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	607a      	str	r2, [r7, #4]
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d006      	beq.n	8006ad2 <I2C_MasterRequestWrite+0x2a>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d003      	beq.n	8006ad2 <I2C_MasterRequestWrite+0x2a>
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ad0:	d108      	bne.n	8006ae4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	e00b      	b.n	8006afc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	2b12      	cmp	r3, #18
 8006aea:	d107      	bne.n	8006afc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006afa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f9cd 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00d      	beq.n	8006b30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b22:	d103      	bne.n	8006b2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e035      	b.n	8006b9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b38:	d108      	bne.n	8006b4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b3a:	897b      	ldrh	r3, [r7, #10]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b48:	611a      	str	r2, [r3, #16]
 8006b4a:	e01b      	b.n	8006b84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006b4c:	897b      	ldrh	r3, [r7, #10]
 8006b4e:	11db      	asrs	r3, r3, #7
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	f003 0306 	and.w	r3, r3, #6
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	f063 030f 	orn	r3, r3, #15
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	490e      	ldr	r1, [pc, #56]	; (8006ba4 <I2C_MasterRequestWrite+0xfc>)
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 f9f3 	bl	8006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e010      	b.n	8006b9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006b7a:	897b      	ldrh	r3, [r7, #10]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4907      	ldr	r1, [pc, #28]	; (8006ba8 <I2C_MasterRequestWrite+0x100>)
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f9e3 	bl	8006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	00010008 	.word	0x00010008
 8006ba8:	00010002 	.word	0x00010002

08006bac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4603      	mov	r3, r0
 8006bbc:	817b      	strh	r3, [r7, #10]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	813b      	strh	r3, [r7, #8]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f960 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00d      	beq.n	8006c0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfc:	d103      	bne.n	8006c06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e05f      	b.n	8006cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c0a:	897b      	ldrh	r3, [r7, #10]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	461a      	mov	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	6a3a      	ldr	r2, [r7, #32]
 8006c1e:	492d      	ldr	r1, [pc, #180]	; (8006cd4 <I2C_RequestMemoryWrite+0x128>)
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 f998 	bl	8006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e04c      	b.n	8006cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c48:	6a39      	ldr	r1, [r7, #32]
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 fa02 	bl	8007054 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00d      	beq.n	8006c72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d107      	bne.n	8006c6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e02b      	b.n	8006cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d105      	bne.n	8006c84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c78:	893b      	ldrh	r3, [r7, #8]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	611a      	str	r2, [r3, #16]
 8006c82:	e021      	b.n	8006cc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c84:	893b      	ldrh	r3, [r7, #8]
 8006c86:	0a1b      	lsrs	r3, r3, #8
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c94:	6a39      	ldr	r1, [r7, #32]
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f9dc 	bl	8007054 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00d      	beq.n	8006cbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d107      	bne.n	8006cba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e005      	b.n	8006cca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cbe:	893b      	ldrh	r3, [r7, #8]
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	00010002 	.word	0x00010002

08006cd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	817b      	strh	r3, [r7, #10]
 8006cea:	460b      	mov	r3, r1
 8006cec:	813b      	strh	r3, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 f8c2 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00d      	beq.n	8006d46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d38:	d103      	bne.n	8006d42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e0aa      	b.n	8006e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d46:	897b      	ldrh	r3, [r7, #10]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	6a3a      	ldr	r2, [r7, #32]
 8006d5a:	4952      	ldr	r1, [pc, #328]	; (8006ea4 <I2C_RequestMemoryRead+0x1cc>)
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 f8fa 	bl	8006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e097      	b.n	8006e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d84:	6a39      	ldr	r1, [r7, #32]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f964 	bl	8007054 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00d      	beq.n	8006dae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d107      	bne.n	8006daa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e076      	b.n	8006e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d105      	bne.n	8006dc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006db4:	893b      	ldrh	r3, [r7, #8]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	611a      	str	r2, [r3, #16]
 8006dbe:	e021      	b.n	8006e04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006dc0:	893b      	ldrh	r3, [r7, #8]
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd0:	6a39      	ldr	r1, [r7, #32]
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 f93e 	bl	8007054 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00d      	beq.n	8006dfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d107      	bne.n	8006df6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e050      	b.n	8006e9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dfa:	893b      	ldrh	r3, [r7, #8]
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e06:	6a39      	ldr	r1, [r7, #32]
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f923 	bl	8007054 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00d      	beq.n	8006e30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d107      	bne.n	8006e2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e035      	b.n	8006e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f82b 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00d      	beq.n	8006e74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e66:	d103      	bne.n	8006e70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e013      	b.n	8006e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e74:	897b      	ldrh	r3, [r7, #10]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	6a3a      	ldr	r2, [r7, #32]
 8006e88:	4906      	ldr	r1, [pc, #24]	; (8006ea4 <I2C_RequestMemoryRead+0x1cc>)
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f863 	bl	8006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	00010002 	.word	0x00010002

08006ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006eb8:	e025      	b.n	8006f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec0:	d021      	beq.n	8006f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec2:	f7fd fdbf 	bl	8004a44 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d302      	bcc.n	8006ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d116      	bne.n	8006f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	f043 0220 	orr.w	r2, r3, #32
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e023      	b.n	8006f4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	0c1b      	lsrs	r3, r3, #16
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d10d      	bne.n	8006f2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	43da      	mvns	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bf0c      	ite	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	2300      	movne	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	e00c      	b.n	8006f46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	43da      	mvns	r2, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	4013      	ands	r3, r2
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bf0c      	ite	eq
 8006f3e:	2301      	moveq	r3, #1
 8006f40:	2300      	movne	r3, #0
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d0b6      	beq.n	8006eba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f64:	e051      	b.n	800700a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f74:	d123      	bne.n	8006fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	f043 0204 	orr.w	r2, r3, #4
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e046      	b.n	800704c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc4:	d021      	beq.n	800700a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc6:	f7fd fd3d 	bl	8004a44 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d302      	bcc.n	8006fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d116      	bne.n	800700a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	f043 0220 	orr.w	r2, r3, #32
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e020      	b.n	800704c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d10c      	bne.n	800702e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	43da      	mvns	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4013      	ands	r3, r2
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	bf14      	ite	ne
 8007026:	2301      	movne	r3, #1
 8007028:	2300      	moveq	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	e00b      	b.n	8007046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	43da      	mvns	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	4013      	ands	r3, r2
 800703a:	b29b      	uxth	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	bf14      	ite	ne
 8007040:	2301      	movne	r3, #1
 8007042:	2300      	moveq	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d18d      	bne.n	8006f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007060:	e02d      	b.n	80070be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 f8ce 	bl	8007204 <I2C_IsAcknowledgeFailed>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e02d      	b.n	80070ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007078:	d021      	beq.n	80070be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707a:	f7fd fce3 	bl	8004a44 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	429a      	cmp	r2, r3
 8007088:	d302      	bcc.n	8007090 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d116      	bne.n	80070be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f043 0220 	orr.w	r2, r3, #32
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e007      	b.n	80070ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c8:	2b80      	cmp	r3, #128	; 0x80
 80070ca:	d1ca      	bne.n	8007062 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070e2:	e02d      	b.n	8007140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f88d 	bl	8007204 <I2C_IsAcknowledgeFailed>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e02d      	b.n	8007150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070fa:	d021      	beq.n	8007140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fc:	f7fd fca2 	bl	8004a44 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	429a      	cmp	r2, r3
 800710a:	d302      	bcc.n	8007112 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d116      	bne.n	8007140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e007      	b.n	8007150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b04      	cmp	r3, #4
 800714c:	d1ca      	bne.n	80070e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007164:	e042      	b.n	80071ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b10      	cmp	r3, #16
 8007172:	d119      	bne.n	80071a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f06f 0210 	mvn.w	r2, #16
 800717c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e029      	b.n	80071fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a8:	f7fd fc4c 	bl	8004a44 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d302      	bcc.n	80071be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d116      	bne.n	80071ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	f043 0220 	orr.w	r2, r3, #32
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e007      	b.n	80071fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d1b5      	bne.n	8007166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800721a:	d11b      	bne.n	8007254 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007224:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2220      	movs	r2, #32
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007240:	f043 0204 	orr.w	r2, r3, #4
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007264:	b08f      	sub	sp, #60	; 0x3c
 8007266:	af0a      	add	r7, sp, #40	; 0x28
 8007268:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e10f      	b.n	8007494 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d106      	bne.n	8007294 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f009 fe4e 	bl	8010f30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2203      	movs	r2, #3
 8007298:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d102      	bne.n	80072ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f003 fa5d 	bl	800a772 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	603b      	str	r3, [r7, #0]
 80072be:	687e      	ldr	r6, [r7, #4]
 80072c0:	466d      	mov	r5, sp
 80072c2:	f106 0410 	add.w	r4, r6, #16
 80072c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80072d6:	1d33      	adds	r3, r6, #4
 80072d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072da:	6838      	ldr	r0, [r7, #0]
 80072dc:	f003 f934 	bl	800a548 <USB_CoreInit>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d005      	beq.n	80072f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2202      	movs	r2, #2
 80072ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e0d0      	b.n	8007494 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2100      	movs	r1, #0
 80072f8:	4618      	mov	r0, r3
 80072fa:	f003 fa4b 	bl	800a794 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072fe:	2300      	movs	r3, #0
 8007300:	73fb      	strb	r3, [r7, #15]
 8007302:	e04a      	b.n	800739a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007304:	7bfa      	ldrb	r2, [r7, #15]
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4613      	mov	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	440b      	add	r3, r1
 8007312:	333d      	adds	r3, #61	; 0x3d
 8007314:	2201      	movs	r2, #1
 8007316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007318:	7bfa      	ldrb	r2, [r7, #15]
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	4613      	mov	r3, r2
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	333c      	adds	r3, #60	; 0x3c
 8007328:	7bfa      	ldrb	r2, [r7, #15]
 800732a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800732c:	7bfa      	ldrb	r2, [r7, #15]
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	b298      	uxth	r0, r3
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	4613      	mov	r3, r2
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	3342      	adds	r3, #66	; 0x42
 8007340:	4602      	mov	r2, r0
 8007342:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007344:	7bfa      	ldrb	r2, [r7, #15]
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	333f      	adds	r3, #63	; 0x3f
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007358:	7bfa      	ldrb	r2, [r7, #15]
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	3344      	adds	r3, #68	; 0x44
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800736c:	7bfa      	ldrb	r2, [r7, #15]
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	3348      	adds	r3, #72	; 0x48
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007380:	7bfa      	ldrb	r2, [r7, #15]
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	4613      	mov	r3, r2
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	440b      	add	r3, r1
 800738e:	3350      	adds	r3, #80	; 0x50
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	3301      	adds	r3, #1
 8007398:	73fb      	strb	r3, [r7, #15]
 800739a:	7bfa      	ldrb	r2, [r7, #15]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d3af      	bcc.n	8007304 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
 80073a8:	e044      	b.n	8007434 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80073aa:	7bfa      	ldrb	r2, [r7, #15]
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	1a9b      	subs	r3, r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	440b      	add	r3, r1
 80073b8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80073c0:	7bfa      	ldrb	r2, [r7, #15]
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80073d2:	7bfa      	ldrb	r2, [r7, #15]
 80073d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073d6:	7bfa      	ldrb	r2, [r7, #15]
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	4613      	mov	r3, r2
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	1a9b      	subs	r3, r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	440b      	add	r3, r1
 80073e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80073e8:	2200      	movs	r2, #0
 80073ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073ec:	7bfa      	ldrb	r2, [r7, #15]
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007402:	7bfa      	ldrb	r2, [r7, #15]
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	4613      	mov	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	440b      	add	r3, r1
 8007410:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007418:	7bfa      	ldrb	r2, [r7, #15]
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	3301      	adds	r3, #1
 8007432:	73fb      	strb	r3, [r7, #15]
 8007434:	7bfa      	ldrb	r2, [r7, #15]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	429a      	cmp	r2, r3
 800743c:	d3b5      	bcc.n	80073aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	687e      	ldr	r6, [r7, #4]
 8007446:	466d      	mov	r5, sp
 8007448:	f106 0410 	add.w	r4, r6, #16
 800744c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800744e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007454:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007458:	e885 0003 	stmia.w	r5, {r0, r1}
 800745c:	1d33      	adds	r3, r6, #4
 800745e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007460:	6838      	ldr	r0, [r7, #0]
 8007462:	f003 f9e3 	bl	800a82c <USB_DevInit>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e00d      	b.n	8007494 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	f004 fa5f 	bl	800b950 <USB_DevDisconnect>

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800749c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_PCD_Start+0x1c>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e020      	b.n	80074fa <HAL_PCD_Start+0x5e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d109      	bne.n	80074dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d005      	beq.n	80074dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f003 f935 	bl	800a750 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f004 fa0f 	bl	800b90e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007502:	b590      	push	{r4, r7, lr}
 8007504:	b08d      	sub	sp, #52	; 0x34
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4618      	mov	r0, r3
 800751a:	f004 facd 	bl	800bab8 <USB_GetMode>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	f040 839d 	bne.w	8007c60 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f004 fa31 	bl	800b992 <USB_ReadInterrupts>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 8393 	beq.w	8007c5e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f004 fa28 	bl	800b992 <USB_ReadInterrupts>
 8007542:	4603      	mov	r3, r0
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b02      	cmp	r3, #2
 800754a:	d107      	bne.n	800755c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695a      	ldr	r2, [r3, #20]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f002 0202 	and.w	r2, r2, #2
 800755a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4618      	mov	r0, r3
 8007562:	f004 fa16 	bl	800b992 <USB_ReadInterrupts>
 8007566:	4603      	mov	r3, r0
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b10      	cmp	r3, #16
 800756e:	d161      	bne.n	8007634 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699a      	ldr	r2, [r3, #24]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0210 	bic.w	r2, r2, #16
 800757e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	f003 020f 	and.w	r2, r3, #15
 800758c:	4613      	mov	r3, r2
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	1a9b      	subs	r3, r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	4413      	add	r3, r2
 800759c:	3304      	adds	r3, #4
 800759e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	0c5b      	lsrs	r3, r3, #17
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d124      	bne.n	80075f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80075b2:	4013      	ands	r3, r2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d035      	beq.n	8007624 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	091b      	lsrs	r3, r3, #4
 80075c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80075c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	6a38      	ldr	r0, [r7, #32]
 80075cc:	f004 f84d 	bl	800b66a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	091b      	lsrs	r3, r3, #4
 80075d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075dc:	441a      	add	r2, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	091b      	lsrs	r3, r3, #4
 80075ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075ee:	441a      	add	r2, r3
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	619a      	str	r2, [r3, #24]
 80075f4:	e016      	b.n	8007624 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	0c5b      	lsrs	r3, r3, #17
 80075fa:	f003 030f 	and.w	r3, r3, #15
 80075fe:	2b06      	cmp	r3, #6
 8007600:	d110      	bne.n	8007624 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007608:	2208      	movs	r2, #8
 800760a:	4619      	mov	r1, r3
 800760c:	6a38      	ldr	r0, [r7, #32]
 800760e:	f004 f82c 	bl	800b66a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	091b      	lsrs	r3, r3, #4
 800761a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800761e:	441a      	add	r2, r3
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699a      	ldr	r2, [r3, #24]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0210 	orr.w	r2, r2, #16
 8007632:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4618      	mov	r0, r3
 800763a:	f004 f9aa 	bl	800b992 <USB_ReadInterrupts>
 800763e:	4603      	mov	r3, r0
 8007640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007644:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007648:	d16e      	bne.n	8007728 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f004 f9b0 	bl	800b9b8 <USB_ReadDevAllOutEpInterrupt>
 8007658:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800765a:	e062      	b.n	8007722 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d057      	beq.n	8007716 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f004 f9d5 	bl	800ba20 <USB_ReadDevOutEPInterrupt>
 8007676:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00c      	beq.n	800769c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768e:	461a      	mov	r2, r3
 8007690:	2301      	movs	r3, #1
 8007692:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fdb0 	bl	80081fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f003 0308 	and.w	r3, r3, #8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00c      	beq.n	80076c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	461a      	mov	r2, r3
 80076b4:	2308      	movs	r3, #8
 80076b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80076b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 feaa 	bl	8008414 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f003 0310 	and.w	r3, r3, #16
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d008      	beq.n	80076dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d6:	461a      	mov	r2, r3
 80076d8:	2310      	movs	r3, #16
 80076da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d008      	beq.n	80076f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f2:	461a      	mov	r2, r3
 80076f4:	2320      	movs	r3, #32
 80076f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d009      	beq.n	8007716 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770e:	461a      	mov	r2, r3
 8007710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007714:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	3301      	adds	r3, #1
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	085b      	lsrs	r3, r3, #1
 8007720:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	2b00      	cmp	r3, #0
 8007726:	d199      	bne.n	800765c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4618      	mov	r0, r3
 800772e:	f004 f930 	bl	800b992 <USB_ReadInterrupts>
 8007732:	4603      	mov	r3, r0
 8007734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007738:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800773c:	f040 80c0 	bne.w	80078c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4618      	mov	r0, r3
 8007746:	f004 f951 	bl	800b9ec <USB_ReadDevAllInEpInterrupt>
 800774a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007750:	e0b2      	b.n	80078b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80a7 	beq.w	80078ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007764:	b2d2      	uxtb	r2, r2
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f004 f977 	bl	800ba5c <USB_ReadDevInEPInterrupt>
 800776e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d057      	beq.n	800782a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	f003 030f 	and.w	r3, r3, #15
 8007780:	2201      	movs	r2, #1
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	43db      	mvns	r3, r3
 8007794:	69f9      	ldr	r1, [r7, #28]
 8007796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800779a:	4013      	ands	r3, r2
 800779c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077aa:	461a      	mov	r2, r3
 80077ac:	2301      	movs	r3, #1
 80077ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d132      	bne.n	800781e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077bc:	4613      	mov	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	3348      	adds	r3, #72	; 0x48
 80077c8:	6819      	ldr	r1, [r3, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ce:	4613      	mov	r3, r2
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4403      	add	r3, r0
 80077d8:	3344      	adds	r3, #68	; 0x44
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4419      	add	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e2:	4613      	mov	r3, r2
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	1a9b      	subs	r3, r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4403      	add	r3, r0
 80077ec:	3348      	adds	r3, #72	; 0x48
 80077ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d113      	bne.n	800781e <HAL_PCD_IRQHandler+0x31c>
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fa:	4613      	mov	r3, r2
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	3350      	adds	r3, #80	; 0x50
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d108      	bne.n	800781e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007816:	461a      	mov	r2, r3
 8007818:	2101      	movs	r1, #1
 800781a:	f004 f97f 	bl	800bb1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	b2db      	uxtb	r3, r3
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f009 fc12 	bl	801104e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f003 0308 	and.w	r3, r3, #8
 8007830:	2b00      	cmp	r3, #0
 8007832:	d008      	beq.n	8007846 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007840:	461a      	mov	r2, r3
 8007842:	2308      	movs	r3, #8
 8007844:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785c:	461a      	mov	r2, r3
 800785e:	2310      	movs	r3, #16
 8007860:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b00      	cmp	r3, #0
 800786a:	d008      	beq.n	800787e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	461a      	mov	r2, r3
 800787a:	2340      	movs	r3, #64	; 0x40
 800787c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007894:	461a      	mov	r2, r3
 8007896:	2302      	movs	r3, #2
 8007898:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80078a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fc1b 	bl	80080e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	3301      	adds	r3, #1
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	085b      	lsrs	r3, r3, #1
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f47f af49 	bne.w	8007752 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f004 f864 	bl	800b992 <USB_ReadInterrupts>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d4:	d122      	bne.n	800791c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e4:	f023 0301 	bic.w	r3, r3, #1
 80078e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d108      	bne.n	8007906 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80078fc:	2100      	movs	r1, #0
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fe26 	bl	8008550 <HAL_PCDEx_LPM_Callback>
 8007904:	e002      	b.n	800790c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f009 fc18 	bl	801113c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695a      	ldr	r2, [r3, #20]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800791a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4618      	mov	r0, r3
 8007922:	f004 f836 	bl	800b992 <USB_ReadInterrupts>
 8007926:	4603      	mov	r3, r0
 8007928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800792c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007930:	d112      	bne.n	8007958 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b01      	cmp	r3, #1
 8007940:	d102      	bne.n	8007948 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f009 fbd4 	bl	80110f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695a      	ldr	r2, [r3, #20]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007956:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f004 f818 	bl	800b992 <USB_ReadInterrupts>
 8007962:	4603      	mov	r3, r0
 8007964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796c:	f040 80c7 	bne.w	8007afe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	69fa      	ldr	r2, [r7, #28]
 800797a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800797e:	f023 0301 	bic.w	r3, r3, #1
 8007982:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2110      	movs	r1, #16
 800798a:	4618      	mov	r0, r3
 800798c:	f003 f8b2 	bl	800aaf4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007990:	2300      	movs	r3, #0
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007994:	e056      	b.n	8007a44 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a2:	461a      	mov	r2, r3
 80079a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079ba:	0151      	lsls	r1, r2, #5
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	440a      	add	r2, r1
 80079c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079c8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079da:	0151      	lsls	r1, r2, #5
 80079dc:	69fa      	ldr	r2, [r7, #28]
 80079de:	440a      	add	r2, r1
 80079e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f6:	461a      	mov	r2, r3
 80079f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	3301      	adds	r3, #1
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d3a3      	bcc.n	8007996 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a5c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007a60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d016      	beq.n	8007a98 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a7a:	f043 030b 	orr.w	r3, r3, #11
 8007a7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a90:	f043 030b 	orr.w	r3, r3, #11
 8007a94:	6453      	str	r3, [r2, #68]	; 0x44
 8007a96:	e015      	b.n	8007ac4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	69fa      	ldr	r2, [r7, #28]
 8007aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aa6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007aaa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007aae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007abe:	f043 030b 	orr.w	r3, r3, #11
 8007ac2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ad2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007ad6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f004 f817 	bl	800bb1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	695a      	ldr	r2, [r3, #20]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f003 ff45 	bl	800b992 <USB_ReadInterrupts>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b12:	d124      	bne.n	8007b5e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f003 ffdb 	bl	800bad4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f003 f843 	bl	800abae <USB_GetDevSpeed>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681c      	ldr	r4, [r3, #0]
 8007b34:	f001 f958 	bl	8008de8 <HAL_RCC_GetHCLKFreq>
 8007b38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	4620      	mov	r0, r4
 8007b44:	f002 fd62 	bl	800a60c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f009 faa8 	bl	801109e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	695a      	ldr	r2, [r3, #20]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f003 ff15 	bl	800b992 <USB_ReadInterrupts>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f003 0308 	and.w	r3, r3, #8
 8007b6e:	2b08      	cmp	r3, #8
 8007b70:	d10a      	bne.n	8007b88 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f009 fa85 	bl	8011082 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695a      	ldr	r2, [r3, #20]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f002 0208 	and.w	r2, r2, #8
 8007b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f003 ff00 	bl	800b992 <USB_ReadInterrupts>
 8007b92:	4603      	mov	r3, r0
 8007b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b9c:	d10f      	bne.n	8007bbe <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f009 fae7 	bl	801117c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	695a      	ldr	r2, [r3, #20]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f003 fee5 	bl	800b992 <USB_ReadInterrupts>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bd2:	d10f      	bne.n	8007bf4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f009 faba 	bl	8011158 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695a      	ldr	r2, [r3, #20]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f003 feca 	bl	800b992 <USB_ReadInterrupts>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c08:	d10a      	bne.n	8007c20 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f009 fac8 	bl	80111a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695a      	ldr	r2, [r3, #20]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f003 feb4 	bl	800b992 <USB_ReadInterrupts>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d115      	bne.n	8007c60 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f009 fab8 	bl	80111bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6859      	ldr	r1, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	605a      	str	r2, [r3, #4]
 8007c5c:	e000      	b.n	8007c60 <HAL_PCD_IRQHandler+0x75e>
      return;
 8007c5e:	bf00      	nop
    }
  }
}
 8007c60:	3734      	adds	r7, #52	; 0x34
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd90      	pop	{r4, r7, pc}

08007c66 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_PCD_SetAddress+0x1a>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e013      	b.n	8007ca8 <HAL_PCD_SetAddress+0x42>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	78fa      	ldrb	r2, [r7, #3]
 8007c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	78fa      	ldrb	r2, [r7, #3]
 8007c96:	4611      	mov	r1, r2
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f003 fe12 	bl	800b8c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	70fb      	strb	r3, [r7, #3]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	803b      	strh	r3, [r7, #0]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da0f      	bge.n	8007cf6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	f003 020f 	and.w	r2, r3, #15
 8007cdc:	4613      	mov	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	1a9b      	subs	r3, r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	3338      	adds	r3, #56	; 0x38
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	4413      	add	r3, r2
 8007cea:	3304      	adds	r3, #4
 8007cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	705a      	strb	r2, [r3, #1]
 8007cf4:	e00f      	b.n	8007d16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	f003 020f 	and.w	r2, r3, #15
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	1a9b      	subs	r3, r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d16:	78fb      	ldrb	r3, [r7, #3]
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d22:	883a      	ldrh	r2, [r7, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	78ba      	ldrb	r2, [r7, #2]
 8007d2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	785b      	ldrb	r3, [r3, #1]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d40:	78bb      	ldrb	r3, [r7, #2]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d102      	bne.n	8007d4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_PCD_EP_Open+0xaa>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e00e      	b.n	8007d78 <HAL_PCD_EP_Open+0xc8>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68f9      	ldr	r1, [r7, #12]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f002 ff45 	bl	800abf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007d76:	7afb      	ldrb	r3, [r7, #11]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	da0f      	bge.n	8007db4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d94:	78fb      	ldrb	r3, [r7, #3]
 8007d96:	f003 020f 	and.w	r2, r3, #15
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	00db      	lsls	r3, r3, #3
 8007d9e:	1a9b      	subs	r3, r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	3338      	adds	r3, #56	; 0x38
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	4413      	add	r3, r2
 8007da8:	3304      	adds	r3, #4
 8007daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2201      	movs	r2, #1
 8007db0:	705a      	strb	r2, [r3, #1]
 8007db2:	e00f      	b.n	8007dd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	f003 020f 	and.w	r2, r3, #15
 8007dba:	4613      	mov	r3, r2
 8007dbc:	00db      	lsls	r3, r3, #3
 8007dbe:	1a9b      	subs	r3, r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	4413      	add	r3, r2
 8007dca:	3304      	adds	r3, #4
 8007dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	f003 030f 	and.w	r3, r3, #15
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d101      	bne.n	8007dee <HAL_PCD_EP_Close+0x6e>
 8007dea:	2302      	movs	r3, #2
 8007dec:	e00e      	b.n	8007e0c <HAL_PCD_EP_Close+0x8c>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68f9      	ldr	r1, [r7, #12]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f002 ff83 	bl	800ad08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	460b      	mov	r3, r1
 8007e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e24:	7afb      	ldrb	r3, [r7, #11]
 8007e26:	f003 020f 	and.w	r2, r3, #15
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	1a9b      	subs	r3, r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4413      	add	r3, r2
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2200      	movs	r2, #0
 8007e54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e56:	7afb      	ldrb	r3, [r7, #11]
 8007e58:	f003 030f 	and.w	r3, r3, #15
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d102      	bne.n	8007e70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	f003 030f 	and.w	r3, r3, #15
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	461a      	mov	r2, r3
 8007e86:	6979      	ldr	r1, [r7, #20]
 8007e88:	f003 fa5e 	bl	800b348 <USB_EP0StartXfer>
 8007e8c:	e008      	b.n	8007ea0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6979      	ldr	r1, [r7, #20]
 8007e9c:	f003 f810 	bl	800aec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	f003 020f 	and.w	r2, r3, #15
 8007ebc:	6879      	ldr	r1, [r7, #4]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	1a9b      	subs	r3, r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007ecc:	681b      	ldr	r3, [r3, #0]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	f003 020f 	and.w	r2, r3, #15
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	1a9b      	subs	r3, r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	3338      	adds	r3, #56	; 0x38
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4413      	add	r3, r2
 8007efe:	3304      	adds	r3, #4
 8007f00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2200      	movs	r2, #0
 8007f12:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2201      	movs	r2, #1
 8007f18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f1a:	7afb      	ldrb	r3, [r7, #11]
 8007f1c:	f003 030f 	and.w	r3, r3, #15
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d102      	bne.n	8007f34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f34:	7afb      	ldrb	r3, [r7, #11]
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6979      	ldr	r1, [r7, #20]
 8007f4c:	f003 f9fc 	bl	800b348 <USB_EP0StartXfer>
 8007f50:	e008      	b.n	8007f64 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6979      	ldr	r1, [r7, #20]
 8007f60:	f002 ffae 	bl	800aec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	f003 020f 	and.w	r2, r3, #15
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d901      	bls.n	8007f8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e050      	b.n	800802e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da0f      	bge.n	8007fb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	f003 020f 	and.w	r2, r3, #15
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	1a9b      	subs	r3, r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	3338      	adds	r3, #56	; 0x38
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	3304      	adds	r3, #4
 8007faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	705a      	strb	r2, [r3, #1]
 8007fb2:	e00d      	b.n	8007fd0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007fb4:	78fa      	ldrb	r2, [r7, #3]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	1a9b      	subs	r3, r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_PCD_EP_SetStall+0x82>
 8007fec:	2302      	movs	r3, #2
 8007fee:	e01e      	b.n	800802e <HAL_PCD_EP_SetStall+0xc0>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68f9      	ldr	r1, [r7, #12]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f003 fb8b 	bl	800b71a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10a      	bne.n	8008024 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	b2d9      	uxtb	r1, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800801e:	461a      	mov	r2, r3
 8008020:	f003 fd7c 	bl	800bb1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	f003 020f 	and.w	r2, r3, #15
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d901      	bls.n	8008054 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e042      	b.n	80080da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008058:	2b00      	cmp	r3, #0
 800805a:	da0f      	bge.n	800807c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	f003 020f 	and.w	r2, r3, #15
 8008062:	4613      	mov	r3, r2
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	1a9b      	subs	r3, r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	3338      	adds	r3, #56	; 0x38
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	4413      	add	r3, r2
 8008070:	3304      	adds	r3, #4
 8008072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2201      	movs	r2, #1
 8008078:	705a      	strb	r2, [r3, #1]
 800807a:	e00f      	b.n	800809c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	f003 020f 	and.w	r2, r3, #15
 8008082:	4613      	mov	r3, r2
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	1a9b      	subs	r3, r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	4413      	add	r3, r2
 8008092:	3304      	adds	r3, #4
 8008094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	f003 030f 	and.w	r3, r3, #15
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d101      	bne.n	80080bc <HAL_PCD_EP_ClrStall+0x86>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e00e      	b.n	80080da <HAL_PCD_EP_ClrStall+0xa4>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68f9      	ldr	r1, [r7, #12]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f003 fb93 	bl	800b7f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b08a      	sub	sp, #40	; 0x28
 80080e6:	af02      	add	r7, sp, #8
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	4613      	mov	r3, r2
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	1a9b      	subs	r3, r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	3338      	adds	r3, #56	; 0x38
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	4413      	add	r3, r2
 8008106:	3304      	adds	r3, #4
 8008108:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	699a      	ldr	r2, [r3, #24]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	429a      	cmp	r2, r3
 8008114:	d901      	bls.n	800811a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e06c      	b.n	80081f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	695a      	ldr	r2, [r3, #20]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	429a      	cmp	r2, r3
 800812e:	d902      	bls.n	8008136 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	3303      	adds	r3, #3
 800813a:	089b      	lsrs	r3, r3, #2
 800813c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800813e:	e02b      	b.n	8008198 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	695a      	ldr	r2, [r3, #20]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	69fa      	ldr	r2, [r7, #28]
 8008152:	429a      	cmp	r2, r3
 8008154:	d902      	bls.n	800815c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	3303      	adds	r3, #3
 8008160:	089b      	lsrs	r3, r3, #2
 8008162:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68d9      	ldr	r1, [r3, #12]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	b2da      	uxtb	r2, r3
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008174:	b2db      	uxtb	r3, r3
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4603      	mov	r3, r0
 800817a:	6978      	ldr	r0, [r7, #20]
 800817c:	f003 fa37 	bl	800b5ee <USB_WritePacket>

    ep->xfer_buff  += len;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	441a      	add	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	699a      	ldr	r2, [r3, #24]
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	441a      	add	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d809      	bhi.n	80081c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d203      	bcs.n	80081c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1be      	bne.n	8008140 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	695a      	ldr	r2, [r3, #20]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d811      	bhi.n	80081f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	f003 030f 	and.w	r3, r3, #15
 80081d4:	2201      	movs	r2, #1
 80081d6:	fa02 f303 	lsl.w	r3, r2, r3
 80081da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	43db      	mvns	r3, r3
 80081e8:	6939      	ldr	r1, [r7, #16]
 80081ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081ee:	4013      	ands	r3, r2
 80081f0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	333c      	adds	r3, #60	; 0x3c
 8008214:	3304      	adds	r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	2b01      	cmp	r3, #1
 8008230:	f040 80a0 	bne.w	8008374 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b00      	cmp	r3, #0
 800823c:	d015      	beq.n	800826a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a72      	ldr	r2, [pc, #456]	; (800840c <PCD_EP_OutXfrComplete_int+0x210>)
 8008242:	4293      	cmp	r3, r2
 8008244:	f240 80dd 	bls.w	8008402 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 80d7 	beq.w	8008402 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008260:	461a      	mov	r2, r3
 8008262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008266:	6093      	str	r3, [r2, #8]
 8008268:	e0cb      	b.n	8008402 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f003 0320 	and.w	r3, r3, #32
 8008270:	2b00      	cmp	r3, #0
 8008272:	d009      	beq.n	8008288 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008280:	461a      	mov	r2, r3
 8008282:	2320      	movs	r3, #32
 8008284:	6093      	str	r3, [r2, #8]
 8008286:	e0bc      	b.n	8008402 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800828e:	2b00      	cmp	r3, #0
 8008290:	f040 80b7 	bne.w	8008402 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4a5d      	ldr	r2, [pc, #372]	; (800840c <PCD_EP_OutXfrComplete_int+0x210>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d90f      	bls.n	80082bc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b2:	461a      	mov	r2, r3
 80082b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082b8:	6093      	str	r3, [r2, #8]
 80082ba:	e0a2      	b.n	8008402 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	4613      	mov	r3, r2
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	1a9b      	subs	r3, r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	440b      	add	r3, r1
 80082ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80082ce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	0159      	lsls	r1, r3, #5
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	440b      	add	r3, r1
 80082d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80082e2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	4613      	mov	r3, r2
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	1a9b      	subs	r3, r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4403      	add	r3, r0
 80082f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80082f6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4613      	mov	r3, r2
 80082fe:	00db      	lsls	r3, r3, #3
 8008300:	1a9b      	subs	r3, r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	440b      	add	r3, r1
 8008306:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800830a:	6819      	ldr	r1, [r3, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	4613      	mov	r3, r2
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	1a9b      	subs	r3, r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4403      	add	r3, r0
 800831a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4419      	add	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	4613      	mov	r3, r2
 8008328:	00db      	lsls	r3, r3, #3
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4403      	add	r3, r0
 8008330:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008334:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d114      	bne.n	8008366 <PCD_EP_OutXfrComplete_int+0x16a>
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	4613      	mov	r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	440b      	add	r3, r1
 800834a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d108      	bne.n	8008366 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6818      	ldr	r0, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800835e:	461a      	mov	r2, r3
 8008360:	2101      	movs	r1, #1
 8008362:	f003 fbdb 	bl	800bb1c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	b2db      	uxtb	r3, r3
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f008 fe53 	bl	8011018 <HAL_PCD_DataOutStageCallback>
 8008372:	e046      	b.n	8008402 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4a26      	ldr	r2, [pc, #152]	; (8008410 <PCD_EP_OutXfrComplete_int+0x214>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d124      	bne.n	80083c6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	4413      	add	r3, r2
 800838e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008392:	461a      	mov	r2, r3
 8008394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008398:	6093      	str	r3, [r2, #8]
 800839a:	e032      	b.n	8008402 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f003 0320 	and.w	r3, r3, #32
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d008      	beq.n	80083b8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b2:	461a      	mov	r2, r3
 80083b4:	2320      	movs	r3, #32
 80083b6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f008 fe2a 	bl	8011018 <HAL_PCD_DataOutStageCallback>
 80083c4:	e01d      	b.n	8008402 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d114      	bne.n	80083f6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	4613      	mov	r3, r2
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	440b      	add	r3, r1
 80083da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d108      	bne.n	80083f6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6818      	ldr	r0, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083ee:	461a      	mov	r2, r3
 80083f0:	2100      	movs	r1, #0
 80083f2:	f003 fb93 	bl	800bb1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f008 fe0b 	bl	8011018 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	4f54300a 	.word	0x4f54300a
 8008410:	4f54310a 	.word	0x4f54310a

08008414 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	333c      	adds	r3, #60	; 0x3c
 800842c:	3304      	adds	r3, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4a15      	ldr	r2, [pc, #84]	; (800849c <PCD_EP_OutSetupPacket_int+0x88>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d90e      	bls.n	8008468 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008450:	2b00      	cmp	r3, #0
 8008452:	d009      	beq.n	8008468 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008460:	461a      	mov	r2, r3
 8008462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008466:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f008 fdc3 	bl	8010ff4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4a0a      	ldr	r2, [pc, #40]	; (800849c <PCD_EP_OutSetupPacket_int+0x88>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d90c      	bls.n	8008490 <PCD_EP_OutSetupPacket_int+0x7c>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d108      	bne.n	8008490 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6818      	ldr	r0, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008488:	461a      	mov	r2, r3
 800848a:	2101      	movs	r1, #1
 800848c:	f003 fb46 	bl	800bb1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	4f54300a 	.word	0x4f54300a

080084a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
 80084ac:	4613      	mov	r3, r2
 80084ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d107      	bne.n	80084ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80084be:	883b      	ldrh	r3, [r7, #0]
 80084c0:	0419      	lsls	r1, r3, #16
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	629a      	str	r2, [r3, #40]	; 0x28
 80084cc:	e028      	b.n	8008520 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d4:	0c1b      	lsrs	r3, r3, #16
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	4413      	add	r3, r2
 80084da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]
 80084e0:	e00d      	b.n	80084fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	3340      	adds	r3, #64	; 0x40
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	0c1b      	lsrs	r3, r3, #16
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	4413      	add	r3, r2
 80084f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	3301      	adds	r3, #1
 80084fc:	73fb      	strb	r3, [r7, #15]
 80084fe:	7bfa      	ldrb	r2, [r7, #15]
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	3b01      	subs	r3, #1
 8008504:	429a      	cmp	r2, r3
 8008506:	d3ec      	bcc.n	80084e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008508:	883b      	ldrh	r3, [r7, #0]
 800850a:	0418      	lsls	r0, r3, #16
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6819      	ldr	r1, [r3, #0]
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	3b01      	subs	r3, #1
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	4302      	orrs	r2, r0
 8008518:	3340      	adds	r3, #64	; 0x40
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	887a      	ldrh	r2, [r7, #2]
 8008540:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e264      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	d075      	beq.n	8008672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008586:	4ba3      	ldr	r3, [pc, #652]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f003 030c 	and.w	r3, r3, #12
 800858e:	2b04      	cmp	r3, #4
 8008590:	d00c      	beq.n	80085ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008592:	4ba0      	ldr	r3, [pc, #640]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800859a:	2b08      	cmp	r3, #8
 800859c:	d112      	bne.n	80085c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800859e:	4b9d      	ldr	r3, [pc, #628]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085aa:	d10b      	bne.n	80085c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085ac:	4b99      	ldr	r3, [pc, #612]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d05b      	beq.n	8008670 <HAL_RCC_OscConfig+0x108>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d157      	bne.n	8008670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e23f      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085cc:	d106      	bne.n	80085dc <HAL_RCC_OscConfig+0x74>
 80085ce:	4b91      	ldr	r3, [pc, #580]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a90      	ldr	r2, [pc, #576]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	e01d      	b.n	8008618 <HAL_RCC_OscConfig+0xb0>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085e4:	d10c      	bne.n	8008600 <HAL_RCC_OscConfig+0x98>
 80085e6:	4b8b      	ldr	r3, [pc, #556]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a8a      	ldr	r2, [pc, #552]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085f0:	6013      	str	r3, [r2, #0]
 80085f2:	4b88      	ldr	r3, [pc, #544]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a87      	ldr	r2, [pc, #540]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	e00b      	b.n	8008618 <HAL_RCC_OscConfig+0xb0>
 8008600:	4b84      	ldr	r3, [pc, #528]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a83      	ldr	r2, [pc, #524]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	4b81      	ldr	r3, [pc, #516]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a80      	ldr	r2, [pc, #512]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d013      	beq.n	8008648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008620:	f7fc fa10 	bl	8004a44 <HAL_GetTick>
 8008624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008626:	e008      	b.n	800863a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008628:	f7fc fa0c 	bl	8004a44 <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b64      	cmp	r3, #100	; 0x64
 8008634:	d901      	bls.n	800863a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e204      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800863a:	4b76      	ldr	r3, [pc, #472]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0f0      	beq.n	8008628 <HAL_RCC_OscConfig+0xc0>
 8008646:	e014      	b.n	8008672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008648:	f7fc f9fc 	bl	8004a44 <HAL_GetTick>
 800864c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800864e:	e008      	b.n	8008662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008650:	f7fc f9f8 	bl	8004a44 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b64      	cmp	r3, #100	; 0x64
 800865c:	d901      	bls.n	8008662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e1f0      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008662:	4b6c      	ldr	r3, [pc, #432]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1f0      	bne.n	8008650 <HAL_RCC_OscConfig+0xe8>
 800866e:	e000      	b.n	8008672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d063      	beq.n	8008746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800867e:	4b65      	ldr	r3, [pc, #404]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f003 030c 	and.w	r3, r3, #12
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00b      	beq.n	80086a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800868a:	4b62      	ldr	r3, [pc, #392]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008692:	2b08      	cmp	r3, #8
 8008694:	d11c      	bne.n	80086d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008696:	4b5f      	ldr	r3, [pc, #380]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d116      	bne.n	80086d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086a2:	4b5c      	ldr	r3, [pc, #368]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d005      	beq.n	80086ba <HAL_RCC_OscConfig+0x152>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d001      	beq.n	80086ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e1c4      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086ba:	4b56      	ldr	r3, [pc, #344]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	4952      	ldr	r1, [pc, #328]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086ce:	e03a      	b.n	8008746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d020      	beq.n	800871a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086d8:	4b4f      	ldr	r3, [pc, #316]	; (8008818 <HAL_RCC_OscConfig+0x2b0>)
 80086da:	2201      	movs	r2, #1
 80086dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086de:	f7fc f9b1 	bl	8004a44 <HAL_GetTick>
 80086e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086e4:	e008      	b.n	80086f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086e6:	f7fc f9ad 	bl	8004a44 <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d901      	bls.n	80086f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e1a5      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086f8:	4b46      	ldr	r3, [pc, #280]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0f0      	beq.n	80086e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008704:	4b43      	ldr	r3, [pc, #268]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	4940      	ldr	r1, [pc, #256]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008714:	4313      	orrs	r3, r2
 8008716:	600b      	str	r3, [r1, #0]
 8008718:	e015      	b.n	8008746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800871a:	4b3f      	ldr	r3, [pc, #252]	; (8008818 <HAL_RCC_OscConfig+0x2b0>)
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008720:	f7fc f990 	bl	8004a44 <HAL_GetTick>
 8008724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008726:	e008      	b.n	800873a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008728:	f7fc f98c 	bl	8004a44 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	2b02      	cmp	r3, #2
 8008734:	d901      	bls.n	800873a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e184      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800873a:	4b36      	ldr	r3, [pc, #216]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1f0      	bne.n	8008728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0308 	and.w	r3, r3, #8
 800874e:	2b00      	cmp	r3, #0
 8008750:	d030      	beq.n	80087b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d016      	beq.n	8008788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800875a:	4b30      	ldr	r3, [pc, #192]	; (800881c <HAL_RCC_OscConfig+0x2b4>)
 800875c:	2201      	movs	r2, #1
 800875e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008760:	f7fc f970 	bl	8004a44 <HAL_GetTick>
 8008764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008768:	f7fc f96c 	bl	8004a44 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e164      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800877a:	4b26      	ldr	r3, [pc, #152]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 800877c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0f0      	beq.n	8008768 <HAL_RCC_OscConfig+0x200>
 8008786:	e015      	b.n	80087b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008788:	4b24      	ldr	r3, [pc, #144]	; (800881c <HAL_RCC_OscConfig+0x2b4>)
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800878e:	f7fc f959 	bl	8004a44 <HAL_GetTick>
 8008792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008796:	f7fc f955 	bl	8004a44 <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e14d      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087a8:	4b1a      	ldr	r3, [pc, #104]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80087aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1f0      	bne.n	8008796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 80a0 	beq.w	8008902 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087c6:	4b13      	ldr	r3, [pc, #76]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10f      	bne.n	80087f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087d2:	2300      	movs	r3, #0
 80087d4:	60bb      	str	r3, [r7, #8]
 80087d6:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80087d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087da:	4a0e      	ldr	r2, [pc, #56]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80087dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087e0:	6413      	str	r3, [r2, #64]	; 0x40
 80087e2:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ea:	60bb      	str	r3, [r7, #8]
 80087ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087ee:	2301      	movs	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <HAL_RCC_OscConfig+0x2b8>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d121      	bne.n	8008842 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087fe:	4b08      	ldr	r3, [pc, #32]	; (8008820 <HAL_RCC_OscConfig+0x2b8>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a07      	ldr	r2, [pc, #28]	; (8008820 <HAL_RCC_OscConfig+0x2b8>)
 8008804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800880a:	f7fc f91b 	bl	8004a44 <HAL_GetTick>
 800880e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008810:	e011      	b.n	8008836 <HAL_RCC_OscConfig+0x2ce>
 8008812:	bf00      	nop
 8008814:	40023800 	.word	0x40023800
 8008818:	42470000 	.word	0x42470000
 800881c:	42470e80 	.word	0x42470e80
 8008820:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008824:	f7fc f90e 	bl	8004a44 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e106      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008836:	4b85      	ldr	r3, [pc, #532]	; (8008a4c <HAL_RCC_OscConfig+0x4e4>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0f0      	beq.n	8008824 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d106      	bne.n	8008858 <HAL_RCC_OscConfig+0x2f0>
 800884a:	4b81      	ldr	r3, [pc, #516]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 800884c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884e:	4a80      	ldr	r2, [pc, #512]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 8008850:	f043 0301 	orr.w	r3, r3, #1
 8008854:	6713      	str	r3, [r2, #112]	; 0x70
 8008856:	e01c      	b.n	8008892 <HAL_RCC_OscConfig+0x32a>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	2b05      	cmp	r3, #5
 800885e:	d10c      	bne.n	800887a <HAL_RCC_OscConfig+0x312>
 8008860:	4b7b      	ldr	r3, [pc, #492]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 8008862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008864:	4a7a      	ldr	r2, [pc, #488]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 8008866:	f043 0304 	orr.w	r3, r3, #4
 800886a:	6713      	str	r3, [r2, #112]	; 0x70
 800886c:	4b78      	ldr	r3, [pc, #480]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 800886e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008870:	4a77      	ldr	r2, [pc, #476]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 8008872:	f043 0301 	orr.w	r3, r3, #1
 8008876:	6713      	str	r3, [r2, #112]	; 0x70
 8008878:	e00b      	b.n	8008892 <HAL_RCC_OscConfig+0x32a>
 800887a:	4b75      	ldr	r3, [pc, #468]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 800887c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887e:	4a74      	ldr	r2, [pc, #464]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	6713      	str	r3, [r2, #112]	; 0x70
 8008886:	4b72      	ldr	r3, [pc, #456]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 8008888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888a:	4a71      	ldr	r2, [pc, #452]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 800888c:	f023 0304 	bic.w	r3, r3, #4
 8008890:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d015      	beq.n	80088c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800889a:	f7fc f8d3 	bl	8004a44 <HAL_GetTick>
 800889e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088a0:	e00a      	b.n	80088b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088a2:	f7fc f8cf 	bl	8004a44 <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d901      	bls.n	80088b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e0c5      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088b8:	4b65      	ldr	r3, [pc, #404]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 80088ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088bc:	f003 0302 	and.w	r3, r3, #2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d0ee      	beq.n	80088a2 <HAL_RCC_OscConfig+0x33a>
 80088c4:	e014      	b.n	80088f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088c6:	f7fc f8bd 	bl	8004a44 <HAL_GetTick>
 80088ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088cc:	e00a      	b.n	80088e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088ce:	f7fc f8b9 	bl	8004a44 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088dc:	4293      	cmp	r3, r2
 80088de:	d901      	bls.n	80088e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e0af      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088e4:	4b5a      	ldr	r3, [pc, #360]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 80088e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1ee      	bne.n	80088ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d105      	bne.n	8008902 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088f6:	4b56      	ldr	r3, [pc, #344]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	4a55      	ldr	r2, [pc, #340]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 80088fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008900:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 809b 	beq.w	8008a42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800890c:	4b50      	ldr	r3, [pc, #320]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	f003 030c 	and.w	r3, r3, #12
 8008914:	2b08      	cmp	r3, #8
 8008916:	d05c      	beq.n	80089d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d141      	bne.n	80089a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008920:	4b4c      	ldr	r3, [pc, #304]	; (8008a54 <HAL_RCC_OscConfig+0x4ec>)
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008926:	f7fc f88d 	bl	8004a44 <HAL_GetTick>
 800892a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800892c:	e008      	b.n	8008940 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800892e:	f7fc f889 	bl	8004a44 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e081      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008940:	4b43      	ldr	r3, [pc, #268]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1f0      	bne.n	800892e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	69da      	ldr	r2, [r3, #28]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	431a      	orrs	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	019b      	lsls	r3, r3, #6
 800895c:	431a      	orrs	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008962:	085b      	lsrs	r3, r3, #1
 8008964:	3b01      	subs	r3, #1
 8008966:	041b      	lsls	r3, r3, #16
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	061b      	lsls	r3, r3, #24
 8008970:	4937      	ldr	r1, [pc, #220]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 8008972:	4313      	orrs	r3, r2
 8008974:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008976:	4b37      	ldr	r3, [pc, #220]	; (8008a54 <HAL_RCC_OscConfig+0x4ec>)
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800897c:	f7fc f862 	bl	8004a44 <HAL_GetTick>
 8008980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008982:	e008      	b.n	8008996 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008984:	f7fc f85e 	bl	8004a44 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d901      	bls.n	8008996 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e056      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008996:	4b2e      	ldr	r3, [pc, #184]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0f0      	beq.n	8008984 <HAL_RCC_OscConfig+0x41c>
 80089a2:	e04e      	b.n	8008a42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089a4:	4b2b      	ldr	r3, [pc, #172]	; (8008a54 <HAL_RCC_OscConfig+0x4ec>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089aa:	f7fc f84b 	bl	8004a44 <HAL_GetTick>
 80089ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089b0:	e008      	b.n	80089c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089b2:	f7fc f847 	bl	8004a44 <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d901      	bls.n	80089c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e03f      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089c4:	4b22      	ldr	r3, [pc, #136]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1f0      	bne.n	80089b2 <HAL_RCC_OscConfig+0x44a>
 80089d0:	e037      	b.n	8008a42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e032      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80089de:	4b1c      	ldr	r3, [pc, #112]	; (8008a50 <HAL_RCC_OscConfig+0x4e8>)
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d028      	beq.n	8008a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d121      	bne.n	8008a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d11a      	bne.n	8008a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a0e:	4013      	ands	r3, r2
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d111      	bne.n	8008a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a24:	085b      	lsrs	r3, r3, #1
 8008a26:	3b01      	subs	r3, #1
 8008a28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d107      	bne.n	8008a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d001      	beq.n	8008a42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e000      	b.n	8008a44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	40007000 	.word	0x40007000
 8008a50:	40023800 	.word	0x40023800
 8008a54:	42470060 	.word	0x42470060

08008a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0cc      	b.n	8008c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a6c:	4b68      	ldr	r3, [pc, #416]	; (8008c10 <HAL_RCC_ClockConfig+0x1b8>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0307 	and.w	r3, r3, #7
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d90c      	bls.n	8008a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a7a:	4b65      	ldr	r3, [pc, #404]	; (8008c10 <HAL_RCC_ClockConfig+0x1b8>)
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a82:	4b63      	ldr	r3, [pc, #396]	; (8008c10 <HAL_RCC_ClockConfig+0x1b8>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d001      	beq.n	8008a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e0b8      	b.n	8008c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d020      	beq.n	8008ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d005      	beq.n	8008ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008aac:	4b59      	ldr	r3, [pc, #356]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	4a58      	ldr	r2, [pc, #352]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ac4:	4b53      	ldr	r3, [pc, #332]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	4a52      	ldr	r2, [pc, #328]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ad0:	4b50      	ldr	r3, [pc, #320]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	494d      	ldr	r1, [pc, #308]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d044      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d107      	bne.n	8008b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008af6:	4b47      	ldr	r3, [pc, #284]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d119      	bne.n	8008b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e07f      	b.n	8008c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d003      	beq.n	8008b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d107      	bne.n	8008b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b16:	4b3f      	ldr	r3, [pc, #252]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d109      	bne.n	8008b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e06f      	b.n	8008c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b26:	4b3b      	ldr	r3, [pc, #236]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e067      	b.n	8008c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b36:	4b37      	ldr	r3, [pc, #220]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f023 0203 	bic.w	r2, r3, #3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	4934      	ldr	r1, [pc, #208]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b48:	f7fb ff7c 	bl	8004a44 <HAL_GetTick>
 8008b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b4e:	e00a      	b.n	8008b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b50:	f7fb ff78 	bl	8004a44 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d901      	bls.n	8008b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e04f      	b.n	8008c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b66:	4b2b      	ldr	r3, [pc, #172]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 020c 	and.w	r2, r3, #12
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d1eb      	bne.n	8008b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b78:	4b25      	ldr	r3, [pc, #148]	; (8008c10 <HAL_RCC_ClockConfig+0x1b8>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d20c      	bcs.n	8008ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b86:	4b22      	ldr	r3, [pc, #136]	; (8008c10 <HAL_RCC_ClockConfig+0x1b8>)
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	b2d2      	uxtb	r2, r2
 8008b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b8e:	4b20      	ldr	r3, [pc, #128]	; (8008c10 <HAL_RCC_ClockConfig+0x1b8>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d001      	beq.n	8008ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e032      	b.n	8008c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0304 	and.w	r3, r3, #4
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d008      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bac:	4b19      	ldr	r3, [pc, #100]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	4916      	ldr	r1, [pc, #88]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bca:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	490e      	ldr	r1, [pc, #56]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008bde:	f000 f821 	bl	8008c24 <HAL_RCC_GetSysClockFreq>
 8008be2:	4602      	mov	r2, r0
 8008be4:	4b0b      	ldr	r3, [pc, #44]	; (8008c14 <HAL_RCC_ClockConfig+0x1bc>)
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	091b      	lsrs	r3, r3, #4
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	490a      	ldr	r1, [pc, #40]	; (8008c18 <HAL_RCC_ClockConfig+0x1c0>)
 8008bf0:	5ccb      	ldrb	r3, [r1, r3]
 8008bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf6:	4a09      	ldr	r2, [pc, #36]	; (8008c1c <HAL_RCC_ClockConfig+0x1c4>)
 8008bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008bfa:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <HAL_RCC_ClockConfig+0x1c8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fb fad8 	bl	80041b4 <HAL_InitTick>

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	40023c00 	.word	0x40023c00
 8008c14:	40023800 	.word	0x40023800
 8008c18:	08018588 	.word	0x08018588
 8008c1c:	2000002c 	.word	0x2000002c
 8008c20:	20000030 	.word	0x20000030

08008c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	607b      	str	r3, [r7, #4]
 8008c30:	2300      	movs	r3, #0
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	2300      	movs	r3, #0
 8008c36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c3c:	4b67      	ldr	r3, [pc, #412]	; (8008ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f003 030c 	and.w	r3, r3, #12
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	d00d      	beq.n	8008c64 <HAL_RCC_GetSysClockFreq+0x40>
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	f200 80bd 	bhi.w	8008dc8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d002      	beq.n	8008c58 <HAL_RCC_GetSysClockFreq+0x34>
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d003      	beq.n	8008c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8008c56:	e0b7      	b.n	8008dc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c58:	4b61      	ldr	r3, [pc, #388]	; (8008de0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008c5a:	60bb      	str	r3, [r7, #8]
       break;
 8008c5c:	e0b7      	b.n	8008dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c5e:	4b61      	ldr	r3, [pc, #388]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008c60:	60bb      	str	r3, [r7, #8]
      break;
 8008c62:	e0b4      	b.n	8008dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c64:	4b5d      	ldr	r3, [pc, #372]	; (8008ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c6e:	4b5b      	ldr	r3, [pc, #364]	; (8008ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d04d      	beq.n	8008d16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c7a:	4b58      	ldr	r3, [pc, #352]	; (8008ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	099b      	lsrs	r3, r3, #6
 8008c80:	461a      	mov	r2, r3
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008c8a:	f04f 0100 	mov.w	r1, #0
 8008c8e:	ea02 0800 	and.w	r8, r2, r0
 8008c92:	ea03 0901 	and.w	r9, r3, r1
 8008c96:	4640      	mov	r0, r8
 8008c98:	4649      	mov	r1, r9
 8008c9a:	f04f 0200 	mov.w	r2, #0
 8008c9e:	f04f 0300 	mov.w	r3, #0
 8008ca2:	014b      	lsls	r3, r1, #5
 8008ca4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008ca8:	0142      	lsls	r2, r0, #5
 8008caa:	4610      	mov	r0, r2
 8008cac:	4619      	mov	r1, r3
 8008cae:	ebb0 0008 	subs.w	r0, r0, r8
 8008cb2:	eb61 0109 	sbc.w	r1, r1, r9
 8008cb6:	f04f 0200 	mov.w	r2, #0
 8008cba:	f04f 0300 	mov.w	r3, #0
 8008cbe:	018b      	lsls	r3, r1, #6
 8008cc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008cc4:	0182      	lsls	r2, r0, #6
 8008cc6:	1a12      	subs	r2, r2, r0
 8008cc8:	eb63 0301 	sbc.w	r3, r3, r1
 8008ccc:	f04f 0000 	mov.w	r0, #0
 8008cd0:	f04f 0100 	mov.w	r1, #0
 8008cd4:	00d9      	lsls	r1, r3, #3
 8008cd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cda:	00d0      	lsls	r0, r2, #3
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	eb12 0208 	adds.w	r2, r2, r8
 8008ce4:	eb43 0309 	adc.w	r3, r3, r9
 8008ce8:	f04f 0000 	mov.w	r0, #0
 8008cec:	f04f 0100 	mov.w	r1, #0
 8008cf0:	0259      	lsls	r1, r3, #9
 8008cf2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008cf6:	0250      	lsls	r0, r2, #9
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4619      	mov	r1, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	461a      	mov	r2, r3
 8008d04:	f04f 0300 	mov.w	r3, #0
 8008d08:	f7f7 ff6e 	bl	8000be8 <__aeabi_uldivmod>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4613      	mov	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	e04a      	b.n	8008dac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d16:	4b31      	ldr	r3, [pc, #196]	; (8008ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	099b      	lsrs	r3, r3, #6
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f04f 0300 	mov.w	r3, #0
 8008d22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008d26:	f04f 0100 	mov.w	r1, #0
 8008d2a:	ea02 0400 	and.w	r4, r2, r0
 8008d2e:	ea03 0501 	and.w	r5, r3, r1
 8008d32:	4620      	mov	r0, r4
 8008d34:	4629      	mov	r1, r5
 8008d36:	f04f 0200 	mov.w	r2, #0
 8008d3a:	f04f 0300 	mov.w	r3, #0
 8008d3e:	014b      	lsls	r3, r1, #5
 8008d40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008d44:	0142      	lsls	r2, r0, #5
 8008d46:	4610      	mov	r0, r2
 8008d48:	4619      	mov	r1, r3
 8008d4a:	1b00      	subs	r0, r0, r4
 8008d4c:	eb61 0105 	sbc.w	r1, r1, r5
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	f04f 0300 	mov.w	r3, #0
 8008d58:	018b      	lsls	r3, r1, #6
 8008d5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008d5e:	0182      	lsls	r2, r0, #6
 8008d60:	1a12      	subs	r2, r2, r0
 8008d62:	eb63 0301 	sbc.w	r3, r3, r1
 8008d66:	f04f 0000 	mov.w	r0, #0
 8008d6a:	f04f 0100 	mov.w	r1, #0
 8008d6e:	00d9      	lsls	r1, r3, #3
 8008d70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d74:	00d0      	lsls	r0, r2, #3
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	1912      	adds	r2, r2, r4
 8008d7c:	eb45 0303 	adc.w	r3, r5, r3
 8008d80:	f04f 0000 	mov.w	r0, #0
 8008d84:	f04f 0100 	mov.w	r1, #0
 8008d88:	0299      	lsls	r1, r3, #10
 8008d8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008d8e:	0290      	lsls	r0, r2, #10
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4610      	mov	r0, r2
 8008d96:	4619      	mov	r1, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f04f 0300 	mov.w	r3, #0
 8008da0:	f7f7 ff22 	bl	8000be8 <__aeabi_uldivmod>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4613      	mov	r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008dac:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	0c1b      	lsrs	r3, r3, #16
 8008db2:	f003 0303 	and.w	r3, r3, #3
 8008db6:	3301      	adds	r3, #1
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc4:	60bb      	str	r3, [r7, #8]
      break;
 8008dc6:	e002      	b.n	8008dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008dca:	60bb      	str	r3, [r7, #8]
      break;
 8008dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dce:	68bb      	ldr	r3, [r7, #8]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008dda:	bf00      	nop
 8008ddc:	40023800 	.word	0x40023800
 8008de0:	00f42400 	.word	0x00f42400
 8008de4:	007a1200 	.word	0x007a1200

08008de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008dec:	4b03      	ldr	r3, [pc, #12]	; (8008dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8008dee:	681b      	ldr	r3, [r3, #0]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	2000002c 	.word	0x2000002c

08008e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e04:	f7ff fff0 	bl	8008de8 <HAL_RCC_GetHCLKFreq>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	0a9b      	lsrs	r3, r3, #10
 8008e10:	f003 0307 	and.w	r3, r3, #7
 8008e14:	4903      	ldr	r1, [pc, #12]	; (8008e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e16:	5ccb      	ldrb	r3, [r1, r3]
 8008e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	40023800 	.word	0x40023800
 8008e24:	08018598 	.word	0x08018598

08008e28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	220f      	movs	r2, #15
 8008e36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e38:	4b12      	ldr	r3, [pc, #72]	; (8008e84 <HAL_RCC_GetClockConfig+0x5c>)
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f003 0203 	and.w	r2, r3, #3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008e44:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <HAL_RCC_GetClockConfig+0x5c>)
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008e50:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <HAL_RCC_GetClockConfig+0x5c>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008e5c:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <HAL_RCC_GetClockConfig+0x5c>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	08db      	lsrs	r3, r3, #3
 8008e62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e6a:	4b07      	ldr	r3, [pc, #28]	; (8008e88 <HAL_RCC_GetClockConfig+0x60>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0207 	and.w	r2, r3, #7
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	601a      	str	r2, [r3, #0]
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	40023800 	.word	0x40023800
 8008e88:	40023c00 	.word	0x40023c00

08008e8c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e01c      	b.n	8008ed8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	795b      	ldrb	r3, [r3, #5]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d105      	bne.n	8008eb4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7fa ffae 	bl	8003e10 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f042 0204 	orr.w	r2, r2, #4
 8008ec8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e07b      	b.n	8008fea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d108      	bne.n	8008f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f02:	d009      	beq.n	8008f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	61da      	str	r2, [r3, #28]
 8008f0a:	e005      	b.n	8008f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d106      	bne.n	8008f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fa ff8e 	bl	8003e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f60:	431a      	orrs	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	431a      	orrs	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
 8008f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f9c:	ea42 0103 	orr.w	r1, r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	0c1b      	lsrs	r3, r3, #16
 8008fb6:	f003 0104 	and.w	r1, r3, #4
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	f003 0210 	and.w	r2, r3, #16
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e01a      	b.n	800903a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2202      	movs	r2, #2
 8009008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800901a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7fa fff3 	bl	8004008 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b088      	sub	sp, #32
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	603b      	str	r3, [r7, #0]
 800904e:	4613      	mov	r3, r2
 8009050:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800905c:	2b01      	cmp	r3, #1
 800905e:	d101      	bne.n	8009064 <HAL_SPI_Transmit+0x22>
 8009060:	2302      	movs	r3, #2
 8009062:	e126      	b.n	80092b2 <HAL_SPI_Transmit+0x270>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800906c:	f7fb fcea 	bl	8004a44 <HAL_GetTick>
 8009070:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b01      	cmp	r3, #1
 8009080:	d002      	beq.n	8009088 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009082:	2302      	movs	r3, #2
 8009084:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009086:	e10b      	b.n	80092a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d002      	beq.n	8009094 <HAL_SPI_Transmit+0x52>
 800908e:	88fb      	ldrh	r3, [r7, #6]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d102      	bne.n	800909a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009098:	e102      	b.n	80092a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2203      	movs	r2, #3
 800909e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	88fa      	ldrh	r2, [r7, #6]
 80090b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	88fa      	ldrh	r2, [r7, #6]
 80090b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090e0:	d10f      	bne.n	8009102 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009100:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910c:	2b40      	cmp	r3, #64	; 0x40
 800910e:	d007      	beq.n	8009120 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800911e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009128:	d14b      	bne.n	80091c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <HAL_SPI_Transmit+0xf6>
 8009132:	8afb      	ldrh	r3, [r7, #22]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d13e      	bne.n	80091b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913c:	881a      	ldrh	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009148:	1c9a      	adds	r2, r3, #2
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b01      	subs	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800915c:	e02b      	b.n	80091b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b02      	cmp	r3, #2
 800916a:	d112      	bne.n	8009192 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	881a      	ldrh	r2, [r3, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917c:	1c9a      	adds	r2, r3, #2
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009186:	b29b      	uxth	r3, r3
 8009188:	3b01      	subs	r3, #1
 800918a:	b29a      	uxth	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009190:	e011      	b.n	80091b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009192:	f7fb fc57 	bl	8004a44 <HAL_GetTick>
 8009196:	4602      	mov	r2, r0
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d803      	bhi.n	80091aa <HAL_SPI_Transmit+0x168>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091a8:	d102      	bne.n	80091b0 <HAL_SPI_Transmit+0x16e>
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d102      	bne.n	80091b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091b4:	e074      	b.n	80092a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1ce      	bne.n	800915e <HAL_SPI_Transmit+0x11c>
 80091c0:	e04c      	b.n	800925c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <HAL_SPI_Transmit+0x18e>
 80091ca:	8afb      	ldrh	r3, [r7, #22]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d140      	bne.n	8009252 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	330c      	adds	r3, #12
 80091da:	7812      	ldrb	r2, [r2, #0]
 80091dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	3b01      	subs	r3, #1
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80091f6:	e02c      	b.n	8009252 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f003 0302 	and.w	r3, r3, #2
 8009202:	2b02      	cmp	r3, #2
 8009204:	d113      	bne.n	800922e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	330c      	adds	r3, #12
 8009210:	7812      	ldrb	r2, [r2, #0]
 8009212:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009222:	b29b      	uxth	r3, r3
 8009224:	3b01      	subs	r3, #1
 8009226:	b29a      	uxth	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	86da      	strh	r2, [r3, #54]	; 0x36
 800922c:	e011      	b.n	8009252 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800922e:	f7fb fc09 	bl	8004a44 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d803      	bhi.n	8009246 <HAL_SPI_Transmit+0x204>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009244:	d102      	bne.n	800924c <HAL_SPI_Transmit+0x20a>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d102      	bne.n	8009252 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009250:	e026      	b.n	80092a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009256:	b29b      	uxth	r3, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1cd      	bne.n	80091f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 fb53 	bl	800990c <SPI_EndRxTxTransaction>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2220      	movs	r2, #32
 8009270:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10a      	bne.n	8009290 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800927a:	2300      	movs	r3, #0
 800927c:	613b      	str	r3, [r7, #16]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	613b      	str	r3, [r7, #16]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	613b      	str	r3, [r7, #16]
 800928e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	77fb      	strb	r3, [r7, #31]
 800929c:	e000      	b.n	80092a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800929e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3720      	adds	r7, #32
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	4613      	mov	r3, r2
 80092c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_SPI_Transmit_DMA+0x20>
 80092d8:	2302      	movs	r3, #2
 80092da:	e09b      	b.n	8009414 <HAL_SPI_Transmit_DMA+0x158>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d002      	beq.n	80092f6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80092f0:	2302      	movs	r3, #2
 80092f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092f4:	e089      	b.n	800940a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <HAL_SPI_Transmit_DMA+0x46>
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d102      	bne.n	8009308 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009306:	e080      	b.n	800940a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2203      	movs	r2, #3
 800930c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	88fa      	ldrh	r2, [r7, #6]
 8009320:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	88fa      	ldrh	r2, [r7, #6]
 8009326:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800934e:	d10f      	bne.n	8009370 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800935e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800936e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009374:	4a29      	ldr	r2, [pc, #164]	; (800941c <HAL_SPI_Transmit_DMA+0x160>)
 8009376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937c:	4a28      	ldr	r2, [pc, #160]	; (8009420 <HAL_SPI_Transmit_DMA+0x164>)
 800937e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009384:	4a27      	ldr	r2, [pc, #156]	; (8009424 <HAL_SPI_Transmit_DMA+0x168>)
 8009386:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800938c:	2200      	movs	r2, #0
 800938e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009398:	4619      	mov	r1, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	330c      	adds	r3, #12
 80093a0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80093a8:	f7fb fffe 	bl	80053a8 <HAL_DMA_Start_IT>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00c      	beq.n	80093cc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b6:	f043 0210 	orr.w	r2, r3, #16
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80093ca:	e01e      	b.n	800940a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d6:	2b40      	cmp	r3, #64	; 0x40
 80093d8:	d007      	beq.n	80093ea <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093e8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f042 0220 	orr.w	r2, r2, #32
 80093f8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 0202 	orr.w	r2, r2, #2
 8009408:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009412:	7dfb      	ldrb	r3, [r7, #23]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	08009779 	.word	0x08009779
 8009420:	080096d1 	.word	0x080096d1
 8009424:	08009795 	.word	0x08009795

08009428 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00f      	beq.n	800945c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009440:	4618      	mov	r0, r3
 8009442:	f7fc f809 	bl	8005458 <HAL_DMA_Abort>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d007      	beq.n	800945c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009450:	f043 0210 	orr.w	r2, r3, #16
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00f      	beq.n	8009484 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009468:	4618      	mov	r0, r3
 800946a:	f7fb fff5 	bl	8005458 <HAL_DMA_Abort>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d007      	beq.n	8009484 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009478:	f043 0210 	orr.w	r2, r3, #16
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0203 	bic.w	r2, r2, #3
 8009492:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 800949c:	7bfb      	ldrb	r3, [r7, #15]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	099b      	lsrs	r3, r3, #6
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10f      	bne.n	80094ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	099b      	lsrs	r3, r3, #6
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
    return;
 80094ea:	e0d7      	b.n	800969c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	085b      	lsrs	r3, r3, #1
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <HAL_SPI_IRQHandler+0x66>
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	09db      	lsrs	r3, r3, #7
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	2b00      	cmp	r3, #0
 8009502:	d004      	beq.n	800950e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	4798      	blx	r3
    return;
 800950c:	e0c6      	b.n	800969c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10c      	bne.n	8009534 <HAL_SPI_IRQHandler+0x8c>
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	099b      	lsrs	r3, r3, #6
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	0a1b      	lsrs	r3, r3, #8
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 80b4 	beq.w	800969c <HAL_SPI_IRQHandler+0x1f4>
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	095b      	lsrs	r3, r3, #5
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 80ad 	beq.w	800969c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	099b      	lsrs	r3, r3, #6
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d023      	beq.n	8009596 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b03      	cmp	r3, #3
 8009558:	d011      	beq.n	800957e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955e:	f043 0204 	orr.w	r2, r3, #4
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009566:	2300      	movs	r3, #0
 8009568:	617b      	str	r3, [r7, #20]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	617b      	str	r3, [r7, #20]
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	e00b      	b.n	8009596 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800957e:	2300      	movs	r3, #0
 8009580:	613b      	str	r3, [r7, #16]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	613b      	str	r3, [r7, #16]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	613b      	str	r3, [r7, #16]
 8009592:	693b      	ldr	r3, [r7, #16]
        return;
 8009594:	e082      	b.n	800969c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	095b      	lsrs	r3, r3, #5
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d014      	beq.n	80095cc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a6:	f043 0201 	orr.w	r2, r3, #1
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80095ae:	2300      	movs	r3, #0
 80095b0:	60fb      	str	r3, [r7, #12]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00c      	beq.n	80095f2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095dc:	f043 0208 	orr.w	r2, r3, #8
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80095e4:	2300      	movs	r3, #0
 80095e6:	60bb      	str	r3, [r7, #8]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	60bb      	str	r3, [r7, #8]
 80095f0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d04f      	beq.n	800969a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009608:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d104      	bne.n	8009626 <HAL_SPI_IRQHandler+0x17e>
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d034      	beq.n	8009690 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f022 0203 	bic.w	r2, r2, #3
 8009634:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d011      	beq.n	8009662 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009642:	4a18      	ldr	r2, [pc, #96]	; (80096a4 <HAL_SPI_IRQHandler+0x1fc>)
 8009644:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800964a:	4618      	mov	r0, r3
 800964c:	f7fb ff74 	bl	8005538 <HAL_DMA_Abort_IT>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d005      	beq.n	8009662 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009666:	2b00      	cmp	r3, #0
 8009668:	d016      	beq.n	8009698 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800966e:	4a0d      	ldr	r2, [pc, #52]	; (80096a4 <HAL_SPI_IRQHandler+0x1fc>)
 8009670:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009676:	4618      	mov	r0, r3
 8009678:	f7fb ff5e 	bl	8005538 <HAL_DMA_Abort_IT>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00a      	beq.n	8009698 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800968e:	e003      	b.n	8009698 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f813 	bl	80096bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009696:	e000      	b.n	800969a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009698:	bf00      	nop
    return;
 800969a:	bf00      	nop
  }
}
 800969c:	3720      	adds	r7, #32
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	080097d5 	.word	0x080097d5

080096a8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096de:	f7fb f9b1 	bl	8004a44 <HAL_GetTick>
 80096e2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096f2:	d03b      	beq.n	800976c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0220 	bic.w	r2, r2, #32
 8009702:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 0202 	bic.w	r2, r2, #2
 8009712:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	2164      	movs	r1, #100	; 0x64
 8009718:	6978      	ldr	r0, [r7, #20]
 800971a:	f000 f8f7 	bl	800990c <SPI_EndRxTxTransaction>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d005      	beq.n	8009730 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009728:	f043 0220 	orr.w	r2, r3, #32
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009738:	2300      	movs	r3, #0
 800973a:	60fb      	str	r3, [r7, #12]
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	60fb      	str	r3, [r7, #12]
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2200      	movs	r2, #0
 8009752:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009760:	2b00      	cmp	r3, #0
 8009762:	d003      	beq.n	800976c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009764:	6978      	ldr	r0, [r7, #20]
 8009766:	f7ff ffa9 	bl	80096bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800976a:	e002      	b.n	8009772 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800976c:	6978      	ldr	r0, [r7, #20]
 800976e:	f7f8 fc59 	bl	8002024 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009784:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f7ff ff8e 	bl	80096a8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800978c:	bf00      	nop
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f022 0203 	bic.w	r2, r2, #3
 80097b0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b6:	f043 0210 	orr.w	r2, r3, #16
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff ff78 	bl	80096bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097cc:	bf00      	nop
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f7ff ff64 	bl	80096bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097f4:	bf00      	nop
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	4613      	mov	r3, r2
 800980a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800980c:	f7fb f91a 	bl	8004a44 <HAL_GetTick>
 8009810:	4602      	mov	r2, r0
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	1a9b      	subs	r3, r3, r2
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4413      	add	r3, r2
 800981a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800981c:	f7fb f912 	bl	8004a44 <HAL_GetTick>
 8009820:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009822:	4b39      	ldr	r3, [pc, #228]	; (8009908 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	015b      	lsls	r3, r3, #5
 8009828:	0d1b      	lsrs	r3, r3, #20
 800982a:	69fa      	ldr	r2, [r7, #28]
 800982c:	fb02 f303 	mul.w	r3, r2, r3
 8009830:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009832:	e054      	b.n	80098de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800983a:	d050      	beq.n	80098de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800983c:	f7fb f902 	bl	8004a44 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	429a      	cmp	r2, r3
 800984a:	d902      	bls.n	8009852 <SPI_WaitFlagStateUntilTimeout+0x56>
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d13d      	bne.n	80098ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800986a:	d111      	bne.n	8009890 <SPI_WaitFlagStateUntilTimeout+0x94>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009874:	d004      	beq.n	8009880 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800987e:	d107      	bne.n	8009890 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800988e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009898:	d10f      	bne.n	80098ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098a8:	601a      	str	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e017      	b.n	80098fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	3b01      	subs	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689a      	ldr	r2, [r3, #8]
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	4013      	ands	r3, r2
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	bf0c      	ite	eq
 80098ee:	2301      	moveq	r3, #1
 80098f0:	2300      	movne	r3, #0
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	461a      	mov	r2, r3
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d19b      	bne.n	8009834 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3720      	adds	r7, #32
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	2000002c 	.word	0x2000002c

0800990c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af02      	add	r7, sp, #8
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009918:	4b1b      	ldr	r3, [pc, #108]	; (8009988 <SPI_EndRxTxTransaction+0x7c>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a1b      	ldr	r2, [pc, #108]	; (800998c <SPI_EndRxTxTransaction+0x80>)
 800991e:	fba2 2303 	umull	r2, r3, r2, r3
 8009922:	0d5b      	lsrs	r3, r3, #21
 8009924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009928:	fb02 f303 	mul.w	r3, r2, r3
 800992c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009936:	d112      	bne.n	800995e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2200      	movs	r2, #0
 8009940:	2180      	movs	r1, #128	; 0x80
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f7ff ff5a 	bl	80097fc <SPI_WaitFlagStateUntilTimeout>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d016      	beq.n	800997c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009952:	f043 0220 	orr.w	r2, r3, #32
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e00f      	b.n	800997e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00a      	beq.n	800997a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	3b01      	subs	r3, #1
 8009968:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009974:	2b80      	cmp	r3, #128	; 0x80
 8009976:	d0f2      	beq.n	800995e <SPI_EndRxTxTransaction+0x52>
 8009978:	e000      	b.n	800997c <SPI_EndRxTxTransaction+0x70>
        break;
 800997a:	bf00      	nop
  }

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	2000002c 	.word	0x2000002c
 800998c:	165e9f81 	.word	0x165e9f81

08009990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e041      	b.n	8009a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d106      	bne.n	80099bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7fa fbb6 	bl	8004128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3304      	adds	r3, #4
 80099cc:	4619      	mov	r1, r3
 80099ce:	4610      	mov	r0, r2
 80099d0:	f000 fbca 	bl	800a168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d001      	beq.n	8009a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e04e      	b.n	8009ae6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68da      	ldr	r2, [r3, #12]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f042 0201 	orr.w	r2, r2, #1
 8009a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a23      	ldr	r2, [pc, #140]	; (8009af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d022      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0x80>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a72:	d01d      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0x80>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a1f      	ldr	r2, [pc, #124]	; (8009af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d018      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0x80>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a1e      	ldr	r2, [pc, #120]	; (8009afc <HAL_TIM_Base_Start_IT+0xcc>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d013      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0x80>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a1c      	ldr	r2, [pc, #112]	; (8009b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00e      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0x80>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a1b      	ldr	r2, [pc, #108]	; (8009b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d009      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0x80>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a19      	ldr	r2, [pc, #100]	; (8009b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d004      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0x80>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a18      	ldr	r2, [pc, #96]	; (8009b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d111      	bne.n	8009ad4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b06      	cmp	r3, #6
 8009ac0:	d010      	beq.n	8009ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f042 0201 	orr.w	r2, r2, #1
 8009ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ad2:	e007      	b.n	8009ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f042 0201 	orr.w	r2, r2, #1
 8009ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	40010000 	.word	0x40010000
 8009af8:	40000400 	.word	0x40000400
 8009afc:	40000800 	.word	0x40000800
 8009b00:	40000c00 	.word	0x40000c00
 8009b04:	40010400 	.word	0x40010400
 8009b08:	40014000 	.word	0x40014000
 8009b0c:	40001800 	.word	0x40001800

08009b10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e097      	b.n	8009c54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d106      	bne.n	8009b3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7fa faa5 	bl	8004088 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2202      	movs	r2, #2
 8009b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	6812      	ldr	r2, [r2, #0]
 8009b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b54:	f023 0307 	bic.w	r3, r3, #7
 8009b58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3304      	adds	r3, #4
 8009b62:	4619      	mov	r1, r3
 8009b64:	4610      	mov	r0, r2
 8009b66:	f000 faff 	bl	800a168 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6a1b      	ldr	r3, [r3, #32]
 8009b80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	689a      	ldr	r2, [r3, #8]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009bb0:	f023 030c 	bic.w	r3, r3, #12
 8009bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	68da      	ldr	r2, [r3, #12]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	021b      	lsls	r3, r3, #8
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	011a      	lsls	r2, r3, #4
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	031b      	lsls	r3, r3, #12
 8009be0:	4313      	orrs	r3, r2
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009bee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009bf6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	011b      	lsls	r3, r3, #4
 8009c02:	4313      	orrs	r3, r2
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d110      	bne.n	8009cae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d102      	bne.n	8009c98 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c92:	7b7b      	ldrb	r3, [r7, #13]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d001      	beq.n	8009c9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e069      	b.n	8009d70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cac:	e031      	b.n	8009d12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b04      	cmp	r3, #4
 8009cb2:	d110      	bne.n	8009cd6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d102      	bne.n	8009cc0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009cba:	7b3b      	ldrb	r3, [r7, #12]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d001      	beq.n	8009cc4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e055      	b.n	8009d70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cd4:	e01d      	b.n	8009d12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d108      	bne.n	8009cee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d105      	bne.n	8009cee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ce2:	7b7b      	ldrb	r3, [r7, #13]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d102      	bne.n	8009cee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ce8:	7b3b      	ldrb	r3, [r7, #12]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d001      	beq.n	8009cf2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e03e      	b.n	8009d70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2202      	movs	r2, #2
 8009cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2202      	movs	r2, #2
 8009d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d003      	beq.n	8009d20 <HAL_TIM_Encoder_Start+0xc4>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	d008      	beq.n	8009d30 <HAL_TIM_Encoder_Start+0xd4>
 8009d1e:	e00f      	b.n	8009d40 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2201      	movs	r2, #1
 8009d26:	2100      	movs	r1, #0
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f000 fb57 	bl	800a3dc <TIM_CCxChannelCmd>
      break;
 8009d2e:	e016      	b.n	8009d5e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2201      	movs	r2, #1
 8009d36:	2104      	movs	r1, #4
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fb4f 	bl	800a3dc <TIM_CCxChannelCmd>
      break;
 8009d3e:	e00e      	b.n	8009d5e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2201      	movs	r2, #1
 8009d46:	2100      	movs	r1, #0
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 fb47 	bl	800a3dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2201      	movs	r2, #1
 8009d54:	2104      	movs	r1, #4
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fb40 	bl	800a3dc <TIM_CCxChannelCmd>
      break;
 8009d5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f042 0201 	orr.w	r2, r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	f003 0302 	and.w	r3, r3, #2
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d122      	bne.n	8009dd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	f003 0302 	and.w	r3, r3, #2
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d11b      	bne.n	8009dd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f06f 0202 	mvn.w	r2, #2
 8009da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f9b5 	bl	800a12a <HAL_TIM_IC_CaptureCallback>
 8009dc0:	e005      	b.n	8009dce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f9a7 	bl	800a116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f9b8 	bl	800a13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	f003 0304 	and.w	r3, r3, #4
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d122      	bne.n	8009e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	f003 0304 	and.w	r3, r3, #4
 8009dec:	2b04      	cmp	r3, #4
 8009dee:	d11b      	bne.n	8009e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f06f 0204 	mvn.w	r2, #4
 8009df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d003      	beq.n	8009e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f98b 	bl	800a12a <HAL_TIM_IC_CaptureCallback>
 8009e14:	e005      	b.n	8009e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f97d 	bl	800a116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f98e 	bl	800a13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	f003 0308 	and.w	r3, r3, #8
 8009e32:	2b08      	cmp	r3, #8
 8009e34:	d122      	bne.n	8009e7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	f003 0308 	and.w	r3, r3, #8
 8009e40:	2b08      	cmp	r3, #8
 8009e42:	d11b      	bne.n	8009e7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f06f 0208 	mvn.w	r2, #8
 8009e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2204      	movs	r2, #4
 8009e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	f003 0303 	and.w	r3, r3, #3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f961 	bl	800a12a <HAL_TIM_IC_CaptureCallback>
 8009e68:	e005      	b.n	8009e76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f953 	bl	800a116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f964 	bl	800a13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	f003 0310 	and.w	r3, r3, #16
 8009e86:	2b10      	cmp	r3, #16
 8009e88:	d122      	bne.n	8009ed0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f003 0310 	and.w	r3, r3, #16
 8009e94:	2b10      	cmp	r3, #16
 8009e96:	d11b      	bne.n	8009ed0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f06f 0210 	mvn.w	r2, #16
 8009ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2208      	movs	r2, #8
 8009ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	69db      	ldr	r3, [r3, #28]
 8009eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f937 	bl	800a12a <HAL_TIM_IC_CaptureCallback>
 8009ebc:	e005      	b.n	8009eca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f929 	bl	800a116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f93a 	bl	800a13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d10e      	bne.n	8009efc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d107      	bne.n	8009efc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f06f 0201 	mvn.w	r2, #1
 8009ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7f9 fe54 	bl	8003ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f06:	2b80      	cmp	r3, #128	; 0x80
 8009f08:	d10e      	bne.n	8009f28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f14:	2b80      	cmp	r3, #128	; 0x80
 8009f16:	d107      	bne.n	8009f28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fb06 	bl	800a534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f32:	2b40      	cmp	r3, #64	; 0x40
 8009f34:	d10e      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f40:	2b40      	cmp	r3, #64	; 0x40
 8009f42:	d107      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f8ff 	bl	800a152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	f003 0320 	and.w	r3, r3, #32
 8009f5e:	2b20      	cmp	r3, #32
 8009f60:	d10e      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	f003 0320 	and.w	r3, r3, #32
 8009f6c:	2b20      	cmp	r3, #32
 8009f6e:	d107      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f06f 0220 	mvn.w	r2, #32
 8009f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fad0 	bl	800a520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d101      	bne.n	8009fa4 <HAL_TIM_ConfigClockSource+0x1c>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	e0b4      	b.n	800a10e <HAL_TIM_ConfigClockSource+0x186>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2202      	movs	r2, #2
 8009fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fdc:	d03e      	beq.n	800a05c <HAL_TIM_ConfigClockSource+0xd4>
 8009fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fe2:	f200 8087 	bhi.w	800a0f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fea:	f000 8086 	beq.w	800a0fa <HAL_TIM_ConfigClockSource+0x172>
 8009fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff2:	d87f      	bhi.n	800a0f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ff4:	2b70      	cmp	r3, #112	; 0x70
 8009ff6:	d01a      	beq.n	800a02e <HAL_TIM_ConfigClockSource+0xa6>
 8009ff8:	2b70      	cmp	r3, #112	; 0x70
 8009ffa:	d87b      	bhi.n	800a0f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ffc:	2b60      	cmp	r3, #96	; 0x60
 8009ffe:	d050      	beq.n	800a0a2 <HAL_TIM_ConfigClockSource+0x11a>
 800a000:	2b60      	cmp	r3, #96	; 0x60
 800a002:	d877      	bhi.n	800a0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a004:	2b50      	cmp	r3, #80	; 0x50
 800a006:	d03c      	beq.n	800a082 <HAL_TIM_ConfigClockSource+0xfa>
 800a008:	2b50      	cmp	r3, #80	; 0x50
 800a00a:	d873      	bhi.n	800a0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a00c:	2b40      	cmp	r3, #64	; 0x40
 800a00e:	d058      	beq.n	800a0c2 <HAL_TIM_ConfigClockSource+0x13a>
 800a010:	2b40      	cmp	r3, #64	; 0x40
 800a012:	d86f      	bhi.n	800a0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a014:	2b30      	cmp	r3, #48	; 0x30
 800a016:	d064      	beq.n	800a0e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a018:	2b30      	cmp	r3, #48	; 0x30
 800a01a:	d86b      	bhi.n	800a0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a01c:	2b20      	cmp	r3, #32
 800a01e:	d060      	beq.n	800a0e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a020:	2b20      	cmp	r3, #32
 800a022:	d867      	bhi.n	800a0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a024:	2b00      	cmp	r3, #0
 800a026:	d05c      	beq.n	800a0e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a028:	2b10      	cmp	r3, #16
 800a02a:	d05a      	beq.n	800a0e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a02c:	e062      	b.n	800a0f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6818      	ldr	r0, [r3, #0]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	6899      	ldr	r1, [r3, #8]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	f000 f9ad 	bl	800a39c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a050:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	609a      	str	r2, [r3, #8]
      break;
 800a05a:	e04f      	b.n	800a0fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	6899      	ldr	r1, [r3, #8]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	685a      	ldr	r2, [r3, #4]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f000 f996 	bl	800a39c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	689a      	ldr	r2, [r3, #8]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a07e:	609a      	str	r2, [r3, #8]
      break;
 800a080:	e03c      	b.n	800a0fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6818      	ldr	r0, [r3, #0]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	6859      	ldr	r1, [r3, #4]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	461a      	mov	r2, r3
 800a090:	f000 f90a 	bl	800a2a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2150      	movs	r1, #80	; 0x50
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 f963 	bl	800a366 <TIM_ITRx_SetConfig>
      break;
 800a0a0:	e02c      	b.n	800a0fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6818      	ldr	r0, [r3, #0]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	6859      	ldr	r1, [r3, #4]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f000 f929 	bl	800a306 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2160      	movs	r1, #96	; 0x60
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 f953 	bl	800a366 <TIM_ITRx_SetConfig>
      break;
 800a0c0:	e01c      	b.n	800a0fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	6859      	ldr	r1, [r3, #4]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f000 f8ea 	bl	800a2a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2140      	movs	r1, #64	; 0x40
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 f943 	bl	800a366 <TIM_ITRx_SetConfig>
      break;
 800a0e0:	e00c      	b.n	800a0fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	f000 f93a 	bl	800a366 <TIM_ITRx_SetConfig>
      break;
 800a0f2:	e003      	b.n	800a0fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f8:	e000      	b.n	800a0fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a0fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a132:	bf00      	nop
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a15a:	bf00      	nop
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
	...

0800a168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a40      	ldr	r2, [pc, #256]	; (800a27c <TIM_Base_SetConfig+0x114>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d013      	beq.n	800a1a8 <TIM_Base_SetConfig+0x40>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a186:	d00f      	beq.n	800a1a8 <TIM_Base_SetConfig+0x40>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a3d      	ldr	r2, [pc, #244]	; (800a280 <TIM_Base_SetConfig+0x118>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00b      	beq.n	800a1a8 <TIM_Base_SetConfig+0x40>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a3c      	ldr	r2, [pc, #240]	; (800a284 <TIM_Base_SetConfig+0x11c>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d007      	beq.n	800a1a8 <TIM_Base_SetConfig+0x40>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a3b      	ldr	r2, [pc, #236]	; (800a288 <TIM_Base_SetConfig+0x120>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d003      	beq.n	800a1a8 <TIM_Base_SetConfig+0x40>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a3a      	ldr	r2, [pc, #232]	; (800a28c <TIM_Base_SetConfig+0x124>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d108      	bne.n	800a1ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a2f      	ldr	r2, [pc, #188]	; (800a27c <TIM_Base_SetConfig+0x114>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d02b      	beq.n	800a21a <TIM_Base_SetConfig+0xb2>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1c8:	d027      	beq.n	800a21a <TIM_Base_SetConfig+0xb2>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a2c      	ldr	r2, [pc, #176]	; (800a280 <TIM_Base_SetConfig+0x118>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d023      	beq.n	800a21a <TIM_Base_SetConfig+0xb2>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a2b      	ldr	r2, [pc, #172]	; (800a284 <TIM_Base_SetConfig+0x11c>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d01f      	beq.n	800a21a <TIM_Base_SetConfig+0xb2>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a2a      	ldr	r2, [pc, #168]	; (800a288 <TIM_Base_SetConfig+0x120>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d01b      	beq.n	800a21a <TIM_Base_SetConfig+0xb2>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a29      	ldr	r2, [pc, #164]	; (800a28c <TIM_Base_SetConfig+0x124>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d017      	beq.n	800a21a <TIM_Base_SetConfig+0xb2>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a28      	ldr	r2, [pc, #160]	; (800a290 <TIM_Base_SetConfig+0x128>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d013      	beq.n	800a21a <TIM_Base_SetConfig+0xb2>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a27      	ldr	r2, [pc, #156]	; (800a294 <TIM_Base_SetConfig+0x12c>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00f      	beq.n	800a21a <TIM_Base_SetConfig+0xb2>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a26      	ldr	r2, [pc, #152]	; (800a298 <TIM_Base_SetConfig+0x130>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d00b      	beq.n	800a21a <TIM_Base_SetConfig+0xb2>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a25      	ldr	r2, [pc, #148]	; (800a29c <TIM_Base_SetConfig+0x134>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d007      	beq.n	800a21a <TIM_Base_SetConfig+0xb2>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a24      	ldr	r2, [pc, #144]	; (800a2a0 <TIM_Base_SetConfig+0x138>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d003      	beq.n	800a21a <TIM_Base_SetConfig+0xb2>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a23      	ldr	r2, [pc, #140]	; (800a2a4 <TIM_Base_SetConfig+0x13c>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d108      	bne.n	800a22c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	4313      	orrs	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4a0a      	ldr	r2, [pc, #40]	; (800a27c <TIM_Base_SetConfig+0x114>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d003      	beq.n	800a260 <TIM_Base_SetConfig+0xf8>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a0c      	ldr	r2, [pc, #48]	; (800a28c <TIM_Base_SetConfig+0x124>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d103      	bne.n	800a268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	691a      	ldr	r2, [r3, #16]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	615a      	str	r2, [r3, #20]
}
 800a26e:	bf00      	nop
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	40010000 	.word	0x40010000
 800a280:	40000400 	.word	0x40000400
 800a284:	40000800 	.word	0x40000800
 800a288:	40000c00 	.word	0x40000c00
 800a28c:	40010400 	.word	0x40010400
 800a290:	40014000 	.word	0x40014000
 800a294:	40014400 	.word	0x40014400
 800a298:	40014800 	.word	0x40014800
 800a29c:	40001800 	.word	0x40001800
 800a2a0:	40001c00 	.word	0x40001c00
 800a2a4:	40002000 	.word	0x40002000

0800a2a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	f023 0201 	bic.w	r2, r3, #1
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	011b      	lsls	r3, r3, #4
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f023 030a 	bic.w	r3, r3, #10
 800a2e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	621a      	str	r2, [r3, #32]
}
 800a2fa:	bf00      	nop
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a306:	b480      	push	{r7}
 800a308:	b087      	sub	sp, #28
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	60f8      	str	r0, [r7, #12]
 800a30e:	60b9      	str	r1, [r7, #8]
 800a310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	f023 0210 	bic.w	r2, r3, #16
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	031b      	lsls	r3, r3, #12
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	4313      	orrs	r3, r2
 800a33a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	011b      	lsls	r3, r3, #4
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	621a      	str	r2, [r3, #32]
}
 800a35a:	bf00      	nop
 800a35c:	371c      	adds	r7, #28
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a366:	b480      	push	{r7}
 800a368:	b085      	sub	sp, #20
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a37c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	4313      	orrs	r3, r2
 800a384:	f043 0307 	orr.w	r3, r3, #7
 800a388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	609a      	str	r2, [r3, #8]
}
 800a390:	bf00      	nop
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	021a      	lsls	r2, r3, #8
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	609a      	str	r2, [r3, #8]
}
 800a3d0:	bf00      	nop
 800a3d2:	371c      	adds	r7, #28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	f003 031f 	and.w	r3, r3, #31
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6a1a      	ldr	r2, [r3, #32]
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	43db      	mvns	r3, r3
 800a3fe:	401a      	ands	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6a1a      	ldr	r2, [r3, #32]
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	f003 031f 	and.w	r3, r3, #31
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	fa01 f303 	lsl.w	r3, r1, r3
 800a414:	431a      	orrs	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	621a      	str	r2, [r3, #32]
}
 800a41a:	bf00      	nop
 800a41c:	371c      	adds	r7, #28
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
	...

0800a428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d101      	bne.n	800a440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a43c:	2302      	movs	r3, #2
 800a43e:	e05a      	b.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	4313      	orrs	r3, r2
 800a470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a21      	ldr	r2, [pc, #132]	; (800a504 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d022      	beq.n	800a4ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a48c:	d01d      	beq.n	800a4ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a1d      	ldr	r2, [pc, #116]	; (800a508 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d018      	beq.n	800a4ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a1b      	ldr	r2, [pc, #108]	; (800a50c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d013      	beq.n	800a4ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a1a      	ldr	r2, [pc, #104]	; (800a510 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d00e      	beq.n	800a4ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a18      	ldr	r2, [pc, #96]	; (800a514 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d009      	beq.n	800a4ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a17      	ldr	r2, [pc, #92]	; (800a518 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d004      	beq.n	800a4ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a15      	ldr	r2, [pc, #84]	; (800a51c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d10c      	bne.n	800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	40010000 	.word	0x40010000
 800a508:	40000400 	.word	0x40000400
 800a50c:	40000800 	.word	0x40000800
 800a510:	40000c00 	.word	0x40000c00
 800a514:	40010400 	.word	0x40010400
 800a518:	40014000 	.word	0x40014000
 800a51c:	40001800 	.word	0x40001800

0800a520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a548:	b084      	sub	sp, #16
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	f107 001c 	add.w	r0, r7, #28
 800a556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d122      	bne.n	800a5a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d105      	bne.n	800a59a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f001 fb1c 	bl	800bbd8 <USB_CoreReset>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]
 800a5a4:	e01a      	b.n	800a5dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f001 fb10 	bl	800bbd8 <USB_CoreReset>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	639a      	str	r2, [r3, #56]	; 0x38
 800a5ce:	e005      	b.n	800a5dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d10b      	bne.n	800a5fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f043 0206 	orr.w	r2, r3, #6
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f043 0220 	orr.w	r2, r3, #32
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a606:	b004      	add	sp, #16
 800a608:	4770      	bx	lr
	...

0800a60c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	4613      	mov	r3, r2
 800a618:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d165      	bne.n	800a6ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	4a41      	ldr	r2, [pc, #260]	; (800a728 <USB_SetTurnaroundTime+0x11c>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d906      	bls.n	800a636 <USB_SetTurnaroundTime+0x2a>
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	4a40      	ldr	r2, [pc, #256]	; (800a72c <USB_SetTurnaroundTime+0x120>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d202      	bcs.n	800a636 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a630:	230f      	movs	r3, #15
 800a632:	617b      	str	r3, [r7, #20]
 800a634:	e062      	b.n	800a6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	4a3c      	ldr	r2, [pc, #240]	; (800a72c <USB_SetTurnaroundTime+0x120>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d306      	bcc.n	800a64c <USB_SetTurnaroundTime+0x40>
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	4a3b      	ldr	r2, [pc, #236]	; (800a730 <USB_SetTurnaroundTime+0x124>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d202      	bcs.n	800a64c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a646:	230e      	movs	r3, #14
 800a648:	617b      	str	r3, [r7, #20]
 800a64a:	e057      	b.n	800a6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	4a38      	ldr	r2, [pc, #224]	; (800a730 <USB_SetTurnaroundTime+0x124>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d306      	bcc.n	800a662 <USB_SetTurnaroundTime+0x56>
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	4a37      	ldr	r2, [pc, #220]	; (800a734 <USB_SetTurnaroundTime+0x128>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d202      	bcs.n	800a662 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a65c:	230d      	movs	r3, #13
 800a65e:	617b      	str	r3, [r7, #20]
 800a660:	e04c      	b.n	800a6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	4a33      	ldr	r2, [pc, #204]	; (800a734 <USB_SetTurnaroundTime+0x128>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d306      	bcc.n	800a678 <USB_SetTurnaroundTime+0x6c>
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	4a32      	ldr	r2, [pc, #200]	; (800a738 <USB_SetTurnaroundTime+0x12c>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d802      	bhi.n	800a678 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a672:	230c      	movs	r3, #12
 800a674:	617b      	str	r3, [r7, #20]
 800a676:	e041      	b.n	800a6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	4a2f      	ldr	r2, [pc, #188]	; (800a738 <USB_SetTurnaroundTime+0x12c>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d906      	bls.n	800a68e <USB_SetTurnaroundTime+0x82>
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	4a2e      	ldr	r2, [pc, #184]	; (800a73c <USB_SetTurnaroundTime+0x130>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d802      	bhi.n	800a68e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a688:	230b      	movs	r3, #11
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	e036      	b.n	800a6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	4a2a      	ldr	r2, [pc, #168]	; (800a73c <USB_SetTurnaroundTime+0x130>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d906      	bls.n	800a6a4 <USB_SetTurnaroundTime+0x98>
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	4a29      	ldr	r2, [pc, #164]	; (800a740 <USB_SetTurnaroundTime+0x134>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d802      	bhi.n	800a6a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a69e:	230a      	movs	r3, #10
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	e02b      	b.n	800a6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	4a26      	ldr	r2, [pc, #152]	; (800a740 <USB_SetTurnaroundTime+0x134>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d906      	bls.n	800a6ba <USB_SetTurnaroundTime+0xae>
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	4a25      	ldr	r2, [pc, #148]	; (800a744 <USB_SetTurnaroundTime+0x138>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d202      	bcs.n	800a6ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a6b4:	2309      	movs	r3, #9
 800a6b6:	617b      	str	r3, [r7, #20]
 800a6b8:	e020      	b.n	800a6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	4a21      	ldr	r2, [pc, #132]	; (800a744 <USB_SetTurnaroundTime+0x138>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d306      	bcc.n	800a6d0 <USB_SetTurnaroundTime+0xc4>
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	4a20      	ldr	r2, [pc, #128]	; (800a748 <USB_SetTurnaroundTime+0x13c>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d802      	bhi.n	800a6d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a6ca:	2308      	movs	r3, #8
 800a6cc:	617b      	str	r3, [r7, #20]
 800a6ce:	e015      	b.n	800a6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4a1d      	ldr	r2, [pc, #116]	; (800a748 <USB_SetTurnaroundTime+0x13c>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d906      	bls.n	800a6e6 <USB_SetTurnaroundTime+0xda>
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	4a1c      	ldr	r2, [pc, #112]	; (800a74c <USB_SetTurnaroundTime+0x140>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d202      	bcs.n	800a6e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a6e0:	2307      	movs	r3, #7
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	e00a      	b.n	800a6fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a6e6:	2306      	movs	r3, #6
 800a6e8:	617b      	str	r3, [r7, #20]
 800a6ea:	e007      	b.n	800a6fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d102      	bne.n	800a6f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a6f2:	2309      	movs	r3, #9
 800a6f4:	617b      	str	r3, [r7, #20]
 800a6f6:	e001      	b.n	800a6fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a6f8:	2309      	movs	r3, #9
 800a6fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	68da      	ldr	r2, [r3, #12]
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	029b      	lsls	r3, r3, #10
 800a710:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a714:	431a      	orrs	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	371c      	adds	r7, #28
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	00d8acbf 	.word	0x00d8acbf
 800a72c:	00e4e1c0 	.word	0x00e4e1c0
 800a730:	00f42400 	.word	0x00f42400
 800a734:	01067380 	.word	0x01067380
 800a738:	011a499f 	.word	0x011a499f
 800a73c:	01312cff 	.word	0x01312cff
 800a740:	014ca43f 	.word	0x014ca43f
 800a744:	016e3600 	.word	0x016e3600
 800a748:	01a6ab1f 	.word	0x01a6ab1f
 800a74c:	01e84800 	.word	0x01e84800

0800a750 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f043 0201 	orr.w	r2, r3, #1
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a772:	b480      	push	{r7}
 800a774:	b083      	sub	sp, #12
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f023 0201 	bic.w	r2, r3, #1
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a7b0:	78fb      	ldrb	r3, [r7, #3]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d115      	bne.n	800a7e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a7c2:	2001      	movs	r0, #1
 800a7c4:	f7fa f94a 	bl	8004a5c <HAL_Delay>
      ms++;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f001 f972 	bl	800bab8 <USB_GetMode>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d01e      	beq.n	800a818 <USB_SetCurrentMode+0x84>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2b31      	cmp	r3, #49	; 0x31
 800a7de:	d9f0      	bls.n	800a7c2 <USB_SetCurrentMode+0x2e>
 800a7e0:	e01a      	b.n	800a818 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a7e2:	78fb      	ldrb	r3, [r7, #3]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d115      	bne.n	800a814 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	f7fa f931 	bl	8004a5c <HAL_Delay>
      ms++;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f001 f959 	bl	800bab8 <USB_GetMode>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <USB_SetCurrentMode+0x84>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b31      	cmp	r3, #49	; 0x31
 800a810:	d9f0      	bls.n	800a7f4 <USB_SetCurrentMode+0x60>
 800a812:	e001      	b.n	800a818 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e005      	b.n	800a824 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b32      	cmp	r3, #50	; 0x32
 800a81c:	d101      	bne.n	800a822 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e000      	b.n	800a824 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a82c:	b084      	sub	sp, #16
 800a82e:	b580      	push	{r7, lr}
 800a830:	b086      	sub	sp, #24
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a83a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a83e:	2300      	movs	r3, #0
 800a840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a846:	2300      	movs	r3, #0
 800a848:	613b      	str	r3, [r7, #16]
 800a84a:	e009      	b.n	800a860 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	3340      	adds	r3, #64	; 0x40
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	2200      	movs	r2, #0
 800a858:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	3301      	adds	r3, #1
 800a85e:	613b      	str	r3, [r7, #16]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	2b0e      	cmp	r3, #14
 800a864:	d9f2      	bls.n	800a84c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d11c      	bne.n	800a8a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a87a:	f043 0302 	orr.w	r3, r3, #2
 800a87e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a884:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a890:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	639a      	str	r2, [r3, #56]	; 0x38
 800a8a4:	e00b      	b.n	800a8be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d8:	461a      	mov	r2, r3
 800a8da:	680b      	ldr	r3, [r1, #0]
 800a8dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d10c      	bne.n	800a8fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d104      	bne.n	800a8f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f945 	bl	800ab7c <USB_SetDevSpeed>
 800a8f2:	e008      	b.n	800a906 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f940 	bl	800ab7c <USB_SetDevSpeed>
 800a8fc:	e003      	b.n	800a906 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a8fe:	2103      	movs	r1, #3
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f93b 	bl	800ab7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a906:	2110      	movs	r1, #16
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f8f3 	bl	800aaf4 <USB_FlushTxFifo>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f90f 	bl	800ab3c <USB_FlushRxFifo>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a92e:	461a      	mov	r2, r3
 800a930:	2300      	movs	r3, #0
 800a932:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93a:	461a      	mov	r2, r3
 800a93c:	2300      	movs	r3, #0
 800a93e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a946:	461a      	mov	r2, r3
 800a948:	2300      	movs	r3, #0
 800a94a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a94c:	2300      	movs	r3, #0
 800a94e:	613b      	str	r3, [r7, #16]
 800a950:	e043      	b.n	800a9da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	015a      	lsls	r2, r3, #5
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4413      	add	r3, r2
 800a95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a968:	d118      	bne.n	800a99c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10a      	bne.n	800a986 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	015a      	lsls	r2, r3, #5
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	4413      	add	r3, r2
 800a978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a97c:	461a      	mov	r2, r3
 800a97e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	e013      	b.n	800a9ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	015a      	lsls	r2, r3, #5
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	4413      	add	r3, r2
 800a98e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a992:	461a      	mov	r2, r3
 800a994:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	e008      	b.n	800a9ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	015a      	lsls	r2, r3, #5
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	2300      	movs	r3, #0
 800a9be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	015a      	lsls	r2, r3, #5
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	613b      	str	r3, [r7, #16]
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d3b7      	bcc.n	800a952 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	613b      	str	r3, [r7, #16]
 800a9e6:	e043      	b.n	800aa70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	015a      	lsls	r2, r3, #5
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9fe:	d118      	bne.n	800aa32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10a      	bne.n	800aa1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	015a      	lsls	r2, r3, #5
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa12:	461a      	mov	r2, r3
 800aa14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	e013      	b.n	800aa44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa28:	461a      	mov	r2, r3
 800aa2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	e008      	b.n	800aa44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3e:	461a      	mov	r2, r3
 800aa40:	2300      	movs	r3, #0
 800aa42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	015a      	lsls	r2, r3, #5
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa50:	461a      	mov	r2, r3
 800aa52:	2300      	movs	r3, #0
 800aa54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	015a      	lsls	r2, r3, #5
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa62:	461a      	mov	r2, r3
 800aa64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	613b      	str	r3, [r7, #16]
 800aa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d3b7      	bcc.n	800a9e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aa98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d105      	bne.n	800aaac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	f043 0210 	orr.w	r2, r3, #16
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	699a      	ldr	r2, [r3, #24]
 800aab0:	4b0f      	ldr	r3, [pc, #60]	; (800aaf0 <USB_DevInit+0x2c4>)
 800aab2:	4313      	orrs	r3, r2
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d005      	beq.n	800aaca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	f043 0208 	orr.w	r2, r3, #8
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aaca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d107      	bne.n	800aae0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aad8:	f043 0304 	orr.w	r3, r3, #4
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3718      	adds	r7, #24
 800aae6:	46bd      	mov	sp, r7
 800aae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aaec:	b004      	add	sp, #16
 800aaee:	4770      	bx	lr
 800aaf0:	803c3800 	.word	0x803c3800

0800aaf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aafe:	2300      	movs	r3, #0
 800ab00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	019b      	lsls	r3, r3, #6
 800ab06:	f043 0220 	orr.w	r2, r3, #32
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3301      	adds	r3, #1
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	4a08      	ldr	r2, [pc, #32]	; (800ab38 <USB_FlushTxFifo+0x44>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d901      	bls.n	800ab1e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e006      	b.n	800ab2c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	f003 0320 	and.w	r3, r3, #32
 800ab26:	2b20      	cmp	r3, #32
 800ab28:	d0f1      	beq.n	800ab0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	00030d40 	.word	0x00030d40

0800ab3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab44:	2300      	movs	r3, #0
 800ab46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2210      	movs	r2, #16
 800ab4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3301      	adds	r3, #1
 800ab52:	60fb      	str	r3, [r7, #12]
 800ab54:	4a08      	ldr	r2, [pc, #32]	; (800ab78 <USB_FlushRxFifo+0x3c>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d901      	bls.n	800ab5e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800ab5a:	2303      	movs	r3, #3
 800ab5c:	e006      	b.n	800ab6c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	f003 0310 	and.w	r3, r3, #16
 800ab66:	2b10      	cmp	r3, #16
 800ab68:	d0f1      	beq.n	800ab4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr
 800ab78:	00030d40 	.word	0x00030d40

0800ab7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	78fb      	ldrb	r3, [r7, #3]
 800ab96:	68f9      	ldr	r1, [r7, #12]
 800ab98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800abae:	b480      	push	{r7}
 800abb0:	b087      	sub	sp, #28
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	f003 0306 	and.w	r3, r3, #6
 800abc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d102      	bne.n	800abd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800abce:	2300      	movs	r3, #0
 800abd0:	75fb      	strb	r3, [r7, #23]
 800abd2:	e00a      	b.n	800abea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d002      	beq.n	800abe0 <USB_GetDevSpeed+0x32>
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2b06      	cmp	r3, #6
 800abde:	d102      	bne.n	800abe6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800abe0:	2302      	movs	r3, #2
 800abe2:	75fb      	strb	r3, [r7, #23]
 800abe4:	e001      	b.n	800abea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800abe6:	230f      	movs	r3, #15
 800abe8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800abea:	7dfb      	ldrb	r3, [r7, #23]
}
 800abec:	4618      	mov	r0, r3
 800abee:	371c      	adds	r7, #28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	785b      	ldrb	r3, [r3, #1]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d13a      	bne.n	800ac8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac1a:	69da      	ldr	r2, [r3, #28]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	f003 030f 	and.w	r3, r3, #15
 800ac24:	2101      	movs	r1, #1
 800ac26:	fa01 f303 	lsl.w	r3, r1, r3
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	68f9      	ldr	r1, [r7, #12]
 800ac2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac32:	4313      	orrs	r3, r2
 800ac34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d155      	bne.n	800acf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	78db      	ldrb	r3, [r3, #3]
 800ac66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	059b      	lsls	r3, r3, #22
 800ac6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac70:	4313      	orrs	r3, r2
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	0151      	lsls	r1, r2, #5
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	440a      	add	r2, r1
 800ac7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac86:	6013      	str	r3, [r2, #0]
 800ac88:	e036      	b.n	800acf8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac90:	69da      	ldr	r2, [r3, #28]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	f003 030f 	and.w	r3, r3, #15
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	fa01 f303 	lsl.w	r3, r1, r3
 800aca0:	041b      	lsls	r3, r3, #16
 800aca2:	68f9      	ldr	r1, [r7, #12]
 800aca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aca8:	4313      	orrs	r3, r2
 800acaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	015a      	lsls	r2, r3, #5
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	4413      	add	r3, r2
 800acb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d11a      	bne.n	800acf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	015a      	lsls	r2, r3, #5
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	4413      	add	r3, r2
 800acca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	78db      	ldrb	r3, [r3, #3]
 800acdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800acde:	430b      	orrs	r3, r1
 800ace0:	4313      	orrs	r3, r2
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	0151      	lsls	r1, r2, #5
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	440a      	add	r2, r1
 800acea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acf6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	785b      	ldrb	r3, [r3, #1]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d161      	bne.n	800ade8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	015a      	lsls	r2, r3, #5
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad3a:	d11f      	bne.n	800ad7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	015a      	lsls	r2, r3, #5
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	0151      	lsls	r1, r2, #5
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	440a      	add	r2, r1
 800ad52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	015a      	lsls	r2, r3, #5
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4413      	add	r3, r2
 800ad64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	0151      	lsls	r1, r2, #5
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	440a      	add	r2, r1
 800ad72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	f003 030f 	and.w	r3, r3, #15
 800ad8c:	2101      	movs	r1, #1
 800ad8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	43db      	mvns	r3, r3
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada6:	69da      	ldr	r2, [r3, #28]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	f003 030f 	and.w	r3, r3, #15
 800adb0:	2101      	movs	r1, #1
 800adb2:	fa01 f303 	lsl.w	r3, r1, r3
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	43db      	mvns	r3, r3
 800adba:	68f9      	ldr	r1, [r7, #12]
 800adbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adc0:	4013      	ands	r3, r2
 800adc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	015a      	lsls	r2, r3, #5
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	4413      	add	r3, r2
 800adcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	0159      	lsls	r1, r3, #5
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	440b      	add	r3, r1
 800adda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adde:	4619      	mov	r1, r3
 800ade0:	4b35      	ldr	r3, [pc, #212]	; (800aeb8 <USB_DeactivateEndpoint+0x1b0>)
 800ade2:	4013      	ands	r3, r2
 800ade4:	600b      	str	r3, [r1, #0]
 800ade6:	e060      	b.n	800aeaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adfe:	d11f      	bne.n	800ae40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68ba      	ldr	r2, [r7, #8]
 800ae10:	0151      	lsls	r1, r2, #5
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	440a      	add	r2, r1
 800ae16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	015a      	lsls	r2, r3, #5
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	0151      	lsls	r1, r2, #5
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	440a      	add	r2, r1
 800ae36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	f003 030f 	and.w	r3, r3, #15
 800ae50:	2101      	movs	r1, #1
 800ae52:	fa01 f303 	lsl.w	r3, r1, r3
 800ae56:	041b      	lsls	r3, r3, #16
 800ae58:	43db      	mvns	r3, r3
 800ae5a:	68f9      	ldr	r1, [r7, #12]
 800ae5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae60:	4013      	ands	r3, r2
 800ae62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae6a:	69da      	ldr	r2, [r3, #28]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	f003 030f 	and.w	r3, r3, #15
 800ae74:	2101      	movs	r1, #1
 800ae76:	fa01 f303 	lsl.w	r3, r1, r3
 800ae7a:	041b      	lsls	r3, r3, #16
 800ae7c:	43db      	mvns	r3, r3
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae84:	4013      	ands	r3, r2
 800ae86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	015a      	lsls	r2, r3, #5
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	0159      	lsls	r1, r3, #5
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	440b      	add	r3, r1
 800ae9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea2:	4619      	mov	r1, r3
 800aea4:	4b05      	ldr	r3, [pc, #20]	; (800aebc <USB_DeactivateEndpoint+0x1b4>)
 800aea6:	4013      	ands	r3, r2
 800aea8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr
 800aeb8:	ec337800 	.word	0xec337800
 800aebc:	eff37800 	.word	0xeff37800

0800aec0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b08a      	sub	sp, #40	; 0x28
 800aec4:	af02      	add	r7, sp, #8
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	4613      	mov	r3, r2
 800aecc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	785b      	ldrb	r3, [r3, #1]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	f040 815c 	bne.w	800b19a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d132      	bne.n	800af50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	015a      	lsls	r2, r3, #5
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	4413      	add	r3, r2
 800aef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	69ba      	ldr	r2, [r7, #24]
 800aefa:	0151      	lsls	r1, r2, #5
 800aefc:	69fa      	ldr	r2, [r7, #28]
 800aefe:	440a      	add	r2, r1
 800af00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	015a      	lsls	r2, r3, #5
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	4413      	add	r3, r2
 800af16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	69ba      	ldr	r2, [r7, #24]
 800af1e:	0151      	lsls	r1, r2, #5
 800af20:	69fa      	ldr	r2, [r7, #28]
 800af22:	440a      	add	r2, r1
 800af24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	015a      	lsls	r2, r3, #5
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	4413      	add	r3, r2
 800af36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	69ba      	ldr	r2, [r7, #24]
 800af3e:	0151      	lsls	r1, r2, #5
 800af40:	69fa      	ldr	r2, [r7, #28]
 800af42:	440a      	add	r2, r1
 800af44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af48:	0cdb      	lsrs	r3, r3, #19
 800af4a:	04db      	lsls	r3, r3, #19
 800af4c:	6113      	str	r3, [r2, #16]
 800af4e:	e074      	b.n	800b03a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	015a      	lsls	r2, r3, #5
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	4413      	add	r3, r2
 800af58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	69ba      	ldr	r2, [r7, #24]
 800af60:	0151      	lsls	r1, r2, #5
 800af62:	69fa      	ldr	r2, [r7, #28]
 800af64:	440a      	add	r2, r1
 800af66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af6a:	0cdb      	lsrs	r3, r3, #19
 800af6c:	04db      	lsls	r3, r3, #19
 800af6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	69ba      	ldr	r2, [r7, #24]
 800af80:	0151      	lsls	r1, r2, #5
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	440a      	add	r2, r1
 800af86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	6959      	ldr	r1, [r3, #20]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	440b      	add	r3, r1
 800afac:	1e59      	subs	r1, r3, #1
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	fbb1 f3f3 	udiv	r3, r1, r3
 800afb6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800afb8:	4b9d      	ldr	r3, [pc, #628]	; (800b230 <USB_EPStartXfer+0x370>)
 800afba:	400b      	ands	r3, r1
 800afbc:	69b9      	ldr	r1, [r7, #24]
 800afbe:	0148      	lsls	r0, r1, #5
 800afc0:	69f9      	ldr	r1, [r7, #28]
 800afc2:	4401      	add	r1, r0
 800afc4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800afc8:	4313      	orrs	r3, r2
 800afca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd8:	691a      	ldr	r2, [r3, #16]
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afe2:	69b9      	ldr	r1, [r7, #24]
 800afe4:	0148      	lsls	r0, r1, #5
 800afe6:	69f9      	ldr	r1, [r7, #28]
 800afe8:	4401      	add	r1, r0
 800afea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800afee:	4313      	orrs	r3, r2
 800aff0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	78db      	ldrb	r3, [r3, #3]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d11f      	bne.n	800b03a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	015a      	lsls	r2, r3, #5
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	4413      	add	r3, r2
 800b002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	0151      	lsls	r1, r2, #5
 800b00c:	69fa      	ldr	r2, [r7, #28]
 800b00e:	440a      	add	r2, r1
 800b010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b014:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b018:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	0151      	lsls	r1, r2, #5
 800b02c:	69fa      	ldr	r2, [r7, #28]
 800b02e:	440a      	add	r2, r1
 800b030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b034:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b038:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b03a:	79fb      	ldrb	r3, [r7, #7]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d14b      	bne.n	800b0d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d009      	beq.n	800b05c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	015a      	lsls	r2, r3, #5
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	4413      	add	r3, r2
 800b050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b054:	461a      	mov	r2, r3
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	78db      	ldrb	r3, [r3, #3]
 800b060:	2b01      	cmp	r3, #1
 800b062:	d128      	bne.n	800b0b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b070:	2b00      	cmp	r3, #0
 800b072:	d110      	bne.n	800b096 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	015a      	lsls	r2, r3, #5
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	4413      	add	r3, r2
 800b07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	69ba      	ldr	r2, [r7, #24]
 800b084:	0151      	lsls	r1, r2, #5
 800b086:	69fa      	ldr	r2, [r7, #28]
 800b088:	440a      	add	r2, r1
 800b08a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b08e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b092:	6013      	str	r3, [r2, #0]
 800b094:	e00f      	b.n	800b0b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	015a      	lsls	r2, r3, #5
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	4413      	add	r3, r2
 800b09e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	69ba      	ldr	r2, [r7, #24]
 800b0a6:	0151      	lsls	r1, r2, #5
 800b0a8:	69fa      	ldr	r2, [r7, #28]
 800b0aa:	440a      	add	r2, r1
 800b0ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	69ba      	ldr	r2, [r7, #24]
 800b0c6:	0151      	lsls	r1, r2, #5
 800b0c8:	69fa      	ldr	r2, [r7, #28]
 800b0ca:	440a      	add	r2, r1
 800b0cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0d4:	6013      	str	r3, [r2, #0]
 800b0d6:	e12f      	b.n	800b338 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	015a      	lsls	r2, r3, #5
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	4413      	add	r3, r2
 800b0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	69ba      	ldr	r2, [r7, #24]
 800b0e8:	0151      	lsls	r1, r2, #5
 800b0ea:	69fa      	ldr	r2, [r7, #28]
 800b0ec:	440a      	add	r2, r1
 800b0ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	78db      	ldrb	r3, [r3, #3]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d015      	beq.n	800b12c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	f000 8117 	beq.w	800b338 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	f003 030f 	and.w	r3, r3, #15
 800b11a:	2101      	movs	r1, #1
 800b11c:	fa01 f303 	lsl.w	r3, r1, r3
 800b120:	69f9      	ldr	r1, [r7, #28]
 800b122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b126:	4313      	orrs	r3, r2
 800b128:	634b      	str	r3, [r1, #52]	; 0x34
 800b12a:	e105      	b.n	800b338 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d110      	bne.n	800b15e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	0151      	lsls	r1, r2, #5
 800b14e:	69fa      	ldr	r2, [r7, #28]
 800b150:	440a      	add	r2, r1
 800b152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b156:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	e00f      	b.n	800b17e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	69ba      	ldr	r2, [r7, #24]
 800b16e:	0151      	lsls	r1, r2, #5
 800b170:	69fa      	ldr	r2, [r7, #28]
 800b172:	440a      	add	r2, r1
 800b174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b17c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	68d9      	ldr	r1, [r3, #12]
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	781a      	ldrb	r2, [r3, #0]
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	695b      	ldr	r3, [r3, #20]
 800b18a:	b298      	uxth	r0, r3
 800b18c:	79fb      	ldrb	r3, [r7, #7]
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	4603      	mov	r3, r0
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f000 fa2b 	bl	800b5ee <USB_WritePacket>
 800b198:	e0ce      	b.n	800b338 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	0151      	lsls	r1, r2, #5
 800b1ac:	69fa      	ldr	r2, [r7, #28]
 800b1ae:	440a      	add	r2, r1
 800b1b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1b4:	0cdb      	lsrs	r3, r3, #19
 800b1b6:	04db      	lsls	r3, r3, #19
 800b1b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	015a      	lsls	r2, r3, #5
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	69ba      	ldr	r2, [r7, #24]
 800b1ca:	0151      	lsls	r1, r2, #5
 800b1cc:	69fa      	ldr	r2, [r7, #28]
 800b1ce:	440a      	add	r2, r1
 800b1d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d126      	bne.n	800b234 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f2:	691a      	ldr	r2, [r3, #16]
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1fc:	69b9      	ldr	r1, [r7, #24]
 800b1fe:	0148      	lsls	r0, r1, #5
 800b200:	69f9      	ldr	r1, [r7, #28]
 800b202:	4401      	add	r1, r0
 800b204:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b208:	4313      	orrs	r3, r2
 800b20a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	015a      	lsls	r2, r3, #5
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	4413      	add	r3, r2
 800b214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	69ba      	ldr	r2, [r7, #24]
 800b21c:	0151      	lsls	r1, r2, #5
 800b21e:	69fa      	ldr	r2, [r7, #28]
 800b220:	440a      	add	r2, r1
 800b222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b22a:	6113      	str	r3, [r2, #16]
 800b22c:	e036      	b.n	800b29c <USB_EPStartXfer+0x3dc>
 800b22e:	bf00      	nop
 800b230:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	695a      	ldr	r2, [r3, #20]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	4413      	add	r3, r2
 800b23e:	1e5a      	subs	r2, r3, #1
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	fbb2 f3f3 	udiv	r3, r2, r3
 800b248:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	4413      	add	r3, r2
 800b252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b256:	691a      	ldr	r2, [r3, #16]
 800b258:	8afb      	ldrh	r3, [r7, #22]
 800b25a:	04d9      	lsls	r1, r3, #19
 800b25c:	4b39      	ldr	r3, [pc, #228]	; (800b344 <USB_EPStartXfer+0x484>)
 800b25e:	400b      	ands	r3, r1
 800b260:	69b9      	ldr	r1, [r7, #24]
 800b262:	0148      	lsls	r0, r1, #5
 800b264:	69f9      	ldr	r1, [r7, #28]
 800b266:	4401      	add	r1, r0
 800b268:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b26c:	4313      	orrs	r3, r2
 800b26e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	015a      	lsls	r2, r3, #5
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	4413      	add	r3, r2
 800b278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b27c:	691a      	ldr	r2, [r3, #16]
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	8af9      	ldrh	r1, [r7, #22]
 800b284:	fb01 f303 	mul.w	r3, r1, r3
 800b288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b28c:	69b9      	ldr	r1, [r7, #24]
 800b28e:	0148      	lsls	r0, r1, #5
 800b290:	69f9      	ldr	r1, [r7, #28]
 800b292:	4401      	add	r1, r0
 800b294:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b298:	4313      	orrs	r3, r2
 800b29a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b29c:	79fb      	ldrb	r3, [r7, #7]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d10d      	bne.n	800b2be <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d009      	beq.n	800b2be <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	68d9      	ldr	r1, [r3, #12]
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	015a      	lsls	r2, r3, #5
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ba:	460a      	mov	r2, r1
 800b2bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	78db      	ldrb	r3, [r3, #3]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d128      	bne.n	800b318 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d110      	bne.n	800b2f8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	015a      	lsls	r2, r3, #5
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	4413      	add	r3, r2
 800b2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	69ba      	ldr	r2, [r7, #24]
 800b2e6:	0151      	lsls	r1, r2, #5
 800b2e8:	69fa      	ldr	r2, [r7, #28]
 800b2ea:	440a      	add	r2, r1
 800b2ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2f4:	6013      	str	r3, [r2, #0]
 800b2f6:	e00f      	b.n	800b318 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	015a      	lsls	r2, r3, #5
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	4413      	add	r3, r2
 800b300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	0151      	lsls	r1, r2, #5
 800b30a:	69fa      	ldr	r2, [r7, #28]
 800b30c:	440a      	add	r2, r1
 800b30e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b316:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	015a      	lsls	r2, r3, #5
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	4413      	add	r3, r2
 800b320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	69ba      	ldr	r2, [r7, #24]
 800b328:	0151      	lsls	r1, r2, #5
 800b32a:	69fa      	ldr	r2, [r7, #28]
 800b32c:	440a      	add	r2, r1
 800b32e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b332:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b336:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3720      	adds	r7, #32
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	1ff80000 	.word	0x1ff80000

0800b348 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b348:	b480      	push	{r7}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	4613      	mov	r3, r2
 800b354:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	785b      	ldrb	r3, [r3, #1]
 800b364:	2b01      	cmp	r3, #1
 800b366:	f040 80cd 	bne.w	800b504 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d132      	bne.n	800b3d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	015a      	lsls	r2, r3, #5
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	4413      	add	r3, r2
 800b37a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	0151      	lsls	r1, r2, #5
 800b384:	697a      	ldr	r2, [r7, #20]
 800b386:	440a      	add	r2, r1
 800b388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b38c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b390:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b394:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	693a      	ldr	r2, [r7, #16]
 800b3a6:	0151      	lsls	r1, r2, #5
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	440a      	add	r2, r1
 800b3ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	015a      	lsls	r2, r3, #5
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	4413      	add	r3, r2
 800b3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	0151      	lsls	r1, r2, #5
 800b3c8:	697a      	ldr	r2, [r7, #20]
 800b3ca:	440a      	add	r2, r1
 800b3cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3d0:	0cdb      	lsrs	r3, r3, #19
 800b3d2:	04db      	lsls	r3, r3, #19
 800b3d4:	6113      	str	r3, [r2, #16]
 800b3d6:	e04e      	b.n	800b476 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	015a      	lsls	r2, r3, #5
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	4413      	add	r3, r2
 800b3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	0151      	lsls	r1, r2, #5
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	440a      	add	r2, r1
 800b3ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3f2:	0cdb      	lsrs	r3, r3, #19
 800b3f4:	04db      	lsls	r3, r3, #19
 800b3f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	015a      	lsls	r2, r3, #5
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	4413      	add	r3, r2
 800b400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	0151      	lsls	r1, r2, #5
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	440a      	add	r2, r1
 800b40e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b412:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b416:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b41a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	695a      	ldr	r2, [r3, #20]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	429a      	cmp	r2, r3
 800b426:	d903      	bls.n	800b430 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	693a      	ldr	r2, [r7, #16]
 800b440:	0151      	lsls	r1, r2, #5
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	440a      	add	r2, r1
 800b446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b44a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b44e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	015a      	lsls	r2, r3, #5
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	4413      	add	r3, r2
 800b458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b45c:	691a      	ldr	r2, [r3, #16]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	695b      	ldr	r3, [r3, #20]
 800b462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b466:	6939      	ldr	r1, [r7, #16]
 800b468:	0148      	lsls	r0, r1, #5
 800b46a:	6979      	ldr	r1, [r7, #20]
 800b46c:	4401      	add	r1, r0
 800b46e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b472:	4313      	orrs	r3, r2
 800b474:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b476:	79fb      	ldrb	r3, [r7, #7]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d11e      	bne.n	800b4ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d009      	beq.n	800b498 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b490:	461a      	mov	r2, r3
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	015a      	lsls	r2, r3, #5
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	0151      	lsls	r1, r2, #5
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	440a      	add	r2, r1
 800b4ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4b6:	6013      	str	r3, [r2, #0]
 800b4b8:	e092      	b.n	800b5e0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	015a      	lsls	r2, r3, #5
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	0151      	lsls	r1, r2, #5
 800b4cc:	697a      	ldr	r2, [r7, #20]
 800b4ce:	440a      	add	r2, r1
 800b4d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d07e      	beq.n	800b5e0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	f003 030f 	and.w	r3, r3, #15
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b4f8:	6979      	ldr	r1, [r7, #20]
 800b4fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4fe:	4313      	orrs	r3, r2
 800b500:	634b      	str	r3, [r1, #52]	; 0x34
 800b502:	e06d      	b.n	800b5e0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	0151      	lsls	r1, r2, #5
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	440a      	add	r2, r1
 800b51a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b51e:	0cdb      	lsrs	r3, r3, #19
 800b520:	04db      	lsls	r3, r3, #19
 800b522:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	015a      	lsls	r2, r3, #5
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	4413      	add	r3, r2
 800b52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	693a      	ldr	r2, [r7, #16]
 800b534:	0151      	lsls	r1, r2, #5
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	440a      	add	r2, r1
 800b53a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b53e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b542:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b546:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	695b      	ldr	r3, [r3, #20]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	689a      	ldr	r2, [r3, #8]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	015a      	lsls	r2, r3, #5
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	4413      	add	r3, r2
 800b560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	693a      	ldr	r2, [r7, #16]
 800b568:	0151      	lsls	r1, r2, #5
 800b56a:	697a      	ldr	r2, [r7, #20]
 800b56c:	440a      	add	r2, r1
 800b56e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b576:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	015a      	lsls	r2, r3, #5
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	4413      	add	r3, r2
 800b580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b584:	691a      	ldr	r2, [r3, #16]
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b58e:	6939      	ldr	r1, [r7, #16]
 800b590:	0148      	lsls	r0, r1, #5
 800b592:	6979      	ldr	r1, [r7, #20]
 800b594:	4401      	add	r1, r0
 800b596:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b59a:	4313      	orrs	r3, r2
 800b59c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b59e:	79fb      	ldrb	r3, [r7, #7]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d10d      	bne.n	800b5c0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d009      	beq.n	800b5c0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	68d9      	ldr	r1, [r3, #12]
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	015a      	lsls	r2, r3, #5
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5bc:	460a      	mov	r2, r1
 800b5be:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	015a      	lsls	r2, r3, #5
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	0151      	lsls	r1, r2, #5
 800b5d2:	697a      	ldr	r2, [r7, #20]
 800b5d4:	440a      	add	r2, r1
 800b5d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	371c      	adds	r7, #28
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b089      	sub	sp, #36	; 0x24
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	60f8      	str	r0, [r7, #12]
 800b5f6:	60b9      	str	r1, [r7, #8]
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	71fb      	strb	r3, [r7, #7]
 800b600:	4613      	mov	r3, r2
 800b602:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b60c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b610:	2b00      	cmp	r3, #0
 800b612:	d123      	bne.n	800b65c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b614:	88bb      	ldrh	r3, [r7, #4]
 800b616:	3303      	adds	r3, #3
 800b618:	089b      	lsrs	r3, r3, #2
 800b61a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b61c:	2300      	movs	r3, #0
 800b61e:	61bb      	str	r3, [r7, #24]
 800b620:	e018      	b.n	800b654 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b622:	79fb      	ldrb	r3, [r7, #7]
 800b624:	031a      	lsls	r2, r3, #12
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	4413      	add	r3, r2
 800b62a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b62e:	461a      	mov	r2, r3
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	3301      	adds	r3, #1
 800b63a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	3301      	adds	r3, #1
 800b640:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	3301      	adds	r3, #1
 800b646:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	3301      	adds	r3, #1
 800b64c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	3301      	adds	r3, #1
 800b652:	61bb      	str	r3, [r7, #24]
 800b654:	69ba      	ldr	r2, [r7, #24]
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d3e2      	bcc.n	800b622 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3724      	adds	r7, #36	; 0x24
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b08b      	sub	sp, #44	; 0x2c
 800b66e:	af00      	add	r7, sp, #0
 800b670:	60f8      	str	r0, [r7, #12]
 800b672:	60b9      	str	r1, [r7, #8]
 800b674:	4613      	mov	r3, r2
 800b676:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b680:	88fb      	ldrh	r3, [r7, #6]
 800b682:	089b      	lsrs	r3, r3, #2
 800b684:	b29b      	uxth	r3, r3
 800b686:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b688:	88fb      	ldrh	r3, [r7, #6]
 800b68a:	f003 0303 	and.w	r3, r3, #3
 800b68e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b690:	2300      	movs	r3, #0
 800b692:	623b      	str	r3, [r7, #32]
 800b694:	e014      	b.n	800b6c0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	601a      	str	r2, [r3, #0]
    pDest++;
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	623b      	str	r3, [r7, #32]
 800b6c0:	6a3a      	ldr	r2, [r7, #32]
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d3e6      	bcc.n	800b696 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b6c8:	8bfb      	ldrh	r3, [r7, #30]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d01e      	beq.n	800b70c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b6d2:	69bb      	ldr	r3, [r7, #24]
 800b6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6d8:	461a      	mov	r2, r3
 800b6da:	f107 0310 	add.w	r3, r7, #16
 800b6de:	6812      	ldr	r2, [r2, #0]
 800b6e0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	6a3b      	ldr	r3, [r7, #32]
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	00db      	lsls	r3, r3, #3
 800b6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	701a      	strb	r2, [r3, #0]
      i++;
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	623b      	str	r3, [r7, #32]
      pDest++;
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b700:	8bfb      	ldrh	r3, [r7, #30]
 800b702:	3b01      	subs	r3, #1
 800b704:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b706:	8bfb      	ldrh	r3, [r7, #30]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1ea      	bne.n	800b6e2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b70e:	4618      	mov	r0, r3
 800b710:	372c      	adds	r7, #44	; 0x2c
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b085      	sub	sp, #20
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	785b      	ldrb	r3, [r3, #1]
 800b732:	2b01      	cmp	r3, #1
 800b734:	d12c      	bne.n	800b790 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	db12      	blt.n	800b76e <USB_EPSetStall+0x54>
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00f      	beq.n	800b76e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	4413      	add	r3, r2
 800b756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	0151      	lsls	r1, r2, #5
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	440a      	add	r2, r1
 800b764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b768:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b76c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	015a      	lsls	r2, r3, #5
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	4413      	add	r3, r2
 800b776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	0151      	lsls	r1, r2, #5
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	440a      	add	r2, r1
 800b784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b78c:	6013      	str	r3, [r2, #0]
 800b78e:	e02b      	b.n	800b7e8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	015a      	lsls	r2, r3, #5
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	4413      	add	r3, r2
 800b798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	db12      	blt.n	800b7c8 <USB_EPSetStall+0xae>
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00f      	beq.n	800b7c8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	015a      	lsls	r2, r3, #5
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	0151      	lsls	r1, r2, #5
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	440a      	add	r2, r1
 800b7be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b7c6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68ba      	ldr	r2, [r7, #8]
 800b7d8:	0151      	lsls	r1, r2, #5
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	440a      	add	r2, r1
 800b7de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3714      	adds	r7, #20
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b085      	sub	sp, #20
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	785b      	ldrb	r3, [r3, #1]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d128      	bne.n	800b864 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	015a      	lsls	r2, r3, #5
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	4413      	add	r3, r2
 800b81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	0151      	lsls	r1, r2, #5
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	440a      	add	r2, r1
 800b828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b82c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b830:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	78db      	ldrb	r3, [r3, #3]
 800b836:	2b03      	cmp	r3, #3
 800b838:	d003      	beq.n	800b842 <USB_EPClearStall+0x4c>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	78db      	ldrb	r3, [r3, #3]
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d138      	bne.n	800b8b4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	015a      	lsls	r2, r3, #5
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	4413      	add	r3, r2
 800b84a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	0151      	lsls	r1, r2, #5
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	440a      	add	r2, r1
 800b858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b85c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b860:	6013      	str	r3, [r2, #0]
 800b862:	e027      	b.n	800b8b4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	015a      	lsls	r2, r3, #5
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	4413      	add	r3, r2
 800b86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	0151      	lsls	r1, r2, #5
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	440a      	add	r2, r1
 800b87a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b87e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b882:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	78db      	ldrb	r3, [r3, #3]
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d003      	beq.n	800b894 <USB_EPClearStall+0x9e>
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	78db      	ldrb	r3, [r3, #3]
 800b890:	2b02      	cmp	r3, #2
 800b892:	d10f      	bne.n	800b8b4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	015a      	lsls	r2, r3, #5
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	4413      	add	r3, r2
 800b89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68ba      	ldr	r2, [r7, #8]
 800b8a4:	0151      	lsls	r1, r2, #5
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	440a      	add	r2, r1
 800b8aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8b2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b085      	sub	sp, #20
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b8e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	78fb      	ldrb	r3, [r7, #3]
 800b8f0:	011b      	lsls	r3, r3, #4
 800b8f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b8f6:	68f9      	ldr	r1, [r7, #12]
 800b8f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b90e:	b480      	push	{r7}
 800b910:	b085      	sub	sp, #20
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b928:	f023 0303 	bic.w	r3, r3, #3
 800b92c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b93c:	f023 0302 	bic.w	r3, r3, #2
 800b940:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b96a:	f023 0303 	bic.w	r3, r3, #3
 800b96e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b97e:	f043 0302 	orr.w	r3, r3, #2
 800b982:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b992:	b480      	push	{r7}
 800b994:	b085      	sub	sp, #20
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3714      	adds	r7, #20
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	68ba      	ldr	r2, [r7, #8]
 800b9d8:	4013      	ands	r3, r2
 800b9da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	0c1b      	lsrs	r3, r3, #16
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3714      	adds	r7, #20
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9fe:	699b      	ldr	r3, [r3, #24]
 800ba00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba08:	69db      	ldr	r3, [r3, #28]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	4013      	ands	r3, r2
 800ba0e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	b29b      	uxth	r3, r3
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3714      	adds	r7, #20
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ba30:	78fb      	ldrb	r3, [r7, #3]
 800ba32:	015a      	lsls	r2, r3, #5
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	4413      	add	r3, r2
 800ba38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba46:	695b      	ldr	r3, [r3, #20]
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	4013      	ands	r3, r2
 800ba4c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba4e:	68bb      	ldr	r3, [r7, #8]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	f003 030f 	and.w	r3, r3, #15
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	fa22 f303 	lsr.w	r3, r2, r3
 800ba8c:	01db      	lsls	r3, r3, #7
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ba96:	78fb      	ldrb	r3, [r7, #3]
 800ba98:	015a      	lsls	r2, r3, #5
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	693a      	ldr	r2, [r7, #16]
 800baa6:	4013      	ands	r3, r2
 800baa8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800baaa:	68bb      	ldr	r3, [r7, #8]
}
 800baac:	4618      	mov	r0, r3
 800baae:	371c      	adds	r7, #28
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	f003 0301 	and.w	r3, r3, #1
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800baf2:	f023 0307 	bic.w	r3, r3, #7
 800baf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
	...

0800bb1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	460b      	mov	r3, r1
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	333c      	adds	r3, #60	; 0x3c
 800bb32:	3304      	adds	r3, #4
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	4a26      	ldr	r2, [pc, #152]	; (800bbd4 <USB_EP0_OutStart+0xb8>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d90a      	bls.n	800bb56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb50:	d101      	bne.n	800bb56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	e037      	b.n	800bbc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	2300      	movs	r3, #0
 800bb60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb84:	f043 0318 	orr.w	r3, r3, #24
 800bb88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bb9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bb9e:	7afb      	ldrb	r3, [r7, #11]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d10f      	bne.n	800bbc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbaa:	461a      	mov	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbbe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bbc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	371c      	adds	r7, #28
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	4f54300a 	.word	0x4f54300a

0800bbd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	60fb      	str	r3, [r7, #12]
 800bbea:	4a13      	ldr	r2, [pc, #76]	; (800bc38 <USB_CoreReset+0x60>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d901      	bls.n	800bbf4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e01a      	b.n	800bc2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	daf3      	bge.n	800bbe4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	f043 0201 	orr.w	r2, r3, #1
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	4a09      	ldr	r2, [pc, #36]	; (800bc38 <USB_CoreReset+0x60>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d901      	bls.n	800bc1c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e006      	b.n	800bc2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	f003 0301 	and.w	r3, r3, #1
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d0f1      	beq.n	800bc0c <USB_CoreReset+0x34>

  return HAL_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3714      	adds	r7, #20
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	00030d40 	.word	0x00030d40

0800bc3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc4c:	f005 fc4e 	bl	80114ec <USBD_static_malloc>
 800bc50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d105      	bne.n	800bc64 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bc60:	2302      	movs	r3, #2
 800bc62:	e066      	b.n	800bd32 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	7c1b      	ldrb	r3, [r3, #16]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d119      	bne.n	800bca8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc78:	2202      	movs	r2, #2
 800bc7a:	2181      	movs	r1, #129	; 0x81
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f005 fb12 	bl	80112a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2201      	movs	r2, #1
 800bc86:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	2101      	movs	r1, #1
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f005 fb08 	bl	80112a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2210      	movs	r2, #16
 800bca2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bca6:	e016      	b.n	800bcd6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bca8:	2340      	movs	r3, #64	; 0x40
 800bcaa:	2202      	movs	r2, #2
 800bcac:	2181      	movs	r1, #129	; 0x81
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f005 faf9 	bl	80112a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bcba:	2340      	movs	r3, #64	; 0x40
 800bcbc:	2202      	movs	r2, #2
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f005 faf0 	bl	80112a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2210      	movs	r2, #16
 800bcd2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bcd6:	2308      	movs	r3, #8
 800bcd8:	2203      	movs	r2, #3
 800bcda:	2182      	movs	r1, #130	; 0x82
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f005 fae2 	bl	80112a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2201      	movs	r2, #1
 800bce6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	7c1b      	ldrb	r3, [r3, #16]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d109      	bne.n	800bd20 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd16:	2101      	movs	r1, #1
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f005 fbb3 	bl	8011484 <USBD_LL_PrepareReceive>
 800bd1e:	e007      	b.n	800bd30 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd26:	2340      	movs	r3, #64	; 0x40
 800bd28:	2101      	movs	r1, #1
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f005 fbaa 	bl	8011484 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b082      	sub	sp, #8
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	460b      	mov	r3, r1
 800bd44:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bd46:	2181      	movs	r1, #129	; 0x81
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f005 fad2 	bl	80112f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bd54:	2101      	movs	r1, #1
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f005 facb 	bl	80112f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bd64:	2182      	movs	r1, #130	; 0x82
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f005 fac3 	bl	80112f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00e      	beq.n	800bda4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd96:	4618      	mov	r0, r3
 800bd98:	f005 fbb6 	bl	8011508 <USBD_static_free>
    pdev->pClassData = NULL;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3708      	adds	r7, #8
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
	...

0800bdb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e0af      	b.n	800bf38 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d03f      	beq.n	800be64 <USBD_CDC_Setup+0xb4>
 800bde4:	2b20      	cmp	r3, #32
 800bde6:	f040 809f 	bne.w	800bf28 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	88db      	ldrh	r3, [r3, #6]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d02e      	beq.n	800be50 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	b25b      	sxtb	r3, r3
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	da16      	bge.n	800be2a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	683a      	ldr	r2, [r7, #0]
 800be06:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800be08:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	88d2      	ldrh	r2, [r2, #6]
 800be0e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	88db      	ldrh	r3, [r3, #6]
 800be14:	2b07      	cmp	r3, #7
 800be16:	bf28      	it	cs
 800be18:	2307      	movcs	r3, #7
 800be1a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	89fa      	ldrh	r2, [r7, #14]
 800be20:	4619      	mov	r1, r3
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f001 fb19 	bl	800d45a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800be28:	e085      	b.n	800bf36 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	785a      	ldrb	r2, [r3, #1]
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	88db      	ldrh	r3, [r3, #6]
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800be40:	6939      	ldr	r1, [r7, #16]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	88db      	ldrh	r3, [r3, #6]
 800be46:	461a      	mov	r2, r3
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f001 fb32 	bl	800d4b2 <USBD_CtlPrepareRx>
      break;
 800be4e:	e072      	b.n	800bf36 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	7850      	ldrb	r0, [r2, #1]
 800be5c:	2200      	movs	r2, #0
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	4798      	blx	r3
      break;
 800be62:	e068      	b.n	800bf36 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	785b      	ldrb	r3, [r3, #1]
 800be68:	2b0b      	cmp	r3, #11
 800be6a:	d852      	bhi.n	800bf12 <USBD_CDC_Setup+0x162>
 800be6c:	a201      	add	r2, pc, #4	; (adr r2, 800be74 <USBD_CDC_Setup+0xc4>)
 800be6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be72:	bf00      	nop
 800be74:	0800bea5 	.word	0x0800bea5
 800be78:	0800bf21 	.word	0x0800bf21
 800be7c:	0800bf13 	.word	0x0800bf13
 800be80:	0800bf13 	.word	0x0800bf13
 800be84:	0800bf13 	.word	0x0800bf13
 800be88:	0800bf13 	.word	0x0800bf13
 800be8c:	0800bf13 	.word	0x0800bf13
 800be90:	0800bf13 	.word	0x0800bf13
 800be94:	0800bf13 	.word	0x0800bf13
 800be98:	0800bf13 	.word	0x0800bf13
 800be9c:	0800becf 	.word	0x0800becf
 800bea0:	0800bef9 	.word	0x0800bef9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	2b03      	cmp	r3, #3
 800beae:	d107      	bne.n	800bec0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800beb0:	f107 030a 	add.w	r3, r7, #10
 800beb4:	2202      	movs	r2, #2
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f001 face 	bl	800d45a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bebe:	e032      	b.n	800bf26 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f001 fa58 	bl	800d378 <USBD_CtlError>
            ret = USBD_FAIL;
 800bec8:	2303      	movs	r3, #3
 800beca:	75fb      	strb	r3, [r7, #23]
          break;
 800becc:	e02b      	b.n	800bf26 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d107      	bne.n	800beea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800beda:	f107 030d 	add.w	r3, r7, #13
 800bede:	2201      	movs	r2, #1
 800bee0:	4619      	mov	r1, r3
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f001 fab9 	bl	800d45a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bee8:	e01d      	b.n	800bf26 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f001 fa43 	bl	800d378 <USBD_CtlError>
            ret = USBD_FAIL;
 800bef2:	2303      	movs	r3, #3
 800bef4:	75fb      	strb	r3, [r7, #23]
          break;
 800bef6:	e016      	b.n	800bf26 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	d00f      	beq.n	800bf24 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f001 fa36 	bl	800d378 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bf10:	e008      	b.n	800bf24 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bf12:	6839      	ldr	r1, [r7, #0]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f001 fa2f 	bl	800d378 <USBD_CtlError>
          ret = USBD_FAIL;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	75fb      	strb	r3, [r7, #23]
          break;
 800bf1e:	e002      	b.n	800bf26 <USBD_CDC_Setup+0x176>
          break;
 800bf20:	bf00      	nop
 800bf22:	e008      	b.n	800bf36 <USBD_CDC_Setup+0x186>
          break;
 800bf24:	bf00      	nop
      }
      break;
 800bf26:	e006      	b.n	800bf36 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f001 fa24 	bl	800d378 <USBD_CtlError>
      ret = USBD_FAIL;
 800bf30:	2303      	movs	r3, #3
 800bf32:	75fb      	strb	r3, [r7, #23]
      break;
 800bf34:	bf00      	nop
  }

  return (uint8_t)ret;
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3718      	adds	r7, #24
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d101      	bne.n	800bf62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	e04f      	b.n	800c002 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bf6a:	78fa      	ldrb	r2, [r7, #3]
 800bf6c:	6879      	ldr	r1, [r7, #4]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	440b      	add	r3, r1
 800bf78:	3318      	adds	r3, #24
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d029      	beq.n	800bfd4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bf80:	78fa      	ldrb	r2, [r7, #3]
 800bf82:	6879      	ldr	r1, [r7, #4]
 800bf84:	4613      	mov	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4413      	add	r3, r2
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	440b      	add	r3, r1
 800bf8e:	3318      	adds	r3, #24
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	78f9      	ldrb	r1, [r7, #3]
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	460b      	mov	r3, r1
 800bf98:	00db      	lsls	r3, r3, #3
 800bf9a:	1a5b      	subs	r3, r3, r1
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4403      	add	r3, r0
 800bfa0:	3344      	adds	r3, #68	; 0x44
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	fbb2 f1f3 	udiv	r1, r2, r3
 800bfa8:	fb03 f301 	mul.w	r3, r3, r1
 800bfac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d110      	bne.n	800bfd4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bfb2:	78fa      	ldrb	r2, [r7, #3]
 800bfb4:	6879      	ldr	r1, [r7, #4]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	440b      	add	r3, r1
 800bfc0:	3318      	adds	r3, #24
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bfc6:	78f9      	ldrb	r1, [r7, #3]
 800bfc8:	2300      	movs	r3, #0
 800bfca:	2200      	movs	r2, #0
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f005 fa38 	bl	8011442 <USBD_LL_Transmit>
 800bfd2:	e015      	b.n	800c000 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00b      	beq.n	800c000 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bffc:	78fa      	ldrb	r2, [r7, #3]
 800bffe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3710      	adds	r7, #16
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b084      	sub	sp, #16
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	460b      	mov	r3, r1
 800c014:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c01c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c028:	2303      	movs	r3, #3
 800c02a:	e015      	b.n	800c058 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c02c:	78fb      	ldrb	r3, [r7, #3]
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f005 fa48 	bl	80114c6 <USBD_LL_GetRxDataSize>
 800c036:	4602      	mov	r2, r0
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c052:	4611      	mov	r1, r2
 800c054:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c06e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d101      	bne.n	800c07a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c076:	2303      	movs	r3, #3
 800c078:	e01b      	b.n	800c0b2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d015      	beq.n	800c0b0 <USBD_CDC_EP0_RxReady+0x50>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c08a:	2bff      	cmp	r3, #255	; 0xff
 800c08c:	d010      	beq.n	800c0b0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c09c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c0a4:	b292      	uxth	r2, r2
 800c0a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	22ff      	movs	r2, #255	; 0xff
 800c0ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2243      	movs	r2, #67	; 0x43
 800c0c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c0ca:	4b03      	ldr	r3, [pc, #12]	; (800c0d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	200000c0 	.word	0x200000c0

0800c0dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2243      	movs	r2, #67	; 0x43
 800c0e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c0ea:	4b03      	ldr	r3, [pc, #12]	; (800c0f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr
 800c0f8:	2000007c 	.word	0x2000007c

0800c0fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2243      	movs	r2, #67	; 0x43
 800c108:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c10a:	4b03      	ldr	r3, [pc, #12]	; (800c118 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	20000104 	.word	0x20000104

0800c11c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	220a      	movs	r2, #10
 800c128:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c12a:	4b03      	ldr	r3, [pc, #12]	; (800c138 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr
 800c138:	20000038 	.word	0x20000038

0800c13c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e004      	b.n	800c15a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c166:	b480      	push	{r7}
 800c168:	b087      	sub	sp, #28
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c178:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d101      	bne.n	800c184 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c180:	2303      	movs	r3, #3
 800c182:	e008      	b.n	800c196 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	371c      	adds	r7, #28
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b085      	sub	sp, #20
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
 800c1aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d101      	bne.n	800c1be <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c1ba:	2303      	movs	r3, #3
 800c1bc:	e004      	b.n	800c1c8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	683a      	ldr	r2, [r7, #0]
 800c1c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3714      	adds	r7, #20
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	e01a      	b.n	800c22c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d114      	bne.n	800c22a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	2201      	movs	r2, #1
 800c204:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c21e:	2181      	movs	r1, #129	; 0x81
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f005 f90e 	bl	8011442 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c226:	2300      	movs	r3, #0
 800c228:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c242:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d101      	bne.n	800c252 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c24e:	2303      	movs	r3, #3
 800c250:	e016      	b.n	800c280 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	7c1b      	ldrb	r3, [r3, #16]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d109      	bne.n	800c26e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c260:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c264:	2101      	movs	r1, #1
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f005 f90c 	bl	8011484 <USBD_LL_PrepareReceive>
 800c26c:	e007      	b.n	800c27e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c274:	2340      	movs	r3, #64	; 0x40
 800c276:	2101      	movs	r1, #1
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f005 f903 	bl	8011484 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b086      	sub	sp, #24
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	4613      	mov	r3, r2
 800c294:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c29c:	2303      	movs	r3, #3
 800c29e:	e01f      	b.n	800c2e0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	79fa      	ldrb	r2, [r7, #7]
 800c2d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f004 ff7f 	bl	80111d8 <USBD_LL_Init>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3718      	adds	r7, #24
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d101      	bne.n	800c300 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e016      	b.n	800c32e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00b      	beq.n	800c32c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31c:	f107 020e 	add.w	r2, r7, #14
 800c320:	4610      	mov	r0, r2
 800c322:	4798      	blx	r3
 800c324:	4602      	mov	r2, r0
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b082      	sub	sp, #8
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f004 ff96 	bl	8011270 <USBD_LL_Start>
 800c344:	4603      	mov	r3, r0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3708      	adds	r7, #8
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c34e:	b480      	push	{r7}
 800c350:	b083      	sub	sp, #12
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c370:	2303      	movs	r3, #3
 800c372:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d009      	beq.n	800c392 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	78fa      	ldrb	r2, [r7, #3]
 800c388:	4611      	mov	r1, r2
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	4798      	blx	r3
 800c38e:	4603      	mov	r3, r0
 800c390:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c392:	7bfb      	ldrb	r3, [r7, #15]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d007      	beq.n	800c3c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	78fa      	ldrb	r2, [r7, #3]
 800c3bc:	4611      	mov	r1, r2
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	4798      	blx	r3
  }

  return USBD_OK;
 800c3c2:	2300      	movs	r3, #0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 ff90 	bl	800d304 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c400:	f003 031f 	and.w	r3, r3, #31
 800c404:	2b02      	cmp	r3, #2
 800c406:	d01a      	beq.n	800c43e <USBD_LL_SetupStage+0x72>
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d822      	bhi.n	800c452 <USBD_LL_SetupStage+0x86>
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <USBD_LL_SetupStage+0x4a>
 800c410:	2b01      	cmp	r3, #1
 800c412:	d00a      	beq.n	800c42a <USBD_LL_SetupStage+0x5e>
 800c414:	e01d      	b.n	800c452 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c41c:	4619      	mov	r1, r3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fa62 	bl	800c8e8 <USBD_StdDevReq>
 800c424:	4603      	mov	r3, r0
 800c426:	73fb      	strb	r3, [r7, #15]
      break;
 800c428:	e020      	b.n	800c46c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c430:	4619      	mov	r1, r3
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 fac6 	bl	800c9c4 <USBD_StdItfReq>
 800c438:	4603      	mov	r3, r0
 800c43a:	73fb      	strb	r3, [r7, #15]
      break;
 800c43c:	e016      	b.n	800c46c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fb05 	bl	800ca56 <USBD_StdEPReq>
 800c44c:	4603      	mov	r3, r0
 800c44e:	73fb      	strb	r3, [r7, #15]
      break;
 800c450:	e00c      	b.n	800c46c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c458:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	4619      	mov	r1, r3
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f004 ff65 	bl	8011330 <USBD_LL_StallEP>
 800c466:	4603      	mov	r3, r0
 800c468:	73fb      	strb	r3, [r7, #15]
      break;
 800c46a:	bf00      	nop
  }

  return ret;
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b086      	sub	sp, #24
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	60f8      	str	r0, [r7, #12]
 800c47e:	460b      	mov	r3, r1
 800c480:	607a      	str	r2, [r7, #4]
 800c482:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c484:	7afb      	ldrb	r3, [r7, #11]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d138      	bne.n	800c4fc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c490:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c498:	2b03      	cmp	r3, #3
 800c49a:	d14a      	bne.n	800c532 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	689a      	ldr	r2, [r3, #8]
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d913      	bls.n	800c4d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	689a      	ldr	r2, [r3, #8]
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	1ad2      	subs	r2, r2, r3
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	68da      	ldr	r2, [r3, #12]
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	bf28      	it	cs
 800c4c2:	4613      	movcs	r3, r2
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	6879      	ldr	r1, [r7, #4]
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f001 f80f 	bl	800d4ec <USBD_CtlContinueRx>
 800c4ce:	e030      	b.n	800c532 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	2b03      	cmp	r3, #3
 800c4da:	d10b      	bne.n	800c4f4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e2:	691b      	ldr	r3, [r3, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d005      	beq.n	800c4f4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f001 f80a 	bl	800d50e <USBD_CtlSendStatus>
 800c4fa:	e01a      	b.n	800c532 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b03      	cmp	r3, #3
 800c506:	d114      	bne.n	800c532 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00e      	beq.n	800c532 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c51a:	699b      	ldr	r3, [r3, #24]
 800c51c:	7afa      	ldrb	r2, [r7, #11]
 800c51e:	4611      	mov	r1, r2
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	4798      	blx	r3
 800c524:	4603      	mov	r3, r0
 800c526:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c528:	7dfb      	ldrb	r3, [r7, #23]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
 800c530:	e000      	b.n	800c534 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3718      	adds	r7, #24
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	460b      	mov	r3, r1
 800c546:	607a      	str	r2, [r7, #4]
 800c548:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c54a:	7afb      	ldrb	r3, [r7, #11]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d16b      	bne.n	800c628 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3314      	adds	r3, #20
 800c554:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c55c:	2b02      	cmp	r3, #2
 800c55e:	d156      	bne.n	800c60e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	689a      	ldr	r2, [r3, #8]
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d914      	bls.n	800c596 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	689a      	ldr	r2, [r3, #8]
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	1ad2      	subs	r2, r2, r3
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	461a      	mov	r2, r3
 800c580:	6879      	ldr	r1, [r7, #4]
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f000 ff84 	bl	800d490 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c588:	2300      	movs	r3, #0
 800c58a:	2200      	movs	r2, #0
 800c58c:	2100      	movs	r1, #0
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f004 ff78 	bl	8011484 <USBD_LL_PrepareReceive>
 800c594:	e03b      	b.n	800c60e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	68da      	ldr	r2, [r3, #12]
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d11c      	bne.n	800c5dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d316      	bcc.n	800c5dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	685a      	ldr	r2, [r3, #4]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d20f      	bcs.n	800c5dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c5bc:	2200      	movs	r2, #0
 800c5be:	2100      	movs	r1, #0
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f000 ff65 	bl	800d490 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f004 ff55 	bl	8011484 <USBD_LL_PrepareReceive>
 800c5da:	e018      	b.n	800c60e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	2b03      	cmp	r3, #3
 800c5e6:	d10b      	bne.n	800c600 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d005      	beq.n	800c600 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c600:	2180      	movs	r1, #128	; 0x80
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f004 fe94 	bl	8011330 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f000 ff93 	bl	800d534 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c614:	2b01      	cmp	r3, #1
 800c616:	d122      	bne.n	800c65e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f7ff fe98 	bl	800c34e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c626:	e01a      	b.n	800c65e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	2b03      	cmp	r3, #3
 800c632:	d114      	bne.n	800c65e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00e      	beq.n	800c65e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c646:	695b      	ldr	r3, [r3, #20]
 800c648:	7afa      	ldrb	r2, [r7, #11]
 800c64a:	4611      	mov	r1, r2
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	4798      	blx	r3
 800c650:	4603      	mov	r3, r0
 800c652:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c654:	7dfb      	ldrb	r3, [r7, #23]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
 800c65c:	e000      	b.n	800c660 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3718      	adds	r7, #24
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c694:	2b00      	cmp	r3, #0
 800c696:	d101      	bne.n	800c69c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c698:	2303      	movs	r3, #3
 800c69a:	e02f      	b.n	800c6fc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00f      	beq.n	800c6c6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d009      	beq.n	800c6c6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	6852      	ldr	r2, [r2, #4]
 800c6be:	b2d2      	uxtb	r2, r2
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6c6:	2340      	movs	r3, #64	; 0x40
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f004 fdea 	bl	80112a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2240      	movs	r2, #64	; 0x40
 800c6de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6e2:	2340      	movs	r3, #64	; 0x40
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	2180      	movs	r1, #128	; 0x80
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f004 fddc 	bl	80112a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2240      	movs	r2, #64	; 0x40
 800c6f8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c6fa:	2300      	movs	r3, #0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	460b      	mov	r3, r1
 800c70e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	78fa      	ldrb	r2, [r7, #3]
 800c714:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c724:	b480      	push	{r7}
 800c726:	b083      	sub	sp, #12
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c732:	b2da      	uxtb	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2204      	movs	r2, #4
 800c73e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	2b04      	cmp	r3, #4
 800c762:	d106      	bne.n	800c772 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d101      	bne.n	800c796 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c792:	2303      	movs	r3, #3
 800c794:	e012      	b.n	800c7bc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d10b      	bne.n	800c7ba <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a8:	69db      	ldr	r3, [r3, #28]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d005      	beq.n	800c7ba <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7b4:	69db      	ldr	r3, [r3, #28]
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c7ba:	2300      	movs	r3, #0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d101      	bne.n	800c7de <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	e014      	b.n	800c808 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d10d      	bne.n	800c806 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7f0:	6a1b      	ldr	r3, [r3, #32]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d007      	beq.n	800c806 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7fc:	6a1b      	ldr	r3, [r3, #32]
 800c7fe:	78fa      	ldrb	r2, [r7, #3]
 800c800:	4611      	mov	r1, r2
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c806:	2300      	movs	r3, #0
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3708      	adds	r7, #8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	460b      	mov	r3, r1
 800c81a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c826:	2303      	movs	r3, #3
 800c828:	e014      	b.n	800c854 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c830:	b2db      	uxtb	r3, r3
 800c832:	2b03      	cmp	r3, #3
 800c834:	d10d      	bne.n	800c852 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d007      	beq.n	800c852 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84a:	78fa      	ldrb	r2, [r7, #3]
 800c84c:	4611      	mov	r1, r2
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	370c      	adds	r7, #12
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr

0800c872 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b082      	sub	sp, #8
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d009      	beq.n	800c8a0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	6852      	ldr	r2, [r2, #4]
 800c898:	b2d2      	uxtb	r2, r2
 800c89a:	4611      	mov	r1, r2
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	4798      	blx	r3
  }

  return USBD_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b087      	sub	sp, #28
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c8c8:	8a3b      	ldrh	r3, [r7, #16]
 800c8ca:	021b      	lsls	r3, r3, #8
 800c8cc:	b21a      	sxth	r2, r3
 800c8ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	b21b      	sxth	r3, r3
 800c8d6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c8d8:	89fb      	ldrh	r3, [r7, #14]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	371c      	adds	r7, #28
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
	...

0800c8e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8fe:	2b40      	cmp	r3, #64	; 0x40
 800c900:	d005      	beq.n	800c90e <USBD_StdDevReq+0x26>
 800c902:	2b40      	cmp	r3, #64	; 0x40
 800c904:	d853      	bhi.n	800c9ae <USBD_StdDevReq+0xc6>
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00b      	beq.n	800c922 <USBD_StdDevReq+0x3a>
 800c90a:	2b20      	cmp	r3, #32
 800c90c:	d14f      	bne.n	800c9ae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	4798      	blx	r3
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]
      break;
 800c920:	e04a      	b.n	800c9b8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	785b      	ldrb	r3, [r3, #1]
 800c926:	2b09      	cmp	r3, #9
 800c928:	d83b      	bhi.n	800c9a2 <USBD_StdDevReq+0xba>
 800c92a:	a201      	add	r2, pc, #4	; (adr r2, 800c930 <USBD_StdDevReq+0x48>)
 800c92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c930:	0800c985 	.word	0x0800c985
 800c934:	0800c999 	.word	0x0800c999
 800c938:	0800c9a3 	.word	0x0800c9a3
 800c93c:	0800c98f 	.word	0x0800c98f
 800c940:	0800c9a3 	.word	0x0800c9a3
 800c944:	0800c963 	.word	0x0800c963
 800c948:	0800c959 	.word	0x0800c959
 800c94c:	0800c9a3 	.word	0x0800c9a3
 800c950:	0800c97b 	.word	0x0800c97b
 800c954:	0800c96d 	.word	0x0800c96d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 f9de 	bl	800cd1c <USBD_GetDescriptor>
          break;
 800c960:	e024      	b.n	800c9ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c962:	6839      	ldr	r1, [r7, #0]
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fb43 	bl	800cff0 <USBD_SetAddress>
          break;
 800c96a:	e01f      	b.n	800c9ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fb82 	bl	800d078 <USBD_SetConfig>
 800c974:	4603      	mov	r3, r0
 800c976:	73fb      	strb	r3, [r7, #15]
          break;
 800c978:	e018      	b.n	800c9ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c97a:	6839      	ldr	r1, [r7, #0]
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fc21 	bl	800d1c4 <USBD_GetConfig>
          break;
 800c982:	e013      	b.n	800c9ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c984:	6839      	ldr	r1, [r7, #0]
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 fc52 	bl	800d230 <USBD_GetStatus>
          break;
 800c98c:	e00e      	b.n	800c9ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 fc81 	bl	800d298 <USBD_SetFeature>
          break;
 800c996:	e009      	b.n	800c9ac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fc90 	bl	800d2c0 <USBD_ClrFeature>
          break;
 800c9a0:	e004      	b.n	800c9ac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fce7 	bl	800d378 <USBD_CtlError>
          break;
 800c9aa:	bf00      	nop
      }
      break;
 800c9ac:	e004      	b.n	800c9b8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 fce1 	bl	800d378 <USBD_CtlError>
      break;
 800c9b6:	bf00      	nop
  }

  return ret;
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop

0800c9c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9da:	2b40      	cmp	r3, #64	; 0x40
 800c9dc:	d005      	beq.n	800c9ea <USBD_StdItfReq+0x26>
 800c9de:	2b40      	cmp	r3, #64	; 0x40
 800c9e0:	d82f      	bhi.n	800ca42 <USBD_StdItfReq+0x7e>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d001      	beq.n	800c9ea <USBD_StdItfReq+0x26>
 800c9e6:	2b20      	cmp	r3, #32
 800c9e8:	d12b      	bne.n	800ca42 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d81d      	bhi.n	800ca34 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	889b      	ldrh	r3, [r3, #4]
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d813      	bhi.n	800ca2a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	4798      	blx	r3
 800ca10:	4603      	mov	r3, r0
 800ca12:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	88db      	ldrh	r3, [r3, #6]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d110      	bne.n	800ca3e <USBD_StdItfReq+0x7a>
 800ca1c:	7bfb      	ldrb	r3, [r7, #15]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d10d      	bne.n	800ca3e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fd73 	bl	800d50e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ca28:	e009      	b.n	800ca3e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ca2a:	6839      	ldr	r1, [r7, #0]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fca3 	bl	800d378 <USBD_CtlError>
          break;
 800ca32:	e004      	b.n	800ca3e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ca34:	6839      	ldr	r1, [r7, #0]
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 fc9e 	bl	800d378 <USBD_CtlError>
          break;
 800ca3c:	e000      	b.n	800ca40 <USBD_StdItfReq+0x7c>
          break;
 800ca3e:	bf00      	nop
      }
      break;
 800ca40:	e004      	b.n	800ca4c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fc97 	bl	800d378 <USBD_CtlError>
      break;
 800ca4a:	bf00      	nop
  }

  return ret;
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b084      	sub	sp, #16
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca60:	2300      	movs	r3, #0
 800ca62:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	889b      	ldrh	r3, [r3, #4]
 800ca68:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca72:	2b40      	cmp	r3, #64	; 0x40
 800ca74:	d007      	beq.n	800ca86 <USBD_StdEPReq+0x30>
 800ca76:	2b40      	cmp	r3, #64	; 0x40
 800ca78:	f200 8145 	bhi.w	800cd06 <USBD_StdEPReq+0x2b0>
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00c      	beq.n	800ca9a <USBD_StdEPReq+0x44>
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	f040 8140 	bne.w	800cd06 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	4798      	blx	r3
 800ca94:	4603      	mov	r3, r0
 800ca96:	73fb      	strb	r3, [r7, #15]
      break;
 800ca98:	e13a      	b.n	800cd10 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	785b      	ldrb	r3, [r3, #1]
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	d007      	beq.n	800cab2 <USBD_StdEPReq+0x5c>
 800caa2:	2b03      	cmp	r3, #3
 800caa4:	f300 8129 	bgt.w	800ccfa <USBD_StdEPReq+0x2a4>
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d07f      	beq.n	800cbac <USBD_StdEPReq+0x156>
 800caac:	2b01      	cmp	r3, #1
 800caae:	d03c      	beq.n	800cb2a <USBD_StdEPReq+0xd4>
 800cab0:	e123      	b.n	800ccfa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b02      	cmp	r3, #2
 800cabc:	d002      	beq.n	800cac4 <USBD_StdEPReq+0x6e>
 800cabe:	2b03      	cmp	r3, #3
 800cac0:	d016      	beq.n	800caf0 <USBD_StdEPReq+0x9a>
 800cac2:	e02c      	b.n	800cb1e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cac4:	7bbb      	ldrb	r3, [r7, #14]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00d      	beq.n	800cae6 <USBD_StdEPReq+0x90>
 800caca:	7bbb      	ldrb	r3, [r7, #14]
 800cacc:	2b80      	cmp	r3, #128	; 0x80
 800cace:	d00a      	beq.n	800cae6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
 800cad2:	4619      	mov	r1, r3
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f004 fc2b 	bl	8011330 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cada:	2180      	movs	r1, #128	; 0x80
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f004 fc27 	bl	8011330 <USBD_LL_StallEP>
 800cae2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cae4:	e020      	b.n	800cb28 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fc45 	bl	800d378 <USBD_CtlError>
              break;
 800caee:	e01b      	b.n	800cb28 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	885b      	ldrh	r3, [r3, #2]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10e      	bne.n	800cb16 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00b      	beq.n	800cb16 <USBD_StdEPReq+0xc0>
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	2b80      	cmp	r3, #128	; 0x80
 800cb02:	d008      	beq.n	800cb16 <USBD_StdEPReq+0xc0>
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	88db      	ldrh	r3, [r3, #6]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d104      	bne.n	800cb16 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb0c:	7bbb      	ldrb	r3, [r7, #14]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f004 fc0d 	bl	8011330 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fcf9 	bl	800d50e <USBD_CtlSendStatus>

              break;
 800cb1c:	e004      	b.n	800cb28 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fc29 	bl	800d378 <USBD_CtlError>
              break;
 800cb26:	bf00      	nop
          }
          break;
 800cb28:	e0ec      	b.n	800cd04 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b02      	cmp	r3, #2
 800cb34:	d002      	beq.n	800cb3c <USBD_StdEPReq+0xe6>
 800cb36:	2b03      	cmp	r3, #3
 800cb38:	d016      	beq.n	800cb68 <USBD_StdEPReq+0x112>
 800cb3a:	e030      	b.n	800cb9e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb3c:	7bbb      	ldrb	r3, [r7, #14]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00d      	beq.n	800cb5e <USBD_StdEPReq+0x108>
 800cb42:	7bbb      	ldrb	r3, [r7, #14]
 800cb44:	2b80      	cmp	r3, #128	; 0x80
 800cb46:	d00a      	beq.n	800cb5e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb48:	7bbb      	ldrb	r3, [r7, #14]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f004 fbef 	bl	8011330 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb52:	2180      	movs	r1, #128	; 0x80
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f004 fbeb 	bl	8011330 <USBD_LL_StallEP>
 800cb5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb5c:	e025      	b.n	800cbaa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fc09 	bl	800d378 <USBD_CtlError>
              break;
 800cb66:	e020      	b.n	800cbaa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	885b      	ldrh	r3, [r3, #2]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d11b      	bne.n	800cba8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb70:	7bbb      	ldrb	r3, [r7, #14]
 800cb72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d004      	beq.n	800cb84 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb7a:	7bbb      	ldrb	r3, [r7, #14]
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f004 fbf5 	bl	801136e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fcc2 	bl	800d50e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	4798      	blx	r3
 800cb98:	4603      	mov	r3, r0
 800cb9a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cb9c:	e004      	b.n	800cba8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cb9e:	6839      	ldr	r1, [r7, #0]
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 fbe9 	bl	800d378 <USBD_CtlError>
              break;
 800cba6:	e000      	b.n	800cbaa <USBD_StdEPReq+0x154>
              break;
 800cba8:	bf00      	nop
          }
          break;
 800cbaa:	e0ab      	b.n	800cd04 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d002      	beq.n	800cbbe <USBD_StdEPReq+0x168>
 800cbb8:	2b03      	cmp	r3, #3
 800cbba:	d032      	beq.n	800cc22 <USBD_StdEPReq+0x1cc>
 800cbbc:	e097      	b.n	800ccee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbbe:	7bbb      	ldrb	r3, [r7, #14]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d007      	beq.n	800cbd4 <USBD_StdEPReq+0x17e>
 800cbc4:	7bbb      	ldrb	r3, [r7, #14]
 800cbc6:	2b80      	cmp	r3, #128	; 0x80
 800cbc8:	d004      	beq.n	800cbd4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cbca:	6839      	ldr	r1, [r7, #0]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 fbd3 	bl	800d378 <USBD_CtlError>
                break;
 800cbd2:	e091      	b.n	800ccf8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	da0b      	bge.n	800cbf4 <USBD_StdEPReq+0x19e>
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
 800cbde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	3310      	adds	r3, #16
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	4413      	add	r3, r2
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	e00b      	b.n	800cc0c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	4413      	add	r3, r2
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	4413      	add	r3, r2
 800cc0a:	3304      	adds	r3, #4
 800cc0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2200      	movs	r2, #0
 800cc12:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2202      	movs	r2, #2
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fc1d 	bl	800d45a <USBD_CtlSendData>
              break;
 800cc20:	e06a      	b.n	800ccf8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	da11      	bge.n	800cc4e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	f003 020f 	and.w	r2, r3, #15
 800cc30:	6879      	ldr	r1, [r7, #4]
 800cc32:	4613      	mov	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4413      	add	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	440b      	add	r3, r1
 800cc3c:	3324      	adds	r3, #36	; 0x24
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d117      	bne.n	800cc74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 fb96 	bl	800d378 <USBD_CtlError>
                  break;
 800cc4c:	e054      	b.n	800ccf8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc4e:	7bbb      	ldrb	r3, [r7, #14]
 800cc50:	f003 020f 	and.w	r2, r3, #15
 800cc54:	6879      	ldr	r1, [r7, #4]
 800cc56:	4613      	mov	r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	4413      	add	r3, r2
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	440b      	add	r3, r1
 800cc60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc64:	881b      	ldrh	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d104      	bne.n	800cc74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cc6a:	6839      	ldr	r1, [r7, #0]
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 fb83 	bl	800d378 <USBD_CtlError>
                  break;
 800cc72:	e041      	b.n	800ccf8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	da0b      	bge.n	800cc94 <USBD_StdEPReq+0x23e>
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
 800cc7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc82:	4613      	mov	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4413      	add	r3, r2
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	3310      	adds	r3, #16
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	4413      	add	r3, r2
 800cc90:	3304      	adds	r3, #4
 800cc92:	e00b      	b.n	800ccac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc94:	7bbb      	ldrb	r3, [r7, #14]
 800cc96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	4413      	add	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	4413      	add	r3, r2
 800ccaa:	3304      	adds	r3, #4
 800ccac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ccae:	7bbb      	ldrb	r3, [r7, #14]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <USBD_StdEPReq+0x264>
 800ccb4:	7bbb      	ldrb	r3, [r7, #14]
 800ccb6:	2b80      	cmp	r3, #128	; 0x80
 800ccb8:	d103      	bne.n	800ccc2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	e00e      	b.n	800cce0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ccc2:	7bbb      	ldrb	r3, [r7, #14]
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f004 fb70 	bl	80113ac <USBD_LL_IsStallEP>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d003      	beq.n	800ccda <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	601a      	str	r2, [r3, #0]
 800ccd8:	e002      	b.n	800cce0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2202      	movs	r2, #2
 800cce4:	4619      	mov	r1, r3
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fbb7 	bl	800d45a <USBD_CtlSendData>
              break;
 800ccec:	e004      	b.n	800ccf8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ccee:	6839      	ldr	r1, [r7, #0]
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 fb41 	bl	800d378 <USBD_CtlError>
              break;
 800ccf6:	bf00      	nop
          }
          break;
 800ccf8:	e004      	b.n	800cd04 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ccfa:	6839      	ldr	r1, [r7, #0]
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 fb3b 	bl	800d378 <USBD_CtlError>
          break;
 800cd02:	bf00      	nop
      }
      break;
 800cd04:	e004      	b.n	800cd10 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cd06:	6839      	ldr	r1, [r7, #0]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fb35 	bl	800d378 <USBD_CtlError>
      break;
 800cd0e:	bf00      	nop
  }

  return ret;
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
	...

0800cd1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd26:	2300      	movs	r3, #0
 800cd28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	885b      	ldrh	r3, [r3, #2]
 800cd36:	0a1b      	lsrs	r3, r3, #8
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	2b06      	cmp	r3, #6
 800cd3e:	f200 8128 	bhi.w	800cf92 <USBD_GetDescriptor+0x276>
 800cd42:	a201      	add	r2, pc, #4	; (adr r2, 800cd48 <USBD_GetDescriptor+0x2c>)
 800cd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd48:	0800cd65 	.word	0x0800cd65
 800cd4c:	0800cd7d 	.word	0x0800cd7d
 800cd50:	0800cdbd 	.word	0x0800cdbd
 800cd54:	0800cf93 	.word	0x0800cf93
 800cd58:	0800cf93 	.word	0x0800cf93
 800cd5c:	0800cf33 	.word	0x0800cf33
 800cd60:	0800cf5f 	.word	0x0800cf5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	7c12      	ldrb	r2, [r2, #16]
 800cd70:	f107 0108 	add.w	r1, r7, #8
 800cd74:	4610      	mov	r0, r2
 800cd76:	4798      	blx	r3
 800cd78:	60f8      	str	r0, [r7, #12]
      break;
 800cd7a:	e112      	b.n	800cfa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	7c1b      	ldrb	r3, [r3, #16]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d10d      	bne.n	800cda0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd8c:	f107 0208 	add.w	r2, r7, #8
 800cd90:	4610      	mov	r0, r2
 800cd92:	4798      	blx	r3
 800cd94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	2202      	movs	r2, #2
 800cd9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd9e:	e100      	b.n	800cfa2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	f107 0208 	add.w	r2, r7, #8
 800cdac:	4610      	mov	r0, r2
 800cdae:	4798      	blx	r3
 800cdb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	701a      	strb	r2, [r3, #0]
      break;
 800cdba:	e0f2      	b.n	800cfa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	885b      	ldrh	r3, [r3, #2]
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b05      	cmp	r3, #5
 800cdc4:	f200 80ac 	bhi.w	800cf20 <USBD_GetDescriptor+0x204>
 800cdc8:	a201      	add	r2, pc, #4	; (adr r2, 800cdd0 <USBD_GetDescriptor+0xb4>)
 800cdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdce:	bf00      	nop
 800cdd0:	0800cde9 	.word	0x0800cde9
 800cdd4:	0800ce1d 	.word	0x0800ce1d
 800cdd8:	0800ce51 	.word	0x0800ce51
 800cddc:	0800ce85 	.word	0x0800ce85
 800cde0:	0800ceb9 	.word	0x0800ceb9
 800cde4:	0800ceed 	.word	0x0800ceed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00b      	beq.n	800ce0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	7c12      	ldrb	r2, [r2, #16]
 800ce00:	f107 0108 	add.w	r1, r7, #8
 800ce04:	4610      	mov	r0, r2
 800ce06:	4798      	blx	r3
 800ce08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce0a:	e091      	b.n	800cf30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce0c:	6839      	ldr	r1, [r7, #0]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 fab2 	bl	800d378 <USBD_CtlError>
            err++;
 800ce14:	7afb      	ldrb	r3, [r7, #11]
 800ce16:	3301      	adds	r3, #1
 800ce18:	72fb      	strb	r3, [r7, #11]
          break;
 800ce1a:	e089      	b.n	800cf30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00b      	beq.n	800ce40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	7c12      	ldrb	r2, [r2, #16]
 800ce34:	f107 0108 	add.w	r1, r7, #8
 800ce38:	4610      	mov	r0, r2
 800ce3a:	4798      	blx	r3
 800ce3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce3e:	e077      	b.n	800cf30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fa98 	bl	800d378 <USBD_CtlError>
            err++;
 800ce48:	7afb      	ldrb	r3, [r7, #11]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce4e:	e06f      	b.n	800cf30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00b      	beq.n	800ce74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	7c12      	ldrb	r2, [r2, #16]
 800ce68:	f107 0108 	add.w	r1, r7, #8
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	4798      	blx	r3
 800ce70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce72:	e05d      	b.n	800cf30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 fa7e 	bl	800d378 <USBD_CtlError>
            err++;
 800ce7c:	7afb      	ldrb	r3, [r7, #11]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	72fb      	strb	r3, [r7, #11]
          break;
 800ce82:	e055      	b.n	800cf30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce8a:	691b      	ldr	r3, [r3, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00b      	beq.n	800cea8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	7c12      	ldrb	r2, [r2, #16]
 800ce9c:	f107 0108 	add.w	r1, r7, #8
 800cea0:	4610      	mov	r0, r2
 800cea2:	4798      	blx	r3
 800cea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cea6:	e043      	b.n	800cf30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fa64 	bl	800d378 <USBD_CtlError>
            err++;
 800ceb0:	7afb      	ldrb	r3, [r7, #11]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	72fb      	strb	r3, [r7, #11]
          break;
 800ceb6:	e03b      	b.n	800cf30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cebe:	695b      	ldr	r3, [r3, #20]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00b      	beq.n	800cedc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceca:	695b      	ldr	r3, [r3, #20]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	7c12      	ldrb	r2, [r2, #16]
 800ced0:	f107 0108 	add.w	r1, r7, #8
 800ced4:	4610      	mov	r0, r2
 800ced6:	4798      	blx	r3
 800ced8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ceda:	e029      	b.n	800cf30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fa4a 	bl	800d378 <USBD_CtlError>
            err++;
 800cee4:	7afb      	ldrb	r3, [r7, #11]
 800cee6:	3301      	adds	r3, #1
 800cee8:	72fb      	strb	r3, [r7, #11]
          break;
 800ceea:	e021      	b.n	800cf30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cef2:	699b      	ldr	r3, [r3, #24]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00b      	beq.n	800cf10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	7c12      	ldrb	r2, [r2, #16]
 800cf04:	f107 0108 	add.w	r1, r7, #8
 800cf08:	4610      	mov	r0, r2
 800cf0a:	4798      	blx	r3
 800cf0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf0e:	e00f      	b.n	800cf30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf10:	6839      	ldr	r1, [r7, #0]
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fa30 	bl	800d378 <USBD_CtlError>
            err++;
 800cf18:	7afb      	ldrb	r3, [r7, #11]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf1e:	e007      	b.n	800cf30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf20:	6839      	ldr	r1, [r7, #0]
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fa28 	bl	800d378 <USBD_CtlError>
          err++;
 800cf28:	7afb      	ldrb	r3, [r7, #11]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cf2e:	bf00      	nop
      }
      break;
 800cf30:	e037      	b.n	800cfa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	7c1b      	ldrb	r3, [r3, #16]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d109      	bne.n	800cf4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf42:	f107 0208 	add.w	r2, r7, #8
 800cf46:	4610      	mov	r0, r2
 800cf48:	4798      	blx	r3
 800cf4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf4c:	e029      	b.n	800cfa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf4e:	6839      	ldr	r1, [r7, #0]
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 fa11 	bl	800d378 <USBD_CtlError>
        err++;
 800cf56:	7afb      	ldrb	r3, [r7, #11]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf5c:	e021      	b.n	800cfa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	7c1b      	ldrb	r3, [r3, #16]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10d      	bne.n	800cf82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf6e:	f107 0208 	add.w	r2, r7, #8
 800cf72:	4610      	mov	r0, r2
 800cf74:	4798      	blx	r3
 800cf76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	2207      	movs	r2, #7
 800cf7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf80:	e00f      	b.n	800cfa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f9f7 	bl	800d378 <USBD_CtlError>
        err++;
 800cf8a:	7afb      	ldrb	r3, [r7, #11]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf90:	e007      	b.n	800cfa2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cf92:	6839      	ldr	r1, [r7, #0]
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 f9ef 	bl	800d378 <USBD_CtlError>
      err++;
 800cf9a:	7afb      	ldrb	r3, [r7, #11]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	72fb      	strb	r3, [r7, #11]
      break;
 800cfa0:	bf00      	nop
  }

  if (err != 0U)
 800cfa2:	7afb      	ldrb	r3, [r7, #11]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d11e      	bne.n	800cfe6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	88db      	ldrh	r3, [r3, #6]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d016      	beq.n	800cfde <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cfb0:	893b      	ldrh	r3, [r7, #8]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d00e      	beq.n	800cfd4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	88da      	ldrh	r2, [r3, #6]
 800cfba:	893b      	ldrh	r3, [r7, #8]
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	bf28      	it	cs
 800cfc0:	4613      	movcs	r3, r2
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cfc6:	893b      	ldrh	r3, [r7, #8]
 800cfc8:	461a      	mov	r2, r3
 800cfca:	68f9      	ldr	r1, [r7, #12]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fa44 	bl	800d45a <USBD_CtlSendData>
 800cfd2:	e009      	b.n	800cfe8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cfd4:	6839      	ldr	r1, [r7, #0]
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 f9ce 	bl	800d378 <USBD_CtlError>
 800cfdc:	e004      	b.n	800cfe8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fa95 	bl	800d50e <USBD_CtlSendStatus>
 800cfe4:	e000      	b.n	800cfe8 <USBD_GetDescriptor+0x2cc>
    return;
 800cfe6:	bf00      	nop
  }
}
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop

0800cff0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	889b      	ldrh	r3, [r3, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d131      	bne.n	800d066 <USBD_SetAddress+0x76>
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	88db      	ldrh	r3, [r3, #6]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d12d      	bne.n	800d066 <USBD_SetAddress+0x76>
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	885b      	ldrh	r3, [r3, #2]
 800d00e:	2b7f      	cmp	r3, #127	; 0x7f
 800d010:	d829      	bhi.n	800d066 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	885b      	ldrh	r3, [r3, #2]
 800d016:	b2db      	uxtb	r3, r3
 800d018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d01c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b03      	cmp	r3, #3
 800d028:	d104      	bne.n	800d034 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 f9a3 	bl	800d378 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d032:	e01d      	b.n	800d070 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	7bfa      	ldrb	r2, [r7, #15]
 800d038:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d03c:	7bfb      	ldrb	r3, [r7, #15]
 800d03e:	4619      	mov	r1, r3
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f004 f9df 	bl	8011404 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fa61 	bl	800d50e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d04c:	7bfb      	ldrb	r3, [r7, #15]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d004      	beq.n	800d05c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2202      	movs	r2, #2
 800d056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d05a:	e009      	b.n	800d070 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d064:	e004      	b.n	800d070 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 f985 	bl	800d378 <USBD_CtlError>
  }
}
 800d06e:	bf00      	nop
 800d070:	bf00      	nop
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	885b      	ldrh	r3, [r3, #2]
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	4b4c      	ldr	r3, [pc, #304]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d08e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d090:	4b4b      	ldr	r3, [pc, #300]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d905      	bls.n	800d0a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d098:	6839      	ldr	r1, [r7, #0]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f96c 	bl	800d378 <USBD_CtlError>
    return USBD_FAIL;
 800d0a0:	2303      	movs	r3, #3
 800d0a2:	e088      	b.n	800d1b6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	d002      	beq.n	800d0b6 <USBD_SetConfig+0x3e>
 800d0b0:	2b03      	cmp	r3, #3
 800d0b2:	d025      	beq.n	800d100 <USBD_SetConfig+0x88>
 800d0b4:	e071      	b.n	800d19a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d0b6:	4b42      	ldr	r3, [pc, #264]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d01c      	beq.n	800d0f8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d0be:	4b40      	ldr	r3, [pc, #256]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0c8:	4b3d      	ldr	r3, [pc, #244]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7ff f948 	bl	800c364 <USBD_SetClassConfig>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d0d8:	7bfb      	ldrb	r3, [r7, #15]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d004      	beq.n	800d0e8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 f949 	bl	800d378 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0e6:	e065      	b.n	800d1b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 fa10 	bl	800d50e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2203      	movs	r2, #3
 800d0f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d0f6:	e05d      	b.n	800d1b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fa08 	bl	800d50e <USBD_CtlSendStatus>
      break;
 800d0fe:	e059      	b.n	800d1b4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d100:	4b2f      	ldr	r3, [pc, #188]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d112      	bne.n	800d12e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2202      	movs	r2, #2
 800d10c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d110:	4b2b      	ldr	r3, [pc, #172]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	461a      	mov	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d11a:	4b29      	ldr	r3, [pc, #164]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	4619      	mov	r1, r3
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f7ff f93b 	bl	800c39c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f9f1 	bl	800d50e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d12c:	e042      	b.n	800d1b4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d12e:	4b24      	ldr	r3, [pc, #144]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d02a      	beq.n	800d192 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	b2db      	uxtb	r3, r3
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7ff f929 	bl	800c39c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d14a:	4b1d      	ldr	r3, [pc, #116]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d154:	4b1a      	ldr	r3, [pc, #104]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	4619      	mov	r1, r3
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7ff f902 	bl	800c364 <USBD_SetClassConfig>
 800d160:	4603      	mov	r3, r0
 800d162:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d164:	7bfb      	ldrb	r3, [r7, #15]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d00f      	beq.n	800d18a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d16a:	6839      	ldr	r1, [r7, #0]
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 f903 	bl	800d378 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	b2db      	uxtb	r3, r3
 800d178:	4619      	mov	r1, r3
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7ff f90e 	bl	800c39c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2202      	movs	r2, #2
 800d184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d188:	e014      	b.n	800d1b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 f9bf 	bl	800d50e <USBD_CtlSendStatus>
      break;
 800d190:	e010      	b.n	800d1b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f9bb 	bl	800d50e <USBD_CtlSendStatus>
      break;
 800d198:	e00c      	b.n	800d1b4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f8eb 	bl	800d378 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d1a2:	4b07      	ldr	r3, [pc, #28]	; (800d1c0 <USBD_SetConfig+0x148>)
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7ff f8f7 	bl	800c39c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	73fb      	strb	r3, [r7, #15]
      break;
 800d1b2:	bf00      	nop
  }

  return ret;
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	200027a4 	.word	0x200027a4

0800d1c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	88db      	ldrh	r3, [r3, #6]
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d004      	beq.n	800d1e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d1d6:	6839      	ldr	r1, [r7, #0]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f8cd 	bl	800d378 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d1de:	e023      	b.n	800d228 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	dc02      	bgt.n	800d1f2 <USBD_GetConfig+0x2e>
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	dc03      	bgt.n	800d1f8 <USBD_GetConfig+0x34>
 800d1f0:	e015      	b.n	800d21e <USBD_GetConfig+0x5a>
 800d1f2:	2b03      	cmp	r3, #3
 800d1f4:	d00b      	beq.n	800d20e <USBD_GetConfig+0x4a>
 800d1f6:	e012      	b.n	800d21e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	3308      	adds	r3, #8
 800d202:	2201      	movs	r2, #1
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f927 	bl	800d45a <USBD_CtlSendData>
        break;
 800d20c:	e00c      	b.n	800d228 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	3304      	adds	r3, #4
 800d212:	2201      	movs	r2, #1
 800d214:	4619      	mov	r1, r3
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f91f 	bl	800d45a <USBD_CtlSendData>
        break;
 800d21c:	e004      	b.n	800d228 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d21e:	6839      	ldr	r1, [r7, #0]
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 f8a9 	bl	800d378 <USBD_CtlError>
        break;
 800d226:	bf00      	nop
}
 800d228:	bf00      	nop
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d240:	b2db      	uxtb	r3, r3
 800d242:	3b01      	subs	r3, #1
 800d244:	2b02      	cmp	r3, #2
 800d246:	d81e      	bhi.n	800d286 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	88db      	ldrh	r3, [r3, #6]
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d004      	beq.n	800d25a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 f890 	bl	800d378 <USBD_CtlError>
        break;
 800d258:	e01a      	b.n	800d290 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2201      	movs	r2, #1
 800d25e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d266:	2b00      	cmp	r3, #0
 800d268:	d005      	beq.n	800d276 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	f043 0202 	orr.w	r2, r3, #2
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	330c      	adds	r3, #12
 800d27a:	2202      	movs	r2, #2
 800d27c:	4619      	mov	r1, r3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 f8eb 	bl	800d45a <USBD_CtlSendData>
      break;
 800d284:	e004      	b.n	800d290 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f875 	bl	800d378 <USBD_CtlError>
      break;
 800d28e:	bf00      	nop
  }
}
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	885b      	ldrh	r3, [r3, #2]
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d106      	bne.n	800d2b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 f92b 	bl	800d50e <USBD_CtlSendStatus>
  }
}
 800d2b8:	bf00      	nop
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	2b02      	cmp	r3, #2
 800d2d6:	d80b      	bhi.n	800d2f0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	885b      	ldrh	r3, [r3, #2]
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d10c      	bne.n	800d2fa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f910 	bl	800d50e <USBD_CtlSendStatus>
      }
      break;
 800d2ee:	e004      	b.n	800d2fa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d2f0:	6839      	ldr	r1, [r7, #0]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 f840 	bl	800d378 <USBD_CtlError>
      break;
 800d2f8:	e000      	b.n	800d2fc <USBD_ClrFeature+0x3c>
      break;
 800d2fa:	bf00      	nop
  }
}
 800d2fc:	bf00      	nop
 800d2fe:	3708      	adds	r7, #8
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	781a      	ldrb	r2, [r3, #0]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	3301      	adds	r3, #1
 800d31e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	781a      	ldrb	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3301      	adds	r3, #1
 800d32c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f7ff fabb 	bl	800c8aa <SWAPBYTE>
 800d334:	4603      	mov	r3, r0
 800d336:	461a      	mov	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	3301      	adds	r3, #1
 800d340:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	3301      	adds	r3, #1
 800d346:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f7ff faae 	bl	800c8aa <SWAPBYTE>
 800d34e:	4603      	mov	r3, r0
 800d350:	461a      	mov	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	3301      	adds	r3, #1
 800d35a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	3301      	adds	r3, #1
 800d360:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f7ff faa1 	bl	800c8aa <SWAPBYTE>
 800d368:	4603      	mov	r3, r0
 800d36a:	461a      	mov	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	80da      	strh	r2, [r3, #6]
}
 800d370:	bf00      	nop
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d382:	2180      	movs	r1, #128	; 0x80
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f003 ffd3 	bl	8011330 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d38a:	2100      	movs	r1, #0
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f003 ffcf 	bl	8011330 <USBD_LL_StallEP>
}
 800d392:	bf00      	nop
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b086      	sub	sp, #24
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	60f8      	str	r0, [r7, #12]
 800d3a2:	60b9      	str	r1, [r7, #8]
 800d3a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d036      	beq.n	800d41e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d3b4:	6938      	ldr	r0, [r7, #16]
 800d3b6:	f000 f836 	bl	800d426 <USBD_GetLen>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	3301      	adds	r3, #1
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	005b      	lsls	r3, r3, #1
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d3c8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ca:	68ba      	ldr	r2, [r7, #8]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	7812      	ldrb	r2, [r2, #0]
 800d3d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3d4:	7dfb      	ldrb	r3, [r7, #23]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d3da:	7dfb      	ldrb	r3, [r7, #23]
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	4413      	add	r3, r2
 800d3e0:	2203      	movs	r2, #3
 800d3e2:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3e4:	7dfb      	ldrb	r3, [r7, #23]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d3ea:	e013      	b.n	800d414 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d3ec:	7dfb      	ldrb	r3, [r7, #23]
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	7812      	ldrb	r2, [r2, #0]
 800d3f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	613b      	str	r3, [r7, #16]
    idx++;
 800d3fe:	7dfb      	ldrb	r3, [r7, #23]
 800d400:	3301      	adds	r3, #1
 800d402:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d404:	7dfb      	ldrb	r3, [r7, #23]
 800d406:	68ba      	ldr	r2, [r7, #8]
 800d408:	4413      	add	r3, r2
 800d40a:	2200      	movs	r2, #0
 800d40c:	701a      	strb	r2, [r3, #0]
    idx++;
 800d40e:	7dfb      	ldrb	r3, [r7, #23]
 800d410:	3301      	adds	r3, #1
 800d412:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1e7      	bne.n	800d3ec <USBD_GetString+0x52>
 800d41c:	e000      	b.n	800d420 <USBD_GetString+0x86>
    return;
 800d41e:	bf00      	nop
  }
}
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}

0800d426 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d426:	b480      	push	{r7}
 800d428:	b085      	sub	sp, #20
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d42e:	2300      	movs	r3, #0
 800d430:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d436:	e005      	b.n	800d444 <USBD_GetLen+0x1e>
  {
    len++;
 800d438:	7bfb      	ldrb	r3, [r7, #15]
 800d43a:	3301      	adds	r3, #1
 800d43c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	3301      	adds	r3, #1
 800d442:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1f5      	bne.n	800d438 <USBD_GetLen+0x12>
  }

  return len;
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3714      	adds	r7, #20
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr

0800d45a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b084      	sub	sp, #16
 800d45e:	af00      	add	r7, sp, #0
 800d460:	60f8      	str	r0, [r7, #12]
 800d462:	60b9      	str	r1, [r7, #8]
 800d464:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2202      	movs	r2, #2
 800d46a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	68ba      	ldr	r2, [r7, #8]
 800d47e:	2100      	movs	r1, #0
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	f003 ffde 	bl	8011442 <USBD_LL_Transmit>

  return USBD_OK;
 800d486:	2300      	movs	r3, #0
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f003 ffcd 	bl	8011442 <USBD_LL_Transmit>

  return USBD_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b084      	sub	sp, #16
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	60f8      	str	r0, [r7, #12]
 800d4ba:	60b9      	str	r1, [r7, #8]
 800d4bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2203      	movs	r2, #3
 800d4c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	2100      	movs	r1, #0
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f003 ffd1 	bl	8011484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3710      	adds	r7, #16
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f003 ffc0 	bl	8011484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b082      	sub	sp, #8
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2204      	movs	r2, #4
 800d51a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d51e:	2300      	movs	r3, #0
 800d520:	2200      	movs	r2, #0
 800d522:	2100      	movs	r1, #0
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f003 ff8c 	bl	8011442 <USBD_LL_Transmit>

  return USBD_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2205      	movs	r2, #5
 800d540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d544:	2300      	movs	r3, #0
 800d546:	2200      	movs	r2, #0
 800d548:	2100      	movs	r1, #0
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f003 ff9a 	bl	8011484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
	...

0800d55c <__NVIC_SetPriority>:
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	4603      	mov	r3, r0
 800d564:	6039      	str	r1, [r7, #0]
 800d566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	db0a      	blt.n	800d586 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	b2da      	uxtb	r2, r3
 800d574:	490c      	ldr	r1, [pc, #48]	; (800d5a8 <__NVIC_SetPriority+0x4c>)
 800d576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d57a:	0112      	lsls	r2, r2, #4
 800d57c:	b2d2      	uxtb	r2, r2
 800d57e:	440b      	add	r3, r1
 800d580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d584:	e00a      	b.n	800d59c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	b2da      	uxtb	r2, r3
 800d58a:	4908      	ldr	r1, [pc, #32]	; (800d5ac <__NVIC_SetPriority+0x50>)
 800d58c:	79fb      	ldrb	r3, [r7, #7]
 800d58e:	f003 030f 	and.w	r3, r3, #15
 800d592:	3b04      	subs	r3, #4
 800d594:	0112      	lsls	r2, r2, #4
 800d596:	b2d2      	uxtb	r2, r2
 800d598:	440b      	add	r3, r1
 800d59a:	761a      	strb	r2, [r3, #24]
}
 800d59c:	bf00      	nop
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr
 800d5a8:	e000e100 	.word	0xe000e100
 800d5ac:	e000ed00 	.word	0xe000ed00

0800d5b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d5b4:	4b05      	ldr	r3, [pc, #20]	; (800d5cc <SysTick_Handler+0x1c>)
 800d5b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d5b8:	f002 f902 	bl	800f7c0 <xTaskGetSchedulerState>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d001      	beq.n	800d5c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d5c2:	f003 f829 	bl	8010618 <xPortSysTickHandler>
  }
}
 800d5c6:	bf00      	nop
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	e000e010 	.word	0xe000e010

0800d5d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d5d4:	2100      	movs	r1, #0
 800d5d6:	f06f 0004 	mvn.w	r0, #4
 800d5da:	f7ff ffbf 	bl	800d55c <__NVIC_SetPriority>
#endif
}
 800d5de:	bf00      	nop
 800d5e0:	bd80      	pop	{r7, pc}
	...

0800d5e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5ea:	f3ef 8305 	mrs	r3, IPSR
 800d5ee:	603b      	str	r3, [r7, #0]
  return(result);
 800d5f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d003      	beq.n	800d5fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d5f6:	f06f 0305 	mvn.w	r3, #5
 800d5fa:	607b      	str	r3, [r7, #4]
 800d5fc:	e00c      	b.n	800d618 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d5fe:	4b0a      	ldr	r3, [pc, #40]	; (800d628 <osKernelInitialize+0x44>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d105      	bne.n	800d612 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d606:	4b08      	ldr	r3, [pc, #32]	; (800d628 <osKernelInitialize+0x44>)
 800d608:	2201      	movs	r2, #1
 800d60a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	607b      	str	r3, [r7, #4]
 800d610:	e002      	b.n	800d618 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d616:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d618:	687b      	ldr	r3, [r7, #4]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	370c      	adds	r7, #12
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	200027a8 	.word	0x200027a8

0800d62c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d632:	f3ef 8305 	mrs	r3, IPSR
 800d636:	603b      	str	r3, [r7, #0]
  return(result);
 800d638:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d003      	beq.n	800d646 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d63e:	f06f 0305 	mvn.w	r3, #5
 800d642:	607b      	str	r3, [r7, #4]
 800d644:	e010      	b.n	800d668 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d646:	4b0b      	ldr	r3, [pc, #44]	; (800d674 <osKernelStart+0x48>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d109      	bne.n	800d662 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d64e:	f7ff ffbf 	bl	800d5d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d652:	4b08      	ldr	r3, [pc, #32]	; (800d674 <osKernelStart+0x48>)
 800d654:	2202      	movs	r2, #2
 800d656:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d658:	f001 fad0 	bl	800ebfc <vTaskStartScheduler>
      stat = osOK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	607b      	str	r3, [r7, #4]
 800d660:	e002      	b.n	800d668 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d666:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d668:	687b      	ldr	r3, [r7, #4]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	200027a8 	.word	0x200027a8

0800d678 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d678:	b580      	push	{r7, lr}
 800d67a:	b08e      	sub	sp, #56	; 0x38
 800d67c:	af04      	add	r7, sp, #16
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d684:	2300      	movs	r3, #0
 800d686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d688:	f3ef 8305 	mrs	r3, IPSR
 800d68c:	617b      	str	r3, [r7, #20]
  return(result);
 800d68e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d690:	2b00      	cmp	r3, #0
 800d692:	d17e      	bne.n	800d792 <osThreadNew+0x11a>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d07b      	beq.n	800d792 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d69a:	2380      	movs	r3, #128	; 0x80
 800d69c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d69e:	2318      	movs	r3, #24
 800d6a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d6a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d045      	beq.n	800d73e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d002      	beq.n	800d6c0 <osThreadNew+0x48>
        name = attr->name;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	699b      	ldr	r3, [r3, #24]
 800d6cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d008      	beq.n	800d6e6 <osThreadNew+0x6e>
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	2b38      	cmp	r3, #56	; 0x38
 800d6d8:	d805      	bhi.n	800d6e6 <osThreadNew+0x6e>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	f003 0301 	and.w	r3, r3, #1
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <osThreadNew+0x72>
        return (NULL);
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e054      	b.n	800d794 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	695b      	ldr	r3, [r3, #20]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d003      	beq.n	800d6fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	695b      	ldr	r3, [r3, #20]
 800d6f6:	089b      	lsrs	r3, r3, #2
 800d6f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d00e      	beq.n	800d720 <osThreadNew+0xa8>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	2bbf      	cmp	r3, #191	; 0xbf
 800d708:	d90a      	bls.n	800d720 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d006      	beq.n	800d720 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	695b      	ldr	r3, [r3, #20]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d002      	beq.n	800d720 <osThreadNew+0xa8>
        mem = 1;
 800d71a:	2301      	movs	r3, #1
 800d71c:	61bb      	str	r3, [r7, #24]
 800d71e:	e010      	b.n	800d742 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d10c      	bne.n	800d742 <osThreadNew+0xca>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d108      	bne.n	800d742 <osThreadNew+0xca>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	691b      	ldr	r3, [r3, #16]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d104      	bne.n	800d742 <osThreadNew+0xca>
          mem = 0;
 800d738:	2300      	movs	r3, #0
 800d73a:	61bb      	str	r3, [r7, #24]
 800d73c:	e001      	b.n	800d742 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d73e:	2300      	movs	r3, #0
 800d740:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	2b01      	cmp	r3, #1
 800d746:	d110      	bne.n	800d76a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d750:	9202      	str	r2, [sp, #8]
 800d752:	9301      	str	r3, [sp, #4]
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	6a3a      	ldr	r2, [r7, #32]
 800d75c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f000 fff6 	bl	800e750 <xTaskCreateStatic>
 800d764:	4603      	mov	r3, r0
 800d766:	613b      	str	r3, [r7, #16]
 800d768:	e013      	b.n	800d792 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d110      	bne.n	800d792 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d770:	6a3b      	ldr	r3, [r7, #32]
 800d772:	b29a      	uxth	r2, r3
 800d774:	f107 0310 	add.w	r3, r7, #16
 800d778:	9301      	str	r3, [sp, #4]
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f001 f841 	bl	800e80a <xTaskCreate>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d001      	beq.n	800d792 <osThreadNew+0x11a>
            hTask = NULL;
 800d78e:	2300      	movs	r3, #0
 800d790:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d792:	693b      	ldr	r3, [r7, #16]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3728      	adds	r7, #40	; 0x28
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7a4:	f3ef 8305 	mrs	r3, IPSR
 800d7a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d003      	beq.n	800d7b8 <osDelay+0x1c>
    stat = osErrorISR;
 800d7b0:	f06f 0305 	mvn.w	r3, #5
 800d7b4:	60fb      	str	r3, [r7, #12]
 800d7b6:	e007      	b.n	800d7c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d002      	beq.n	800d7c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f001 f980 	bl	800eac8 <vTaskDelay>
    }
  }

  return (stat);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b08a      	sub	sp, #40	; 0x28
 800d7d6:	af02      	add	r7, sp, #8
 800d7d8:	60f8      	str	r0, [r7, #12]
 800d7da:	60b9      	str	r1, [r7, #8]
 800d7dc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7e2:	f3ef 8305 	mrs	r3, IPSR
 800d7e6:	613b      	str	r3, [r7, #16]
  return(result);
 800d7e8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d15f      	bne.n	800d8ae <osMessageQueueNew+0xdc>
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d05c      	beq.n	800d8ae <osMessageQueueNew+0xdc>
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d059      	beq.n	800d8ae <osMessageQueueNew+0xdc>
    mem = -1;
 800d7fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d029      	beq.n	800d85a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d012      	beq.n	800d834 <osMessageQueueNew+0x62>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	2b4f      	cmp	r3, #79	; 0x4f
 800d814:	d90e      	bls.n	800d834 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00a      	beq.n	800d834 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	695a      	ldr	r2, [r3, #20]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	68b9      	ldr	r1, [r7, #8]
 800d826:	fb01 f303 	mul.w	r3, r1, r3
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d302      	bcc.n	800d834 <osMessageQueueNew+0x62>
        mem = 1;
 800d82e:	2301      	movs	r3, #1
 800d830:	61bb      	str	r3, [r7, #24]
 800d832:	e014      	b.n	800d85e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d110      	bne.n	800d85e <osMessageQueueNew+0x8c>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d10c      	bne.n	800d85e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d108      	bne.n	800d85e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	695b      	ldr	r3, [r3, #20]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d104      	bne.n	800d85e <osMessageQueueNew+0x8c>
          mem = 0;
 800d854:	2300      	movs	r3, #0
 800d856:	61bb      	str	r3, [r7, #24]
 800d858:	e001      	b.n	800d85e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d10b      	bne.n	800d87c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	691a      	ldr	r2, [r3, #16]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	2100      	movs	r1, #0
 800d86e:	9100      	str	r1, [sp, #0]
 800d870:	68b9      	ldr	r1, [r7, #8]
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f000 fa2e 	bl	800dcd4 <xQueueGenericCreateStatic>
 800d878:	61f8      	str	r0, [r7, #28]
 800d87a:	e008      	b.n	800d88e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d105      	bne.n	800d88e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d882:	2200      	movs	r2, #0
 800d884:	68b9      	ldr	r1, [r7, #8]
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f000 fa9c 	bl	800ddc4 <xQueueGenericCreate>
 800d88c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00c      	beq.n	800d8ae <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d003      	beq.n	800d8a2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	617b      	str	r3, [r7, #20]
 800d8a0:	e001      	b.n	800d8a6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d8a6:	6979      	ldr	r1, [r7, #20]
 800d8a8:	69f8      	ldr	r0, [r7, #28]
 800d8aa:	f000 fef3 	bl	800e694 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d8ae:	69fb      	ldr	r3, [r7, #28]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3720      	adds	r7, #32
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b088      	sub	sp, #32
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	603b      	str	r3, [r7, #0]
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8d0:	f3ef 8305 	mrs	r3, IPSR
 800d8d4:	617b      	str	r3, [r7, #20]
  return(result);
 800d8d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d028      	beq.n	800d92e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d8dc:	69bb      	ldr	r3, [r7, #24]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d005      	beq.n	800d8ee <osMessageQueuePut+0x36>
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d002      	beq.n	800d8ee <osMessageQueuePut+0x36>
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d003      	beq.n	800d8f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d8ee:	f06f 0303 	mvn.w	r3, #3
 800d8f2:	61fb      	str	r3, [r7, #28]
 800d8f4:	e038      	b.n	800d968 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d8fa:	f107 0210 	add.w	r2, r7, #16
 800d8fe:	2300      	movs	r3, #0
 800d900:	68b9      	ldr	r1, [r7, #8]
 800d902:	69b8      	ldr	r0, [r7, #24]
 800d904:	f000 fbba 	bl	800e07c <xQueueGenericSendFromISR>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d003      	beq.n	800d916 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d90e:	f06f 0302 	mvn.w	r3, #2
 800d912:	61fb      	str	r3, [r7, #28]
 800d914:	e028      	b.n	800d968 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d025      	beq.n	800d968 <osMessageQueuePut+0xb0>
 800d91c:	4b15      	ldr	r3, [pc, #84]	; (800d974 <osMessageQueuePut+0xbc>)
 800d91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	f3bf 8f4f 	dsb	sy
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	e01c      	b.n	800d968 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d002      	beq.n	800d93a <osMessageQueuePut+0x82>
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d103      	bne.n	800d942 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d93a:	f06f 0303 	mvn.w	r3, #3
 800d93e:	61fb      	str	r3, [r7, #28]
 800d940:	e012      	b.n	800d968 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d942:	2300      	movs	r3, #0
 800d944:	683a      	ldr	r2, [r7, #0]
 800d946:	68b9      	ldr	r1, [r7, #8]
 800d948:	69b8      	ldr	r0, [r7, #24]
 800d94a:	f000 fa99 	bl	800de80 <xQueueGenericSend>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b01      	cmp	r3, #1
 800d952:	d009      	beq.n	800d968 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d003      	beq.n	800d962 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d95a:	f06f 0301 	mvn.w	r3, #1
 800d95e:	61fb      	str	r3, [r7, #28]
 800d960:	e002      	b.n	800d968 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d962:	f06f 0302 	mvn.w	r3, #2
 800d966:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d968:	69fb      	ldr	r3, [r7, #28]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3720      	adds	r7, #32
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	e000ed04 	.word	0xe000ed04

0800d978 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d978:	b580      	push	{r7, lr}
 800d97a:	b088      	sub	sp, #32
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
 800d984:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d98e:	f3ef 8305 	mrs	r3, IPSR
 800d992:	617b      	str	r3, [r7, #20]
  return(result);
 800d994:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d996:	2b00      	cmp	r3, #0
 800d998:	d028      	beq.n	800d9ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d005      	beq.n	800d9ac <osMessageQueueGet+0x34>
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d002      	beq.n	800d9ac <osMessageQueueGet+0x34>
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d003      	beq.n	800d9b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d9ac:	f06f 0303 	mvn.w	r3, #3
 800d9b0:	61fb      	str	r3, [r7, #28]
 800d9b2:	e037      	b.n	800da24 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d9b8:	f107 0310 	add.w	r3, r7, #16
 800d9bc:	461a      	mov	r2, r3
 800d9be:	68b9      	ldr	r1, [r7, #8]
 800d9c0:	69b8      	ldr	r0, [r7, #24]
 800d9c2:	f000 fcd7 	bl	800e374 <xQueueReceiveFromISR>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d003      	beq.n	800d9d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d9cc:	f06f 0302 	mvn.w	r3, #2
 800d9d0:	61fb      	str	r3, [r7, #28]
 800d9d2:	e027      	b.n	800da24 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d024      	beq.n	800da24 <osMessageQueueGet+0xac>
 800d9da:	4b15      	ldr	r3, [pc, #84]	; (800da30 <osMessageQueueGet+0xb8>)
 800d9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9e0:	601a      	str	r2, [r3, #0]
 800d9e2:	f3bf 8f4f 	dsb	sy
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	e01b      	b.n	800da24 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d002      	beq.n	800d9f8 <osMessageQueueGet+0x80>
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d103      	bne.n	800da00 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d9f8:	f06f 0303 	mvn.w	r3, #3
 800d9fc:	61fb      	str	r3, [r7, #28]
 800d9fe:	e011      	b.n	800da24 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800da00:	683a      	ldr	r2, [r7, #0]
 800da02:	68b9      	ldr	r1, [r7, #8]
 800da04:	69b8      	ldr	r0, [r7, #24]
 800da06:	f000 fbd5 	bl	800e1b4 <xQueueReceive>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d009      	beq.n	800da24 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d003      	beq.n	800da1e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800da16:	f06f 0301 	mvn.w	r3, #1
 800da1a:	61fb      	str	r3, [r7, #28]
 800da1c:	e002      	b.n	800da24 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800da1e:	f06f 0302 	mvn.w	r3, #2
 800da22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800da24:	69fb      	ldr	r3, [r7, #28]
}
 800da26:	4618      	mov	r0, r3
 800da28:	3720      	adds	r7, #32
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	e000ed04 	.word	0xe000ed04

0800da34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800da34:	b480      	push	{r7}
 800da36:	b085      	sub	sp, #20
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	4a07      	ldr	r2, [pc, #28]	; (800da60 <vApplicationGetIdleTaskMemory+0x2c>)
 800da44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	4a06      	ldr	r2, [pc, #24]	; (800da64 <vApplicationGetIdleTaskMemory+0x30>)
 800da4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2280      	movs	r2, #128	; 0x80
 800da50:	601a      	str	r2, [r3, #0]
}
 800da52:	bf00      	nop
 800da54:	3714      	adds	r7, #20
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	200027ac 	.word	0x200027ac
 800da64:	2000286c 	.word	0x2000286c

0800da68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	4a07      	ldr	r2, [pc, #28]	; (800da94 <vApplicationGetTimerTaskMemory+0x2c>)
 800da78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	4a06      	ldr	r2, [pc, #24]	; (800da98 <vApplicationGetTimerTaskMemory+0x30>)
 800da7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da86:	601a      	str	r2, [r3, #0]
}
 800da88:	bf00      	nop
 800da8a:	3714      	adds	r7, #20
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr
 800da94:	20002a6c 	.word	0x20002a6c
 800da98:	20002b2c 	.word	0x20002b2c

0800da9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f103 0208 	add.w	r2, r3, #8
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dab4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f103 0208 	add.w	r2, r3, #8
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f103 0208 	add.w	r2, r3, #8
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800daea:	bf00      	nop
 800daec:	370c      	adds	r7, #12
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800daf6:	b480      	push	{r7}
 800daf8:	b085      	sub	sp, #20
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
 800dafe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	689a      	ldr	r2, [r3, #8]
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	683a      	ldr	r2, [r7, #0]
 800db20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	1c5a      	adds	r2, r3, #1
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	601a      	str	r2, [r3, #0]
}
 800db32:	bf00      	nop
 800db34:	3714      	adds	r7, #20
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr

0800db3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800db3e:	b480      	push	{r7}
 800db40:	b085      	sub	sp, #20
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
 800db46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db54:	d103      	bne.n	800db5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	691b      	ldr	r3, [r3, #16]
 800db5a:	60fb      	str	r3, [r7, #12]
 800db5c:	e00c      	b.n	800db78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	3308      	adds	r3, #8
 800db62:	60fb      	str	r3, [r7, #12]
 800db64:	e002      	b.n	800db6c <vListInsert+0x2e>
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	60fb      	str	r3, [r7, #12]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	68ba      	ldr	r2, [r7, #8]
 800db74:	429a      	cmp	r2, r3
 800db76:	d2f6      	bcs.n	800db66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	683a      	ldr	r2, [r7, #0]
 800db86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	68fa      	ldr	r2, [r7, #12]
 800db8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	683a      	ldr	r2, [r7, #0]
 800db92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	1c5a      	adds	r2, r3, #1
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	601a      	str	r2, [r3, #0]
}
 800dba4:	bf00      	nop
 800dba6:	3714      	adds	r7, #20
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b085      	sub	sp, #20
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	6892      	ldr	r2, [r2, #8]
 800dbc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	6852      	ldr	r2, [r2, #4]
 800dbd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d103      	bne.n	800dbe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	689a      	ldr	r2, [r3, #8]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	1e5a      	subs	r2, r3, #1
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d10a      	bne.n	800dc2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1c:	f383 8811 	msr	BASEPRI, r3
 800dc20:	f3bf 8f6f 	isb	sy
 800dc24:	f3bf 8f4f 	dsb	sy
 800dc28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dc2a:	bf00      	nop
 800dc2c:	e7fe      	b.n	800dc2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dc2e:	f002 fc61 	bl	80104f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc3a:	68f9      	ldr	r1, [r7, #12]
 800dc3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dc3e:	fb01 f303 	mul.w	r3, r1, r3
 800dc42:	441a      	add	r2, r3
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc5e:	3b01      	subs	r3, #1
 800dc60:	68f9      	ldr	r1, [r7, #12]
 800dc62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dc64:	fb01 f303 	mul.w	r3, r1, r3
 800dc68:	441a      	add	r2, r3
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	22ff      	movs	r2, #255	; 0xff
 800dc72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	22ff      	movs	r2, #255	; 0xff
 800dc7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d114      	bne.n	800dcae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	691b      	ldr	r3, [r3, #16]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d01a      	beq.n	800dcc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	3310      	adds	r3, #16
 800dc90:	4618      	mov	r0, r3
 800dc92:	f001 faff 	bl	800f294 <xTaskRemoveFromEventList>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d012      	beq.n	800dcc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dc9c:	4b0c      	ldr	r3, [pc, #48]	; (800dcd0 <xQueueGenericReset+0xcc>)
 800dc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dca2:	601a      	str	r2, [r3, #0]
 800dca4:	f3bf 8f4f 	dsb	sy
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	e009      	b.n	800dcc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	3310      	adds	r3, #16
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7ff fef2 	bl	800da9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	3324      	adds	r3, #36	; 0x24
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7ff feed 	bl	800da9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dcc2:	f002 fc47 	bl	8010554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dcc6:	2301      	movs	r3, #1
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	e000ed04 	.word	0xe000ed04

0800dcd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b08e      	sub	sp, #56	; 0x38
 800dcd8:	af02      	add	r7, sp, #8
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
 800dce0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d10a      	bne.n	800dcfe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800dce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dcfa:	bf00      	nop
 800dcfc:	e7fe      	b.n	800dcfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10a      	bne.n	800dd1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dd16:	bf00      	nop
 800dd18:	e7fe      	b.n	800dd18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d002      	beq.n	800dd26 <xQueueGenericCreateStatic+0x52>
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d001      	beq.n	800dd2a <xQueueGenericCreateStatic+0x56>
 800dd26:	2301      	movs	r3, #1
 800dd28:	e000      	b.n	800dd2c <xQueueGenericCreateStatic+0x58>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10a      	bne.n	800dd46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	623b      	str	r3, [r7, #32]
}
 800dd42:	bf00      	nop
 800dd44:	e7fe      	b.n	800dd44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d102      	bne.n	800dd52 <xQueueGenericCreateStatic+0x7e>
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d101      	bne.n	800dd56 <xQueueGenericCreateStatic+0x82>
 800dd52:	2301      	movs	r3, #1
 800dd54:	e000      	b.n	800dd58 <xQueueGenericCreateStatic+0x84>
 800dd56:	2300      	movs	r3, #0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d10a      	bne.n	800dd72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800dd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd60:	f383 8811 	msr	BASEPRI, r3
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	61fb      	str	r3, [r7, #28]
}
 800dd6e:	bf00      	nop
 800dd70:	e7fe      	b.n	800dd70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dd72:	2350      	movs	r3, #80	; 0x50
 800dd74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b50      	cmp	r3, #80	; 0x50
 800dd7a:	d00a      	beq.n	800dd92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd80:	f383 8811 	msr	BASEPRI, r3
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	f3bf 8f4f 	dsb	sy
 800dd8c:	61bb      	str	r3, [r7, #24]
}
 800dd8e:	bf00      	nop
 800dd90:	e7fe      	b.n	800dd90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dd92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00d      	beq.n	800ddba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda0:	2201      	movs	r2, #1
 800dda2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dda6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ddaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	68b9      	ldr	r1, [r7, #8]
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f000 f83f 	bl	800de38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ddba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3730      	adds	r7, #48	; 0x30
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b08a      	sub	sp, #40	; 0x28
 800ddc8:	af02      	add	r7, sp, #8
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	4613      	mov	r3, r2
 800ddd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d10a      	bne.n	800ddee <xQueueGenericCreate+0x2a>
	__asm volatile
 800ddd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dddc:	f383 8811 	msr	BASEPRI, r3
 800dde0:	f3bf 8f6f 	isb	sy
 800dde4:	f3bf 8f4f 	dsb	sy
 800dde8:	613b      	str	r3, [r7, #16]
}
 800ddea:	bf00      	nop
 800ddec:	e7fe      	b.n	800ddec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	68ba      	ldr	r2, [r7, #8]
 800ddf2:	fb02 f303 	mul.w	r3, r2, r3
 800ddf6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	3350      	adds	r3, #80	; 0x50
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f002 fc9b 	bl	8010738 <pvPortMalloc>
 800de02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d011      	beq.n	800de2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	3350      	adds	r3, #80	; 0x50
 800de12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	2200      	movs	r2, #0
 800de18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800de1c:	79fa      	ldrb	r2, [r7, #7]
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	4613      	mov	r3, r2
 800de24:	697a      	ldr	r2, [r7, #20]
 800de26:	68b9      	ldr	r1, [r7, #8]
 800de28:	68f8      	ldr	r0, [r7, #12]
 800de2a:	f000 f805 	bl	800de38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800de2e:	69bb      	ldr	r3, [r7, #24]
	}
 800de30:	4618      	mov	r0, r3
 800de32:	3720      	adds	r7, #32
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
 800de44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d103      	bne.n	800de54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800de4c:	69bb      	ldr	r3, [r7, #24]
 800de4e:	69ba      	ldr	r2, [r7, #24]
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	e002      	b.n	800de5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800de60:	69bb      	ldr	r3, [r7, #24]
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800de66:	2101      	movs	r1, #1
 800de68:	69b8      	ldr	r0, [r7, #24]
 800de6a:	f7ff fecb 	bl	800dc04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	78fa      	ldrb	r2, [r7, #3]
 800de72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800de76:	bf00      	nop
 800de78:	3710      	adds	r7, #16
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
	...

0800de80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b08e      	sub	sp, #56	; 0x38
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
 800de8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800de8e:	2300      	movs	r3, #0
 800de90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800de96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d10a      	bne.n	800deb2 <xQueueGenericSend+0x32>
	__asm volatile
 800de9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea0:	f383 8811 	msr	BASEPRI, r3
 800dea4:	f3bf 8f6f 	isb	sy
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800deae:	bf00      	nop
 800deb0:	e7fe      	b.n	800deb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d103      	bne.n	800dec0 <xQueueGenericSend+0x40>
 800deb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800debc:	2b00      	cmp	r3, #0
 800debe:	d101      	bne.n	800dec4 <xQueueGenericSend+0x44>
 800dec0:	2301      	movs	r3, #1
 800dec2:	e000      	b.n	800dec6 <xQueueGenericSend+0x46>
 800dec4:	2300      	movs	r3, #0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d10a      	bne.n	800dee0 <xQueueGenericSend+0x60>
	__asm volatile
 800deca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dece:	f383 8811 	msr	BASEPRI, r3
 800ded2:	f3bf 8f6f 	isb	sy
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dedc:	bf00      	nop
 800dede:	e7fe      	b.n	800dede <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	d103      	bne.n	800deee <xQueueGenericSend+0x6e>
 800dee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deea:	2b01      	cmp	r3, #1
 800deec:	d101      	bne.n	800def2 <xQueueGenericSend+0x72>
 800deee:	2301      	movs	r3, #1
 800def0:	e000      	b.n	800def4 <xQueueGenericSend+0x74>
 800def2:	2300      	movs	r3, #0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10a      	bne.n	800df0e <xQueueGenericSend+0x8e>
	__asm volatile
 800def8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defc:	f383 8811 	msr	BASEPRI, r3
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	623b      	str	r3, [r7, #32]
}
 800df0a:	bf00      	nop
 800df0c:	e7fe      	b.n	800df0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df0e:	f001 fc57 	bl	800f7c0 <xTaskGetSchedulerState>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d102      	bne.n	800df1e <xQueueGenericSend+0x9e>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d101      	bne.n	800df22 <xQueueGenericSend+0xa2>
 800df1e:	2301      	movs	r3, #1
 800df20:	e000      	b.n	800df24 <xQueueGenericSend+0xa4>
 800df22:	2300      	movs	r3, #0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10a      	bne.n	800df3e <xQueueGenericSend+0xbe>
	__asm volatile
 800df28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2c:	f383 8811 	msr	BASEPRI, r3
 800df30:	f3bf 8f6f 	isb	sy
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	61fb      	str	r3, [r7, #28]
}
 800df3a:	bf00      	nop
 800df3c:	e7fe      	b.n	800df3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df3e:	f002 fad9 	bl	80104f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d302      	bcc.n	800df54 <xQueueGenericSend+0xd4>
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	2b02      	cmp	r3, #2
 800df52:	d129      	bne.n	800dfa8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df54:	683a      	ldr	r2, [r7, #0]
 800df56:	68b9      	ldr	r1, [r7, #8]
 800df58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df5a:	f000 fa8b 	bl	800e474 <prvCopyDataToQueue>
 800df5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df64:	2b00      	cmp	r3, #0
 800df66:	d010      	beq.n	800df8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6a:	3324      	adds	r3, #36	; 0x24
 800df6c:	4618      	mov	r0, r3
 800df6e:	f001 f991 	bl	800f294 <xTaskRemoveFromEventList>
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d013      	beq.n	800dfa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800df78:	4b3f      	ldr	r3, [pc, #252]	; (800e078 <xQueueGenericSend+0x1f8>)
 800df7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df7e:	601a      	str	r2, [r3, #0]
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	e00a      	b.n	800dfa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800df8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d007      	beq.n	800dfa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800df90:	4b39      	ldr	r3, [pc, #228]	; (800e078 <xQueueGenericSend+0x1f8>)
 800df92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df96:	601a      	str	r2, [r3, #0]
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dfa0:	f002 fad8 	bl	8010554 <vPortExitCritical>
				return pdPASS;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e063      	b.n	800e070 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d103      	bne.n	800dfb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dfae:	f002 fad1 	bl	8010554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	e05c      	b.n	800e070 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d106      	bne.n	800dfca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dfbc:	f107 0314 	add.w	r3, r7, #20
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f001 f9cb 	bl	800f35c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dfca:	f002 fac3 	bl	8010554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dfce:	f000 fe89 	bl	800ece4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfd2:	f002 fa8f 	bl	80104f4 <vPortEnterCritical>
 800dfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfdc:	b25b      	sxtb	r3, r3
 800dfde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfe2:	d103      	bne.n	800dfec <xQueueGenericSend+0x16c>
 800dfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dff2:	b25b      	sxtb	r3, r3
 800dff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dff8:	d103      	bne.n	800e002 <xQueueGenericSend+0x182>
 800dffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e002:	f002 faa7 	bl	8010554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e006:	1d3a      	adds	r2, r7, #4
 800e008:	f107 0314 	add.w	r3, r7, #20
 800e00c:	4611      	mov	r1, r2
 800e00e:	4618      	mov	r0, r3
 800e010:	f001 f9ba 	bl	800f388 <xTaskCheckForTimeOut>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d124      	bne.n	800e064 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e01a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e01c:	f000 fb22 	bl	800e664 <prvIsQueueFull>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d018      	beq.n	800e058 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e028:	3310      	adds	r3, #16
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	4611      	mov	r1, r2
 800e02e:	4618      	mov	r0, r3
 800e030:	f001 f8e0 	bl	800f1f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e036:	f000 faad 	bl	800e594 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e03a:	f000 fe61 	bl	800ed00 <xTaskResumeAll>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b00      	cmp	r3, #0
 800e042:	f47f af7c 	bne.w	800df3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e046:	4b0c      	ldr	r3, [pc, #48]	; (800e078 <xQueueGenericSend+0x1f8>)
 800e048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e04c:	601a      	str	r2, [r3, #0]
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	e772      	b.n	800df3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e05a:	f000 fa9b 	bl	800e594 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e05e:	f000 fe4f 	bl	800ed00 <xTaskResumeAll>
 800e062:	e76c      	b.n	800df3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e066:	f000 fa95 	bl	800e594 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e06a:	f000 fe49 	bl	800ed00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e06e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e070:	4618      	mov	r0, r3
 800e072:	3738      	adds	r7, #56	; 0x38
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	e000ed04 	.word	0xe000ed04

0800e07c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b090      	sub	sp, #64	; 0x40
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	60b9      	str	r1, [r7, #8]
 800e086:	607a      	str	r2, [r7, #4]
 800e088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10a      	bne.n	800e0aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e098:	f383 8811 	msr	BASEPRI, r3
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	f3bf 8f4f 	dsb	sy
 800e0a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e0a6:	bf00      	nop
 800e0a8:	e7fe      	b.n	800e0a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d103      	bne.n	800e0b8 <xQueueGenericSendFromISR+0x3c>
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d101      	bne.n	800e0bc <xQueueGenericSendFromISR+0x40>
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	e000      	b.n	800e0be <xQueueGenericSendFromISR+0x42>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d10a      	bne.n	800e0d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c6:	f383 8811 	msr	BASEPRI, r3
 800e0ca:	f3bf 8f6f 	isb	sy
 800e0ce:	f3bf 8f4f 	dsb	sy
 800e0d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e0d4:	bf00      	nop
 800e0d6:	e7fe      	b.n	800e0d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	2b02      	cmp	r3, #2
 800e0dc:	d103      	bne.n	800e0e6 <xQueueGenericSendFromISR+0x6a>
 800e0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d101      	bne.n	800e0ea <xQueueGenericSendFromISR+0x6e>
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e000      	b.n	800e0ec <xQueueGenericSendFromISR+0x70>
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d10a      	bne.n	800e106 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f4:	f383 8811 	msr	BASEPRI, r3
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	623b      	str	r3, [r7, #32]
}
 800e102:	bf00      	nop
 800e104:	e7fe      	b.n	800e104 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e106:	f002 fad7 	bl	80106b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e10a:	f3ef 8211 	mrs	r2, BASEPRI
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	61fa      	str	r2, [r7, #28]
 800e120:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e122:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e124:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e12e:	429a      	cmp	r2, r3
 800e130:	d302      	bcc.n	800e138 <xQueueGenericSendFromISR+0xbc>
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	2b02      	cmp	r3, #2
 800e136:	d12f      	bne.n	800e198 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e146:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	68b9      	ldr	r1, [r7, #8]
 800e14c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e14e:	f000 f991 	bl	800e474 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e152:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e15a:	d112      	bne.n	800e182 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e160:	2b00      	cmp	r3, #0
 800e162:	d016      	beq.n	800e192 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e166:	3324      	adds	r3, #36	; 0x24
 800e168:	4618      	mov	r0, r3
 800e16a:	f001 f893 	bl	800f294 <xTaskRemoveFromEventList>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d00e      	beq.n	800e192 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00b      	beq.n	800e192 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2201      	movs	r2, #1
 800e17e:	601a      	str	r2, [r3, #0]
 800e180:	e007      	b.n	800e192 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e186:	3301      	adds	r3, #1
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	b25a      	sxtb	r2, r3
 800e18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e192:	2301      	movs	r3, #1
 800e194:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e196:	e001      	b.n	800e19c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e198:	2300      	movs	r3, #0
 800e19a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e19e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e1a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3740      	adds	r7, #64	; 0x40
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
	...

0800e1b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08c      	sub	sp, #48	; 0x30
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10a      	bne.n	800e1e4 <xQueueReceive+0x30>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	623b      	str	r3, [r7, #32]
}
 800e1e0:	bf00      	nop
 800e1e2:	e7fe      	b.n	800e1e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d103      	bne.n	800e1f2 <xQueueReceive+0x3e>
 800e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d101      	bne.n	800e1f6 <xQueueReceive+0x42>
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e000      	b.n	800e1f8 <xQueueReceive+0x44>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d10a      	bne.n	800e212 <xQueueReceive+0x5e>
	__asm volatile
 800e1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e200:	f383 8811 	msr	BASEPRI, r3
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	61fb      	str	r3, [r7, #28]
}
 800e20e:	bf00      	nop
 800e210:	e7fe      	b.n	800e210 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e212:	f001 fad5 	bl	800f7c0 <xTaskGetSchedulerState>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d102      	bne.n	800e222 <xQueueReceive+0x6e>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d101      	bne.n	800e226 <xQueueReceive+0x72>
 800e222:	2301      	movs	r3, #1
 800e224:	e000      	b.n	800e228 <xQueueReceive+0x74>
 800e226:	2300      	movs	r3, #0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10a      	bne.n	800e242 <xQueueReceive+0x8e>
	__asm volatile
 800e22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e230:	f383 8811 	msr	BASEPRI, r3
 800e234:	f3bf 8f6f 	isb	sy
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	61bb      	str	r3, [r7, #24]
}
 800e23e:	bf00      	nop
 800e240:	e7fe      	b.n	800e240 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e242:	f002 f957 	bl	80104f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e24a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d01f      	beq.n	800e292 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e252:	68b9      	ldr	r1, [r7, #8]
 800e254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e256:	f000 f977 	bl	800e548 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	1e5a      	subs	r2, r3, #1
 800e25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e260:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e264:	691b      	ldr	r3, [r3, #16]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00f      	beq.n	800e28a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26c:	3310      	adds	r3, #16
 800e26e:	4618      	mov	r0, r3
 800e270:	f001 f810 	bl	800f294 <xTaskRemoveFromEventList>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d007      	beq.n	800e28a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e27a:	4b3d      	ldr	r3, [pc, #244]	; (800e370 <xQueueReceive+0x1bc>)
 800e27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e28a:	f002 f963 	bl	8010554 <vPortExitCritical>
				return pdPASS;
 800e28e:	2301      	movs	r3, #1
 800e290:	e069      	b.n	800e366 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d103      	bne.n	800e2a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e298:	f002 f95c 	bl	8010554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e29c:	2300      	movs	r3, #0
 800e29e:	e062      	b.n	800e366 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d106      	bne.n	800e2b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2a6:	f107 0310 	add.w	r3, r7, #16
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f001 f856 	bl	800f35c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2b4:	f002 f94e 	bl	8010554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2b8:	f000 fd14 	bl	800ece4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2bc:	f002 f91a 	bl	80104f4 <vPortEnterCritical>
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2c6:	b25b      	sxtb	r3, r3
 800e2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2cc:	d103      	bne.n	800e2d6 <xQueueReceive+0x122>
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2dc:	b25b      	sxtb	r3, r3
 800e2de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2e2:	d103      	bne.n	800e2ec <xQueueReceive+0x138>
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2ec:	f002 f932 	bl	8010554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2f0:	1d3a      	adds	r2, r7, #4
 800e2f2:	f107 0310 	add.w	r3, r7, #16
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f001 f845 	bl	800f388 <xTaskCheckForTimeOut>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d123      	bne.n	800e34c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e306:	f000 f997 	bl	800e638 <prvIsQueueEmpty>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d017      	beq.n	800e340 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e312:	3324      	adds	r3, #36	; 0x24
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	4611      	mov	r1, r2
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 ff6b 	bl	800f1f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e320:	f000 f938 	bl	800e594 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e324:	f000 fcec 	bl	800ed00 <xTaskResumeAll>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d189      	bne.n	800e242 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e32e:	4b10      	ldr	r3, [pc, #64]	; (800e370 <xQueueReceive+0x1bc>)
 800e330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e334:	601a      	str	r2, [r3, #0]
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	e780      	b.n	800e242 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e342:	f000 f927 	bl	800e594 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e346:	f000 fcdb 	bl	800ed00 <xTaskResumeAll>
 800e34a:	e77a      	b.n	800e242 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e34c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e34e:	f000 f921 	bl	800e594 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e352:	f000 fcd5 	bl	800ed00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e358:	f000 f96e 	bl	800e638 <prvIsQueueEmpty>
 800e35c:	4603      	mov	r3, r0
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f43f af6f 	beq.w	800e242 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e364:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e366:	4618      	mov	r0, r3
 800e368:	3730      	adds	r7, #48	; 0x30
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	e000ed04 	.word	0xe000ed04

0800e374 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b08e      	sub	sp, #56	; 0x38
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e386:	2b00      	cmp	r3, #0
 800e388:	d10a      	bne.n	800e3a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38e:	f383 8811 	msr	BASEPRI, r3
 800e392:	f3bf 8f6f 	isb	sy
 800e396:	f3bf 8f4f 	dsb	sy
 800e39a:	623b      	str	r3, [r7, #32]
}
 800e39c:	bf00      	nop
 800e39e:	e7fe      	b.n	800e39e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d103      	bne.n	800e3ae <xQueueReceiveFromISR+0x3a>
 800e3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d101      	bne.n	800e3b2 <xQueueReceiveFromISR+0x3e>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e000      	b.n	800e3b4 <xQueueReceiveFromISR+0x40>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10a      	bne.n	800e3ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3bc:	f383 8811 	msr	BASEPRI, r3
 800e3c0:	f3bf 8f6f 	isb	sy
 800e3c4:	f3bf 8f4f 	dsb	sy
 800e3c8:	61fb      	str	r3, [r7, #28]
}
 800e3ca:	bf00      	nop
 800e3cc:	e7fe      	b.n	800e3cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3ce:	f002 f973 	bl	80106b8 <vPortValidateInterruptPriority>
	__asm volatile
 800e3d2:	f3ef 8211 	mrs	r2, BASEPRI
 800e3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3da:	f383 8811 	msr	BASEPRI, r3
 800e3de:	f3bf 8f6f 	isb	sy
 800e3e2:	f3bf 8f4f 	dsb	sy
 800e3e6:	61ba      	str	r2, [r7, #24]
 800e3e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e3ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d02f      	beq.n	800e45a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e404:	68b9      	ldr	r1, [r7, #8]
 800e406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e408:	f000 f89e 	bl	800e548 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40e:	1e5a      	subs	r2, r3, #1
 800e410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e412:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e414:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e41c:	d112      	bne.n	800e444 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d016      	beq.n	800e454 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e428:	3310      	adds	r3, #16
 800e42a:	4618      	mov	r0, r3
 800e42c:	f000 ff32 	bl	800f294 <xTaskRemoveFromEventList>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00e      	beq.n	800e454 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00b      	beq.n	800e454 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2201      	movs	r2, #1
 800e440:	601a      	str	r2, [r3, #0]
 800e442:	e007      	b.n	800e454 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e448:	3301      	adds	r3, #1
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	b25a      	sxtb	r2, r3
 800e44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e454:	2301      	movs	r3, #1
 800e456:	637b      	str	r3, [r7, #52]	; 0x34
 800e458:	e001      	b.n	800e45e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e45a:	2300      	movs	r3, #0
 800e45c:	637b      	str	r3, [r7, #52]	; 0x34
 800e45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e460:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	f383 8811 	msr	BASEPRI, r3
}
 800e468:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3738      	adds	r7, #56	; 0x38
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e480:	2300      	movs	r3, #0
 800e482:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e488:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d10d      	bne.n	800e4ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d14d      	bne.n	800e536 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f001 f9ac 	bl	800f7fc <xTaskPriorityDisinherit>
 800e4a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	609a      	str	r2, [r3, #8]
 800e4ac:	e043      	b.n	800e536 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d119      	bne.n	800e4e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	6858      	ldr	r0, [r3, #4]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4bc:	461a      	mov	r2, r3
 800e4be:	68b9      	ldr	r1, [r7, #8]
 800e4c0:	f003 f995 	bl	80117ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	685a      	ldr	r2, [r3, #4]
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4cc:	441a      	add	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	685a      	ldr	r2, [r3, #4]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	689b      	ldr	r3, [r3, #8]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d32b      	bcc.n	800e536 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	605a      	str	r2, [r3, #4]
 800e4e6:	e026      	b.n	800e536 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	68d8      	ldr	r0, [r3, #12]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	68b9      	ldr	r1, [r7, #8]
 800e4f4:	f003 f97b 	bl	80117ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	68da      	ldr	r2, [r3, #12]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e500:	425b      	negs	r3, r3
 800e502:	441a      	add	r2, r3
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	68da      	ldr	r2, [r3, #12]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	429a      	cmp	r2, r3
 800e512:	d207      	bcs.n	800e524 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	689a      	ldr	r2, [r3, #8]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51c:	425b      	negs	r3, r3
 800e51e:	441a      	add	r2, r3
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2b02      	cmp	r3, #2
 800e528:	d105      	bne.n	800e536 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d002      	beq.n	800e536 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	3b01      	subs	r3, #1
 800e534:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	1c5a      	adds	r2, r3, #1
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e53e:	697b      	ldr	r3, [r7, #20]
}
 800e540:	4618      	mov	r0, r3
 800e542:	3718      	adds	r7, #24
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e556:	2b00      	cmp	r3, #0
 800e558:	d018      	beq.n	800e58c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	68da      	ldr	r2, [r3, #12]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e562:	441a      	add	r2, r3
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	68da      	ldr	r2, [r3, #12]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	689b      	ldr	r3, [r3, #8]
 800e570:	429a      	cmp	r2, r3
 800e572:	d303      	bcc.n	800e57c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	68d9      	ldr	r1, [r3, #12]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e584:	461a      	mov	r2, r3
 800e586:	6838      	ldr	r0, [r7, #0]
 800e588:	f003 f931 	bl	80117ee <memcpy>
	}
}
 800e58c:	bf00      	nop
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e59c:	f001 ffaa 	bl	80104f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e5a8:	e011      	b.n	800e5ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d012      	beq.n	800e5d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	3324      	adds	r3, #36	; 0x24
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f000 fe6c 	bl	800f294 <xTaskRemoveFromEventList>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d001      	beq.n	800e5c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e5c2:	f000 ff43 	bl	800f44c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e5c6:	7bfb      	ldrb	r3, [r7, #15]
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	dce9      	bgt.n	800e5aa <prvUnlockQueue+0x16>
 800e5d6:	e000      	b.n	800e5da <prvUnlockQueue+0x46>
					break;
 800e5d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	22ff      	movs	r2, #255	; 0xff
 800e5de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e5e2:	f001 ffb7 	bl	8010554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e5e6:	f001 ff85 	bl	80104f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e5f2:	e011      	b.n	800e618 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d012      	beq.n	800e622 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	3310      	adds	r3, #16
 800e600:	4618      	mov	r0, r3
 800e602:	f000 fe47 	bl	800f294 <xTaskRemoveFromEventList>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e60c:	f000 ff1e 	bl	800f44c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e610:	7bbb      	ldrb	r3, [r7, #14]
 800e612:	3b01      	subs	r3, #1
 800e614:	b2db      	uxtb	r3, r3
 800e616:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	dce9      	bgt.n	800e5f4 <prvUnlockQueue+0x60>
 800e620:	e000      	b.n	800e624 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e622:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	22ff      	movs	r2, #255	; 0xff
 800e628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e62c:	f001 ff92 	bl	8010554 <vPortExitCritical>
}
 800e630:	bf00      	nop
 800e632:	3710      	adds	r7, #16
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e640:	f001 ff58 	bl	80104f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d102      	bne.n	800e652 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e64c:	2301      	movs	r3, #1
 800e64e:	60fb      	str	r3, [r7, #12]
 800e650:	e001      	b.n	800e656 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e652:	2300      	movs	r3, #0
 800e654:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e656:	f001 ff7d 	bl	8010554 <vPortExitCritical>

	return xReturn;
 800e65a:	68fb      	ldr	r3, [r7, #12]
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3710      	adds	r7, #16
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e66c:	f001 ff42 	bl	80104f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e678:	429a      	cmp	r2, r3
 800e67a:	d102      	bne.n	800e682 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e67c:	2301      	movs	r3, #1
 800e67e:	60fb      	str	r3, [r7, #12]
 800e680:	e001      	b.n	800e686 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e682:	2300      	movs	r3, #0
 800e684:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e686:	f001 ff65 	bl	8010554 <vPortExitCritical>

	return xReturn;
 800e68a:	68fb      	ldr	r3, [r7, #12]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e694:	b480      	push	{r7}
 800e696:	b085      	sub	sp, #20
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e69e:	2300      	movs	r3, #0
 800e6a0:	60fb      	str	r3, [r7, #12]
 800e6a2:	e014      	b.n	800e6ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e6a4:	4a0f      	ldr	r2, [pc, #60]	; (800e6e4 <vQueueAddToRegistry+0x50>)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d10b      	bne.n	800e6c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e6b0:	490c      	ldr	r1, [pc, #48]	; (800e6e4 <vQueueAddToRegistry+0x50>)
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	683a      	ldr	r2, [r7, #0]
 800e6b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e6ba:	4a0a      	ldr	r2, [pc, #40]	; (800e6e4 <vQueueAddToRegistry+0x50>)
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	00db      	lsls	r3, r3, #3
 800e6c0:	4413      	add	r3, r2
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e6c6:	e006      	b.n	800e6d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	60fb      	str	r3, [r7, #12]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2b07      	cmp	r3, #7
 800e6d2:	d9e7      	bls.n	800e6a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e6d4:	bf00      	nop
 800e6d6:	bf00      	nop
 800e6d8:	3714      	adds	r7, #20
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
 800e6e2:	bf00      	nop
 800e6e4:	2000d628 	.word	0x2000d628

0800e6e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b086      	sub	sp, #24
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	60b9      	str	r1, [r7, #8]
 800e6f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e6f8:	f001 fefc 	bl	80104f4 <vPortEnterCritical>
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e702:	b25b      	sxtb	r3, r3
 800e704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e708:	d103      	bne.n	800e712 <vQueueWaitForMessageRestricted+0x2a>
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e718:	b25b      	sxtb	r3, r3
 800e71a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e71e:	d103      	bne.n	800e728 <vQueueWaitForMessageRestricted+0x40>
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	2200      	movs	r2, #0
 800e724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e728:	f001 ff14 	bl	8010554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e730:	2b00      	cmp	r3, #0
 800e732:	d106      	bne.n	800e742 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	3324      	adds	r3, #36	; 0x24
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	68b9      	ldr	r1, [r7, #8]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f000 fd7d 	bl	800f23c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e742:	6978      	ldr	r0, [r7, #20]
 800e744:	f7ff ff26 	bl	800e594 <prvUnlockQueue>
	}
 800e748:	bf00      	nop
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e750:	b580      	push	{r7, lr}
 800e752:	b08e      	sub	sp, #56	; 0x38
 800e754:	af04      	add	r7, sp, #16
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
 800e75c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e760:	2b00      	cmp	r3, #0
 800e762:	d10a      	bne.n	800e77a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e768:	f383 8811 	msr	BASEPRI, r3
 800e76c:	f3bf 8f6f 	isb	sy
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	623b      	str	r3, [r7, #32]
}
 800e776:	bf00      	nop
 800e778:	e7fe      	b.n	800e778 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d10a      	bne.n	800e796 <xTaskCreateStatic+0x46>
	__asm volatile
 800e780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	61fb      	str	r3, [r7, #28]
}
 800e792:	bf00      	nop
 800e794:	e7fe      	b.n	800e794 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e796:	23c0      	movs	r3, #192	; 0xc0
 800e798:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	2bc0      	cmp	r3, #192	; 0xc0
 800e79e:	d00a      	beq.n	800e7b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	61bb      	str	r3, [r7, #24]
}
 800e7b2:	bf00      	nop
 800e7b4:	e7fe      	b.n	800e7b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e7b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d01e      	beq.n	800e7fc <xTaskCreateStatic+0xac>
 800e7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d01b      	beq.n	800e7fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d0:	2202      	movs	r2, #2
 800e7d2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	9303      	str	r3, [sp, #12]
 800e7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7dc:	9302      	str	r3, [sp, #8]
 800e7de:	f107 0314 	add.w	r3, r7, #20
 800e7e2:	9301      	str	r3, [sp, #4]
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	68b9      	ldr	r1, [r7, #8]
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	f000 f850 	bl	800e894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e7f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7f6:	f000 f8f7 	bl	800e9e8 <prvAddNewTaskToReadyList>
 800e7fa:	e001      	b.n	800e800 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e800:	697b      	ldr	r3, [r7, #20]
	}
 800e802:	4618      	mov	r0, r3
 800e804:	3728      	adds	r7, #40	; 0x28
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b08c      	sub	sp, #48	; 0x30
 800e80e:	af04      	add	r7, sp, #16
 800e810:	60f8      	str	r0, [r7, #12]
 800e812:	60b9      	str	r1, [r7, #8]
 800e814:	603b      	str	r3, [r7, #0]
 800e816:	4613      	mov	r3, r2
 800e818:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e81a:	88fb      	ldrh	r3, [r7, #6]
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	4618      	mov	r0, r3
 800e820:	f001 ff8a 	bl	8010738 <pvPortMalloc>
 800e824:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d00e      	beq.n	800e84a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e82c:	20c0      	movs	r0, #192	; 0xc0
 800e82e:	f001 ff83 	bl	8010738 <pvPortMalloc>
 800e832:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d003      	beq.n	800e842 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	697a      	ldr	r2, [r7, #20]
 800e83e:	631a      	str	r2, [r3, #48]	; 0x30
 800e840:	e005      	b.n	800e84e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e842:	6978      	ldr	r0, [r7, #20]
 800e844:	f002 f844 	bl	80108d0 <vPortFree>
 800e848:	e001      	b.n	800e84e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e84a:	2300      	movs	r3, #0
 800e84c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d017      	beq.n	800e884 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	2200      	movs	r2, #0
 800e858:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e85c:	88fa      	ldrh	r2, [r7, #6]
 800e85e:	2300      	movs	r3, #0
 800e860:	9303      	str	r3, [sp, #12]
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	9302      	str	r3, [sp, #8]
 800e866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e868:	9301      	str	r3, [sp, #4]
 800e86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	68b9      	ldr	r1, [r7, #8]
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f000 f80e 	bl	800e894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e878:	69f8      	ldr	r0, [r7, #28]
 800e87a:	f000 f8b5 	bl	800e9e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e87e:	2301      	movs	r3, #1
 800e880:	61bb      	str	r3, [r7, #24]
 800e882:	e002      	b.n	800e88a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e888:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e88a:	69bb      	ldr	r3, [r7, #24]
	}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3720      	adds	r7, #32
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b088      	sub	sp, #32
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
 800e8a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	009b      	lsls	r3, r3, #2
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	21a5      	movs	r1, #165	; 0xa5
 800e8ae:	f002 ffac 	bl	801180a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e8bc:	3b01      	subs	r3, #1
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	4413      	add	r3, r2
 800e8c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e8c4:	69bb      	ldr	r3, [r7, #24]
 800e8c6:	f023 0307 	bic.w	r3, r3, #7
 800e8ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	f003 0307 	and.w	r3, r3, #7
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00a      	beq.n	800e8ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800e8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8da:	f383 8811 	msr	BASEPRI, r3
 800e8de:	f3bf 8f6f 	isb	sy
 800e8e2:	f3bf 8f4f 	dsb	sy
 800e8e6:	617b      	str	r3, [r7, #20]
}
 800e8e8:	bf00      	nop
 800e8ea:	e7fe      	b.n	800e8ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d01f      	beq.n	800e932 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	61fb      	str	r3, [r7, #28]
 800e8f6:	e012      	b.n	800e91e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	7819      	ldrb	r1, [r3, #0]
 800e900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	4413      	add	r3, r2
 800e906:	3334      	adds	r3, #52	; 0x34
 800e908:	460a      	mov	r2, r1
 800e90a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	4413      	add	r3, r2
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d006      	beq.n	800e926 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	3301      	adds	r3, #1
 800e91c:	61fb      	str	r3, [r7, #28]
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	2b0f      	cmp	r3, #15
 800e922:	d9e9      	bls.n	800e8f8 <prvInitialiseNewTask+0x64>
 800e924:	e000      	b.n	800e928 <prvInitialiseNewTask+0x94>
			{
				break;
 800e926:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92a:	2200      	movs	r2, #0
 800e92c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e930:	e003      	b.n	800e93a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e934:	2200      	movs	r2, #0
 800e936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93c:	2b37      	cmp	r3, #55	; 0x37
 800e93e:	d901      	bls.n	800e944 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e940:	2337      	movs	r3, #55	; 0x37
 800e942:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e948:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e94e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e952:	2200      	movs	r2, #0
 800e954:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e958:	3304      	adds	r3, #4
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7ff f8be 	bl	800dadc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e962:	3318      	adds	r3, #24
 800e964:	4618      	mov	r0, r3
 800e966:	f7ff f8b9 	bl	800dadc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e96e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e972:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e978:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e97e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e982:	2200      	movs	r2, #0
 800e984:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e988:	2200      	movs	r2, #0
 800e98a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	2200      	movs	r2, #0
 800e992:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e998:	3358      	adds	r3, #88	; 0x58
 800e99a:	2260      	movs	r2, #96	; 0x60
 800e99c:	2100      	movs	r1, #0
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f002 ff33 	bl	801180a <memset>
 800e9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a6:	4a0d      	ldr	r2, [pc, #52]	; (800e9dc <prvInitialiseNewTask+0x148>)
 800e9a8:	65da      	str	r2, [r3, #92]	; 0x5c
 800e9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ac:	4a0c      	ldr	r2, [pc, #48]	; (800e9e0 <prvInitialiseNewTask+0x14c>)
 800e9ae:	661a      	str	r2, [r3, #96]	; 0x60
 800e9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b2:	4a0c      	ldr	r2, [pc, #48]	; (800e9e4 <prvInitialiseNewTask+0x150>)
 800e9b4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	68f9      	ldr	r1, [r7, #12]
 800e9ba:	69b8      	ldr	r0, [r7, #24]
 800e9bc:	f001 fc6e 	bl	801029c <pxPortInitialiseStack>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e9d2:	bf00      	nop
 800e9d4:	3720      	adds	r7, #32
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	0801aa30 	.word	0x0801aa30
 800e9e0:	0801aa50 	.word	0x0801aa50
 800e9e4:	0801aa10 	.word	0x0801aa10

0800e9e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e9f0:	f001 fd80 	bl	80104f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e9f4:	4b2d      	ldr	r3, [pc, #180]	; (800eaac <prvAddNewTaskToReadyList+0xc4>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	4a2c      	ldr	r2, [pc, #176]	; (800eaac <prvAddNewTaskToReadyList+0xc4>)
 800e9fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e9fe:	4b2c      	ldr	r3, [pc, #176]	; (800eab0 <prvAddNewTaskToReadyList+0xc8>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d109      	bne.n	800ea1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea06:	4a2a      	ldr	r2, [pc, #168]	; (800eab0 <prvAddNewTaskToReadyList+0xc8>)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea0c:	4b27      	ldr	r3, [pc, #156]	; (800eaac <prvAddNewTaskToReadyList+0xc4>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d110      	bne.n	800ea36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea14:	f000 fd3e 	bl	800f494 <prvInitialiseTaskLists>
 800ea18:	e00d      	b.n	800ea36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ea1a:	4b26      	ldr	r3, [pc, #152]	; (800eab4 <prvAddNewTaskToReadyList+0xcc>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d109      	bne.n	800ea36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea22:	4b23      	ldr	r3, [pc, #140]	; (800eab0 <prvAddNewTaskToReadyList+0xc8>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d802      	bhi.n	800ea36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ea30:	4a1f      	ldr	r2, [pc, #124]	; (800eab0 <prvAddNewTaskToReadyList+0xc8>)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ea36:	4b20      	ldr	r3, [pc, #128]	; (800eab8 <prvAddNewTaskToReadyList+0xd0>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	4a1e      	ldr	r2, [pc, #120]	; (800eab8 <prvAddNewTaskToReadyList+0xd0>)
 800ea3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ea40:	4b1d      	ldr	r3, [pc, #116]	; (800eab8 <prvAddNewTaskToReadyList+0xd0>)
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea4c:	4b1b      	ldr	r3, [pc, #108]	; (800eabc <prvAddNewTaskToReadyList+0xd4>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d903      	bls.n	800ea5c <prvAddNewTaskToReadyList+0x74>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea58:	4a18      	ldr	r2, [pc, #96]	; (800eabc <prvAddNewTaskToReadyList+0xd4>)
 800ea5a:	6013      	str	r3, [r2, #0]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea60:	4613      	mov	r3, r2
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	4413      	add	r3, r2
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	4a15      	ldr	r2, [pc, #84]	; (800eac0 <prvAddNewTaskToReadyList+0xd8>)
 800ea6a:	441a      	add	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	3304      	adds	r3, #4
 800ea70:	4619      	mov	r1, r3
 800ea72:	4610      	mov	r0, r2
 800ea74:	f7ff f83f 	bl	800daf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ea78:	f001 fd6c 	bl	8010554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ea7c:	4b0d      	ldr	r3, [pc, #52]	; (800eab4 <prvAddNewTaskToReadyList+0xcc>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d00e      	beq.n	800eaa2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ea84:	4b0a      	ldr	r3, [pc, #40]	; (800eab0 <prvAddNewTaskToReadyList+0xc8>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d207      	bcs.n	800eaa2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ea92:	4b0c      	ldr	r3, [pc, #48]	; (800eac4 <prvAddNewTaskToReadyList+0xdc>)
 800ea94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea98:	601a      	str	r2, [r3, #0]
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eaa2:	bf00      	nop
 800eaa4:	3708      	adds	r7, #8
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	20003400 	.word	0x20003400
 800eab0:	20002f2c 	.word	0x20002f2c
 800eab4:	2000340c 	.word	0x2000340c
 800eab8:	2000341c 	.word	0x2000341c
 800eabc:	20003408 	.word	0x20003408
 800eac0:	20002f30 	.word	0x20002f30
 800eac4:	e000ed04 	.word	0xe000ed04

0800eac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ead0:	2300      	movs	r3, #0
 800ead2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d017      	beq.n	800eb0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eada:	4b13      	ldr	r3, [pc, #76]	; (800eb28 <vTaskDelay+0x60>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00a      	beq.n	800eaf8 <vTaskDelay+0x30>
	__asm volatile
 800eae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	60bb      	str	r3, [r7, #8]
}
 800eaf4:	bf00      	nop
 800eaf6:	e7fe      	b.n	800eaf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eaf8:	f000 f8f4 	bl	800ece4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eafc:	2100      	movs	r1, #0
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f001 f82a 	bl	800fb58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eb04:	f000 f8fc 	bl	800ed00 <xTaskResumeAll>
 800eb08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d107      	bne.n	800eb20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eb10:	4b06      	ldr	r3, [pc, #24]	; (800eb2c <vTaskDelay+0x64>)
 800eb12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb16:	601a      	str	r2, [r3, #0]
 800eb18:	f3bf 8f4f 	dsb	sy
 800eb1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb20:	bf00      	nop
 800eb22:	3710      	adds	r7, #16
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	20003428 	.word	0x20003428
 800eb2c:	e000ed04 	.word	0xe000ed04

0800eb30 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b088      	sub	sp, #32
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d10a      	bne.n	800eb58 <eTaskGetState+0x28>
	__asm volatile
 800eb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb46:	f383 8811 	msr	BASEPRI, r3
 800eb4a:	f3bf 8f6f 	isb	sy
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	60bb      	str	r3, [r7, #8]
}
 800eb54:	bf00      	nop
 800eb56:	e7fe      	b.n	800eb56 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800eb58:	4b23      	ldr	r3, [pc, #140]	; (800ebe8 <eTaskGetState+0xb8>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	69ba      	ldr	r2, [r7, #24]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d102      	bne.n	800eb68 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800eb62:	2300      	movs	r3, #0
 800eb64:	77fb      	strb	r3, [r7, #31]
 800eb66:	e03a      	b.n	800ebde <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800eb68:	f001 fcc4 	bl	80104f4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	695b      	ldr	r3, [r3, #20]
 800eb70:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800eb72:	4b1e      	ldr	r3, [pc, #120]	; (800ebec <eTaskGetState+0xbc>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800eb78:	4b1d      	ldr	r3, [pc, #116]	; (800ebf0 <eTaskGetState+0xc0>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800eb7e:	f001 fce9 	bl	8010554 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800eb82:	697a      	ldr	r2, [r7, #20]
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d003      	beq.n	800eb92 <eTaskGetState+0x62>
 800eb8a:	697a      	ldr	r2, [r7, #20]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d102      	bne.n	800eb98 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800eb92:	2302      	movs	r3, #2
 800eb94:	77fb      	strb	r3, [r7, #31]
 800eb96:	e022      	b.n	800ebde <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	4a16      	ldr	r2, [pc, #88]	; (800ebf4 <eTaskGetState+0xc4>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d112      	bne.n	800ebc6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d10b      	bne.n	800ebc0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800eba8:	69bb      	ldr	r3, [r7, #24]
 800ebaa:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d102      	bne.n	800ebba <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800ebb4:	2302      	movs	r3, #2
 800ebb6:	77fb      	strb	r3, [r7, #31]
 800ebb8:	e011      	b.n	800ebde <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800ebba:	2303      	movs	r3, #3
 800ebbc:	77fb      	strb	r3, [r7, #31]
 800ebbe:	e00e      	b.n	800ebde <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	77fb      	strb	r3, [r7, #31]
 800ebc4:	e00b      	b.n	800ebde <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	4a0b      	ldr	r2, [pc, #44]	; (800ebf8 <eTaskGetState+0xc8>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d002      	beq.n	800ebd4 <eTaskGetState+0xa4>
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d102      	bne.n	800ebda <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800ebd4:	2304      	movs	r3, #4
 800ebd6:	77fb      	strb	r3, [r7, #31]
 800ebd8:	e001      	b.n	800ebde <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800ebde:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3720      	adds	r7, #32
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	20002f2c 	.word	0x20002f2c
 800ebec:	200033b8 	.word	0x200033b8
 800ebf0:	200033bc 	.word	0x200033bc
 800ebf4:	200033ec 	.word	0x200033ec
 800ebf8:	200033d4 	.word	0x200033d4

0800ebfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b08a      	sub	sp, #40	; 0x28
 800ec00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ec02:	2300      	movs	r3, #0
 800ec04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ec06:	2300      	movs	r3, #0
 800ec08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ec0a:	463a      	mov	r2, r7
 800ec0c:	1d39      	adds	r1, r7, #4
 800ec0e:	f107 0308 	add.w	r3, r7, #8
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fe ff0e 	bl	800da34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ec18:	6839      	ldr	r1, [r7, #0]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	68ba      	ldr	r2, [r7, #8]
 800ec1e:	9202      	str	r2, [sp, #8]
 800ec20:	9301      	str	r3, [sp, #4]
 800ec22:	2300      	movs	r3, #0
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	2300      	movs	r3, #0
 800ec28:	460a      	mov	r2, r1
 800ec2a:	4925      	ldr	r1, [pc, #148]	; (800ecc0 <vTaskStartScheduler+0xc4>)
 800ec2c:	4825      	ldr	r0, [pc, #148]	; (800ecc4 <vTaskStartScheduler+0xc8>)
 800ec2e:	f7ff fd8f 	bl	800e750 <xTaskCreateStatic>
 800ec32:	4603      	mov	r3, r0
 800ec34:	4a24      	ldr	r2, [pc, #144]	; (800ecc8 <vTaskStartScheduler+0xcc>)
 800ec36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ec38:	4b23      	ldr	r3, [pc, #140]	; (800ecc8 <vTaskStartScheduler+0xcc>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d002      	beq.n	800ec46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ec40:	2301      	movs	r3, #1
 800ec42:	617b      	str	r3, [r7, #20]
 800ec44:	e001      	b.n	800ec4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ec46:	2300      	movs	r3, #0
 800ec48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d102      	bne.n	800ec56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ec50:	f000 ffd6 	bl	800fc00 <xTimerCreateTimerTask>
 800ec54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d11e      	bne.n	800ec9a <vTaskStartScheduler+0x9e>
	__asm volatile
 800ec5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec60:	f383 8811 	msr	BASEPRI, r3
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	f3bf 8f4f 	dsb	sy
 800ec6c:	613b      	str	r3, [r7, #16]
}
 800ec6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ec70:	4b16      	ldr	r3, [pc, #88]	; (800eccc <vTaskStartScheduler+0xd0>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	3358      	adds	r3, #88	; 0x58
 800ec76:	4a16      	ldr	r2, [pc, #88]	; (800ecd0 <vTaskStartScheduler+0xd4>)
 800ec78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ec7a:	4b16      	ldr	r3, [pc, #88]	; (800ecd4 <vTaskStartScheduler+0xd8>)
 800ec7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ec82:	4b15      	ldr	r3, [pc, #84]	; (800ecd8 <vTaskStartScheduler+0xdc>)
 800ec84:	2201      	movs	r2, #1
 800ec86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ec88:	4b14      	ldr	r3, [pc, #80]	; (800ecdc <vTaskStartScheduler+0xe0>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ec8e:	4b14      	ldr	r3, [pc, #80]	; (800ece0 <vTaskStartScheduler+0xe4>)
 800ec90:	2200      	movs	r2, #0
 800ec92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ec94:	f001 fb8c 	bl	80103b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ec98:	e00e      	b.n	800ecb8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eca0:	d10a      	bne.n	800ecb8 <vTaskStartScheduler+0xbc>
	__asm volatile
 800eca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca6:	f383 8811 	msr	BASEPRI, r3
 800ecaa:	f3bf 8f6f 	isb	sy
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	60fb      	str	r3, [r7, #12]
}
 800ecb4:	bf00      	nop
 800ecb6:	e7fe      	b.n	800ecb6 <vTaskStartScheduler+0xba>
}
 800ecb8:	bf00      	nop
 800ecba:	3718      	adds	r7, #24
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	0801471c 	.word	0x0801471c
 800ecc4:	0800f465 	.word	0x0800f465
 800ecc8:	20003424 	.word	0x20003424
 800eccc:	20002f2c 	.word	0x20002f2c
 800ecd0:	200001b0 	.word	0x200001b0
 800ecd4:	20003420 	.word	0x20003420
 800ecd8:	2000340c 	.word	0x2000340c
 800ecdc:	20003404 	.word	0x20003404
 800ece0:	2000cd88 	.word	0x2000cd88

0800ece4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ece4:	b480      	push	{r7}
 800ece6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ece8:	4b04      	ldr	r3, [pc, #16]	; (800ecfc <vTaskSuspendAll+0x18>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	3301      	adds	r3, #1
 800ecee:	4a03      	ldr	r2, [pc, #12]	; (800ecfc <vTaskSuspendAll+0x18>)
 800ecf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ecf2:	bf00      	nop
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr
 800ecfc:	20003428 	.word	0x20003428

0800ed00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ed0e:	4b42      	ldr	r3, [pc, #264]	; (800ee18 <xTaskResumeAll+0x118>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d10a      	bne.n	800ed2c <xTaskResumeAll+0x2c>
	__asm volatile
 800ed16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1a:	f383 8811 	msr	BASEPRI, r3
 800ed1e:	f3bf 8f6f 	isb	sy
 800ed22:	f3bf 8f4f 	dsb	sy
 800ed26:	603b      	str	r3, [r7, #0]
}
 800ed28:	bf00      	nop
 800ed2a:	e7fe      	b.n	800ed2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ed2c:	f001 fbe2 	bl	80104f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ed30:	4b39      	ldr	r3, [pc, #228]	; (800ee18 <xTaskResumeAll+0x118>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	3b01      	subs	r3, #1
 800ed36:	4a38      	ldr	r2, [pc, #224]	; (800ee18 <xTaskResumeAll+0x118>)
 800ed38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed3a:	4b37      	ldr	r3, [pc, #220]	; (800ee18 <xTaskResumeAll+0x118>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d162      	bne.n	800ee08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ed42:	4b36      	ldr	r3, [pc, #216]	; (800ee1c <xTaskResumeAll+0x11c>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d05e      	beq.n	800ee08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed4a:	e02f      	b.n	800edac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed4c:	4b34      	ldr	r3, [pc, #208]	; (800ee20 <xTaskResumeAll+0x120>)
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3318      	adds	r3, #24
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7fe ff29 	bl	800dbb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	3304      	adds	r3, #4
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fe ff24 	bl	800dbb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed6c:	4b2d      	ldr	r3, [pc, #180]	; (800ee24 <xTaskResumeAll+0x124>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d903      	bls.n	800ed7c <xTaskResumeAll+0x7c>
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed78:	4a2a      	ldr	r2, [pc, #168]	; (800ee24 <xTaskResumeAll+0x124>)
 800ed7a:	6013      	str	r3, [r2, #0]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed80:	4613      	mov	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	4413      	add	r3, r2
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	4a27      	ldr	r2, [pc, #156]	; (800ee28 <xTaskResumeAll+0x128>)
 800ed8a:	441a      	add	r2, r3
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	3304      	adds	r3, #4
 800ed90:	4619      	mov	r1, r3
 800ed92:	4610      	mov	r0, r2
 800ed94:	f7fe feaf 	bl	800daf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed9c:	4b23      	ldr	r3, [pc, #140]	; (800ee2c <xTaskResumeAll+0x12c>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d302      	bcc.n	800edac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800eda6:	4b22      	ldr	r3, [pc, #136]	; (800ee30 <xTaskResumeAll+0x130>)
 800eda8:	2201      	movs	r2, #1
 800edaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800edac:	4b1c      	ldr	r3, [pc, #112]	; (800ee20 <xTaskResumeAll+0x120>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d1cb      	bne.n	800ed4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d001      	beq.n	800edbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800edba:	f000 fce1 	bl	800f780 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800edbe:	4b1d      	ldr	r3, [pc, #116]	; (800ee34 <xTaskResumeAll+0x134>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d010      	beq.n	800edec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800edca:	f000 f8d7 	bl	800ef7c <xTaskIncrementTick>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d002      	beq.n	800edda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800edd4:	4b16      	ldr	r3, [pc, #88]	; (800ee30 <xTaskResumeAll+0x130>)
 800edd6:	2201      	movs	r2, #1
 800edd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	3b01      	subs	r3, #1
 800edde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1f1      	bne.n	800edca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ede6:	4b13      	ldr	r3, [pc, #76]	; (800ee34 <xTaskResumeAll+0x134>)
 800ede8:	2200      	movs	r2, #0
 800edea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800edec:	4b10      	ldr	r3, [pc, #64]	; (800ee30 <xTaskResumeAll+0x130>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d009      	beq.n	800ee08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800edf4:	2301      	movs	r3, #1
 800edf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800edf8:	4b0f      	ldr	r3, [pc, #60]	; (800ee38 <xTaskResumeAll+0x138>)
 800edfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edfe:	601a      	str	r2, [r3, #0]
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee08:	f001 fba4 	bl	8010554 <vPortExitCritical>

	return xAlreadyYielded;
 800ee0c:	68bb      	ldr	r3, [r7, #8]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3710      	adds	r7, #16
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	20003428 	.word	0x20003428
 800ee1c:	20003400 	.word	0x20003400
 800ee20:	200033c0 	.word	0x200033c0
 800ee24:	20003408 	.word	0x20003408
 800ee28:	20002f30 	.word	0x20002f30
 800ee2c:	20002f2c 	.word	0x20002f2c
 800ee30:	20003414 	.word	0x20003414
 800ee34:	20003410 	.word	0x20003410
 800ee38:	e000ed04 	.word	0xe000ed04

0800ee3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ee42:	4b05      	ldr	r3, [pc, #20]	; (800ee58 <xTaskGetTickCount+0x1c>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ee48:	687b      	ldr	r3, [r7, #4]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	370c      	adds	r7, #12
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	20003404 	.word	0x20003404

0800ee5c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	60b9      	str	r1, [r7, #8]
 800ee66:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	617b      	str	r3, [r7, #20]
 800ee6c:	2338      	movs	r3, #56	; 0x38
 800ee6e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800ee70:	f7ff ff38 	bl	800ece4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ee74:	4b3a      	ldr	r3, [pc, #232]	; (800ef60 <uxTaskGetSystemState+0x104>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	68ba      	ldr	r2, [r7, #8]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d369      	bcc.n	800ef52 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	3b01      	subs	r3, #1
 800ee82:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800ee84:	697a      	ldr	r2, [r7, #20]
 800ee86:	4613      	mov	r3, r2
 800ee88:	00db      	lsls	r3, r3, #3
 800ee8a:	4413      	add	r3, r2
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	461a      	mov	r2, r3
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	1898      	adds	r0, r3, r2
 800ee94:	693a      	ldr	r2, [r7, #16]
 800ee96:	4613      	mov	r3, r2
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	4413      	add	r3, r2
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	4a31      	ldr	r2, [pc, #196]	; (800ef64 <uxTaskGetSystemState+0x108>)
 800eea0:	4413      	add	r3, r2
 800eea2:	2201      	movs	r2, #1
 800eea4:	4619      	mov	r1, r3
 800eea6:	f000 fbc9 	bl	800f63c <prvListTasksWithinSingleList>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	4413      	add	r3, r2
 800eeb0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1e2      	bne.n	800ee7e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800eeb8:	697a      	ldr	r2, [r7, #20]
 800eeba:	4613      	mov	r3, r2
 800eebc:	00db      	lsls	r3, r3, #3
 800eebe:	4413      	add	r3, r2
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	461a      	mov	r2, r3
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	4413      	add	r3, r2
 800eec8:	4a27      	ldr	r2, [pc, #156]	; (800ef68 <uxTaskGetSystemState+0x10c>)
 800eeca:	6811      	ldr	r1, [r2, #0]
 800eecc:	2202      	movs	r2, #2
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 fbb4 	bl	800f63c <prvListTasksWithinSingleList>
 800eed4:	4602      	mov	r2, r0
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	4413      	add	r3, r2
 800eeda:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800eedc:	697a      	ldr	r2, [r7, #20]
 800eede:	4613      	mov	r3, r2
 800eee0:	00db      	lsls	r3, r3, #3
 800eee2:	4413      	add	r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	461a      	mov	r2, r3
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	4413      	add	r3, r2
 800eeec:	4a1f      	ldr	r2, [pc, #124]	; (800ef6c <uxTaskGetSystemState+0x110>)
 800eeee:	6811      	ldr	r1, [r2, #0]
 800eef0:	2202      	movs	r2, #2
 800eef2:	4618      	mov	r0, r3
 800eef4:	f000 fba2 	bl	800f63c <prvListTasksWithinSingleList>
 800eef8:	4602      	mov	r2, r0
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	4413      	add	r3, r2
 800eefe:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800ef00:	697a      	ldr	r2, [r7, #20]
 800ef02:	4613      	mov	r3, r2
 800ef04:	00db      	lsls	r3, r3, #3
 800ef06:	4413      	add	r3, r2
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	4413      	add	r3, r2
 800ef10:	2204      	movs	r2, #4
 800ef12:	4917      	ldr	r1, [pc, #92]	; (800ef70 <uxTaskGetSystemState+0x114>)
 800ef14:	4618      	mov	r0, r3
 800ef16:	f000 fb91 	bl	800f63c <prvListTasksWithinSingleList>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	4413      	add	r3, r2
 800ef20:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800ef22:	697a      	ldr	r2, [r7, #20]
 800ef24:	4613      	mov	r3, r2
 800ef26:	00db      	lsls	r3, r3, #3
 800ef28:	4413      	add	r3, r2
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	4413      	add	r3, r2
 800ef32:	2203      	movs	r2, #3
 800ef34:	490f      	ldr	r1, [pc, #60]	; (800ef74 <uxTaskGetSystemState+0x118>)
 800ef36:	4618      	mov	r0, r3
 800ef38:	f000 fb80 	bl	800f63c <prvListTasksWithinSingleList>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	4413      	add	r3, r2
 800ef42:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d003      	beq.n	800ef52 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ef4a:	4b0b      	ldr	r3, [pc, #44]	; (800ef78 <uxTaskGetSystemState+0x11c>)
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800ef52:	f7ff fed5 	bl	800ed00 <xTaskResumeAll>

		return uxTask;
 800ef56:	697b      	ldr	r3, [r7, #20]
	}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	20003400 	.word	0x20003400
 800ef64:	20002f30 	.word	0x20002f30
 800ef68:	200033b8 	.word	0x200033b8
 800ef6c:	200033bc 	.word	0x200033bc
 800ef70:	200033d4 	.word	0x200033d4
 800ef74:	200033ec 	.word	0x200033ec
 800ef78:	2000cd88 	.word	0x2000cd88

0800ef7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b086      	sub	sp, #24
 800ef80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ef82:	2300      	movs	r3, #0
 800ef84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef86:	4b4f      	ldr	r3, [pc, #316]	; (800f0c4 <xTaskIncrementTick+0x148>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	f040 808f 	bne.w	800f0ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ef90:	4b4d      	ldr	r3, [pc, #308]	; (800f0c8 <xTaskIncrementTick+0x14c>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	3301      	adds	r3, #1
 800ef96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ef98:	4a4b      	ldr	r2, [pc, #300]	; (800f0c8 <xTaskIncrementTick+0x14c>)
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d120      	bne.n	800efe6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800efa4:	4b49      	ldr	r3, [pc, #292]	; (800f0cc <xTaskIncrementTick+0x150>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00a      	beq.n	800efc4 <xTaskIncrementTick+0x48>
	__asm volatile
 800efae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	603b      	str	r3, [r7, #0]
}
 800efc0:	bf00      	nop
 800efc2:	e7fe      	b.n	800efc2 <xTaskIncrementTick+0x46>
 800efc4:	4b41      	ldr	r3, [pc, #260]	; (800f0cc <xTaskIncrementTick+0x150>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	60fb      	str	r3, [r7, #12]
 800efca:	4b41      	ldr	r3, [pc, #260]	; (800f0d0 <xTaskIncrementTick+0x154>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	4a3f      	ldr	r2, [pc, #252]	; (800f0cc <xTaskIncrementTick+0x150>)
 800efd0:	6013      	str	r3, [r2, #0]
 800efd2:	4a3f      	ldr	r2, [pc, #252]	; (800f0d0 <xTaskIncrementTick+0x154>)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6013      	str	r3, [r2, #0]
 800efd8:	4b3e      	ldr	r3, [pc, #248]	; (800f0d4 <xTaskIncrementTick+0x158>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	3301      	adds	r3, #1
 800efde:	4a3d      	ldr	r2, [pc, #244]	; (800f0d4 <xTaskIncrementTick+0x158>)
 800efe0:	6013      	str	r3, [r2, #0]
 800efe2:	f000 fbcd 	bl	800f780 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800efe6:	4b3c      	ldr	r3, [pc, #240]	; (800f0d8 <xTaskIncrementTick+0x15c>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	693a      	ldr	r2, [r7, #16]
 800efec:	429a      	cmp	r2, r3
 800efee:	d349      	bcc.n	800f084 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eff0:	4b36      	ldr	r3, [pc, #216]	; (800f0cc <xTaskIncrementTick+0x150>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d104      	bne.n	800f004 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800effa:	4b37      	ldr	r3, [pc, #220]	; (800f0d8 <xTaskIncrementTick+0x15c>)
 800effc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f000:	601a      	str	r2, [r3, #0]
					break;
 800f002:	e03f      	b.n	800f084 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f004:	4b31      	ldr	r3, [pc, #196]	; (800f0cc <xTaskIncrementTick+0x150>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f014:	693a      	ldr	r2, [r7, #16]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d203      	bcs.n	800f024 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f01c:	4a2e      	ldr	r2, [pc, #184]	; (800f0d8 <xTaskIncrementTick+0x15c>)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f022:	e02f      	b.n	800f084 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	3304      	adds	r3, #4
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fe fdc1 	bl	800dbb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f032:	2b00      	cmp	r3, #0
 800f034:	d004      	beq.n	800f040 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	3318      	adds	r3, #24
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fe fdb8 	bl	800dbb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f044:	4b25      	ldr	r3, [pc, #148]	; (800f0dc <xTaskIncrementTick+0x160>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d903      	bls.n	800f054 <xTaskIncrementTick+0xd8>
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f050:	4a22      	ldr	r2, [pc, #136]	; (800f0dc <xTaskIncrementTick+0x160>)
 800f052:	6013      	str	r3, [r2, #0]
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f058:	4613      	mov	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	4a1f      	ldr	r2, [pc, #124]	; (800f0e0 <xTaskIncrementTick+0x164>)
 800f062:	441a      	add	r2, r3
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	3304      	adds	r3, #4
 800f068:	4619      	mov	r1, r3
 800f06a:	4610      	mov	r0, r2
 800f06c:	f7fe fd43 	bl	800daf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f074:	4b1b      	ldr	r3, [pc, #108]	; (800f0e4 <xTaskIncrementTick+0x168>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d3b8      	bcc.n	800eff0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f07e:	2301      	movs	r3, #1
 800f080:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f082:	e7b5      	b.n	800eff0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f084:	4b17      	ldr	r3, [pc, #92]	; (800f0e4 <xTaskIncrementTick+0x168>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f08a:	4915      	ldr	r1, [pc, #84]	; (800f0e0 <xTaskIncrementTick+0x164>)
 800f08c:	4613      	mov	r3, r2
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	4413      	add	r3, r2
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	440b      	add	r3, r1
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d901      	bls.n	800f0a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f09c:	2301      	movs	r3, #1
 800f09e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f0a0:	4b11      	ldr	r3, [pc, #68]	; (800f0e8 <xTaskIncrementTick+0x16c>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d007      	beq.n	800f0b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	617b      	str	r3, [r7, #20]
 800f0ac:	e004      	b.n	800f0b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f0ae:	4b0f      	ldr	r3, [pc, #60]	; (800f0ec <xTaskIncrementTick+0x170>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	4a0d      	ldr	r2, [pc, #52]	; (800f0ec <xTaskIncrementTick+0x170>)
 800f0b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f0b8:	697b      	ldr	r3, [r7, #20]
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3718      	adds	r7, #24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	20003428 	.word	0x20003428
 800f0c8:	20003404 	.word	0x20003404
 800f0cc:	200033b8 	.word	0x200033b8
 800f0d0:	200033bc 	.word	0x200033bc
 800f0d4:	20003418 	.word	0x20003418
 800f0d8:	20003420 	.word	0x20003420
 800f0dc:	20003408 	.word	0x20003408
 800f0e0:	20002f30 	.word	0x20002f30
 800f0e4:	20002f2c 	.word	0x20002f2c
 800f0e8:	20003414 	.word	0x20003414
 800f0ec:	20003410 	.word	0x20003410

0800f0f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b085      	sub	sp, #20
 800f0f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f0f6:	4b36      	ldr	r3, [pc, #216]	; (800f1d0 <vTaskSwitchContext+0xe0>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d003      	beq.n	800f106 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f0fe:	4b35      	ldr	r3, [pc, #212]	; (800f1d4 <vTaskSwitchContext+0xe4>)
 800f100:	2201      	movs	r2, #1
 800f102:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f104:	e05e      	b.n	800f1c4 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800f106:	4b33      	ldr	r3, [pc, #204]	; (800f1d4 <vTaskSwitchContext+0xe4>)
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f10c:	4b32      	ldr	r3, [pc, #200]	; (800f1d8 <vTaskSwitchContext+0xe8>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4a32      	ldr	r2, [pc, #200]	; (800f1dc <vTaskSwitchContext+0xec>)
 800f112:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f114:	4b31      	ldr	r3, [pc, #196]	; (800f1dc <vTaskSwitchContext+0xec>)
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	4b31      	ldr	r3, [pc, #196]	; (800f1e0 <vTaskSwitchContext+0xf0>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d909      	bls.n	800f134 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f120:	4b30      	ldr	r3, [pc, #192]	; (800f1e4 <vTaskSwitchContext+0xf4>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f126:	4a2d      	ldr	r2, [pc, #180]	; (800f1dc <vTaskSwitchContext+0xec>)
 800f128:	6810      	ldr	r0, [r2, #0]
 800f12a:	4a2d      	ldr	r2, [pc, #180]	; (800f1e0 <vTaskSwitchContext+0xf0>)
 800f12c:	6812      	ldr	r2, [r2, #0]
 800f12e:	1a82      	subs	r2, r0, r2
 800f130:	440a      	add	r2, r1
 800f132:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800f134:	4b29      	ldr	r3, [pc, #164]	; (800f1dc <vTaskSwitchContext+0xec>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4a29      	ldr	r2, [pc, #164]	; (800f1e0 <vTaskSwitchContext+0xf0>)
 800f13a:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f13c:	4b2a      	ldr	r3, [pc, #168]	; (800f1e8 <vTaskSwitchContext+0xf8>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	60fb      	str	r3, [r7, #12]
 800f142:	e010      	b.n	800f166 <vTaskSwitchContext+0x76>
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d10a      	bne.n	800f160 <vTaskSwitchContext+0x70>
	__asm volatile
 800f14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14e:	f383 8811 	msr	BASEPRI, r3
 800f152:	f3bf 8f6f 	isb	sy
 800f156:	f3bf 8f4f 	dsb	sy
 800f15a:	607b      	str	r3, [r7, #4]
}
 800f15c:	bf00      	nop
 800f15e:	e7fe      	b.n	800f15e <vTaskSwitchContext+0x6e>
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	3b01      	subs	r3, #1
 800f164:	60fb      	str	r3, [r7, #12]
 800f166:	4921      	ldr	r1, [pc, #132]	; (800f1ec <vTaskSwitchContext+0xfc>)
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	4613      	mov	r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	4413      	add	r3, r2
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	440b      	add	r3, r1
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d0e4      	beq.n	800f144 <vTaskSwitchContext+0x54>
 800f17a:	68fa      	ldr	r2, [r7, #12]
 800f17c:	4613      	mov	r3, r2
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	4413      	add	r3, r2
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	4a19      	ldr	r2, [pc, #100]	; (800f1ec <vTaskSwitchContext+0xfc>)
 800f186:	4413      	add	r3, r2
 800f188:	60bb      	str	r3, [r7, #8]
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	685a      	ldr	r2, [r3, #4]
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	605a      	str	r2, [r3, #4]
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	685a      	ldr	r2, [r3, #4]
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	3308      	adds	r3, #8
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d104      	bne.n	800f1aa <vTaskSwitchContext+0xba>
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	685a      	ldr	r2, [r3, #4]
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	605a      	str	r2, [r3, #4]
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	4a0c      	ldr	r2, [pc, #48]	; (800f1e4 <vTaskSwitchContext+0xf4>)
 800f1b2:	6013      	str	r3, [r2, #0]
 800f1b4:	4a0c      	ldr	r2, [pc, #48]	; (800f1e8 <vTaskSwitchContext+0xf8>)
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f1ba:	4b0a      	ldr	r3, [pc, #40]	; (800f1e4 <vTaskSwitchContext+0xf4>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	3358      	adds	r3, #88	; 0x58
 800f1c0:	4a0b      	ldr	r2, [pc, #44]	; (800f1f0 <vTaskSwitchContext+0x100>)
 800f1c2:	6013      	str	r3, [r2, #0]
}
 800f1c4:	bf00      	nop
 800f1c6:	3714      	adds	r7, #20
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr
 800f1d0:	20003428 	.word	0x20003428
 800f1d4:	20003414 	.word	0x20003414
 800f1d8:	2000cd88 	.word	0x2000cd88
 800f1dc:	20003430 	.word	0x20003430
 800f1e0:	2000342c 	.word	0x2000342c
 800f1e4:	20002f2c 	.word	0x20002f2c
 800f1e8:	20003408 	.word	0x20003408
 800f1ec:	20002f30 	.word	0x20002f30
 800f1f0:	200001b0 	.word	0x200001b0

0800f1f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d10a      	bne.n	800f21a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f208:	f383 8811 	msr	BASEPRI, r3
 800f20c:	f3bf 8f6f 	isb	sy
 800f210:	f3bf 8f4f 	dsb	sy
 800f214:	60fb      	str	r3, [r7, #12]
}
 800f216:	bf00      	nop
 800f218:	e7fe      	b.n	800f218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f21a:	4b07      	ldr	r3, [pc, #28]	; (800f238 <vTaskPlaceOnEventList+0x44>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	3318      	adds	r3, #24
 800f220:	4619      	mov	r1, r3
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f7fe fc8b 	bl	800db3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f228:	2101      	movs	r1, #1
 800f22a:	6838      	ldr	r0, [r7, #0]
 800f22c:	f000 fc94 	bl	800fb58 <prvAddCurrentTaskToDelayedList>
}
 800f230:	bf00      	nop
 800f232:	3710      	adds	r7, #16
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	20002f2c 	.word	0x20002f2c

0800f23c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b086      	sub	sp, #24
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10a      	bne.n	800f264 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	617b      	str	r3, [r7, #20]
}
 800f260:	bf00      	nop
 800f262:	e7fe      	b.n	800f262 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f264:	4b0a      	ldr	r3, [pc, #40]	; (800f290 <vTaskPlaceOnEventListRestricted+0x54>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	3318      	adds	r3, #24
 800f26a:	4619      	mov	r1, r3
 800f26c:	68f8      	ldr	r0, [r7, #12]
 800f26e:	f7fe fc42 	bl	800daf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d002      	beq.n	800f27e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f27c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f27e:	6879      	ldr	r1, [r7, #4]
 800f280:	68b8      	ldr	r0, [r7, #8]
 800f282:	f000 fc69 	bl	800fb58 <prvAddCurrentTaskToDelayedList>
	}
 800f286:	bf00      	nop
 800f288:	3718      	adds	r7, #24
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	20002f2c 	.word	0x20002f2c

0800f294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b086      	sub	sp, #24
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	68db      	ldr	r3, [r3, #12]
 800f2a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10a      	bne.n	800f2c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ae:	f383 8811 	msr	BASEPRI, r3
 800f2b2:	f3bf 8f6f 	isb	sy
 800f2b6:	f3bf 8f4f 	dsb	sy
 800f2ba:	60fb      	str	r3, [r7, #12]
}
 800f2bc:	bf00      	nop
 800f2be:	e7fe      	b.n	800f2be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	3318      	adds	r3, #24
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7fe fc73 	bl	800dbb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2ca:	4b1e      	ldr	r3, [pc, #120]	; (800f344 <xTaskRemoveFromEventList+0xb0>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d11d      	bne.n	800f30e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	3304      	adds	r3, #4
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fe fc6a 	bl	800dbb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2e0:	4b19      	ldr	r3, [pc, #100]	; (800f348 <xTaskRemoveFromEventList+0xb4>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d903      	bls.n	800f2f0 <xTaskRemoveFromEventList+0x5c>
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ec:	4a16      	ldr	r2, [pc, #88]	; (800f348 <xTaskRemoveFromEventList+0xb4>)
 800f2ee:	6013      	str	r3, [r2, #0]
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	4413      	add	r3, r2
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	4a13      	ldr	r2, [pc, #76]	; (800f34c <xTaskRemoveFromEventList+0xb8>)
 800f2fe:	441a      	add	r2, r3
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	3304      	adds	r3, #4
 800f304:	4619      	mov	r1, r3
 800f306:	4610      	mov	r0, r2
 800f308:	f7fe fbf5 	bl	800daf6 <vListInsertEnd>
 800f30c:	e005      	b.n	800f31a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	3318      	adds	r3, #24
 800f312:	4619      	mov	r1, r3
 800f314:	480e      	ldr	r0, [pc, #56]	; (800f350 <xTaskRemoveFromEventList+0xbc>)
 800f316:	f7fe fbee 	bl	800daf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f31e:	4b0d      	ldr	r3, [pc, #52]	; (800f354 <xTaskRemoveFromEventList+0xc0>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f324:	429a      	cmp	r2, r3
 800f326:	d905      	bls.n	800f334 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f328:	2301      	movs	r3, #1
 800f32a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f32c:	4b0a      	ldr	r3, [pc, #40]	; (800f358 <xTaskRemoveFromEventList+0xc4>)
 800f32e:	2201      	movs	r2, #1
 800f330:	601a      	str	r2, [r3, #0]
 800f332:	e001      	b.n	800f338 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f334:	2300      	movs	r3, #0
 800f336:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f338:	697b      	ldr	r3, [r7, #20]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3718      	adds	r7, #24
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	20003428 	.word	0x20003428
 800f348:	20003408 	.word	0x20003408
 800f34c:	20002f30 	.word	0x20002f30
 800f350:	200033c0 	.word	0x200033c0
 800f354:	20002f2c 	.word	0x20002f2c
 800f358:	20003414 	.word	0x20003414

0800f35c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f364:	4b06      	ldr	r3, [pc, #24]	; (800f380 <vTaskInternalSetTimeOutState+0x24>)
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f36c:	4b05      	ldr	r3, [pc, #20]	; (800f384 <vTaskInternalSetTimeOutState+0x28>)
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	605a      	str	r2, [r3, #4]
}
 800f374:	bf00      	nop
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	20003418 	.word	0x20003418
 800f384:	20003404 	.word	0x20003404

0800f388 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b088      	sub	sp, #32
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d10a      	bne.n	800f3ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39c:	f383 8811 	msr	BASEPRI, r3
 800f3a0:	f3bf 8f6f 	isb	sy
 800f3a4:	f3bf 8f4f 	dsb	sy
 800f3a8:	613b      	str	r3, [r7, #16]
}
 800f3aa:	bf00      	nop
 800f3ac:	e7fe      	b.n	800f3ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d10a      	bne.n	800f3ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b8:	f383 8811 	msr	BASEPRI, r3
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	f3bf 8f4f 	dsb	sy
 800f3c4:	60fb      	str	r3, [r7, #12]
}
 800f3c6:	bf00      	nop
 800f3c8:	e7fe      	b.n	800f3c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f3ca:	f001 f893 	bl	80104f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f3ce:	4b1d      	ldr	r3, [pc, #116]	; (800f444 <xTaskCheckForTimeOut+0xbc>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	69ba      	ldr	r2, [r7, #24]
 800f3da:	1ad3      	subs	r3, r2, r3
 800f3dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3e6:	d102      	bne.n	800f3ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	61fb      	str	r3, [r7, #28]
 800f3ec:	e023      	b.n	800f436 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	4b15      	ldr	r3, [pc, #84]	; (800f448 <xTaskCheckForTimeOut+0xc0>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d007      	beq.n	800f40a <xTaskCheckForTimeOut+0x82>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	69ba      	ldr	r2, [r7, #24]
 800f400:	429a      	cmp	r2, r3
 800f402:	d302      	bcc.n	800f40a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f404:	2301      	movs	r3, #1
 800f406:	61fb      	str	r3, [r7, #28]
 800f408:	e015      	b.n	800f436 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	697a      	ldr	r2, [r7, #20]
 800f410:	429a      	cmp	r2, r3
 800f412:	d20b      	bcs.n	800f42c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	1ad2      	subs	r2, r2, r3
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7ff ff9b 	bl	800f35c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f426:	2300      	movs	r3, #0
 800f428:	61fb      	str	r3, [r7, #28]
 800f42a:	e004      	b.n	800f436 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	2200      	movs	r2, #0
 800f430:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f432:	2301      	movs	r3, #1
 800f434:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f436:	f001 f88d 	bl	8010554 <vPortExitCritical>

	return xReturn;
 800f43a:	69fb      	ldr	r3, [r7, #28]
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3720      	adds	r7, #32
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	20003404 	.word	0x20003404
 800f448:	20003418 	.word	0x20003418

0800f44c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f44c:	b480      	push	{r7}
 800f44e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f450:	4b03      	ldr	r3, [pc, #12]	; (800f460 <vTaskMissedYield+0x14>)
 800f452:	2201      	movs	r2, #1
 800f454:	601a      	str	r2, [r3, #0]
}
 800f456:	bf00      	nop
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr
 800f460:	20003414 	.word	0x20003414

0800f464 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f46c:	f000 f852 	bl	800f514 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f470:	4b06      	ldr	r3, [pc, #24]	; (800f48c <prvIdleTask+0x28>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b01      	cmp	r3, #1
 800f476:	d9f9      	bls.n	800f46c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f478:	4b05      	ldr	r3, [pc, #20]	; (800f490 <prvIdleTask+0x2c>)
 800f47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f47e:	601a      	str	r2, [r3, #0]
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f488:	e7f0      	b.n	800f46c <prvIdleTask+0x8>
 800f48a:	bf00      	nop
 800f48c:	20002f30 	.word	0x20002f30
 800f490:	e000ed04 	.word	0xe000ed04

0800f494 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f49a:	2300      	movs	r3, #0
 800f49c:	607b      	str	r3, [r7, #4]
 800f49e:	e00c      	b.n	800f4ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	4613      	mov	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	4413      	add	r3, r2
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	4a12      	ldr	r2, [pc, #72]	; (800f4f4 <prvInitialiseTaskLists+0x60>)
 800f4ac:	4413      	add	r3, r2
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fe faf4 	bl	800da9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	607b      	str	r3, [r7, #4]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b37      	cmp	r3, #55	; 0x37
 800f4be:	d9ef      	bls.n	800f4a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f4c0:	480d      	ldr	r0, [pc, #52]	; (800f4f8 <prvInitialiseTaskLists+0x64>)
 800f4c2:	f7fe faeb 	bl	800da9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f4c6:	480d      	ldr	r0, [pc, #52]	; (800f4fc <prvInitialiseTaskLists+0x68>)
 800f4c8:	f7fe fae8 	bl	800da9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f4cc:	480c      	ldr	r0, [pc, #48]	; (800f500 <prvInitialiseTaskLists+0x6c>)
 800f4ce:	f7fe fae5 	bl	800da9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f4d2:	480c      	ldr	r0, [pc, #48]	; (800f504 <prvInitialiseTaskLists+0x70>)
 800f4d4:	f7fe fae2 	bl	800da9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f4d8:	480b      	ldr	r0, [pc, #44]	; (800f508 <prvInitialiseTaskLists+0x74>)
 800f4da:	f7fe fadf 	bl	800da9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f4de:	4b0b      	ldr	r3, [pc, #44]	; (800f50c <prvInitialiseTaskLists+0x78>)
 800f4e0:	4a05      	ldr	r2, [pc, #20]	; (800f4f8 <prvInitialiseTaskLists+0x64>)
 800f4e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f4e4:	4b0a      	ldr	r3, [pc, #40]	; (800f510 <prvInitialiseTaskLists+0x7c>)
 800f4e6:	4a05      	ldr	r2, [pc, #20]	; (800f4fc <prvInitialiseTaskLists+0x68>)
 800f4e8:	601a      	str	r2, [r3, #0]
}
 800f4ea:	bf00      	nop
 800f4ec:	3708      	adds	r7, #8
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	20002f30 	.word	0x20002f30
 800f4f8:	20003390 	.word	0x20003390
 800f4fc:	200033a4 	.word	0x200033a4
 800f500:	200033c0 	.word	0x200033c0
 800f504:	200033d4 	.word	0x200033d4
 800f508:	200033ec 	.word	0x200033ec
 800f50c:	200033b8 	.word	0x200033b8
 800f510:	200033bc 	.word	0x200033bc

0800f514 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f51a:	e019      	b.n	800f550 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f51c:	f000 ffea 	bl	80104f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f520:	4b10      	ldr	r3, [pc, #64]	; (800f564 <prvCheckTasksWaitingTermination+0x50>)
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3304      	adds	r3, #4
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7fe fb3f 	bl	800dbb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f532:	4b0d      	ldr	r3, [pc, #52]	; (800f568 <prvCheckTasksWaitingTermination+0x54>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	3b01      	subs	r3, #1
 800f538:	4a0b      	ldr	r2, [pc, #44]	; (800f568 <prvCheckTasksWaitingTermination+0x54>)
 800f53a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f53c:	4b0b      	ldr	r3, [pc, #44]	; (800f56c <prvCheckTasksWaitingTermination+0x58>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	3b01      	subs	r3, #1
 800f542:	4a0a      	ldr	r2, [pc, #40]	; (800f56c <prvCheckTasksWaitingTermination+0x58>)
 800f544:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f546:	f001 f805 	bl	8010554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 f8e4 	bl	800f718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f550:	4b06      	ldr	r3, [pc, #24]	; (800f56c <prvCheckTasksWaitingTermination+0x58>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1e1      	bne.n	800f51c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f558:	bf00      	nop
 800f55a:	bf00      	nop
 800f55c:	3708      	adds	r7, #8
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	200033d4 	.word	0x200033d4
 800f568:	20003400 	.word	0x20003400
 800f56c:	200033e8 	.word	0x200033e8

0800f570 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800f570:	b580      	push	{r7, lr}
 800f572:	b086      	sub	sp, #24
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
 800f57c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d102      	bne.n	800f58a <vTaskGetInfo+0x1a>
 800f584:	4b2c      	ldr	r3, [pc, #176]	; (800f638 <vTaskGetInfo+0xc8>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	e000      	b.n	800f58c <vTaskGetInfo+0x1c>
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	697a      	ldr	r2, [r7, #20]
 800f592:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800f5c6:	78fb      	ldrb	r3, [r7, #3]
 800f5c8:	2b05      	cmp	r3, #5
 800f5ca:	d01a      	beq.n	800f602 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800f5cc:	4b1a      	ldr	r3, [pc, #104]	; (800f638 <vTaskGetInfo+0xc8>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	697a      	ldr	r2, [r7, #20]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d103      	bne.n	800f5de <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	731a      	strb	r2, [r3, #12]
 800f5dc:	e018      	b.n	800f610 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	78fa      	ldrb	r2, [r7, #3]
 800f5e2:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800f5e4:	78fb      	ldrb	r3, [r7, #3]
 800f5e6:	2b03      	cmp	r3, #3
 800f5e8:	d112      	bne.n	800f610 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800f5ea:	f7ff fb7b 	bl	800ece4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d002      	beq.n	800f5fc <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	2202      	movs	r2, #2
 800f5fa:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800f5fc:	f7ff fb80 	bl	800ed00 <xTaskResumeAll>
 800f600:	e006      	b.n	800f610 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800f602:	6978      	ldr	r0, [r7, #20]
 800f604:	f7ff fa94 	bl	800eb30 <eTaskGetState>
 800f608:	4603      	mov	r3, r0
 800f60a:	461a      	mov	r2, r3
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d009      	beq.n	800f62a <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f61a:	4618      	mov	r0, r3
 800f61c:	f000 f860 	bl	800f6e0 <prvTaskCheckFreeStackSpace>
 800f620:	4603      	mov	r3, r0
 800f622:	461a      	mov	r2, r3
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800f628:	e002      	b.n	800f630 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	2200      	movs	r2, #0
 800f62e:	841a      	strh	r2, [r3, #32]
	}
 800f630:	bf00      	nop
 800f632:	3718      	adds	r7, #24
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	20002f2c 	.word	0x20002f2c

0800f63c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b08a      	sub	sp, #40	; 0x28
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	4613      	mov	r3, r2
 800f648:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800f64a:	2300      	movs	r3, #0
 800f64c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d03f      	beq.n	800f6d6 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	623b      	str	r3, [r7, #32]
 800f65a:	6a3b      	ldr	r3, [r7, #32]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	685a      	ldr	r2, [r3, #4]
 800f660:	6a3b      	ldr	r3, [r7, #32]
 800f662:	605a      	str	r2, [r3, #4]
 800f664:	6a3b      	ldr	r3, [r7, #32]
 800f666:	685a      	ldr	r2, [r3, #4]
 800f668:	6a3b      	ldr	r3, [r7, #32]
 800f66a:	3308      	adds	r3, #8
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d104      	bne.n	800f67a <prvListTasksWithinSingleList+0x3e>
 800f670:	6a3b      	ldr	r3, [r7, #32]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	685a      	ldr	r2, [r3, #4]
 800f676:	6a3b      	ldr	r3, [r7, #32]
 800f678:	605a      	str	r2, [r3, #4]
 800f67a:	6a3b      	ldr	r3, [r7, #32]
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	61bb      	str	r3, [r7, #24]
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	685a      	ldr	r2, [r3, #4]
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	605a      	str	r2, [r3, #4]
 800f690:	69bb      	ldr	r3, [r7, #24]
 800f692:	685a      	ldr	r2, [r3, #4]
 800f694:	69bb      	ldr	r3, [r7, #24]
 800f696:	3308      	adds	r3, #8
 800f698:	429a      	cmp	r2, r3
 800f69a:	d104      	bne.n	800f6a6 <prvListTasksWithinSingleList+0x6a>
 800f69c:	69bb      	ldr	r3, [r7, #24]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	685a      	ldr	r2, [r3, #4]
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	605a      	str	r2, [r3, #4]
 800f6a6:	69bb      	ldr	r3, [r7, #24]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800f6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6b0:	4613      	mov	r3, r2
 800f6b2:	00db      	lsls	r3, r3, #3
 800f6b4:	4413      	add	r3, r2
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	1899      	adds	r1, r3, r2
 800f6be:	79fb      	ldrb	r3, [r7, #7]
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	6978      	ldr	r0, [r7, #20]
 800f6c4:	f7ff ff54 	bl	800f570 <vTaskGetInfo>
				uxTask++;
 800f6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800f6ce:	697a      	ldr	r2, [r7, #20]
 800f6d0:	69fb      	ldr	r3, [r7, #28]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d1d5      	bne.n	800f682 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800f6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3728      	adds	r7, #40	; 0x28
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f6ec:	e005      	b.n	800f6fa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	2ba5      	cmp	r3, #165	; 0xa5
 800f700:	d0f5      	beq.n	800f6ee <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	089b      	lsrs	r3, r3, #2
 800f706:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	b29b      	uxth	r3, r3
	}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3714      	adds	r7, #20
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	3358      	adds	r3, #88	; 0x58
 800f724:	4618      	mov	r0, r3
 800f726:	f002 fd4b 	bl	80121c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800f730:	2b00      	cmp	r3, #0
 800f732:	d108      	bne.n	800f746 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f738:	4618      	mov	r0, r3
 800f73a:	f001 f8c9 	bl	80108d0 <vPortFree>
				vPortFree( pxTCB );
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f001 f8c6 	bl	80108d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f744:	e018      	b.n	800f778 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d103      	bne.n	800f758 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f001 f8bd 	bl	80108d0 <vPortFree>
	}
 800f756:	e00f      	b.n	800f778 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800f75e:	2b02      	cmp	r3, #2
 800f760:	d00a      	beq.n	800f778 <prvDeleteTCB+0x60>
	__asm volatile
 800f762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f766:	f383 8811 	msr	BASEPRI, r3
 800f76a:	f3bf 8f6f 	isb	sy
 800f76e:	f3bf 8f4f 	dsb	sy
 800f772:	60fb      	str	r3, [r7, #12]
}
 800f774:	bf00      	nop
 800f776:	e7fe      	b.n	800f776 <prvDeleteTCB+0x5e>
	}
 800f778:	bf00      	nop
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f780:	b480      	push	{r7}
 800f782:	b083      	sub	sp, #12
 800f784:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f786:	4b0c      	ldr	r3, [pc, #48]	; (800f7b8 <prvResetNextTaskUnblockTime+0x38>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d104      	bne.n	800f79a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f790:	4b0a      	ldr	r3, [pc, #40]	; (800f7bc <prvResetNextTaskUnblockTime+0x3c>)
 800f792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f796:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f798:	e008      	b.n	800f7ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f79a:	4b07      	ldr	r3, [pc, #28]	; (800f7b8 <prvResetNextTaskUnblockTime+0x38>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	4a04      	ldr	r2, [pc, #16]	; (800f7bc <prvResetNextTaskUnblockTime+0x3c>)
 800f7aa:	6013      	str	r3, [r2, #0]
}
 800f7ac:	bf00      	nop
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr
 800f7b8:	200033b8 	.word	0x200033b8
 800f7bc:	20003420 	.word	0x20003420

0800f7c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b083      	sub	sp, #12
 800f7c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f7c6:	4b0b      	ldr	r3, [pc, #44]	; (800f7f4 <xTaskGetSchedulerState+0x34>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d102      	bne.n	800f7d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	607b      	str	r3, [r7, #4]
 800f7d2:	e008      	b.n	800f7e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7d4:	4b08      	ldr	r3, [pc, #32]	; (800f7f8 <xTaskGetSchedulerState+0x38>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d102      	bne.n	800f7e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f7dc:	2302      	movs	r3, #2
 800f7de:	607b      	str	r3, [r7, #4]
 800f7e0:	e001      	b.n	800f7e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f7e6:	687b      	ldr	r3, [r7, #4]
	}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	370c      	adds	r7, #12
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f2:	4770      	bx	lr
 800f7f4:	2000340c 	.word	0x2000340c
 800f7f8:	20003428 	.word	0x20003428

0800f7fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f808:	2300      	movs	r3, #0
 800f80a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d056      	beq.n	800f8c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f812:	4b2e      	ldr	r3, [pc, #184]	; (800f8cc <xTaskPriorityDisinherit+0xd0>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	693a      	ldr	r2, [r7, #16]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d00a      	beq.n	800f832 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f820:	f383 8811 	msr	BASEPRI, r3
 800f824:	f3bf 8f6f 	isb	sy
 800f828:	f3bf 8f4f 	dsb	sy
 800f82c:	60fb      	str	r3, [r7, #12]
}
 800f82e:	bf00      	nop
 800f830:	e7fe      	b.n	800f830 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f836:	2b00      	cmp	r3, #0
 800f838:	d10a      	bne.n	800f850 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83e:	f383 8811 	msr	BASEPRI, r3
 800f842:	f3bf 8f6f 	isb	sy
 800f846:	f3bf 8f4f 	dsb	sy
 800f84a:	60bb      	str	r3, [r7, #8]
}
 800f84c:	bf00      	nop
 800f84e:	e7fe      	b.n	800f84e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f854:	1e5a      	subs	r2, r3, #1
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f862:	429a      	cmp	r2, r3
 800f864:	d02c      	beq.n	800f8c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d128      	bne.n	800f8c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	3304      	adds	r3, #4
 800f872:	4618      	mov	r0, r3
 800f874:	f7fe f99c 	bl	800dbb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f884:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f890:	4b0f      	ldr	r3, [pc, #60]	; (800f8d0 <xTaskPriorityDisinherit+0xd4>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	429a      	cmp	r2, r3
 800f896:	d903      	bls.n	800f8a0 <xTaskPriorityDisinherit+0xa4>
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f89c:	4a0c      	ldr	r2, [pc, #48]	; (800f8d0 <xTaskPriorityDisinherit+0xd4>)
 800f89e:	6013      	str	r3, [r2, #0]
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a4:	4613      	mov	r3, r2
 800f8a6:	009b      	lsls	r3, r3, #2
 800f8a8:	4413      	add	r3, r2
 800f8aa:	009b      	lsls	r3, r3, #2
 800f8ac:	4a09      	ldr	r2, [pc, #36]	; (800f8d4 <xTaskPriorityDisinherit+0xd8>)
 800f8ae:	441a      	add	r2, r3
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	3304      	adds	r3, #4
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	4610      	mov	r0, r2
 800f8b8:	f7fe f91d 	bl	800daf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8c0:	697b      	ldr	r3, [r7, #20]
	}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3718      	adds	r7, #24
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	20002f2c 	.word	0x20002f2c
 800f8d0:	20003408 	.word	0x20003408
 800f8d4:	20002f30 	.word	0x20002f30

0800f8d8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f8e2:	6839      	ldr	r1, [r7, #0]
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f002 fd49 	bl	801237c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f7f0 fc70 	bl	80001d0 <strlen>
 800f8f0:	60f8      	str	r0, [r7, #12]
 800f8f2:	e007      	b.n	800f904 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	4413      	add	r3, r2
 800f8fa:	2220      	movs	r2, #32
 800f8fc:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	3301      	adds	r3, #1
 800f902:	60fb      	str	r3, [r7, #12]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2b0e      	cmp	r3, #14
 800f908:	d9f4      	bls.n	800f8f4 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800f90a:	687a      	ldr	r2, [r7, #4]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	4413      	add	r3, r2
 800f910:	2200      	movs	r2, #0
 800f912:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	4413      	add	r3, r2
	}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3710      	adds	r7, #16
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
	...

0800f924 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f924:	b590      	push	{r4, r7, lr}
 800f926:	b089      	sub	sp, #36	; 0x24
 800f928:	af02      	add	r7, sp, #8
 800f92a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f932:	4b45      	ldr	r3, [pc, #276]	; (800fa48 <vTaskList+0x124>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800f938:	4b43      	ldr	r3, [pc, #268]	; (800fa48 <vTaskList+0x124>)
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	4613      	mov	r3, r2
 800f93e:	00db      	lsls	r3, r3, #3
 800f940:	4413      	add	r3, r2
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	4618      	mov	r0, r3
 800f946:	f000 fef7 	bl	8010738 <pvPortMalloc>
 800f94a:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d076      	beq.n	800fa40 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f952:	2200      	movs	r2, #0
 800f954:	68f9      	ldr	r1, [r7, #12]
 800f956:	68b8      	ldr	r0, [r7, #8]
 800f958:	f7ff fa80 	bl	800ee5c <uxTaskGetSystemState>
 800f95c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f95e:	2300      	movs	r3, #0
 800f960:	617b      	str	r3, [r7, #20]
 800f962:	e066      	b.n	800fa32 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f964:	697a      	ldr	r2, [r7, #20]
 800f966:	4613      	mov	r3, r2
 800f968:	00db      	lsls	r3, r3, #3
 800f96a:	4413      	add	r3, r2
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	461a      	mov	r2, r3
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	4413      	add	r3, r2
 800f974:	7b1b      	ldrb	r3, [r3, #12]
 800f976:	2b04      	cmp	r3, #4
 800f978:	d81b      	bhi.n	800f9b2 <vTaskList+0x8e>
 800f97a:	a201      	add	r2, pc, #4	; (adr r2, 800f980 <vTaskList+0x5c>)
 800f97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f980:	0800f995 	.word	0x0800f995
 800f984:	0800f99b 	.word	0x0800f99b
 800f988:	0800f9a1 	.word	0x0800f9a1
 800f98c:	0800f9a7 	.word	0x0800f9a7
 800f990:	0800f9ad 	.word	0x0800f9ad
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800f994:	2358      	movs	r3, #88	; 0x58
 800f996:	74fb      	strb	r3, [r7, #19]
										break;
 800f998:	e00e      	b.n	800f9b8 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800f99a:	2352      	movs	r3, #82	; 0x52
 800f99c:	74fb      	strb	r3, [r7, #19]
										break;
 800f99e:	e00b      	b.n	800f9b8 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800f9a0:	2342      	movs	r3, #66	; 0x42
 800f9a2:	74fb      	strb	r3, [r7, #19]
										break;
 800f9a4:	e008      	b.n	800f9b8 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f9a6:	2353      	movs	r3, #83	; 0x53
 800f9a8:	74fb      	strb	r3, [r7, #19]
										break;
 800f9aa:	e005      	b.n	800f9b8 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f9ac:	2344      	movs	r3, #68	; 0x44
 800f9ae:	74fb      	strb	r3, [r7, #19]
										break;
 800f9b0:	e002      	b.n	800f9b8 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	74fb      	strb	r3, [r7, #19]
										break;
 800f9b6:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f9b8:	697a      	ldr	r2, [r7, #20]
 800f9ba:	4613      	mov	r3, r2
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	4413      	add	r3, r2
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	4413      	add	r3, r2
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7ff ff83 	bl	800f8d8 <prvWriteNameToBuffer>
 800f9d2:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800f9d4:	7cf9      	ldrb	r1, [r7, #19]
 800f9d6:	697a      	ldr	r2, [r7, #20]
 800f9d8:	4613      	mov	r3, r2
 800f9da:	00db      	lsls	r3, r3, #3
 800f9dc:	4413      	add	r3, r2
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	461a      	mov	r2, r3
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	6918      	ldr	r0, [r3, #16]
 800f9e8:	697a      	ldr	r2, [r7, #20]
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	00db      	lsls	r3, r3, #3
 800f9ee:	4413      	add	r3, r2
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	8c1b      	ldrh	r3, [r3, #32]
 800f9fa:	461c      	mov	r4, r3
 800f9fc:	697a      	ldr	r2, [r7, #20]
 800f9fe:	4613      	mov	r3, r2
 800fa00:	00db      	lsls	r3, r3, #3
 800fa02:	4413      	add	r3, r2
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	461a      	mov	r2, r3
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	689b      	ldr	r3, [r3, #8]
 800fa0e:	9301      	str	r3, [sp, #4]
 800fa10:	9400      	str	r4, [sp, #0]
 800fa12:	4603      	mov	r3, r0
 800fa14:	460a      	mov	r2, r1
 800fa16:	490d      	ldr	r1, [pc, #52]	; (800fa4c <vTaskList+0x128>)
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f002 fc3d 	bl	8012298 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f7f0 fbd6 	bl	80001d0 <strlen>
 800fa24:	4602      	mov	r2, r0
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4413      	add	r3, r2
 800fa2a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	3301      	adds	r3, #1
 800fa30:	617b      	str	r3, [r7, #20]
 800fa32:	697a      	ldr	r2, [r7, #20]
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d394      	bcc.n	800f964 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800fa3a:	68b8      	ldr	r0, [r7, #8]
 800fa3c:	f000 ff48 	bl	80108d0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa40:	bf00      	nop
 800fa42:	371c      	adds	r7, #28
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd90      	pop	{r4, r7, pc}
 800fa48:	20003400 	.word	0x20003400
 800fa4c:	08014724 	.word	0x08014724

0800fa50 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b088      	sub	sp, #32
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fa5e:	4b3a      	ldr	r3, [pc, #232]	; (800fb48 <vTaskGetRunTimeStats+0xf8>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800fa64:	4b38      	ldr	r3, [pc, #224]	; (800fb48 <vTaskGetRunTimeStats+0xf8>)
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	4613      	mov	r3, r2
 800fa6a:	00db      	lsls	r3, r3, #3
 800fa6c:	4413      	add	r3, r2
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	4618      	mov	r0, r3
 800fa72:	f000 fe61 	bl	8010738 <pvPortMalloc>
 800fa76:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d05f      	beq.n	800fb3e <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800fa7e:	f107 030c 	add.w	r3, r7, #12
 800fa82:	461a      	mov	r2, r3
 800fa84:	69b9      	ldr	r1, [r7, #24]
 800fa86:	6978      	ldr	r0, [r7, #20]
 800fa88:	f7ff f9e8 	bl	800ee5c <uxTaskGetSystemState>
 800fa8c:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	4a2e      	ldr	r2, [pc, #184]	; (800fb4c <vTaskGetRunTimeStats+0xfc>)
 800fa92:	fba2 2303 	umull	r2, r3, r2, r3
 800fa96:	095b      	lsrs	r3, r3, #5
 800fa98:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d04b      	beq.n	800fb38 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800faa0:	2300      	movs	r3, #0
 800faa2:	61fb      	str	r3, [r7, #28]
 800faa4:	e044      	b.n	800fb30 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800faa6:	69fa      	ldr	r2, [r7, #28]
 800faa8:	4613      	mov	r3, r2
 800faaa:	00db      	lsls	r3, r3, #3
 800faac:	4413      	add	r3, r2
 800faae:	009b      	lsls	r3, r3, #2
 800fab0:	461a      	mov	r2, r3
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	4413      	add	r3, r2
 800fab6:	699a      	ldr	r2, [r3, #24]
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	fbb2 f3f3 	udiv	r3, r2, r3
 800fabe:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fac0:	69fa      	ldr	r2, [r7, #28]
 800fac2:	4613      	mov	r3, r2
 800fac4:	00db      	lsls	r3, r3, #3
 800fac6:	4413      	add	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	461a      	mov	r2, r3
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	4413      	add	r3, r2
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	4619      	mov	r1, r3
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7ff feff 	bl	800f8d8 <prvWriteNameToBuffer>
 800fada:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d00e      	beq.n	800fb00 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800fae2:	69fa      	ldr	r2, [r7, #28]
 800fae4:	4613      	mov	r3, r2
 800fae6:	00db      	lsls	r3, r3, #3
 800fae8:	4413      	add	r3, r2
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	461a      	mov	r2, r3
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	4413      	add	r3, r2
 800faf2:	699a      	ldr	r2, [r3, #24]
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	4916      	ldr	r1, [pc, #88]	; (800fb50 <vTaskGetRunTimeStats+0x100>)
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f002 fbcd 	bl	8012298 <siprintf>
 800fafe:	e00d      	b.n	800fb1c <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800fb00:	69fa      	ldr	r2, [r7, #28]
 800fb02:	4613      	mov	r3, r2
 800fb04:	00db      	lsls	r3, r3, #3
 800fb06:	4413      	add	r3, r2
 800fb08:	009b      	lsls	r3, r3, #2
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	4413      	add	r3, r2
 800fb10:	699b      	ldr	r3, [r3, #24]
 800fb12:	461a      	mov	r2, r3
 800fb14:	490f      	ldr	r1, [pc, #60]	; (800fb54 <vTaskGetRunTimeStats+0x104>)
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f002 fbbe 	bl	8012298 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7f0 fb57 	bl	80001d0 <strlen>
 800fb22:	4602      	mov	r2, r0
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	4413      	add	r3, r2
 800fb28:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	61fb      	str	r3, [r7, #28]
 800fb30:	69fa      	ldr	r2, [r7, #28]
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d3b6      	bcc.n	800faa6 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800fb38:	6978      	ldr	r0, [r7, #20]
 800fb3a:	f000 fec9 	bl	80108d0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fb3e:	bf00      	nop
 800fb40:	3720      	adds	r7, #32
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	20003400 	.word	0x20003400
 800fb4c:	51eb851f 	.word	0x51eb851f
 800fb50:	08014734 	.word	0x08014734
 800fb54:	08014740 	.word	0x08014740

0800fb58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fb62:	4b21      	ldr	r3, [pc, #132]	; (800fbe8 <prvAddCurrentTaskToDelayedList+0x90>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb68:	4b20      	ldr	r3, [pc, #128]	; (800fbec <prvAddCurrentTaskToDelayedList+0x94>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	3304      	adds	r3, #4
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7fe f81e 	bl	800dbb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb7a:	d10a      	bne.n	800fb92 <prvAddCurrentTaskToDelayedList+0x3a>
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d007      	beq.n	800fb92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb82:	4b1a      	ldr	r3, [pc, #104]	; (800fbec <prvAddCurrentTaskToDelayedList+0x94>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3304      	adds	r3, #4
 800fb88:	4619      	mov	r1, r3
 800fb8a:	4819      	ldr	r0, [pc, #100]	; (800fbf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800fb8c:	f7fd ffb3 	bl	800daf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fb90:	e026      	b.n	800fbe0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fb92:	68fa      	ldr	r2, [r7, #12]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	4413      	add	r3, r2
 800fb98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fb9a:	4b14      	ldr	r3, [pc, #80]	; (800fbec <prvAddCurrentTaskToDelayedList+0x94>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	68ba      	ldr	r2, [r7, #8]
 800fba0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fba2:	68ba      	ldr	r2, [r7, #8]
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d209      	bcs.n	800fbbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbaa:	4b12      	ldr	r3, [pc, #72]	; (800fbf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	4b0f      	ldr	r3, [pc, #60]	; (800fbec <prvAddCurrentTaskToDelayedList+0x94>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	3304      	adds	r3, #4
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	4610      	mov	r0, r2
 800fbb8:	f7fd ffc1 	bl	800db3e <vListInsert>
}
 800fbbc:	e010      	b.n	800fbe0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbbe:	4b0e      	ldr	r3, [pc, #56]	; (800fbf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fbc0:	681a      	ldr	r2, [r3, #0]
 800fbc2:	4b0a      	ldr	r3, [pc, #40]	; (800fbec <prvAddCurrentTaskToDelayedList+0x94>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	3304      	adds	r3, #4
 800fbc8:	4619      	mov	r1, r3
 800fbca:	4610      	mov	r0, r2
 800fbcc:	f7fd ffb7 	bl	800db3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fbd0:	4b0a      	ldr	r3, [pc, #40]	; (800fbfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	68ba      	ldr	r2, [r7, #8]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d202      	bcs.n	800fbe0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fbda:	4a08      	ldr	r2, [pc, #32]	; (800fbfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	6013      	str	r3, [r2, #0]
}
 800fbe0:	bf00      	nop
 800fbe2:	3710      	adds	r7, #16
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	20003404 	.word	0x20003404
 800fbec:	20002f2c 	.word	0x20002f2c
 800fbf0:	200033ec 	.word	0x200033ec
 800fbf4:	200033bc 	.word	0x200033bc
 800fbf8:	200033b8 	.word	0x200033b8
 800fbfc:	20003420 	.word	0x20003420

0800fc00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b08a      	sub	sp, #40	; 0x28
 800fc04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fc06:	2300      	movs	r3, #0
 800fc08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fc0a:	f000 fb07 	bl	801021c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fc0e:	4b1c      	ldr	r3, [pc, #112]	; (800fc80 <xTimerCreateTimerTask+0x80>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d021      	beq.n	800fc5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fc16:	2300      	movs	r3, #0
 800fc18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fc1e:	1d3a      	adds	r2, r7, #4
 800fc20:	f107 0108 	add.w	r1, r7, #8
 800fc24:	f107 030c 	add.w	r3, r7, #12
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fd ff1d 	bl	800da68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fc2e:	6879      	ldr	r1, [r7, #4]
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	68fa      	ldr	r2, [r7, #12]
 800fc34:	9202      	str	r2, [sp, #8]
 800fc36:	9301      	str	r3, [sp, #4]
 800fc38:	2302      	movs	r3, #2
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	460a      	mov	r2, r1
 800fc40:	4910      	ldr	r1, [pc, #64]	; (800fc84 <xTimerCreateTimerTask+0x84>)
 800fc42:	4811      	ldr	r0, [pc, #68]	; (800fc88 <xTimerCreateTimerTask+0x88>)
 800fc44:	f7fe fd84 	bl	800e750 <xTaskCreateStatic>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	4a10      	ldr	r2, [pc, #64]	; (800fc8c <xTimerCreateTimerTask+0x8c>)
 800fc4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fc4e:	4b0f      	ldr	r3, [pc, #60]	; (800fc8c <xTimerCreateTimerTask+0x8c>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d001      	beq.n	800fc5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fc56:	2301      	movs	r3, #1
 800fc58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d10a      	bne.n	800fc76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc64:	f383 8811 	msr	BASEPRI, r3
 800fc68:	f3bf 8f6f 	isb	sy
 800fc6c:	f3bf 8f4f 	dsb	sy
 800fc70:	613b      	str	r3, [r7, #16]
}
 800fc72:	bf00      	nop
 800fc74:	e7fe      	b.n	800fc74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fc76:	697b      	ldr	r3, [r7, #20]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3718      	adds	r7, #24
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	20003464 	.word	0x20003464
 800fc84:	0801474c 	.word	0x0801474c
 800fc88:	0800fdc5 	.word	0x0800fdc5
 800fc8c:	20003468 	.word	0x20003468

0800fc90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b08a      	sub	sp, #40	; 0x28
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	607a      	str	r2, [r7, #4]
 800fc9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d10a      	bne.n	800fcbe <xTimerGenericCommand+0x2e>
	__asm volatile
 800fca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcac:	f383 8811 	msr	BASEPRI, r3
 800fcb0:	f3bf 8f6f 	isb	sy
 800fcb4:	f3bf 8f4f 	dsb	sy
 800fcb8:	623b      	str	r3, [r7, #32]
}
 800fcba:	bf00      	nop
 800fcbc:	e7fe      	b.n	800fcbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fcbe:	4b1a      	ldr	r3, [pc, #104]	; (800fd28 <xTimerGenericCommand+0x98>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d02a      	beq.n	800fd1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	2b05      	cmp	r3, #5
 800fcd6:	dc18      	bgt.n	800fd0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fcd8:	f7ff fd72 	bl	800f7c0 <xTaskGetSchedulerState>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b02      	cmp	r3, #2
 800fce0:	d109      	bne.n	800fcf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fce2:	4b11      	ldr	r3, [pc, #68]	; (800fd28 <xTimerGenericCommand+0x98>)
 800fce4:	6818      	ldr	r0, [r3, #0]
 800fce6:	f107 0110 	add.w	r1, r7, #16
 800fcea:	2300      	movs	r3, #0
 800fcec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcee:	f7fe f8c7 	bl	800de80 <xQueueGenericSend>
 800fcf2:	6278      	str	r0, [r7, #36]	; 0x24
 800fcf4:	e012      	b.n	800fd1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fcf6:	4b0c      	ldr	r3, [pc, #48]	; (800fd28 <xTimerGenericCommand+0x98>)
 800fcf8:	6818      	ldr	r0, [r3, #0]
 800fcfa:	f107 0110 	add.w	r1, r7, #16
 800fcfe:	2300      	movs	r3, #0
 800fd00:	2200      	movs	r2, #0
 800fd02:	f7fe f8bd 	bl	800de80 <xQueueGenericSend>
 800fd06:	6278      	str	r0, [r7, #36]	; 0x24
 800fd08:	e008      	b.n	800fd1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fd0a:	4b07      	ldr	r3, [pc, #28]	; (800fd28 <xTimerGenericCommand+0x98>)
 800fd0c:	6818      	ldr	r0, [r3, #0]
 800fd0e:	f107 0110 	add.w	r1, r7, #16
 800fd12:	2300      	movs	r3, #0
 800fd14:	683a      	ldr	r2, [r7, #0]
 800fd16:	f7fe f9b1 	bl	800e07c <xQueueGenericSendFromISR>
 800fd1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3728      	adds	r7, #40	; 0x28
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	20003464 	.word	0x20003464

0800fd2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b088      	sub	sp, #32
 800fd30:	af02      	add	r7, sp, #8
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd36:	4b22      	ldr	r3, [pc, #136]	; (800fdc0 <prvProcessExpiredTimer+0x94>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	68db      	ldr	r3, [r3, #12]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	3304      	adds	r3, #4
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7fd ff33 	bl	800dbb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd50:	f003 0304 	and.w	r3, r3, #4
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d022      	beq.n	800fd9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	699a      	ldr	r2, [r3, #24]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	18d1      	adds	r1, r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	683a      	ldr	r2, [r7, #0]
 800fd64:	6978      	ldr	r0, [r7, #20]
 800fd66:	f000 f8d1 	bl	800ff0c <prvInsertTimerInActiveList>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d01f      	beq.n	800fdb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fd70:	2300      	movs	r3, #0
 800fd72:	9300      	str	r3, [sp, #0]
 800fd74:	2300      	movs	r3, #0
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	2100      	movs	r1, #0
 800fd7a:	6978      	ldr	r0, [r7, #20]
 800fd7c:	f7ff ff88 	bl	800fc90 <xTimerGenericCommand>
 800fd80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d113      	bne.n	800fdb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8c:	f383 8811 	msr	BASEPRI, r3
 800fd90:	f3bf 8f6f 	isb	sy
 800fd94:	f3bf 8f4f 	dsb	sy
 800fd98:	60fb      	str	r3, [r7, #12]
}
 800fd9a:	bf00      	nop
 800fd9c:	e7fe      	b.n	800fd9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fda4:	f023 0301 	bic.w	r3, r3, #1
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	6a1b      	ldr	r3, [r3, #32]
 800fdb4:	6978      	ldr	r0, [r7, #20]
 800fdb6:	4798      	blx	r3
}
 800fdb8:	bf00      	nop
 800fdba:	3718      	adds	r7, #24
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	2000345c 	.word	0x2000345c

0800fdc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fdcc:	f107 0308 	add.w	r3, r7, #8
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f000 f857 	bl	800fe84 <prvGetNextExpireTime>
 800fdd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	4619      	mov	r1, r3
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f000 f803 	bl	800fde8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fde2:	f000 f8d5 	bl	800ff90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fde6:	e7f1      	b.n	800fdcc <prvTimerTask+0x8>

0800fde8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b084      	sub	sp, #16
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fdf2:	f7fe ff77 	bl	800ece4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fdf6:	f107 0308 	add.w	r3, r7, #8
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f000 f866 	bl	800fecc <prvSampleTimeNow>
 800fe00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d130      	bne.n	800fe6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d10a      	bne.n	800fe24 <prvProcessTimerOrBlockTask+0x3c>
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d806      	bhi.n	800fe24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fe16:	f7fe ff73 	bl	800ed00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fe1a:	68f9      	ldr	r1, [r7, #12]
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f7ff ff85 	bl	800fd2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fe22:	e024      	b.n	800fe6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d008      	beq.n	800fe3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fe2a:	4b13      	ldr	r3, [pc, #76]	; (800fe78 <prvProcessTimerOrBlockTask+0x90>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d101      	bne.n	800fe38 <prvProcessTimerOrBlockTask+0x50>
 800fe34:	2301      	movs	r3, #1
 800fe36:	e000      	b.n	800fe3a <prvProcessTimerOrBlockTask+0x52>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fe3c:	4b0f      	ldr	r3, [pc, #60]	; (800fe7c <prvProcessTimerOrBlockTask+0x94>)
 800fe3e:	6818      	ldr	r0, [r3, #0]
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	683a      	ldr	r2, [r7, #0]
 800fe48:	4619      	mov	r1, r3
 800fe4a:	f7fe fc4d 	bl	800e6e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fe4e:	f7fe ff57 	bl	800ed00 <xTaskResumeAll>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d10a      	bne.n	800fe6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fe58:	4b09      	ldr	r3, [pc, #36]	; (800fe80 <prvProcessTimerOrBlockTask+0x98>)
 800fe5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe5e:	601a      	str	r2, [r3, #0]
 800fe60:	f3bf 8f4f 	dsb	sy
 800fe64:	f3bf 8f6f 	isb	sy
}
 800fe68:	e001      	b.n	800fe6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fe6a:	f7fe ff49 	bl	800ed00 <xTaskResumeAll>
}
 800fe6e:	bf00      	nop
 800fe70:	3710      	adds	r7, #16
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	20003460 	.word	0x20003460
 800fe7c:	20003464 	.word	0x20003464
 800fe80:	e000ed04 	.word	0xe000ed04

0800fe84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fe84:	b480      	push	{r7}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fe8c:	4b0e      	ldr	r3, [pc, #56]	; (800fec8 <prvGetNextExpireTime+0x44>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d101      	bne.n	800fe9a <prvGetNextExpireTime+0x16>
 800fe96:	2201      	movs	r2, #1
 800fe98:	e000      	b.n	800fe9c <prvGetNextExpireTime+0x18>
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d105      	bne.n	800feb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fea8:	4b07      	ldr	r3, [pc, #28]	; (800fec8 <prvGetNextExpireTime+0x44>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	60fb      	str	r3, [r7, #12]
 800feb2:	e001      	b.n	800feb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800feb4:	2300      	movs	r3, #0
 800feb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800feb8:	68fb      	ldr	r3, [r7, #12]
}
 800feba:	4618      	mov	r0, r3
 800febc:	3714      	adds	r7, #20
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr
 800fec6:	bf00      	nop
 800fec8:	2000345c 	.word	0x2000345c

0800fecc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b084      	sub	sp, #16
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fed4:	f7fe ffb2 	bl	800ee3c <xTaskGetTickCount>
 800fed8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800feda:	4b0b      	ldr	r3, [pc, #44]	; (800ff08 <prvSampleTimeNow+0x3c>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	68fa      	ldr	r2, [r7, #12]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d205      	bcs.n	800fef0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fee4:	f000 f936 	bl	8010154 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2201      	movs	r2, #1
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	e002      	b.n	800fef6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2200      	movs	r2, #0
 800fef4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fef6:	4a04      	ldr	r2, [pc, #16]	; (800ff08 <prvSampleTimeNow+0x3c>)
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fefc:	68fb      	ldr	r3, [r7, #12]
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3710      	adds	r7, #16
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	2000346c 	.word	0x2000346c

0800ff0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b086      	sub	sp, #24
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	607a      	str	r2, [r7, #4]
 800ff18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	68ba      	ldr	r2, [r7, #8]
 800ff22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	68fa      	ldr	r2, [r7, #12]
 800ff28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ff2a:	68ba      	ldr	r2, [r7, #8]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d812      	bhi.n	800ff58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	1ad2      	subs	r2, r2, r3
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d302      	bcc.n	800ff46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ff40:	2301      	movs	r3, #1
 800ff42:	617b      	str	r3, [r7, #20]
 800ff44:	e01b      	b.n	800ff7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ff46:	4b10      	ldr	r3, [pc, #64]	; (800ff88 <prvInsertTimerInActiveList+0x7c>)
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	3304      	adds	r3, #4
 800ff4e:	4619      	mov	r1, r3
 800ff50:	4610      	mov	r0, r2
 800ff52:	f7fd fdf4 	bl	800db3e <vListInsert>
 800ff56:	e012      	b.n	800ff7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d206      	bcs.n	800ff6e <prvInsertTimerInActiveList+0x62>
 800ff60:	68ba      	ldr	r2, [r7, #8]
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d302      	bcc.n	800ff6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	617b      	str	r3, [r7, #20]
 800ff6c:	e007      	b.n	800ff7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff6e:	4b07      	ldr	r3, [pc, #28]	; (800ff8c <prvInsertTimerInActiveList+0x80>)
 800ff70:	681a      	ldr	r2, [r3, #0]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	3304      	adds	r3, #4
 800ff76:	4619      	mov	r1, r3
 800ff78:	4610      	mov	r0, r2
 800ff7a:	f7fd fde0 	bl	800db3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ff7e:	697b      	ldr	r3, [r7, #20]
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3718      	adds	r7, #24
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	20003460 	.word	0x20003460
 800ff8c:	2000345c 	.word	0x2000345c

0800ff90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b08e      	sub	sp, #56	; 0x38
 800ff94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff96:	e0ca      	b.n	801012e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	da18      	bge.n	800ffd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ff9e:	1d3b      	adds	r3, r7, #4
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ffa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d10a      	bne.n	800ffc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ffaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffae:	f383 8811 	msr	BASEPRI, r3
 800ffb2:	f3bf 8f6f 	isb	sy
 800ffb6:	f3bf 8f4f 	dsb	sy
 800ffba:	61fb      	str	r3, [r7, #28]
}
 800ffbc:	bf00      	nop
 800ffbe:	e7fe      	b.n	800ffbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ffc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffc6:	6850      	ldr	r0, [r2, #4]
 800ffc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffca:	6892      	ldr	r2, [r2, #8]
 800ffcc:	4611      	mov	r1, r2
 800ffce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	f2c0 80aa 	blt.w	801012c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ffdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffde:	695b      	ldr	r3, [r3, #20]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d004      	beq.n	800ffee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ffe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe6:	3304      	adds	r3, #4
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7fd fde1 	bl	800dbb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ffee:	463b      	mov	r3, r7
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7ff ff6b 	bl	800fecc <prvSampleTimeNow>
 800fff6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2b09      	cmp	r3, #9
 800fffc:	f200 8097 	bhi.w	801012e <prvProcessReceivedCommands+0x19e>
 8010000:	a201      	add	r2, pc, #4	; (adr r2, 8010008 <prvProcessReceivedCommands+0x78>)
 8010002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010006:	bf00      	nop
 8010008:	08010031 	.word	0x08010031
 801000c:	08010031 	.word	0x08010031
 8010010:	08010031 	.word	0x08010031
 8010014:	080100a5 	.word	0x080100a5
 8010018:	080100b9 	.word	0x080100b9
 801001c:	08010103 	.word	0x08010103
 8010020:	08010031 	.word	0x08010031
 8010024:	08010031 	.word	0x08010031
 8010028:	080100a5 	.word	0x080100a5
 801002c:	080100b9 	.word	0x080100b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010036:	f043 0301 	orr.w	r3, r3, #1
 801003a:	b2da      	uxtb	r2, r3
 801003c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010042:	68ba      	ldr	r2, [r7, #8]
 8010044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010046:	699b      	ldr	r3, [r3, #24]
 8010048:	18d1      	adds	r1, r2, r3
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801004e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010050:	f7ff ff5c 	bl	800ff0c <prvInsertTimerInActiveList>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d069      	beq.n	801012e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801005a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801005c:	6a1b      	ldr	r3, [r3, #32]
 801005e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010060:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010068:	f003 0304 	and.w	r3, r3, #4
 801006c:	2b00      	cmp	r3, #0
 801006e:	d05e      	beq.n	801012e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010070:	68ba      	ldr	r2, [r7, #8]
 8010072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010074:	699b      	ldr	r3, [r3, #24]
 8010076:	441a      	add	r2, r3
 8010078:	2300      	movs	r3, #0
 801007a:	9300      	str	r3, [sp, #0]
 801007c:	2300      	movs	r3, #0
 801007e:	2100      	movs	r1, #0
 8010080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010082:	f7ff fe05 	bl	800fc90 <xTimerGenericCommand>
 8010086:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010088:	6a3b      	ldr	r3, [r7, #32]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d14f      	bne.n	801012e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801008e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010092:	f383 8811 	msr	BASEPRI, r3
 8010096:	f3bf 8f6f 	isb	sy
 801009a:	f3bf 8f4f 	dsb	sy
 801009e:	61bb      	str	r3, [r7, #24]
}
 80100a0:	bf00      	nop
 80100a2:	e7fe      	b.n	80100a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80100a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100aa:	f023 0301 	bic.w	r3, r3, #1
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80100b6:	e03a      	b.n	801012e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80100b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100be:	f043 0301 	orr.w	r3, r3, #1
 80100c2:	b2da      	uxtb	r2, r3
 80100c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80100ca:	68ba      	ldr	r2, [r7, #8]
 80100cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80100d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d2:	699b      	ldr	r3, [r3, #24]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d10a      	bne.n	80100ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80100d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100dc:	f383 8811 	msr	BASEPRI, r3
 80100e0:	f3bf 8f6f 	isb	sy
 80100e4:	f3bf 8f4f 	dsb	sy
 80100e8:	617b      	str	r3, [r7, #20]
}
 80100ea:	bf00      	nop
 80100ec:	e7fe      	b.n	80100ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80100ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f0:	699a      	ldr	r2, [r3, #24]
 80100f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f4:	18d1      	adds	r1, r2, r3
 80100f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100fc:	f7ff ff06 	bl	800ff0c <prvInsertTimerInActiveList>
					break;
 8010100:	e015      	b.n	801012e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010108:	f003 0302 	and.w	r3, r3, #2
 801010c:	2b00      	cmp	r3, #0
 801010e:	d103      	bne.n	8010118 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010112:	f000 fbdd 	bl	80108d0 <vPortFree>
 8010116:	e00a      	b.n	801012e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801011e:	f023 0301 	bic.w	r3, r3, #1
 8010122:	b2da      	uxtb	r2, r3
 8010124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801012a:	e000      	b.n	801012e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801012c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801012e:	4b08      	ldr	r3, [pc, #32]	; (8010150 <prvProcessReceivedCommands+0x1c0>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	1d39      	adds	r1, r7, #4
 8010134:	2200      	movs	r2, #0
 8010136:	4618      	mov	r0, r3
 8010138:	f7fe f83c 	bl	800e1b4 <xQueueReceive>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	f47f af2a 	bne.w	800ff98 <prvProcessReceivedCommands+0x8>
	}
}
 8010144:	bf00      	nop
 8010146:	bf00      	nop
 8010148:	3730      	adds	r7, #48	; 0x30
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
 801014e:	bf00      	nop
 8010150:	20003464 	.word	0x20003464

08010154 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b088      	sub	sp, #32
 8010158:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801015a:	e048      	b.n	80101ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801015c:	4b2d      	ldr	r3, [pc, #180]	; (8010214 <prvSwitchTimerLists+0xc0>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010166:	4b2b      	ldr	r3, [pc, #172]	; (8010214 <prvSwitchTimerLists+0xc0>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	68db      	ldr	r3, [r3, #12]
 801016e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	3304      	adds	r3, #4
 8010174:	4618      	mov	r0, r3
 8010176:	f7fd fd1b 	bl	800dbb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	6a1b      	ldr	r3, [r3, #32]
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010188:	f003 0304 	and.w	r3, r3, #4
 801018c:	2b00      	cmp	r3, #0
 801018e:	d02e      	beq.n	80101ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	699b      	ldr	r3, [r3, #24]
 8010194:	693a      	ldr	r2, [r7, #16]
 8010196:	4413      	add	r3, r2
 8010198:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801019a:	68ba      	ldr	r2, [r7, #8]
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d90e      	bls.n	80101c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	68fa      	ldr	r2, [r7, #12]
 80101ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80101ae:	4b19      	ldr	r3, [pc, #100]	; (8010214 <prvSwitchTimerLists+0xc0>)
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	3304      	adds	r3, #4
 80101b6:	4619      	mov	r1, r3
 80101b8:	4610      	mov	r0, r2
 80101ba:	f7fd fcc0 	bl	800db3e <vListInsert>
 80101be:	e016      	b.n	80101ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80101c0:	2300      	movs	r3, #0
 80101c2:	9300      	str	r3, [sp, #0]
 80101c4:	2300      	movs	r3, #0
 80101c6:	693a      	ldr	r2, [r7, #16]
 80101c8:	2100      	movs	r1, #0
 80101ca:	68f8      	ldr	r0, [r7, #12]
 80101cc:	f7ff fd60 	bl	800fc90 <xTimerGenericCommand>
 80101d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d10a      	bne.n	80101ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80101d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101dc:	f383 8811 	msr	BASEPRI, r3
 80101e0:	f3bf 8f6f 	isb	sy
 80101e4:	f3bf 8f4f 	dsb	sy
 80101e8:	603b      	str	r3, [r7, #0]
}
 80101ea:	bf00      	nop
 80101ec:	e7fe      	b.n	80101ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80101ee:	4b09      	ldr	r3, [pc, #36]	; (8010214 <prvSwitchTimerLists+0xc0>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d1b1      	bne.n	801015c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80101f8:	4b06      	ldr	r3, [pc, #24]	; (8010214 <prvSwitchTimerLists+0xc0>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80101fe:	4b06      	ldr	r3, [pc, #24]	; (8010218 <prvSwitchTimerLists+0xc4>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4a04      	ldr	r2, [pc, #16]	; (8010214 <prvSwitchTimerLists+0xc0>)
 8010204:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010206:	4a04      	ldr	r2, [pc, #16]	; (8010218 <prvSwitchTimerLists+0xc4>)
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	6013      	str	r3, [r2, #0]
}
 801020c:	bf00      	nop
 801020e:	3718      	adds	r7, #24
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	2000345c 	.word	0x2000345c
 8010218:	20003460 	.word	0x20003460

0801021c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010222:	f000 f967 	bl	80104f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010226:	4b15      	ldr	r3, [pc, #84]	; (801027c <prvCheckForValidListAndQueue+0x60>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d120      	bne.n	8010270 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801022e:	4814      	ldr	r0, [pc, #80]	; (8010280 <prvCheckForValidListAndQueue+0x64>)
 8010230:	f7fd fc34 	bl	800da9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010234:	4813      	ldr	r0, [pc, #76]	; (8010284 <prvCheckForValidListAndQueue+0x68>)
 8010236:	f7fd fc31 	bl	800da9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801023a:	4b13      	ldr	r3, [pc, #76]	; (8010288 <prvCheckForValidListAndQueue+0x6c>)
 801023c:	4a10      	ldr	r2, [pc, #64]	; (8010280 <prvCheckForValidListAndQueue+0x64>)
 801023e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010240:	4b12      	ldr	r3, [pc, #72]	; (801028c <prvCheckForValidListAndQueue+0x70>)
 8010242:	4a10      	ldr	r2, [pc, #64]	; (8010284 <prvCheckForValidListAndQueue+0x68>)
 8010244:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010246:	2300      	movs	r3, #0
 8010248:	9300      	str	r3, [sp, #0]
 801024a:	4b11      	ldr	r3, [pc, #68]	; (8010290 <prvCheckForValidListAndQueue+0x74>)
 801024c:	4a11      	ldr	r2, [pc, #68]	; (8010294 <prvCheckForValidListAndQueue+0x78>)
 801024e:	2110      	movs	r1, #16
 8010250:	200a      	movs	r0, #10
 8010252:	f7fd fd3f 	bl	800dcd4 <xQueueGenericCreateStatic>
 8010256:	4603      	mov	r3, r0
 8010258:	4a08      	ldr	r2, [pc, #32]	; (801027c <prvCheckForValidListAndQueue+0x60>)
 801025a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801025c:	4b07      	ldr	r3, [pc, #28]	; (801027c <prvCheckForValidListAndQueue+0x60>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d005      	beq.n	8010270 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010264:	4b05      	ldr	r3, [pc, #20]	; (801027c <prvCheckForValidListAndQueue+0x60>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	490b      	ldr	r1, [pc, #44]	; (8010298 <prvCheckForValidListAndQueue+0x7c>)
 801026a:	4618      	mov	r0, r3
 801026c:	f7fe fa12 	bl	800e694 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010270:	f000 f970 	bl	8010554 <vPortExitCritical>
}
 8010274:	bf00      	nop
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	20003464 	.word	0x20003464
 8010280:	20003434 	.word	0x20003434
 8010284:	20003448 	.word	0x20003448
 8010288:	2000345c 	.word	0x2000345c
 801028c:	20003460 	.word	0x20003460
 8010290:	20003510 	.word	0x20003510
 8010294:	20003470 	.word	0x20003470
 8010298:	08014754 	.word	0x08014754

0801029c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801029c:	b480      	push	{r7}
 801029e:	b085      	sub	sp, #20
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	60b9      	str	r1, [r7, #8]
 80102a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	3b04      	subs	r3, #4
 80102ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80102b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	3b04      	subs	r3, #4
 80102ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	f023 0201 	bic.w	r2, r3, #1
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	3b04      	subs	r3, #4
 80102ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80102cc:	4a0c      	ldr	r2, [pc, #48]	; (8010300 <pxPortInitialiseStack+0x64>)
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	3b14      	subs	r3, #20
 80102d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80102d8:	687a      	ldr	r2, [r7, #4]
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	3b04      	subs	r3, #4
 80102e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f06f 0202 	mvn.w	r2, #2
 80102ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	3b20      	subs	r3, #32
 80102f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80102f2:	68fb      	ldr	r3, [r7, #12]
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3714      	adds	r7, #20
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr
 8010300:	08010305 	.word	0x08010305

08010304 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010304:	b480      	push	{r7}
 8010306:	b085      	sub	sp, #20
 8010308:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801030a:	2300      	movs	r3, #0
 801030c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801030e:	4b12      	ldr	r3, [pc, #72]	; (8010358 <prvTaskExitError+0x54>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010316:	d00a      	beq.n	801032e <prvTaskExitError+0x2a>
	__asm volatile
 8010318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801031c:	f383 8811 	msr	BASEPRI, r3
 8010320:	f3bf 8f6f 	isb	sy
 8010324:	f3bf 8f4f 	dsb	sy
 8010328:	60fb      	str	r3, [r7, #12]
}
 801032a:	bf00      	nop
 801032c:	e7fe      	b.n	801032c <prvTaskExitError+0x28>
	__asm volatile
 801032e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010332:	f383 8811 	msr	BASEPRI, r3
 8010336:	f3bf 8f6f 	isb	sy
 801033a:	f3bf 8f4f 	dsb	sy
 801033e:	60bb      	str	r3, [r7, #8]
}
 8010340:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010342:	bf00      	nop
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d0fc      	beq.n	8010344 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801034a:	bf00      	nop
 801034c:	bf00      	nop
 801034e:	3714      	adds	r7, #20
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr
 8010358:	20000148 	.word	0x20000148
 801035c:	00000000 	.word	0x00000000

08010360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010360:	4b07      	ldr	r3, [pc, #28]	; (8010380 <pxCurrentTCBConst2>)
 8010362:	6819      	ldr	r1, [r3, #0]
 8010364:	6808      	ldr	r0, [r1, #0]
 8010366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801036a:	f380 8809 	msr	PSP, r0
 801036e:	f3bf 8f6f 	isb	sy
 8010372:	f04f 0000 	mov.w	r0, #0
 8010376:	f380 8811 	msr	BASEPRI, r0
 801037a:	4770      	bx	lr
 801037c:	f3af 8000 	nop.w

08010380 <pxCurrentTCBConst2>:
 8010380:	20002f2c 	.word	0x20002f2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010384:	bf00      	nop
 8010386:	bf00      	nop

08010388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010388:	4808      	ldr	r0, [pc, #32]	; (80103ac <prvPortStartFirstTask+0x24>)
 801038a:	6800      	ldr	r0, [r0, #0]
 801038c:	6800      	ldr	r0, [r0, #0]
 801038e:	f380 8808 	msr	MSP, r0
 8010392:	f04f 0000 	mov.w	r0, #0
 8010396:	f380 8814 	msr	CONTROL, r0
 801039a:	b662      	cpsie	i
 801039c:	b661      	cpsie	f
 801039e:	f3bf 8f4f 	dsb	sy
 80103a2:	f3bf 8f6f 	isb	sy
 80103a6:	df00      	svc	0
 80103a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80103aa:	bf00      	nop
 80103ac:	e000ed08 	.word	0xe000ed08

080103b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b086      	sub	sp, #24
 80103b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80103b6:	4b46      	ldr	r3, [pc, #280]	; (80104d0 <xPortStartScheduler+0x120>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4a46      	ldr	r2, [pc, #280]	; (80104d4 <xPortStartScheduler+0x124>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d10a      	bne.n	80103d6 <xPortStartScheduler+0x26>
	__asm volatile
 80103c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c4:	f383 8811 	msr	BASEPRI, r3
 80103c8:	f3bf 8f6f 	isb	sy
 80103cc:	f3bf 8f4f 	dsb	sy
 80103d0:	613b      	str	r3, [r7, #16]
}
 80103d2:	bf00      	nop
 80103d4:	e7fe      	b.n	80103d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80103d6:	4b3e      	ldr	r3, [pc, #248]	; (80104d0 <xPortStartScheduler+0x120>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	4a3f      	ldr	r2, [pc, #252]	; (80104d8 <xPortStartScheduler+0x128>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	d10a      	bne.n	80103f6 <xPortStartScheduler+0x46>
	__asm volatile
 80103e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e4:	f383 8811 	msr	BASEPRI, r3
 80103e8:	f3bf 8f6f 	isb	sy
 80103ec:	f3bf 8f4f 	dsb	sy
 80103f0:	60fb      	str	r3, [r7, #12]
}
 80103f2:	bf00      	nop
 80103f4:	e7fe      	b.n	80103f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80103f6:	4b39      	ldr	r3, [pc, #228]	; (80104dc <xPortStartScheduler+0x12c>)
 80103f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	22ff      	movs	r2, #255	; 0xff
 8010406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	b2db      	uxtb	r3, r3
 801040e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010410:	78fb      	ldrb	r3, [r7, #3]
 8010412:	b2db      	uxtb	r3, r3
 8010414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010418:	b2da      	uxtb	r2, r3
 801041a:	4b31      	ldr	r3, [pc, #196]	; (80104e0 <xPortStartScheduler+0x130>)
 801041c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801041e:	4b31      	ldr	r3, [pc, #196]	; (80104e4 <xPortStartScheduler+0x134>)
 8010420:	2207      	movs	r2, #7
 8010422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010424:	e009      	b.n	801043a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010426:	4b2f      	ldr	r3, [pc, #188]	; (80104e4 <xPortStartScheduler+0x134>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	3b01      	subs	r3, #1
 801042c:	4a2d      	ldr	r2, [pc, #180]	; (80104e4 <xPortStartScheduler+0x134>)
 801042e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010430:	78fb      	ldrb	r3, [r7, #3]
 8010432:	b2db      	uxtb	r3, r3
 8010434:	005b      	lsls	r3, r3, #1
 8010436:	b2db      	uxtb	r3, r3
 8010438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801043a:	78fb      	ldrb	r3, [r7, #3]
 801043c:	b2db      	uxtb	r3, r3
 801043e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010442:	2b80      	cmp	r3, #128	; 0x80
 8010444:	d0ef      	beq.n	8010426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010446:	4b27      	ldr	r3, [pc, #156]	; (80104e4 <xPortStartScheduler+0x134>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f1c3 0307 	rsb	r3, r3, #7
 801044e:	2b04      	cmp	r3, #4
 8010450:	d00a      	beq.n	8010468 <xPortStartScheduler+0xb8>
	__asm volatile
 8010452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010456:	f383 8811 	msr	BASEPRI, r3
 801045a:	f3bf 8f6f 	isb	sy
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	60bb      	str	r3, [r7, #8]
}
 8010464:	bf00      	nop
 8010466:	e7fe      	b.n	8010466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010468:	4b1e      	ldr	r3, [pc, #120]	; (80104e4 <xPortStartScheduler+0x134>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	021b      	lsls	r3, r3, #8
 801046e:	4a1d      	ldr	r2, [pc, #116]	; (80104e4 <xPortStartScheduler+0x134>)
 8010470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010472:	4b1c      	ldr	r3, [pc, #112]	; (80104e4 <xPortStartScheduler+0x134>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801047a:	4a1a      	ldr	r2, [pc, #104]	; (80104e4 <xPortStartScheduler+0x134>)
 801047c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	b2da      	uxtb	r2, r3
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010486:	4b18      	ldr	r3, [pc, #96]	; (80104e8 <xPortStartScheduler+0x138>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4a17      	ldr	r2, [pc, #92]	; (80104e8 <xPortStartScheduler+0x138>)
 801048c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010492:	4b15      	ldr	r3, [pc, #84]	; (80104e8 <xPortStartScheduler+0x138>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	4a14      	ldr	r2, [pc, #80]	; (80104e8 <xPortStartScheduler+0x138>)
 8010498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801049c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801049e:	f000 f8dd 	bl	801065c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80104a2:	4b12      	ldr	r3, [pc, #72]	; (80104ec <xPortStartScheduler+0x13c>)
 80104a4:	2200      	movs	r2, #0
 80104a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80104a8:	f000 f8fc 	bl	80106a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80104ac:	4b10      	ldr	r3, [pc, #64]	; (80104f0 <xPortStartScheduler+0x140>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	4a0f      	ldr	r2, [pc, #60]	; (80104f0 <xPortStartScheduler+0x140>)
 80104b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80104b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80104b8:	f7ff ff66 	bl	8010388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80104bc:	f7fe fe18 	bl	800f0f0 <vTaskSwitchContext>
	prvTaskExitError();
 80104c0:	f7ff ff20 	bl	8010304 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80104c4:	2300      	movs	r3, #0
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3718      	adds	r7, #24
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	e000ed00 	.word	0xe000ed00
 80104d4:	410fc271 	.word	0x410fc271
 80104d8:	410fc270 	.word	0x410fc270
 80104dc:	e000e400 	.word	0xe000e400
 80104e0:	20003560 	.word	0x20003560
 80104e4:	20003564 	.word	0x20003564
 80104e8:	e000ed20 	.word	0xe000ed20
 80104ec:	20000148 	.word	0x20000148
 80104f0:	e000ef34 	.word	0xe000ef34

080104f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
	__asm volatile
 80104fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104fe:	f383 8811 	msr	BASEPRI, r3
 8010502:	f3bf 8f6f 	isb	sy
 8010506:	f3bf 8f4f 	dsb	sy
 801050a:	607b      	str	r3, [r7, #4]
}
 801050c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801050e:	4b0f      	ldr	r3, [pc, #60]	; (801054c <vPortEnterCritical+0x58>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	3301      	adds	r3, #1
 8010514:	4a0d      	ldr	r2, [pc, #52]	; (801054c <vPortEnterCritical+0x58>)
 8010516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010518:	4b0c      	ldr	r3, [pc, #48]	; (801054c <vPortEnterCritical+0x58>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	2b01      	cmp	r3, #1
 801051e:	d10f      	bne.n	8010540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010520:	4b0b      	ldr	r3, [pc, #44]	; (8010550 <vPortEnterCritical+0x5c>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	b2db      	uxtb	r3, r3
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00a      	beq.n	8010540 <vPortEnterCritical+0x4c>
	__asm volatile
 801052a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801052e:	f383 8811 	msr	BASEPRI, r3
 8010532:	f3bf 8f6f 	isb	sy
 8010536:	f3bf 8f4f 	dsb	sy
 801053a:	603b      	str	r3, [r7, #0]
}
 801053c:	bf00      	nop
 801053e:	e7fe      	b.n	801053e <vPortEnterCritical+0x4a>
	}
}
 8010540:	bf00      	nop
 8010542:	370c      	adds	r7, #12
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr
 801054c:	20000148 	.word	0x20000148
 8010550:	e000ed04 	.word	0xe000ed04

08010554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801055a:	4b12      	ldr	r3, [pc, #72]	; (80105a4 <vPortExitCritical+0x50>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d10a      	bne.n	8010578 <vPortExitCritical+0x24>
	__asm volatile
 8010562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010566:	f383 8811 	msr	BASEPRI, r3
 801056a:	f3bf 8f6f 	isb	sy
 801056e:	f3bf 8f4f 	dsb	sy
 8010572:	607b      	str	r3, [r7, #4]
}
 8010574:	bf00      	nop
 8010576:	e7fe      	b.n	8010576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010578:	4b0a      	ldr	r3, [pc, #40]	; (80105a4 <vPortExitCritical+0x50>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	3b01      	subs	r3, #1
 801057e:	4a09      	ldr	r2, [pc, #36]	; (80105a4 <vPortExitCritical+0x50>)
 8010580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010582:	4b08      	ldr	r3, [pc, #32]	; (80105a4 <vPortExitCritical+0x50>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d105      	bne.n	8010596 <vPortExitCritical+0x42>
 801058a:	2300      	movs	r3, #0
 801058c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	f383 8811 	msr	BASEPRI, r3
}
 8010594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010596:	bf00      	nop
 8010598:	370c      	adds	r7, #12
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr
 80105a2:	bf00      	nop
 80105a4:	20000148 	.word	0x20000148
	...

080105b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80105b0:	f3ef 8009 	mrs	r0, PSP
 80105b4:	f3bf 8f6f 	isb	sy
 80105b8:	4b15      	ldr	r3, [pc, #84]	; (8010610 <pxCurrentTCBConst>)
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	f01e 0f10 	tst.w	lr, #16
 80105c0:	bf08      	it	eq
 80105c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80105c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ca:	6010      	str	r0, [r2, #0]
 80105cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80105d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80105d4:	f380 8811 	msr	BASEPRI, r0
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	f3bf 8f6f 	isb	sy
 80105e0:	f7fe fd86 	bl	800f0f0 <vTaskSwitchContext>
 80105e4:	f04f 0000 	mov.w	r0, #0
 80105e8:	f380 8811 	msr	BASEPRI, r0
 80105ec:	bc09      	pop	{r0, r3}
 80105ee:	6819      	ldr	r1, [r3, #0]
 80105f0:	6808      	ldr	r0, [r1, #0]
 80105f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f6:	f01e 0f10 	tst.w	lr, #16
 80105fa:	bf08      	it	eq
 80105fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010600:	f380 8809 	msr	PSP, r0
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	4770      	bx	lr
 801060a:	bf00      	nop
 801060c:	f3af 8000 	nop.w

08010610 <pxCurrentTCBConst>:
 8010610:	20002f2c 	.word	0x20002f2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010614:	bf00      	nop
 8010616:	bf00      	nop

08010618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
	__asm volatile
 801061e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010622:	f383 8811 	msr	BASEPRI, r3
 8010626:	f3bf 8f6f 	isb	sy
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	607b      	str	r3, [r7, #4]
}
 8010630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010632:	f7fe fca3 	bl	800ef7c <xTaskIncrementTick>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d003      	beq.n	8010644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801063c:	4b06      	ldr	r3, [pc, #24]	; (8010658 <xPortSysTickHandler+0x40>)
 801063e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010642:	601a      	str	r2, [r3, #0]
 8010644:	2300      	movs	r3, #0
 8010646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	f383 8811 	msr	BASEPRI, r3
}
 801064e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010650:	bf00      	nop
 8010652:	3708      	adds	r7, #8
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	e000ed04 	.word	0xe000ed04

0801065c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801065c:	b480      	push	{r7}
 801065e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010660:	4b0b      	ldr	r3, [pc, #44]	; (8010690 <vPortSetupTimerInterrupt+0x34>)
 8010662:	2200      	movs	r2, #0
 8010664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010666:	4b0b      	ldr	r3, [pc, #44]	; (8010694 <vPortSetupTimerInterrupt+0x38>)
 8010668:	2200      	movs	r2, #0
 801066a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801066c:	4b0a      	ldr	r3, [pc, #40]	; (8010698 <vPortSetupTimerInterrupt+0x3c>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a0a      	ldr	r2, [pc, #40]	; (801069c <vPortSetupTimerInterrupt+0x40>)
 8010672:	fba2 2303 	umull	r2, r3, r2, r3
 8010676:	099b      	lsrs	r3, r3, #6
 8010678:	4a09      	ldr	r2, [pc, #36]	; (80106a0 <vPortSetupTimerInterrupt+0x44>)
 801067a:	3b01      	subs	r3, #1
 801067c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801067e:	4b04      	ldr	r3, [pc, #16]	; (8010690 <vPortSetupTimerInterrupt+0x34>)
 8010680:	2207      	movs	r2, #7
 8010682:	601a      	str	r2, [r3, #0]
}
 8010684:	bf00      	nop
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	e000e010 	.word	0xe000e010
 8010694:	e000e018 	.word	0xe000e018
 8010698:	2000002c 	.word	0x2000002c
 801069c:	10624dd3 	.word	0x10624dd3
 80106a0:	e000e014 	.word	0xe000e014

080106a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80106a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80106b4 <vPortEnableVFP+0x10>
 80106a8:	6801      	ldr	r1, [r0, #0]
 80106aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80106ae:	6001      	str	r1, [r0, #0]
 80106b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80106b2:	bf00      	nop
 80106b4:	e000ed88 	.word	0xe000ed88

080106b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80106b8:	b480      	push	{r7}
 80106ba:	b085      	sub	sp, #20
 80106bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80106be:	f3ef 8305 	mrs	r3, IPSR
 80106c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2b0f      	cmp	r3, #15
 80106c8:	d914      	bls.n	80106f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80106ca:	4a17      	ldr	r2, [pc, #92]	; (8010728 <vPortValidateInterruptPriority+0x70>)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	4413      	add	r3, r2
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80106d4:	4b15      	ldr	r3, [pc, #84]	; (801072c <vPortValidateInterruptPriority+0x74>)
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	7afa      	ldrb	r2, [r7, #11]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d20a      	bcs.n	80106f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80106de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e2:	f383 8811 	msr	BASEPRI, r3
 80106e6:	f3bf 8f6f 	isb	sy
 80106ea:	f3bf 8f4f 	dsb	sy
 80106ee:	607b      	str	r3, [r7, #4]
}
 80106f0:	bf00      	nop
 80106f2:	e7fe      	b.n	80106f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80106f4:	4b0e      	ldr	r3, [pc, #56]	; (8010730 <vPortValidateInterruptPriority+0x78>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80106fc:	4b0d      	ldr	r3, [pc, #52]	; (8010734 <vPortValidateInterruptPriority+0x7c>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	429a      	cmp	r2, r3
 8010702:	d90a      	bls.n	801071a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010708:	f383 8811 	msr	BASEPRI, r3
 801070c:	f3bf 8f6f 	isb	sy
 8010710:	f3bf 8f4f 	dsb	sy
 8010714:	603b      	str	r3, [r7, #0]
}
 8010716:	bf00      	nop
 8010718:	e7fe      	b.n	8010718 <vPortValidateInterruptPriority+0x60>
	}
 801071a:	bf00      	nop
 801071c:	3714      	adds	r7, #20
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop
 8010728:	e000e3f0 	.word	0xe000e3f0
 801072c:	20003560 	.word	0x20003560
 8010730:	e000ed0c 	.word	0xe000ed0c
 8010734:	20003564 	.word	0x20003564

08010738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b08a      	sub	sp, #40	; 0x28
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010740:	2300      	movs	r3, #0
 8010742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010744:	f7fe face 	bl	800ece4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010748:	4b5b      	ldr	r3, [pc, #364]	; (80108b8 <pvPortMalloc+0x180>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d101      	bne.n	8010754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010750:	f000 f92c 	bl	80109ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010754:	4b59      	ldr	r3, [pc, #356]	; (80108bc <pvPortMalloc+0x184>)
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	4013      	ands	r3, r2
 801075c:	2b00      	cmp	r3, #0
 801075e:	f040 8093 	bne.w	8010888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d01d      	beq.n	80107a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010768:	2208      	movs	r2, #8
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4413      	add	r3, r2
 801076e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f003 0307 	and.w	r3, r3, #7
 8010776:	2b00      	cmp	r3, #0
 8010778:	d014      	beq.n	80107a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f023 0307 	bic.w	r3, r3, #7
 8010780:	3308      	adds	r3, #8
 8010782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f003 0307 	and.w	r3, r3, #7
 801078a:	2b00      	cmp	r3, #0
 801078c:	d00a      	beq.n	80107a4 <pvPortMalloc+0x6c>
	__asm volatile
 801078e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010792:	f383 8811 	msr	BASEPRI, r3
 8010796:	f3bf 8f6f 	isb	sy
 801079a:	f3bf 8f4f 	dsb	sy
 801079e:	617b      	str	r3, [r7, #20]
}
 80107a0:	bf00      	nop
 80107a2:	e7fe      	b.n	80107a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d06e      	beq.n	8010888 <pvPortMalloc+0x150>
 80107aa:	4b45      	ldr	r3, [pc, #276]	; (80108c0 <pvPortMalloc+0x188>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d869      	bhi.n	8010888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80107b4:	4b43      	ldr	r3, [pc, #268]	; (80108c4 <pvPortMalloc+0x18c>)
 80107b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80107b8:	4b42      	ldr	r3, [pc, #264]	; (80108c4 <pvPortMalloc+0x18c>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80107be:	e004      	b.n	80107ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80107c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80107c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80107ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	429a      	cmp	r2, r3
 80107d2:	d903      	bls.n	80107dc <pvPortMalloc+0xa4>
 80107d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d1f1      	bne.n	80107c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80107dc:	4b36      	ldr	r3, [pc, #216]	; (80108b8 <pvPortMalloc+0x180>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d050      	beq.n	8010888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80107e6:	6a3b      	ldr	r3, [r7, #32]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2208      	movs	r2, #8
 80107ec:	4413      	add	r3, r2
 80107ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	6a3b      	ldr	r3, [r7, #32]
 80107f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80107f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fa:	685a      	ldr	r2, [r3, #4]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	1ad2      	subs	r2, r2, r3
 8010800:	2308      	movs	r3, #8
 8010802:	005b      	lsls	r3, r3, #1
 8010804:	429a      	cmp	r2, r3
 8010806:	d91f      	bls.n	8010848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	4413      	add	r3, r2
 801080e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010810:	69bb      	ldr	r3, [r7, #24]
 8010812:	f003 0307 	and.w	r3, r3, #7
 8010816:	2b00      	cmp	r3, #0
 8010818:	d00a      	beq.n	8010830 <pvPortMalloc+0xf8>
	__asm volatile
 801081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081e:	f383 8811 	msr	BASEPRI, r3
 8010822:	f3bf 8f6f 	isb	sy
 8010826:	f3bf 8f4f 	dsb	sy
 801082a:	613b      	str	r3, [r7, #16]
}
 801082c:	bf00      	nop
 801082e:	e7fe      	b.n	801082e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010832:	685a      	ldr	r2, [r3, #4]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	1ad2      	subs	r2, r2, r3
 8010838:	69bb      	ldr	r3, [r7, #24]
 801083a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010842:	69b8      	ldr	r0, [r7, #24]
 8010844:	f000 f914 	bl	8010a70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010848:	4b1d      	ldr	r3, [pc, #116]	; (80108c0 <pvPortMalloc+0x188>)
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084e:	685b      	ldr	r3, [r3, #4]
 8010850:	1ad3      	subs	r3, r2, r3
 8010852:	4a1b      	ldr	r2, [pc, #108]	; (80108c0 <pvPortMalloc+0x188>)
 8010854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010856:	4b1a      	ldr	r3, [pc, #104]	; (80108c0 <pvPortMalloc+0x188>)
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	4b1b      	ldr	r3, [pc, #108]	; (80108c8 <pvPortMalloc+0x190>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	429a      	cmp	r2, r3
 8010860:	d203      	bcs.n	801086a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010862:	4b17      	ldr	r3, [pc, #92]	; (80108c0 <pvPortMalloc+0x188>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4a18      	ldr	r2, [pc, #96]	; (80108c8 <pvPortMalloc+0x190>)
 8010868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	685a      	ldr	r2, [r3, #4]
 801086e:	4b13      	ldr	r3, [pc, #76]	; (80108bc <pvPortMalloc+0x184>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	431a      	orrs	r2, r3
 8010874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087a:	2200      	movs	r2, #0
 801087c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801087e:	4b13      	ldr	r3, [pc, #76]	; (80108cc <pvPortMalloc+0x194>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	3301      	adds	r3, #1
 8010884:	4a11      	ldr	r2, [pc, #68]	; (80108cc <pvPortMalloc+0x194>)
 8010886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010888:	f7fe fa3a 	bl	800ed00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801088c:	69fb      	ldr	r3, [r7, #28]
 801088e:	f003 0307 	and.w	r3, r3, #7
 8010892:	2b00      	cmp	r3, #0
 8010894:	d00a      	beq.n	80108ac <pvPortMalloc+0x174>
	__asm volatile
 8010896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089a:	f383 8811 	msr	BASEPRI, r3
 801089e:	f3bf 8f6f 	isb	sy
 80108a2:	f3bf 8f4f 	dsb	sy
 80108a6:	60fb      	str	r3, [r7, #12]
}
 80108a8:	bf00      	nop
 80108aa:	e7fe      	b.n	80108aa <pvPortMalloc+0x172>
	return pvReturn;
 80108ac:	69fb      	ldr	r3, [r7, #28]
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3728      	adds	r7, #40	; 0x28
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	200073f0 	.word	0x200073f0
 80108bc:	20007404 	.word	0x20007404
 80108c0:	200073f4 	.word	0x200073f4
 80108c4:	200073e8 	.word	0x200073e8
 80108c8:	200073f8 	.word	0x200073f8
 80108cc:	200073fc 	.word	0x200073fc

080108d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b086      	sub	sp, #24
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d04d      	beq.n	801097e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80108e2:	2308      	movs	r3, #8
 80108e4:	425b      	negs	r3, r3
 80108e6:	697a      	ldr	r2, [r7, #20]
 80108e8:	4413      	add	r3, r2
 80108ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	685a      	ldr	r2, [r3, #4]
 80108f4:	4b24      	ldr	r3, [pc, #144]	; (8010988 <vPortFree+0xb8>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4013      	ands	r3, r2
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d10a      	bne.n	8010914 <vPortFree+0x44>
	__asm volatile
 80108fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010902:	f383 8811 	msr	BASEPRI, r3
 8010906:	f3bf 8f6f 	isb	sy
 801090a:	f3bf 8f4f 	dsb	sy
 801090e:	60fb      	str	r3, [r7, #12]
}
 8010910:	bf00      	nop
 8010912:	e7fe      	b.n	8010912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d00a      	beq.n	8010932 <vPortFree+0x62>
	__asm volatile
 801091c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010920:	f383 8811 	msr	BASEPRI, r3
 8010924:	f3bf 8f6f 	isb	sy
 8010928:	f3bf 8f4f 	dsb	sy
 801092c:	60bb      	str	r3, [r7, #8]
}
 801092e:	bf00      	nop
 8010930:	e7fe      	b.n	8010930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	685a      	ldr	r2, [r3, #4]
 8010936:	4b14      	ldr	r3, [pc, #80]	; (8010988 <vPortFree+0xb8>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4013      	ands	r3, r2
 801093c:	2b00      	cmp	r3, #0
 801093e:	d01e      	beq.n	801097e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d11a      	bne.n	801097e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	685a      	ldr	r2, [r3, #4]
 801094c:	4b0e      	ldr	r3, [pc, #56]	; (8010988 <vPortFree+0xb8>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	43db      	mvns	r3, r3
 8010952:	401a      	ands	r2, r3
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010958:	f7fe f9c4 	bl	800ece4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	685a      	ldr	r2, [r3, #4]
 8010960:	4b0a      	ldr	r3, [pc, #40]	; (801098c <vPortFree+0xbc>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4413      	add	r3, r2
 8010966:	4a09      	ldr	r2, [pc, #36]	; (801098c <vPortFree+0xbc>)
 8010968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801096a:	6938      	ldr	r0, [r7, #16]
 801096c:	f000 f880 	bl	8010a70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010970:	4b07      	ldr	r3, [pc, #28]	; (8010990 <vPortFree+0xc0>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	3301      	adds	r3, #1
 8010976:	4a06      	ldr	r2, [pc, #24]	; (8010990 <vPortFree+0xc0>)
 8010978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801097a:	f7fe f9c1 	bl	800ed00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801097e:	bf00      	nop
 8010980:	3718      	adds	r7, #24
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	20007404 	.word	0x20007404
 801098c:	200073f4 	.word	0x200073f4
 8010990:	20007400 	.word	0x20007400

08010994 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8010994:	b480      	push	{r7}
 8010996:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8010998:	4b03      	ldr	r3, [pc, #12]	; (80109a8 <xPortGetFreeHeapSize+0x14>)
 801099a:	681b      	ldr	r3, [r3, #0]
}
 801099c:	4618      	mov	r0, r3
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop
 80109a8:	200073f4 	.word	0x200073f4

080109ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80109b2:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80109b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80109b8:	4b27      	ldr	r3, [pc, #156]	; (8010a58 <prvHeapInit+0xac>)
 80109ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	f003 0307 	and.w	r3, r3, #7
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00c      	beq.n	80109e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	3307      	adds	r3, #7
 80109ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	f023 0307 	bic.w	r3, r3, #7
 80109d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80109d4:	68ba      	ldr	r2, [r7, #8]
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	1ad3      	subs	r3, r2, r3
 80109da:	4a1f      	ldr	r2, [pc, #124]	; (8010a58 <prvHeapInit+0xac>)
 80109dc:	4413      	add	r3, r2
 80109de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80109e4:	4a1d      	ldr	r2, [pc, #116]	; (8010a5c <prvHeapInit+0xb0>)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80109ea:	4b1c      	ldr	r3, [pc, #112]	; (8010a5c <prvHeapInit+0xb0>)
 80109ec:	2200      	movs	r2, #0
 80109ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	68ba      	ldr	r2, [r7, #8]
 80109f4:	4413      	add	r3, r2
 80109f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80109f8:	2208      	movs	r2, #8
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	1a9b      	subs	r3, r3, r2
 80109fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f023 0307 	bic.w	r3, r3, #7
 8010a06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	4a15      	ldr	r2, [pc, #84]	; (8010a60 <prvHeapInit+0xb4>)
 8010a0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010a0e:	4b14      	ldr	r3, [pc, #80]	; (8010a60 <prvHeapInit+0xb4>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2200      	movs	r2, #0
 8010a14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010a16:	4b12      	ldr	r3, [pc, #72]	; (8010a60 <prvHeapInit+0xb4>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	68fa      	ldr	r2, [r7, #12]
 8010a26:	1ad2      	subs	r2, r2, r3
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010a2c:	4b0c      	ldr	r3, [pc, #48]	; (8010a60 <prvHeapInit+0xb4>)
 8010a2e:	681a      	ldr	r2, [r3, #0]
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	685b      	ldr	r3, [r3, #4]
 8010a38:	4a0a      	ldr	r2, [pc, #40]	; (8010a64 <prvHeapInit+0xb8>)
 8010a3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	4a09      	ldr	r2, [pc, #36]	; (8010a68 <prvHeapInit+0xbc>)
 8010a42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010a44:	4b09      	ldr	r3, [pc, #36]	; (8010a6c <prvHeapInit+0xc0>)
 8010a46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010a4a:	601a      	str	r2, [r3, #0]
}
 8010a4c:	bf00      	nop
 8010a4e:	3714      	adds	r7, #20
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr
 8010a58:	20003568 	.word	0x20003568
 8010a5c:	200073e8 	.word	0x200073e8
 8010a60:	200073f0 	.word	0x200073f0
 8010a64:	200073f8 	.word	0x200073f8
 8010a68:	200073f4 	.word	0x200073f4
 8010a6c:	20007404 	.word	0x20007404

08010a70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010a70:	b480      	push	{r7}
 8010a72:	b085      	sub	sp, #20
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010a78:	4b28      	ldr	r3, [pc, #160]	; (8010b1c <prvInsertBlockIntoFreeList+0xac>)
 8010a7a:	60fb      	str	r3, [r7, #12]
 8010a7c:	e002      	b.n	8010a84 <prvInsertBlockIntoFreeList+0x14>
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	60fb      	str	r3, [r7, #12]
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d8f7      	bhi.n	8010a7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	4413      	add	r3, r2
 8010a9a:	687a      	ldr	r2, [r7, #4]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d108      	bne.n	8010ab2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	685a      	ldr	r2, [r3, #4]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	441a      	add	r2, r3
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	441a      	add	r2, r3
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d118      	bne.n	8010af8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681a      	ldr	r2, [r3, #0]
 8010aca:	4b15      	ldr	r3, [pc, #84]	; (8010b20 <prvInsertBlockIntoFreeList+0xb0>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d00d      	beq.n	8010aee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	685a      	ldr	r2, [r3, #4]
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	441a      	add	r2, r3
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	601a      	str	r2, [r3, #0]
 8010aec:	e008      	b.n	8010b00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010aee:	4b0c      	ldr	r3, [pc, #48]	; (8010b20 <prvInsertBlockIntoFreeList+0xb0>)
 8010af0:	681a      	ldr	r2, [r3, #0]
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	601a      	str	r2, [r3, #0]
 8010af6:	e003      	b.n	8010b00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010b00:	68fa      	ldr	r2, [r7, #12]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d002      	beq.n	8010b0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b0e:	bf00      	nop
 8010b10:	3714      	adds	r7, #20
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop
 8010b1c:	200073e8 	.word	0x200073e8
 8010b20:	200073f0 	.word	0x200073f0

08010b24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010b28:	2200      	movs	r2, #0
 8010b2a:	4912      	ldr	r1, [pc, #72]	; (8010b74 <MX_USB_DEVICE_Init+0x50>)
 8010b2c:	4812      	ldr	r0, [pc, #72]	; (8010b78 <MX_USB_DEVICE_Init+0x54>)
 8010b2e:	f7fb fbab 	bl	800c288 <USBD_Init>
 8010b32:	4603      	mov	r3, r0
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d001      	beq.n	8010b3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010b38:	f7f3 f854 	bl	8003be4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010b3c:	490f      	ldr	r1, [pc, #60]	; (8010b7c <MX_USB_DEVICE_Init+0x58>)
 8010b3e:	480e      	ldr	r0, [pc, #56]	; (8010b78 <MX_USB_DEVICE_Init+0x54>)
 8010b40:	f7fb fbd2 	bl	800c2e8 <USBD_RegisterClass>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010b4a:	f7f3 f84b 	bl	8003be4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010b4e:	490c      	ldr	r1, [pc, #48]	; (8010b80 <MX_USB_DEVICE_Init+0x5c>)
 8010b50:	4809      	ldr	r0, [pc, #36]	; (8010b78 <MX_USB_DEVICE_Init+0x54>)
 8010b52:	f7fb faf3 	bl	800c13c <USBD_CDC_RegisterInterface>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d001      	beq.n	8010b60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010b5c:	f7f3 f842 	bl	8003be4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010b60:	4805      	ldr	r0, [pc, #20]	; (8010b78 <MX_USB_DEVICE_Init+0x54>)
 8010b62:	f7fb fbe8 	bl	800c336 <USBD_Start>
 8010b66:	4603      	mov	r3, r0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d001      	beq.n	8010b70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010b6c:	f7f3 f83a 	bl	8003be4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010b70:	bf00      	nop
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	20000160 	.word	0x20000160
 8010b78:	2000d668 	.word	0x2000d668
 8010b7c:	20000044 	.word	0x20000044
 8010b80:	2000014c 	.word	0x2000014c

08010b84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010b88:	2200      	movs	r2, #0
 8010b8a:	4905      	ldr	r1, [pc, #20]	; (8010ba0 <CDC_Init_FS+0x1c>)
 8010b8c:	4805      	ldr	r0, [pc, #20]	; (8010ba4 <CDC_Init_FS+0x20>)
 8010b8e:	f7fb faea 	bl	800c166 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010b92:	4905      	ldr	r1, [pc, #20]	; (8010ba8 <CDC_Init_FS+0x24>)
 8010b94:	4803      	ldr	r0, [pc, #12]	; (8010ba4 <CDC_Init_FS+0x20>)
 8010b96:	f7fb fb04 	bl	800c1a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010b9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	2000e138 	.word	0x2000e138
 8010ba4:	2000d668 	.word	0x2000d668
 8010ba8:	2000d938 	.word	0x2000d938

08010bac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010bac:	b480      	push	{r7}
 8010bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010bb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr

08010bbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b083      	sub	sp, #12
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	6039      	str	r1, [r7, #0]
 8010bc6:	71fb      	strb	r3, [r7, #7]
 8010bc8:	4613      	mov	r3, r2
 8010bca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010bcc:	79fb      	ldrb	r3, [r7, #7]
 8010bce:	2b23      	cmp	r3, #35	; 0x23
 8010bd0:	d84a      	bhi.n	8010c68 <CDC_Control_FS+0xac>
 8010bd2:	a201      	add	r2, pc, #4	; (adr r2, 8010bd8 <CDC_Control_FS+0x1c>)
 8010bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bd8:	08010c69 	.word	0x08010c69
 8010bdc:	08010c69 	.word	0x08010c69
 8010be0:	08010c69 	.word	0x08010c69
 8010be4:	08010c69 	.word	0x08010c69
 8010be8:	08010c69 	.word	0x08010c69
 8010bec:	08010c69 	.word	0x08010c69
 8010bf0:	08010c69 	.word	0x08010c69
 8010bf4:	08010c69 	.word	0x08010c69
 8010bf8:	08010c69 	.word	0x08010c69
 8010bfc:	08010c69 	.word	0x08010c69
 8010c00:	08010c69 	.word	0x08010c69
 8010c04:	08010c69 	.word	0x08010c69
 8010c08:	08010c69 	.word	0x08010c69
 8010c0c:	08010c69 	.word	0x08010c69
 8010c10:	08010c69 	.word	0x08010c69
 8010c14:	08010c69 	.word	0x08010c69
 8010c18:	08010c69 	.word	0x08010c69
 8010c1c:	08010c69 	.word	0x08010c69
 8010c20:	08010c69 	.word	0x08010c69
 8010c24:	08010c69 	.word	0x08010c69
 8010c28:	08010c69 	.word	0x08010c69
 8010c2c:	08010c69 	.word	0x08010c69
 8010c30:	08010c69 	.word	0x08010c69
 8010c34:	08010c69 	.word	0x08010c69
 8010c38:	08010c69 	.word	0x08010c69
 8010c3c:	08010c69 	.word	0x08010c69
 8010c40:	08010c69 	.word	0x08010c69
 8010c44:	08010c69 	.word	0x08010c69
 8010c48:	08010c69 	.word	0x08010c69
 8010c4c:	08010c69 	.word	0x08010c69
 8010c50:	08010c69 	.word	0x08010c69
 8010c54:	08010c69 	.word	0x08010c69
 8010c58:	08010c69 	.word	0x08010c69
 8010c5c:	08010c69 	.word	0x08010c69
 8010c60:	08010c69 	.word	0x08010c69
 8010c64:	08010c69 	.word	0x08010c69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010c68:	bf00      	nop
  }

  return (USBD_OK);
 8010c6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	370c      	adds	r7, #12
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010c82:	6879      	ldr	r1, [r7, #4]
 8010c84:	4805      	ldr	r0, [pc, #20]	; (8010c9c <CDC_Receive_FS+0x24>)
 8010c86:	f7fb fa8c 	bl	800c1a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010c8a:	4804      	ldr	r0, [pc, #16]	; (8010c9c <CDC_Receive_FS+0x24>)
 8010c8c:	f7fb fad2 	bl	800c234 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010c90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3708      	adds	r7, #8
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	2000d668 	.word	0x2000d668

08010ca0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	460b      	mov	r3, r1
 8010caa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010cac:	2300      	movs	r3, #0
 8010cae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010cb0:	4b0d      	ldr	r3, [pc, #52]	; (8010ce8 <CDC_Transmit_FS+0x48>)
 8010cb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d001      	beq.n	8010cc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e00b      	b.n	8010cde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010cc6:	887b      	ldrh	r3, [r7, #2]
 8010cc8:	461a      	mov	r2, r3
 8010cca:	6879      	ldr	r1, [r7, #4]
 8010ccc:	4806      	ldr	r0, [pc, #24]	; (8010ce8 <CDC_Transmit_FS+0x48>)
 8010cce:	f7fb fa4a 	bl	800c166 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010cd2:	4805      	ldr	r0, [pc, #20]	; (8010ce8 <CDC_Transmit_FS+0x48>)
 8010cd4:	f7fb fa7e 	bl	800c1d4 <USBD_CDC_TransmitPacket>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3710      	adds	r7, #16
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	2000d668 	.word	0x2000d668

08010cec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b087      	sub	sp, #28
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	60b9      	str	r1, [r7, #8]
 8010cf6:	4613      	mov	r3, r2
 8010cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	371c      	adds	r7, #28
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
	...

08010d10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d10:	b480      	push	{r7}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	4603      	mov	r3, r0
 8010d18:	6039      	str	r1, [r7, #0]
 8010d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	2212      	movs	r2, #18
 8010d20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010d22:	4b03      	ldr	r3, [pc, #12]	; (8010d30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	370c      	adds	r7, #12
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr
 8010d30:	2000017c 	.word	0x2000017c

08010d34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	6039      	str	r1, [r7, #0]
 8010d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	2204      	movs	r2, #4
 8010d44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010d46:	4b03      	ldr	r3, [pc, #12]	; (8010d54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	370c      	adds	r7, #12
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr
 8010d54:	20000190 	.word	0x20000190

08010d58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	4603      	mov	r3, r0
 8010d60:	6039      	str	r1, [r7, #0]
 8010d62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d64:	79fb      	ldrb	r3, [r7, #7]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d105      	bne.n	8010d76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d6a:	683a      	ldr	r2, [r7, #0]
 8010d6c:	4907      	ldr	r1, [pc, #28]	; (8010d8c <USBD_FS_ProductStrDescriptor+0x34>)
 8010d6e:	4808      	ldr	r0, [pc, #32]	; (8010d90 <USBD_FS_ProductStrDescriptor+0x38>)
 8010d70:	f7fc fb13 	bl	800d39a <USBD_GetString>
 8010d74:	e004      	b.n	8010d80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d76:	683a      	ldr	r2, [r7, #0]
 8010d78:	4904      	ldr	r1, [pc, #16]	; (8010d8c <USBD_FS_ProductStrDescriptor+0x34>)
 8010d7a:	4805      	ldr	r0, [pc, #20]	; (8010d90 <USBD_FS_ProductStrDescriptor+0x38>)
 8010d7c:	f7fc fb0d 	bl	800d39a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d80:	4b02      	ldr	r3, [pc, #8]	; (8010d8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	2000e938 	.word	0x2000e938
 8010d90:	0801475c 	.word	0x0801475c

08010d94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	6039      	str	r1, [r7, #0]
 8010d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010da0:	683a      	ldr	r2, [r7, #0]
 8010da2:	4904      	ldr	r1, [pc, #16]	; (8010db4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010da4:	4804      	ldr	r0, [pc, #16]	; (8010db8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010da6:	f7fc faf8 	bl	800d39a <USBD_GetString>
  return USBD_StrDesc;
 8010daa:	4b02      	ldr	r3, [pc, #8]	; (8010db4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	3708      	adds	r7, #8
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	2000e938 	.word	0x2000e938
 8010db8:	08014774 	.word	0x08014774

08010dbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	6039      	str	r1, [r7, #0]
 8010dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	221a      	movs	r2, #26
 8010dcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010dce:	f000 f843 	bl	8010e58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010dd2:	4b02      	ldr	r3, [pc, #8]	; (8010ddc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3708      	adds	r7, #8
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}
 8010ddc:	20000194 	.word	0x20000194

08010de0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	4603      	mov	r3, r0
 8010de8:	6039      	str	r1, [r7, #0]
 8010dea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010dec:	79fb      	ldrb	r3, [r7, #7]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d105      	bne.n	8010dfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010df2:	683a      	ldr	r2, [r7, #0]
 8010df4:	4907      	ldr	r1, [pc, #28]	; (8010e14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010df6:	4808      	ldr	r0, [pc, #32]	; (8010e18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010df8:	f7fc facf 	bl	800d39a <USBD_GetString>
 8010dfc:	e004      	b.n	8010e08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010dfe:	683a      	ldr	r2, [r7, #0]
 8010e00:	4904      	ldr	r1, [pc, #16]	; (8010e14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010e02:	4805      	ldr	r0, [pc, #20]	; (8010e18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010e04:	f7fc fac9 	bl	800d39a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e08:	4b02      	ldr	r3, [pc, #8]	; (8010e14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3708      	adds	r7, #8
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	bf00      	nop
 8010e14:	2000e938 	.word	0x2000e938
 8010e18:	08014788 	.word	0x08014788

08010e1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b082      	sub	sp, #8
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	4603      	mov	r3, r0
 8010e24:	6039      	str	r1, [r7, #0]
 8010e26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010e28:	79fb      	ldrb	r3, [r7, #7]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d105      	bne.n	8010e3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e2e:	683a      	ldr	r2, [r7, #0]
 8010e30:	4907      	ldr	r1, [pc, #28]	; (8010e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e32:	4808      	ldr	r0, [pc, #32]	; (8010e54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e34:	f7fc fab1 	bl	800d39a <USBD_GetString>
 8010e38:	e004      	b.n	8010e44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e3a:	683a      	ldr	r2, [r7, #0]
 8010e3c:	4904      	ldr	r1, [pc, #16]	; (8010e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e3e:	4805      	ldr	r0, [pc, #20]	; (8010e54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e40:	f7fc faab 	bl	800d39a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e44:	4b02      	ldr	r3, [pc, #8]	; (8010e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3708      	adds	r7, #8
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	2000e938 	.word	0x2000e938
 8010e54:	08014794 	.word	0x08014794

08010e58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010e5e:	4b0f      	ldr	r3, [pc, #60]	; (8010e9c <Get_SerialNum+0x44>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010e64:	4b0e      	ldr	r3, [pc, #56]	; (8010ea0 <Get_SerialNum+0x48>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010e6a:	4b0e      	ldr	r3, [pc, #56]	; (8010ea4 <Get_SerialNum+0x4c>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010e70:	68fa      	ldr	r2, [r7, #12]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	4413      	add	r3, r2
 8010e76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d009      	beq.n	8010e92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010e7e:	2208      	movs	r2, #8
 8010e80:	4909      	ldr	r1, [pc, #36]	; (8010ea8 <Get_SerialNum+0x50>)
 8010e82:	68f8      	ldr	r0, [r7, #12]
 8010e84:	f000 f814 	bl	8010eb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010e88:	2204      	movs	r2, #4
 8010e8a:	4908      	ldr	r1, [pc, #32]	; (8010eac <Get_SerialNum+0x54>)
 8010e8c:	68b8      	ldr	r0, [r7, #8]
 8010e8e:	f000 f80f 	bl	8010eb0 <IntToUnicode>
  }
}
 8010e92:	bf00      	nop
 8010e94:	3710      	adds	r7, #16
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
 8010e9a:	bf00      	nop
 8010e9c:	1fff7a10 	.word	0x1fff7a10
 8010ea0:	1fff7a14 	.word	0x1fff7a14
 8010ea4:	1fff7a18 	.word	0x1fff7a18
 8010ea8:	20000196 	.word	0x20000196
 8010eac:	200001a6 	.word	0x200001a6

08010eb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b087      	sub	sp, #28
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	4613      	mov	r3, r2
 8010ebc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	75fb      	strb	r3, [r7, #23]
 8010ec6:	e027      	b.n	8010f18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	0f1b      	lsrs	r3, r3, #28
 8010ecc:	2b09      	cmp	r3, #9
 8010ece:	d80b      	bhi.n	8010ee8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	0f1b      	lsrs	r3, r3, #28
 8010ed4:	b2da      	uxtb	r2, r3
 8010ed6:	7dfb      	ldrb	r3, [r7, #23]
 8010ed8:	005b      	lsls	r3, r3, #1
 8010eda:	4619      	mov	r1, r3
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	440b      	add	r3, r1
 8010ee0:	3230      	adds	r2, #48	; 0x30
 8010ee2:	b2d2      	uxtb	r2, r2
 8010ee4:	701a      	strb	r2, [r3, #0]
 8010ee6:	e00a      	b.n	8010efe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	0f1b      	lsrs	r3, r3, #28
 8010eec:	b2da      	uxtb	r2, r3
 8010eee:	7dfb      	ldrb	r3, [r7, #23]
 8010ef0:	005b      	lsls	r3, r3, #1
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	440b      	add	r3, r1
 8010ef8:	3237      	adds	r2, #55	; 0x37
 8010efa:	b2d2      	uxtb	r2, r2
 8010efc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	011b      	lsls	r3, r3, #4
 8010f02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010f04:	7dfb      	ldrb	r3, [r7, #23]
 8010f06:	005b      	lsls	r3, r3, #1
 8010f08:	3301      	adds	r3, #1
 8010f0a:	68ba      	ldr	r2, [r7, #8]
 8010f0c:	4413      	add	r3, r2
 8010f0e:	2200      	movs	r2, #0
 8010f10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010f12:	7dfb      	ldrb	r3, [r7, #23]
 8010f14:	3301      	adds	r3, #1
 8010f16:	75fb      	strb	r3, [r7, #23]
 8010f18:	7dfa      	ldrb	r2, [r7, #23]
 8010f1a:	79fb      	ldrb	r3, [r7, #7]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d3d3      	bcc.n	8010ec8 <IntToUnicode+0x18>
  }
}
 8010f20:	bf00      	nop
 8010f22:	bf00      	nop
 8010f24:	371c      	adds	r7, #28
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr
	...

08010f30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b08a      	sub	sp, #40	; 0x28
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f38:	f107 0314 	add.w	r3, r7, #20
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	601a      	str	r2, [r3, #0]
 8010f40:	605a      	str	r2, [r3, #4]
 8010f42:	609a      	str	r2, [r3, #8]
 8010f44:	60da      	str	r2, [r3, #12]
 8010f46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010f50:	d147      	bne.n	8010fe2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010f52:	2300      	movs	r3, #0
 8010f54:	613b      	str	r3, [r7, #16]
 8010f56:	4b25      	ldr	r3, [pc, #148]	; (8010fec <HAL_PCD_MspInit+0xbc>)
 8010f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f5a:	4a24      	ldr	r2, [pc, #144]	; (8010fec <HAL_PCD_MspInit+0xbc>)
 8010f5c:	f043 0301 	orr.w	r3, r3, #1
 8010f60:	6313      	str	r3, [r2, #48]	; 0x30
 8010f62:	4b22      	ldr	r3, [pc, #136]	; (8010fec <HAL_PCD_MspInit+0xbc>)
 8010f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f66:	f003 0301 	and.w	r3, r3, #1
 8010f6a:	613b      	str	r3, [r7, #16]
 8010f6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010f74:	2300      	movs	r3, #0
 8010f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010f7c:	f107 0314 	add.w	r3, r7, #20
 8010f80:	4619      	mov	r1, r3
 8010f82:	481b      	ldr	r0, [pc, #108]	; (8010ff0 <HAL_PCD_MspInit+0xc0>)
 8010f84:	f7f4 fd64 	bl	8005a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010f88:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f8e:	2302      	movs	r3, #2
 8010f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f92:	2300      	movs	r3, #0
 8010f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010f96:	2300      	movs	r3, #0
 8010f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010f9a:	230a      	movs	r3, #10
 8010f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f9e:	f107 0314 	add.w	r3, r7, #20
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	4812      	ldr	r0, [pc, #72]	; (8010ff0 <HAL_PCD_MspInit+0xc0>)
 8010fa6:	f7f4 fd53 	bl	8005a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010faa:	4b10      	ldr	r3, [pc, #64]	; (8010fec <HAL_PCD_MspInit+0xbc>)
 8010fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fae:	4a0f      	ldr	r2, [pc, #60]	; (8010fec <HAL_PCD_MspInit+0xbc>)
 8010fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fb4:	6353      	str	r3, [r2, #52]	; 0x34
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	60fb      	str	r3, [r7, #12]
 8010fba:	4b0c      	ldr	r3, [pc, #48]	; (8010fec <HAL_PCD_MspInit+0xbc>)
 8010fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fbe:	4a0b      	ldr	r2, [pc, #44]	; (8010fec <HAL_PCD_MspInit+0xbc>)
 8010fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8010fc6:	4b09      	ldr	r3, [pc, #36]	; (8010fec <HAL_PCD_MspInit+0xbc>)
 8010fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fce:	60fb      	str	r3, [r7, #12]
 8010fd0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	2105      	movs	r1, #5
 8010fd6:	2043      	movs	r0, #67	; 0x43
 8010fd8:	f7f4 f8a2 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010fdc:	2043      	movs	r0, #67	; 0x43
 8010fde:	f7f4 f8bb 	bl	8005158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010fe2:	bf00      	nop
 8010fe4:	3728      	adds	r7, #40	; 0x28
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}
 8010fea:	bf00      	nop
 8010fec:	40023800 	.word	0x40023800
 8010ff0:	40020000 	.word	0x40020000

08010ff4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011008:	4619      	mov	r1, r3
 801100a:	4610      	mov	r0, r2
 801100c:	f7fb f9de 	bl	800c3cc <USBD_LL_SetupStage>
}
 8011010:	bf00      	nop
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	460b      	mov	r3, r1
 8011022:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801102a:	78fa      	ldrb	r2, [r7, #3]
 801102c:	6879      	ldr	r1, [r7, #4]
 801102e:	4613      	mov	r3, r2
 8011030:	00db      	lsls	r3, r3, #3
 8011032:	1a9b      	subs	r3, r3, r2
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	440b      	add	r3, r1
 8011038:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801103c:	681a      	ldr	r2, [r3, #0]
 801103e:	78fb      	ldrb	r3, [r7, #3]
 8011040:	4619      	mov	r1, r3
 8011042:	f7fb fa18 	bl	800c476 <USBD_LL_DataOutStage>
}
 8011046:	bf00      	nop
 8011048:	3708      	adds	r7, #8
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}

0801104e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801104e:	b580      	push	{r7, lr}
 8011050:	b082      	sub	sp, #8
 8011052:	af00      	add	r7, sp, #0
 8011054:	6078      	str	r0, [r7, #4]
 8011056:	460b      	mov	r3, r1
 8011058:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011060:	78fa      	ldrb	r2, [r7, #3]
 8011062:	6879      	ldr	r1, [r7, #4]
 8011064:	4613      	mov	r3, r2
 8011066:	00db      	lsls	r3, r3, #3
 8011068:	1a9b      	subs	r3, r3, r2
 801106a:	009b      	lsls	r3, r3, #2
 801106c:	440b      	add	r3, r1
 801106e:	3348      	adds	r3, #72	; 0x48
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	78fb      	ldrb	r3, [r7, #3]
 8011074:	4619      	mov	r1, r3
 8011076:	f7fb fa61 	bl	800c53c <USBD_LL_DataInStage>
}
 801107a:	bf00      	nop
 801107c:	3708      	adds	r7, #8
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}

08011082 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011082:	b580      	push	{r7, lr}
 8011084:	b082      	sub	sp, #8
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011090:	4618      	mov	r0, r3
 8011092:	f7fb fb75 	bl	800c780 <USBD_LL_SOF>
}
 8011096:	bf00      	nop
 8011098:	3708      	adds	r7, #8
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}

0801109e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801109e:	b580      	push	{r7, lr}
 80110a0:	b084      	sub	sp, #16
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80110a6:	2301      	movs	r3, #1
 80110a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	68db      	ldr	r3, [r3, #12]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d102      	bne.n	80110b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80110b2:	2300      	movs	r3, #0
 80110b4:	73fb      	strb	r3, [r7, #15]
 80110b6:	e008      	b.n	80110ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	2b02      	cmp	r3, #2
 80110be:	d102      	bne.n	80110c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80110c0:	2301      	movs	r3, #1
 80110c2:	73fb      	strb	r3, [r7, #15]
 80110c4:	e001      	b.n	80110ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80110c6:	f7f2 fd8d 	bl	8003be4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80110d0:	7bfa      	ldrb	r2, [r7, #15]
 80110d2:	4611      	mov	r1, r2
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7fb fb15 	bl	800c704 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7fb fac1 	bl	800c668 <USBD_LL_Reset>
}
 80110e6:	bf00      	nop
 80110e8:	3710      	adds	r7, #16
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
	...

080110f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b082      	sub	sp, #8
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fb fb10 	bl	800c724 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	6812      	ldr	r2, [r2, #0]
 8011112:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011116:	f043 0301 	orr.w	r3, r3, #1
 801111a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6a1b      	ldr	r3, [r3, #32]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d005      	beq.n	8011130 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011124:	4b04      	ldr	r3, [pc, #16]	; (8011138 <HAL_PCD_SuspendCallback+0x48>)
 8011126:	691b      	ldr	r3, [r3, #16]
 8011128:	4a03      	ldr	r2, [pc, #12]	; (8011138 <HAL_PCD_SuspendCallback+0x48>)
 801112a:	f043 0306 	orr.w	r3, r3, #6
 801112e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011130:	bf00      	nop
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	e000ed00 	.word	0xe000ed00

0801113c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801114a:	4618      	mov	r0, r3
 801114c:	f7fb fb00 	bl	800c750 <USBD_LL_Resume>
}
 8011150:	bf00      	nop
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	460b      	mov	r3, r1
 8011162:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801116a:	78fa      	ldrb	r2, [r7, #3]
 801116c:	4611      	mov	r1, r2
 801116e:	4618      	mov	r0, r3
 8011170:	f7fb fb4e 	bl	800c810 <USBD_LL_IsoOUTIncomplete>
}
 8011174:	bf00      	nop
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	460b      	mov	r3, r1
 8011186:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801118e:	78fa      	ldrb	r2, [r7, #3]
 8011190:	4611      	mov	r1, r2
 8011192:	4618      	mov	r0, r3
 8011194:	f7fb fb16 	bl	800c7c4 <USBD_LL_IsoINIncomplete>
}
 8011198:	bf00      	nop
 801119a:	3708      	adds	r7, #8
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}

080111a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fb fb54 	bl	800c85c <USBD_LL_DevConnected>
}
 80111b4:	bf00      	nop
 80111b6:	3708      	adds	r7, #8
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}

080111bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fb fb51 	bl	800c872 <USBD_LL_DevDisconnected>
}
 80111d0:	bf00      	nop
 80111d2:	3708      	adds	r7, #8
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}

080111d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b082      	sub	sp, #8
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d13c      	bne.n	8011262 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80111e8:	4a20      	ldr	r2, [pc, #128]	; (801126c <USBD_LL_Init+0x94>)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	4a1e      	ldr	r2, [pc, #120]	; (801126c <USBD_LL_Init+0x94>)
 80111f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80111f8:	4b1c      	ldr	r3, [pc, #112]	; (801126c <USBD_LL_Init+0x94>)
 80111fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80111fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011200:	4b1a      	ldr	r3, [pc, #104]	; (801126c <USBD_LL_Init+0x94>)
 8011202:	2204      	movs	r2, #4
 8011204:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011206:	4b19      	ldr	r3, [pc, #100]	; (801126c <USBD_LL_Init+0x94>)
 8011208:	2202      	movs	r2, #2
 801120a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801120c:	4b17      	ldr	r3, [pc, #92]	; (801126c <USBD_LL_Init+0x94>)
 801120e:	2200      	movs	r2, #0
 8011210:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011212:	4b16      	ldr	r3, [pc, #88]	; (801126c <USBD_LL_Init+0x94>)
 8011214:	2202      	movs	r2, #2
 8011216:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011218:	4b14      	ldr	r3, [pc, #80]	; (801126c <USBD_LL_Init+0x94>)
 801121a:	2200      	movs	r2, #0
 801121c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801121e:	4b13      	ldr	r3, [pc, #76]	; (801126c <USBD_LL_Init+0x94>)
 8011220:	2200      	movs	r2, #0
 8011222:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011224:	4b11      	ldr	r3, [pc, #68]	; (801126c <USBD_LL_Init+0x94>)
 8011226:	2200      	movs	r2, #0
 8011228:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801122a:	4b10      	ldr	r3, [pc, #64]	; (801126c <USBD_LL_Init+0x94>)
 801122c:	2200      	movs	r2, #0
 801122e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011230:	4b0e      	ldr	r3, [pc, #56]	; (801126c <USBD_LL_Init+0x94>)
 8011232:	2200      	movs	r2, #0
 8011234:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011236:	480d      	ldr	r0, [pc, #52]	; (801126c <USBD_LL_Init+0x94>)
 8011238:	f7f6 f813 	bl	8007262 <HAL_PCD_Init>
 801123c:	4603      	mov	r3, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d001      	beq.n	8011246 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011242:	f7f2 fccf 	bl	8003be4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011246:	2180      	movs	r1, #128	; 0x80
 8011248:	4808      	ldr	r0, [pc, #32]	; (801126c <USBD_LL_Init+0x94>)
 801124a:	f7f7 f970 	bl	800852e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801124e:	2240      	movs	r2, #64	; 0x40
 8011250:	2100      	movs	r1, #0
 8011252:	4806      	ldr	r0, [pc, #24]	; (801126c <USBD_LL_Init+0x94>)
 8011254:	f7f7 f924 	bl	80084a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011258:	2280      	movs	r2, #128	; 0x80
 801125a:	2101      	movs	r1, #1
 801125c:	4803      	ldr	r0, [pc, #12]	; (801126c <USBD_LL_Init+0x94>)
 801125e:	f7f7 f91f 	bl	80084a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011262:	2300      	movs	r3, #0
}
 8011264:	4618      	mov	r0, r3
 8011266:	3708      	adds	r7, #8
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	2000eb38 	.word	0x2000eb38

08011270 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011278:	2300      	movs	r3, #0
 801127a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801127c:	2300      	movs	r3, #0
 801127e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011286:	4618      	mov	r0, r3
 8011288:	f7f6 f908 	bl	800749c <HAL_PCD_Start>
 801128c:	4603      	mov	r3, r0
 801128e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011290:	7bfb      	ldrb	r3, [r7, #15]
 8011292:	4618      	mov	r0, r3
 8011294:	f000 f942 	bl	801151c <USBD_Get_USB_Status>
 8011298:	4603      	mov	r3, r0
 801129a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801129c:	7bbb      	ldrb	r3, [r7, #14]
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3710      	adds	r7, #16
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}

080112a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b084      	sub	sp, #16
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6078      	str	r0, [r7, #4]
 80112ae:	4608      	mov	r0, r1
 80112b0:	4611      	mov	r1, r2
 80112b2:	461a      	mov	r2, r3
 80112b4:	4603      	mov	r3, r0
 80112b6:	70fb      	strb	r3, [r7, #3]
 80112b8:	460b      	mov	r3, r1
 80112ba:	70bb      	strb	r3, [r7, #2]
 80112bc:	4613      	mov	r3, r2
 80112be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112c0:	2300      	movs	r3, #0
 80112c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112c4:	2300      	movs	r3, #0
 80112c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80112ce:	78bb      	ldrb	r3, [r7, #2]
 80112d0:	883a      	ldrh	r2, [r7, #0]
 80112d2:	78f9      	ldrb	r1, [r7, #3]
 80112d4:	f7f6 fcec 	bl	8007cb0 <HAL_PCD_EP_Open>
 80112d8:	4603      	mov	r3, r0
 80112da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
 80112de:	4618      	mov	r0, r3
 80112e0:	f000 f91c 	bl	801151c <USBD_Get_USB_Status>
 80112e4:	4603      	mov	r3, r0
 80112e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b084      	sub	sp, #16
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
 80112fa:	460b      	mov	r3, r1
 80112fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112fe:	2300      	movs	r3, #0
 8011300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011302:	2300      	movs	r3, #0
 8011304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801130c:	78fa      	ldrb	r2, [r7, #3]
 801130e:	4611      	mov	r1, r2
 8011310:	4618      	mov	r0, r3
 8011312:	f7f6 fd35 	bl	8007d80 <HAL_PCD_EP_Close>
 8011316:	4603      	mov	r3, r0
 8011318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801131a:	7bfb      	ldrb	r3, [r7, #15]
 801131c:	4618      	mov	r0, r3
 801131e:	f000 f8fd 	bl	801151c <USBD_Get_USB_Status>
 8011322:	4603      	mov	r3, r0
 8011324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011326:	7bbb      	ldrb	r3, [r7, #14]
}
 8011328:	4618      	mov	r0, r3
 801132a:	3710      	adds	r7, #16
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	460b      	mov	r3, r1
 801133a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801133c:	2300      	movs	r3, #0
 801133e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011340:	2300      	movs	r3, #0
 8011342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801134a:	78fa      	ldrb	r2, [r7, #3]
 801134c:	4611      	mov	r1, r2
 801134e:	4618      	mov	r0, r3
 8011350:	f7f6 fe0d 	bl	8007f6e <HAL_PCD_EP_SetStall>
 8011354:	4603      	mov	r3, r0
 8011356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011358:	7bfb      	ldrb	r3, [r7, #15]
 801135a:	4618      	mov	r0, r3
 801135c:	f000 f8de 	bl	801151c <USBD_Get_USB_Status>
 8011360:	4603      	mov	r3, r0
 8011362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011364:	7bbb      	ldrb	r3, [r7, #14]
}
 8011366:	4618      	mov	r0, r3
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}

0801136e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801136e:	b580      	push	{r7, lr}
 8011370:	b084      	sub	sp, #16
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
 8011376:	460b      	mov	r3, r1
 8011378:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801137a:	2300      	movs	r3, #0
 801137c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801137e:	2300      	movs	r3, #0
 8011380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011388:	78fa      	ldrb	r2, [r7, #3]
 801138a:	4611      	mov	r1, r2
 801138c:	4618      	mov	r0, r3
 801138e:	f7f6 fe52 	bl	8008036 <HAL_PCD_EP_ClrStall>
 8011392:	4603      	mov	r3, r0
 8011394:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011396:	7bfb      	ldrb	r3, [r7, #15]
 8011398:	4618      	mov	r0, r3
 801139a:	f000 f8bf 	bl	801151c <USBD_Get_USB_Status>
 801139e:	4603      	mov	r3, r0
 80113a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3710      	adds	r7, #16
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	460b      	mov	r3, r1
 80113b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80113be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80113c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	da0b      	bge.n	80113e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80113c8:	78fb      	ldrb	r3, [r7, #3]
 80113ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113ce:	68f9      	ldr	r1, [r7, #12]
 80113d0:	4613      	mov	r3, r2
 80113d2:	00db      	lsls	r3, r3, #3
 80113d4:	1a9b      	subs	r3, r3, r2
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	440b      	add	r3, r1
 80113da:	333e      	adds	r3, #62	; 0x3e
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	e00b      	b.n	80113f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80113e0:	78fb      	ldrb	r3, [r7, #3]
 80113e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113e6:	68f9      	ldr	r1, [r7, #12]
 80113e8:	4613      	mov	r3, r2
 80113ea:	00db      	lsls	r3, r3, #3
 80113ec:	1a9b      	subs	r3, r3, r2
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	440b      	add	r3, r1
 80113f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80113f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3714      	adds	r7, #20
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr

08011404 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	460b      	mov	r3, r1
 801140e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011410:	2300      	movs	r3, #0
 8011412:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011414:	2300      	movs	r3, #0
 8011416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801141e:	78fa      	ldrb	r2, [r7, #3]
 8011420:	4611      	mov	r1, r2
 8011422:	4618      	mov	r0, r3
 8011424:	f7f6 fc1f 	bl	8007c66 <HAL_PCD_SetAddress>
 8011428:	4603      	mov	r3, r0
 801142a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801142c:	7bfb      	ldrb	r3, [r7, #15]
 801142e:	4618      	mov	r0, r3
 8011430:	f000 f874 	bl	801151c <USBD_Get_USB_Status>
 8011434:	4603      	mov	r3, r0
 8011436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011438:	7bbb      	ldrb	r3, [r7, #14]
}
 801143a:	4618      	mov	r0, r3
 801143c:	3710      	adds	r7, #16
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}

08011442 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011442:	b580      	push	{r7, lr}
 8011444:	b086      	sub	sp, #24
 8011446:	af00      	add	r7, sp, #0
 8011448:	60f8      	str	r0, [r7, #12]
 801144a:	607a      	str	r2, [r7, #4]
 801144c:	603b      	str	r3, [r7, #0]
 801144e:	460b      	mov	r3, r1
 8011450:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011452:	2300      	movs	r3, #0
 8011454:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011456:	2300      	movs	r3, #0
 8011458:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011460:	7af9      	ldrb	r1, [r7, #11]
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	687a      	ldr	r2, [r7, #4]
 8011466:	f7f6 fd38 	bl	8007eda <HAL_PCD_EP_Transmit>
 801146a:	4603      	mov	r3, r0
 801146c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801146e:	7dfb      	ldrb	r3, [r7, #23]
 8011470:	4618      	mov	r0, r3
 8011472:	f000 f853 	bl	801151c <USBD_Get_USB_Status>
 8011476:	4603      	mov	r3, r0
 8011478:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801147a:	7dbb      	ldrb	r3, [r7, #22]
}
 801147c:	4618      	mov	r0, r3
 801147e:	3718      	adds	r7, #24
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}

08011484 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b086      	sub	sp, #24
 8011488:	af00      	add	r7, sp, #0
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	607a      	str	r2, [r7, #4]
 801148e:	603b      	str	r3, [r7, #0]
 8011490:	460b      	mov	r3, r1
 8011492:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011494:	2300      	movs	r3, #0
 8011496:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011498:	2300      	movs	r3, #0
 801149a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80114a2:	7af9      	ldrb	r1, [r7, #11]
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	687a      	ldr	r2, [r7, #4]
 80114a8:	f7f6 fcb4 	bl	8007e14 <HAL_PCD_EP_Receive>
 80114ac:	4603      	mov	r3, r0
 80114ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114b0:	7dfb      	ldrb	r3, [r7, #23]
 80114b2:	4618      	mov	r0, r3
 80114b4:	f000 f832 	bl	801151c <USBD_Get_USB_Status>
 80114b8:	4603      	mov	r3, r0
 80114ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80114bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3718      	adds	r7, #24
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b082      	sub	sp, #8
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
 80114ce:	460b      	mov	r3, r1
 80114d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80114d8:	78fa      	ldrb	r2, [r7, #3]
 80114da:	4611      	mov	r1, r2
 80114dc:	4618      	mov	r0, r3
 80114de:	f7f6 fce4 	bl	8007eaa <HAL_PCD_EP_GetRxCount>
 80114e2:	4603      	mov	r3, r0
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3708      	adds	r7, #8
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b083      	sub	sp, #12
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80114f4:	4b03      	ldr	r3, [pc, #12]	; (8011504 <USBD_static_malloc+0x18>)
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	370c      	adds	r7, #12
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr
 8011502:	bf00      	nop
 8011504:	20007408 	.word	0x20007408

08011508 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011508:	b480      	push	{r7}
 801150a:	b083      	sub	sp, #12
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]

}
 8011510:	bf00      	nop
 8011512:	370c      	adds	r7, #12
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr

0801151c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801151c:	b480      	push	{r7}
 801151e:	b085      	sub	sp, #20
 8011520:	af00      	add	r7, sp, #0
 8011522:	4603      	mov	r3, r0
 8011524:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011526:	2300      	movs	r3, #0
 8011528:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801152a:	79fb      	ldrb	r3, [r7, #7]
 801152c:	2b03      	cmp	r3, #3
 801152e:	d817      	bhi.n	8011560 <USBD_Get_USB_Status+0x44>
 8011530:	a201      	add	r2, pc, #4	; (adr r2, 8011538 <USBD_Get_USB_Status+0x1c>)
 8011532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011536:	bf00      	nop
 8011538:	08011549 	.word	0x08011549
 801153c:	0801154f 	.word	0x0801154f
 8011540:	08011555 	.word	0x08011555
 8011544:	0801155b 	.word	0x0801155b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011548:	2300      	movs	r3, #0
 801154a:	73fb      	strb	r3, [r7, #15]
    break;
 801154c:	e00b      	b.n	8011566 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801154e:	2303      	movs	r3, #3
 8011550:	73fb      	strb	r3, [r7, #15]
    break;
 8011552:	e008      	b.n	8011566 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011554:	2301      	movs	r3, #1
 8011556:	73fb      	strb	r3, [r7, #15]
    break;
 8011558:	e005      	b.n	8011566 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801155a:	2303      	movs	r3, #3
 801155c:	73fb      	strb	r3, [r7, #15]
    break;
 801155e:	e002      	b.n	8011566 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011560:	2303      	movs	r3, #3
 8011562:	73fb      	strb	r3, [r7, #15]
    break;
 8011564:	bf00      	nop
  }
  return usb_status;
 8011566:	7bfb      	ldrb	r3, [r7, #15]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3714      	adds	r7, #20
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr

08011574 <__errno>:
 8011574:	4b01      	ldr	r3, [pc, #4]	; (801157c <__errno+0x8>)
 8011576:	6818      	ldr	r0, [r3, #0]
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop
 801157c:	200001b0 	.word	0x200001b0

08011580 <std>:
 8011580:	2300      	movs	r3, #0
 8011582:	b510      	push	{r4, lr}
 8011584:	4604      	mov	r4, r0
 8011586:	e9c0 3300 	strd	r3, r3, [r0]
 801158a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801158e:	6083      	str	r3, [r0, #8]
 8011590:	8181      	strh	r1, [r0, #12]
 8011592:	6643      	str	r3, [r0, #100]	; 0x64
 8011594:	81c2      	strh	r2, [r0, #14]
 8011596:	6183      	str	r3, [r0, #24]
 8011598:	4619      	mov	r1, r3
 801159a:	2208      	movs	r2, #8
 801159c:	305c      	adds	r0, #92	; 0x5c
 801159e:	f000 f934 	bl	801180a <memset>
 80115a2:	4b05      	ldr	r3, [pc, #20]	; (80115b8 <std+0x38>)
 80115a4:	6263      	str	r3, [r4, #36]	; 0x24
 80115a6:	4b05      	ldr	r3, [pc, #20]	; (80115bc <std+0x3c>)
 80115a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80115aa:	4b05      	ldr	r3, [pc, #20]	; (80115c0 <std+0x40>)
 80115ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115ae:	4b05      	ldr	r3, [pc, #20]	; (80115c4 <std+0x44>)
 80115b0:	6224      	str	r4, [r4, #32]
 80115b2:	6323      	str	r3, [r4, #48]	; 0x30
 80115b4:	bd10      	pop	{r4, pc}
 80115b6:	bf00      	nop
 80115b8:	080122d9 	.word	0x080122d9
 80115bc:	080122fb 	.word	0x080122fb
 80115c0:	08012333 	.word	0x08012333
 80115c4:	08012357 	.word	0x08012357

080115c8 <_cleanup_r>:
 80115c8:	4901      	ldr	r1, [pc, #4]	; (80115d0 <_cleanup_r+0x8>)
 80115ca:	f000 b8af 	b.w	801172c <_fwalk_reent>
 80115ce:	bf00      	nop
 80115d0:	08013255 	.word	0x08013255

080115d4 <__sfmoreglue>:
 80115d4:	b570      	push	{r4, r5, r6, lr}
 80115d6:	1e4a      	subs	r2, r1, #1
 80115d8:	2568      	movs	r5, #104	; 0x68
 80115da:	4355      	muls	r5, r2
 80115dc:	460e      	mov	r6, r1
 80115de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80115e2:	f000 f91b 	bl	801181c <_malloc_r>
 80115e6:	4604      	mov	r4, r0
 80115e8:	b140      	cbz	r0, 80115fc <__sfmoreglue+0x28>
 80115ea:	2100      	movs	r1, #0
 80115ec:	e9c0 1600 	strd	r1, r6, [r0]
 80115f0:	300c      	adds	r0, #12
 80115f2:	60a0      	str	r0, [r4, #8]
 80115f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80115f8:	f000 f907 	bl	801180a <memset>
 80115fc:	4620      	mov	r0, r4
 80115fe:	bd70      	pop	{r4, r5, r6, pc}

08011600 <__sfp_lock_acquire>:
 8011600:	4801      	ldr	r0, [pc, #4]	; (8011608 <__sfp_lock_acquire+0x8>)
 8011602:	f000 b8f2 	b.w	80117ea <__retarget_lock_acquire_recursive>
 8011606:	bf00      	nop
 8011608:	2000ef48 	.word	0x2000ef48

0801160c <__sfp_lock_release>:
 801160c:	4801      	ldr	r0, [pc, #4]	; (8011614 <__sfp_lock_release+0x8>)
 801160e:	f000 b8ed 	b.w	80117ec <__retarget_lock_release_recursive>
 8011612:	bf00      	nop
 8011614:	2000ef48 	.word	0x2000ef48

08011618 <__sinit_lock_acquire>:
 8011618:	4801      	ldr	r0, [pc, #4]	; (8011620 <__sinit_lock_acquire+0x8>)
 801161a:	f000 b8e6 	b.w	80117ea <__retarget_lock_acquire_recursive>
 801161e:	bf00      	nop
 8011620:	2000ef43 	.word	0x2000ef43

08011624 <__sinit_lock_release>:
 8011624:	4801      	ldr	r0, [pc, #4]	; (801162c <__sinit_lock_release+0x8>)
 8011626:	f000 b8e1 	b.w	80117ec <__retarget_lock_release_recursive>
 801162a:	bf00      	nop
 801162c:	2000ef43 	.word	0x2000ef43

08011630 <__sinit>:
 8011630:	b510      	push	{r4, lr}
 8011632:	4604      	mov	r4, r0
 8011634:	f7ff fff0 	bl	8011618 <__sinit_lock_acquire>
 8011638:	69a3      	ldr	r3, [r4, #24]
 801163a:	b11b      	cbz	r3, 8011644 <__sinit+0x14>
 801163c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011640:	f7ff bff0 	b.w	8011624 <__sinit_lock_release>
 8011644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011648:	6523      	str	r3, [r4, #80]	; 0x50
 801164a:	4b13      	ldr	r3, [pc, #76]	; (8011698 <__sinit+0x68>)
 801164c:	4a13      	ldr	r2, [pc, #76]	; (801169c <__sinit+0x6c>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	62a2      	str	r2, [r4, #40]	; 0x28
 8011652:	42a3      	cmp	r3, r4
 8011654:	bf04      	itt	eq
 8011656:	2301      	moveq	r3, #1
 8011658:	61a3      	streq	r3, [r4, #24]
 801165a:	4620      	mov	r0, r4
 801165c:	f000 f820 	bl	80116a0 <__sfp>
 8011660:	6060      	str	r0, [r4, #4]
 8011662:	4620      	mov	r0, r4
 8011664:	f000 f81c 	bl	80116a0 <__sfp>
 8011668:	60a0      	str	r0, [r4, #8]
 801166a:	4620      	mov	r0, r4
 801166c:	f000 f818 	bl	80116a0 <__sfp>
 8011670:	2200      	movs	r2, #0
 8011672:	60e0      	str	r0, [r4, #12]
 8011674:	2104      	movs	r1, #4
 8011676:	6860      	ldr	r0, [r4, #4]
 8011678:	f7ff ff82 	bl	8011580 <std>
 801167c:	68a0      	ldr	r0, [r4, #8]
 801167e:	2201      	movs	r2, #1
 8011680:	2109      	movs	r1, #9
 8011682:	f7ff ff7d 	bl	8011580 <std>
 8011686:	68e0      	ldr	r0, [r4, #12]
 8011688:	2202      	movs	r2, #2
 801168a:	2112      	movs	r1, #18
 801168c:	f7ff ff78 	bl	8011580 <std>
 8011690:	2301      	movs	r3, #1
 8011692:	61a3      	str	r3, [r4, #24]
 8011694:	e7d2      	b.n	801163c <__sinit+0xc>
 8011696:	bf00      	nop
 8011698:	0801aa70 	.word	0x0801aa70
 801169c:	080115c9 	.word	0x080115c9

080116a0 <__sfp>:
 80116a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116a2:	4607      	mov	r7, r0
 80116a4:	f7ff ffac 	bl	8011600 <__sfp_lock_acquire>
 80116a8:	4b1e      	ldr	r3, [pc, #120]	; (8011724 <__sfp+0x84>)
 80116aa:	681e      	ldr	r6, [r3, #0]
 80116ac:	69b3      	ldr	r3, [r6, #24]
 80116ae:	b913      	cbnz	r3, 80116b6 <__sfp+0x16>
 80116b0:	4630      	mov	r0, r6
 80116b2:	f7ff ffbd 	bl	8011630 <__sinit>
 80116b6:	3648      	adds	r6, #72	; 0x48
 80116b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80116bc:	3b01      	subs	r3, #1
 80116be:	d503      	bpl.n	80116c8 <__sfp+0x28>
 80116c0:	6833      	ldr	r3, [r6, #0]
 80116c2:	b30b      	cbz	r3, 8011708 <__sfp+0x68>
 80116c4:	6836      	ldr	r6, [r6, #0]
 80116c6:	e7f7      	b.n	80116b8 <__sfp+0x18>
 80116c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80116cc:	b9d5      	cbnz	r5, 8011704 <__sfp+0x64>
 80116ce:	4b16      	ldr	r3, [pc, #88]	; (8011728 <__sfp+0x88>)
 80116d0:	60e3      	str	r3, [r4, #12]
 80116d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80116d6:	6665      	str	r5, [r4, #100]	; 0x64
 80116d8:	f000 f886 	bl	80117e8 <__retarget_lock_init_recursive>
 80116dc:	f7ff ff96 	bl	801160c <__sfp_lock_release>
 80116e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80116e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80116e8:	6025      	str	r5, [r4, #0]
 80116ea:	61a5      	str	r5, [r4, #24]
 80116ec:	2208      	movs	r2, #8
 80116ee:	4629      	mov	r1, r5
 80116f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80116f4:	f000 f889 	bl	801180a <memset>
 80116f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80116fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011700:	4620      	mov	r0, r4
 8011702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011704:	3468      	adds	r4, #104	; 0x68
 8011706:	e7d9      	b.n	80116bc <__sfp+0x1c>
 8011708:	2104      	movs	r1, #4
 801170a:	4638      	mov	r0, r7
 801170c:	f7ff ff62 	bl	80115d4 <__sfmoreglue>
 8011710:	4604      	mov	r4, r0
 8011712:	6030      	str	r0, [r6, #0]
 8011714:	2800      	cmp	r0, #0
 8011716:	d1d5      	bne.n	80116c4 <__sfp+0x24>
 8011718:	f7ff ff78 	bl	801160c <__sfp_lock_release>
 801171c:	230c      	movs	r3, #12
 801171e:	603b      	str	r3, [r7, #0]
 8011720:	e7ee      	b.n	8011700 <__sfp+0x60>
 8011722:	bf00      	nop
 8011724:	0801aa70 	.word	0x0801aa70
 8011728:	ffff0001 	.word	0xffff0001

0801172c <_fwalk_reent>:
 801172c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011730:	4606      	mov	r6, r0
 8011732:	4688      	mov	r8, r1
 8011734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011738:	2700      	movs	r7, #0
 801173a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801173e:	f1b9 0901 	subs.w	r9, r9, #1
 8011742:	d505      	bpl.n	8011750 <_fwalk_reent+0x24>
 8011744:	6824      	ldr	r4, [r4, #0]
 8011746:	2c00      	cmp	r4, #0
 8011748:	d1f7      	bne.n	801173a <_fwalk_reent+0xe>
 801174a:	4638      	mov	r0, r7
 801174c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011750:	89ab      	ldrh	r3, [r5, #12]
 8011752:	2b01      	cmp	r3, #1
 8011754:	d907      	bls.n	8011766 <_fwalk_reent+0x3a>
 8011756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801175a:	3301      	adds	r3, #1
 801175c:	d003      	beq.n	8011766 <_fwalk_reent+0x3a>
 801175e:	4629      	mov	r1, r5
 8011760:	4630      	mov	r0, r6
 8011762:	47c0      	blx	r8
 8011764:	4307      	orrs	r7, r0
 8011766:	3568      	adds	r5, #104	; 0x68
 8011768:	e7e9      	b.n	801173e <_fwalk_reent+0x12>
	...

0801176c <__libc_init_array>:
 801176c:	b570      	push	{r4, r5, r6, lr}
 801176e:	4d0d      	ldr	r5, [pc, #52]	; (80117a4 <__libc_init_array+0x38>)
 8011770:	4c0d      	ldr	r4, [pc, #52]	; (80117a8 <__libc_init_array+0x3c>)
 8011772:	1b64      	subs	r4, r4, r5
 8011774:	10a4      	asrs	r4, r4, #2
 8011776:	2600      	movs	r6, #0
 8011778:	42a6      	cmp	r6, r4
 801177a:	d109      	bne.n	8011790 <__libc_init_array+0x24>
 801177c:	4d0b      	ldr	r5, [pc, #44]	; (80117ac <__libc_init_array+0x40>)
 801177e:	4c0c      	ldr	r4, [pc, #48]	; (80117b0 <__libc_init_array+0x44>)
 8011780:	f002 fe9e 	bl	80144c0 <_init>
 8011784:	1b64      	subs	r4, r4, r5
 8011786:	10a4      	asrs	r4, r4, #2
 8011788:	2600      	movs	r6, #0
 801178a:	42a6      	cmp	r6, r4
 801178c:	d105      	bne.n	801179a <__libc_init_array+0x2e>
 801178e:	bd70      	pop	{r4, r5, r6, pc}
 8011790:	f855 3b04 	ldr.w	r3, [r5], #4
 8011794:	4798      	blx	r3
 8011796:	3601      	adds	r6, #1
 8011798:	e7ee      	b.n	8011778 <__libc_init_array+0xc>
 801179a:	f855 3b04 	ldr.w	r3, [r5], #4
 801179e:	4798      	blx	r3
 80117a0:	3601      	adds	r6, #1
 80117a2:	e7f2      	b.n	801178a <__libc_init_array+0x1e>
 80117a4:	0801ae24 	.word	0x0801ae24
 80117a8:	0801ae24 	.word	0x0801ae24
 80117ac:	0801ae24 	.word	0x0801ae24
 80117b0:	0801ae28 	.word	0x0801ae28

080117b4 <__itoa>:
 80117b4:	1e93      	subs	r3, r2, #2
 80117b6:	2b22      	cmp	r3, #34	; 0x22
 80117b8:	b510      	push	{r4, lr}
 80117ba:	460c      	mov	r4, r1
 80117bc:	d904      	bls.n	80117c8 <__itoa+0x14>
 80117be:	2300      	movs	r3, #0
 80117c0:	700b      	strb	r3, [r1, #0]
 80117c2:	461c      	mov	r4, r3
 80117c4:	4620      	mov	r0, r4
 80117c6:	bd10      	pop	{r4, pc}
 80117c8:	2a0a      	cmp	r2, #10
 80117ca:	d109      	bne.n	80117e0 <__itoa+0x2c>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	da07      	bge.n	80117e0 <__itoa+0x2c>
 80117d0:	232d      	movs	r3, #45	; 0x2d
 80117d2:	700b      	strb	r3, [r1, #0]
 80117d4:	4240      	negs	r0, r0
 80117d6:	2101      	movs	r1, #1
 80117d8:	4421      	add	r1, r4
 80117da:	f000 fdd7 	bl	801238c <__utoa>
 80117de:	e7f1      	b.n	80117c4 <__itoa+0x10>
 80117e0:	2100      	movs	r1, #0
 80117e2:	e7f9      	b.n	80117d8 <__itoa+0x24>

080117e4 <itoa>:
 80117e4:	f7ff bfe6 	b.w	80117b4 <__itoa>

080117e8 <__retarget_lock_init_recursive>:
 80117e8:	4770      	bx	lr

080117ea <__retarget_lock_acquire_recursive>:
 80117ea:	4770      	bx	lr

080117ec <__retarget_lock_release_recursive>:
 80117ec:	4770      	bx	lr

080117ee <memcpy>:
 80117ee:	440a      	add	r2, r1
 80117f0:	4291      	cmp	r1, r2
 80117f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80117f6:	d100      	bne.n	80117fa <memcpy+0xc>
 80117f8:	4770      	bx	lr
 80117fa:	b510      	push	{r4, lr}
 80117fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011800:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011804:	4291      	cmp	r1, r2
 8011806:	d1f9      	bne.n	80117fc <memcpy+0xe>
 8011808:	bd10      	pop	{r4, pc}

0801180a <memset>:
 801180a:	4402      	add	r2, r0
 801180c:	4603      	mov	r3, r0
 801180e:	4293      	cmp	r3, r2
 8011810:	d100      	bne.n	8011814 <memset+0xa>
 8011812:	4770      	bx	lr
 8011814:	f803 1b01 	strb.w	r1, [r3], #1
 8011818:	e7f9      	b.n	801180e <memset+0x4>
	...

0801181c <_malloc_r>:
 801181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801181e:	1ccd      	adds	r5, r1, #3
 8011820:	f025 0503 	bic.w	r5, r5, #3
 8011824:	3508      	adds	r5, #8
 8011826:	2d0c      	cmp	r5, #12
 8011828:	bf38      	it	cc
 801182a:	250c      	movcc	r5, #12
 801182c:	2d00      	cmp	r5, #0
 801182e:	4606      	mov	r6, r0
 8011830:	db01      	blt.n	8011836 <_malloc_r+0x1a>
 8011832:	42a9      	cmp	r1, r5
 8011834:	d903      	bls.n	801183e <_malloc_r+0x22>
 8011836:	230c      	movs	r3, #12
 8011838:	6033      	str	r3, [r6, #0]
 801183a:	2000      	movs	r0, #0
 801183c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801183e:	f001 fd63 	bl	8013308 <__malloc_lock>
 8011842:	4921      	ldr	r1, [pc, #132]	; (80118c8 <_malloc_r+0xac>)
 8011844:	680a      	ldr	r2, [r1, #0]
 8011846:	4614      	mov	r4, r2
 8011848:	b99c      	cbnz	r4, 8011872 <_malloc_r+0x56>
 801184a:	4f20      	ldr	r7, [pc, #128]	; (80118cc <_malloc_r+0xb0>)
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	b923      	cbnz	r3, 801185a <_malloc_r+0x3e>
 8011850:	4621      	mov	r1, r4
 8011852:	4630      	mov	r0, r6
 8011854:	f000 fd10 	bl	8012278 <_sbrk_r>
 8011858:	6038      	str	r0, [r7, #0]
 801185a:	4629      	mov	r1, r5
 801185c:	4630      	mov	r0, r6
 801185e:	f000 fd0b 	bl	8012278 <_sbrk_r>
 8011862:	1c43      	adds	r3, r0, #1
 8011864:	d123      	bne.n	80118ae <_malloc_r+0x92>
 8011866:	230c      	movs	r3, #12
 8011868:	6033      	str	r3, [r6, #0]
 801186a:	4630      	mov	r0, r6
 801186c:	f001 fd52 	bl	8013314 <__malloc_unlock>
 8011870:	e7e3      	b.n	801183a <_malloc_r+0x1e>
 8011872:	6823      	ldr	r3, [r4, #0]
 8011874:	1b5b      	subs	r3, r3, r5
 8011876:	d417      	bmi.n	80118a8 <_malloc_r+0x8c>
 8011878:	2b0b      	cmp	r3, #11
 801187a:	d903      	bls.n	8011884 <_malloc_r+0x68>
 801187c:	6023      	str	r3, [r4, #0]
 801187e:	441c      	add	r4, r3
 8011880:	6025      	str	r5, [r4, #0]
 8011882:	e004      	b.n	801188e <_malloc_r+0x72>
 8011884:	6863      	ldr	r3, [r4, #4]
 8011886:	42a2      	cmp	r2, r4
 8011888:	bf0c      	ite	eq
 801188a:	600b      	streq	r3, [r1, #0]
 801188c:	6053      	strne	r3, [r2, #4]
 801188e:	4630      	mov	r0, r6
 8011890:	f001 fd40 	bl	8013314 <__malloc_unlock>
 8011894:	f104 000b 	add.w	r0, r4, #11
 8011898:	1d23      	adds	r3, r4, #4
 801189a:	f020 0007 	bic.w	r0, r0, #7
 801189e:	1ac2      	subs	r2, r0, r3
 80118a0:	d0cc      	beq.n	801183c <_malloc_r+0x20>
 80118a2:	1a1b      	subs	r3, r3, r0
 80118a4:	50a3      	str	r3, [r4, r2]
 80118a6:	e7c9      	b.n	801183c <_malloc_r+0x20>
 80118a8:	4622      	mov	r2, r4
 80118aa:	6864      	ldr	r4, [r4, #4]
 80118ac:	e7cc      	b.n	8011848 <_malloc_r+0x2c>
 80118ae:	1cc4      	adds	r4, r0, #3
 80118b0:	f024 0403 	bic.w	r4, r4, #3
 80118b4:	42a0      	cmp	r0, r4
 80118b6:	d0e3      	beq.n	8011880 <_malloc_r+0x64>
 80118b8:	1a21      	subs	r1, r4, r0
 80118ba:	4630      	mov	r0, r6
 80118bc:	f000 fcdc 	bl	8012278 <_sbrk_r>
 80118c0:	3001      	adds	r0, #1
 80118c2:	d1dd      	bne.n	8011880 <_malloc_r+0x64>
 80118c4:	e7cf      	b.n	8011866 <_malloc_r+0x4a>
 80118c6:	bf00      	nop
 80118c8:	20007628 	.word	0x20007628
 80118cc:	2000762c 	.word	0x2000762c

080118d0 <__cvt>:
 80118d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118d4:	ec55 4b10 	vmov	r4, r5, d0
 80118d8:	2d00      	cmp	r5, #0
 80118da:	460e      	mov	r6, r1
 80118dc:	4619      	mov	r1, r3
 80118de:	462b      	mov	r3, r5
 80118e0:	bfbb      	ittet	lt
 80118e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80118e6:	461d      	movlt	r5, r3
 80118e8:	2300      	movge	r3, #0
 80118ea:	232d      	movlt	r3, #45	; 0x2d
 80118ec:	700b      	strb	r3, [r1, #0]
 80118ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80118f4:	4691      	mov	r9, r2
 80118f6:	f023 0820 	bic.w	r8, r3, #32
 80118fa:	bfbc      	itt	lt
 80118fc:	4622      	movlt	r2, r4
 80118fe:	4614      	movlt	r4, r2
 8011900:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011904:	d005      	beq.n	8011912 <__cvt+0x42>
 8011906:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801190a:	d100      	bne.n	801190e <__cvt+0x3e>
 801190c:	3601      	adds	r6, #1
 801190e:	2102      	movs	r1, #2
 8011910:	e000      	b.n	8011914 <__cvt+0x44>
 8011912:	2103      	movs	r1, #3
 8011914:	ab03      	add	r3, sp, #12
 8011916:	9301      	str	r3, [sp, #4]
 8011918:	ab02      	add	r3, sp, #8
 801191a:	9300      	str	r3, [sp, #0]
 801191c:	ec45 4b10 	vmov	d0, r4, r5
 8011920:	4653      	mov	r3, sl
 8011922:	4632      	mov	r2, r6
 8011924:	f000 fe24 	bl	8012570 <_dtoa_r>
 8011928:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801192c:	4607      	mov	r7, r0
 801192e:	d102      	bne.n	8011936 <__cvt+0x66>
 8011930:	f019 0f01 	tst.w	r9, #1
 8011934:	d022      	beq.n	801197c <__cvt+0xac>
 8011936:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801193a:	eb07 0906 	add.w	r9, r7, r6
 801193e:	d110      	bne.n	8011962 <__cvt+0x92>
 8011940:	783b      	ldrb	r3, [r7, #0]
 8011942:	2b30      	cmp	r3, #48	; 0x30
 8011944:	d10a      	bne.n	801195c <__cvt+0x8c>
 8011946:	2200      	movs	r2, #0
 8011948:	2300      	movs	r3, #0
 801194a:	4620      	mov	r0, r4
 801194c:	4629      	mov	r1, r5
 801194e:	f7ef f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8011952:	b918      	cbnz	r0, 801195c <__cvt+0x8c>
 8011954:	f1c6 0601 	rsb	r6, r6, #1
 8011958:	f8ca 6000 	str.w	r6, [sl]
 801195c:	f8da 3000 	ldr.w	r3, [sl]
 8011960:	4499      	add	r9, r3
 8011962:	2200      	movs	r2, #0
 8011964:	2300      	movs	r3, #0
 8011966:	4620      	mov	r0, r4
 8011968:	4629      	mov	r1, r5
 801196a:	f7ef f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 801196e:	b108      	cbz	r0, 8011974 <__cvt+0xa4>
 8011970:	f8cd 900c 	str.w	r9, [sp, #12]
 8011974:	2230      	movs	r2, #48	; 0x30
 8011976:	9b03      	ldr	r3, [sp, #12]
 8011978:	454b      	cmp	r3, r9
 801197a:	d307      	bcc.n	801198c <__cvt+0xbc>
 801197c:	9b03      	ldr	r3, [sp, #12]
 801197e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011980:	1bdb      	subs	r3, r3, r7
 8011982:	4638      	mov	r0, r7
 8011984:	6013      	str	r3, [r2, #0]
 8011986:	b004      	add	sp, #16
 8011988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801198c:	1c59      	adds	r1, r3, #1
 801198e:	9103      	str	r1, [sp, #12]
 8011990:	701a      	strb	r2, [r3, #0]
 8011992:	e7f0      	b.n	8011976 <__cvt+0xa6>

08011994 <__exponent>:
 8011994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011996:	4603      	mov	r3, r0
 8011998:	2900      	cmp	r1, #0
 801199a:	bfb8      	it	lt
 801199c:	4249      	neglt	r1, r1
 801199e:	f803 2b02 	strb.w	r2, [r3], #2
 80119a2:	bfb4      	ite	lt
 80119a4:	222d      	movlt	r2, #45	; 0x2d
 80119a6:	222b      	movge	r2, #43	; 0x2b
 80119a8:	2909      	cmp	r1, #9
 80119aa:	7042      	strb	r2, [r0, #1]
 80119ac:	dd2a      	ble.n	8011a04 <__exponent+0x70>
 80119ae:	f10d 0407 	add.w	r4, sp, #7
 80119b2:	46a4      	mov	ip, r4
 80119b4:	270a      	movs	r7, #10
 80119b6:	46a6      	mov	lr, r4
 80119b8:	460a      	mov	r2, r1
 80119ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80119be:	fb07 1516 	mls	r5, r7, r6, r1
 80119c2:	3530      	adds	r5, #48	; 0x30
 80119c4:	2a63      	cmp	r2, #99	; 0x63
 80119c6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80119ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80119ce:	4631      	mov	r1, r6
 80119d0:	dcf1      	bgt.n	80119b6 <__exponent+0x22>
 80119d2:	3130      	adds	r1, #48	; 0x30
 80119d4:	f1ae 0502 	sub.w	r5, lr, #2
 80119d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80119dc:	1c44      	adds	r4, r0, #1
 80119de:	4629      	mov	r1, r5
 80119e0:	4561      	cmp	r1, ip
 80119e2:	d30a      	bcc.n	80119fa <__exponent+0x66>
 80119e4:	f10d 0209 	add.w	r2, sp, #9
 80119e8:	eba2 020e 	sub.w	r2, r2, lr
 80119ec:	4565      	cmp	r5, ip
 80119ee:	bf88      	it	hi
 80119f0:	2200      	movhi	r2, #0
 80119f2:	4413      	add	r3, r2
 80119f4:	1a18      	subs	r0, r3, r0
 80119f6:	b003      	add	sp, #12
 80119f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011a02:	e7ed      	b.n	80119e0 <__exponent+0x4c>
 8011a04:	2330      	movs	r3, #48	; 0x30
 8011a06:	3130      	adds	r1, #48	; 0x30
 8011a08:	7083      	strb	r3, [r0, #2]
 8011a0a:	70c1      	strb	r1, [r0, #3]
 8011a0c:	1d03      	adds	r3, r0, #4
 8011a0e:	e7f1      	b.n	80119f4 <__exponent+0x60>

08011a10 <_printf_float>:
 8011a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a14:	ed2d 8b02 	vpush	{d8}
 8011a18:	b08d      	sub	sp, #52	; 0x34
 8011a1a:	460c      	mov	r4, r1
 8011a1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011a20:	4616      	mov	r6, r2
 8011a22:	461f      	mov	r7, r3
 8011a24:	4605      	mov	r5, r0
 8011a26:	f001 fc51 	bl	80132cc <_localeconv_r>
 8011a2a:	f8d0 a000 	ldr.w	sl, [r0]
 8011a2e:	4650      	mov	r0, sl
 8011a30:	f7ee fbce 	bl	80001d0 <strlen>
 8011a34:	2300      	movs	r3, #0
 8011a36:	930a      	str	r3, [sp, #40]	; 0x28
 8011a38:	6823      	ldr	r3, [r4, #0]
 8011a3a:	9305      	str	r3, [sp, #20]
 8011a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8011a40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011a44:	3307      	adds	r3, #7
 8011a46:	f023 0307 	bic.w	r3, r3, #7
 8011a4a:	f103 0208 	add.w	r2, r3, #8
 8011a4e:	f8c8 2000 	str.w	r2, [r8]
 8011a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011a5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011a5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011a62:	9307      	str	r3, [sp, #28]
 8011a64:	f8cd 8018 	str.w	r8, [sp, #24]
 8011a68:	ee08 0a10 	vmov	s16, r0
 8011a6c:	4b9f      	ldr	r3, [pc, #636]	; (8011cec <_printf_float+0x2dc>)
 8011a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a76:	f7ef f859 	bl	8000b2c <__aeabi_dcmpun>
 8011a7a:	bb88      	cbnz	r0, 8011ae0 <_printf_float+0xd0>
 8011a7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a80:	4b9a      	ldr	r3, [pc, #616]	; (8011cec <_printf_float+0x2dc>)
 8011a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a86:	f7ef f833 	bl	8000af0 <__aeabi_dcmple>
 8011a8a:	bb48      	cbnz	r0, 8011ae0 <_printf_float+0xd0>
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	2300      	movs	r3, #0
 8011a90:	4640      	mov	r0, r8
 8011a92:	4649      	mov	r1, r9
 8011a94:	f7ef f822 	bl	8000adc <__aeabi_dcmplt>
 8011a98:	b110      	cbz	r0, 8011aa0 <_printf_float+0x90>
 8011a9a:	232d      	movs	r3, #45	; 0x2d
 8011a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011aa0:	4b93      	ldr	r3, [pc, #588]	; (8011cf0 <_printf_float+0x2e0>)
 8011aa2:	4894      	ldr	r0, [pc, #592]	; (8011cf4 <_printf_float+0x2e4>)
 8011aa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011aa8:	bf94      	ite	ls
 8011aaa:	4698      	movls	r8, r3
 8011aac:	4680      	movhi	r8, r0
 8011aae:	2303      	movs	r3, #3
 8011ab0:	6123      	str	r3, [r4, #16]
 8011ab2:	9b05      	ldr	r3, [sp, #20]
 8011ab4:	f023 0204 	bic.w	r2, r3, #4
 8011ab8:	6022      	str	r2, [r4, #0]
 8011aba:	f04f 0900 	mov.w	r9, #0
 8011abe:	9700      	str	r7, [sp, #0]
 8011ac0:	4633      	mov	r3, r6
 8011ac2:	aa0b      	add	r2, sp, #44	; 0x2c
 8011ac4:	4621      	mov	r1, r4
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	f000 f9d8 	bl	8011e7c <_printf_common>
 8011acc:	3001      	adds	r0, #1
 8011ace:	f040 8090 	bne.w	8011bf2 <_printf_float+0x1e2>
 8011ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ad6:	b00d      	add	sp, #52	; 0x34
 8011ad8:	ecbd 8b02 	vpop	{d8}
 8011adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae0:	4642      	mov	r2, r8
 8011ae2:	464b      	mov	r3, r9
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	4649      	mov	r1, r9
 8011ae8:	f7ef f820 	bl	8000b2c <__aeabi_dcmpun>
 8011aec:	b140      	cbz	r0, 8011b00 <_printf_float+0xf0>
 8011aee:	464b      	mov	r3, r9
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	bfbc      	itt	lt
 8011af4:	232d      	movlt	r3, #45	; 0x2d
 8011af6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011afa:	487f      	ldr	r0, [pc, #508]	; (8011cf8 <_printf_float+0x2e8>)
 8011afc:	4b7f      	ldr	r3, [pc, #508]	; (8011cfc <_printf_float+0x2ec>)
 8011afe:	e7d1      	b.n	8011aa4 <_printf_float+0x94>
 8011b00:	6863      	ldr	r3, [r4, #4]
 8011b02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011b06:	9206      	str	r2, [sp, #24]
 8011b08:	1c5a      	adds	r2, r3, #1
 8011b0a:	d13f      	bne.n	8011b8c <_printf_float+0x17c>
 8011b0c:	2306      	movs	r3, #6
 8011b0e:	6063      	str	r3, [r4, #4]
 8011b10:	9b05      	ldr	r3, [sp, #20]
 8011b12:	6861      	ldr	r1, [r4, #4]
 8011b14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011b18:	2300      	movs	r3, #0
 8011b1a:	9303      	str	r3, [sp, #12]
 8011b1c:	ab0a      	add	r3, sp, #40	; 0x28
 8011b1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011b22:	ab09      	add	r3, sp, #36	; 0x24
 8011b24:	ec49 8b10 	vmov	d0, r8, r9
 8011b28:	9300      	str	r3, [sp, #0]
 8011b2a:	6022      	str	r2, [r4, #0]
 8011b2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011b30:	4628      	mov	r0, r5
 8011b32:	f7ff fecd 	bl	80118d0 <__cvt>
 8011b36:	9b06      	ldr	r3, [sp, #24]
 8011b38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b3a:	2b47      	cmp	r3, #71	; 0x47
 8011b3c:	4680      	mov	r8, r0
 8011b3e:	d108      	bne.n	8011b52 <_printf_float+0x142>
 8011b40:	1cc8      	adds	r0, r1, #3
 8011b42:	db02      	blt.n	8011b4a <_printf_float+0x13a>
 8011b44:	6863      	ldr	r3, [r4, #4]
 8011b46:	4299      	cmp	r1, r3
 8011b48:	dd41      	ble.n	8011bce <_printf_float+0x1be>
 8011b4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8011b4e:	fa5f fb8b 	uxtb.w	fp, fp
 8011b52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011b56:	d820      	bhi.n	8011b9a <_printf_float+0x18a>
 8011b58:	3901      	subs	r1, #1
 8011b5a:	465a      	mov	r2, fp
 8011b5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011b60:	9109      	str	r1, [sp, #36]	; 0x24
 8011b62:	f7ff ff17 	bl	8011994 <__exponent>
 8011b66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b68:	1813      	adds	r3, r2, r0
 8011b6a:	2a01      	cmp	r2, #1
 8011b6c:	4681      	mov	r9, r0
 8011b6e:	6123      	str	r3, [r4, #16]
 8011b70:	dc02      	bgt.n	8011b78 <_printf_float+0x168>
 8011b72:	6822      	ldr	r2, [r4, #0]
 8011b74:	07d2      	lsls	r2, r2, #31
 8011b76:	d501      	bpl.n	8011b7c <_printf_float+0x16c>
 8011b78:	3301      	adds	r3, #1
 8011b7a:	6123      	str	r3, [r4, #16]
 8011b7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d09c      	beq.n	8011abe <_printf_float+0xae>
 8011b84:	232d      	movs	r3, #45	; 0x2d
 8011b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b8a:	e798      	b.n	8011abe <_printf_float+0xae>
 8011b8c:	9a06      	ldr	r2, [sp, #24]
 8011b8e:	2a47      	cmp	r2, #71	; 0x47
 8011b90:	d1be      	bne.n	8011b10 <_printf_float+0x100>
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d1bc      	bne.n	8011b10 <_printf_float+0x100>
 8011b96:	2301      	movs	r3, #1
 8011b98:	e7b9      	b.n	8011b0e <_printf_float+0xfe>
 8011b9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011b9e:	d118      	bne.n	8011bd2 <_printf_float+0x1c2>
 8011ba0:	2900      	cmp	r1, #0
 8011ba2:	6863      	ldr	r3, [r4, #4]
 8011ba4:	dd0b      	ble.n	8011bbe <_printf_float+0x1ae>
 8011ba6:	6121      	str	r1, [r4, #16]
 8011ba8:	b913      	cbnz	r3, 8011bb0 <_printf_float+0x1a0>
 8011baa:	6822      	ldr	r2, [r4, #0]
 8011bac:	07d0      	lsls	r0, r2, #31
 8011bae:	d502      	bpl.n	8011bb6 <_printf_float+0x1a6>
 8011bb0:	3301      	adds	r3, #1
 8011bb2:	440b      	add	r3, r1
 8011bb4:	6123      	str	r3, [r4, #16]
 8011bb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8011bb8:	f04f 0900 	mov.w	r9, #0
 8011bbc:	e7de      	b.n	8011b7c <_printf_float+0x16c>
 8011bbe:	b913      	cbnz	r3, 8011bc6 <_printf_float+0x1b6>
 8011bc0:	6822      	ldr	r2, [r4, #0]
 8011bc2:	07d2      	lsls	r2, r2, #31
 8011bc4:	d501      	bpl.n	8011bca <_printf_float+0x1ba>
 8011bc6:	3302      	adds	r3, #2
 8011bc8:	e7f4      	b.n	8011bb4 <_printf_float+0x1a4>
 8011bca:	2301      	movs	r3, #1
 8011bcc:	e7f2      	b.n	8011bb4 <_printf_float+0x1a4>
 8011bce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bd4:	4299      	cmp	r1, r3
 8011bd6:	db05      	blt.n	8011be4 <_printf_float+0x1d4>
 8011bd8:	6823      	ldr	r3, [r4, #0]
 8011bda:	6121      	str	r1, [r4, #16]
 8011bdc:	07d8      	lsls	r0, r3, #31
 8011bde:	d5ea      	bpl.n	8011bb6 <_printf_float+0x1a6>
 8011be0:	1c4b      	adds	r3, r1, #1
 8011be2:	e7e7      	b.n	8011bb4 <_printf_float+0x1a4>
 8011be4:	2900      	cmp	r1, #0
 8011be6:	bfd4      	ite	le
 8011be8:	f1c1 0202 	rsble	r2, r1, #2
 8011bec:	2201      	movgt	r2, #1
 8011bee:	4413      	add	r3, r2
 8011bf0:	e7e0      	b.n	8011bb4 <_printf_float+0x1a4>
 8011bf2:	6823      	ldr	r3, [r4, #0]
 8011bf4:	055a      	lsls	r2, r3, #21
 8011bf6:	d407      	bmi.n	8011c08 <_printf_float+0x1f8>
 8011bf8:	6923      	ldr	r3, [r4, #16]
 8011bfa:	4642      	mov	r2, r8
 8011bfc:	4631      	mov	r1, r6
 8011bfe:	4628      	mov	r0, r5
 8011c00:	47b8      	blx	r7
 8011c02:	3001      	adds	r0, #1
 8011c04:	d12c      	bne.n	8011c60 <_printf_float+0x250>
 8011c06:	e764      	b.n	8011ad2 <_printf_float+0xc2>
 8011c08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011c0c:	f240 80e0 	bls.w	8011dd0 <_printf_float+0x3c0>
 8011c10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c14:	2200      	movs	r2, #0
 8011c16:	2300      	movs	r3, #0
 8011c18:	f7ee ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c1c:	2800      	cmp	r0, #0
 8011c1e:	d034      	beq.n	8011c8a <_printf_float+0x27a>
 8011c20:	4a37      	ldr	r2, [pc, #220]	; (8011d00 <_printf_float+0x2f0>)
 8011c22:	2301      	movs	r3, #1
 8011c24:	4631      	mov	r1, r6
 8011c26:	4628      	mov	r0, r5
 8011c28:	47b8      	blx	r7
 8011c2a:	3001      	adds	r0, #1
 8011c2c:	f43f af51 	beq.w	8011ad2 <_printf_float+0xc2>
 8011c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c34:	429a      	cmp	r2, r3
 8011c36:	db02      	blt.n	8011c3e <_printf_float+0x22e>
 8011c38:	6823      	ldr	r3, [r4, #0]
 8011c3a:	07d8      	lsls	r0, r3, #31
 8011c3c:	d510      	bpl.n	8011c60 <_printf_float+0x250>
 8011c3e:	ee18 3a10 	vmov	r3, s16
 8011c42:	4652      	mov	r2, sl
 8011c44:	4631      	mov	r1, r6
 8011c46:	4628      	mov	r0, r5
 8011c48:	47b8      	blx	r7
 8011c4a:	3001      	adds	r0, #1
 8011c4c:	f43f af41 	beq.w	8011ad2 <_printf_float+0xc2>
 8011c50:	f04f 0800 	mov.w	r8, #0
 8011c54:	f104 091a 	add.w	r9, r4, #26
 8011c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c5a:	3b01      	subs	r3, #1
 8011c5c:	4543      	cmp	r3, r8
 8011c5e:	dc09      	bgt.n	8011c74 <_printf_float+0x264>
 8011c60:	6823      	ldr	r3, [r4, #0]
 8011c62:	079b      	lsls	r3, r3, #30
 8011c64:	f100 8105 	bmi.w	8011e72 <_printf_float+0x462>
 8011c68:	68e0      	ldr	r0, [r4, #12]
 8011c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c6c:	4298      	cmp	r0, r3
 8011c6e:	bfb8      	it	lt
 8011c70:	4618      	movlt	r0, r3
 8011c72:	e730      	b.n	8011ad6 <_printf_float+0xc6>
 8011c74:	2301      	movs	r3, #1
 8011c76:	464a      	mov	r2, r9
 8011c78:	4631      	mov	r1, r6
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	47b8      	blx	r7
 8011c7e:	3001      	adds	r0, #1
 8011c80:	f43f af27 	beq.w	8011ad2 <_printf_float+0xc2>
 8011c84:	f108 0801 	add.w	r8, r8, #1
 8011c88:	e7e6      	b.n	8011c58 <_printf_float+0x248>
 8011c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	dc39      	bgt.n	8011d04 <_printf_float+0x2f4>
 8011c90:	4a1b      	ldr	r2, [pc, #108]	; (8011d00 <_printf_float+0x2f0>)
 8011c92:	2301      	movs	r3, #1
 8011c94:	4631      	mov	r1, r6
 8011c96:	4628      	mov	r0, r5
 8011c98:	47b8      	blx	r7
 8011c9a:	3001      	adds	r0, #1
 8011c9c:	f43f af19 	beq.w	8011ad2 <_printf_float+0xc2>
 8011ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ca4:	4313      	orrs	r3, r2
 8011ca6:	d102      	bne.n	8011cae <_printf_float+0x29e>
 8011ca8:	6823      	ldr	r3, [r4, #0]
 8011caa:	07d9      	lsls	r1, r3, #31
 8011cac:	d5d8      	bpl.n	8011c60 <_printf_float+0x250>
 8011cae:	ee18 3a10 	vmov	r3, s16
 8011cb2:	4652      	mov	r2, sl
 8011cb4:	4631      	mov	r1, r6
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	47b8      	blx	r7
 8011cba:	3001      	adds	r0, #1
 8011cbc:	f43f af09 	beq.w	8011ad2 <_printf_float+0xc2>
 8011cc0:	f04f 0900 	mov.w	r9, #0
 8011cc4:	f104 0a1a 	add.w	sl, r4, #26
 8011cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cca:	425b      	negs	r3, r3
 8011ccc:	454b      	cmp	r3, r9
 8011cce:	dc01      	bgt.n	8011cd4 <_printf_float+0x2c4>
 8011cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cd2:	e792      	b.n	8011bfa <_printf_float+0x1ea>
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	4652      	mov	r2, sl
 8011cd8:	4631      	mov	r1, r6
 8011cda:	4628      	mov	r0, r5
 8011cdc:	47b8      	blx	r7
 8011cde:	3001      	adds	r0, #1
 8011ce0:	f43f aef7 	beq.w	8011ad2 <_printf_float+0xc2>
 8011ce4:	f109 0901 	add.w	r9, r9, #1
 8011ce8:	e7ee      	b.n	8011cc8 <_printf_float+0x2b8>
 8011cea:	bf00      	nop
 8011cec:	7fefffff 	.word	0x7fefffff
 8011cf0:	0801aa74 	.word	0x0801aa74
 8011cf4:	0801aa78 	.word	0x0801aa78
 8011cf8:	0801aa80 	.word	0x0801aa80
 8011cfc:	0801aa7c 	.word	0x0801aa7c
 8011d00:	0801aa84 	.word	0x0801aa84
 8011d04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	bfa8      	it	ge
 8011d0c:	461a      	movge	r2, r3
 8011d0e:	2a00      	cmp	r2, #0
 8011d10:	4691      	mov	r9, r2
 8011d12:	dc37      	bgt.n	8011d84 <_printf_float+0x374>
 8011d14:	f04f 0b00 	mov.w	fp, #0
 8011d18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d1c:	f104 021a 	add.w	r2, r4, #26
 8011d20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d22:	9305      	str	r3, [sp, #20]
 8011d24:	eba3 0309 	sub.w	r3, r3, r9
 8011d28:	455b      	cmp	r3, fp
 8011d2a:	dc33      	bgt.n	8011d94 <_printf_float+0x384>
 8011d2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d30:	429a      	cmp	r2, r3
 8011d32:	db3b      	blt.n	8011dac <_printf_float+0x39c>
 8011d34:	6823      	ldr	r3, [r4, #0]
 8011d36:	07da      	lsls	r2, r3, #31
 8011d38:	d438      	bmi.n	8011dac <_printf_float+0x39c>
 8011d3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d3c:	9b05      	ldr	r3, [sp, #20]
 8011d3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d40:	1ad3      	subs	r3, r2, r3
 8011d42:	eba2 0901 	sub.w	r9, r2, r1
 8011d46:	4599      	cmp	r9, r3
 8011d48:	bfa8      	it	ge
 8011d4a:	4699      	movge	r9, r3
 8011d4c:	f1b9 0f00 	cmp.w	r9, #0
 8011d50:	dc35      	bgt.n	8011dbe <_printf_float+0x3ae>
 8011d52:	f04f 0800 	mov.w	r8, #0
 8011d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d5a:	f104 0a1a 	add.w	sl, r4, #26
 8011d5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d62:	1a9b      	subs	r3, r3, r2
 8011d64:	eba3 0309 	sub.w	r3, r3, r9
 8011d68:	4543      	cmp	r3, r8
 8011d6a:	f77f af79 	ble.w	8011c60 <_printf_float+0x250>
 8011d6e:	2301      	movs	r3, #1
 8011d70:	4652      	mov	r2, sl
 8011d72:	4631      	mov	r1, r6
 8011d74:	4628      	mov	r0, r5
 8011d76:	47b8      	blx	r7
 8011d78:	3001      	adds	r0, #1
 8011d7a:	f43f aeaa 	beq.w	8011ad2 <_printf_float+0xc2>
 8011d7e:	f108 0801 	add.w	r8, r8, #1
 8011d82:	e7ec      	b.n	8011d5e <_printf_float+0x34e>
 8011d84:	4613      	mov	r3, r2
 8011d86:	4631      	mov	r1, r6
 8011d88:	4642      	mov	r2, r8
 8011d8a:	4628      	mov	r0, r5
 8011d8c:	47b8      	blx	r7
 8011d8e:	3001      	adds	r0, #1
 8011d90:	d1c0      	bne.n	8011d14 <_printf_float+0x304>
 8011d92:	e69e      	b.n	8011ad2 <_printf_float+0xc2>
 8011d94:	2301      	movs	r3, #1
 8011d96:	4631      	mov	r1, r6
 8011d98:	4628      	mov	r0, r5
 8011d9a:	9205      	str	r2, [sp, #20]
 8011d9c:	47b8      	blx	r7
 8011d9e:	3001      	adds	r0, #1
 8011da0:	f43f ae97 	beq.w	8011ad2 <_printf_float+0xc2>
 8011da4:	9a05      	ldr	r2, [sp, #20]
 8011da6:	f10b 0b01 	add.w	fp, fp, #1
 8011daa:	e7b9      	b.n	8011d20 <_printf_float+0x310>
 8011dac:	ee18 3a10 	vmov	r3, s16
 8011db0:	4652      	mov	r2, sl
 8011db2:	4631      	mov	r1, r6
 8011db4:	4628      	mov	r0, r5
 8011db6:	47b8      	blx	r7
 8011db8:	3001      	adds	r0, #1
 8011dba:	d1be      	bne.n	8011d3a <_printf_float+0x32a>
 8011dbc:	e689      	b.n	8011ad2 <_printf_float+0xc2>
 8011dbe:	9a05      	ldr	r2, [sp, #20]
 8011dc0:	464b      	mov	r3, r9
 8011dc2:	4442      	add	r2, r8
 8011dc4:	4631      	mov	r1, r6
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	47b8      	blx	r7
 8011dca:	3001      	adds	r0, #1
 8011dcc:	d1c1      	bne.n	8011d52 <_printf_float+0x342>
 8011dce:	e680      	b.n	8011ad2 <_printf_float+0xc2>
 8011dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011dd2:	2a01      	cmp	r2, #1
 8011dd4:	dc01      	bgt.n	8011dda <_printf_float+0x3ca>
 8011dd6:	07db      	lsls	r3, r3, #31
 8011dd8:	d538      	bpl.n	8011e4c <_printf_float+0x43c>
 8011dda:	2301      	movs	r3, #1
 8011ddc:	4642      	mov	r2, r8
 8011dde:	4631      	mov	r1, r6
 8011de0:	4628      	mov	r0, r5
 8011de2:	47b8      	blx	r7
 8011de4:	3001      	adds	r0, #1
 8011de6:	f43f ae74 	beq.w	8011ad2 <_printf_float+0xc2>
 8011dea:	ee18 3a10 	vmov	r3, s16
 8011dee:	4652      	mov	r2, sl
 8011df0:	4631      	mov	r1, r6
 8011df2:	4628      	mov	r0, r5
 8011df4:	47b8      	blx	r7
 8011df6:	3001      	adds	r0, #1
 8011df8:	f43f ae6b 	beq.w	8011ad2 <_printf_float+0xc2>
 8011dfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e00:	2200      	movs	r2, #0
 8011e02:	2300      	movs	r3, #0
 8011e04:	f7ee fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e08:	b9d8      	cbnz	r0, 8011e42 <_printf_float+0x432>
 8011e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e0c:	f108 0201 	add.w	r2, r8, #1
 8011e10:	3b01      	subs	r3, #1
 8011e12:	4631      	mov	r1, r6
 8011e14:	4628      	mov	r0, r5
 8011e16:	47b8      	blx	r7
 8011e18:	3001      	adds	r0, #1
 8011e1a:	d10e      	bne.n	8011e3a <_printf_float+0x42a>
 8011e1c:	e659      	b.n	8011ad2 <_printf_float+0xc2>
 8011e1e:	2301      	movs	r3, #1
 8011e20:	4652      	mov	r2, sl
 8011e22:	4631      	mov	r1, r6
 8011e24:	4628      	mov	r0, r5
 8011e26:	47b8      	blx	r7
 8011e28:	3001      	adds	r0, #1
 8011e2a:	f43f ae52 	beq.w	8011ad2 <_printf_float+0xc2>
 8011e2e:	f108 0801 	add.w	r8, r8, #1
 8011e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e34:	3b01      	subs	r3, #1
 8011e36:	4543      	cmp	r3, r8
 8011e38:	dcf1      	bgt.n	8011e1e <_printf_float+0x40e>
 8011e3a:	464b      	mov	r3, r9
 8011e3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011e40:	e6dc      	b.n	8011bfc <_printf_float+0x1ec>
 8011e42:	f04f 0800 	mov.w	r8, #0
 8011e46:	f104 0a1a 	add.w	sl, r4, #26
 8011e4a:	e7f2      	b.n	8011e32 <_printf_float+0x422>
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	4642      	mov	r2, r8
 8011e50:	e7df      	b.n	8011e12 <_printf_float+0x402>
 8011e52:	2301      	movs	r3, #1
 8011e54:	464a      	mov	r2, r9
 8011e56:	4631      	mov	r1, r6
 8011e58:	4628      	mov	r0, r5
 8011e5a:	47b8      	blx	r7
 8011e5c:	3001      	adds	r0, #1
 8011e5e:	f43f ae38 	beq.w	8011ad2 <_printf_float+0xc2>
 8011e62:	f108 0801 	add.w	r8, r8, #1
 8011e66:	68e3      	ldr	r3, [r4, #12]
 8011e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e6a:	1a5b      	subs	r3, r3, r1
 8011e6c:	4543      	cmp	r3, r8
 8011e6e:	dcf0      	bgt.n	8011e52 <_printf_float+0x442>
 8011e70:	e6fa      	b.n	8011c68 <_printf_float+0x258>
 8011e72:	f04f 0800 	mov.w	r8, #0
 8011e76:	f104 0919 	add.w	r9, r4, #25
 8011e7a:	e7f4      	b.n	8011e66 <_printf_float+0x456>

08011e7c <_printf_common>:
 8011e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e80:	4616      	mov	r6, r2
 8011e82:	4699      	mov	r9, r3
 8011e84:	688a      	ldr	r2, [r1, #8]
 8011e86:	690b      	ldr	r3, [r1, #16]
 8011e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	bfb8      	it	lt
 8011e90:	4613      	movlt	r3, r2
 8011e92:	6033      	str	r3, [r6, #0]
 8011e94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e98:	4607      	mov	r7, r0
 8011e9a:	460c      	mov	r4, r1
 8011e9c:	b10a      	cbz	r2, 8011ea2 <_printf_common+0x26>
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	6033      	str	r3, [r6, #0]
 8011ea2:	6823      	ldr	r3, [r4, #0]
 8011ea4:	0699      	lsls	r1, r3, #26
 8011ea6:	bf42      	ittt	mi
 8011ea8:	6833      	ldrmi	r3, [r6, #0]
 8011eaa:	3302      	addmi	r3, #2
 8011eac:	6033      	strmi	r3, [r6, #0]
 8011eae:	6825      	ldr	r5, [r4, #0]
 8011eb0:	f015 0506 	ands.w	r5, r5, #6
 8011eb4:	d106      	bne.n	8011ec4 <_printf_common+0x48>
 8011eb6:	f104 0a19 	add.w	sl, r4, #25
 8011eba:	68e3      	ldr	r3, [r4, #12]
 8011ebc:	6832      	ldr	r2, [r6, #0]
 8011ebe:	1a9b      	subs	r3, r3, r2
 8011ec0:	42ab      	cmp	r3, r5
 8011ec2:	dc26      	bgt.n	8011f12 <_printf_common+0x96>
 8011ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011ec8:	1e13      	subs	r3, r2, #0
 8011eca:	6822      	ldr	r2, [r4, #0]
 8011ecc:	bf18      	it	ne
 8011ece:	2301      	movne	r3, #1
 8011ed0:	0692      	lsls	r2, r2, #26
 8011ed2:	d42b      	bmi.n	8011f2c <_printf_common+0xb0>
 8011ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ed8:	4649      	mov	r1, r9
 8011eda:	4638      	mov	r0, r7
 8011edc:	47c0      	blx	r8
 8011ede:	3001      	adds	r0, #1
 8011ee0:	d01e      	beq.n	8011f20 <_printf_common+0xa4>
 8011ee2:	6823      	ldr	r3, [r4, #0]
 8011ee4:	68e5      	ldr	r5, [r4, #12]
 8011ee6:	6832      	ldr	r2, [r6, #0]
 8011ee8:	f003 0306 	and.w	r3, r3, #6
 8011eec:	2b04      	cmp	r3, #4
 8011eee:	bf08      	it	eq
 8011ef0:	1aad      	subeq	r5, r5, r2
 8011ef2:	68a3      	ldr	r3, [r4, #8]
 8011ef4:	6922      	ldr	r2, [r4, #16]
 8011ef6:	bf0c      	ite	eq
 8011ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011efc:	2500      	movne	r5, #0
 8011efe:	4293      	cmp	r3, r2
 8011f00:	bfc4      	itt	gt
 8011f02:	1a9b      	subgt	r3, r3, r2
 8011f04:	18ed      	addgt	r5, r5, r3
 8011f06:	2600      	movs	r6, #0
 8011f08:	341a      	adds	r4, #26
 8011f0a:	42b5      	cmp	r5, r6
 8011f0c:	d11a      	bne.n	8011f44 <_printf_common+0xc8>
 8011f0e:	2000      	movs	r0, #0
 8011f10:	e008      	b.n	8011f24 <_printf_common+0xa8>
 8011f12:	2301      	movs	r3, #1
 8011f14:	4652      	mov	r2, sl
 8011f16:	4649      	mov	r1, r9
 8011f18:	4638      	mov	r0, r7
 8011f1a:	47c0      	blx	r8
 8011f1c:	3001      	adds	r0, #1
 8011f1e:	d103      	bne.n	8011f28 <_printf_common+0xac>
 8011f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f28:	3501      	adds	r5, #1
 8011f2a:	e7c6      	b.n	8011eba <_printf_common+0x3e>
 8011f2c:	18e1      	adds	r1, r4, r3
 8011f2e:	1c5a      	adds	r2, r3, #1
 8011f30:	2030      	movs	r0, #48	; 0x30
 8011f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f36:	4422      	add	r2, r4
 8011f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f40:	3302      	adds	r3, #2
 8011f42:	e7c7      	b.n	8011ed4 <_printf_common+0x58>
 8011f44:	2301      	movs	r3, #1
 8011f46:	4622      	mov	r2, r4
 8011f48:	4649      	mov	r1, r9
 8011f4a:	4638      	mov	r0, r7
 8011f4c:	47c0      	blx	r8
 8011f4e:	3001      	adds	r0, #1
 8011f50:	d0e6      	beq.n	8011f20 <_printf_common+0xa4>
 8011f52:	3601      	adds	r6, #1
 8011f54:	e7d9      	b.n	8011f0a <_printf_common+0x8e>
	...

08011f58 <_printf_i>:
 8011f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f5c:	460c      	mov	r4, r1
 8011f5e:	4691      	mov	r9, r2
 8011f60:	7e27      	ldrb	r7, [r4, #24]
 8011f62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011f64:	2f78      	cmp	r7, #120	; 0x78
 8011f66:	4680      	mov	r8, r0
 8011f68:	469a      	mov	sl, r3
 8011f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f6e:	d807      	bhi.n	8011f80 <_printf_i+0x28>
 8011f70:	2f62      	cmp	r7, #98	; 0x62
 8011f72:	d80a      	bhi.n	8011f8a <_printf_i+0x32>
 8011f74:	2f00      	cmp	r7, #0
 8011f76:	f000 80d8 	beq.w	801212a <_printf_i+0x1d2>
 8011f7a:	2f58      	cmp	r7, #88	; 0x58
 8011f7c:	f000 80a3 	beq.w	80120c6 <_printf_i+0x16e>
 8011f80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f88:	e03a      	b.n	8012000 <_printf_i+0xa8>
 8011f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f8e:	2b15      	cmp	r3, #21
 8011f90:	d8f6      	bhi.n	8011f80 <_printf_i+0x28>
 8011f92:	a001      	add	r0, pc, #4	; (adr r0, 8011f98 <_printf_i+0x40>)
 8011f94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011f98:	08011ff1 	.word	0x08011ff1
 8011f9c:	08012005 	.word	0x08012005
 8011fa0:	08011f81 	.word	0x08011f81
 8011fa4:	08011f81 	.word	0x08011f81
 8011fa8:	08011f81 	.word	0x08011f81
 8011fac:	08011f81 	.word	0x08011f81
 8011fb0:	08012005 	.word	0x08012005
 8011fb4:	08011f81 	.word	0x08011f81
 8011fb8:	08011f81 	.word	0x08011f81
 8011fbc:	08011f81 	.word	0x08011f81
 8011fc0:	08011f81 	.word	0x08011f81
 8011fc4:	08012111 	.word	0x08012111
 8011fc8:	08012035 	.word	0x08012035
 8011fcc:	080120f3 	.word	0x080120f3
 8011fd0:	08011f81 	.word	0x08011f81
 8011fd4:	08011f81 	.word	0x08011f81
 8011fd8:	08012133 	.word	0x08012133
 8011fdc:	08011f81 	.word	0x08011f81
 8011fe0:	08012035 	.word	0x08012035
 8011fe4:	08011f81 	.word	0x08011f81
 8011fe8:	08011f81 	.word	0x08011f81
 8011fec:	080120fb 	.word	0x080120fb
 8011ff0:	680b      	ldr	r3, [r1, #0]
 8011ff2:	1d1a      	adds	r2, r3, #4
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	600a      	str	r2, [r1, #0]
 8011ff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012000:	2301      	movs	r3, #1
 8012002:	e0a3      	b.n	801214c <_printf_i+0x1f4>
 8012004:	6825      	ldr	r5, [r4, #0]
 8012006:	6808      	ldr	r0, [r1, #0]
 8012008:	062e      	lsls	r6, r5, #24
 801200a:	f100 0304 	add.w	r3, r0, #4
 801200e:	d50a      	bpl.n	8012026 <_printf_i+0xce>
 8012010:	6805      	ldr	r5, [r0, #0]
 8012012:	600b      	str	r3, [r1, #0]
 8012014:	2d00      	cmp	r5, #0
 8012016:	da03      	bge.n	8012020 <_printf_i+0xc8>
 8012018:	232d      	movs	r3, #45	; 0x2d
 801201a:	426d      	negs	r5, r5
 801201c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012020:	485e      	ldr	r0, [pc, #376]	; (801219c <_printf_i+0x244>)
 8012022:	230a      	movs	r3, #10
 8012024:	e019      	b.n	801205a <_printf_i+0x102>
 8012026:	f015 0f40 	tst.w	r5, #64	; 0x40
 801202a:	6805      	ldr	r5, [r0, #0]
 801202c:	600b      	str	r3, [r1, #0]
 801202e:	bf18      	it	ne
 8012030:	b22d      	sxthne	r5, r5
 8012032:	e7ef      	b.n	8012014 <_printf_i+0xbc>
 8012034:	680b      	ldr	r3, [r1, #0]
 8012036:	6825      	ldr	r5, [r4, #0]
 8012038:	1d18      	adds	r0, r3, #4
 801203a:	6008      	str	r0, [r1, #0]
 801203c:	0628      	lsls	r0, r5, #24
 801203e:	d501      	bpl.n	8012044 <_printf_i+0xec>
 8012040:	681d      	ldr	r5, [r3, #0]
 8012042:	e002      	b.n	801204a <_printf_i+0xf2>
 8012044:	0669      	lsls	r1, r5, #25
 8012046:	d5fb      	bpl.n	8012040 <_printf_i+0xe8>
 8012048:	881d      	ldrh	r5, [r3, #0]
 801204a:	4854      	ldr	r0, [pc, #336]	; (801219c <_printf_i+0x244>)
 801204c:	2f6f      	cmp	r7, #111	; 0x6f
 801204e:	bf0c      	ite	eq
 8012050:	2308      	moveq	r3, #8
 8012052:	230a      	movne	r3, #10
 8012054:	2100      	movs	r1, #0
 8012056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801205a:	6866      	ldr	r6, [r4, #4]
 801205c:	60a6      	str	r6, [r4, #8]
 801205e:	2e00      	cmp	r6, #0
 8012060:	bfa2      	ittt	ge
 8012062:	6821      	ldrge	r1, [r4, #0]
 8012064:	f021 0104 	bicge.w	r1, r1, #4
 8012068:	6021      	strge	r1, [r4, #0]
 801206a:	b90d      	cbnz	r5, 8012070 <_printf_i+0x118>
 801206c:	2e00      	cmp	r6, #0
 801206e:	d04d      	beq.n	801210c <_printf_i+0x1b4>
 8012070:	4616      	mov	r6, r2
 8012072:	fbb5 f1f3 	udiv	r1, r5, r3
 8012076:	fb03 5711 	mls	r7, r3, r1, r5
 801207a:	5dc7      	ldrb	r7, [r0, r7]
 801207c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012080:	462f      	mov	r7, r5
 8012082:	42bb      	cmp	r3, r7
 8012084:	460d      	mov	r5, r1
 8012086:	d9f4      	bls.n	8012072 <_printf_i+0x11a>
 8012088:	2b08      	cmp	r3, #8
 801208a:	d10b      	bne.n	80120a4 <_printf_i+0x14c>
 801208c:	6823      	ldr	r3, [r4, #0]
 801208e:	07df      	lsls	r7, r3, #31
 8012090:	d508      	bpl.n	80120a4 <_printf_i+0x14c>
 8012092:	6923      	ldr	r3, [r4, #16]
 8012094:	6861      	ldr	r1, [r4, #4]
 8012096:	4299      	cmp	r1, r3
 8012098:	bfde      	ittt	le
 801209a:	2330      	movle	r3, #48	; 0x30
 801209c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80120a0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80120a4:	1b92      	subs	r2, r2, r6
 80120a6:	6122      	str	r2, [r4, #16]
 80120a8:	f8cd a000 	str.w	sl, [sp]
 80120ac:	464b      	mov	r3, r9
 80120ae:	aa03      	add	r2, sp, #12
 80120b0:	4621      	mov	r1, r4
 80120b2:	4640      	mov	r0, r8
 80120b4:	f7ff fee2 	bl	8011e7c <_printf_common>
 80120b8:	3001      	adds	r0, #1
 80120ba:	d14c      	bne.n	8012156 <_printf_i+0x1fe>
 80120bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120c0:	b004      	add	sp, #16
 80120c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120c6:	4835      	ldr	r0, [pc, #212]	; (801219c <_printf_i+0x244>)
 80120c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80120cc:	6823      	ldr	r3, [r4, #0]
 80120ce:	680e      	ldr	r6, [r1, #0]
 80120d0:	061f      	lsls	r7, r3, #24
 80120d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80120d6:	600e      	str	r6, [r1, #0]
 80120d8:	d514      	bpl.n	8012104 <_printf_i+0x1ac>
 80120da:	07d9      	lsls	r1, r3, #31
 80120dc:	bf44      	itt	mi
 80120de:	f043 0320 	orrmi.w	r3, r3, #32
 80120e2:	6023      	strmi	r3, [r4, #0]
 80120e4:	b91d      	cbnz	r5, 80120ee <_printf_i+0x196>
 80120e6:	6823      	ldr	r3, [r4, #0]
 80120e8:	f023 0320 	bic.w	r3, r3, #32
 80120ec:	6023      	str	r3, [r4, #0]
 80120ee:	2310      	movs	r3, #16
 80120f0:	e7b0      	b.n	8012054 <_printf_i+0xfc>
 80120f2:	6823      	ldr	r3, [r4, #0]
 80120f4:	f043 0320 	orr.w	r3, r3, #32
 80120f8:	6023      	str	r3, [r4, #0]
 80120fa:	2378      	movs	r3, #120	; 0x78
 80120fc:	4828      	ldr	r0, [pc, #160]	; (80121a0 <_printf_i+0x248>)
 80120fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012102:	e7e3      	b.n	80120cc <_printf_i+0x174>
 8012104:	065e      	lsls	r6, r3, #25
 8012106:	bf48      	it	mi
 8012108:	b2ad      	uxthmi	r5, r5
 801210a:	e7e6      	b.n	80120da <_printf_i+0x182>
 801210c:	4616      	mov	r6, r2
 801210e:	e7bb      	b.n	8012088 <_printf_i+0x130>
 8012110:	680b      	ldr	r3, [r1, #0]
 8012112:	6826      	ldr	r6, [r4, #0]
 8012114:	6960      	ldr	r0, [r4, #20]
 8012116:	1d1d      	adds	r5, r3, #4
 8012118:	600d      	str	r5, [r1, #0]
 801211a:	0635      	lsls	r5, r6, #24
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	d501      	bpl.n	8012124 <_printf_i+0x1cc>
 8012120:	6018      	str	r0, [r3, #0]
 8012122:	e002      	b.n	801212a <_printf_i+0x1d2>
 8012124:	0671      	lsls	r1, r6, #25
 8012126:	d5fb      	bpl.n	8012120 <_printf_i+0x1c8>
 8012128:	8018      	strh	r0, [r3, #0]
 801212a:	2300      	movs	r3, #0
 801212c:	6123      	str	r3, [r4, #16]
 801212e:	4616      	mov	r6, r2
 8012130:	e7ba      	b.n	80120a8 <_printf_i+0x150>
 8012132:	680b      	ldr	r3, [r1, #0]
 8012134:	1d1a      	adds	r2, r3, #4
 8012136:	600a      	str	r2, [r1, #0]
 8012138:	681e      	ldr	r6, [r3, #0]
 801213a:	6862      	ldr	r2, [r4, #4]
 801213c:	2100      	movs	r1, #0
 801213e:	4630      	mov	r0, r6
 8012140:	f7ee f84e 	bl	80001e0 <memchr>
 8012144:	b108      	cbz	r0, 801214a <_printf_i+0x1f2>
 8012146:	1b80      	subs	r0, r0, r6
 8012148:	6060      	str	r0, [r4, #4]
 801214a:	6863      	ldr	r3, [r4, #4]
 801214c:	6123      	str	r3, [r4, #16]
 801214e:	2300      	movs	r3, #0
 8012150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012154:	e7a8      	b.n	80120a8 <_printf_i+0x150>
 8012156:	6923      	ldr	r3, [r4, #16]
 8012158:	4632      	mov	r2, r6
 801215a:	4649      	mov	r1, r9
 801215c:	4640      	mov	r0, r8
 801215e:	47d0      	blx	sl
 8012160:	3001      	adds	r0, #1
 8012162:	d0ab      	beq.n	80120bc <_printf_i+0x164>
 8012164:	6823      	ldr	r3, [r4, #0]
 8012166:	079b      	lsls	r3, r3, #30
 8012168:	d413      	bmi.n	8012192 <_printf_i+0x23a>
 801216a:	68e0      	ldr	r0, [r4, #12]
 801216c:	9b03      	ldr	r3, [sp, #12]
 801216e:	4298      	cmp	r0, r3
 8012170:	bfb8      	it	lt
 8012172:	4618      	movlt	r0, r3
 8012174:	e7a4      	b.n	80120c0 <_printf_i+0x168>
 8012176:	2301      	movs	r3, #1
 8012178:	4632      	mov	r2, r6
 801217a:	4649      	mov	r1, r9
 801217c:	4640      	mov	r0, r8
 801217e:	47d0      	blx	sl
 8012180:	3001      	adds	r0, #1
 8012182:	d09b      	beq.n	80120bc <_printf_i+0x164>
 8012184:	3501      	adds	r5, #1
 8012186:	68e3      	ldr	r3, [r4, #12]
 8012188:	9903      	ldr	r1, [sp, #12]
 801218a:	1a5b      	subs	r3, r3, r1
 801218c:	42ab      	cmp	r3, r5
 801218e:	dcf2      	bgt.n	8012176 <_printf_i+0x21e>
 8012190:	e7eb      	b.n	801216a <_printf_i+0x212>
 8012192:	2500      	movs	r5, #0
 8012194:	f104 0619 	add.w	r6, r4, #25
 8012198:	e7f5      	b.n	8012186 <_printf_i+0x22e>
 801219a:	bf00      	nop
 801219c:	0801aa86 	.word	0x0801aa86
 80121a0:	0801aa97 	.word	0x0801aa97

080121a4 <cleanup_glue>:
 80121a4:	b538      	push	{r3, r4, r5, lr}
 80121a6:	460c      	mov	r4, r1
 80121a8:	6809      	ldr	r1, [r1, #0]
 80121aa:	4605      	mov	r5, r0
 80121ac:	b109      	cbz	r1, 80121b2 <cleanup_glue+0xe>
 80121ae:	f7ff fff9 	bl	80121a4 <cleanup_glue>
 80121b2:	4621      	mov	r1, r4
 80121b4:	4628      	mov	r0, r5
 80121b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121ba:	f001 bc3f 	b.w	8013a3c <_free_r>
	...

080121c0 <_reclaim_reent>:
 80121c0:	4b2c      	ldr	r3, [pc, #176]	; (8012274 <_reclaim_reent+0xb4>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	4283      	cmp	r3, r0
 80121c6:	b570      	push	{r4, r5, r6, lr}
 80121c8:	4604      	mov	r4, r0
 80121ca:	d051      	beq.n	8012270 <_reclaim_reent+0xb0>
 80121cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80121ce:	b143      	cbz	r3, 80121e2 <_reclaim_reent+0x22>
 80121d0:	68db      	ldr	r3, [r3, #12]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d14a      	bne.n	801226c <_reclaim_reent+0xac>
 80121d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121d8:	6819      	ldr	r1, [r3, #0]
 80121da:	b111      	cbz	r1, 80121e2 <_reclaim_reent+0x22>
 80121dc:	4620      	mov	r0, r4
 80121de:	f001 fc2d 	bl	8013a3c <_free_r>
 80121e2:	6961      	ldr	r1, [r4, #20]
 80121e4:	b111      	cbz	r1, 80121ec <_reclaim_reent+0x2c>
 80121e6:	4620      	mov	r0, r4
 80121e8:	f001 fc28 	bl	8013a3c <_free_r>
 80121ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80121ee:	b111      	cbz	r1, 80121f6 <_reclaim_reent+0x36>
 80121f0:	4620      	mov	r0, r4
 80121f2:	f001 fc23 	bl	8013a3c <_free_r>
 80121f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80121f8:	b111      	cbz	r1, 8012200 <_reclaim_reent+0x40>
 80121fa:	4620      	mov	r0, r4
 80121fc:	f001 fc1e 	bl	8013a3c <_free_r>
 8012200:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012202:	b111      	cbz	r1, 801220a <_reclaim_reent+0x4a>
 8012204:	4620      	mov	r0, r4
 8012206:	f001 fc19 	bl	8013a3c <_free_r>
 801220a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801220c:	b111      	cbz	r1, 8012214 <_reclaim_reent+0x54>
 801220e:	4620      	mov	r0, r4
 8012210:	f001 fc14 	bl	8013a3c <_free_r>
 8012214:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012216:	b111      	cbz	r1, 801221e <_reclaim_reent+0x5e>
 8012218:	4620      	mov	r0, r4
 801221a:	f001 fc0f 	bl	8013a3c <_free_r>
 801221e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012220:	b111      	cbz	r1, 8012228 <_reclaim_reent+0x68>
 8012222:	4620      	mov	r0, r4
 8012224:	f001 fc0a 	bl	8013a3c <_free_r>
 8012228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801222a:	b111      	cbz	r1, 8012232 <_reclaim_reent+0x72>
 801222c:	4620      	mov	r0, r4
 801222e:	f001 fc05 	bl	8013a3c <_free_r>
 8012232:	69a3      	ldr	r3, [r4, #24]
 8012234:	b1e3      	cbz	r3, 8012270 <_reclaim_reent+0xb0>
 8012236:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012238:	4620      	mov	r0, r4
 801223a:	4798      	blx	r3
 801223c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801223e:	b1b9      	cbz	r1, 8012270 <_reclaim_reent+0xb0>
 8012240:	4620      	mov	r0, r4
 8012242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012246:	f7ff bfad 	b.w	80121a4 <cleanup_glue>
 801224a:	5949      	ldr	r1, [r1, r5]
 801224c:	b941      	cbnz	r1, 8012260 <_reclaim_reent+0xa0>
 801224e:	3504      	adds	r5, #4
 8012250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012252:	2d80      	cmp	r5, #128	; 0x80
 8012254:	68d9      	ldr	r1, [r3, #12]
 8012256:	d1f8      	bne.n	801224a <_reclaim_reent+0x8a>
 8012258:	4620      	mov	r0, r4
 801225a:	f001 fbef 	bl	8013a3c <_free_r>
 801225e:	e7ba      	b.n	80121d6 <_reclaim_reent+0x16>
 8012260:	680e      	ldr	r6, [r1, #0]
 8012262:	4620      	mov	r0, r4
 8012264:	f001 fbea 	bl	8013a3c <_free_r>
 8012268:	4631      	mov	r1, r6
 801226a:	e7ef      	b.n	801224c <_reclaim_reent+0x8c>
 801226c:	2500      	movs	r5, #0
 801226e:	e7ef      	b.n	8012250 <_reclaim_reent+0x90>
 8012270:	bd70      	pop	{r4, r5, r6, pc}
 8012272:	bf00      	nop
 8012274:	200001b0 	.word	0x200001b0

08012278 <_sbrk_r>:
 8012278:	b538      	push	{r3, r4, r5, lr}
 801227a:	4d06      	ldr	r5, [pc, #24]	; (8012294 <_sbrk_r+0x1c>)
 801227c:	2300      	movs	r3, #0
 801227e:	4604      	mov	r4, r0
 8012280:	4608      	mov	r0, r1
 8012282:	602b      	str	r3, [r5, #0]
 8012284:	f7f2 f8d6 	bl	8004434 <_sbrk>
 8012288:	1c43      	adds	r3, r0, #1
 801228a:	d102      	bne.n	8012292 <_sbrk_r+0x1a>
 801228c:	682b      	ldr	r3, [r5, #0]
 801228e:	b103      	cbz	r3, 8012292 <_sbrk_r+0x1a>
 8012290:	6023      	str	r3, [r4, #0]
 8012292:	bd38      	pop	{r3, r4, r5, pc}
 8012294:	2000ef4c 	.word	0x2000ef4c

08012298 <siprintf>:
 8012298:	b40e      	push	{r1, r2, r3}
 801229a:	b500      	push	{lr}
 801229c:	b09c      	sub	sp, #112	; 0x70
 801229e:	ab1d      	add	r3, sp, #116	; 0x74
 80122a0:	9002      	str	r0, [sp, #8]
 80122a2:	9006      	str	r0, [sp, #24]
 80122a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80122a8:	4809      	ldr	r0, [pc, #36]	; (80122d0 <siprintf+0x38>)
 80122aa:	9107      	str	r1, [sp, #28]
 80122ac:	9104      	str	r1, [sp, #16]
 80122ae:	4909      	ldr	r1, [pc, #36]	; (80122d4 <siprintf+0x3c>)
 80122b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80122b4:	9105      	str	r1, [sp, #20]
 80122b6:	6800      	ldr	r0, [r0, #0]
 80122b8:	9301      	str	r3, [sp, #4]
 80122ba:	a902      	add	r1, sp, #8
 80122bc:	f001 fc6a 	bl	8013b94 <_svfiprintf_r>
 80122c0:	9b02      	ldr	r3, [sp, #8]
 80122c2:	2200      	movs	r2, #0
 80122c4:	701a      	strb	r2, [r3, #0]
 80122c6:	b01c      	add	sp, #112	; 0x70
 80122c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80122cc:	b003      	add	sp, #12
 80122ce:	4770      	bx	lr
 80122d0:	200001b0 	.word	0x200001b0
 80122d4:	ffff0208 	.word	0xffff0208

080122d8 <__sread>:
 80122d8:	b510      	push	{r4, lr}
 80122da:	460c      	mov	r4, r1
 80122dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122e0:	f001 fd58 	bl	8013d94 <_read_r>
 80122e4:	2800      	cmp	r0, #0
 80122e6:	bfab      	itete	ge
 80122e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122ea:	89a3      	ldrhlt	r3, [r4, #12]
 80122ec:	181b      	addge	r3, r3, r0
 80122ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122f2:	bfac      	ite	ge
 80122f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80122f6:	81a3      	strhlt	r3, [r4, #12]
 80122f8:	bd10      	pop	{r4, pc}

080122fa <__swrite>:
 80122fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122fe:	461f      	mov	r7, r3
 8012300:	898b      	ldrh	r3, [r1, #12]
 8012302:	05db      	lsls	r3, r3, #23
 8012304:	4605      	mov	r5, r0
 8012306:	460c      	mov	r4, r1
 8012308:	4616      	mov	r6, r2
 801230a:	d505      	bpl.n	8012318 <__swrite+0x1e>
 801230c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012310:	2302      	movs	r3, #2
 8012312:	2200      	movs	r2, #0
 8012314:	f000 ffde 	bl	80132d4 <_lseek_r>
 8012318:	89a3      	ldrh	r3, [r4, #12]
 801231a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801231e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012322:	81a3      	strh	r3, [r4, #12]
 8012324:	4632      	mov	r2, r6
 8012326:	463b      	mov	r3, r7
 8012328:	4628      	mov	r0, r5
 801232a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801232e:	f000 b86f 	b.w	8012410 <_write_r>

08012332 <__sseek>:
 8012332:	b510      	push	{r4, lr}
 8012334:	460c      	mov	r4, r1
 8012336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801233a:	f000 ffcb 	bl	80132d4 <_lseek_r>
 801233e:	1c43      	adds	r3, r0, #1
 8012340:	89a3      	ldrh	r3, [r4, #12]
 8012342:	bf15      	itete	ne
 8012344:	6560      	strne	r0, [r4, #84]	; 0x54
 8012346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801234a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801234e:	81a3      	strheq	r3, [r4, #12]
 8012350:	bf18      	it	ne
 8012352:	81a3      	strhne	r3, [r4, #12]
 8012354:	bd10      	pop	{r4, pc}

08012356 <__sclose>:
 8012356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801235a:	f000 b86b 	b.w	8012434 <_close_r>

0801235e <strcat>:
 801235e:	b510      	push	{r4, lr}
 8012360:	4602      	mov	r2, r0
 8012362:	7814      	ldrb	r4, [r2, #0]
 8012364:	4613      	mov	r3, r2
 8012366:	3201      	adds	r2, #1
 8012368:	2c00      	cmp	r4, #0
 801236a:	d1fa      	bne.n	8012362 <strcat+0x4>
 801236c:	3b01      	subs	r3, #1
 801236e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012376:	2a00      	cmp	r2, #0
 8012378:	d1f9      	bne.n	801236e <strcat+0x10>
 801237a:	bd10      	pop	{r4, pc}

0801237c <strcpy>:
 801237c:	4603      	mov	r3, r0
 801237e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012382:	f803 2b01 	strb.w	r2, [r3], #1
 8012386:	2a00      	cmp	r2, #0
 8012388:	d1f9      	bne.n	801237e <strcpy+0x2>
 801238a:	4770      	bx	lr

0801238c <__utoa>:
 801238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801238e:	4c1f      	ldr	r4, [pc, #124]	; (801240c <__utoa+0x80>)
 8012390:	b08b      	sub	sp, #44	; 0x2c
 8012392:	4605      	mov	r5, r0
 8012394:	460b      	mov	r3, r1
 8012396:	466e      	mov	r6, sp
 8012398:	f104 0c20 	add.w	ip, r4, #32
 801239c:	6820      	ldr	r0, [r4, #0]
 801239e:	6861      	ldr	r1, [r4, #4]
 80123a0:	4637      	mov	r7, r6
 80123a2:	c703      	stmia	r7!, {r0, r1}
 80123a4:	3408      	adds	r4, #8
 80123a6:	4564      	cmp	r4, ip
 80123a8:	463e      	mov	r6, r7
 80123aa:	d1f7      	bne.n	801239c <__utoa+0x10>
 80123ac:	7921      	ldrb	r1, [r4, #4]
 80123ae:	7139      	strb	r1, [r7, #4]
 80123b0:	1e91      	subs	r1, r2, #2
 80123b2:	6820      	ldr	r0, [r4, #0]
 80123b4:	6038      	str	r0, [r7, #0]
 80123b6:	2922      	cmp	r1, #34	; 0x22
 80123b8:	f04f 0100 	mov.w	r1, #0
 80123bc:	d904      	bls.n	80123c8 <__utoa+0x3c>
 80123be:	7019      	strb	r1, [r3, #0]
 80123c0:	460b      	mov	r3, r1
 80123c2:	4618      	mov	r0, r3
 80123c4:	b00b      	add	sp, #44	; 0x2c
 80123c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123c8:	1e58      	subs	r0, r3, #1
 80123ca:	4684      	mov	ip, r0
 80123cc:	fbb5 f7f2 	udiv	r7, r5, r2
 80123d0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80123d4:	fb02 5617 	mls	r6, r2, r7, r5
 80123d8:	4476      	add	r6, lr
 80123da:	460c      	mov	r4, r1
 80123dc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80123e0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80123e4:	462e      	mov	r6, r5
 80123e6:	42b2      	cmp	r2, r6
 80123e8:	f101 0101 	add.w	r1, r1, #1
 80123ec:	463d      	mov	r5, r7
 80123ee:	d9ed      	bls.n	80123cc <__utoa+0x40>
 80123f0:	2200      	movs	r2, #0
 80123f2:	545a      	strb	r2, [r3, r1]
 80123f4:	1919      	adds	r1, r3, r4
 80123f6:	1aa5      	subs	r5, r4, r2
 80123f8:	42aa      	cmp	r2, r5
 80123fa:	dae2      	bge.n	80123c2 <__utoa+0x36>
 80123fc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8012400:	780e      	ldrb	r6, [r1, #0]
 8012402:	7006      	strb	r6, [r0, #0]
 8012404:	3201      	adds	r2, #1
 8012406:	f801 5901 	strb.w	r5, [r1], #-1
 801240a:	e7f4      	b.n	80123f6 <__utoa+0x6a>
 801240c:	0801aaa8 	.word	0x0801aaa8

08012410 <_write_r>:
 8012410:	b538      	push	{r3, r4, r5, lr}
 8012412:	4d07      	ldr	r5, [pc, #28]	; (8012430 <_write_r+0x20>)
 8012414:	4604      	mov	r4, r0
 8012416:	4608      	mov	r0, r1
 8012418:	4611      	mov	r1, r2
 801241a:	2200      	movs	r2, #0
 801241c:	602a      	str	r2, [r5, #0]
 801241e:	461a      	mov	r2, r3
 8012420:	f7f1 ffb7 	bl	8004392 <_write>
 8012424:	1c43      	adds	r3, r0, #1
 8012426:	d102      	bne.n	801242e <_write_r+0x1e>
 8012428:	682b      	ldr	r3, [r5, #0]
 801242a:	b103      	cbz	r3, 801242e <_write_r+0x1e>
 801242c:	6023      	str	r3, [r4, #0]
 801242e:	bd38      	pop	{r3, r4, r5, pc}
 8012430:	2000ef4c 	.word	0x2000ef4c

08012434 <_close_r>:
 8012434:	b538      	push	{r3, r4, r5, lr}
 8012436:	4d06      	ldr	r5, [pc, #24]	; (8012450 <_close_r+0x1c>)
 8012438:	2300      	movs	r3, #0
 801243a:	4604      	mov	r4, r0
 801243c:	4608      	mov	r0, r1
 801243e:	602b      	str	r3, [r5, #0]
 8012440:	f7f1 ffc3 	bl	80043ca <_close>
 8012444:	1c43      	adds	r3, r0, #1
 8012446:	d102      	bne.n	801244e <_close_r+0x1a>
 8012448:	682b      	ldr	r3, [r5, #0]
 801244a:	b103      	cbz	r3, 801244e <_close_r+0x1a>
 801244c:	6023      	str	r3, [r4, #0]
 801244e:	bd38      	pop	{r3, r4, r5, pc}
 8012450:	2000ef4c 	.word	0x2000ef4c

08012454 <quorem>:
 8012454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012458:	6903      	ldr	r3, [r0, #16]
 801245a:	690c      	ldr	r4, [r1, #16]
 801245c:	42a3      	cmp	r3, r4
 801245e:	4607      	mov	r7, r0
 8012460:	f2c0 8081 	blt.w	8012566 <quorem+0x112>
 8012464:	3c01      	subs	r4, #1
 8012466:	f101 0814 	add.w	r8, r1, #20
 801246a:	f100 0514 	add.w	r5, r0, #20
 801246e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012472:	9301      	str	r3, [sp, #4]
 8012474:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801247c:	3301      	adds	r3, #1
 801247e:	429a      	cmp	r2, r3
 8012480:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012484:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012488:	fbb2 f6f3 	udiv	r6, r2, r3
 801248c:	d331      	bcc.n	80124f2 <quorem+0x9e>
 801248e:	f04f 0e00 	mov.w	lr, #0
 8012492:	4640      	mov	r0, r8
 8012494:	46ac      	mov	ip, r5
 8012496:	46f2      	mov	sl, lr
 8012498:	f850 2b04 	ldr.w	r2, [r0], #4
 801249c:	b293      	uxth	r3, r2
 801249e:	fb06 e303 	mla	r3, r6, r3, lr
 80124a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	ebaa 0303 	sub.w	r3, sl, r3
 80124ac:	0c12      	lsrs	r2, r2, #16
 80124ae:	f8dc a000 	ldr.w	sl, [ip]
 80124b2:	fb06 e202 	mla	r2, r6, r2, lr
 80124b6:	fa13 f38a 	uxtah	r3, r3, sl
 80124ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80124be:	fa1f fa82 	uxth.w	sl, r2
 80124c2:	f8dc 2000 	ldr.w	r2, [ip]
 80124c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80124ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124d4:	4581      	cmp	r9, r0
 80124d6:	f84c 3b04 	str.w	r3, [ip], #4
 80124da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80124de:	d2db      	bcs.n	8012498 <quorem+0x44>
 80124e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80124e4:	b92b      	cbnz	r3, 80124f2 <quorem+0x9e>
 80124e6:	9b01      	ldr	r3, [sp, #4]
 80124e8:	3b04      	subs	r3, #4
 80124ea:	429d      	cmp	r5, r3
 80124ec:	461a      	mov	r2, r3
 80124ee:	d32e      	bcc.n	801254e <quorem+0xfa>
 80124f0:	613c      	str	r4, [r7, #16]
 80124f2:	4638      	mov	r0, r7
 80124f4:	f001 f992 	bl	801381c <__mcmp>
 80124f8:	2800      	cmp	r0, #0
 80124fa:	db24      	blt.n	8012546 <quorem+0xf2>
 80124fc:	3601      	adds	r6, #1
 80124fe:	4628      	mov	r0, r5
 8012500:	f04f 0c00 	mov.w	ip, #0
 8012504:	f858 2b04 	ldr.w	r2, [r8], #4
 8012508:	f8d0 e000 	ldr.w	lr, [r0]
 801250c:	b293      	uxth	r3, r2
 801250e:	ebac 0303 	sub.w	r3, ip, r3
 8012512:	0c12      	lsrs	r2, r2, #16
 8012514:	fa13 f38e 	uxtah	r3, r3, lr
 8012518:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801251c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012520:	b29b      	uxth	r3, r3
 8012522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012526:	45c1      	cmp	r9, r8
 8012528:	f840 3b04 	str.w	r3, [r0], #4
 801252c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012530:	d2e8      	bcs.n	8012504 <quorem+0xb0>
 8012532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801253a:	b922      	cbnz	r2, 8012546 <quorem+0xf2>
 801253c:	3b04      	subs	r3, #4
 801253e:	429d      	cmp	r5, r3
 8012540:	461a      	mov	r2, r3
 8012542:	d30a      	bcc.n	801255a <quorem+0x106>
 8012544:	613c      	str	r4, [r7, #16]
 8012546:	4630      	mov	r0, r6
 8012548:	b003      	add	sp, #12
 801254a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801254e:	6812      	ldr	r2, [r2, #0]
 8012550:	3b04      	subs	r3, #4
 8012552:	2a00      	cmp	r2, #0
 8012554:	d1cc      	bne.n	80124f0 <quorem+0x9c>
 8012556:	3c01      	subs	r4, #1
 8012558:	e7c7      	b.n	80124ea <quorem+0x96>
 801255a:	6812      	ldr	r2, [r2, #0]
 801255c:	3b04      	subs	r3, #4
 801255e:	2a00      	cmp	r2, #0
 8012560:	d1f0      	bne.n	8012544 <quorem+0xf0>
 8012562:	3c01      	subs	r4, #1
 8012564:	e7eb      	b.n	801253e <quorem+0xea>
 8012566:	2000      	movs	r0, #0
 8012568:	e7ee      	b.n	8012548 <quorem+0xf4>
 801256a:	0000      	movs	r0, r0
 801256c:	0000      	movs	r0, r0
	...

08012570 <_dtoa_r>:
 8012570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012574:	ed2d 8b02 	vpush	{d8}
 8012578:	ec57 6b10 	vmov	r6, r7, d0
 801257c:	b095      	sub	sp, #84	; 0x54
 801257e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012580:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012584:	9105      	str	r1, [sp, #20]
 8012586:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801258a:	4604      	mov	r4, r0
 801258c:	9209      	str	r2, [sp, #36]	; 0x24
 801258e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012590:	b975      	cbnz	r5, 80125b0 <_dtoa_r+0x40>
 8012592:	2010      	movs	r0, #16
 8012594:	f000 feb0 	bl	80132f8 <malloc>
 8012598:	4602      	mov	r2, r0
 801259a:	6260      	str	r0, [r4, #36]	; 0x24
 801259c:	b920      	cbnz	r0, 80125a8 <_dtoa_r+0x38>
 801259e:	4bb2      	ldr	r3, [pc, #712]	; (8012868 <_dtoa_r+0x2f8>)
 80125a0:	21ea      	movs	r1, #234	; 0xea
 80125a2:	48b2      	ldr	r0, [pc, #712]	; (801286c <_dtoa_r+0x2fc>)
 80125a4:	f001 fc08 	bl	8013db8 <__assert_func>
 80125a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80125ac:	6005      	str	r5, [r0, #0]
 80125ae:	60c5      	str	r5, [r0, #12]
 80125b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125b2:	6819      	ldr	r1, [r3, #0]
 80125b4:	b151      	cbz	r1, 80125cc <_dtoa_r+0x5c>
 80125b6:	685a      	ldr	r2, [r3, #4]
 80125b8:	604a      	str	r2, [r1, #4]
 80125ba:	2301      	movs	r3, #1
 80125bc:	4093      	lsls	r3, r2
 80125be:	608b      	str	r3, [r1, #8]
 80125c0:	4620      	mov	r0, r4
 80125c2:	f000 feed 	bl	80133a0 <_Bfree>
 80125c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125c8:	2200      	movs	r2, #0
 80125ca:	601a      	str	r2, [r3, #0]
 80125cc:	1e3b      	subs	r3, r7, #0
 80125ce:	bfb9      	ittee	lt
 80125d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80125d4:	9303      	strlt	r3, [sp, #12]
 80125d6:	2300      	movge	r3, #0
 80125d8:	f8c8 3000 	strge.w	r3, [r8]
 80125dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80125e0:	4ba3      	ldr	r3, [pc, #652]	; (8012870 <_dtoa_r+0x300>)
 80125e2:	bfbc      	itt	lt
 80125e4:	2201      	movlt	r2, #1
 80125e6:	f8c8 2000 	strlt.w	r2, [r8]
 80125ea:	ea33 0309 	bics.w	r3, r3, r9
 80125ee:	d11b      	bne.n	8012628 <_dtoa_r+0xb8>
 80125f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80125f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80125f6:	6013      	str	r3, [r2, #0]
 80125f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80125fc:	4333      	orrs	r3, r6
 80125fe:	f000 857a 	beq.w	80130f6 <_dtoa_r+0xb86>
 8012602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012604:	b963      	cbnz	r3, 8012620 <_dtoa_r+0xb0>
 8012606:	4b9b      	ldr	r3, [pc, #620]	; (8012874 <_dtoa_r+0x304>)
 8012608:	e024      	b.n	8012654 <_dtoa_r+0xe4>
 801260a:	4b9b      	ldr	r3, [pc, #620]	; (8012878 <_dtoa_r+0x308>)
 801260c:	9300      	str	r3, [sp, #0]
 801260e:	3308      	adds	r3, #8
 8012610:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012612:	6013      	str	r3, [r2, #0]
 8012614:	9800      	ldr	r0, [sp, #0]
 8012616:	b015      	add	sp, #84	; 0x54
 8012618:	ecbd 8b02 	vpop	{d8}
 801261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012620:	4b94      	ldr	r3, [pc, #592]	; (8012874 <_dtoa_r+0x304>)
 8012622:	9300      	str	r3, [sp, #0]
 8012624:	3303      	adds	r3, #3
 8012626:	e7f3      	b.n	8012610 <_dtoa_r+0xa0>
 8012628:	ed9d 7b02 	vldr	d7, [sp, #8]
 801262c:	2200      	movs	r2, #0
 801262e:	ec51 0b17 	vmov	r0, r1, d7
 8012632:	2300      	movs	r3, #0
 8012634:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012638:	f7ee fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 801263c:	4680      	mov	r8, r0
 801263e:	b158      	cbz	r0, 8012658 <_dtoa_r+0xe8>
 8012640:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012642:	2301      	movs	r3, #1
 8012644:	6013      	str	r3, [r2, #0]
 8012646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012648:	2b00      	cmp	r3, #0
 801264a:	f000 8551 	beq.w	80130f0 <_dtoa_r+0xb80>
 801264e:	488b      	ldr	r0, [pc, #556]	; (801287c <_dtoa_r+0x30c>)
 8012650:	6018      	str	r0, [r3, #0]
 8012652:	1e43      	subs	r3, r0, #1
 8012654:	9300      	str	r3, [sp, #0]
 8012656:	e7dd      	b.n	8012614 <_dtoa_r+0xa4>
 8012658:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801265c:	aa12      	add	r2, sp, #72	; 0x48
 801265e:	a913      	add	r1, sp, #76	; 0x4c
 8012660:	4620      	mov	r0, r4
 8012662:	f001 f97f 	bl	8013964 <__d2b>
 8012666:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801266a:	4683      	mov	fp, r0
 801266c:	2d00      	cmp	r5, #0
 801266e:	d07c      	beq.n	801276a <_dtoa_r+0x1fa>
 8012670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012672:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012676:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801267a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801267e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012682:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801268a:	4b7d      	ldr	r3, [pc, #500]	; (8012880 <_dtoa_r+0x310>)
 801268c:	2200      	movs	r2, #0
 801268e:	4630      	mov	r0, r6
 8012690:	4639      	mov	r1, r7
 8012692:	f7ed fdf9 	bl	8000288 <__aeabi_dsub>
 8012696:	a36e      	add	r3, pc, #440	; (adr r3, 8012850 <_dtoa_r+0x2e0>)
 8012698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801269c:	f7ed ffac 	bl	80005f8 <__aeabi_dmul>
 80126a0:	a36d      	add	r3, pc, #436	; (adr r3, 8012858 <_dtoa_r+0x2e8>)
 80126a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a6:	f7ed fdf1 	bl	800028c <__adddf3>
 80126aa:	4606      	mov	r6, r0
 80126ac:	4628      	mov	r0, r5
 80126ae:	460f      	mov	r7, r1
 80126b0:	f7ed ff38 	bl	8000524 <__aeabi_i2d>
 80126b4:	a36a      	add	r3, pc, #424	; (adr r3, 8012860 <_dtoa_r+0x2f0>)
 80126b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ba:	f7ed ff9d 	bl	80005f8 <__aeabi_dmul>
 80126be:	4602      	mov	r2, r0
 80126c0:	460b      	mov	r3, r1
 80126c2:	4630      	mov	r0, r6
 80126c4:	4639      	mov	r1, r7
 80126c6:	f7ed fde1 	bl	800028c <__adddf3>
 80126ca:	4606      	mov	r6, r0
 80126cc:	460f      	mov	r7, r1
 80126ce:	f7ee fa43 	bl	8000b58 <__aeabi_d2iz>
 80126d2:	2200      	movs	r2, #0
 80126d4:	4682      	mov	sl, r0
 80126d6:	2300      	movs	r3, #0
 80126d8:	4630      	mov	r0, r6
 80126da:	4639      	mov	r1, r7
 80126dc:	f7ee f9fe 	bl	8000adc <__aeabi_dcmplt>
 80126e0:	b148      	cbz	r0, 80126f6 <_dtoa_r+0x186>
 80126e2:	4650      	mov	r0, sl
 80126e4:	f7ed ff1e 	bl	8000524 <__aeabi_i2d>
 80126e8:	4632      	mov	r2, r6
 80126ea:	463b      	mov	r3, r7
 80126ec:	f7ee f9ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80126f0:	b908      	cbnz	r0, 80126f6 <_dtoa_r+0x186>
 80126f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80126f6:	f1ba 0f16 	cmp.w	sl, #22
 80126fa:	d854      	bhi.n	80127a6 <_dtoa_r+0x236>
 80126fc:	4b61      	ldr	r3, [pc, #388]	; (8012884 <_dtoa_r+0x314>)
 80126fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012706:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801270a:	f7ee f9e7 	bl	8000adc <__aeabi_dcmplt>
 801270e:	2800      	cmp	r0, #0
 8012710:	d04b      	beq.n	80127aa <_dtoa_r+0x23a>
 8012712:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012716:	2300      	movs	r3, #0
 8012718:	930e      	str	r3, [sp, #56]	; 0x38
 801271a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801271c:	1b5d      	subs	r5, r3, r5
 801271e:	1e6b      	subs	r3, r5, #1
 8012720:	9304      	str	r3, [sp, #16]
 8012722:	bf43      	ittte	mi
 8012724:	2300      	movmi	r3, #0
 8012726:	f1c5 0801 	rsbmi	r8, r5, #1
 801272a:	9304      	strmi	r3, [sp, #16]
 801272c:	f04f 0800 	movpl.w	r8, #0
 8012730:	f1ba 0f00 	cmp.w	sl, #0
 8012734:	db3b      	blt.n	80127ae <_dtoa_r+0x23e>
 8012736:	9b04      	ldr	r3, [sp, #16]
 8012738:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801273c:	4453      	add	r3, sl
 801273e:	9304      	str	r3, [sp, #16]
 8012740:	2300      	movs	r3, #0
 8012742:	9306      	str	r3, [sp, #24]
 8012744:	9b05      	ldr	r3, [sp, #20]
 8012746:	2b09      	cmp	r3, #9
 8012748:	d869      	bhi.n	801281e <_dtoa_r+0x2ae>
 801274a:	2b05      	cmp	r3, #5
 801274c:	bfc4      	itt	gt
 801274e:	3b04      	subgt	r3, #4
 8012750:	9305      	strgt	r3, [sp, #20]
 8012752:	9b05      	ldr	r3, [sp, #20]
 8012754:	f1a3 0302 	sub.w	r3, r3, #2
 8012758:	bfcc      	ite	gt
 801275a:	2500      	movgt	r5, #0
 801275c:	2501      	movle	r5, #1
 801275e:	2b03      	cmp	r3, #3
 8012760:	d869      	bhi.n	8012836 <_dtoa_r+0x2c6>
 8012762:	e8df f003 	tbb	[pc, r3]
 8012766:	4e2c      	.short	0x4e2c
 8012768:	5a4c      	.short	0x5a4c
 801276a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801276e:	441d      	add	r5, r3
 8012770:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012774:	2b20      	cmp	r3, #32
 8012776:	bfc1      	itttt	gt
 8012778:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801277c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012780:	fa09 f303 	lslgt.w	r3, r9, r3
 8012784:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012788:	bfda      	itte	le
 801278a:	f1c3 0320 	rsble	r3, r3, #32
 801278e:	fa06 f003 	lslle.w	r0, r6, r3
 8012792:	4318      	orrgt	r0, r3
 8012794:	f7ed feb6 	bl	8000504 <__aeabi_ui2d>
 8012798:	2301      	movs	r3, #1
 801279a:	4606      	mov	r6, r0
 801279c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80127a0:	3d01      	subs	r5, #1
 80127a2:	9310      	str	r3, [sp, #64]	; 0x40
 80127a4:	e771      	b.n	801268a <_dtoa_r+0x11a>
 80127a6:	2301      	movs	r3, #1
 80127a8:	e7b6      	b.n	8012718 <_dtoa_r+0x1a8>
 80127aa:	900e      	str	r0, [sp, #56]	; 0x38
 80127ac:	e7b5      	b.n	801271a <_dtoa_r+0x1aa>
 80127ae:	f1ca 0300 	rsb	r3, sl, #0
 80127b2:	9306      	str	r3, [sp, #24]
 80127b4:	2300      	movs	r3, #0
 80127b6:	eba8 080a 	sub.w	r8, r8, sl
 80127ba:	930d      	str	r3, [sp, #52]	; 0x34
 80127bc:	e7c2      	b.n	8012744 <_dtoa_r+0x1d4>
 80127be:	2300      	movs	r3, #0
 80127c0:	9308      	str	r3, [sp, #32]
 80127c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	dc39      	bgt.n	801283c <_dtoa_r+0x2cc>
 80127c8:	f04f 0901 	mov.w	r9, #1
 80127cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80127d0:	464b      	mov	r3, r9
 80127d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80127d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80127d8:	2200      	movs	r2, #0
 80127da:	6042      	str	r2, [r0, #4]
 80127dc:	2204      	movs	r2, #4
 80127de:	f102 0614 	add.w	r6, r2, #20
 80127e2:	429e      	cmp	r6, r3
 80127e4:	6841      	ldr	r1, [r0, #4]
 80127e6:	d92f      	bls.n	8012848 <_dtoa_r+0x2d8>
 80127e8:	4620      	mov	r0, r4
 80127ea:	f000 fd99 	bl	8013320 <_Balloc>
 80127ee:	9000      	str	r0, [sp, #0]
 80127f0:	2800      	cmp	r0, #0
 80127f2:	d14b      	bne.n	801288c <_dtoa_r+0x31c>
 80127f4:	4b24      	ldr	r3, [pc, #144]	; (8012888 <_dtoa_r+0x318>)
 80127f6:	4602      	mov	r2, r0
 80127f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80127fc:	e6d1      	b.n	80125a2 <_dtoa_r+0x32>
 80127fe:	2301      	movs	r3, #1
 8012800:	e7de      	b.n	80127c0 <_dtoa_r+0x250>
 8012802:	2300      	movs	r3, #0
 8012804:	9308      	str	r3, [sp, #32]
 8012806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012808:	eb0a 0903 	add.w	r9, sl, r3
 801280c:	f109 0301 	add.w	r3, r9, #1
 8012810:	2b01      	cmp	r3, #1
 8012812:	9301      	str	r3, [sp, #4]
 8012814:	bfb8      	it	lt
 8012816:	2301      	movlt	r3, #1
 8012818:	e7dd      	b.n	80127d6 <_dtoa_r+0x266>
 801281a:	2301      	movs	r3, #1
 801281c:	e7f2      	b.n	8012804 <_dtoa_r+0x294>
 801281e:	2501      	movs	r5, #1
 8012820:	2300      	movs	r3, #0
 8012822:	9305      	str	r3, [sp, #20]
 8012824:	9508      	str	r5, [sp, #32]
 8012826:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801282a:	2200      	movs	r2, #0
 801282c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012830:	2312      	movs	r3, #18
 8012832:	9209      	str	r2, [sp, #36]	; 0x24
 8012834:	e7cf      	b.n	80127d6 <_dtoa_r+0x266>
 8012836:	2301      	movs	r3, #1
 8012838:	9308      	str	r3, [sp, #32]
 801283a:	e7f4      	b.n	8012826 <_dtoa_r+0x2b6>
 801283c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012840:	f8cd 9004 	str.w	r9, [sp, #4]
 8012844:	464b      	mov	r3, r9
 8012846:	e7c6      	b.n	80127d6 <_dtoa_r+0x266>
 8012848:	3101      	adds	r1, #1
 801284a:	6041      	str	r1, [r0, #4]
 801284c:	0052      	lsls	r2, r2, #1
 801284e:	e7c6      	b.n	80127de <_dtoa_r+0x26e>
 8012850:	636f4361 	.word	0x636f4361
 8012854:	3fd287a7 	.word	0x3fd287a7
 8012858:	8b60c8b3 	.word	0x8b60c8b3
 801285c:	3fc68a28 	.word	0x3fc68a28
 8012860:	509f79fb 	.word	0x509f79fb
 8012864:	3fd34413 	.word	0x3fd34413
 8012868:	0801aada 	.word	0x0801aada
 801286c:	0801aaf1 	.word	0x0801aaf1
 8012870:	7ff00000 	.word	0x7ff00000
 8012874:	0801aad6 	.word	0x0801aad6
 8012878:	0801aacd 	.word	0x0801aacd
 801287c:	0801aa85 	.word	0x0801aa85
 8012880:	3ff80000 	.word	0x3ff80000
 8012884:	0801abf0 	.word	0x0801abf0
 8012888:	0801ab50 	.word	0x0801ab50
 801288c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801288e:	9a00      	ldr	r2, [sp, #0]
 8012890:	601a      	str	r2, [r3, #0]
 8012892:	9b01      	ldr	r3, [sp, #4]
 8012894:	2b0e      	cmp	r3, #14
 8012896:	f200 80ad 	bhi.w	80129f4 <_dtoa_r+0x484>
 801289a:	2d00      	cmp	r5, #0
 801289c:	f000 80aa 	beq.w	80129f4 <_dtoa_r+0x484>
 80128a0:	f1ba 0f00 	cmp.w	sl, #0
 80128a4:	dd36      	ble.n	8012914 <_dtoa_r+0x3a4>
 80128a6:	4ac3      	ldr	r2, [pc, #780]	; (8012bb4 <_dtoa_r+0x644>)
 80128a8:	f00a 030f 	and.w	r3, sl, #15
 80128ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80128b0:	ed93 7b00 	vldr	d7, [r3]
 80128b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80128b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80128bc:	eeb0 8a47 	vmov.f32	s16, s14
 80128c0:	eef0 8a67 	vmov.f32	s17, s15
 80128c4:	d016      	beq.n	80128f4 <_dtoa_r+0x384>
 80128c6:	4bbc      	ldr	r3, [pc, #752]	; (8012bb8 <_dtoa_r+0x648>)
 80128c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80128cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80128d0:	f7ed ffbc 	bl	800084c <__aeabi_ddiv>
 80128d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128d8:	f007 070f 	and.w	r7, r7, #15
 80128dc:	2503      	movs	r5, #3
 80128de:	4eb6      	ldr	r6, [pc, #728]	; (8012bb8 <_dtoa_r+0x648>)
 80128e0:	b957      	cbnz	r7, 80128f8 <_dtoa_r+0x388>
 80128e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128e6:	ec53 2b18 	vmov	r2, r3, d8
 80128ea:	f7ed ffaf 	bl	800084c <__aeabi_ddiv>
 80128ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128f2:	e029      	b.n	8012948 <_dtoa_r+0x3d8>
 80128f4:	2502      	movs	r5, #2
 80128f6:	e7f2      	b.n	80128de <_dtoa_r+0x36e>
 80128f8:	07f9      	lsls	r1, r7, #31
 80128fa:	d508      	bpl.n	801290e <_dtoa_r+0x39e>
 80128fc:	ec51 0b18 	vmov	r0, r1, d8
 8012900:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012904:	f7ed fe78 	bl	80005f8 <__aeabi_dmul>
 8012908:	ec41 0b18 	vmov	d8, r0, r1
 801290c:	3501      	adds	r5, #1
 801290e:	107f      	asrs	r7, r7, #1
 8012910:	3608      	adds	r6, #8
 8012912:	e7e5      	b.n	80128e0 <_dtoa_r+0x370>
 8012914:	f000 80a6 	beq.w	8012a64 <_dtoa_r+0x4f4>
 8012918:	f1ca 0600 	rsb	r6, sl, #0
 801291c:	4ba5      	ldr	r3, [pc, #660]	; (8012bb4 <_dtoa_r+0x644>)
 801291e:	4fa6      	ldr	r7, [pc, #664]	; (8012bb8 <_dtoa_r+0x648>)
 8012920:	f006 020f 	and.w	r2, r6, #15
 8012924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801292c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012930:	f7ed fe62 	bl	80005f8 <__aeabi_dmul>
 8012934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012938:	1136      	asrs	r6, r6, #4
 801293a:	2300      	movs	r3, #0
 801293c:	2502      	movs	r5, #2
 801293e:	2e00      	cmp	r6, #0
 8012940:	f040 8085 	bne.w	8012a4e <_dtoa_r+0x4de>
 8012944:	2b00      	cmp	r3, #0
 8012946:	d1d2      	bne.n	80128ee <_dtoa_r+0x37e>
 8012948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801294a:	2b00      	cmp	r3, #0
 801294c:	f000 808c 	beq.w	8012a68 <_dtoa_r+0x4f8>
 8012950:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012954:	4b99      	ldr	r3, [pc, #612]	; (8012bbc <_dtoa_r+0x64c>)
 8012956:	2200      	movs	r2, #0
 8012958:	4630      	mov	r0, r6
 801295a:	4639      	mov	r1, r7
 801295c:	f7ee f8be 	bl	8000adc <__aeabi_dcmplt>
 8012960:	2800      	cmp	r0, #0
 8012962:	f000 8081 	beq.w	8012a68 <_dtoa_r+0x4f8>
 8012966:	9b01      	ldr	r3, [sp, #4]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d07d      	beq.n	8012a68 <_dtoa_r+0x4f8>
 801296c:	f1b9 0f00 	cmp.w	r9, #0
 8012970:	dd3c      	ble.n	80129ec <_dtoa_r+0x47c>
 8012972:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8012976:	9307      	str	r3, [sp, #28]
 8012978:	2200      	movs	r2, #0
 801297a:	4b91      	ldr	r3, [pc, #580]	; (8012bc0 <_dtoa_r+0x650>)
 801297c:	4630      	mov	r0, r6
 801297e:	4639      	mov	r1, r7
 8012980:	f7ed fe3a 	bl	80005f8 <__aeabi_dmul>
 8012984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012988:	3501      	adds	r5, #1
 801298a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801298e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012992:	4628      	mov	r0, r5
 8012994:	f7ed fdc6 	bl	8000524 <__aeabi_i2d>
 8012998:	4632      	mov	r2, r6
 801299a:	463b      	mov	r3, r7
 801299c:	f7ed fe2c 	bl	80005f8 <__aeabi_dmul>
 80129a0:	4b88      	ldr	r3, [pc, #544]	; (8012bc4 <_dtoa_r+0x654>)
 80129a2:	2200      	movs	r2, #0
 80129a4:	f7ed fc72 	bl	800028c <__adddf3>
 80129a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80129ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129b0:	9303      	str	r3, [sp, #12]
 80129b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d15c      	bne.n	8012a72 <_dtoa_r+0x502>
 80129b8:	4b83      	ldr	r3, [pc, #524]	; (8012bc8 <_dtoa_r+0x658>)
 80129ba:	2200      	movs	r2, #0
 80129bc:	4630      	mov	r0, r6
 80129be:	4639      	mov	r1, r7
 80129c0:	f7ed fc62 	bl	8000288 <__aeabi_dsub>
 80129c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129c8:	4606      	mov	r6, r0
 80129ca:	460f      	mov	r7, r1
 80129cc:	f7ee f8a4 	bl	8000b18 <__aeabi_dcmpgt>
 80129d0:	2800      	cmp	r0, #0
 80129d2:	f040 8296 	bne.w	8012f02 <_dtoa_r+0x992>
 80129d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80129da:	4630      	mov	r0, r6
 80129dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129e0:	4639      	mov	r1, r7
 80129e2:	f7ee f87b 	bl	8000adc <__aeabi_dcmplt>
 80129e6:	2800      	cmp	r0, #0
 80129e8:	f040 8288 	bne.w	8012efc <_dtoa_r+0x98c>
 80129ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80129f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80129f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	f2c0 8158 	blt.w	8012cac <_dtoa_r+0x73c>
 80129fc:	f1ba 0f0e 	cmp.w	sl, #14
 8012a00:	f300 8154 	bgt.w	8012cac <_dtoa_r+0x73c>
 8012a04:	4b6b      	ldr	r3, [pc, #428]	; (8012bb4 <_dtoa_r+0x644>)
 8012a06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012a0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	f280 80e3 	bge.w	8012bdc <_dtoa_r+0x66c>
 8012a16:	9b01      	ldr	r3, [sp, #4]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	f300 80df 	bgt.w	8012bdc <_dtoa_r+0x66c>
 8012a1e:	f040 826d 	bne.w	8012efc <_dtoa_r+0x98c>
 8012a22:	4b69      	ldr	r3, [pc, #420]	; (8012bc8 <_dtoa_r+0x658>)
 8012a24:	2200      	movs	r2, #0
 8012a26:	4640      	mov	r0, r8
 8012a28:	4649      	mov	r1, r9
 8012a2a:	f7ed fde5 	bl	80005f8 <__aeabi_dmul>
 8012a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a32:	f7ee f867 	bl	8000b04 <__aeabi_dcmpge>
 8012a36:	9e01      	ldr	r6, [sp, #4]
 8012a38:	4637      	mov	r7, r6
 8012a3a:	2800      	cmp	r0, #0
 8012a3c:	f040 8243 	bne.w	8012ec6 <_dtoa_r+0x956>
 8012a40:	9d00      	ldr	r5, [sp, #0]
 8012a42:	2331      	movs	r3, #49	; 0x31
 8012a44:	f805 3b01 	strb.w	r3, [r5], #1
 8012a48:	f10a 0a01 	add.w	sl, sl, #1
 8012a4c:	e23f      	b.n	8012ece <_dtoa_r+0x95e>
 8012a4e:	07f2      	lsls	r2, r6, #31
 8012a50:	d505      	bpl.n	8012a5e <_dtoa_r+0x4ee>
 8012a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012a56:	f7ed fdcf 	bl	80005f8 <__aeabi_dmul>
 8012a5a:	3501      	adds	r5, #1
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	1076      	asrs	r6, r6, #1
 8012a60:	3708      	adds	r7, #8
 8012a62:	e76c      	b.n	801293e <_dtoa_r+0x3ce>
 8012a64:	2502      	movs	r5, #2
 8012a66:	e76f      	b.n	8012948 <_dtoa_r+0x3d8>
 8012a68:	9b01      	ldr	r3, [sp, #4]
 8012a6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8012a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8012a70:	e78d      	b.n	801298e <_dtoa_r+0x41e>
 8012a72:	9900      	ldr	r1, [sp, #0]
 8012a74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012a76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a78:	4b4e      	ldr	r3, [pc, #312]	; (8012bb4 <_dtoa_r+0x644>)
 8012a7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a7e:	4401      	add	r1, r0
 8012a80:	9102      	str	r1, [sp, #8]
 8012a82:	9908      	ldr	r1, [sp, #32]
 8012a84:	eeb0 8a47 	vmov.f32	s16, s14
 8012a88:	eef0 8a67 	vmov.f32	s17, s15
 8012a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012a94:	2900      	cmp	r1, #0
 8012a96:	d045      	beq.n	8012b24 <_dtoa_r+0x5b4>
 8012a98:	494c      	ldr	r1, [pc, #304]	; (8012bcc <_dtoa_r+0x65c>)
 8012a9a:	2000      	movs	r0, #0
 8012a9c:	f7ed fed6 	bl	800084c <__aeabi_ddiv>
 8012aa0:	ec53 2b18 	vmov	r2, r3, d8
 8012aa4:	f7ed fbf0 	bl	8000288 <__aeabi_dsub>
 8012aa8:	9d00      	ldr	r5, [sp, #0]
 8012aaa:	ec41 0b18 	vmov	d8, r0, r1
 8012aae:	4639      	mov	r1, r7
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	f7ee f851 	bl	8000b58 <__aeabi_d2iz>
 8012ab6:	900c      	str	r0, [sp, #48]	; 0x30
 8012ab8:	f7ed fd34 	bl	8000524 <__aeabi_i2d>
 8012abc:	4602      	mov	r2, r0
 8012abe:	460b      	mov	r3, r1
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	4639      	mov	r1, r7
 8012ac4:	f7ed fbe0 	bl	8000288 <__aeabi_dsub>
 8012ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012aca:	3330      	adds	r3, #48	; 0x30
 8012acc:	f805 3b01 	strb.w	r3, [r5], #1
 8012ad0:	ec53 2b18 	vmov	r2, r3, d8
 8012ad4:	4606      	mov	r6, r0
 8012ad6:	460f      	mov	r7, r1
 8012ad8:	f7ee f800 	bl	8000adc <__aeabi_dcmplt>
 8012adc:	2800      	cmp	r0, #0
 8012ade:	d165      	bne.n	8012bac <_dtoa_r+0x63c>
 8012ae0:	4632      	mov	r2, r6
 8012ae2:	463b      	mov	r3, r7
 8012ae4:	4935      	ldr	r1, [pc, #212]	; (8012bbc <_dtoa_r+0x64c>)
 8012ae6:	2000      	movs	r0, #0
 8012ae8:	f7ed fbce 	bl	8000288 <__aeabi_dsub>
 8012aec:	ec53 2b18 	vmov	r2, r3, d8
 8012af0:	f7ed fff4 	bl	8000adc <__aeabi_dcmplt>
 8012af4:	2800      	cmp	r0, #0
 8012af6:	f040 80b9 	bne.w	8012c6c <_dtoa_r+0x6fc>
 8012afa:	9b02      	ldr	r3, [sp, #8]
 8012afc:	429d      	cmp	r5, r3
 8012afe:	f43f af75 	beq.w	80129ec <_dtoa_r+0x47c>
 8012b02:	4b2f      	ldr	r3, [pc, #188]	; (8012bc0 <_dtoa_r+0x650>)
 8012b04:	ec51 0b18 	vmov	r0, r1, d8
 8012b08:	2200      	movs	r2, #0
 8012b0a:	f7ed fd75 	bl	80005f8 <__aeabi_dmul>
 8012b0e:	4b2c      	ldr	r3, [pc, #176]	; (8012bc0 <_dtoa_r+0x650>)
 8012b10:	ec41 0b18 	vmov	d8, r0, r1
 8012b14:	2200      	movs	r2, #0
 8012b16:	4630      	mov	r0, r6
 8012b18:	4639      	mov	r1, r7
 8012b1a:	f7ed fd6d 	bl	80005f8 <__aeabi_dmul>
 8012b1e:	4606      	mov	r6, r0
 8012b20:	460f      	mov	r7, r1
 8012b22:	e7c4      	b.n	8012aae <_dtoa_r+0x53e>
 8012b24:	ec51 0b17 	vmov	r0, r1, d7
 8012b28:	f7ed fd66 	bl	80005f8 <__aeabi_dmul>
 8012b2c:	9b02      	ldr	r3, [sp, #8]
 8012b2e:	9d00      	ldr	r5, [sp, #0]
 8012b30:	930c      	str	r3, [sp, #48]	; 0x30
 8012b32:	ec41 0b18 	vmov	d8, r0, r1
 8012b36:	4639      	mov	r1, r7
 8012b38:	4630      	mov	r0, r6
 8012b3a:	f7ee f80d 	bl	8000b58 <__aeabi_d2iz>
 8012b3e:	9011      	str	r0, [sp, #68]	; 0x44
 8012b40:	f7ed fcf0 	bl	8000524 <__aeabi_i2d>
 8012b44:	4602      	mov	r2, r0
 8012b46:	460b      	mov	r3, r1
 8012b48:	4630      	mov	r0, r6
 8012b4a:	4639      	mov	r1, r7
 8012b4c:	f7ed fb9c 	bl	8000288 <__aeabi_dsub>
 8012b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b52:	3330      	adds	r3, #48	; 0x30
 8012b54:	f805 3b01 	strb.w	r3, [r5], #1
 8012b58:	9b02      	ldr	r3, [sp, #8]
 8012b5a:	429d      	cmp	r5, r3
 8012b5c:	4606      	mov	r6, r0
 8012b5e:	460f      	mov	r7, r1
 8012b60:	f04f 0200 	mov.w	r2, #0
 8012b64:	d134      	bne.n	8012bd0 <_dtoa_r+0x660>
 8012b66:	4b19      	ldr	r3, [pc, #100]	; (8012bcc <_dtoa_r+0x65c>)
 8012b68:	ec51 0b18 	vmov	r0, r1, d8
 8012b6c:	f7ed fb8e 	bl	800028c <__adddf3>
 8012b70:	4602      	mov	r2, r0
 8012b72:	460b      	mov	r3, r1
 8012b74:	4630      	mov	r0, r6
 8012b76:	4639      	mov	r1, r7
 8012b78:	f7ed ffce 	bl	8000b18 <__aeabi_dcmpgt>
 8012b7c:	2800      	cmp	r0, #0
 8012b7e:	d175      	bne.n	8012c6c <_dtoa_r+0x6fc>
 8012b80:	ec53 2b18 	vmov	r2, r3, d8
 8012b84:	4911      	ldr	r1, [pc, #68]	; (8012bcc <_dtoa_r+0x65c>)
 8012b86:	2000      	movs	r0, #0
 8012b88:	f7ed fb7e 	bl	8000288 <__aeabi_dsub>
 8012b8c:	4602      	mov	r2, r0
 8012b8e:	460b      	mov	r3, r1
 8012b90:	4630      	mov	r0, r6
 8012b92:	4639      	mov	r1, r7
 8012b94:	f7ed ffa2 	bl	8000adc <__aeabi_dcmplt>
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	f43f af27 	beq.w	80129ec <_dtoa_r+0x47c>
 8012b9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012ba0:	1e6b      	subs	r3, r5, #1
 8012ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8012ba4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ba8:	2b30      	cmp	r3, #48	; 0x30
 8012baa:	d0f8      	beq.n	8012b9e <_dtoa_r+0x62e>
 8012bac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012bb0:	e04a      	b.n	8012c48 <_dtoa_r+0x6d8>
 8012bb2:	bf00      	nop
 8012bb4:	0801abf0 	.word	0x0801abf0
 8012bb8:	0801abc8 	.word	0x0801abc8
 8012bbc:	3ff00000 	.word	0x3ff00000
 8012bc0:	40240000 	.word	0x40240000
 8012bc4:	401c0000 	.word	0x401c0000
 8012bc8:	40140000 	.word	0x40140000
 8012bcc:	3fe00000 	.word	0x3fe00000
 8012bd0:	4baf      	ldr	r3, [pc, #700]	; (8012e90 <_dtoa_r+0x920>)
 8012bd2:	f7ed fd11 	bl	80005f8 <__aeabi_dmul>
 8012bd6:	4606      	mov	r6, r0
 8012bd8:	460f      	mov	r7, r1
 8012bda:	e7ac      	b.n	8012b36 <_dtoa_r+0x5c6>
 8012bdc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012be0:	9d00      	ldr	r5, [sp, #0]
 8012be2:	4642      	mov	r2, r8
 8012be4:	464b      	mov	r3, r9
 8012be6:	4630      	mov	r0, r6
 8012be8:	4639      	mov	r1, r7
 8012bea:	f7ed fe2f 	bl	800084c <__aeabi_ddiv>
 8012bee:	f7ed ffb3 	bl	8000b58 <__aeabi_d2iz>
 8012bf2:	9002      	str	r0, [sp, #8]
 8012bf4:	f7ed fc96 	bl	8000524 <__aeabi_i2d>
 8012bf8:	4642      	mov	r2, r8
 8012bfa:	464b      	mov	r3, r9
 8012bfc:	f7ed fcfc 	bl	80005f8 <__aeabi_dmul>
 8012c00:	4602      	mov	r2, r0
 8012c02:	460b      	mov	r3, r1
 8012c04:	4630      	mov	r0, r6
 8012c06:	4639      	mov	r1, r7
 8012c08:	f7ed fb3e 	bl	8000288 <__aeabi_dsub>
 8012c0c:	9e02      	ldr	r6, [sp, #8]
 8012c0e:	9f01      	ldr	r7, [sp, #4]
 8012c10:	3630      	adds	r6, #48	; 0x30
 8012c12:	f805 6b01 	strb.w	r6, [r5], #1
 8012c16:	9e00      	ldr	r6, [sp, #0]
 8012c18:	1bae      	subs	r6, r5, r6
 8012c1a:	42b7      	cmp	r7, r6
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	460b      	mov	r3, r1
 8012c20:	d137      	bne.n	8012c92 <_dtoa_r+0x722>
 8012c22:	f7ed fb33 	bl	800028c <__adddf3>
 8012c26:	4642      	mov	r2, r8
 8012c28:	464b      	mov	r3, r9
 8012c2a:	4606      	mov	r6, r0
 8012c2c:	460f      	mov	r7, r1
 8012c2e:	f7ed ff73 	bl	8000b18 <__aeabi_dcmpgt>
 8012c32:	b9c8      	cbnz	r0, 8012c68 <_dtoa_r+0x6f8>
 8012c34:	4642      	mov	r2, r8
 8012c36:	464b      	mov	r3, r9
 8012c38:	4630      	mov	r0, r6
 8012c3a:	4639      	mov	r1, r7
 8012c3c:	f7ed ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c40:	b110      	cbz	r0, 8012c48 <_dtoa_r+0x6d8>
 8012c42:	9b02      	ldr	r3, [sp, #8]
 8012c44:	07d9      	lsls	r1, r3, #31
 8012c46:	d40f      	bmi.n	8012c68 <_dtoa_r+0x6f8>
 8012c48:	4620      	mov	r0, r4
 8012c4a:	4659      	mov	r1, fp
 8012c4c:	f000 fba8 	bl	80133a0 <_Bfree>
 8012c50:	2300      	movs	r3, #0
 8012c52:	702b      	strb	r3, [r5, #0]
 8012c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c56:	f10a 0001 	add.w	r0, sl, #1
 8012c5a:	6018      	str	r0, [r3, #0]
 8012c5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	f43f acd8 	beq.w	8012614 <_dtoa_r+0xa4>
 8012c64:	601d      	str	r5, [r3, #0]
 8012c66:	e4d5      	b.n	8012614 <_dtoa_r+0xa4>
 8012c68:	f8cd a01c 	str.w	sl, [sp, #28]
 8012c6c:	462b      	mov	r3, r5
 8012c6e:	461d      	mov	r5, r3
 8012c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c74:	2a39      	cmp	r2, #57	; 0x39
 8012c76:	d108      	bne.n	8012c8a <_dtoa_r+0x71a>
 8012c78:	9a00      	ldr	r2, [sp, #0]
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d1f7      	bne.n	8012c6e <_dtoa_r+0x6fe>
 8012c7e:	9a07      	ldr	r2, [sp, #28]
 8012c80:	9900      	ldr	r1, [sp, #0]
 8012c82:	3201      	adds	r2, #1
 8012c84:	9207      	str	r2, [sp, #28]
 8012c86:	2230      	movs	r2, #48	; 0x30
 8012c88:	700a      	strb	r2, [r1, #0]
 8012c8a:	781a      	ldrb	r2, [r3, #0]
 8012c8c:	3201      	adds	r2, #1
 8012c8e:	701a      	strb	r2, [r3, #0]
 8012c90:	e78c      	b.n	8012bac <_dtoa_r+0x63c>
 8012c92:	4b7f      	ldr	r3, [pc, #508]	; (8012e90 <_dtoa_r+0x920>)
 8012c94:	2200      	movs	r2, #0
 8012c96:	f7ed fcaf 	bl	80005f8 <__aeabi_dmul>
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	4606      	mov	r6, r0
 8012ca0:	460f      	mov	r7, r1
 8012ca2:	f7ed ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	d09b      	beq.n	8012be2 <_dtoa_r+0x672>
 8012caa:	e7cd      	b.n	8012c48 <_dtoa_r+0x6d8>
 8012cac:	9a08      	ldr	r2, [sp, #32]
 8012cae:	2a00      	cmp	r2, #0
 8012cb0:	f000 80c4 	beq.w	8012e3c <_dtoa_r+0x8cc>
 8012cb4:	9a05      	ldr	r2, [sp, #20]
 8012cb6:	2a01      	cmp	r2, #1
 8012cb8:	f300 80a8 	bgt.w	8012e0c <_dtoa_r+0x89c>
 8012cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012cbe:	2a00      	cmp	r2, #0
 8012cc0:	f000 80a0 	beq.w	8012e04 <_dtoa_r+0x894>
 8012cc4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012cc8:	9e06      	ldr	r6, [sp, #24]
 8012cca:	4645      	mov	r5, r8
 8012ccc:	9a04      	ldr	r2, [sp, #16]
 8012cce:	2101      	movs	r1, #1
 8012cd0:	441a      	add	r2, r3
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	4498      	add	r8, r3
 8012cd6:	9204      	str	r2, [sp, #16]
 8012cd8:	f000 fc1e 	bl	8013518 <__i2b>
 8012cdc:	4607      	mov	r7, r0
 8012cde:	2d00      	cmp	r5, #0
 8012ce0:	dd0b      	ble.n	8012cfa <_dtoa_r+0x78a>
 8012ce2:	9b04      	ldr	r3, [sp, #16]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	dd08      	ble.n	8012cfa <_dtoa_r+0x78a>
 8012ce8:	42ab      	cmp	r3, r5
 8012cea:	9a04      	ldr	r2, [sp, #16]
 8012cec:	bfa8      	it	ge
 8012cee:	462b      	movge	r3, r5
 8012cf0:	eba8 0803 	sub.w	r8, r8, r3
 8012cf4:	1aed      	subs	r5, r5, r3
 8012cf6:	1ad3      	subs	r3, r2, r3
 8012cf8:	9304      	str	r3, [sp, #16]
 8012cfa:	9b06      	ldr	r3, [sp, #24]
 8012cfc:	b1fb      	cbz	r3, 8012d3e <_dtoa_r+0x7ce>
 8012cfe:	9b08      	ldr	r3, [sp, #32]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	f000 809f 	beq.w	8012e44 <_dtoa_r+0x8d4>
 8012d06:	2e00      	cmp	r6, #0
 8012d08:	dd11      	ble.n	8012d2e <_dtoa_r+0x7be>
 8012d0a:	4639      	mov	r1, r7
 8012d0c:	4632      	mov	r2, r6
 8012d0e:	4620      	mov	r0, r4
 8012d10:	f000 fcbe 	bl	8013690 <__pow5mult>
 8012d14:	465a      	mov	r2, fp
 8012d16:	4601      	mov	r1, r0
 8012d18:	4607      	mov	r7, r0
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	f000 fc12 	bl	8013544 <__multiply>
 8012d20:	4659      	mov	r1, fp
 8012d22:	9007      	str	r0, [sp, #28]
 8012d24:	4620      	mov	r0, r4
 8012d26:	f000 fb3b 	bl	80133a0 <_Bfree>
 8012d2a:	9b07      	ldr	r3, [sp, #28]
 8012d2c:	469b      	mov	fp, r3
 8012d2e:	9b06      	ldr	r3, [sp, #24]
 8012d30:	1b9a      	subs	r2, r3, r6
 8012d32:	d004      	beq.n	8012d3e <_dtoa_r+0x7ce>
 8012d34:	4659      	mov	r1, fp
 8012d36:	4620      	mov	r0, r4
 8012d38:	f000 fcaa 	bl	8013690 <__pow5mult>
 8012d3c:	4683      	mov	fp, r0
 8012d3e:	2101      	movs	r1, #1
 8012d40:	4620      	mov	r0, r4
 8012d42:	f000 fbe9 	bl	8013518 <__i2b>
 8012d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	4606      	mov	r6, r0
 8012d4c:	dd7c      	ble.n	8012e48 <_dtoa_r+0x8d8>
 8012d4e:	461a      	mov	r2, r3
 8012d50:	4601      	mov	r1, r0
 8012d52:	4620      	mov	r0, r4
 8012d54:	f000 fc9c 	bl	8013690 <__pow5mult>
 8012d58:	9b05      	ldr	r3, [sp, #20]
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	4606      	mov	r6, r0
 8012d5e:	dd76      	ble.n	8012e4e <_dtoa_r+0x8de>
 8012d60:	2300      	movs	r3, #0
 8012d62:	9306      	str	r3, [sp, #24]
 8012d64:	6933      	ldr	r3, [r6, #16]
 8012d66:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012d6a:	6918      	ldr	r0, [r3, #16]
 8012d6c:	f000 fb84 	bl	8013478 <__hi0bits>
 8012d70:	f1c0 0020 	rsb	r0, r0, #32
 8012d74:	9b04      	ldr	r3, [sp, #16]
 8012d76:	4418      	add	r0, r3
 8012d78:	f010 001f 	ands.w	r0, r0, #31
 8012d7c:	f000 8086 	beq.w	8012e8c <_dtoa_r+0x91c>
 8012d80:	f1c0 0320 	rsb	r3, r0, #32
 8012d84:	2b04      	cmp	r3, #4
 8012d86:	dd7f      	ble.n	8012e88 <_dtoa_r+0x918>
 8012d88:	f1c0 001c 	rsb	r0, r0, #28
 8012d8c:	9b04      	ldr	r3, [sp, #16]
 8012d8e:	4403      	add	r3, r0
 8012d90:	4480      	add	r8, r0
 8012d92:	4405      	add	r5, r0
 8012d94:	9304      	str	r3, [sp, #16]
 8012d96:	f1b8 0f00 	cmp.w	r8, #0
 8012d9a:	dd05      	ble.n	8012da8 <_dtoa_r+0x838>
 8012d9c:	4659      	mov	r1, fp
 8012d9e:	4642      	mov	r2, r8
 8012da0:	4620      	mov	r0, r4
 8012da2:	f000 fccf 	bl	8013744 <__lshift>
 8012da6:	4683      	mov	fp, r0
 8012da8:	9b04      	ldr	r3, [sp, #16]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	dd05      	ble.n	8012dba <_dtoa_r+0x84a>
 8012dae:	4631      	mov	r1, r6
 8012db0:	461a      	mov	r2, r3
 8012db2:	4620      	mov	r0, r4
 8012db4:	f000 fcc6 	bl	8013744 <__lshift>
 8012db8:	4606      	mov	r6, r0
 8012dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d069      	beq.n	8012e94 <_dtoa_r+0x924>
 8012dc0:	4631      	mov	r1, r6
 8012dc2:	4658      	mov	r0, fp
 8012dc4:	f000 fd2a 	bl	801381c <__mcmp>
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	da63      	bge.n	8012e94 <_dtoa_r+0x924>
 8012dcc:	2300      	movs	r3, #0
 8012dce:	4659      	mov	r1, fp
 8012dd0:	220a      	movs	r2, #10
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	f000 fb06 	bl	80133e4 <__multadd>
 8012dd8:	9b08      	ldr	r3, [sp, #32]
 8012dda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012dde:	4683      	mov	fp, r0
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	f000 818f 	beq.w	8013104 <_dtoa_r+0xb94>
 8012de6:	4639      	mov	r1, r7
 8012de8:	2300      	movs	r3, #0
 8012dea:	220a      	movs	r2, #10
 8012dec:	4620      	mov	r0, r4
 8012dee:	f000 faf9 	bl	80133e4 <__multadd>
 8012df2:	f1b9 0f00 	cmp.w	r9, #0
 8012df6:	4607      	mov	r7, r0
 8012df8:	f300 808e 	bgt.w	8012f18 <_dtoa_r+0x9a8>
 8012dfc:	9b05      	ldr	r3, [sp, #20]
 8012dfe:	2b02      	cmp	r3, #2
 8012e00:	dc50      	bgt.n	8012ea4 <_dtoa_r+0x934>
 8012e02:	e089      	b.n	8012f18 <_dtoa_r+0x9a8>
 8012e04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012e06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012e0a:	e75d      	b.n	8012cc8 <_dtoa_r+0x758>
 8012e0c:	9b01      	ldr	r3, [sp, #4]
 8012e0e:	1e5e      	subs	r6, r3, #1
 8012e10:	9b06      	ldr	r3, [sp, #24]
 8012e12:	42b3      	cmp	r3, r6
 8012e14:	bfbf      	itttt	lt
 8012e16:	9b06      	ldrlt	r3, [sp, #24]
 8012e18:	9606      	strlt	r6, [sp, #24]
 8012e1a:	1af2      	sublt	r2, r6, r3
 8012e1c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012e1e:	bfb6      	itet	lt
 8012e20:	189b      	addlt	r3, r3, r2
 8012e22:	1b9e      	subge	r6, r3, r6
 8012e24:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012e26:	9b01      	ldr	r3, [sp, #4]
 8012e28:	bfb8      	it	lt
 8012e2a:	2600      	movlt	r6, #0
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	bfb5      	itete	lt
 8012e30:	eba8 0503 	sublt.w	r5, r8, r3
 8012e34:	9b01      	ldrge	r3, [sp, #4]
 8012e36:	2300      	movlt	r3, #0
 8012e38:	4645      	movge	r5, r8
 8012e3a:	e747      	b.n	8012ccc <_dtoa_r+0x75c>
 8012e3c:	9e06      	ldr	r6, [sp, #24]
 8012e3e:	9f08      	ldr	r7, [sp, #32]
 8012e40:	4645      	mov	r5, r8
 8012e42:	e74c      	b.n	8012cde <_dtoa_r+0x76e>
 8012e44:	9a06      	ldr	r2, [sp, #24]
 8012e46:	e775      	b.n	8012d34 <_dtoa_r+0x7c4>
 8012e48:	9b05      	ldr	r3, [sp, #20]
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	dc18      	bgt.n	8012e80 <_dtoa_r+0x910>
 8012e4e:	9b02      	ldr	r3, [sp, #8]
 8012e50:	b9b3      	cbnz	r3, 8012e80 <_dtoa_r+0x910>
 8012e52:	9b03      	ldr	r3, [sp, #12]
 8012e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e58:	b9a3      	cbnz	r3, 8012e84 <_dtoa_r+0x914>
 8012e5a:	9b03      	ldr	r3, [sp, #12]
 8012e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e60:	0d1b      	lsrs	r3, r3, #20
 8012e62:	051b      	lsls	r3, r3, #20
 8012e64:	b12b      	cbz	r3, 8012e72 <_dtoa_r+0x902>
 8012e66:	9b04      	ldr	r3, [sp, #16]
 8012e68:	3301      	adds	r3, #1
 8012e6a:	9304      	str	r3, [sp, #16]
 8012e6c:	f108 0801 	add.w	r8, r8, #1
 8012e70:	2301      	movs	r3, #1
 8012e72:	9306      	str	r3, [sp, #24]
 8012e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	f47f af74 	bne.w	8012d64 <_dtoa_r+0x7f4>
 8012e7c:	2001      	movs	r0, #1
 8012e7e:	e779      	b.n	8012d74 <_dtoa_r+0x804>
 8012e80:	2300      	movs	r3, #0
 8012e82:	e7f6      	b.n	8012e72 <_dtoa_r+0x902>
 8012e84:	9b02      	ldr	r3, [sp, #8]
 8012e86:	e7f4      	b.n	8012e72 <_dtoa_r+0x902>
 8012e88:	d085      	beq.n	8012d96 <_dtoa_r+0x826>
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	301c      	adds	r0, #28
 8012e8e:	e77d      	b.n	8012d8c <_dtoa_r+0x81c>
 8012e90:	40240000 	.word	0x40240000
 8012e94:	9b01      	ldr	r3, [sp, #4]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	dc38      	bgt.n	8012f0c <_dtoa_r+0x99c>
 8012e9a:	9b05      	ldr	r3, [sp, #20]
 8012e9c:	2b02      	cmp	r3, #2
 8012e9e:	dd35      	ble.n	8012f0c <_dtoa_r+0x99c>
 8012ea0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012ea4:	f1b9 0f00 	cmp.w	r9, #0
 8012ea8:	d10d      	bne.n	8012ec6 <_dtoa_r+0x956>
 8012eaa:	4631      	mov	r1, r6
 8012eac:	464b      	mov	r3, r9
 8012eae:	2205      	movs	r2, #5
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	f000 fa97 	bl	80133e4 <__multadd>
 8012eb6:	4601      	mov	r1, r0
 8012eb8:	4606      	mov	r6, r0
 8012eba:	4658      	mov	r0, fp
 8012ebc:	f000 fcae 	bl	801381c <__mcmp>
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	f73f adbd 	bgt.w	8012a40 <_dtoa_r+0x4d0>
 8012ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ec8:	9d00      	ldr	r5, [sp, #0]
 8012eca:	ea6f 0a03 	mvn.w	sl, r3
 8012ece:	f04f 0800 	mov.w	r8, #0
 8012ed2:	4631      	mov	r1, r6
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	f000 fa63 	bl	80133a0 <_Bfree>
 8012eda:	2f00      	cmp	r7, #0
 8012edc:	f43f aeb4 	beq.w	8012c48 <_dtoa_r+0x6d8>
 8012ee0:	f1b8 0f00 	cmp.w	r8, #0
 8012ee4:	d005      	beq.n	8012ef2 <_dtoa_r+0x982>
 8012ee6:	45b8      	cmp	r8, r7
 8012ee8:	d003      	beq.n	8012ef2 <_dtoa_r+0x982>
 8012eea:	4641      	mov	r1, r8
 8012eec:	4620      	mov	r0, r4
 8012eee:	f000 fa57 	bl	80133a0 <_Bfree>
 8012ef2:	4639      	mov	r1, r7
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	f000 fa53 	bl	80133a0 <_Bfree>
 8012efa:	e6a5      	b.n	8012c48 <_dtoa_r+0x6d8>
 8012efc:	2600      	movs	r6, #0
 8012efe:	4637      	mov	r7, r6
 8012f00:	e7e1      	b.n	8012ec6 <_dtoa_r+0x956>
 8012f02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012f04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012f08:	4637      	mov	r7, r6
 8012f0a:	e599      	b.n	8012a40 <_dtoa_r+0x4d0>
 8012f0c:	9b08      	ldr	r3, [sp, #32]
 8012f0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	f000 80fd 	beq.w	8013112 <_dtoa_r+0xba2>
 8012f18:	2d00      	cmp	r5, #0
 8012f1a:	dd05      	ble.n	8012f28 <_dtoa_r+0x9b8>
 8012f1c:	4639      	mov	r1, r7
 8012f1e:	462a      	mov	r2, r5
 8012f20:	4620      	mov	r0, r4
 8012f22:	f000 fc0f 	bl	8013744 <__lshift>
 8012f26:	4607      	mov	r7, r0
 8012f28:	9b06      	ldr	r3, [sp, #24]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d05c      	beq.n	8012fe8 <_dtoa_r+0xa78>
 8012f2e:	6879      	ldr	r1, [r7, #4]
 8012f30:	4620      	mov	r0, r4
 8012f32:	f000 f9f5 	bl	8013320 <_Balloc>
 8012f36:	4605      	mov	r5, r0
 8012f38:	b928      	cbnz	r0, 8012f46 <_dtoa_r+0x9d6>
 8012f3a:	4b80      	ldr	r3, [pc, #512]	; (801313c <_dtoa_r+0xbcc>)
 8012f3c:	4602      	mov	r2, r0
 8012f3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012f42:	f7ff bb2e 	b.w	80125a2 <_dtoa_r+0x32>
 8012f46:	693a      	ldr	r2, [r7, #16]
 8012f48:	3202      	adds	r2, #2
 8012f4a:	0092      	lsls	r2, r2, #2
 8012f4c:	f107 010c 	add.w	r1, r7, #12
 8012f50:	300c      	adds	r0, #12
 8012f52:	f7fe fc4c 	bl	80117ee <memcpy>
 8012f56:	2201      	movs	r2, #1
 8012f58:	4629      	mov	r1, r5
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f000 fbf2 	bl	8013744 <__lshift>
 8012f60:	9b00      	ldr	r3, [sp, #0]
 8012f62:	3301      	adds	r3, #1
 8012f64:	9301      	str	r3, [sp, #4]
 8012f66:	9b00      	ldr	r3, [sp, #0]
 8012f68:	444b      	add	r3, r9
 8012f6a:	9307      	str	r3, [sp, #28]
 8012f6c:	9b02      	ldr	r3, [sp, #8]
 8012f6e:	f003 0301 	and.w	r3, r3, #1
 8012f72:	46b8      	mov	r8, r7
 8012f74:	9306      	str	r3, [sp, #24]
 8012f76:	4607      	mov	r7, r0
 8012f78:	9b01      	ldr	r3, [sp, #4]
 8012f7a:	4631      	mov	r1, r6
 8012f7c:	3b01      	subs	r3, #1
 8012f7e:	4658      	mov	r0, fp
 8012f80:	9302      	str	r3, [sp, #8]
 8012f82:	f7ff fa67 	bl	8012454 <quorem>
 8012f86:	4603      	mov	r3, r0
 8012f88:	3330      	adds	r3, #48	; 0x30
 8012f8a:	9004      	str	r0, [sp, #16]
 8012f8c:	4641      	mov	r1, r8
 8012f8e:	4658      	mov	r0, fp
 8012f90:	9308      	str	r3, [sp, #32]
 8012f92:	f000 fc43 	bl	801381c <__mcmp>
 8012f96:	463a      	mov	r2, r7
 8012f98:	4681      	mov	r9, r0
 8012f9a:	4631      	mov	r1, r6
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	f000 fc59 	bl	8013854 <__mdiff>
 8012fa2:	68c2      	ldr	r2, [r0, #12]
 8012fa4:	9b08      	ldr	r3, [sp, #32]
 8012fa6:	4605      	mov	r5, r0
 8012fa8:	bb02      	cbnz	r2, 8012fec <_dtoa_r+0xa7c>
 8012faa:	4601      	mov	r1, r0
 8012fac:	4658      	mov	r0, fp
 8012fae:	f000 fc35 	bl	801381c <__mcmp>
 8012fb2:	9b08      	ldr	r3, [sp, #32]
 8012fb4:	4602      	mov	r2, r0
 8012fb6:	4629      	mov	r1, r5
 8012fb8:	4620      	mov	r0, r4
 8012fba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012fbe:	f000 f9ef 	bl	80133a0 <_Bfree>
 8012fc2:	9b05      	ldr	r3, [sp, #20]
 8012fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012fc6:	9d01      	ldr	r5, [sp, #4]
 8012fc8:	ea43 0102 	orr.w	r1, r3, r2
 8012fcc:	9b06      	ldr	r3, [sp, #24]
 8012fce:	430b      	orrs	r3, r1
 8012fd0:	9b08      	ldr	r3, [sp, #32]
 8012fd2:	d10d      	bne.n	8012ff0 <_dtoa_r+0xa80>
 8012fd4:	2b39      	cmp	r3, #57	; 0x39
 8012fd6:	d029      	beq.n	801302c <_dtoa_r+0xabc>
 8012fd8:	f1b9 0f00 	cmp.w	r9, #0
 8012fdc:	dd01      	ble.n	8012fe2 <_dtoa_r+0xa72>
 8012fde:	9b04      	ldr	r3, [sp, #16]
 8012fe0:	3331      	adds	r3, #49	; 0x31
 8012fe2:	9a02      	ldr	r2, [sp, #8]
 8012fe4:	7013      	strb	r3, [r2, #0]
 8012fe6:	e774      	b.n	8012ed2 <_dtoa_r+0x962>
 8012fe8:	4638      	mov	r0, r7
 8012fea:	e7b9      	b.n	8012f60 <_dtoa_r+0x9f0>
 8012fec:	2201      	movs	r2, #1
 8012fee:	e7e2      	b.n	8012fb6 <_dtoa_r+0xa46>
 8012ff0:	f1b9 0f00 	cmp.w	r9, #0
 8012ff4:	db06      	blt.n	8013004 <_dtoa_r+0xa94>
 8012ff6:	9905      	ldr	r1, [sp, #20]
 8012ff8:	ea41 0909 	orr.w	r9, r1, r9
 8012ffc:	9906      	ldr	r1, [sp, #24]
 8012ffe:	ea59 0101 	orrs.w	r1, r9, r1
 8013002:	d120      	bne.n	8013046 <_dtoa_r+0xad6>
 8013004:	2a00      	cmp	r2, #0
 8013006:	ddec      	ble.n	8012fe2 <_dtoa_r+0xa72>
 8013008:	4659      	mov	r1, fp
 801300a:	2201      	movs	r2, #1
 801300c:	4620      	mov	r0, r4
 801300e:	9301      	str	r3, [sp, #4]
 8013010:	f000 fb98 	bl	8013744 <__lshift>
 8013014:	4631      	mov	r1, r6
 8013016:	4683      	mov	fp, r0
 8013018:	f000 fc00 	bl	801381c <__mcmp>
 801301c:	2800      	cmp	r0, #0
 801301e:	9b01      	ldr	r3, [sp, #4]
 8013020:	dc02      	bgt.n	8013028 <_dtoa_r+0xab8>
 8013022:	d1de      	bne.n	8012fe2 <_dtoa_r+0xa72>
 8013024:	07da      	lsls	r2, r3, #31
 8013026:	d5dc      	bpl.n	8012fe2 <_dtoa_r+0xa72>
 8013028:	2b39      	cmp	r3, #57	; 0x39
 801302a:	d1d8      	bne.n	8012fde <_dtoa_r+0xa6e>
 801302c:	9a02      	ldr	r2, [sp, #8]
 801302e:	2339      	movs	r3, #57	; 0x39
 8013030:	7013      	strb	r3, [r2, #0]
 8013032:	462b      	mov	r3, r5
 8013034:	461d      	mov	r5, r3
 8013036:	3b01      	subs	r3, #1
 8013038:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801303c:	2a39      	cmp	r2, #57	; 0x39
 801303e:	d050      	beq.n	80130e2 <_dtoa_r+0xb72>
 8013040:	3201      	adds	r2, #1
 8013042:	701a      	strb	r2, [r3, #0]
 8013044:	e745      	b.n	8012ed2 <_dtoa_r+0x962>
 8013046:	2a00      	cmp	r2, #0
 8013048:	dd03      	ble.n	8013052 <_dtoa_r+0xae2>
 801304a:	2b39      	cmp	r3, #57	; 0x39
 801304c:	d0ee      	beq.n	801302c <_dtoa_r+0xabc>
 801304e:	3301      	adds	r3, #1
 8013050:	e7c7      	b.n	8012fe2 <_dtoa_r+0xa72>
 8013052:	9a01      	ldr	r2, [sp, #4]
 8013054:	9907      	ldr	r1, [sp, #28]
 8013056:	f802 3c01 	strb.w	r3, [r2, #-1]
 801305a:	428a      	cmp	r2, r1
 801305c:	d02a      	beq.n	80130b4 <_dtoa_r+0xb44>
 801305e:	4659      	mov	r1, fp
 8013060:	2300      	movs	r3, #0
 8013062:	220a      	movs	r2, #10
 8013064:	4620      	mov	r0, r4
 8013066:	f000 f9bd 	bl	80133e4 <__multadd>
 801306a:	45b8      	cmp	r8, r7
 801306c:	4683      	mov	fp, r0
 801306e:	f04f 0300 	mov.w	r3, #0
 8013072:	f04f 020a 	mov.w	r2, #10
 8013076:	4641      	mov	r1, r8
 8013078:	4620      	mov	r0, r4
 801307a:	d107      	bne.n	801308c <_dtoa_r+0xb1c>
 801307c:	f000 f9b2 	bl	80133e4 <__multadd>
 8013080:	4680      	mov	r8, r0
 8013082:	4607      	mov	r7, r0
 8013084:	9b01      	ldr	r3, [sp, #4]
 8013086:	3301      	adds	r3, #1
 8013088:	9301      	str	r3, [sp, #4]
 801308a:	e775      	b.n	8012f78 <_dtoa_r+0xa08>
 801308c:	f000 f9aa 	bl	80133e4 <__multadd>
 8013090:	4639      	mov	r1, r7
 8013092:	4680      	mov	r8, r0
 8013094:	2300      	movs	r3, #0
 8013096:	220a      	movs	r2, #10
 8013098:	4620      	mov	r0, r4
 801309a:	f000 f9a3 	bl	80133e4 <__multadd>
 801309e:	4607      	mov	r7, r0
 80130a0:	e7f0      	b.n	8013084 <_dtoa_r+0xb14>
 80130a2:	f1b9 0f00 	cmp.w	r9, #0
 80130a6:	9a00      	ldr	r2, [sp, #0]
 80130a8:	bfcc      	ite	gt
 80130aa:	464d      	movgt	r5, r9
 80130ac:	2501      	movle	r5, #1
 80130ae:	4415      	add	r5, r2
 80130b0:	f04f 0800 	mov.w	r8, #0
 80130b4:	4659      	mov	r1, fp
 80130b6:	2201      	movs	r2, #1
 80130b8:	4620      	mov	r0, r4
 80130ba:	9301      	str	r3, [sp, #4]
 80130bc:	f000 fb42 	bl	8013744 <__lshift>
 80130c0:	4631      	mov	r1, r6
 80130c2:	4683      	mov	fp, r0
 80130c4:	f000 fbaa 	bl	801381c <__mcmp>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	dcb2      	bgt.n	8013032 <_dtoa_r+0xac2>
 80130cc:	d102      	bne.n	80130d4 <_dtoa_r+0xb64>
 80130ce:	9b01      	ldr	r3, [sp, #4]
 80130d0:	07db      	lsls	r3, r3, #31
 80130d2:	d4ae      	bmi.n	8013032 <_dtoa_r+0xac2>
 80130d4:	462b      	mov	r3, r5
 80130d6:	461d      	mov	r5, r3
 80130d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80130dc:	2a30      	cmp	r2, #48	; 0x30
 80130de:	d0fa      	beq.n	80130d6 <_dtoa_r+0xb66>
 80130e0:	e6f7      	b.n	8012ed2 <_dtoa_r+0x962>
 80130e2:	9a00      	ldr	r2, [sp, #0]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d1a5      	bne.n	8013034 <_dtoa_r+0xac4>
 80130e8:	f10a 0a01 	add.w	sl, sl, #1
 80130ec:	2331      	movs	r3, #49	; 0x31
 80130ee:	e779      	b.n	8012fe4 <_dtoa_r+0xa74>
 80130f0:	4b13      	ldr	r3, [pc, #76]	; (8013140 <_dtoa_r+0xbd0>)
 80130f2:	f7ff baaf 	b.w	8012654 <_dtoa_r+0xe4>
 80130f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	f47f aa86 	bne.w	801260a <_dtoa_r+0x9a>
 80130fe:	4b11      	ldr	r3, [pc, #68]	; (8013144 <_dtoa_r+0xbd4>)
 8013100:	f7ff baa8 	b.w	8012654 <_dtoa_r+0xe4>
 8013104:	f1b9 0f00 	cmp.w	r9, #0
 8013108:	dc03      	bgt.n	8013112 <_dtoa_r+0xba2>
 801310a:	9b05      	ldr	r3, [sp, #20]
 801310c:	2b02      	cmp	r3, #2
 801310e:	f73f aec9 	bgt.w	8012ea4 <_dtoa_r+0x934>
 8013112:	9d00      	ldr	r5, [sp, #0]
 8013114:	4631      	mov	r1, r6
 8013116:	4658      	mov	r0, fp
 8013118:	f7ff f99c 	bl	8012454 <quorem>
 801311c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013120:	f805 3b01 	strb.w	r3, [r5], #1
 8013124:	9a00      	ldr	r2, [sp, #0]
 8013126:	1aaa      	subs	r2, r5, r2
 8013128:	4591      	cmp	r9, r2
 801312a:	ddba      	ble.n	80130a2 <_dtoa_r+0xb32>
 801312c:	4659      	mov	r1, fp
 801312e:	2300      	movs	r3, #0
 8013130:	220a      	movs	r2, #10
 8013132:	4620      	mov	r0, r4
 8013134:	f000 f956 	bl	80133e4 <__multadd>
 8013138:	4683      	mov	fp, r0
 801313a:	e7eb      	b.n	8013114 <_dtoa_r+0xba4>
 801313c:	0801ab50 	.word	0x0801ab50
 8013140:	0801aa84 	.word	0x0801aa84
 8013144:	0801aacd 	.word	0x0801aacd

08013148 <__sflush_r>:
 8013148:	898a      	ldrh	r2, [r1, #12]
 801314a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801314e:	4605      	mov	r5, r0
 8013150:	0710      	lsls	r0, r2, #28
 8013152:	460c      	mov	r4, r1
 8013154:	d458      	bmi.n	8013208 <__sflush_r+0xc0>
 8013156:	684b      	ldr	r3, [r1, #4]
 8013158:	2b00      	cmp	r3, #0
 801315a:	dc05      	bgt.n	8013168 <__sflush_r+0x20>
 801315c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801315e:	2b00      	cmp	r3, #0
 8013160:	dc02      	bgt.n	8013168 <__sflush_r+0x20>
 8013162:	2000      	movs	r0, #0
 8013164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801316a:	2e00      	cmp	r6, #0
 801316c:	d0f9      	beq.n	8013162 <__sflush_r+0x1a>
 801316e:	2300      	movs	r3, #0
 8013170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013174:	682f      	ldr	r7, [r5, #0]
 8013176:	602b      	str	r3, [r5, #0]
 8013178:	d032      	beq.n	80131e0 <__sflush_r+0x98>
 801317a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801317c:	89a3      	ldrh	r3, [r4, #12]
 801317e:	075a      	lsls	r2, r3, #29
 8013180:	d505      	bpl.n	801318e <__sflush_r+0x46>
 8013182:	6863      	ldr	r3, [r4, #4]
 8013184:	1ac0      	subs	r0, r0, r3
 8013186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013188:	b10b      	cbz	r3, 801318e <__sflush_r+0x46>
 801318a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801318c:	1ac0      	subs	r0, r0, r3
 801318e:	2300      	movs	r3, #0
 8013190:	4602      	mov	r2, r0
 8013192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013194:	6a21      	ldr	r1, [r4, #32]
 8013196:	4628      	mov	r0, r5
 8013198:	47b0      	blx	r6
 801319a:	1c43      	adds	r3, r0, #1
 801319c:	89a3      	ldrh	r3, [r4, #12]
 801319e:	d106      	bne.n	80131ae <__sflush_r+0x66>
 80131a0:	6829      	ldr	r1, [r5, #0]
 80131a2:	291d      	cmp	r1, #29
 80131a4:	d82c      	bhi.n	8013200 <__sflush_r+0xb8>
 80131a6:	4a2a      	ldr	r2, [pc, #168]	; (8013250 <__sflush_r+0x108>)
 80131a8:	40ca      	lsrs	r2, r1
 80131aa:	07d6      	lsls	r6, r2, #31
 80131ac:	d528      	bpl.n	8013200 <__sflush_r+0xb8>
 80131ae:	2200      	movs	r2, #0
 80131b0:	6062      	str	r2, [r4, #4]
 80131b2:	04d9      	lsls	r1, r3, #19
 80131b4:	6922      	ldr	r2, [r4, #16]
 80131b6:	6022      	str	r2, [r4, #0]
 80131b8:	d504      	bpl.n	80131c4 <__sflush_r+0x7c>
 80131ba:	1c42      	adds	r2, r0, #1
 80131bc:	d101      	bne.n	80131c2 <__sflush_r+0x7a>
 80131be:	682b      	ldr	r3, [r5, #0]
 80131c0:	b903      	cbnz	r3, 80131c4 <__sflush_r+0x7c>
 80131c2:	6560      	str	r0, [r4, #84]	; 0x54
 80131c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131c6:	602f      	str	r7, [r5, #0]
 80131c8:	2900      	cmp	r1, #0
 80131ca:	d0ca      	beq.n	8013162 <__sflush_r+0x1a>
 80131cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131d0:	4299      	cmp	r1, r3
 80131d2:	d002      	beq.n	80131da <__sflush_r+0x92>
 80131d4:	4628      	mov	r0, r5
 80131d6:	f000 fc31 	bl	8013a3c <_free_r>
 80131da:	2000      	movs	r0, #0
 80131dc:	6360      	str	r0, [r4, #52]	; 0x34
 80131de:	e7c1      	b.n	8013164 <__sflush_r+0x1c>
 80131e0:	6a21      	ldr	r1, [r4, #32]
 80131e2:	2301      	movs	r3, #1
 80131e4:	4628      	mov	r0, r5
 80131e6:	47b0      	blx	r6
 80131e8:	1c41      	adds	r1, r0, #1
 80131ea:	d1c7      	bne.n	801317c <__sflush_r+0x34>
 80131ec:	682b      	ldr	r3, [r5, #0]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d0c4      	beq.n	801317c <__sflush_r+0x34>
 80131f2:	2b1d      	cmp	r3, #29
 80131f4:	d001      	beq.n	80131fa <__sflush_r+0xb2>
 80131f6:	2b16      	cmp	r3, #22
 80131f8:	d101      	bne.n	80131fe <__sflush_r+0xb6>
 80131fa:	602f      	str	r7, [r5, #0]
 80131fc:	e7b1      	b.n	8013162 <__sflush_r+0x1a>
 80131fe:	89a3      	ldrh	r3, [r4, #12]
 8013200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013204:	81a3      	strh	r3, [r4, #12]
 8013206:	e7ad      	b.n	8013164 <__sflush_r+0x1c>
 8013208:	690f      	ldr	r7, [r1, #16]
 801320a:	2f00      	cmp	r7, #0
 801320c:	d0a9      	beq.n	8013162 <__sflush_r+0x1a>
 801320e:	0793      	lsls	r3, r2, #30
 8013210:	680e      	ldr	r6, [r1, #0]
 8013212:	bf08      	it	eq
 8013214:	694b      	ldreq	r3, [r1, #20]
 8013216:	600f      	str	r7, [r1, #0]
 8013218:	bf18      	it	ne
 801321a:	2300      	movne	r3, #0
 801321c:	eba6 0807 	sub.w	r8, r6, r7
 8013220:	608b      	str	r3, [r1, #8]
 8013222:	f1b8 0f00 	cmp.w	r8, #0
 8013226:	dd9c      	ble.n	8013162 <__sflush_r+0x1a>
 8013228:	6a21      	ldr	r1, [r4, #32]
 801322a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801322c:	4643      	mov	r3, r8
 801322e:	463a      	mov	r2, r7
 8013230:	4628      	mov	r0, r5
 8013232:	47b0      	blx	r6
 8013234:	2800      	cmp	r0, #0
 8013236:	dc06      	bgt.n	8013246 <__sflush_r+0xfe>
 8013238:	89a3      	ldrh	r3, [r4, #12]
 801323a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801323e:	81a3      	strh	r3, [r4, #12]
 8013240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013244:	e78e      	b.n	8013164 <__sflush_r+0x1c>
 8013246:	4407      	add	r7, r0
 8013248:	eba8 0800 	sub.w	r8, r8, r0
 801324c:	e7e9      	b.n	8013222 <__sflush_r+0xda>
 801324e:	bf00      	nop
 8013250:	20400001 	.word	0x20400001

08013254 <_fflush_r>:
 8013254:	b538      	push	{r3, r4, r5, lr}
 8013256:	690b      	ldr	r3, [r1, #16]
 8013258:	4605      	mov	r5, r0
 801325a:	460c      	mov	r4, r1
 801325c:	b913      	cbnz	r3, 8013264 <_fflush_r+0x10>
 801325e:	2500      	movs	r5, #0
 8013260:	4628      	mov	r0, r5
 8013262:	bd38      	pop	{r3, r4, r5, pc}
 8013264:	b118      	cbz	r0, 801326e <_fflush_r+0x1a>
 8013266:	6983      	ldr	r3, [r0, #24]
 8013268:	b90b      	cbnz	r3, 801326e <_fflush_r+0x1a>
 801326a:	f7fe f9e1 	bl	8011630 <__sinit>
 801326e:	4b14      	ldr	r3, [pc, #80]	; (80132c0 <_fflush_r+0x6c>)
 8013270:	429c      	cmp	r4, r3
 8013272:	d11b      	bne.n	80132ac <_fflush_r+0x58>
 8013274:	686c      	ldr	r4, [r5, #4]
 8013276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d0ef      	beq.n	801325e <_fflush_r+0xa>
 801327e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013280:	07d0      	lsls	r0, r2, #31
 8013282:	d404      	bmi.n	801328e <_fflush_r+0x3a>
 8013284:	0599      	lsls	r1, r3, #22
 8013286:	d402      	bmi.n	801328e <_fflush_r+0x3a>
 8013288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801328a:	f7fe faae 	bl	80117ea <__retarget_lock_acquire_recursive>
 801328e:	4628      	mov	r0, r5
 8013290:	4621      	mov	r1, r4
 8013292:	f7ff ff59 	bl	8013148 <__sflush_r>
 8013296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013298:	07da      	lsls	r2, r3, #31
 801329a:	4605      	mov	r5, r0
 801329c:	d4e0      	bmi.n	8013260 <_fflush_r+0xc>
 801329e:	89a3      	ldrh	r3, [r4, #12]
 80132a0:	059b      	lsls	r3, r3, #22
 80132a2:	d4dd      	bmi.n	8013260 <_fflush_r+0xc>
 80132a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132a6:	f7fe faa1 	bl	80117ec <__retarget_lock_release_recursive>
 80132aa:	e7d9      	b.n	8013260 <_fflush_r+0xc>
 80132ac:	4b05      	ldr	r3, [pc, #20]	; (80132c4 <_fflush_r+0x70>)
 80132ae:	429c      	cmp	r4, r3
 80132b0:	d101      	bne.n	80132b6 <_fflush_r+0x62>
 80132b2:	68ac      	ldr	r4, [r5, #8]
 80132b4:	e7df      	b.n	8013276 <_fflush_r+0x22>
 80132b6:	4b04      	ldr	r3, [pc, #16]	; (80132c8 <_fflush_r+0x74>)
 80132b8:	429c      	cmp	r4, r3
 80132ba:	bf08      	it	eq
 80132bc:	68ec      	ldreq	r4, [r5, #12]
 80132be:	e7da      	b.n	8013276 <_fflush_r+0x22>
 80132c0:	0801aa30 	.word	0x0801aa30
 80132c4:	0801aa50 	.word	0x0801aa50
 80132c8:	0801aa10 	.word	0x0801aa10

080132cc <_localeconv_r>:
 80132cc:	4800      	ldr	r0, [pc, #0]	; (80132d0 <_localeconv_r+0x4>)
 80132ce:	4770      	bx	lr
 80132d0:	20000304 	.word	0x20000304

080132d4 <_lseek_r>:
 80132d4:	b538      	push	{r3, r4, r5, lr}
 80132d6:	4d07      	ldr	r5, [pc, #28]	; (80132f4 <_lseek_r+0x20>)
 80132d8:	4604      	mov	r4, r0
 80132da:	4608      	mov	r0, r1
 80132dc:	4611      	mov	r1, r2
 80132de:	2200      	movs	r2, #0
 80132e0:	602a      	str	r2, [r5, #0]
 80132e2:	461a      	mov	r2, r3
 80132e4:	f7f1 f898 	bl	8004418 <_lseek>
 80132e8:	1c43      	adds	r3, r0, #1
 80132ea:	d102      	bne.n	80132f2 <_lseek_r+0x1e>
 80132ec:	682b      	ldr	r3, [r5, #0]
 80132ee:	b103      	cbz	r3, 80132f2 <_lseek_r+0x1e>
 80132f0:	6023      	str	r3, [r4, #0]
 80132f2:	bd38      	pop	{r3, r4, r5, pc}
 80132f4:	2000ef4c 	.word	0x2000ef4c

080132f8 <malloc>:
 80132f8:	4b02      	ldr	r3, [pc, #8]	; (8013304 <malloc+0xc>)
 80132fa:	4601      	mov	r1, r0
 80132fc:	6818      	ldr	r0, [r3, #0]
 80132fe:	f7fe ba8d 	b.w	801181c <_malloc_r>
 8013302:	bf00      	nop
 8013304:	200001b0 	.word	0x200001b0

08013308 <__malloc_lock>:
 8013308:	4801      	ldr	r0, [pc, #4]	; (8013310 <__malloc_lock+0x8>)
 801330a:	f7fe ba6e 	b.w	80117ea <__retarget_lock_acquire_recursive>
 801330e:	bf00      	nop
 8013310:	2000ef44 	.word	0x2000ef44

08013314 <__malloc_unlock>:
 8013314:	4801      	ldr	r0, [pc, #4]	; (801331c <__malloc_unlock+0x8>)
 8013316:	f7fe ba69 	b.w	80117ec <__retarget_lock_release_recursive>
 801331a:	bf00      	nop
 801331c:	2000ef44 	.word	0x2000ef44

08013320 <_Balloc>:
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013324:	4604      	mov	r4, r0
 8013326:	460d      	mov	r5, r1
 8013328:	b976      	cbnz	r6, 8013348 <_Balloc+0x28>
 801332a:	2010      	movs	r0, #16
 801332c:	f7ff ffe4 	bl	80132f8 <malloc>
 8013330:	4602      	mov	r2, r0
 8013332:	6260      	str	r0, [r4, #36]	; 0x24
 8013334:	b920      	cbnz	r0, 8013340 <_Balloc+0x20>
 8013336:	4b18      	ldr	r3, [pc, #96]	; (8013398 <_Balloc+0x78>)
 8013338:	4818      	ldr	r0, [pc, #96]	; (801339c <_Balloc+0x7c>)
 801333a:	2166      	movs	r1, #102	; 0x66
 801333c:	f000 fd3c 	bl	8013db8 <__assert_func>
 8013340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013344:	6006      	str	r6, [r0, #0]
 8013346:	60c6      	str	r6, [r0, #12]
 8013348:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801334a:	68f3      	ldr	r3, [r6, #12]
 801334c:	b183      	cbz	r3, 8013370 <_Balloc+0x50>
 801334e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013350:	68db      	ldr	r3, [r3, #12]
 8013352:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013356:	b9b8      	cbnz	r0, 8013388 <_Balloc+0x68>
 8013358:	2101      	movs	r1, #1
 801335a:	fa01 f605 	lsl.w	r6, r1, r5
 801335e:	1d72      	adds	r2, r6, #5
 8013360:	0092      	lsls	r2, r2, #2
 8013362:	4620      	mov	r0, r4
 8013364:	f000 fb5a 	bl	8013a1c <_calloc_r>
 8013368:	b160      	cbz	r0, 8013384 <_Balloc+0x64>
 801336a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801336e:	e00e      	b.n	801338e <_Balloc+0x6e>
 8013370:	2221      	movs	r2, #33	; 0x21
 8013372:	2104      	movs	r1, #4
 8013374:	4620      	mov	r0, r4
 8013376:	f000 fb51 	bl	8013a1c <_calloc_r>
 801337a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801337c:	60f0      	str	r0, [r6, #12]
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d1e4      	bne.n	801334e <_Balloc+0x2e>
 8013384:	2000      	movs	r0, #0
 8013386:	bd70      	pop	{r4, r5, r6, pc}
 8013388:	6802      	ldr	r2, [r0, #0]
 801338a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801338e:	2300      	movs	r3, #0
 8013390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013394:	e7f7      	b.n	8013386 <_Balloc+0x66>
 8013396:	bf00      	nop
 8013398:	0801aada 	.word	0x0801aada
 801339c:	0801ab61 	.word	0x0801ab61

080133a0 <_Bfree>:
 80133a0:	b570      	push	{r4, r5, r6, lr}
 80133a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80133a4:	4605      	mov	r5, r0
 80133a6:	460c      	mov	r4, r1
 80133a8:	b976      	cbnz	r6, 80133c8 <_Bfree+0x28>
 80133aa:	2010      	movs	r0, #16
 80133ac:	f7ff ffa4 	bl	80132f8 <malloc>
 80133b0:	4602      	mov	r2, r0
 80133b2:	6268      	str	r0, [r5, #36]	; 0x24
 80133b4:	b920      	cbnz	r0, 80133c0 <_Bfree+0x20>
 80133b6:	4b09      	ldr	r3, [pc, #36]	; (80133dc <_Bfree+0x3c>)
 80133b8:	4809      	ldr	r0, [pc, #36]	; (80133e0 <_Bfree+0x40>)
 80133ba:	218a      	movs	r1, #138	; 0x8a
 80133bc:	f000 fcfc 	bl	8013db8 <__assert_func>
 80133c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80133c4:	6006      	str	r6, [r0, #0]
 80133c6:	60c6      	str	r6, [r0, #12]
 80133c8:	b13c      	cbz	r4, 80133da <_Bfree+0x3a>
 80133ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80133cc:	6862      	ldr	r2, [r4, #4]
 80133ce:	68db      	ldr	r3, [r3, #12]
 80133d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80133d4:	6021      	str	r1, [r4, #0]
 80133d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80133da:	bd70      	pop	{r4, r5, r6, pc}
 80133dc:	0801aada 	.word	0x0801aada
 80133e0:	0801ab61 	.word	0x0801ab61

080133e4 <__multadd>:
 80133e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133e8:	690e      	ldr	r6, [r1, #16]
 80133ea:	4607      	mov	r7, r0
 80133ec:	4698      	mov	r8, r3
 80133ee:	460c      	mov	r4, r1
 80133f0:	f101 0014 	add.w	r0, r1, #20
 80133f4:	2300      	movs	r3, #0
 80133f6:	6805      	ldr	r5, [r0, #0]
 80133f8:	b2a9      	uxth	r1, r5
 80133fa:	fb02 8101 	mla	r1, r2, r1, r8
 80133fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013402:	0c2d      	lsrs	r5, r5, #16
 8013404:	fb02 c505 	mla	r5, r2, r5, ip
 8013408:	b289      	uxth	r1, r1
 801340a:	3301      	adds	r3, #1
 801340c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013410:	429e      	cmp	r6, r3
 8013412:	f840 1b04 	str.w	r1, [r0], #4
 8013416:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801341a:	dcec      	bgt.n	80133f6 <__multadd+0x12>
 801341c:	f1b8 0f00 	cmp.w	r8, #0
 8013420:	d022      	beq.n	8013468 <__multadd+0x84>
 8013422:	68a3      	ldr	r3, [r4, #8]
 8013424:	42b3      	cmp	r3, r6
 8013426:	dc19      	bgt.n	801345c <__multadd+0x78>
 8013428:	6861      	ldr	r1, [r4, #4]
 801342a:	4638      	mov	r0, r7
 801342c:	3101      	adds	r1, #1
 801342e:	f7ff ff77 	bl	8013320 <_Balloc>
 8013432:	4605      	mov	r5, r0
 8013434:	b928      	cbnz	r0, 8013442 <__multadd+0x5e>
 8013436:	4602      	mov	r2, r0
 8013438:	4b0d      	ldr	r3, [pc, #52]	; (8013470 <__multadd+0x8c>)
 801343a:	480e      	ldr	r0, [pc, #56]	; (8013474 <__multadd+0x90>)
 801343c:	21b5      	movs	r1, #181	; 0xb5
 801343e:	f000 fcbb 	bl	8013db8 <__assert_func>
 8013442:	6922      	ldr	r2, [r4, #16]
 8013444:	3202      	adds	r2, #2
 8013446:	f104 010c 	add.w	r1, r4, #12
 801344a:	0092      	lsls	r2, r2, #2
 801344c:	300c      	adds	r0, #12
 801344e:	f7fe f9ce 	bl	80117ee <memcpy>
 8013452:	4621      	mov	r1, r4
 8013454:	4638      	mov	r0, r7
 8013456:	f7ff ffa3 	bl	80133a0 <_Bfree>
 801345a:	462c      	mov	r4, r5
 801345c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013460:	3601      	adds	r6, #1
 8013462:	f8c3 8014 	str.w	r8, [r3, #20]
 8013466:	6126      	str	r6, [r4, #16]
 8013468:	4620      	mov	r0, r4
 801346a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801346e:	bf00      	nop
 8013470:	0801ab50 	.word	0x0801ab50
 8013474:	0801ab61 	.word	0x0801ab61

08013478 <__hi0bits>:
 8013478:	0c03      	lsrs	r3, r0, #16
 801347a:	041b      	lsls	r3, r3, #16
 801347c:	b9d3      	cbnz	r3, 80134b4 <__hi0bits+0x3c>
 801347e:	0400      	lsls	r0, r0, #16
 8013480:	2310      	movs	r3, #16
 8013482:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013486:	bf04      	itt	eq
 8013488:	0200      	lsleq	r0, r0, #8
 801348a:	3308      	addeq	r3, #8
 801348c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013490:	bf04      	itt	eq
 8013492:	0100      	lsleq	r0, r0, #4
 8013494:	3304      	addeq	r3, #4
 8013496:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801349a:	bf04      	itt	eq
 801349c:	0080      	lsleq	r0, r0, #2
 801349e:	3302      	addeq	r3, #2
 80134a0:	2800      	cmp	r0, #0
 80134a2:	db05      	blt.n	80134b0 <__hi0bits+0x38>
 80134a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80134a8:	f103 0301 	add.w	r3, r3, #1
 80134ac:	bf08      	it	eq
 80134ae:	2320      	moveq	r3, #32
 80134b0:	4618      	mov	r0, r3
 80134b2:	4770      	bx	lr
 80134b4:	2300      	movs	r3, #0
 80134b6:	e7e4      	b.n	8013482 <__hi0bits+0xa>

080134b8 <__lo0bits>:
 80134b8:	6803      	ldr	r3, [r0, #0]
 80134ba:	f013 0207 	ands.w	r2, r3, #7
 80134be:	4601      	mov	r1, r0
 80134c0:	d00b      	beq.n	80134da <__lo0bits+0x22>
 80134c2:	07da      	lsls	r2, r3, #31
 80134c4:	d424      	bmi.n	8013510 <__lo0bits+0x58>
 80134c6:	0798      	lsls	r0, r3, #30
 80134c8:	bf49      	itett	mi
 80134ca:	085b      	lsrmi	r3, r3, #1
 80134cc:	089b      	lsrpl	r3, r3, #2
 80134ce:	2001      	movmi	r0, #1
 80134d0:	600b      	strmi	r3, [r1, #0]
 80134d2:	bf5c      	itt	pl
 80134d4:	600b      	strpl	r3, [r1, #0]
 80134d6:	2002      	movpl	r0, #2
 80134d8:	4770      	bx	lr
 80134da:	b298      	uxth	r0, r3
 80134dc:	b9b0      	cbnz	r0, 801350c <__lo0bits+0x54>
 80134de:	0c1b      	lsrs	r3, r3, #16
 80134e0:	2010      	movs	r0, #16
 80134e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80134e6:	bf04      	itt	eq
 80134e8:	0a1b      	lsreq	r3, r3, #8
 80134ea:	3008      	addeq	r0, #8
 80134ec:	071a      	lsls	r2, r3, #28
 80134ee:	bf04      	itt	eq
 80134f0:	091b      	lsreq	r3, r3, #4
 80134f2:	3004      	addeq	r0, #4
 80134f4:	079a      	lsls	r2, r3, #30
 80134f6:	bf04      	itt	eq
 80134f8:	089b      	lsreq	r3, r3, #2
 80134fa:	3002      	addeq	r0, #2
 80134fc:	07da      	lsls	r2, r3, #31
 80134fe:	d403      	bmi.n	8013508 <__lo0bits+0x50>
 8013500:	085b      	lsrs	r3, r3, #1
 8013502:	f100 0001 	add.w	r0, r0, #1
 8013506:	d005      	beq.n	8013514 <__lo0bits+0x5c>
 8013508:	600b      	str	r3, [r1, #0]
 801350a:	4770      	bx	lr
 801350c:	4610      	mov	r0, r2
 801350e:	e7e8      	b.n	80134e2 <__lo0bits+0x2a>
 8013510:	2000      	movs	r0, #0
 8013512:	4770      	bx	lr
 8013514:	2020      	movs	r0, #32
 8013516:	4770      	bx	lr

08013518 <__i2b>:
 8013518:	b510      	push	{r4, lr}
 801351a:	460c      	mov	r4, r1
 801351c:	2101      	movs	r1, #1
 801351e:	f7ff feff 	bl	8013320 <_Balloc>
 8013522:	4602      	mov	r2, r0
 8013524:	b928      	cbnz	r0, 8013532 <__i2b+0x1a>
 8013526:	4b05      	ldr	r3, [pc, #20]	; (801353c <__i2b+0x24>)
 8013528:	4805      	ldr	r0, [pc, #20]	; (8013540 <__i2b+0x28>)
 801352a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801352e:	f000 fc43 	bl	8013db8 <__assert_func>
 8013532:	2301      	movs	r3, #1
 8013534:	6144      	str	r4, [r0, #20]
 8013536:	6103      	str	r3, [r0, #16]
 8013538:	bd10      	pop	{r4, pc}
 801353a:	bf00      	nop
 801353c:	0801ab50 	.word	0x0801ab50
 8013540:	0801ab61 	.word	0x0801ab61

08013544 <__multiply>:
 8013544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013548:	4614      	mov	r4, r2
 801354a:	690a      	ldr	r2, [r1, #16]
 801354c:	6923      	ldr	r3, [r4, #16]
 801354e:	429a      	cmp	r2, r3
 8013550:	bfb8      	it	lt
 8013552:	460b      	movlt	r3, r1
 8013554:	460d      	mov	r5, r1
 8013556:	bfbc      	itt	lt
 8013558:	4625      	movlt	r5, r4
 801355a:	461c      	movlt	r4, r3
 801355c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013560:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013564:	68ab      	ldr	r3, [r5, #8]
 8013566:	6869      	ldr	r1, [r5, #4]
 8013568:	eb0a 0709 	add.w	r7, sl, r9
 801356c:	42bb      	cmp	r3, r7
 801356e:	b085      	sub	sp, #20
 8013570:	bfb8      	it	lt
 8013572:	3101      	addlt	r1, #1
 8013574:	f7ff fed4 	bl	8013320 <_Balloc>
 8013578:	b930      	cbnz	r0, 8013588 <__multiply+0x44>
 801357a:	4602      	mov	r2, r0
 801357c:	4b42      	ldr	r3, [pc, #264]	; (8013688 <__multiply+0x144>)
 801357e:	4843      	ldr	r0, [pc, #268]	; (801368c <__multiply+0x148>)
 8013580:	f240 115d 	movw	r1, #349	; 0x15d
 8013584:	f000 fc18 	bl	8013db8 <__assert_func>
 8013588:	f100 0614 	add.w	r6, r0, #20
 801358c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013590:	4633      	mov	r3, r6
 8013592:	2200      	movs	r2, #0
 8013594:	4543      	cmp	r3, r8
 8013596:	d31e      	bcc.n	80135d6 <__multiply+0x92>
 8013598:	f105 0c14 	add.w	ip, r5, #20
 801359c:	f104 0314 	add.w	r3, r4, #20
 80135a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80135a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80135a8:	9202      	str	r2, [sp, #8]
 80135aa:	ebac 0205 	sub.w	r2, ip, r5
 80135ae:	3a15      	subs	r2, #21
 80135b0:	f022 0203 	bic.w	r2, r2, #3
 80135b4:	3204      	adds	r2, #4
 80135b6:	f105 0115 	add.w	r1, r5, #21
 80135ba:	458c      	cmp	ip, r1
 80135bc:	bf38      	it	cc
 80135be:	2204      	movcc	r2, #4
 80135c0:	9201      	str	r2, [sp, #4]
 80135c2:	9a02      	ldr	r2, [sp, #8]
 80135c4:	9303      	str	r3, [sp, #12]
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d808      	bhi.n	80135dc <__multiply+0x98>
 80135ca:	2f00      	cmp	r7, #0
 80135cc:	dc55      	bgt.n	801367a <__multiply+0x136>
 80135ce:	6107      	str	r7, [r0, #16]
 80135d0:	b005      	add	sp, #20
 80135d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135d6:	f843 2b04 	str.w	r2, [r3], #4
 80135da:	e7db      	b.n	8013594 <__multiply+0x50>
 80135dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80135e0:	f1ba 0f00 	cmp.w	sl, #0
 80135e4:	d020      	beq.n	8013628 <__multiply+0xe4>
 80135e6:	f105 0e14 	add.w	lr, r5, #20
 80135ea:	46b1      	mov	r9, r6
 80135ec:	2200      	movs	r2, #0
 80135ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 80135f2:	f8d9 b000 	ldr.w	fp, [r9]
 80135f6:	b2a1      	uxth	r1, r4
 80135f8:	fa1f fb8b 	uxth.w	fp, fp
 80135fc:	fb0a b101 	mla	r1, sl, r1, fp
 8013600:	4411      	add	r1, r2
 8013602:	f8d9 2000 	ldr.w	r2, [r9]
 8013606:	0c24      	lsrs	r4, r4, #16
 8013608:	0c12      	lsrs	r2, r2, #16
 801360a:	fb0a 2404 	mla	r4, sl, r4, r2
 801360e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013612:	b289      	uxth	r1, r1
 8013614:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013618:	45f4      	cmp	ip, lr
 801361a:	f849 1b04 	str.w	r1, [r9], #4
 801361e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013622:	d8e4      	bhi.n	80135ee <__multiply+0xaa>
 8013624:	9901      	ldr	r1, [sp, #4]
 8013626:	5072      	str	r2, [r6, r1]
 8013628:	9a03      	ldr	r2, [sp, #12]
 801362a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801362e:	3304      	adds	r3, #4
 8013630:	f1b9 0f00 	cmp.w	r9, #0
 8013634:	d01f      	beq.n	8013676 <__multiply+0x132>
 8013636:	6834      	ldr	r4, [r6, #0]
 8013638:	f105 0114 	add.w	r1, r5, #20
 801363c:	46b6      	mov	lr, r6
 801363e:	f04f 0a00 	mov.w	sl, #0
 8013642:	880a      	ldrh	r2, [r1, #0]
 8013644:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013648:	fb09 b202 	mla	r2, r9, r2, fp
 801364c:	4492      	add	sl, r2
 801364e:	b2a4      	uxth	r4, r4
 8013650:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013654:	f84e 4b04 	str.w	r4, [lr], #4
 8013658:	f851 4b04 	ldr.w	r4, [r1], #4
 801365c:	f8be 2000 	ldrh.w	r2, [lr]
 8013660:	0c24      	lsrs	r4, r4, #16
 8013662:	fb09 2404 	mla	r4, r9, r4, r2
 8013666:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801366a:	458c      	cmp	ip, r1
 801366c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013670:	d8e7      	bhi.n	8013642 <__multiply+0xfe>
 8013672:	9a01      	ldr	r2, [sp, #4]
 8013674:	50b4      	str	r4, [r6, r2]
 8013676:	3604      	adds	r6, #4
 8013678:	e7a3      	b.n	80135c2 <__multiply+0x7e>
 801367a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801367e:	2b00      	cmp	r3, #0
 8013680:	d1a5      	bne.n	80135ce <__multiply+0x8a>
 8013682:	3f01      	subs	r7, #1
 8013684:	e7a1      	b.n	80135ca <__multiply+0x86>
 8013686:	bf00      	nop
 8013688:	0801ab50 	.word	0x0801ab50
 801368c:	0801ab61 	.word	0x0801ab61

08013690 <__pow5mult>:
 8013690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013694:	4615      	mov	r5, r2
 8013696:	f012 0203 	ands.w	r2, r2, #3
 801369a:	4606      	mov	r6, r0
 801369c:	460f      	mov	r7, r1
 801369e:	d007      	beq.n	80136b0 <__pow5mult+0x20>
 80136a0:	4c25      	ldr	r4, [pc, #148]	; (8013738 <__pow5mult+0xa8>)
 80136a2:	3a01      	subs	r2, #1
 80136a4:	2300      	movs	r3, #0
 80136a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80136aa:	f7ff fe9b 	bl	80133e4 <__multadd>
 80136ae:	4607      	mov	r7, r0
 80136b0:	10ad      	asrs	r5, r5, #2
 80136b2:	d03d      	beq.n	8013730 <__pow5mult+0xa0>
 80136b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80136b6:	b97c      	cbnz	r4, 80136d8 <__pow5mult+0x48>
 80136b8:	2010      	movs	r0, #16
 80136ba:	f7ff fe1d 	bl	80132f8 <malloc>
 80136be:	4602      	mov	r2, r0
 80136c0:	6270      	str	r0, [r6, #36]	; 0x24
 80136c2:	b928      	cbnz	r0, 80136d0 <__pow5mult+0x40>
 80136c4:	4b1d      	ldr	r3, [pc, #116]	; (801373c <__pow5mult+0xac>)
 80136c6:	481e      	ldr	r0, [pc, #120]	; (8013740 <__pow5mult+0xb0>)
 80136c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80136cc:	f000 fb74 	bl	8013db8 <__assert_func>
 80136d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136d4:	6004      	str	r4, [r0, #0]
 80136d6:	60c4      	str	r4, [r0, #12]
 80136d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80136dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136e0:	b94c      	cbnz	r4, 80136f6 <__pow5mult+0x66>
 80136e2:	f240 2171 	movw	r1, #625	; 0x271
 80136e6:	4630      	mov	r0, r6
 80136e8:	f7ff ff16 	bl	8013518 <__i2b>
 80136ec:	2300      	movs	r3, #0
 80136ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80136f2:	4604      	mov	r4, r0
 80136f4:	6003      	str	r3, [r0, #0]
 80136f6:	f04f 0900 	mov.w	r9, #0
 80136fa:	07eb      	lsls	r3, r5, #31
 80136fc:	d50a      	bpl.n	8013714 <__pow5mult+0x84>
 80136fe:	4639      	mov	r1, r7
 8013700:	4622      	mov	r2, r4
 8013702:	4630      	mov	r0, r6
 8013704:	f7ff ff1e 	bl	8013544 <__multiply>
 8013708:	4639      	mov	r1, r7
 801370a:	4680      	mov	r8, r0
 801370c:	4630      	mov	r0, r6
 801370e:	f7ff fe47 	bl	80133a0 <_Bfree>
 8013712:	4647      	mov	r7, r8
 8013714:	106d      	asrs	r5, r5, #1
 8013716:	d00b      	beq.n	8013730 <__pow5mult+0xa0>
 8013718:	6820      	ldr	r0, [r4, #0]
 801371a:	b938      	cbnz	r0, 801372c <__pow5mult+0x9c>
 801371c:	4622      	mov	r2, r4
 801371e:	4621      	mov	r1, r4
 8013720:	4630      	mov	r0, r6
 8013722:	f7ff ff0f 	bl	8013544 <__multiply>
 8013726:	6020      	str	r0, [r4, #0]
 8013728:	f8c0 9000 	str.w	r9, [r0]
 801372c:	4604      	mov	r4, r0
 801372e:	e7e4      	b.n	80136fa <__pow5mult+0x6a>
 8013730:	4638      	mov	r0, r7
 8013732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013736:	bf00      	nop
 8013738:	0801acb8 	.word	0x0801acb8
 801373c:	0801aada 	.word	0x0801aada
 8013740:	0801ab61 	.word	0x0801ab61

08013744 <__lshift>:
 8013744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013748:	460c      	mov	r4, r1
 801374a:	6849      	ldr	r1, [r1, #4]
 801374c:	6923      	ldr	r3, [r4, #16]
 801374e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013752:	68a3      	ldr	r3, [r4, #8]
 8013754:	4607      	mov	r7, r0
 8013756:	4691      	mov	r9, r2
 8013758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801375c:	f108 0601 	add.w	r6, r8, #1
 8013760:	42b3      	cmp	r3, r6
 8013762:	db0b      	blt.n	801377c <__lshift+0x38>
 8013764:	4638      	mov	r0, r7
 8013766:	f7ff fddb 	bl	8013320 <_Balloc>
 801376a:	4605      	mov	r5, r0
 801376c:	b948      	cbnz	r0, 8013782 <__lshift+0x3e>
 801376e:	4602      	mov	r2, r0
 8013770:	4b28      	ldr	r3, [pc, #160]	; (8013814 <__lshift+0xd0>)
 8013772:	4829      	ldr	r0, [pc, #164]	; (8013818 <__lshift+0xd4>)
 8013774:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013778:	f000 fb1e 	bl	8013db8 <__assert_func>
 801377c:	3101      	adds	r1, #1
 801377e:	005b      	lsls	r3, r3, #1
 8013780:	e7ee      	b.n	8013760 <__lshift+0x1c>
 8013782:	2300      	movs	r3, #0
 8013784:	f100 0114 	add.w	r1, r0, #20
 8013788:	f100 0210 	add.w	r2, r0, #16
 801378c:	4618      	mov	r0, r3
 801378e:	4553      	cmp	r3, sl
 8013790:	db33      	blt.n	80137fa <__lshift+0xb6>
 8013792:	6920      	ldr	r0, [r4, #16]
 8013794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013798:	f104 0314 	add.w	r3, r4, #20
 801379c:	f019 091f 	ands.w	r9, r9, #31
 80137a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80137a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80137a8:	d02b      	beq.n	8013802 <__lshift+0xbe>
 80137aa:	f1c9 0e20 	rsb	lr, r9, #32
 80137ae:	468a      	mov	sl, r1
 80137b0:	2200      	movs	r2, #0
 80137b2:	6818      	ldr	r0, [r3, #0]
 80137b4:	fa00 f009 	lsl.w	r0, r0, r9
 80137b8:	4302      	orrs	r2, r0
 80137ba:	f84a 2b04 	str.w	r2, [sl], #4
 80137be:	f853 2b04 	ldr.w	r2, [r3], #4
 80137c2:	459c      	cmp	ip, r3
 80137c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80137c8:	d8f3      	bhi.n	80137b2 <__lshift+0x6e>
 80137ca:	ebac 0304 	sub.w	r3, ip, r4
 80137ce:	3b15      	subs	r3, #21
 80137d0:	f023 0303 	bic.w	r3, r3, #3
 80137d4:	3304      	adds	r3, #4
 80137d6:	f104 0015 	add.w	r0, r4, #21
 80137da:	4584      	cmp	ip, r0
 80137dc:	bf38      	it	cc
 80137de:	2304      	movcc	r3, #4
 80137e0:	50ca      	str	r2, [r1, r3]
 80137e2:	b10a      	cbz	r2, 80137e8 <__lshift+0xa4>
 80137e4:	f108 0602 	add.w	r6, r8, #2
 80137e8:	3e01      	subs	r6, #1
 80137ea:	4638      	mov	r0, r7
 80137ec:	612e      	str	r6, [r5, #16]
 80137ee:	4621      	mov	r1, r4
 80137f0:	f7ff fdd6 	bl	80133a0 <_Bfree>
 80137f4:	4628      	mov	r0, r5
 80137f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80137fe:	3301      	adds	r3, #1
 8013800:	e7c5      	b.n	801378e <__lshift+0x4a>
 8013802:	3904      	subs	r1, #4
 8013804:	f853 2b04 	ldr.w	r2, [r3], #4
 8013808:	f841 2f04 	str.w	r2, [r1, #4]!
 801380c:	459c      	cmp	ip, r3
 801380e:	d8f9      	bhi.n	8013804 <__lshift+0xc0>
 8013810:	e7ea      	b.n	80137e8 <__lshift+0xa4>
 8013812:	bf00      	nop
 8013814:	0801ab50 	.word	0x0801ab50
 8013818:	0801ab61 	.word	0x0801ab61

0801381c <__mcmp>:
 801381c:	b530      	push	{r4, r5, lr}
 801381e:	6902      	ldr	r2, [r0, #16]
 8013820:	690c      	ldr	r4, [r1, #16]
 8013822:	1b12      	subs	r2, r2, r4
 8013824:	d10e      	bne.n	8013844 <__mcmp+0x28>
 8013826:	f100 0314 	add.w	r3, r0, #20
 801382a:	3114      	adds	r1, #20
 801382c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013830:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013834:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013838:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801383c:	42a5      	cmp	r5, r4
 801383e:	d003      	beq.n	8013848 <__mcmp+0x2c>
 8013840:	d305      	bcc.n	801384e <__mcmp+0x32>
 8013842:	2201      	movs	r2, #1
 8013844:	4610      	mov	r0, r2
 8013846:	bd30      	pop	{r4, r5, pc}
 8013848:	4283      	cmp	r3, r0
 801384a:	d3f3      	bcc.n	8013834 <__mcmp+0x18>
 801384c:	e7fa      	b.n	8013844 <__mcmp+0x28>
 801384e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013852:	e7f7      	b.n	8013844 <__mcmp+0x28>

08013854 <__mdiff>:
 8013854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013858:	460c      	mov	r4, r1
 801385a:	4606      	mov	r6, r0
 801385c:	4611      	mov	r1, r2
 801385e:	4620      	mov	r0, r4
 8013860:	4617      	mov	r7, r2
 8013862:	f7ff ffdb 	bl	801381c <__mcmp>
 8013866:	1e05      	subs	r5, r0, #0
 8013868:	d110      	bne.n	801388c <__mdiff+0x38>
 801386a:	4629      	mov	r1, r5
 801386c:	4630      	mov	r0, r6
 801386e:	f7ff fd57 	bl	8013320 <_Balloc>
 8013872:	b930      	cbnz	r0, 8013882 <__mdiff+0x2e>
 8013874:	4b39      	ldr	r3, [pc, #228]	; (801395c <__mdiff+0x108>)
 8013876:	4602      	mov	r2, r0
 8013878:	f240 2132 	movw	r1, #562	; 0x232
 801387c:	4838      	ldr	r0, [pc, #224]	; (8013960 <__mdiff+0x10c>)
 801387e:	f000 fa9b 	bl	8013db8 <__assert_func>
 8013882:	2301      	movs	r3, #1
 8013884:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801388c:	bfa4      	itt	ge
 801388e:	463b      	movge	r3, r7
 8013890:	4627      	movge	r7, r4
 8013892:	4630      	mov	r0, r6
 8013894:	6879      	ldr	r1, [r7, #4]
 8013896:	bfa6      	itte	ge
 8013898:	461c      	movge	r4, r3
 801389a:	2500      	movge	r5, #0
 801389c:	2501      	movlt	r5, #1
 801389e:	f7ff fd3f 	bl	8013320 <_Balloc>
 80138a2:	b920      	cbnz	r0, 80138ae <__mdiff+0x5a>
 80138a4:	4b2d      	ldr	r3, [pc, #180]	; (801395c <__mdiff+0x108>)
 80138a6:	4602      	mov	r2, r0
 80138a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80138ac:	e7e6      	b.n	801387c <__mdiff+0x28>
 80138ae:	693e      	ldr	r6, [r7, #16]
 80138b0:	60c5      	str	r5, [r0, #12]
 80138b2:	6925      	ldr	r5, [r4, #16]
 80138b4:	f107 0114 	add.w	r1, r7, #20
 80138b8:	f104 0914 	add.w	r9, r4, #20
 80138bc:	f100 0e14 	add.w	lr, r0, #20
 80138c0:	f107 0210 	add.w	r2, r7, #16
 80138c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80138c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80138cc:	46f2      	mov	sl, lr
 80138ce:	2700      	movs	r7, #0
 80138d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80138d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80138d8:	fa1f f883 	uxth.w	r8, r3
 80138dc:	fa17 f78b 	uxtah	r7, r7, fp
 80138e0:	0c1b      	lsrs	r3, r3, #16
 80138e2:	eba7 0808 	sub.w	r8, r7, r8
 80138e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80138ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80138ee:	fa1f f888 	uxth.w	r8, r8
 80138f2:	141f      	asrs	r7, r3, #16
 80138f4:	454d      	cmp	r5, r9
 80138f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80138fa:	f84a 3b04 	str.w	r3, [sl], #4
 80138fe:	d8e7      	bhi.n	80138d0 <__mdiff+0x7c>
 8013900:	1b2b      	subs	r3, r5, r4
 8013902:	3b15      	subs	r3, #21
 8013904:	f023 0303 	bic.w	r3, r3, #3
 8013908:	3304      	adds	r3, #4
 801390a:	3415      	adds	r4, #21
 801390c:	42a5      	cmp	r5, r4
 801390e:	bf38      	it	cc
 8013910:	2304      	movcc	r3, #4
 8013912:	4419      	add	r1, r3
 8013914:	4473      	add	r3, lr
 8013916:	469e      	mov	lr, r3
 8013918:	460d      	mov	r5, r1
 801391a:	4565      	cmp	r5, ip
 801391c:	d30e      	bcc.n	801393c <__mdiff+0xe8>
 801391e:	f10c 0203 	add.w	r2, ip, #3
 8013922:	1a52      	subs	r2, r2, r1
 8013924:	f022 0203 	bic.w	r2, r2, #3
 8013928:	3903      	subs	r1, #3
 801392a:	458c      	cmp	ip, r1
 801392c:	bf38      	it	cc
 801392e:	2200      	movcc	r2, #0
 8013930:	441a      	add	r2, r3
 8013932:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013936:	b17b      	cbz	r3, 8013958 <__mdiff+0x104>
 8013938:	6106      	str	r6, [r0, #16]
 801393a:	e7a5      	b.n	8013888 <__mdiff+0x34>
 801393c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013940:	fa17 f488 	uxtah	r4, r7, r8
 8013944:	1422      	asrs	r2, r4, #16
 8013946:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801394a:	b2a4      	uxth	r4, r4
 801394c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013950:	f84e 4b04 	str.w	r4, [lr], #4
 8013954:	1417      	asrs	r7, r2, #16
 8013956:	e7e0      	b.n	801391a <__mdiff+0xc6>
 8013958:	3e01      	subs	r6, #1
 801395a:	e7ea      	b.n	8013932 <__mdiff+0xde>
 801395c:	0801ab50 	.word	0x0801ab50
 8013960:	0801ab61 	.word	0x0801ab61

08013964 <__d2b>:
 8013964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013968:	4689      	mov	r9, r1
 801396a:	2101      	movs	r1, #1
 801396c:	ec57 6b10 	vmov	r6, r7, d0
 8013970:	4690      	mov	r8, r2
 8013972:	f7ff fcd5 	bl	8013320 <_Balloc>
 8013976:	4604      	mov	r4, r0
 8013978:	b930      	cbnz	r0, 8013988 <__d2b+0x24>
 801397a:	4602      	mov	r2, r0
 801397c:	4b25      	ldr	r3, [pc, #148]	; (8013a14 <__d2b+0xb0>)
 801397e:	4826      	ldr	r0, [pc, #152]	; (8013a18 <__d2b+0xb4>)
 8013980:	f240 310a 	movw	r1, #778	; 0x30a
 8013984:	f000 fa18 	bl	8013db8 <__assert_func>
 8013988:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801398c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013990:	bb35      	cbnz	r5, 80139e0 <__d2b+0x7c>
 8013992:	2e00      	cmp	r6, #0
 8013994:	9301      	str	r3, [sp, #4]
 8013996:	d028      	beq.n	80139ea <__d2b+0x86>
 8013998:	4668      	mov	r0, sp
 801399a:	9600      	str	r6, [sp, #0]
 801399c:	f7ff fd8c 	bl	80134b8 <__lo0bits>
 80139a0:	9900      	ldr	r1, [sp, #0]
 80139a2:	b300      	cbz	r0, 80139e6 <__d2b+0x82>
 80139a4:	9a01      	ldr	r2, [sp, #4]
 80139a6:	f1c0 0320 	rsb	r3, r0, #32
 80139aa:	fa02 f303 	lsl.w	r3, r2, r3
 80139ae:	430b      	orrs	r3, r1
 80139b0:	40c2      	lsrs	r2, r0
 80139b2:	6163      	str	r3, [r4, #20]
 80139b4:	9201      	str	r2, [sp, #4]
 80139b6:	9b01      	ldr	r3, [sp, #4]
 80139b8:	61a3      	str	r3, [r4, #24]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	bf14      	ite	ne
 80139be:	2202      	movne	r2, #2
 80139c0:	2201      	moveq	r2, #1
 80139c2:	6122      	str	r2, [r4, #16]
 80139c4:	b1d5      	cbz	r5, 80139fc <__d2b+0x98>
 80139c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80139ca:	4405      	add	r5, r0
 80139cc:	f8c9 5000 	str.w	r5, [r9]
 80139d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80139d4:	f8c8 0000 	str.w	r0, [r8]
 80139d8:	4620      	mov	r0, r4
 80139da:	b003      	add	sp, #12
 80139dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80139e4:	e7d5      	b.n	8013992 <__d2b+0x2e>
 80139e6:	6161      	str	r1, [r4, #20]
 80139e8:	e7e5      	b.n	80139b6 <__d2b+0x52>
 80139ea:	a801      	add	r0, sp, #4
 80139ec:	f7ff fd64 	bl	80134b8 <__lo0bits>
 80139f0:	9b01      	ldr	r3, [sp, #4]
 80139f2:	6163      	str	r3, [r4, #20]
 80139f4:	2201      	movs	r2, #1
 80139f6:	6122      	str	r2, [r4, #16]
 80139f8:	3020      	adds	r0, #32
 80139fa:	e7e3      	b.n	80139c4 <__d2b+0x60>
 80139fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013a00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013a04:	f8c9 0000 	str.w	r0, [r9]
 8013a08:	6918      	ldr	r0, [r3, #16]
 8013a0a:	f7ff fd35 	bl	8013478 <__hi0bits>
 8013a0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013a12:	e7df      	b.n	80139d4 <__d2b+0x70>
 8013a14:	0801ab50 	.word	0x0801ab50
 8013a18:	0801ab61 	.word	0x0801ab61

08013a1c <_calloc_r>:
 8013a1c:	b513      	push	{r0, r1, r4, lr}
 8013a1e:	434a      	muls	r2, r1
 8013a20:	4611      	mov	r1, r2
 8013a22:	9201      	str	r2, [sp, #4]
 8013a24:	f7fd fefa 	bl	801181c <_malloc_r>
 8013a28:	4604      	mov	r4, r0
 8013a2a:	b118      	cbz	r0, 8013a34 <_calloc_r+0x18>
 8013a2c:	9a01      	ldr	r2, [sp, #4]
 8013a2e:	2100      	movs	r1, #0
 8013a30:	f7fd feeb 	bl	801180a <memset>
 8013a34:	4620      	mov	r0, r4
 8013a36:	b002      	add	sp, #8
 8013a38:	bd10      	pop	{r4, pc}
	...

08013a3c <_free_r>:
 8013a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013a3e:	2900      	cmp	r1, #0
 8013a40:	d048      	beq.n	8013ad4 <_free_r+0x98>
 8013a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a46:	9001      	str	r0, [sp, #4]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8013a4e:	bfb8      	it	lt
 8013a50:	18e4      	addlt	r4, r4, r3
 8013a52:	f7ff fc59 	bl	8013308 <__malloc_lock>
 8013a56:	4a20      	ldr	r2, [pc, #128]	; (8013ad8 <_free_r+0x9c>)
 8013a58:	9801      	ldr	r0, [sp, #4]
 8013a5a:	6813      	ldr	r3, [r2, #0]
 8013a5c:	4615      	mov	r5, r2
 8013a5e:	b933      	cbnz	r3, 8013a6e <_free_r+0x32>
 8013a60:	6063      	str	r3, [r4, #4]
 8013a62:	6014      	str	r4, [r2, #0]
 8013a64:	b003      	add	sp, #12
 8013a66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a6a:	f7ff bc53 	b.w	8013314 <__malloc_unlock>
 8013a6e:	42a3      	cmp	r3, r4
 8013a70:	d90b      	bls.n	8013a8a <_free_r+0x4e>
 8013a72:	6821      	ldr	r1, [r4, #0]
 8013a74:	1862      	adds	r2, r4, r1
 8013a76:	4293      	cmp	r3, r2
 8013a78:	bf04      	itt	eq
 8013a7a:	681a      	ldreq	r2, [r3, #0]
 8013a7c:	685b      	ldreq	r3, [r3, #4]
 8013a7e:	6063      	str	r3, [r4, #4]
 8013a80:	bf04      	itt	eq
 8013a82:	1852      	addeq	r2, r2, r1
 8013a84:	6022      	streq	r2, [r4, #0]
 8013a86:	602c      	str	r4, [r5, #0]
 8013a88:	e7ec      	b.n	8013a64 <_free_r+0x28>
 8013a8a:	461a      	mov	r2, r3
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	b10b      	cbz	r3, 8013a94 <_free_r+0x58>
 8013a90:	42a3      	cmp	r3, r4
 8013a92:	d9fa      	bls.n	8013a8a <_free_r+0x4e>
 8013a94:	6811      	ldr	r1, [r2, #0]
 8013a96:	1855      	adds	r5, r2, r1
 8013a98:	42a5      	cmp	r5, r4
 8013a9a:	d10b      	bne.n	8013ab4 <_free_r+0x78>
 8013a9c:	6824      	ldr	r4, [r4, #0]
 8013a9e:	4421      	add	r1, r4
 8013aa0:	1854      	adds	r4, r2, r1
 8013aa2:	42a3      	cmp	r3, r4
 8013aa4:	6011      	str	r1, [r2, #0]
 8013aa6:	d1dd      	bne.n	8013a64 <_free_r+0x28>
 8013aa8:	681c      	ldr	r4, [r3, #0]
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	6053      	str	r3, [r2, #4]
 8013aae:	4421      	add	r1, r4
 8013ab0:	6011      	str	r1, [r2, #0]
 8013ab2:	e7d7      	b.n	8013a64 <_free_r+0x28>
 8013ab4:	d902      	bls.n	8013abc <_free_r+0x80>
 8013ab6:	230c      	movs	r3, #12
 8013ab8:	6003      	str	r3, [r0, #0]
 8013aba:	e7d3      	b.n	8013a64 <_free_r+0x28>
 8013abc:	6825      	ldr	r5, [r4, #0]
 8013abe:	1961      	adds	r1, r4, r5
 8013ac0:	428b      	cmp	r3, r1
 8013ac2:	bf04      	itt	eq
 8013ac4:	6819      	ldreq	r1, [r3, #0]
 8013ac6:	685b      	ldreq	r3, [r3, #4]
 8013ac8:	6063      	str	r3, [r4, #4]
 8013aca:	bf04      	itt	eq
 8013acc:	1949      	addeq	r1, r1, r5
 8013ace:	6021      	streq	r1, [r4, #0]
 8013ad0:	6054      	str	r4, [r2, #4]
 8013ad2:	e7c7      	b.n	8013a64 <_free_r+0x28>
 8013ad4:	b003      	add	sp, #12
 8013ad6:	bd30      	pop	{r4, r5, pc}
 8013ad8:	20007628 	.word	0x20007628

08013adc <__ssputs_r>:
 8013adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ae0:	688e      	ldr	r6, [r1, #8]
 8013ae2:	429e      	cmp	r6, r3
 8013ae4:	4682      	mov	sl, r0
 8013ae6:	460c      	mov	r4, r1
 8013ae8:	4690      	mov	r8, r2
 8013aea:	461f      	mov	r7, r3
 8013aec:	d838      	bhi.n	8013b60 <__ssputs_r+0x84>
 8013aee:	898a      	ldrh	r2, [r1, #12]
 8013af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013af4:	d032      	beq.n	8013b5c <__ssputs_r+0x80>
 8013af6:	6825      	ldr	r5, [r4, #0]
 8013af8:	6909      	ldr	r1, [r1, #16]
 8013afa:	eba5 0901 	sub.w	r9, r5, r1
 8013afe:	6965      	ldr	r5, [r4, #20]
 8013b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013b08:	3301      	adds	r3, #1
 8013b0a:	444b      	add	r3, r9
 8013b0c:	106d      	asrs	r5, r5, #1
 8013b0e:	429d      	cmp	r5, r3
 8013b10:	bf38      	it	cc
 8013b12:	461d      	movcc	r5, r3
 8013b14:	0553      	lsls	r3, r2, #21
 8013b16:	d531      	bpl.n	8013b7c <__ssputs_r+0xa0>
 8013b18:	4629      	mov	r1, r5
 8013b1a:	f7fd fe7f 	bl	801181c <_malloc_r>
 8013b1e:	4606      	mov	r6, r0
 8013b20:	b950      	cbnz	r0, 8013b38 <__ssputs_r+0x5c>
 8013b22:	230c      	movs	r3, #12
 8013b24:	f8ca 3000 	str.w	r3, [sl]
 8013b28:	89a3      	ldrh	r3, [r4, #12]
 8013b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b2e:	81a3      	strh	r3, [r4, #12]
 8013b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b38:	6921      	ldr	r1, [r4, #16]
 8013b3a:	464a      	mov	r2, r9
 8013b3c:	f7fd fe57 	bl	80117ee <memcpy>
 8013b40:	89a3      	ldrh	r3, [r4, #12]
 8013b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b4a:	81a3      	strh	r3, [r4, #12]
 8013b4c:	6126      	str	r6, [r4, #16]
 8013b4e:	6165      	str	r5, [r4, #20]
 8013b50:	444e      	add	r6, r9
 8013b52:	eba5 0509 	sub.w	r5, r5, r9
 8013b56:	6026      	str	r6, [r4, #0]
 8013b58:	60a5      	str	r5, [r4, #8]
 8013b5a:	463e      	mov	r6, r7
 8013b5c:	42be      	cmp	r6, r7
 8013b5e:	d900      	bls.n	8013b62 <__ssputs_r+0x86>
 8013b60:	463e      	mov	r6, r7
 8013b62:	4632      	mov	r2, r6
 8013b64:	6820      	ldr	r0, [r4, #0]
 8013b66:	4641      	mov	r1, r8
 8013b68:	f000 f968 	bl	8013e3c <memmove>
 8013b6c:	68a3      	ldr	r3, [r4, #8]
 8013b6e:	6822      	ldr	r2, [r4, #0]
 8013b70:	1b9b      	subs	r3, r3, r6
 8013b72:	4432      	add	r2, r6
 8013b74:	60a3      	str	r3, [r4, #8]
 8013b76:	6022      	str	r2, [r4, #0]
 8013b78:	2000      	movs	r0, #0
 8013b7a:	e7db      	b.n	8013b34 <__ssputs_r+0x58>
 8013b7c:	462a      	mov	r2, r5
 8013b7e:	f000 f977 	bl	8013e70 <_realloc_r>
 8013b82:	4606      	mov	r6, r0
 8013b84:	2800      	cmp	r0, #0
 8013b86:	d1e1      	bne.n	8013b4c <__ssputs_r+0x70>
 8013b88:	6921      	ldr	r1, [r4, #16]
 8013b8a:	4650      	mov	r0, sl
 8013b8c:	f7ff ff56 	bl	8013a3c <_free_r>
 8013b90:	e7c7      	b.n	8013b22 <__ssputs_r+0x46>
	...

08013b94 <_svfiprintf_r>:
 8013b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b98:	4698      	mov	r8, r3
 8013b9a:	898b      	ldrh	r3, [r1, #12]
 8013b9c:	061b      	lsls	r3, r3, #24
 8013b9e:	b09d      	sub	sp, #116	; 0x74
 8013ba0:	4607      	mov	r7, r0
 8013ba2:	460d      	mov	r5, r1
 8013ba4:	4614      	mov	r4, r2
 8013ba6:	d50e      	bpl.n	8013bc6 <_svfiprintf_r+0x32>
 8013ba8:	690b      	ldr	r3, [r1, #16]
 8013baa:	b963      	cbnz	r3, 8013bc6 <_svfiprintf_r+0x32>
 8013bac:	2140      	movs	r1, #64	; 0x40
 8013bae:	f7fd fe35 	bl	801181c <_malloc_r>
 8013bb2:	6028      	str	r0, [r5, #0]
 8013bb4:	6128      	str	r0, [r5, #16]
 8013bb6:	b920      	cbnz	r0, 8013bc2 <_svfiprintf_r+0x2e>
 8013bb8:	230c      	movs	r3, #12
 8013bba:	603b      	str	r3, [r7, #0]
 8013bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bc0:	e0d1      	b.n	8013d66 <_svfiprintf_r+0x1d2>
 8013bc2:	2340      	movs	r3, #64	; 0x40
 8013bc4:	616b      	str	r3, [r5, #20]
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8013bca:	2320      	movs	r3, #32
 8013bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8013bd4:	2330      	movs	r3, #48	; 0x30
 8013bd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013d80 <_svfiprintf_r+0x1ec>
 8013bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013bde:	f04f 0901 	mov.w	r9, #1
 8013be2:	4623      	mov	r3, r4
 8013be4:	469a      	mov	sl, r3
 8013be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bea:	b10a      	cbz	r2, 8013bf0 <_svfiprintf_r+0x5c>
 8013bec:	2a25      	cmp	r2, #37	; 0x25
 8013bee:	d1f9      	bne.n	8013be4 <_svfiprintf_r+0x50>
 8013bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8013bf4:	d00b      	beq.n	8013c0e <_svfiprintf_r+0x7a>
 8013bf6:	465b      	mov	r3, fp
 8013bf8:	4622      	mov	r2, r4
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	4638      	mov	r0, r7
 8013bfe:	f7ff ff6d 	bl	8013adc <__ssputs_r>
 8013c02:	3001      	adds	r0, #1
 8013c04:	f000 80aa 	beq.w	8013d5c <_svfiprintf_r+0x1c8>
 8013c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c0a:	445a      	add	r2, fp
 8013c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8013c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	f000 80a2 	beq.w	8013d5c <_svfiprintf_r+0x1c8>
 8013c18:	2300      	movs	r3, #0
 8013c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c22:	f10a 0a01 	add.w	sl, sl, #1
 8013c26:	9304      	str	r3, [sp, #16]
 8013c28:	9307      	str	r3, [sp, #28]
 8013c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8013c30:	4654      	mov	r4, sl
 8013c32:	2205      	movs	r2, #5
 8013c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c38:	4851      	ldr	r0, [pc, #324]	; (8013d80 <_svfiprintf_r+0x1ec>)
 8013c3a:	f7ec fad1 	bl	80001e0 <memchr>
 8013c3e:	9a04      	ldr	r2, [sp, #16]
 8013c40:	b9d8      	cbnz	r0, 8013c7a <_svfiprintf_r+0xe6>
 8013c42:	06d0      	lsls	r0, r2, #27
 8013c44:	bf44      	itt	mi
 8013c46:	2320      	movmi	r3, #32
 8013c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c4c:	0711      	lsls	r1, r2, #28
 8013c4e:	bf44      	itt	mi
 8013c50:	232b      	movmi	r3, #43	; 0x2b
 8013c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c56:	f89a 3000 	ldrb.w	r3, [sl]
 8013c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8013c5c:	d015      	beq.n	8013c8a <_svfiprintf_r+0xf6>
 8013c5e:	9a07      	ldr	r2, [sp, #28]
 8013c60:	4654      	mov	r4, sl
 8013c62:	2000      	movs	r0, #0
 8013c64:	f04f 0c0a 	mov.w	ip, #10
 8013c68:	4621      	mov	r1, r4
 8013c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c6e:	3b30      	subs	r3, #48	; 0x30
 8013c70:	2b09      	cmp	r3, #9
 8013c72:	d94e      	bls.n	8013d12 <_svfiprintf_r+0x17e>
 8013c74:	b1b0      	cbz	r0, 8013ca4 <_svfiprintf_r+0x110>
 8013c76:	9207      	str	r2, [sp, #28]
 8013c78:	e014      	b.n	8013ca4 <_svfiprintf_r+0x110>
 8013c7a:	eba0 0308 	sub.w	r3, r0, r8
 8013c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8013c82:	4313      	orrs	r3, r2
 8013c84:	9304      	str	r3, [sp, #16]
 8013c86:	46a2      	mov	sl, r4
 8013c88:	e7d2      	b.n	8013c30 <_svfiprintf_r+0x9c>
 8013c8a:	9b03      	ldr	r3, [sp, #12]
 8013c8c:	1d19      	adds	r1, r3, #4
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	9103      	str	r1, [sp, #12]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	bfbb      	ittet	lt
 8013c96:	425b      	neglt	r3, r3
 8013c98:	f042 0202 	orrlt.w	r2, r2, #2
 8013c9c:	9307      	strge	r3, [sp, #28]
 8013c9e:	9307      	strlt	r3, [sp, #28]
 8013ca0:	bfb8      	it	lt
 8013ca2:	9204      	strlt	r2, [sp, #16]
 8013ca4:	7823      	ldrb	r3, [r4, #0]
 8013ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8013ca8:	d10c      	bne.n	8013cc4 <_svfiprintf_r+0x130>
 8013caa:	7863      	ldrb	r3, [r4, #1]
 8013cac:	2b2a      	cmp	r3, #42	; 0x2a
 8013cae:	d135      	bne.n	8013d1c <_svfiprintf_r+0x188>
 8013cb0:	9b03      	ldr	r3, [sp, #12]
 8013cb2:	1d1a      	adds	r2, r3, #4
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	9203      	str	r2, [sp, #12]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	bfb8      	it	lt
 8013cbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013cc0:	3402      	adds	r4, #2
 8013cc2:	9305      	str	r3, [sp, #20]
 8013cc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013d90 <_svfiprintf_r+0x1fc>
 8013cc8:	7821      	ldrb	r1, [r4, #0]
 8013cca:	2203      	movs	r2, #3
 8013ccc:	4650      	mov	r0, sl
 8013cce:	f7ec fa87 	bl	80001e0 <memchr>
 8013cd2:	b140      	cbz	r0, 8013ce6 <_svfiprintf_r+0x152>
 8013cd4:	2340      	movs	r3, #64	; 0x40
 8013cd6:	eba0 000a 	sub.w	r0, r0, sl
 8013cda:	fa03 f000 	lsl.w	r0, r3, r0
 8013cde:	9b04      	ldr	r3, [sp, #16]
 8013ce0:	4303      	orrs	r3, r0
 8013ce2:	3401      	adds	r4, #1
 8013ce4:	9304      	str	r3, [sp, #16]
 8013ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cea:	4826      	ldr	r0, [pc, #152]	; (8013d84 <_svfiprintf_r+0x1f0>)
 8013cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cf0:	2206      	movs	r2, #6
 8013cf2:	f7ec fa75 	bl	80001e0 <memchr>
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	d038      	beq.n	8013d6c <_svfiprintf_r+0x1d8>
 8013cfa:	4b23      	ldr	r3, [pc, #140]	; (8013d88 <_svfiprintf_r+0x1f4>)
 8013cfc:	bb1b      	cbnz	r3, 8013d46 <_svfiprintf_r+0x1b2>
 8013cfe:	9b03      	ldr	r3, [sp, #12]
 8013d00:	3307      	adds	r3, #7
 8013d02:	f023 0307 	bic.w	r3, r3, #7
 8013d06:	3308      	adds	r3, #8
 8013d08:	9303      	str	r3, [sp, #12]
 8013d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d0c:	4433      	add	r3, r6
 8013d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8013d10:	e767      	b.n	8013be2 <_svfiprintf_r+0x4e>
 8013d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d16:	460c      	mov	r4, r1
 8013d18:	2001      	movs	r0, #1
 8013d1a:	e7a5      	b.n	8013c68 <_svfiprintf_r+0xd4>
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	3401      	adds	r4, #1
 8013d20:	9305      	str	r3, [sp, #20]
 8013d22:	4619      	mov	r1, r3
 8013d24:	f04f 0c0a 	mov.w	ip, #10
 8013d28:	4620      	mov	r0, r4
 8013d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d2e:	3a30      	subs	r2, #48	; 0x30
 8013d30:	2a09      	cmp	r2, #9
 8013d32:	d903      	bls.n	8013d3c <_svfiprintf_r+0x1a8>
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d0c5      	beq.n	8013cc4 <_svfiprintf_r+0x130>
 8013d38:	9105      	str	r1, [sp, #20]
 8013d3a:	e7c3      	b.n	8013cc4 <_svfiprintf_r+0x130>
 8013d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d40:	4604      	mov	r4, r0
 8013d42:	2301      	movs	r3, #1
 8013d44:	e7f0      	b.n	8013d28 <_svfiprintf_r+0x194>
 8013d46:	ab03      	add	r3, sp, #12
 8013d48:	9300      	str	r3, [sp, #0]
 8013d4a:	462a      	mov	r2, r5
 8013d4c:	4b0f      	ldr	r3, [pc, #60]	; (8013d8c <_svfiprintf_r+0x1f8>)
 8013d4e:	a904      	add	r1, sp, #16
 8013d50:	4638      	mov	r0, r7
 8013d52:	f7fd fe5d 	bl	8011a10 <_printf_float>
 8013d56:	1c42      	adds	r2, r0, #1
 8013d58:	4606      	mov	r6, r0
 8013d5a:	d1d6      	bne.n	8013d0a <_svfiprintf_r+0x176>
 8013d5c:	89ab      	ldrh	r3, [r5, #12]
 8013d5e:	065b      	lsls	r3, r3, #25
 8013d60:	f53f af2c 	bmi.w	8013bbc <_svfiprintf_r+0x28>
 8013d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d66:	b01d      	add	sp, #116	; 0x74
 8013d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d6c:	ab03      	add	r3, sp, #12
 8013d6e:	9300      	str	r3, [sp, #0]
 8013d70:	462a      	mov	r2, r5
 8013d72:	4b06      	ldr	r3, [pc, #24]	; (8013d8c <_svfiprintf_r+0x1f8>)
 8013d74:	a904      	add	r1, sp, #16
 8013d76:	4638      	mov	r0, r7
 8013d78:	f7fe f8ee 	bl	8011f58 <_printf_i>
 8013d7c:	e7eb      	b.n	8013d56 <_svfiprintf_r+0x1c2>
 8013d7e:	bf00      	nop
 8013d80:	0801acc4 	.word	0x0801acc4
 8013d84:	0801acce 	.word	0x0801acce
 8013d88:	08011a11 	.word	0x08011a11
 8013d8c:	08013add 	.word	0x08013add
 8013d90:	0801acca 	.word	0x0801acca

08013d94 <_read_r>:
 8013d94:	b538      	push	{r3, r4, r5, lr}
 8013d96:	4d07      	ldr	r5, [pc, #28]	; (8013db4 <_read_r+0x20>)
 8013d98:	4604      	mov	r4, r0
 8013d9a:	4608      	mov	r0, r1
 8013d9c:	4611      	mov	r1, r2
 8013d9e:	2200      	movs	r2, #0
 8013da0:	602a      	str	r2, [r5, #0]
 8013da2:	461a      	mov	r2, r3
 8013da4:	f7f0 fad8 	bl	8004358 <_read>
 8013da8:	1c43      	adds	r3, r0, #1
 8013daa:	d102      	bne.n	8013db2 <_read_r+0x1e>
 8013dac:	682b      	ldr	r3, [r5, #0]
 8013dae:	b103      	cbz	r3, 8013db2 <_read_r+0x1e>
 8013db0:	6023      	str	r3, [r4, #0]
 8013db2:	bd38      	pop	{r3, r4, r5, pc}
 8013db4:	2000ef4c 	.word	0x2000ef4c

08013db8 <__assert_func>:
 8013db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013dba:	4614      	mov	r4, r2
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	4b09      	ldr	r3, [pc, #36]	; (8013de4 <__assert_func+0x2c>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	4605      	mov	r5, r0
 8013dc4:	68d8      	ldr	r0, [r3, #12]
 8013dc6:	b14c      	cbz	r4, 8013ddc <__assert_func+0x24>
 8013dc8:	4b07      	ldr	r3, [pc, #28]	; (8013de8 <__assert_func+0x30>)
 8013dca:	9100      	str	r1, [sp, #0]
 8013dcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013dd0:	4906      	ldr	r1, [pc, #24]	; (8013dec <__assert_func+0x34>)
 8013dd2:	462b      	mov	r3, r5
 8013dd4:	f000 f80e 	bl	8013df4 <fiprintf>
 8013dd8:	f000 fa98 	bl	801430c <abort>
 8013ddc:	4b04      	ldr	r3, [pc, #16]	; (8013df0 <__assert_func+0x38>)
 8013dde:	461c      	mov	r4, r3
 8013de0:	e7f3      	b.n	8013dca <__assert_func+0x12>
 8013de2:	bf00      	nop
 8013de4:	200001b0 	.word	0x200001b0
 8013de8:	0801acd5 	.word	0x0801acd5
 8013dec:	0801ace2 	.word	0x0801ace2
 8013df0:	0801ad10 	.word	0x0801ad10

08013df4 <fiprintf>:
 8013df4:	b40e      	push	{r1, r2, r3}
 8013df6:	b503      	push	{r0, r1, lr}
 8013df8:	4601      	mov	r1, r0
 8013dfa:	ab03      	add	r3, sp, #12
 8013dfc:	4805      	ldr	r0, [pc, #20]	; (8013e14 <fiprintf+0x20>)
 8013dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e02:	6800      	ldr	r0, [r0, #0]
 8013e04:	9301      	str	r3, [sp, #4]
 8013e06:	f000 f883 	bl	8013f10 <_vfiprintf_r>
 8013e0a:	b002      	add	sp, #8
 8013e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e10:	b003      	add	sp, #12
 8013e12:	4770      	bx	lr
 8013e14:	200001b0 	.word	0x200001b0

08013e18 <__ascii_mbtowc>:
 8013e18:	b082      	sub	sp, #8
 8013e1a:	b901      	cbnz	r1, 8013e1e <__ascii_mbtowc+0x6>
 8013e1c:	a901      	add	r1, sp, #4
 8013e1e:	b142      	cbz	r2, 8013e32 <__ascii_mbtowc+0x1a>
 8013e20:	b14b      	cbz	r3, 8013e36 <__ascii_mbtowc+0x1e>
 8013e22:	7813      	ldrb	r3, [r2, #0]
 8013e24:	600b      	str	r3, [r1, #0]
 8013e26:	7812      	ldrb	r2, [r2, #0]
 8013e28:	1e10      	subs	r0, r2, #0
 8013e2a:	bf18      	it	ne
 8013e2c:	2001      	movne	r0, #1
 8013e2e:	b002      	add	sp, #8
 8013e30:	4770      	bx	lr
 8013e32:	4610      	mov	r0, r2
 8013e34:	e7fb      	b.n	8013e2e <__ascii_mbtowc+0x16>
 8013e36:	f06f 0001 	mvn.w	r0, #1
 8013e3a:	e7f8      	b.n	8013e2e <__ascii_mbtowc+0x16>

08013e3c <memmove>:
 8013e3c:	4288      	cmp	r0, r1
 8013e3e:	b510      	push	{r4, lr}
 8013e40:	eb01 0402 	add.w	r4, r1, r2
 8013e44:	d902      	bls.n	8013e4c <memmove+0x10>
 8013e46:	4284      	cmp	r4, r0
 8013e48:	4623      	mov	r3, r4
 8013e4a:	d807      	bhi.n	8013e5c <memmove+0x20>
 8013e4c:	1e43      	subs	r3, r0, #1
 8013e4e:	42a1      	cmp	r1, r4
 8013e50:	d008      	beq.n	8013e64 <memmove+0x28>
 8013e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e5a:	e7f8      	b.n	8013e4e <memmove+0x12>
 8013e5c:	4402      	add	r2, r0
 8013e5e:	4601      	mov	r1, r0
 8013e60:	428a      	cmp	r2, r1
 8013e62:	d100      	bne.n	8013e66 <memmove+0x2a>
 8013e64:	bd10      	pop	{r4, pc}
 8013e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e6e:	e7f7      	b.n	8013e60 <memmove+0x24>

08013e70 <_realloc_r>:
 8013e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e72:	4607      	mov	r7, r0
 8013e74:	4614      	mov	r4, r2
 8013e76:	460e      	mov	r6, r1
 8013e78:	b921      	cbnz	r1, 8013e84 <_realloc_r+0x14>
 8013e7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013e7e:	4611      	mov	r1, r2
 8013e80:	f7fd bccc 	b.w	801181c <_malloc_r>
 8013e84:	b922      	cbnz	r2, 8013e90 <_realloc_r+0x20>
 8013e86:	f7ff fdd9 	bl	8013a3c <_free_r>
 8013e8a:	4625      	mov	r5, r4
 8013e8c:	4628      	mov	r0, r5
 8013e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e90:	f000 faa8 	bl	80143e4 <_malloc_usable_size_r>
 8013e94:	42a0      	cmp	r0, r4
 8013e96:	d20f      	bcs.n	8013eb8 <_realloc_r+0x48>
 8013e98:	4621      	mov	r1, r4
 8013e9a:	4638      	mov	r0, r7
 8013e9c:	f7fd fcbe 	bl	801181c <_malloc_r>
 8013ea0:	4605      	mov	r5, r0
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	d0f2      	beq.n	8013e8c <_realloc_r+0x1c>
 8013ea6:	4631      	mov	r1, r6
 8013ea8:	4622      	mov	r2, r4
 8013eaa:	f7fd fca0 	bl	80117ee <memcpy>
 8013eae:	4631      	mov	r1, r6
 8013eb0:	4638      	mov	r0, r7
 8013eb2:	f7ff fdc3 	bl	8013a3c <_free_r>
 8013eb6:	e7e9      	b.n	8013e8c <_realloc_r+0x1c>
 8013eb8:	4635      	mov	r5, r6
 8013eba:	e7e7      	b.n	8013e8c <_realloc_r+0x1c>

08013ebc <__sfputc_r>:
 8013ebc:	6893      	ldr	r3, [r2, #8]
 8013ebe:	3b01      	subs	r3, #1
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	b410      	push	{r4}
 8013ec4:	6093      	str	r3, [r2, #8]
 8013ec6:	da08      	bge.n	8013eda <__sfputc_r+0x1e>
 8013ec8:	6994      	ldr	r4, [r2, #24]
 8013eca:	42a3      	cmp	r3, r4
 8013ecc:	db01      	blt.n	8013ed2 <__sfputc_r+0x16>
 8013ece:	290a      	cmp	r1, #10
 8013ed0:	d103      	bne.n	8013eda <__sfputc_r+0x1e>
 8013ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ed6:	f000 b94b 	b.w	8014170 <__swbuf_r>
 8013eda:	6813      	ldr	r3, [r2, #0]
 8013edc:	1c58      	adds	r0, r3, #1
 8013ede:	6010      	str	r0, [r2, #0]
 8013ee0:	7019      	strb	r1, [r3, #0]
 8013ee2:	4608      	mov	r0, r1
 8013ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ee8:	4770      	bx	lr

08013eea <__sfputs_r>:
 8013eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eec:	4606      	mov	r6, r0
 8013eee:	460f      	mov	r7, r1
 8013ef0:	4614      	mov	r4, r2
 8013ef2:	18d5      	adds	r5, r2, r3
 8013ef4:	42ac      	cmp	r4, r5
 8013ef6:	d101      	bne.n	8013efc <__sfputs_r+0x12>
 8013ef8:	2000      	movs	r0, #0
 8013efa:	e007      	b.n	8013f0c <__sfputs_r+0x22>
 8013efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f00:	463a      	mov	r2, r7
 8013f02:	4630      	mov	r0, r6
 8013f04:	f7ff ffda 	bl	8013ebc <__sfputc_r>
 8013f08:	1c43      	adds	r3, r0, #1
 8013f0a:	d1f3      	bne.n	8013ef4 <__sfputs_r+0xa>
 8013f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013f10 <_vfiprintf_r>:
 8013f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f14:	460d      	mov	r5, r1
 8013f16:	b09d      	sub	sp, #116	; 0x74
 8013f18:	4614      	mov	r4, r2
 8013f1a:	4698      	mov	r8, r3
 8013f1c:	4606      	mov	r6, r0
 8013f1e:	b118      	cbz	r0, 8013f28 <_vfiprintf_r+0x18>
 8013f20:	6983      	ldr	r3, [r0, #24]
 8013f22:	b90b      	cbnz	r3, 8013f28 <_vfiprintf_r+0x18>
 8013f24:	f7fd fb84 	bl	8011630 <__sinit>
 8013f28:	4b89      	ldr	r3, [pc, #548]	; (8014150 <_vfiprintf_r+0x240>)
 8013f2a:	429d      	cmp	r5, r3
 8013f2c:	d11b      	bne.n	8013f66 <_vfiprintf_r+0x56>
 8013f2e:	6875      	ldr	r5, [r6, #4]
 8013f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f32:	07d9      	lsls	r1, r3, #31
 8013f34:	d405      	bmi.n	8013f42 <_vfiprintf_r+0x32>
 8013f36:	89ab      	ldrh	r3, [r5, #12]
 8013f38:	059a      	lsls	r2, r3, #22
 8013f3a:	d402      	bmi.n	8013f42 <_vfiprintf_r+0x32>
 8013f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f3e:	f7fd fc54 	bl	80117ea <__retarget_lock_acquire_recursive>
 8013f42:	89ab      	ldrh	r3, [r5, #12]
 8013f44:	071b      	lsls	r3, r3, #28
 8013f46:	d501      	bpl.n	8013f4c <_vfiprintf_r+0x3c>
 8013f48:	692b      	ldr	r3, [r5, #16]
 8013f4a:	b9eb      	cbnz	r3, 8013f88 <_vfiprintf_r+0x78>
 8013f4c:	4629      	mov	r1, r5
 8013f4e:	4630      	mov	r0, r6
 8013f50:	f000 f96e 	bl	8014230 <__swsetup_r>
 8013f54:	b1c0      	cbz	r0, 8013f88 <_vfiprintf_r+0x78>
 8013f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f58:	07dc      	lsls	r4, r3, #31
 8013f5a:	d50e      	bpl.n	8013f7a <_vfiprintf_r+0x6a>
 8013f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f60:	b01d      	add	sp, #116	; 0x74
 8013f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f66:	4b7b      	ldr	r3, [pc, #492]	; (8014154 <_vfiprintf_r+0x244>)
 8013f68:	429d      	cmp	r5, r3
 8013f6a:	d101      	bne.n	8013f70 <_vfiprintf_r+0x60>
 8013f6c:	68b5      	ldr	r5, [r6, #8]
 8013f6e:	e7df      	b.n	8013f30 <_vfiprintf_r+0x20>
 8013f70:	4b79      	ldr	r3, [pc, #484]	; (8014158 <_vfiprintf_r+0x248>)
 8013f72:	429d      	cmp	r5, r3
 8013f74:	bf08      	it	eq
 8013f76:	68f5      	ldreq	r5, [r6, #12]
 8013f78:	e7da      	b.n	8013f30 <_vfiprintf_r+0x20>
 8013f7a:	89ab      	ldrh	r3, [r5, #12]
 8013f7c:	0598      	lsls	r0, r3, #22
 8013f7e:	d4ed      	bmi.n	8013f5c <_vfiprintf_r+0x4c>
 8013f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f82:	f7fd fc33 	bl	80117ec <__retarget_lock_release_recursive>
 8013f86:	e7e9      	b.n	8013f5c <_vfiprintf_r+0x4c>
 8013f88:	2300      	movs	r3, #0
 8013f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8013f8c:	2320      	movs	r3, #32
 8013f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f96:	2330      	movs	r3, #48	; 0x30
 8013f98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801415c <_vfiprintf_r+0x24c>
 8013f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013fa0:	f04f 0901 	mov.w	r9, #1
 8013fa4:	4623      	mov	r3, r4
 8013fa6:	469a      	mov	sl, r3
 8013fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fac:	b10a      	cbz	r2, 8013fb2 <_vfiprintf_r+0xa2>
 8013fae:	2a25      	cmp	r2, #37	; 0x25
 8013fb0:	d1f9      	bne.n	8013fa6 <_vfiprintf_r+0x96>
 8013fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8013fb6:	d00b      	beq.n	8013fd0 <_vfiprintf_r+0xc0>
 8013fb8:	465b      	mov	r3, fp
 8013fba:	4622      	mov	r2, r4
 8013fbc:	4629      	mov	r1, r5
 8013fbe:	4630      	mov	r0, r6
 8013fc0:	f7ff ff93 	bl	8013eea <__sfputs_r>
 8013fc4:	3001      	adds	r0, #1
 8013fc6:	f000 80aa 	beq.w	801411e <_vfiprintf_r+0x20e>
 8013fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fcc:	445a      	add	r2, fp
 8013fce:	9209      	str	r2, [sp, #36]	; 0x24
 8013fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	f000 80a2 	beq.w	801411e <_vfiprintf_r+0x20e>
 8013fda:	2300      	movs	r3, #0
 8013fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fe4:	f10a 0a01 	add.w	sl, sl, #1
 8013fe8:	9304      	str	r3, [sp, #16]
 8013fea:	9307      	str	r3, [sp, #28]
 8013fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8013ff2:	4654      	mov	r4, sl
 8013ff4:	2205      	movs	r2, #5
 8013ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ffa:	4858      	ldr	r0, [pc, #352]	; (801415c <_vfiprintf_r+0x24c>)
 8013ffc:	f7ec f8f0 	bl	80001e0 <memchr>
 8014000:	9a04      	ldr	r2, [sp, #16]
 8014002:	b9d8      	cbnz	r0, 801403c <_vfiprintf_r+0x12c>
 8014004:	06d1      	lsls	r1, r2, #27
 8014006:	bf44      	itt	mi
 8014008:	2320      	movmi	r3, #32
 801400a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801400e:	0713      	lsls	r3, r2, #28
 8014010:	bf44      	itt	mi
 8014012:	232b      	movmi	r3, #43	; 0x2b
 8014014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014018:	f89a 3000 	ldrb.w	r3, [sl]
 801401c:	2b2a      	cmp	r3, #42	; 0x2a
 801401e:	d015      	beq.n	801404c <_vfiprintf_r+0x13c>
 8014020:	9a07      	ldr	r2, [sp, #28]
 8014022:	4654      	mov	r4, sl
 8014024:	2000      	movs	r0, #0
 8014026:	f04f 0c0a 	mov.w	ip, #10
 801402a:	4621      	mov	r1, r4
 801402c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014030:	3b30      	subs	r3, #48	; 0x30
 8014032:	2b09      	cmp	r3, #9
 8014034:	d94e      	bls.n	80140d4 <_vfiprintf_r+0x1c4>
 8014036:	b1b0      	cbz	r0, 8014066 <_vfiprintf_r+0x156>
 8014038:	9207      	str	r2, [sp, #28]
 801403a:	e014      	b.n	8014066 <_vfiprintf_r+0x156>
 801403c:	eba0 0308 	sub.w	r3, r0, r8
 8014040:	fa09 f303 	lsl.w	r3, r9, r3
 8014044:	4313      	orrs	r3, r2
 8014046:	9304      	str	r3, [sp, #16]
 8014048:	46a2      	mov	sl, r4
 801404a:	e7d2      	b.n	8013ff2 <_vfiprintf_r+0xe2>
 801404c:	9b03      	ldr	r3, [sp, #12]
 801404e:	1d19      	adds	r1, r3, #4
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	9103      	str	r1, [sp, #12]
 8014054:	2b00      	cmp	r3, #0
 8014056:	bfbb      	ittet	lt
 8014058:	425b      	neglt	r3, r3
 801405a:	f042 0202 	orrlt.w	r2, r2, #2
 801405e:	9307      	strge	r3, [sp, #28]
 8014060:	9307      	strlt	r3, [sp, #28]
 8014062:	bfb8      	it	lt
 8014064:	9204      	strlt	r2, [sp, #16]
 8014066:	7823      	ldrb	r3, [r4, #0]
 8014068:	2b2e      	cmp	r3, #46	; 0x2e
 801406a:	d10c      	bne.n	8014086 <_vfiprintf_r+0x176>
 801406c:	7863      	ldrb	r3, [r4, #1]
 801406e:	2b2a      	cmp	r3, #42	; 0x2a
 8014070:	d135      	bne.n	80140de <_vfiprintf_r+0x1ce>
 8014072:	9b03      	ldr	r3, [sp, #12]
 8014074:	1d1a      	adds	r2, r3, #4
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	9203      	str	r2, [sp, #12]
 801407a:	2b00      	cmp	r3, #0
 801407c:	bfb8      	it	lt
 801407e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014082:	3402      	adds	r4, #2
 8014084:	9305      	str	r3, [sp, #20]
 8014086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801416c <_vfiprintf_r+0x25c>
 801408a:	7821      	ldrb	r1, [r4, #0]
 801408c:	2203      	movs	r2, #3
 801408e:	4650      	mov	r0, sl
 8014090:	f7ec f8a6 	bl	80001e0 <memchr>
 8014094:	b140      	cbz	r0, 80140a8 <_vfiprintf_r+0x198>
 8014096:	2340      	movs	r3, #64	; 0x40
 8014098:	eba0 000a 	sub.w	r0, r0, sl
 801409c:	fa03 f000 	lsl.w	r0, r3, r0
 80140a0:	9b04      	ldr	r3, [sp, #16]
 80140a2:	4303      	orrs	r3, r0
 80140a4:	3401      	adds	r4, #1
 80140a6:	9304      	str	r3, [sp, #16]
 80140a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140ac:	482c      	ldr	r0, [pc, #176]	; (8014160 <_vfiprintf_r+0x250>)
 80140ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80140b2:	2206      	movs	r2, #6
 80140b4:	f7ec f894 	bl	80001e0 <memchr>
 80140b8:	2800      	cmp	r0, #0
 80140ba:	d03f      	beq.n	801413c <_vfiprintf_r+0x22c>
 80140bc:	4b29      	ldr	r3, [pc, #164]	; (8014164 <_vfiprintf_r+0x254>)
 80140be:	bb1b      	cbnz	r3, 8014108 <_vfiprintf_r+0x1f8>
 80140c0:	9b03      	ldr	r3, [sp, #12]
 80140c2:	3307      	adds	r3, #7
 80140c4:	f023 0307 	bic.w	r3, r3, #7
 80140c8:	3308      	adds	r3, #8
 80140ca:	9303      	str	r3, [sp, #12]
 80140cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ce:	443b      	add	r3, r7
 80140d0:	9309      	str	r3, [sp, #36]	; 0x24
 80140d2:	e767      	b.n	8013fa4 <_vfiprintf_r+0x94>
 80140d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80140d8:	460c      	mov	r4, r1
 80140da:	2001      	movs	r0, #1
 80140dc:	e7a5      	b.n	801402a <_vfiprintf_r+0x11a>
 80140de:	2300      	movs	r3, #0
 80140e0:	3401      	adds	r4, #1
 80140e2:	9305      	str	r3, [sp, #20]
 80140e4:	4619      	mov	r1, r3
 80140e6:	f04f 0c0a 	mov.w	ip, #10
 80140ea:	4620      	mov	r0, r4
 80140ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140f0:	3a30      	subs	r2, #48	; 0x30
 80140f2:	2a09      	cmp	r2, #9
 80140f4:	d903      	bls.n	80140fe <_vfiprintf_r+0x1ee>
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d0c5      	beq.n	8014086 <_vfiprintf_r+0x176>
 80140fa:	9105      	str	r1, [sp, #20]
 80140fc:	e7c3      	b.n	8014086 <_vfiprintf_r+0x176>
 80140fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8014102:	4604      	mov	r4, r0
 8014104:	2301      	movs	r3, #1
 8014106:	e7f0      	b.n	80140ea <_vfiprintf_r+0x1da>
 8014108:	ab03      	add	r3, sp, #12
 801410a:	9300      	str	r3, [sp, #0]
 801410c:	462a      	mov	r2, r5
 801410e:	4b16      	ldr	r3, [pc, #88]	; (8014168 <_vfiprintf_r+0x258>)
 8014110:	a904      	add	r1, sp, #16
 8014112:	4630      	mov	r0, r6
 8014114:	f7fd fc7c 	bl	8011a10 <_printf_float>
 8014118:	4607      	mov	r7, r0
 801411a:	1c78      	adds	r0, r7, #1
 801411c:	d1d6      	bne.n	80140cc <_vfiprintf_r+0x1bc>
 801411e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014120:	07d9      	lsls	r1, r3, #31
 8014122:	d405      	bmi.n	8014130 <_vfiprintf_r+0x220>
 8014124:	89ab      	ldrh	r3, [r5, #12]
 8014126:	059a      	lsls	r2, r3, #22
 8014128:	d402      	bmi.n	8014130 <_vfiprintf_r+0x220>
 801412a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801412c:	f7fd fb5e 	bl	80117ec <__retarget_lock_release_recursive>
 8014130:	89ab      	ldrh	r3, [r5, #12]
 8014132:	065b      	lsls	r3, r3, #25
 8014134:	f53f af12 	bmi.w	8013f5c <_vfiprintf_r+0x4c>
 8014138:	9809      	ldr	r0, [sp, #36]	; 0x24
 801413a:	e711      	b.n	8013f60 <_vfiprintf_r+0x50>
 801413c:	ab03      	add	r3, sp, #12
 801413e:	9300      	str	r3, [sp, #0]
 8014140:	462a      	mov	r2, r5
 8014142:	4b09      	ldr	r3, [pc, #36]	; (8014168 <_vfiprintf_r+0x258>)
 8014144:	a904      	add	r1, sp, #16
 8014146:	4630      	mov	r0, r6
 8014148:	f7fd ff06 	bl	8011f58 <_printf_i>
 801414c:	e7e4      	b.n	8014118 <_vfiprintf_r+0x208>
 801414e:	bf00      	nop
 8014150:	0801aa30 	.word	0x0801aa30
 8014154:	0801aa50 	.word	0x0801aa50
 8014158:	0801aa10 	.word	0x0801aa10
 801415c:	0801acc4 	.word	0x0801acc4
 8014160:	0801acce 	.word	0x0801acce
 8014164:	08011a11 	.word	0x08011a11
 8014168:	08013eeb 	.word	0x08013eeb
 801416c:	0801acca 	.word	0x0801acca

08014170 <__swbuf_r>:
 8014170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014172:	460e      	mov	r6, r1
 8014174:	4614      	mov	r4, r2
 8014176:	4605      	mov	r5, r0
 8014178:	b118      	cbz	r0, 8014182 <__swbuf_r+0x12>
 801417a:	6983      	ldr	r3, [r0, #24]
 801417c:	b90b      	cbnz	r3, 8014182 <__swbuf_r+0x12>
 801417e:	f7fd fa57 	bl	8011630 <__sinit>
 8014182:	4b21      	ldr	r3, [pc, #132]	; (8014208 <__swbuf_r+0x98>)
 8014184:	429c      	cmp	r4, r3
 8014186:	d12b      	bne.n	80141e0 <__swbuf_r+0x70>
 8014188:	686c      	ldr	r4, [r5, #4]
 801418a:	69a3      	ldr	r3, [r4, #24]
 801418c:	60a3      	str	r3, [r4, #8]
 801418e:	89a3      	ldrh	r3, [r4, #12]
 8014190:	071a      	lsls	r2, r3, #28
 8014192:	d52f      	bpl.n	80141f4 <__swbuf_r+0x84>
 8014194:	6923      	ldr	r3, [r4, #16]
 8014196:	b36b      	cbz	r3, 80141f4 <__swbuf_r+0x84>
 8014198:	6923      	ldr	r3, [r4, #16]
 801419a:	6820      	ldr	r0, [r4, #0]
 801419c:	1ac0      	subs	r0, r0, r3
 801419e:	6963      	ldr	r3, [r4, #20]
 80141a0:	b2f6      	uxtb	r6, r6
 80141a2:	4283      	cmp	r3, r0
 80141a4:	4637      	mov	r7, r6
 80141a6:	dc04      	bgt.n	80141b2 <__swbuf_r+0x42>
 80141a8:	4621      	mov	r1, r4
 80141aa:	4628      	mov	r0, r5
 80141ac:	f7ff f852 	bl	8013254 <_fflush_r>
 80141b0:	bb30      	cbnz	r0, 8014200 <__swbuf_r+0x90>
 80141b2:	68a3      	ldr	r3, [r4, #8]
 80141b4:	3b01      	subs	r3, #1
 80141b6:	60a3      	str	r3, [r4, #8]
 80141b8:	6823      	ldr	r3, [r4, #0]
 80141ba:	1c5a      	adds	r2, r3, #1
 80141bc:	6022      	str	r2, [r4, #0]
 80141be:	701e      	strb	r6, [r3, #0]
 80141c0:	6963      	ldr	r3, [r4, #20]
 80141c2:	3001      	adds	r0, #1
 80141c4:	4283      	cmp	r3, r0
 80141c6:	d004      	beq.n	80141d2 <__swbuf_r+0x62>
 80141c8:	89a3      	ldrh	r3, [r4, #12]
 80141ca:	07db      	lsls	r3, r3, #31
 80141cc:	d506      	bpl.n	80141dc <__swbuf_r+0x6c>
 80141ce:	2e0a      	cmp	r6, #10
 80141d0:	d104      	bne.n	80141dc <__swbuf_r+0x6c>
 80141d2:	4621      	mov	r1, r4
 80141d4:	4628      	mov	r0, r5
 80141d6:	f7ff f83d 	bl	8013254 <_fflush_r>
 80141da:	b988      	cbnz	r0, 8014200 <__swbuf_r+0x90>
 80141dc:	4638      	mov	r0, r7
 80141de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141e0:	4b0a      	ldr	r3, [pc, #40]	; (801420c <__swbuf_r+0x9c>)
 80141e2:	429c      	cmp	r4, r3
 80141e4:	d101      	bne.n	80141ea <__swbuf_r+0x7a>
 80141e6:	68ac      	ldr	r4, [r5, #8]
 80141e8:	e7cf      	b.n	801418a <__swbuf_r+0x1a>
 80141ea:	4b09      	ldr	r3, [pc, #36]	; (8014210 <__swbuf_r+0xa0>)
 80141ec:	429c      	cmp	r4, r3
 80141ee:	bf08      	it	eq
 80141f0:	68ec      	ldreq	r4, [r5, #12]
 80141f2:	e7ca      	b.n	801418a <__swbuf_r+0x1a>
 80141f4:	4621      	mov	r1, r4
 80141f6:	4628      	mov	r0, r5
 80141f8:	f000 f81a 	bl	8014230 <__swsetup_r>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	d0cb      	beq.n	8014198 <__swbuf_r+0x28>
 8014200:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014204:	e7ea      	b.n	80141dc <__swbuf_r+0x6c>
 8014206:	bf00      	nop
 8014208:	0801aa30 	.word	0x0801aa30
 801420c:	0801aa50 	.word	0x0801aa50
 8014210:	0801aa10 	.word	0x0801aa10

08014214 <__ascii_wctomb>:
 8014214:	b149      	cbz	r1, 801422a <__ascii_wctomb+0x16>
 8014216:	2aff      	cmp	r2, #255	; 0xff
 8014218:	bf85      	ittet	hi
 801421a:	238a      	movhi	r3, #138	; 0x8a
 801421c:	6003      	strhi	r3, [r0, #0]
 801421e:	700a      	strbls	r2, [r1, #0]
 8014220:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014224:	bf98      	it	ls
 8014226:	2001      	movls	r0, #1
 8014228:	4770      	bx	lr
 801422a:	4608      	mov	r0, r1
 801422c:	4770      	bx	lr
	...

08014230 <__swsetup_r>:
 8014230:	4b32      	ldr	r3, [pc, #200]	; (80142fc <__swsetup_r+0xcc>)
 8014232:	b570      	push	{r4, r5, r6, lr}
 8014234:	681d      	ldr	r5, [r3, #0]
 8014236:	4606      	mov	r6, r0
 8014238:	460c      	mov	r4, r1
 801423a:	b125      	cbz	r5, 8014246 <__swsetup_r+0x16>
 801423c:	69ab      	ldr	r3, [r5, #24]
 801423e:	b913      	cbnz	r3, 8014246 <__swsetup_r+0x16>
 8014240:	4628      	mov	r0, r5
 8014242:	f7fd f9f5 	bl	8011630 <__sinit>
 8014246:	4b2e      	ldr	r3, [pc, #184]	; (8014300 <__swsetup_r+0xd0>)
 8014248:	429c      	cmp	r4, r3
 801424a:	d10f      	bne.n	801426c <__swsetup_r+0x3c>
 801424c:	686c      	ldr	r4, [r5, #4]
 801424e:	89a3      	ldrh	r3, [r4, #12]
 8014250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014254:	0719      	lsls	r1, r3, #28
 8014256:	d42c      	bmi.n	80142b2 <__swsetup_r+0x82>
 8014258:	06dd      	lsls	r5, r3, #27
 801425a:	d411      	bmi.n	8014280 <__swsetup_r+0x50>
 801425c:	2309      	movs	r3, #9
 801425e:	6033      	str	r3, [r6, #0]
 8014260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014264:	81a3      	strh	r3, [r4, #12]
 8014266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801426a:	e03e      	b.n	80142ea <__swsetup_r+0xba>
 801426c:	4b25      	ldr	r3, [pc, #148]	; (8014304 <__swsetup_r+0xd4>)
 801426e:	429c      	cmp	r4, r3
 8014270:	d101      	bne.n	8014276 <__swsetup_r+0x46>
 8014272:	68ac      	ldr	r4, [r5, #8]
 8014274:	e7eb      	b.n	801424e <__swsetup_r+0x1e>
 8014276:	4b24      	ldr	r3, [pc, #144]	; (8014308 <__swsetup_r+0xd8>)
 8014278:	429c      	cmp	r4, r3
 801427a:	bf08      	it	eq
 801427c:	68ec      	ldreq	r4, [r5, #12]
 801427e:	e7e6      	b.n	801424e <__swsetup_r+0x1e>
 8014280:	0758      	lsls	r0, r3, #29
 8014282:	d512      	bpl.n	80142aa <__swsetup_r+0x7a>
 8014284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014286:	b141      	cbz	r1, 801429a <__swsetup_r+0x6a>
 8014288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801428c:	4299      	cmp	r1, r3
 801428e:	d002      	beq.n	8014296 <__swsetup_r+0x66>
 8014290:	4630      	mov	r0, r6
 8014292:	f7ff fbd3 	bl	8013a3c <_free_r>
 8014296:	2300      	movs	r3, #0
 8014298:	6363      	str	r3, [r4, #52]	; 0x34
 801429a:	89a3      	ldrh	r3, [r4, #12]
 801429c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80142a0:	81a3      	strh	r3, [r4, #12]
 80142a2:	2300      	movs	r3, #0
 80142a4:	6063      	str	r3, [r4, #4]
 80142a6:	6923      	ldr	r3, [r4, #16]
 80142a8:	6023      	str	r3, [r4, #0]
 80142aa:	89a3      	ldrh	r3, [r4, #12]
 80142ac:	f043 0308 	orr.w	r3, r3, #8
 80142b0:	81a3      	strh	r3, [r4, #12]
 80142b2:	6923      	ldr	r3, [r4, #16]
 80142b4:	b94b      	cbnz	r3, 80142ca <__swsetup_r+0x9a>
 80142b6:	89a3      	ldrh	r3, [r4, #12]
 80142b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80142bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80142c0:	d003      	beq.n	80142ca <__swsetup_r+0x9a>
 80142c2:	4621      	mov	r1, r4
 80142c4:	4630      	mov	r0, r6
 80142c6:	f000 f84d 	bl	8014364 <__smakebuf_r>
 80142ca:	89a0      	ldrh	r0, [r4, #12]
 80142cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80142d0:	f010 0301 	ands.w	r3, r0, #1
 80142d4:	d00a      	beq.n	80142ec <__swsetup_r+0xbc>
 80142d6:	2300      	movs	r3, #0
 80142d8:	60a3      	str	r3, [r4, #8]
 80142da:	6963      	ldr	r3, [r4, #20]
 80142dc:	425b      	negs	r3, r3
 80142de:	61a3      	str	r3, [r4, #24]
 80142e0:	6923      	ldr	r3, [r4, #16]
 80142e2:	b943      	cbnz	r3, 80142f6 <__swsetup_r+0xc6>
 80142e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80142e8:	d1ba      	bne.n	8014260 <__swsetup_r+0x30>
 80142ea:	bd70      	pop	{r4, r5, r6, pc}
 80142ec:	0781      	lsls	r1, r0, #30
 80142ee:	bf58      	it	pl
 80142f0:	6963      	ldrpl	r3, [r4, #20]
 80142f2:	60a3      	str	r3, [r4, #8]
 80142f4:	e7f4      	b.n	80142e0 <__swsetup_r+0xb0>
 80142f6:	2000      	movs	r0, #0
 80142f8:	e7f7      	b.n	80142ea <__swsetup_r+0xba>
 80142fa:	bf00      	nop
 80142fc:	200001b0 	.word	0x200001b0
 8014300:	0801aa30 	.word	0x0801aa30
 8014304:	0801aa50 	.word	0x0801aa50
 8014308:	0801aa10 	.word	0x0801aa10

0801430c <abort>:
 801430c:	b508      	push	{r3, lr}
 801430e:	2006      	movs	r0, #6
 8014310:	f000 f898 	bl	8014444 <raise>
 8014314:	2001      	movs	r0, #1
 8014316:	f7f0 f815 	bl	8004344 <_exit>

0801431a <__swhatbuf_r>:
 801431a:	b570      	push	{r4, r5, r6, lr}
 801431c:	460e      	mov	r6, r1
 801431e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014322:	2900      	cmp	r1, #0
 8014324:	b096      	sub	sp, #88	; 0x58
 8014326:	4614      	mov	r4, r2
 8014328:	461d      	mov	r5, r3
 801432a:	da07      	bge.n	801433c <__swhatbuf_r+0x22>
 801432c:	2300      	movs	r3, #0
 801432e:	602b      	str	r3, [r5, #0]
 8014330:	89b3      	ldrh	r3, [r6, #12]
 8014332:	061a      	lsls	r2, r3, #24
 8014334:	d410      	bmi.n	8014358 <__swhatbuf_r+0x3e>
 8014336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801433a:	e00e      	b.n	801435a <__swhatbuf_r+0x40>
 801433c:	466a      	mov	r2, sp
 801433e:	f000 f89d 	bl	801447c <_fstat_r>
 8014342:	2800      	cmp	r0, #0
 8014344:	dbf2      	blt.n	801432c <__swhatbuf_r+0x12>
 8014346:	9a01      	ldr	r2, [sp, #4]
 8014348:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801434c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014350:	425a      	negs	r2, r3
 8014352:	415a      	adcs	r2, r3
 8014354:	602a      	str	r2, [r5, #0]
 8014356:	e7ee      	b.n	8014336 <__swhatbuf_r+0x1c>
 8014358:	2340      	movs	r3, #64	; 0x40
 801435a:	2000      	movs	r0, #0
 801435c:	6023      	str	r3, [r4, #0]
 801435e:	b016      	add	sp, #88	; 0x58
 8014360:	bd70      	pop	{r4, r5, r6, pc}
	...

08014364 <__smakebuf_r>:
 8014364:	898b      	ldrh	r3, [r1, #12]
 8014366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014368:	079d      	lsls	r5, r3, #30
 801436a:	4606      	mov	r6, r0
 801436c:	460c      	mov	r4, r1
 801436e:	d507      	bpl.n	8014380 <__smakebuf_r+0x1c>
 8014370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014374:	6023      	str	r3, [r4, #0]
 8014376:	6123      	str	r3, [r4, #16]
 8014378:	2301      	movs	r3, #1
 801437a:	6163      	str	r3, [r4, #20]
 801437c:	b002      	add	sp, #8
 801437e:	bd70      	pop	{r4, r5, r6, pc}
 8014380:	ab01      	add	r3, sp, #4
 8014382:	466a      	mov	r2, sp
 8014384:	f7ff ffc9 	bl	801431a <__swhatbuf_r>
 8014388:	9900      	ldr	r1, [sp, #0]
 801438a:	4605      	mov	r5, r0
 801438c:	4630      	mov	r0, r6
 801438e:	f7fd fa45 	bl	801181c <_malloc_r>
 8014392:	b948      	cbnz	r0, 80143a8 <__smakebuf_r+0x44>
 8014394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014398:	059a      	lsls	r2, r3, #22
 801439a:	d4ef      	bmi.n	801437c <__smakebuf_r+0x18>
 801439c:	f023 0303 	bic.w	r3, r3, #3
 80143a0:	f043 0302 	orr.w	r3, r3, #2
 80143a4:	81a3      	strh	r3, [r4, #12]
 80143a6:	e7e3      	b.n	8014370 <__smakebuf_r+0xc>
 80143a8:	4b0d      	ldr	r3, [pc, #52]	; (80143e0 <__smakebuf_r+0x7c>)
 80143aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80143ac:	89a3      	ldrh	r3, [r4, #12]
 80143ae:	6020      	str	r0, [r4, #0]
 80143b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143b4:	81a3      	strh	r3, [r4, #12]
 80143b6:	9b00      	ldr	r3, [sp, #0]
 80143b8:	6163      	str	r3, [r4, #20]
 80143ba:	9b01      	ldr	r3, [sp, #4]
 80143bc:	6120      	str	r0, [r4, #16]
 80143be:	b15b      	cbz	r3, 80143d8 <__smakebuf_r+0x74>
 80143c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143c4:	4630      	mov	r0, r6
 80143c6:	f000 f86b 	bl	80144a0 <_isatty_r>
 80143ca:	b128      	cbz	r0, 80143d8 <__smakebuf_r+0x74>
 80143cc:	89a3      	ldrh	r3, [r4, #12]
 80143ce:	f023 0303 	bic.w	r3, r3, #3
 80143d2:	f043 0301 	orr.w	r3, r3, #1
 80143d6:	81a3      	strh	r3, [r4, #12]
 80143d8:	89a0      	ldrh	r0, [r4, #12]
 80143da:	4305      	orrs	r5, r0
 80143dc:	81a5      	strh	r5, [r4, #12]
 80143de:	e7cd      	b.n	801437c <__smakebuf_r+0x18>
 80143e0:	080115c9 	.word	0x080115c9

080143e4 <_malloc_usable_size_r>:
 80143e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143e8:	1f18      	subs	r0, r3, #4
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	bfbc      	itt	lt
 80143ee:	580b      	ldrlt	r3, [r1, r0]
 80143f0:	18c0      	addlt	r0, r0, r3
 80143f2:	4770      	bx	lr

080143f4 <_raise_r>:
 80143f4:	291f      	cmp	r1, #31
 80143f6:	b538      	push	{r3, r4, r5, lr}
 80143f8:	4604      	mov	r4, r0
 80143fa:	460d      	mov	r5, r1
 80143fc:	d904      	bls.n	8014408 <_raise_r+0x14>
 80143fe:	2316      	movs	r3, #22
 8014400:	6003      	str	r3, [r0, #0]
 8014402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014406:	bd38      	pop	{r3, r4, r5, pc}
 8014408:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801440a:	b112      	cbz	r2, 8014412 <_raise_r+0x1e>
 801440c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014410:	b94b      	cbnz	r3, 8014426 <_raise_r+0x32>
 8014412:	4620      	mov	r0, r4
 8014414:	f000 f830 	bl	8014478 <_getpid_r>
 8014418:	462a      	mov	r2, r5
 801441a:	4601      	mov	r1, r0
 801441c:	4620      	mov	r0, r4
 801441e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014422:	f000 b817 	b.w	8014454 <_kill_r>
 8014426:	2b01      	cmp	r3, #1
 8014428:	d00a      	beq.n	8014440 <_raise_r+0x4c>
 801442a:	1c59      	adds	r1, r3, #1
 801442c:	d103      	bne.n	8014436 <_raise_r+0x42>
 801442e:	2316      	movs	r3, #22
 8014430:	6003      	str	r3, [r0, #0]
 8014432:	2001      	movs	r0, #1
 8014434:	e7e7      	b.n	8014406 <_raise_r+0x12>
 8014436:	2400      	movs	r4, #0
 8014438:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801443c:	4628      	mov	r0, r5
 801443e:	4798      	blx	r3
 8014440:	2000      	movs	r0, #0
 8014442:	e7e0      	b.n	8014406 <_raise_r+0x12>

08014444 <raise>:
 8014444:	4b02      	ldr	r3, [pc, #8]	; (8014450 <raise+0xc>)
 8014446:	4601      	mov	r1, r0
 8014448:	6818      	ldr	r0, [r3, #0]
 801444a:	f7ff bfd3 	b.w	80143f4 <_raise_r>
 801444e:	bf00      	nop
 8014450:	200001b0 	.word	0x200001b0

08014454 <_kill_r>:
 8014454:	b538      	push	{r3, r4, r5, lr}
 8014456:	4d07      	ldr	r5, [pc, #28]	; (8014474 <_kill_r+0x20>)
 8014458:	2300      	movs	r3, #0
 801445a:	4604      	mov	r4, r0
 801445c:	4608      	mov	r0, r1
 801445e:	4611      	mov	r1, r2
 8014460:	602b      	str	r3, [r5, #0]
 8014462:	f7ef ff5f 	bl	8004324 <_kill>
 8014466:	1c43      	adds	r3, r0, #1
 8014468:	d102      	bne.n	8014470 <_kill_r+0x1c>
 801446a:	682b      	ldr	r3, [r5, #0]
 801446c:	b103      	cbz	r3, 8014470 <_kill_r+0x1c>
 801446e:	6023      	str	r3, [r4, #0]
 8014470:	bd38      	pop	{r3, r4, r5, pc}
 8014472:	bf00      	nop
 8014474:	2000ef4c 	.word	0x2000ef4c

08014478 <_getpid_r>:
 8014478:	f7ef bf4c 	b.w	8004314 <_getpid>

0801447c <_fstat_r>:
 801447c:	b538      	push	{r3, r4, r5, lr}
 801447e:	4d07      	ldr	r5, [pc, #28]	; (801449c <_fstat_r+0x20>)
 8014480:	2300      	movs	r3, #0
 8014482:	4604      	mov	r4, r0
 8014484:	4608      	mov	r0, r1
 8014486:	4611      	mov	r1, r2
 8014488:	602b      	str	r3, [r5, #0]
 801448a:	f7ef ffaa 	bl	80043e2 <_fstat>
 801448e:	1c43      	adds	r3, r0, #1
 8014490:	d102      	bne.n	8014498 <_fstat_r+0x1c>
 8014492:	682b      	ldr	r3, [r5, #0]
 8014494:	b103      	cbz	r3, 8014498 <_fstat_r+0x1c>
 8014496:	6023      	str	r3, [r4, #0]
 8014498:	bd38      	pop	{r3, r4, r5, pc}
 801449a:	bf00      	nop
 801449c:	2000ef4c 	.word	0x2000ef4c

080144a0 <_isatty_r>:
 80144a0:	b538      	push	{r3, r4, r5, lr}
 80144a2:	4d06      	ldr	r5, [pc, #24]	; (80144bc <_isatty_r+0x1c>)
 80144a4:	2300      	movs	r3, #0
 80144a6:	4604      	mov	r4, r0
 80144a8:	4608      	mov	r0, r1
 80144aa:	602b      	str	r3, [r5, #0]
 80144ac:	f7ef ffa9 	bl	8004402 <_isatty>
 80144b0:	1c43      	adds	r3, r0, #1
 80144b2:	d102      	bne.n	80144ba <_isatty_r+0x1a>
 80144b4:	682b      	ldr	r3, [r5, #0]
 80144b6:	b103      	cbz	r3, 80144ba <_isatty_r+0x1a>
 80144b8:	6023      	str	r3, [r4, #0]
 80144ba:	bd38      	pop	{r3, r4, r5, pc}
 80144bc:	2000ef4c 	.word	0x2000ef4c

080144c0 <_init>:
 80144c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144c2:	bf00      	nop
 80144c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144c6:	bc08      	pop	{r3}
 80144c8:	469e      	mov	lr, r3
 80144ca:	4770      	bx	lr

080144cc <_fini>:
 80144cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144ce:	bf00      	nop
 80144d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144d2:	bc08      	pop	{r3}
 80144d4:	469e      	mov	lr, r3
 80144d6:	4770      	bx	lr
