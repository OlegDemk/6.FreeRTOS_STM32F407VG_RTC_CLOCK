
6.FreeRTOS_STM32F407VG_RTC_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014978  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000699c  08014b08  08014b08  00024b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b4a4  0801b4a4  00030380  2**0
                  CONTENTS
  4 .ARM          00000008  0801b4a4  0801b4a4  0002b4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b4ac  0801b4ac  00030380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b4ac  0801b4ac  0002b4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b4b0  0801b4b0  0002b4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  0801b4b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030380  2**0
                  CONTENTS
 10 .bss          0000ee24  20000380  20000380  00030380  2**2
                  ALLOC
 11 ._user_heap_stack 00001104  2000f1a4  2000f1a4  00030380  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034fc8  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006df2  00000000  00000000  00065378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002418  00000000  00000000  0006c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002138  00000000  00000000  0006e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b17  00000000  00000000  000706c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c84c  00000000  00000000  0009a1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec249  00000000  00000000  000c6a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b2c6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a7dc  00000000  00000000  001b2cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000380 	.word	0x20000380
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014af0 	.word	0x08014af0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000384 	.word	0x20000384
 80001cc:	08014af0 	.word	0x08014af0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <TP_Read>:
#include "stm32f4xx_hal.h"


//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8000ee6:	2310      	movs	r3, #16
 8000ee8:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8000eee:	e019      	b.n	8000f24 <TP_Read+0x44>
    {
        value <<= 1;
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <TP_Read+0x54>)
 8000efc:	f005 fb20 	bl	8006540 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <TP_Read+0x54>)
 8000f06:	f005 fb1b 	bl	8006540 <HAL_GPIO_WritePin>

        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <TP_Read+0x58>)
 8000f0e:	f005 faff 	bl	8006510 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <TP_Read+0x3e>
        {
            value++;
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1e2      	bne.n	8000ef0 <TP_Read+0x10>
    };

    return value;
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40021000 	.word	0x40021000

08000f3c <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8000f46:	2308      	movs	r3, #8
 8000f48:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <TP_Write+0x68>)
 8000f50:	f005 faf6 	bl	8006540 <HAL_GPIO_WritePin>

    while(i > 0)
 8000f54:	e01e      	b.n	8000f94 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da05      	bge.n	8000f6a <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2104      	movs	r1, #4
 8000f62:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <TP_Write+0x6c>)
 8000f64:	f005 faec 	bl	8006540 <HAL_GPIO_WritePin>
 8000f68:	e004      	b.n	8000f74 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <TP_Write+0x6c>)
 8000f70:	f005 fae6 	bl	8006540 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <TP_Write+0x68>)
 8000f80:	f005 fade 	bl	8006540 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <TP_Write+0x68>)
 8000f8a:	f005 fad9 	bl	8006540 <HAL_GPIO_WritePin>
        i--;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1dd      	bne.n	8000f56 <TP_Write+0x1a>
    };
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	00000000 	.word	0x00000000

08000fb0 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b08b      	sub	sp, #44	; 0x2c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	4862      	ldr	r0, [pc, #392]	; (8001148 <TP_Read_Coordinates+0x198>)
 8000fbe:	f005 fabf 	bl	8006540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4861      	ldr	r0, [pc, #388]	; (800114c <TP_Read_Coordinates+0x19c>)
 8000fc8:	f005 faba 	bl	8006540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd2:	485d      	ldr	r0, [pc, #372]	; (8001148 <TP_Read_Coordinates+0x198>)
 8000fd4:	f005 fab4 	bl	8006540 <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
	uint16_t rawx = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	81fb      	strh	r3, [r7, #14]
	uint16_t rawy = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	81bb      	strh	r3, [r7, #12]
	uint32_t calculating_x =0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
	uint32_t calculating_y = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]

    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8000ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff4:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001000:	4851      	ldr	r0, [pc, #324]	; (8001148 <TP_Read_Coordinates+0x198>)
 8001002:	f005 fa9d 	bl	8006540 <HAL_GPIO_WritePin>


    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001006:	e023      	b.n	8001050 <TP_Read_Coordinates+0xa0>
    {
        TP_Write(CMD_RDY);
 8001008:	2090      	movs	r0, #144	; 0x90
 800100a:	f7ff ff97 	bl	8000f3c <TP_Write>

		rawy = TP_Read();
 800100e:	f7ff ff67 	bl	8000ee0 <TP_Read>
 8001012:	4603      	mov	r3, r0
 8001014:	81bb      	strh	r3, [r7, #12]
		avg_y += rawy;
 8001016:	89bb      	ldrh	r3, [r7, #12]
 8001018:	6a3a      	ldr	r2, [r7, #32]
 800101a:	4413      	add	r3, r2
 800101c:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 800101e:	89bb      	ldrh	r3, [r7, #12]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4413      	add	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]


        TP_Write(CMD_RDX);
 8001026:	20d0      	movs	r0, #208	; 0xd0
 8001028:	f7ff ff88 	bl	8000f3c <TP_Write>
        rawx = TP_Read();
 800102c:	f7ff ff58 	bl	8000ee0 <TP_Read>
 8001030:	4603      	mov	r3, r0
 8001032:	81fb      	strh	r3, [r7, #14]
		avg_x += rawx;
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001038:	4413      	add	r3, r2
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 800103c:	89fb      	ldrh	r3, [r7, #14]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	4413      	add	r3, r2
 8001042:	61fb      	str	r3, [r7, #28]
        samples--;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3b01      	subs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
		counted_samples++;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <TP_Read_Coordinates+0xb6>
 8001056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105a:	483d      	ldr	r0, [pc, #244]	; (8001150 <TP_Read_Coordinates+0x1a0>)
 800105c:	f005 fa58 	bl	8006510 <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0d0      	beq.n	8001008 <TP_Read_Coordinates+0x58>
    };

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106c:	4836      	ldr	r0, [pc, #216]	; (8001148 <TP_Read_Coordinates+0x198>)
 800106e:	f005 fa67 	bl	8006540 <HAL_GPIO_WritePin>


		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001078:	d154      	bne.n	8001124 <TP_Read_Coordinates+0x174>
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	4834      	ldr	r0, [pc, #208]	; (8001150 <TP_Read_Coordinates+0x1a0>)
 8001080:	f005 fa46 	bl	8006510 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d14c      	bne.n	8001124 <TP_Read_Coordinates+0x174>
		{

		calculating_x /= counted_samples;
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fbb2 f3f3 	udiv	r3, r2, r3
 800109c:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	81fb      	strh	r3, [r7, #14]
		rawy = calculating_y;
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	81bb      	strh	r3, [r7, #12]

		rawx *= -1;
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	425b      	negs	r3, r3
 80010aa:	81fb      	strh	r3, [r7, #14]
		rawy *= -1;
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	425b      	negs	r3, r3
 80010b0:	81bb      	strh	r3, [r7, #12]

		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
        Coordinates[1] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 80010b2:	89fa      	ldrh	r2, [r7, #14]
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <TP_Read_Coordinates+0x1a4>)
 80010b6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	0852      	lsrs	r2, r2, #1
 80010be:	4413      	add	r3, r2
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa2b 	bl	8000524 <__aeabi_i2d>
 80010ce:	a31c      	add	r3, pc, #112	; (adr r3, 8001140 <TP_Read_Coordinates+0x190>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fa90 	bl	80005f8 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1c9c      	adds	r4, r3, #2
 80010e4:	f7ff fd60 	bl	8000ba8 <__aeabi_d2uiz>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	8023      	strh	r3, [r4, #0]
		Coordinates[0] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 80010ee:	89bb      	ldrh	r3, [r7, #12]
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <TP_Read_Coordinates+0x1a8>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	09db      	lsrs	r3, r3, #7
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	3b0f      	subs	r3, #15
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa11 	bl	8000524 <__aeabi_i2d>
 8001102:	a30f      	add	r3, pc, #60	; (adr r3, 8001140 <TP_Read_Coordinates+0x190>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fa76 	bl	80005f8 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fd48 	bl	8000ba8 <__aeabi_d2uiz>
 8001118:	4603      	mov	r3, r0
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 8001120:	2301      	movs	r3, #1
 8001122:	e007      	b.n	8001134 <TP_Read_Coordinates+0x184>
		}
		else
		{
			Coordinates[0] = 0;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3302      	adds	r3, #2
 800112e:	2200      	movs	r2, #0
 8001130:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8001132:	2300      	movs	r3, #0
		}
}
 8001134:	4618      	mov	r0, r3
 8001136:	372c      	adds	r7, #44	; 0x2c
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	f3af 8000 	nop.w
 8001140:	28f5c28f 	.word	0x28f5c28f
 8001144:	3ff28f5c 	.word	0x3ff28f5c
 8001148:	40020400 	.word	0x40020400
 800114c:	40021000 	.word	0x40021000
 8001150:	40020800 	.word	0x40020800
 8001154:	e01e01e1 	.word	0xe01e01e1
 8001158:	a0a0a0a1 	.word	0xa0a0a0a1

0800115c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <TP_Touchpad_Pressed+0x20>)
 8001166:	f005 f9d3 	bl	8006510 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <TP_Touchpad_Pressed+0x18>
	{
		return TOUCHPAD_PRESSED;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <TP_Touchpad_Pressed+0x1a>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001174:	2300      	movs	r3, #0
	}
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020800 	.word	0x40020800

08001180 <TFT9341_FontsIni>:

static void TFT9341_WriteData(uint8_t* buff, size_t buff_size);

// ---------------------------------------------------------------------------------
void TFT9341_FontsIni(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  Font8.Height = 8;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <TFT9341_FontsIni+0x60>)
 8001186:	2208      	movs	r2, #8
 8001188:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <TFT9341_FontsIni+0x60>)
 800118c:	2205      	movs	r2, #5
 800118e:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <TFT9341_FontsIni+0x64>)
 8001192:	220c      	movs	r2, #12
 8001194:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <TFT9341_FontsIni+0x64>)
 8001198:	2207      	movs	r2, #7
 800119a:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <TFT9341_FontsIni+0x68>)
 800119e:	2210      	movs	r2, #16
 80011a0:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <TFT9341_FontsIni+0x68>)
 80011a4:	220b      	movs	r2, #11
 80011a6:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <TFT9341_FontsIni+0x6c>)
 80011aa:	2214      	movs	r2, #20
 80011ac:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <TFT9341_FontsIni+0x6c>)
 80011b0:	220e      	movs	r2, #14
 80011b2:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <TFT9341_FontsIni+0x70>)
 80011b6:	2218      	movs	r2, #24
 80011b8:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <TFT9341_FontsIni+0x70>)
 80011bc:	2211      	movs	r2, #17
 80011be:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT9341_BLACK;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT9341_GREEN;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011c8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011cc:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <TFT9341_FontsIni+0x68>)
 80011d2:	605a      	str	r2, [r3, #4]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000020 	.word	0x20000020
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000010 	.word	0x20000010
 80011f0:	20000018 	.word	0x20000018
 80011f4:	20007640 	.word	0x20007640

080011f8 <TFT9341_SendData>:
// ---------------------------------------------------------------------------------
void TFT9341_SendData(uint8_t dt)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	DC_DATA();
 8001202:	2201      	movs	r2, #1
 8001204:	2140      	movs	r1, #64	; 0x40
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <TFT9341_SendData+0x2c>)
 8001208:	f005 f99a 	bl	8006540 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi2, &dt, 1, 5000);
 800120c:	1df9      	adds	r1, r7, #7
 800120e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001212:	2201      	movs	r2, #1
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <TFT9341_SendData+0x30>)
 8001216:	f008 fa00 	bl	800961a <HAL_SPI_Transmit>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	200076f0 	.word	0x200076f0

0800122c <TFT9341_SendCommand>:
// ---------------------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <TFT9341_SendCommand+0x2c>)
 800123c:	f005 f980 	bl	8006540 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi2, &cmd, 1, 5000);
 8001240:	1df9      	adds	r1, r7, #7
 8001242:	f241 3388 	movw	r3, #5000	; 0x1388
 8001246:	2201      	movs	r2, #1
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <TFT9341_SendCommand+0x30>)
 800124a:	f008 f9e6 	bl	800961a <HAL_SPI_Transmit>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	200076f0 	.word	0x200076f0

08001260 <TFT9341_reset>:
// ---------------------------------------------------------------------------------
void TFT9341_reset(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8001264:	2200      	movs	r2, #0
 8001266:	2120      	movs	r1, #32
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <TFT9341_reset+0x24>)
 800126a:	f005 f969 	bl	8006540 <HAL_GPIO_WritePin>
	osDelay(5);
 800126e:	2005      	movs	r0, #5
 8001270:	f00c fdae 	bl	800ddd0 <osDelay>
	RESET_IDLE();
 8001274:	2201      	movs	r2, #1
 8001276:	2120      	movs	r1, #32
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TFT9341_reset+0x24>)
 800127a:	f005 f961 	bl	8006540 <HAL_GPIO_WritePin>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <TFT9341_ini>:
// ---------------------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	4613      	mov	r3, r2
 8001296:	80bb      	strh	r3, [r7, #4]
  uint8_t data[15];
  CS_ACTIVE();
 8001298:	2200      	movs	r2, #0
 800129a:	2110      	movs	r1, #16
 800129c:	48a3      	ldr	r0, [pc, #652]	; (800152c <TFT9341_ini+0x2a4>)
 800129e:	f005 f94f 	bl	8006540 <HAL_GPIO_WritePin>
  TFT9341_reset();
 80012a2:	f7ff ffdd 	bl	8001260 <TFT9341_reset>

  //Software Reset
  TFT9341_SendCommand(0x01);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff ffc0 	bl	800122c <TFT9341_SendCommand>
  osDelay(1000);
 80012ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b0:	f00c fd8e 	bl	800ddd0 <osDelay>

  //Power Control A
    data[0] = 0x39;
 80012b4:	2339      	movs	r3, #57	; 0x39
 80012b6:	723b      	strb	r3, [r7, #8]
    data[1] = 0x2C;
 80012b8:	232c      	movs	r3, #44	; 0x2c
 80012ba:	727b      	strb	r3, [r7, #9]
    data[2] = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x34;
 80012c0:	2334      	movs	r3, #52	; 0x34
 80012c2:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x02;
 80012c4:	2302      	movs	r3, #2
 80012c6:	733b      	strb	r3, [r7, #12]
    TFT9341_SendCommand(0xCB);
 80012c8:	20cb      	movs	r0, #203	; 0xcb
 80012ca:	f7ff ffaf 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 5);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2105      	movs	r1, #5
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f92f 	bl	8001538 <TFT9341_WriteData>
    //Power Control B
    data[0] = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	723b      	strb	r3, [r7, #8]
    data[1] = 0xC1;
 80012de:	23c1      	movs	r3, #193	; 0xc1
 80012e0:	727b      	strb	r3, [r7, #9]
    data[2] = 0x30;
 80012e2:	2330      	movs	r3, #48	; 0x30
 80012e4:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xCF);
 80012e6:	20cf      	movs	r0, #207	; 0xcf
 80012e8:	f7ff ffa0 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2103      	movs	r1, #3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f920 	bl	8001538 <TFT9341_WriteData>
    //Driver timing control A
    data[0] = 0x85;
 80012f8:	2385      	movs	r3, #133	; 0x85
 80012fa:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	727b      	strb	r3, [r7, #9]
    data[2] = 0x78;
 8001300:	2378      	movs	r3, #120	; 0x78
 8001302:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xE8);
 8001304:	20e8      	movs	r0, #232	; 0xe8
 8001306:	f7ff ff91 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	2103      	movs	r1, #3
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f911 	bl	8001538 <TFT9341_WriteData>
    //Driver timing control B
    data[0] = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 800131a:	2300      	movs	r3, #0
 800131c:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xEA);
 800131e:	20ea      	movs	r0, #234	; 0xea
 8001320:	f7ff ff84 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f904 	bl	8001538 <TFT9341_WriteData>
    //Power on Sequence control
    data[0] = 0x64;
 8001330:	2364      	movs	r3, #100	; 0x64
 8001332:	723b      	strb	r3, [r7, #8]
    data[1] = 0x03;
 8001334:	2303      	movs	r3, #3
 8001336:	727b      	strb	r3, [r7, #9]
    data[2] = 0x12;
 8001338:	2312      	movs	r3, #18
 800133a:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x81;
 800133c:	2381      	movs	r3, #129	; 0x81
 800133e:	72fb      	strb	r3, [r7, #11]
    TFT9341_SendCommand(0xED);
 8001340:	20ed      	movs	r0, #237	; 0xed
 8001342:	f7ff ff73 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 4);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2104      	movs	r1, #4
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f8f3 	bl	8001538 <TFT9341_WriteData>
    //Pump ratio control
    data[0] = 0x20;
 8001352:	2320      	movs	r3, #32
 8001354:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF7);
 8001356:	20f7      	movs	r0, #247	; 0xf7
 8001358:	f7ff ff68 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f8e8 	bl	8001538 <TFT9341_WriteData>
    //Power Control,VRH[5:0]
    data[0] = 0x10;
 8001368:	2310      	movs	r3, #16
 800136a:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC0);
 800136c:	20c0      	movs	r0, #192	; 0xc0
 800136e:	f7ff ff5d 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f8dd 	bl	8001538 <TFT9341_WriteData>
    //Power Control,SAP[2:0];BT[3:0]
    data[0] = 0x10;
 800137e:	2310      	movs	r3, #16
 8001380:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC1);
 8001382:	20c1      	movs	r0, #193	; 0xc1
 8001384:	f7ff ff52 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	2101      	movs	r1, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f8d2 	bl	8001538 <TFT9341_WriteData>
    //VCOM Control 1
    data[0] = 0x3E;
 8001394:	233e      	movs	r3, #62	; 0x3e
 8001396:	723b      	strb	r3, [r7, #8]
    data[1] = 0x28;
 8001398:	2328      	movs	r3, #40	; 0x28
 800139a:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xC5);
 800139c:	20c5      	movs	r0, #197	; 0xc5
 800139e:	f7ff ff45 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2102      	movs	r1, #2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f8c5 	bl	8001538 <TFT9341_WriteData>
    //VCOM Control 2
    data[0] = 0x86;
 80013ae:	2386      	movs	r3, #134	; 0x86
 80013b0:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC7);
 80013b2:	20c7      	movs	r0, #199	; 0xc7
 80013b4:	f7ff ff3a 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f8ba 	bl	8001538 <TFT9341_WriteData>
    //Memory Acsess Control
    data[0] = 0x48;
 80013c4:	2348      	movs	r3, #72	; 0x48
 80013c6:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x36);
 80013c8:	2036      	movs	r0, #54	; 0x36
 80013ca:	f7ff ff2f 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f8af 	bl	8001538 <TFT9341_WriteData>
    //Pixel Format Set
    data[0] = 0x55;//16bit
 80013da:	2355      	movs	r3, #85	; 0x55
 80013dc:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x3A);
 80013de:	203a      	movs	r0, #58	; 0x3a
 80013e0:	f7ff ff24 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2101      	movs	r1, #1
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f8a4 	bl	8001538 <TFT9341_WriteData>
    //Frame Rratio Control, Standard RGB Color
    data[0] = 0x00;
 80013f0:	2300      	movs	r3, #0
 80013f2:	723b      	strb	r3, [r7, #8]
    data[1] = 0x18;
 80013f4:	2318      	movs	r3, #24
 80013f6:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xB1);
 80013f8:	20b1      	movs	r0, #177	; 0xb1
 80013fa:	f7ff ff17 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	2102      	movs	r1, #2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f897 	bl	8001538 <TFT9341_WriteData>
    //Display Function Control
    data[0] = 0x08;
 800140a:	2308      	movs	r3, #8
 800140c:	723b      	strb	r3, [r7, #8]
    data[1] = 0x82;
 800140e:	2382      	movs	r3, #130	; 0x82
 8001410:	727b      	strb	r3, [r7, #9]
    data[2] = 0x27;//320 строк
 8001412:	2327      	movs	r3, #39	; 0x27
 8001414:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xB6);
 8001416:	20b6      	movs	r0, #182	; 0xb6
 8001418:	f7ff ff08 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	2103      	movs	r1, #3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f888 	bl	8001538 <TFT9341_WriteData>
    //Enable 3G (пока не знаю что это за режим)
    data[0] = 0x00;//не включаем
 8001428:	2300      	movs	r3, #0
 800142a:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF2);
 800142c:	20f2      	movs	r0, #242	; 0xf2
 800142e:	f7ff fefd 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2101      	movs	r1, #1
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f87d 	bl	8001538 <TFT9341_WriteData>
    //Gamma set
    data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 800143e:	2301      	movs	r3, #1
 8001440:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x26);
 8001442:	2026      	movs	r0, #38	; 0x26
 8001444:	f7ff fef2 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f872 	bl	8001538 <TFT9341_WriteData>
    //Positive Gamma  Correction
    data[0] = 0x0F;
 8001454:	230f      	movs	r3, #15
 8001456:	723b      	strb	r3, [r7, #8]
    data[1] = 0x31;
 8001458:	2331      	movs	r3, #49	; 0x31
 800145a:	727b      	strb	r3, [r7, #9]
    data[2] = 0x2B;
 800145c:	232b      	movs	r3, #43	; 0x2b
 800145e:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x0C;
 8001460:	230c      	movs	r3, #12
 8001462:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x0E;
 8001464:	230e      	movs	r3, #14
 8001466:	733b      	strb	r3, [r7, #12]
    data[5] = 0x08;
 8001468:	2308      	movs	r3, #8
 800146a:	737b      	strb	r3, [r7, #13]
    data[6] = 0x4E;
 800146c:	234e      	movs	r3, #78	; 0x4e
 800146e:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xF1;
 8001470:	23f1      	movs	r3, #241	; 0xf1
 8001472:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x37;
 8001474:	2337      	movs	r3, #55	; 0x37
 8001476:	743b      	strb	r3, [r7, #16]
    data[9] = 0x07;
 8001478:	2307      	movs	r3, #7
 800147a:	747b      	strb	r3, [r7, #17]
    data[10] = 0x10;
 800147c:	2310      	movs	r3, #16
 800147e:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x03;
 8001480:	2303      	movs	r3, #3
 8001482:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x0E;
 8001484:	230e      	movs	r3, #14
 8001486:	753b      	strb	r3, [r7, #20]
    data[13] = 0x09;
 8001488:	2309      	movs	r3, #9
 800148a:	757b      	strb	r3, [r7, #21]
    data[14] = 0x00;
 800148c:	2300      	movs	r3, #0
 800148e:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE0);
 8001490:	20e0      	movs	r0, #224	; 0xe0
 8001492:	f7ff fecb 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	210f      	movs	r1, #15
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f84b 	bl	8001538 <TFT9341_WriteData>
    //Negative Gamma  Correction
    data[0] = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	723b      	strb	r3, [r7, #8]
    data[1] = 0x0E;
 80014a6:	230e      	movs	r3, #14
 80014a8:	727b      	strb	r3, [r7, #9]
    data[2] = 0x14;
 80014aa:	2314      	movs	r3, #20
 80014ac:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x03;
 80014ae:	2303      	movs	r3, #3
 80014b0:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x11;
 80014b2:	2311      	movs	r3, #17
 80014b4:	733b      	strb	r3, [r7, #12]
    data[5] = 0x07;
 80014b6:	2307      	movs	r3, #7
 80014b8:	737b      	strb	r3, [r7, #13]
    data[6] = 0x31;
 80014ba:	2331      	movs	r3, #49	; 0x31
 80014bc:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xC1;
 80014be:	23c1      	movs	r3, #193	; 0xc1
 80014c0:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x48;
 80014c2:	2348      	movs	r3, #72	; 0x48
 80014c4:	743b      	strb	r3, [r7, #16]
    data[9] = 0x08;
 80014c6:	2308      	movs	r3, #8
 80014c8:	747b      	strb	r3, [r7, #17]
    data[10] = 0x0F;
 80014ca:	230f      	movs	r3, #15
 80014cc:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x0C;
 80014ce:	230c      	movs	r3, #12
 80014d0:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x31;
 80014d2:	2331      	movs	r3, #49	; 0x31
 80014d4:	753b      	strb	r3, [r7, #20]
    data[13] = 0x36;
 80014d6:	2336      	movs	r3, #54	; 0x36
 80014d8:	757b      	strb	r3, [r7, #21]
    data[14] = 0x0F;
 80014da:	230f      	movs	r3, #15
 80014dc:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE1);
 80014de:	20e1      	movs	r0, #225	; 0xe1
 80014e0:	f7ff fea4 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	210f      	movs	r1, #15
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f824 	bl	8001538 <TFT9341_WriteData>
    TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 80014f0:	2011      	movs	r0, #17
 80014f2:	f7ff fe9b 	bl	800122c <TFT9341_SendCommand>

    osDelay(120);
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f00c fc6a 	bl	800ddd0 <osDelay>

    //Display ON
    data[0] = TFT9341_ROTATION;
 80014fc:	2348      	movs	r3, #72	; 0x48
 80014fe:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x29);
 8001500:	2029      	movs	r0, #41	; 0x29
 8001502:	f7ff fe93 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f000 f813 	bl	8001538 <TFT9341_WriteData>

    TFT9341_WIDTH = w_size;
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <TFT9341_ini+0x2a8>)
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	8013      	strh	r3, [r2, #0]
    TFT9341_HEIGHT = h_size;
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <TFT9341_ini+0x2ac>)
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	8013      	strh	r3, [r2, #0]

    TFT9341_FontsIni();
 800151e:	f7ff fe2f 	bl	8001180 <TFT9341_FontsIni>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	2000763e 	.word	0x2000763e
 8001534:	2000763c 	.word	0x2000763c

08001538 <TFT9341_WriteData>:
// ---------------------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8001542:	2201      	movs	r2, #1
 8001544:	2140      	movs	r1, #64	; 0x40
 8001546:	4811      	ldr	r0, [pc, #68]	; (800158c <TFT9341_WriteData+0x54>)
 8001548:	f004 fffa 	bl	8006540 <HAL_GPIO_WritePin>
	while(buff_size > 0)
 800154c:	e015      	b.n	800157a <TFT9341_WriteData+0x42>
	{
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001554:	bf28      	it	cs
 8001556:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800155a:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 800155c:	89fa      	ldrh	r2, [r7, #14]
 800155e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <TFT9341_WriteData+0x58>)
 8001566:	f008 f858 	bl	800961a <HAL_SPI_Transmit>
		buff += chunk_size;
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	603b      	str	r3, [r7, #0]
	while(buff_size > 0)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e6      	bne.n	800154e <TFT9341_WriteData+0x16>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	200076f0 	.word	0x200076f0

08001594 <TFT9341_SetAddrWindow>:
// ---------------------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	80fb      	strh	r3, [r7, #6]
 80015a6:	4603      	mov	r3, r0
 80015a8:	80bb      	strh	r3, [r7, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	807b      	strh	r3, [r7, #2]
 80015ae:	4613      	mov	r3, r2
 80015b0:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 80015b2:	202a      	movs	r0, #42	; 0x2a
 80015b4:	f7ff fe3a 	bl	800122c <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	733b      	strb	r3, [r7, #12]
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	737b      	strb	r3, [r7, #13]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	73bb      	strb	r3, [r7, #14]
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2104      	movs	r1, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ffaa 	bl	8001538 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 80015e4:	202b      	movs	r0, #43	; 0x2b
 80015e6:	f7ff fe21 	bl	800122c <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80015ea:	88bb      	ldrh	r3, [r7, #4]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	723b      	strb	r3, [r7, #8]
 80015f4:	88bb      	ldrh	r3, [r7, #4]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	727b      	strb	r3, [r7, #9]
 80015fa:	883b      	ldrh	r3, [r7, #0]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	b29b      	uxth	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	72bb      	strb	r3, [r7, #10]
 8001604:	883b      	ldrh	r3, [r7, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2104      	movs	r1, #4
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff91 	bl	8001538 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 8001616:	202c      	movs	r0, #44	; 0x2c
 8001618:	f7ff fe08 	bl	800122c <TFT9341_SendCommand>
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}

08001624 <TFT9341_FillScreen>:
//      HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
//  }
}
// ---------------------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
	// With DMA
	uint32_t i, n;
	  TFT9341_SetAddrWindow(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1);
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <TFT9341_FillScreen+0x90>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	3b01      	subs	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <TFT9341_FillScreen+0x94>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	3b01      	subs	r3, #1
 800163c:	b29b      	uxth	r3, r3
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff ffa7 	bl	8001594 <TFT9341_SetAddrWindow>
	  for(i=0;i<3200;i++)
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e011      	b.n	8001670 <TFT9341_FillScreen+0x4c>
	  {
	    frm_buf[i*2] = color >> 8;
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b2d1      	uxtb	r1, r2
 8001658:	4a18      	ldr	r2, [pc, #96]	; (80016bc <TFT9341_FillScreen+0x98>)
 800165a:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	3301      	adds	r3, #1
 8001662:	88fa      	ldrh	r2, [r7, #6]
 8001664:	b2d1      	uxtb	r1, r2
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <TFT9341_FillScreen+0x98>)
 8001668:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<3200;i++)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3301      	adds	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001676:	d3e9      	bcc.n	800164c <TFT9341_FillScreen+0x28>
	  }
	  n = 6400;
 8001678:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800167c:	60bb      	str	r3, [r7, #8]
	  DC_DATA();
 800167e:	2201      	movs	r2, #1
 8001680:	2140      	movs	r1, #64	; 0x40
 8001682:	480f      	ldr	r0, [pc, #60]	; (80016c0 <TFT9341_FillScreen+0x9c>)
 8001684:	f004 ff5c 	bl	8006540 <HAL_GPIO_WritePin>
	  dma_spi_cnt = 24;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <TFT9341_FillScreen+0xa0>)
 800168a:	2218      	movs	r2, #24
 800168c:	601a      	str	r2, [r3, #0]
	  HAL_SPI_Transmit_DMA(&hspi2, frm_buf, n);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	b29b      	uxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	4909      	ldr	r1, [pc, #36]	; (80016bc <TFT9341_FillScreen+0x98>)
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <TFT9341_FillScreen+0xa4>)
 8001698:	f008 f8fc 	bl	8009894 <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 800169c:	bf00      	nop
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <TFT9341_FillScreen+0xa8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0fb      	beq.n	800169e <TFT9341_FillScreen+0x7a>
	  dma_spi_fl=0;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <TFT9341_FillScreen+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]

	///////////////////////////////////////////////////////////////////////////
	//   Without DMA
//  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000763e 	.word	0x2000763e
 80016b8:	2000763c 	.word	0x2000763c
 80016bc:	2000039c 	.word	0x2000039c
 80016c0:	40021000 	.word	0x40021000
 80016c4:	20000028 	.word	0x20000028
 80016c8:	200076f0 	.word	0x200076f0
 80016cc:	2000279c 	.word	0x2000279c

080016d0 <TFT9341_SetTextColor>:
		TFT9341_DrawPixel(x0-y,y0-x,color);
	}
}
// ---------------------------------------------------------------------------------
void TFT9341_SetTextColor(uint16_t color)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
  lcdprop.TextColor=color;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <TFT9341_SetTextColor+0x1c>)
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	8013      	strh	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20007640 	.word	0x20007640

080016f0 <TFT9341_SetBackColor>:
// ---------------------------------------------------------------------------------
void TFT9341_SetBackColor(uint16_t color)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
  lcdprop.BackColor=color;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <TFT9341_SetBackColor+0x1c>)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	8053      	strh	r3, [r2, #2]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	20007640 	.word	0x20007640

08001710 <TFT9341_DrawChar_DMA>:
    y++;
  }
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawChar_DMA(uint16_t x, uint16_t y, uint8_t c)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b08b      	sub	sp, #44	; 0x2c
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
 800171a:	460b      	mov	r3, r1
 800171c:	80bb      	strh	r3, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	70fb      	strb	r3, [r7, #3]

	uint32_t i = 0, j = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *c_t;
	uint8_t *pchar;
	uint32_t line=0;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]


	height = lcdprop.pFont->Height;
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	88db      	ldrh	r3, [r3, #6]
 8001734:	837b      	strh	r3, [r7, #26]
	width = lcdprop.pFont->Width;
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	889b      	ldrh	r3, [r3, #4]
 800173c:	833b      	strh	r3, [r7, #24]
	offset = 8 *((width + 7)/8) - width ;
 800173e:	8b3b      	ldrh	r3, [r7, #24]
 8001740:	3307      	adds	r3, #7
 8001742:	2b00      	cmp	r3, #0
 8001744:	da00      	bge.n	8001748 <TFT9341_DrawChar_DMA+0x38>
 8001746:	3307      	adds	r3, #7
 8001748:	10db      	asrs	r3, r3, #3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	8b3b      	ldrh	r3, [r7, #24]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	75fb      	strb	r3, [r7, #23]
	c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
 8001758:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	3b20      	subs	r3, #32
 8001762:	4965      	ldr	r1, [pc, #404]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001764:	6849      	ldr	r1, [r1, #4]
 8001766:	88c9      	ldrh	r1, [r1, #6]
 8001768:	fb01 f103 	mul.w	r1, r1, r3
 800176c:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	3307      	adds	r3, #7
 8001774:	2b00      	cmp	r3, #0
 8001776:	da00      	bge.n	800177a <TFT9341_DrawChar_DMA+0x6a>
 8001778:	3307      	adds	r3, #7
 800177a:	10db      	asrs	r3, r3, #3
 800177c:	fb03 f301 	mul.w	r3, r3, r1
 8001780:	4413      	add	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

	y = y - height;											// Because BUG inside function
 8001784:	88ba      	ldrh	r2, [r7, #4]
 8001786:	8b7b      	ldrh	r3, [r7, #26]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	80bb      	strh	r3, [r7, #4]

	for(i = 0; i < height; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
 8001790:	e07c      	b.n	800188c <TFT9341_DrawChar_DMA+0x17c>
	{
		pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 8001792:	8b3b      	ldrh	r3, [r7, #24]
 8001794:	3307      	adds	r3, #7
 8001796:	2b00      	cmp	r3, #0
 8001798:	da00      	bge.n	800179c <TFT9341_DrawChar_DMA+0x8c>
 800179a:	3307      	adds	r3, #7
 800179c:	10db      	asrs	r3, r3, #3
 800179e:	461a      	mov	r2, r3
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	fb03 f302 	mul.w	r3, r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4413      	add	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
		switch(((width + 7)/8))
 80017ac:	8b3b      	ldrh	r3, [r7, #24]
 80017ae:	3307      	adds	r3, #7
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da00      	bge.n	80017b6 <TFT9341_DrawChar_DMA+0xa6>
 80017b4:	3307      	adds	r3, #7
 80017b6:	10db      	asrs	r3, r3, #3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d002      	beq.n	80017c2 <TFT9341_DrawChar_DMA+0xb2>
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d004      	beq.n	80017ca <TFT9341_DrawChar_DMA+0xba>
 80017c0:	e00c      	b.n	80017dc <TFT9341_DrawChar_DMA+0xcc>
		{
			case 1:
				line = pchar[0];
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	61fb      	str	r3, [r7, #28]
				break;
 80017c8:	e016      	b.n	80017f8 <TFT9341_DrawChar_DMA+0xe8>
			case 2:
				line = (pchar[0]<< 8) | pchar[1];
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	3201      	adds	r2, #1
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61fb      	str	r3, [r7, #28]
				break;
 80017da:	e00d      	b.n	80017f8 <TFT9341_DrawChar_DMA+0xe8>
			case 3:
			default:
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	3202      	adds	r2, #2
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61fb      	str	r3, [r7, #28]
				break;
 80017f6:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	e03c      	b.n	8001878 <TFT9341_DrawChar_DMA+0x168>
		{
			int buf_index = j + i*(width+1);
 80017fe:	8b3b      	ldrh	r3, [r7, #24]
 8001800:	3301      	adds	r3, #1
 8001802:	461a      	mov	r2, r3
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	fb03 f202 	mul.w	r2, r3, r2
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	4413      	add	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
			if(line & (1 << (width- j + offset- 1)))
 8001810:	8b3a      	ldrh	r2, [r7, #24]
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	1ad2      	subs	r2, r2, r3
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	4413      	add	r3, r2
 800181a:	3b01      	subs	r3, #1
 800181c:	2201      	movs	r2, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	461a      	mov	r2, r3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d011      	beq.n	8001850 <TFT9341_DrawChar_DMA+0x140>
			{
				frm_buf[buf_index*2] = lcdprop.TextColor >> 8;
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29a      	uxth	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	b2d1      	uxtb	r1, r2
 800183a:	4a30      	ldr	r2, [pc, #192]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 800183c:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.TextColor & 0xFF;
 800183e:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	3301      	adds	r3, #1
 8001848:	b2d1      	uxtb	r1, r2
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 800184c:	54d1      	strb	r1, [r2, r3]
 800184e:	e010      	b.n	8001872 <TFT9341_DrawChar_DMA+0x162>
			}
			else
			{
				frm_buf[buf_index*2] = lcdprop.BackColor >> 8;
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001852:	885b      	ldrh	r3, [r3, #2]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b29a      	uxth	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	b2d1      	uxtb	r1, r2
 800185e:	4a27      	ldr	r2, [pc, #156]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 8001860:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.BackColor & 0xFF;
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001864:	885a      	ldrh	r2, [r3, #2]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	3301      	adds	r3, #1
 800186c:	b2d1      	uxtb	r1, r2
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 8001870:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < width; j++)
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	3301      	adds	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	8b3b      	ldrh	r3, [r7, #24]
 800187a:	6a3a      	ldr	r2, [r7, #32]
 800187c:	429a      	cmp	r2, r3
 800187e:	d3be      	bcc.n	80017fe <TFT9341_DrawChar_DMA+0xee>
			}
		}
		y++;
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	3301      	adds	r3, #1
 8001884:	80bb      	strh	r3, [r7, #4]
	for(i = 0; i < height; i++)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	8b7b      	ldrh	r3, [r7, #26]
 800188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001890:	429a      	cmp	r2, r3
 8001892:	f4ff af7e 	bcc.w	8001792 <TFT9341_DrawChar_DMA+0x82>
	}

	TFT9341_SetAddrWindow(x, y, x+width, y+height);
 8001896:	88fa      	ldrh	r2, [r7, #6]
 8001898:	8b3b      	ldrh	r3, [r7, #24]
 800189a:	4413      	add	r3, r2
 800189c:	b29c      	uxth	r4, r3
 800189e:	88ba      	ldrh	r2, [r7, #4]
 80018a0:	8b7b      	ldrh	r3, [r7, #26]
 80018a2:	4413      	add	r3, r2
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	88b9      	ldrh	r1, [r7, #4]
 80018a8:	88f8      	ldrh	r0, [r7, #6]
 80018aa:	4622      	mov	r2, r4
 80018ac:	f7ff fe72 	bl	8001594 <TFT9341_SetAddrWindow>
	DC_DATA();
 80018b0:	2201      	movs	r2, #1
 80018b2:	2140      	movs	r1, #64	; 0x40
 80018b4:	4812      	ldr	r0, [pc, #72]	; (8001900 <TFT9341_DrawChar_DMA+0x1f0>)
 80018b6:	f004 fe43 	bl	8006540 <HAL_GPIO_WritePin>
	dma_spi_cnt = 1;
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <TFT9341_DrawChar_DMA+0x1f4>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi2, frm_buf, (width+1)*(height+1)*2);
 80018c0:	8b3b      	ldrh	r3, [r7, #24]
 80018c2:	3301      	adds	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	8b7b      	ldrh	r3, [r7, #26]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	fb12 f303 	smulbb	r3, r2, r3
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4908      	ldr	r1, [pc, #32]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 80018da:	480b      	ldr	r0, [pc, #44]	; (8001908 <TFT9341_DrawChar_DMA+0x1f8>)
 80018dc:	f007 ffda 	bl	8009894 <HAL_SPI_Transmit_DMA>
	while(!dma_spi_fl) {}
 80018e0:	bf00      	nop
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <TFT9341_DrawChar_DMA+0x1fc>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0fb      	beq.n	80018e2 <TFT9341_DrawChar_DMA+0x1d2>
	dma_spi_fl=0;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <TFT9341_DrawChar_DMA+0x1fc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	372c      	adds	r7, #44	; 0x2c
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	20007640 	.word	0x20007640
 80018fc:	2000039c 	.word	0x2000039c
 8001900:	40021000 	.word	0x40021000
 8001904:	20000028 	.word	0x20000028
 8001908:	200076f0 	.word	0x200076f0
 800190c:	2000279c 	.word	0x2000279c

08001910 <TFT9341_String_DMA>:
    (void)*str++;
  }
}
// ---------------------------------------------------------------------------------
void TFT9341_String_DMA(uint16_t x,uint16_t y, char *str)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	603a      	str	r2, [r7, #0]
 800191a:	80fb      	strh	r3, [r7, #6]
 800191c:	460b      	mov	r3, r1
 800191e:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8001920:	e00f      	b.n	8001942 <TFT9341_String_DMA+0x32>
  {
	TFT9341_DrawChar_DMA(x,y,str[0]);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	88b9      	ldrh	r1, [r7, #4]
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fef0 	bl	8001710 <TFT9341_DrawChar_DMA>
    x+=lcdprop.pFont->Width;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <TFT9341_String_DMA+0x44>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	889a      	ldrh	r2, [r3, #4]
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4413      	add	r3, r2
 800193a:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	603b      	str	r3, [r7, #0]
  while(*str)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1eb      	bne.n	8001922 <TFT9341_String_DMA+0x12>
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20007640 	.word	0x20007640

08001958 <TFT9341_SetRotation>:
// ---------------------------------------------------------------------------------
void TFT9341_SetRotation(uint8_t r)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  TFT9341_SendCommand(0x36);
 8001962:	2036      	movs	r0, #54	; 0x36
 8001964:	f7ff fc62 	bl	800122c <TFT9341_SendCommand>
  switch(r)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d836      	bhi.n	80019dc <TFT9341_SetRotation+0x84>
 800196e:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <TFT9341_SetRotation+0x1c>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	08001985 	.word	0x08001985
 8001978:	0800199b 	.word	0x0800199b
 800197c:	080019b1 	.word	0x080019b1
 8001980:	080019c7 	.word	0x080019c7
  {
    case 0:
      TFT9341_SendData(0x48);
 8001984:	2048      	movs	r0, #72	; 0x48
 8001986:	f7ff fc37 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 800198c:	22f0      	movs	r2, #240	; 0xf0
 800198e:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <TFT9341_SetRotation+0x90>)
 8001992:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001996:	801a      	strh	r2, [r3, #0]
      break;
 8001998:	e020      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 1:
      TFT9341_SendData(0x28);
 800199a:	2028      	movs	r0, #40	; 0x28
 800199c:	f7ff fc2c 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019a6:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019aa:	22f0      	movs	r2, #240	; 0xf0
 80019ac:	801a      	strh	r2, [r3, #0]
      break;
 80019ae:	e015      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 2:
      TFT9341_SendData(0x88);
 80019b0:	2088      	movs	r0, #136	; 0x88
 80019b2:	f7ff fc21 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019b8:	22f0      	movs	r2, #240	; 0xf0
 80019ba:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019c2:	801a      	strh	r2, [r3, #0]
      break;
 80019c4:	e00a      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 3:
      TFT9341_SendData(0xE8);
 80019c6:	20e8      	movs	r0, #232	; 0xe8
 80019c8:	f7ff fc16 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019d2:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019d6:	22f0      	movs	r2, #240	; 0xf0
 80019d8:	801a      	strh	r2, [r3, #0]
      break;
 80019da:	bf00      	nop
  }
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000763e 	.word	0x2000763e
 80019e8:	2000763c 	.word	0x2000763c

080019ec <time_i2c_write_single>:



/*function to transmit one byte of data to register_address on ds3231 (device_address: 0X68)*/
void time_i2c_write_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	4603      	mov	r3, r0
 80019f4:	603a      	str	r2, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	460b      	mov	r3, r1
 80019fa:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Write(&hi2c3, DS3231_I2C_ADDRESS<<1, DS3231_REGISTER_SECONDS_DEFAULT, 1, &seco, 1, 1000);
	//HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	HAL_I2C_Mem_Write(&hi2c3, (uint16_t)device_address<<1, register_address, 1, data_byte, 1, 1000);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	b299      	uxth	r1, r3
 8001a04:	79bb      	ldrb	r3, [r7, #6]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	4803      	ldr	r0, [pc, #12]	; (8001a28 <time_i2c_write_single+0x3c>)
 8001a1a:	f005 f811 	bl	8006a40 <HAL_I2C_Mem_Write>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000764c 	.word	0x2000764c

08001a2c <time_i2c_write_multi>:

/*function to transmit an array of data to device_address, starting from start_register_address*/
void time_i2c_write_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af04      	add	r7, sp, #16
 8001a32:	603a      	str	r2, [r7, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	71bb      	strb	r3, [r7, #6]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, device_address<<1, start_register_address, 1, data_array, data_length, 1000);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	797b      	ldrb	r3, [r7, #5]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a56:	9002      	str	r0, [sp, #8]
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <time_i2c_write_multi+0x44>)
 8001a62:	f004 ffed 	bl	8006a40 <HAL_I2C_Mem_Write>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000764c 	.word	0x2000764c

08001a74 <time_i2c_read_single>:

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	603a      	str	r2, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	460b      	mov	r3, r1
 8001a82:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c3, device_address<<1,register_address, 1, data_byte, 1, 1000);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	b299      	uxth	r1, r3
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a94:	9302      	str	r3, [sp, #8]
 8001a96:	2301      	movs	r3, #1
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <time_i2c_read_single+0x3c>)
 8001aa2:	f005 f8c7 	bl	8006c34 <HAL_I2C_Mem_Read>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000764c 	.word	0x2000764c

08001ab4 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	603a      	str	r2, [r7, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	71bb      	strb	r3, [r7, #6]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	797b      	ldrb	r3, [r7, #5]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ade:	9002      	str	r0, [sp, #8]
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <time_i2c_read_multi+0x44>)
 8001aea:	f005 f8a3 	bl	8006c34 <HAL_I2C_Mem_Read>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000764c 	.word	0x2000764c

08001afc <ds3231_I2C_init>:

/*function to initialize I2C peripheral in 100khz or 400khz*/
void ds3231_I2C_init()
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b0e      	cmp	r3, #14
 8001b1c:	f200 80ac 	bhi.w	8001c78 <ds3231_read+0x16c>
 8001b20:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <ds3231_read+0x1c>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b65 	.word	0x08001b65
 8001b2c:	08001b81 	.word	0x08001b81
 8001b30:	08001b9d 	.word	0x08001b9d
 8001b34:	08001bb9 	.word	0x08001bb9
 8001b38:	08001bd5 	.word	0x08001bd5
 8001b3c:	08001bf1 	.word	0x08001bf1
 8001b40:	08001c0d 	.word	0x08001c0d
 8001b44:	08001c29 	.word	0x08001c29
 8001b48:	08001c3d 	.word	0x08001c3d
 8001b4c:	08001c51 	.word	0x08001c51
 8001b50:	08001c79 	.word	0x08001c79
 8001b54:	08001c79 	.word	0x08001c79
 8001b58:	08001c79 	.word	0x08001c79
 8001b5c:	08001c79 	.word	0x08001c79
 8001b60:	08001c63 	.word	0x08001c63
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8001b64:	4a48      	ldr	r2, [pc, #288]	; (8001c88 <ds3231_read+0x17c>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	2068      	movs	r0, #104	; 0x68
 8001b6a:	f7ff ff83 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <ds3231_read+0x17c>)
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b76:	2101      	movs	r1, #1
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	f000 f9cf 	bl	8001f1c <BCD_to_HEX>
      break;
 8001b7e:	e07d      	b.n	8001c7c <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 8001b80:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <ds3231_read+0x17c>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	2068      	movs	r0, #104	; 0x68
 8001b86:	f7ff ff75 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <ds3231_read+0x17c>)
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b92:	2101      	movs	r1, #1
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f000 f9c1 	bl	8001f1c <BCD_to_HEX>
      break;
 8001b9a:	e06f      	b.n	8001c7c <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 8001b9c:	4a3a      	ldr	r2, [pc, #232]	; (8001c88 <ds3231_read+0x17c>)
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	2068      	movs	r0, #104	; 0x68
 8001ba2:	f7ff ff67 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <ds3231_read+0x17c>)
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001bae:	2101      	movs	r1, #1
 8001bb0:	6838      	ldr	r0, [r7, #0]
 8001bb2:	f000 f9b3 	bl	8001f1c <BCD_to_HEX>
      break;
 8001bb6:	e061      	b.n	8001c7c <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 8001bb8:	4a33      	ldr	r2, [pc, #204]	; (8001c88 <ds3231_read+0x17c>)
 8001bba:	2103      	movs	r1, #3
 8001bbc:	2068      	movs	r0, #104	; 0x68
 8001bbe:	f7ff ff59 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <ds3231_read+0x17c>)
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	6838      	ldr	r0, [r7, #0]
 8001bce:	f000 f9a5 	bl	8001f1c <BCD_to_HEX>
      break;
 8001bd2:	e053      	b.n	8001c7c <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <ds3231_read+0x17c>)
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	2068      	movs	r0, #104	; 0x68
 8001bda:	f7ff ff4b 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001bde:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <ds3231_read+0x17c>)
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001be6:	2101      	movs	r1, #1
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	f000 f997 	bl	8001f1c <BCD_to_HEX>
      break;
 8001bee:	e045      	b.n	8001c7c <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 8001bf0:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <ds3231_read+0x17c>)
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	2068      	movs	r0, #104	; 0x68
 8001bf6:	f7ff ff3d 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <ds3231_read+0x17c>)
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001c02:	2101      	movs	r1, #1
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	f000 f989 	bl	8001f1c <BCD_to_HEX>
      break;
 8001c0a:	e037      	b.n	8001c7c <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 8001c0c:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <ds3231_read+0x17c>)
 8001c0e:	2106      	movs	r1, #6
 8001c10:	2068      	movs	r0, #104	; 0x68
 8001c12:	f7ff ff2f 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <ds3231_read+0x17c>)
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001c1e:	2101      	movs	r1, #1
 8001c20:	6838      	ldr	r0, [r7, #0]
 8001c22:	f000 f97b 	bl	8001f1c <BCD_to_HEX>
      break;
 8001c26:	e029      	b.n	8001c7c <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <ds3231_read+0x17c>)
 8001c2a:	210e      	movs	r1, #14
 8001c2c:	2068      	movs	r0, #104	; 0x68
 8001c2e:	f7ff ff21 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <ds3231_read+0x17c>)
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	701a      	strb	r2, [r3, #0]
      break;
 8001c3a:	e01f      	b.n	8001c7c <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8001c3c:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <ds3231_read+0x17c>)
 8001c3e:	210f      	movs	r1, #15
 8001c40:	2068      	movs	r0, #104	; 0x68
 8001c42:	f7ff ff17 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <ds3231_read+0x17c>)
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	701a      	strb	r2, [r3, #0]
      break;
 8001c4e:	e015      	b.n	8001c7c <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <ds3231_read+0x17c>)
 8001c52:	2110      	movs	r1, #16
 8001c54:	2068      	movs	r0, #104	; 0x68
 8001c56:	f7ff ff0d 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <ds3231_read+0x17c>)
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 8001c62:	2307      	movs	r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	2100      	movs	r1, #0
 8001c68:	2068      	movs	r0, #104	; 0x68
 8001c6a:	f7ff ff23 	bl	8001ab4 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 8001c6e:	2107      	movs	r1, #7
 8001c70:	6838      	ldr	r0, [r7, #0]
 8001c72:	f000 f953 	bl	8001f1c <BCD_to_HEX>
      break;
 8001c76:	e001      	b.n	8001c7c <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e000      	b.n	8001c7e <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8001c7c:	2301      	movs	r3, #1
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000239c 	.word	0x2000239c

08001c8c <ds3231_set>:

/*function to set internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_set(uint8_t option, uint8_t *data_array)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b0e      	cmp	r3, #14
 8001c9c:	f200 80d5 	bhi.w	8001e4a <ds3231_set+0x1be>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <ds3231_set+0x1c>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001ce5 	.word	0x08001ce5
 8001cac:	08001d01 	.word	0x08001d01
 8001cb0:	08001d1d 	.word	0x08001d1d
 8001cb4:	08001d39 	.word	0x08001d39
 8001cb8:	08001d55 	.word	0x08001d55
 8001cbc:	08001d71 	.word	0x08001d71
 8001cc0:	08001d8d 	.word	0x08001d8d
 8001cc4:	08001da9 	.word	0x08001da9
 8001cc8:	08001de1 	.word	0x08001de1
 8001ccc:	08001e37 	.word	0x08001e37
 8001cd0:	08001e4b 	.word	0x08001e4b
 8001cd4:	08001e4b 	.word	0x08001e4b
 8001cd8:	08001e4b 	.word	0x08001e4b
 8001cdc:	08001e4b 	.word	0x08001e4b
 8001ce0:	08001e19 	.word	0x08001e19
  {
    case SECOND:
      time_registers_clone[0] = *data_array;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	4b5b      	ldr	r3, [pc, #364]	; (8001e58 <ds3231_set+0x1cc>)
 8001cea:	701a      	strb	r2, [r3, #0]
      HEX_to_BCD(&time_registers_clone[0], 1);
 8001cec:	2101      	movs	r1, #1
 8001cee:	485a      	ldr	r0, [pc, #360]	; (8001e58 <ds3231_set+0x1cc>)
 8001cf0:	f000 f953 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 8001cf4:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <ds3231_set+0x1cc>)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2068      	movs	r0, #104	; 0x68
 8001cfa:	f7ff fe77 	bl	80019ec <time_i2c_write_single>
      break;
 8001cfe:	e0a6      	b.n	8001e4e <ds3231_set+0x1c2>
    case MINUTE:
      time_registers_clone[1] = *data_array;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	4b54      	ldr	r3, [pc, #336]	; (8001e58 <ds3231_set+0x1cc>)
 8001d06:	705a      	strb	r2, [r3, #1]
      HEX_to_BCD(&time_registers_clone[1], 1);
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4854      	ldr	r0, [pc, #336]	; (8001e5c <ds3231_set+0x1d0>)
 8001d0c:	f000 f945 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 8001d10:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <ds3231_set+0x1d0>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	2068      	movs	r0, #104	; 0x68
 8001d16:	f7ff fe69 	bl	80019ec <time_i2c_write_single>
      break;
 8001d1a:	e098      	b.n	8001e4e <ds3231_set+0x1c2>
    case HOUR:
      time_registers_clone[2] = *data_array;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <ds3231_set+0x1cc>)
 8001d22:	709a      	strb	r2, [r3, #2]
      HEX_to_BCD(&time_registers_clone[2], 1);
 8001d24:	2101      	movs	r1, #1
 8001d26:	484e      	ldr	r0, [pc, #312]	; (8001e60 <ds3231_set+0x1d4>)
 8001d28:	f000 f937 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <ds3231_set+0x1d4>)
 8001d2e:	2102      	movs	r1, #2
 8001d30:	2068      	movs	r0, #104	; 0x68
 8001d32:	f7ff fe5b 	bl	80019ec <time_i2c_write_single>
      break;
 8001d36:	e08a      	b.n	8001e4e <ds3231_set+0x1c2>
    case DAY_OF_WEEK:
      time_registers_clone[3] = *data_array;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <ds3231_set+0x1cc>)
 8001d3e:	70da      	strb	r2, [r3, #3]
      HEX_to_BCD(&time_registers_clone[3], 1);
 8001d40:	2101      	movs	r1, #1
 8001d42:	4848      	ldr	r0, [pc, #288]	; (8001e64 <ds3231_set+0x1d8>)
 8001d44:	f000 f929 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 8001d48:	4a46      	ldr	r2, [pc, #280]	; (8001e64 <ds3231_set+0x1d8>)
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	2068      	movs	r0, #104	; 0x68
 8001d4e:	f7ff fe4d 	bl	80019ec <time_i2c_write_single>
      break;
 8001d52:	e07c      	b.n	8001e4e <ds3231_set+0x1c2>
    case DATE:
      time_registers_clone[4] = *data_array;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <ds3231_set+0x1cc>)
 8001d5a:	711a      	strb	r2, [r3, #4]
      HEX_to_BCD(&time_registers_clone[4], 1);
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	4842      	ldr	r0, [pc, #264]	; (8001e68 <ds3231_set+0x1dc>)
 8001d60:	f000 f91b 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 8001d64:	4a40      	ldr	r2, [pc, #256]	; (8001e68 <ds3231_set+0x1dc>)
 8001d66:	2104      	movs	r1, #4
 8001d68:	2068      	movs	r0, #104	; 0x68
 8001d6a:	f7ff fe3f 	bl	80019ec <time_i2c_write_single>
      break;
 8001d6e:	e06e      	b.n	8001e4e <ds3231_set+0x1c2>
    case MONTH:
      time_registers_clone[5] = *data_array;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <ds3231_set+0x1cc>)
 8001d76:	715a      	strb	r2, [r3, #5]
      HEX_to_BCD(&time_registers_clone[5], 1);
 8001d78:	2101      	movs	r1, #1
 8001d7a:	483c      	ldr	r0, [pc, #240]	; (8001e6c <ds3231_set+0x1e0>)
 8001d7c:	f000 f90d 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 8001d80:	4a3a      	ldr	r2, [pc, #232]	; (8001e6c <ds3231_set+0x1e0>)
 8001d82:	2105      	movs	r1, #5
 8001d84:	2068      	movs	r0, #104	; 0x68
 8001d86:	f7ff fe31 	bl	80019ec <time_i2c_write_single>
      break;
 8001d8a:	e060      	b.n	8001e4e <ds3231_set+0x1c2>
    case YEAR:
      time_registers_clone[6] = *data_array;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <ds3231_set+0x1cc>)
 8001d92:	719a      	strb	r2, [r3, #6]
      HEX_to_BCD(&time_registers_clone[6], 1);
 8001d94:	2101      	movs	r1, #1
 8001d96:	4836      	ldr	r0, [pc, #216]	; (8001e70 <ds3231_set+0x1e4>)
 8001d98:	f000 f8ff 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8001d9c:	4a34      	ldr	r2, [pc, #208]	; (8001e70 <ds3231_set+0x1e4>)
 8001d9e:	2106      	movs	r1, #6
 8001da0:	2068      	movs	r0, #104	; 0x68
 8001da2:	f7ff fe23 	bl	80019ec <time_i2c_write_single>
      break;
 8001da6:	e052      	b.n	8001e4e <ds3231_set+0x1c2>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8001da8:	4a32      	ldr	r2, [pc, #200]	; (8001e74 <ds3231_set+0x1e8>)
 8001daa:	210e      	movs	r1, #14
 8001dac:	2068      	movs	r0, #104	; 0x68
 8001dae:	f7ff fe61 	bl	8001a74 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (*data_array & (~(1 << DS3231_BIT_EOSC)));
 8001db2:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <ds3231_set+0x1e8>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001dbc:	b25a      	sxtb	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b25b      	sxtb	r3, r3
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <ds3231_set+0x1ec>)
 8001dd2:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8001dd4:	4a28      	ldr	r2, [pc, #160]	; (8001e78 <ds3231_set+0x1ec>)
 8001dd6:	210e      	movs	r1, #14
 8001dd8:	2068      	movs	r0, #104	; 0x68
 8001dda:	f7ff fe07 	bl	80019ec <time_i2c_write_single>
      break;
 8001dde:	e036      	b.n	8001e4e <ds3231_set+0x1c2>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <ds3231_set+0x1e8>)
 8001de2:	210f      	movs	r1, #15
 8001de4:	2068      	movs	r0, #104	; 0x68
 8001de6:	f7ff fe45 	bl	8001a74 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (*data_array & (~(1 << DS3231_BIT_OSF)));
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <ds3231_set+0x1e8>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001df4:	b25a      	sxtb	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	4313      	orrs	r3, r2
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <ds3231_set+0x1ec>)
 8001e0a:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <ds3231_set+0x1ec>)
 8001e0e:	210f      	movs	r1, #15
 8001e10:	2068      	movs	r0, #104	; 0x68
 8001e12:	f7ff fdeb 	bl	80019ec <time_i2c_write_single>
      break;
 8001e16:	e01a      	b.n	8001e4e <ds3231_set+0x1c2>
    case TIME:
      ds3231_data_clone(TIME, data_array);
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	200e      	movs	r0, #14
 8001e1c:	f000 f82e 	bl	8001e7c <ds3231_data_clone>
      HEX_to_BCD(&time_registers_clone[0], 7);
 8001e20:	2107      	movs	r1, #7
 8001e22:	480d      	ldr	r0, [pc, #52]	; (8001e58 <ds3231_set+0x1cc>)
 8001e24:	f000 f8b9 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 8001e28:	2307      	movs	r3, #7
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <ds3231_set+0x1cc>)
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2068      	movs	r0, #104	; 0x68
 8001e30:	f7ff fdfc 	bl	8001a2c <time_i2c_write_multi>
      break;
 8001e34:	e00b      	b.n	8001e4e <ds3231_set+0x1c2>
    case AGING_OFFSET:
      register_new_value = *data_array;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <ds3231_set+0x1ec>)
 8001e3c:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 8001e3e:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <ds3231_set+0x1ec>)
 8001e40:	2110      	movs	r1, #16
 8001e42:	2068      	movs	r0, #104	; 0x68
 8001e44:	f7ff fdd2 	bl	80019ec <time_i2c_write_single>
      break;
 8001e48:	e001      	b.n	8001e4e <ds3231_set+0x1c2>
    default:
      return OPERATION_FAILED;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <ds3231_set+0x1c4>
  }
  return OPERATION_DONE;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200023a0 	.word	0x200023a0
 8001e5c:	200023a1 	.word	0x200023a1
 8001e60:	200023a2 	.word	0x200023a2
 8001e64:	200023a3 	.word	0x200023a3
 8001e68:	200023a4 	.word	0x200023a4
 8001e6c:	200023a5 	.word	0x200023a5
 8001e70:	200023a6 	.word	0x200023a6
 8001e74:	2000239c 	.word	0x2000239c
 8001e78:	2000239d 	.word	0x2000239d

08001e7c <ds3231_data_clone>:

/*to clone the desired data and prevent reconversion of BCD to HEX*/
static void ds3231_data_clone(uint8_t option, uint8_t *input_array)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2b0e      	cmp	r3, #14
 8001e8c:	d006      	beq.n	8001e9c <ds3231_data_clone+0x20>
 8001e8e:	2b0e      	cmp	r3, #14
 8001e90:	dc37      	bgt.n	8001f02 <ds3231_data_clone+0x86>
 8001e92:	2b0a      	cmp	r3, #10
 8001e94:	d013      	beq.n	8001ebe <ds3231_data_clone+0x42>
 8001e96:	2b0b      	cmp	r3, #11
 8001e98:	d022      	beq.n	8001ee0 <ds3231_data_clone+0x64>
      {
        alarm2_registers_clone[counter] = input_array[counter];
      }
      break;
    default:
      break;
 8001e9a:	e032      	b.n	8001f02 <ds3231_data_clone+0x86>
      for (uint8_t counter = 0; counter < 7; counter++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e009      	b.n	8001eb6 <ds3231_data_clone+0x3a>
        time_registers_clone[counter] = input_array[counter];
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	441a      	add	r2, r3
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	7811      	ldrb	r1, [r2, #0]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <ds3231_data_clone+0x94>)
 8001eae:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 7; counter++)
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d9f2      	bls.n	8001ea2 <ds3231_data_clone+0x26>
      break;
 8001ebc:	e022      	b.n	8001f04 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 4; counter++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73bb      	strb	r3, [r7, #14]
 8001ec2:	e009      	b.n	8001ed8 <ds3231_data_clone+0x5c>
        alarm1_registers_clone[counter] = input_array[counter];
 8001ec4:	7bbb      	ldrb	r3, [r7, #14]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	441a      	add	r2, r3
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	7811      	ldrb	r1, [r2, #0]
 8001ece:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <ds3231_data_clone+0x98>)
 8001ed0:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 4; counter++)
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73bb      	strb	r3, [r7, #14]
 8001ed8:	7bbb      	ldrb	r3, [r7, #14]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d9f2      	bls.n	8001ec4 <ds3231_data_clone+0x48>
      break;
 8001ede:	e011      	b.n	8001f04 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 3; counter++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	737b      	strb	r3, [r7, #13]
 8001ee4:	e009      	b.n	8001efa <ds3231_data_clone+0x7e>
        alarm2_registers_clone[counter] = input_array[counter];
 8001ee6:	7b7b      	ldrb	r3, [r7, #13]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	441a      	add	r2, r3
 8001eec:	7b7b      	ldrb	r3, [r7, #13]
 8001eee:	7811      	ldrb	r1, [r2, #0]
 8001ef0:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <ds3231_data_clone+0x9c>)
 8001ef2:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 3; counter++)
 8001ef4:	7b7b      	ldrb	r3, [r7, #13]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	737b      	strb	r3, [r7, #13]
 8001efa:	7b7b      	ldrb	r3, [r7, #13]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d9f2      	bls.n	8001ee6 <ds3231_data_clone+0x6a>
      break;
 8001f00:	e000      	b.n	8001f04 <ds3231_data_clone+0x88>
      break;
 8001f02:	bf00      	nop
  }
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	200023a0 	.word	0x200023a0
 8001f14:	200023a8 	.word	0x200023a8
 8001f18:	200023ac 	.word	0x200023ac

08001f1c <BCD_to_HEX>:

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e028      	b.n	8001f84 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	b2d9      	uxtb	r1, r3
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	4403      	add	r3, r0
 8001f72:	440a      	add	r2, r1
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	dad2      	bge.n	8001f32 <BCD_to_HEX+0x16>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HEX_to_BCD>:

/*internal function related to this file and not accessible from outside*/
static void HEX_to_BCD(uint8_t *data_array, uint8_t array_length)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	70fb      	strb	r3, [r7, #3]
  uint8_t temporary_value;
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	73bb      	strb	r3, [r7, #14]
 8001fae:	e02d      	b.n	800200c <HEX_to_BCD+0x72>
  {
    temporary_value = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8001fb4:	e00e      	b.n	8001fd4 <HEX_to_BCD+0x3a>
    {
      temporary_value += 0X10;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	3310      	adds	r3, #16
 8001fba:	73fb      	strb	r3, [r7, #15]
      data_array[index] -= 0X0A;
 8001fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	440b      	add	r3, r1
 8001fce:	3a0a      	subs	r2, #10
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8001fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	2b09      	cmp	r3, #9
 8001fe2:	dce8      	bgt.n	8001fb6 <HEX_to_BCD+0x1c>
    }
    temporary_value += data_array[index];
 8001fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	73fb      	strb	r3, [r7, #15]
    data_array[index] = temporary_value;
 8001ff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8002000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	73bb      	strb	r3, [r7, #14]
 800200c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002010:	2b00      	cmp	r3, #0
 8002012:	dacd      	bge.n	8001fb0 <HEX_to_BCD+0x16>
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_SPI_TxCpltCallback>:


//--------------------------------------------------------------------------------
// For DMA SPI2 (LCD)
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <HAL_SPI_TxCpltCallback+0x3c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d111      	bne.n	8002058 <HAL_SPI_TxCpltCallback+0x34>
	{
	    dma_spi_cnt--;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3b01      	subs	r3, #1
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 800203c:	6013      	str	r3, [r2, #0]
	    if(dma_spi_cnt==0)
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d108      	bne.n	8002058 <HAL_SPI_TxCpltCallback+0x34>
	    {
	    	HAL_SPI_DMAStop(&hspi2);
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <HAL_SPI_TxCpltCallback+0x3c>)
 8002048:	f007 fcda 	bl	8009a00 <HAL_SPI_DMAStop>
	    	dma_spi_cnt=1;
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]
	    	dma_spi_fl=1;
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_SPI_TxCpltCallback+0x44>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200076f0 	.word	0x200076f0
 8002064:	20000028 	.word	0x20000028
 8002068:	2000279c 	.word	0x2000279c

0800206c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002070:	f002 ff7a 	bl	8004f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002074:	f000 f89e 	bl	80021b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002078:	f000 fb52 	bl	8002720 <MX_GPIO_Init>
  MX_TIM3_Init();
 800207c:	f000 fa8a 	bl	8002594 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002080:	f000 f982 	bl	8002388 <MX_I2C3_Init>
  MX_TIM10_Init();
 8002084:	f000 fb0a 	bl	800269c <MX_TIM10_Init>
  MX_SPI1_Init();
 8002088:	f000 f9c0 	bl	800240c <MX_SPI1_Init>
  MX_SPI2_Init();
 800208c:	f000 f9f4 	bl	8002478 <MX_SPI2_Init>
  MX_DMA_Init();
 8002090:	f000 fb26 	bl	80026e0 <MX_DMA_Init>
  MX_RNG_Init();
 8002094:	f000 f9a6 	bl	80023e4 <MX_RNG_Init>
  MX_I2C2_Init();
 8002098:	f000 f948 	bl	800232c <MX_I2C2_Init>
  MX_ADC1_Init();
 800209c:	f000 f8f4 	bl	8002288 <MX_ADC1_Init>
  MX_TIM1_Init();
 80020a0:	f000 fa20 	bl	80024e4 <MX_TIM1_Init>
  MX_TIM7_Init();
 80020a4:	f000 fac4 	bl	8002630 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 80020a8:	4829      	ldr	r0, [pc, #164]	; (8002150 <main+0xe4>)
 80020aa:	f007 ffad 	bl	800a008 <HAL_TIM_Base_Start_IT>
  /* IF LCD DOESN'T WORK !
  RIGHT IN RIGHT ORDER SPI2 AND DMA !!!!
  MX_DMA_Init();
  MX_SPI2_Init();
  */
  HAL_DMA_DeInit(&hdma_spi2_tx);
 80020ae:	4829      	ldr	r0, [pc, #164]	; (8002154 <main+0xe8>)
 80020b0:	f003 fbe4 	bl	800587c <HAL_DMA_DeInit>
  HAL_SPI_DeInit(&hspi2);
 80020b4:	4828      	ldr	r0, [pc, #160]	; (8002158 <main+0xec>)
 80020b6:	f007 fa88 	bl	80095ca <HAL_SPI_DeInit>
  MX_DMA_Init();
 80020ba:	f000 fb11 	bl	80026e0 <MX_DMA_Init>
  MX_SPI2_Init();
 80020be:	f000 f9db 	bl	8002478 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020c2:	f00b fda9 	bl	800dc18 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 80020c6:	4a25      	ldr	r2, [pc, #148]	; (800215c <main+0xf0>)
 80020c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020cc:	200a      	movs	r0, #10
 80020ce:	f00b fe9a 	bl	800de06 <osMessageQueueNew>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4a22      	ldr	r2, [pc, #136]	; (8002160 <main+0xf4>)
 80020d6:	6013      	str	r3, [r2, #0]

  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (1, sizeof(LCDQUEUE), &LCDQueue_attributes);
 80020d8:	4a22      	ldr	r2, [pc, #136]	; (8002164 <main+0xf8>)
 80020da:	2164      	movs	r1, #100	; 0x64
 80020dc:	2001      	movs	r0, #1
 80020de:	f00b fe92 	bl	800de06 <osMessageQueueNew>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <main+0xfc>)
 80020e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80020e8:	4a20      	ldr	r2, [pc, #128]	; (800216c <main+0x100>)
 80020ea:	2100      	movs	r1, #0
 80020ec:	4820      	ldr	r0, [pc, #128]	; (8002170 <main+0x104>)
 80020ee:	f00b fddd 	bl	800dcac <osThreadNew>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <main+0x108>)
 80020f6:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 80020f8:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <main+0x10c>)
 80020fa:	2100      	movs	r1, #0
 80020fc:	481f      	ldr	r0, [pc, #124]	; (800217c <main+0x110>)
 80020fe:	f00b fdd5 	bl	800dcac <osThreadNew>
 8002102:	4603      	mov	r3, r0
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <main+0x114>)
 8002106:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 8002108:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <main+0x118>)
 800210a:	2100      	movs	r1, #0
 800210c:	481e      	ldr	r0, [pc, #120]	; (8002188 <main+0x11c>)
 800210e:	f00b fdcd 	bl	800dcac <osThreadNew>
 8002112:	4603      	mov	r3, r0
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <main+0x120>)
 8002116:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Start_LCD, NULL, &LCD_attributes);
 8002118:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <main+0x124>)
 800211a:	2100      	movs	r1, #0
 800211c:	481d      	ldr	r0, [pc, #116]	; (8002194 <main+0x128>)
 800211e:	f00b fdc5 	bl	800dcac <osThreadNew>
 8002122:	4603      	mov	r3, r0
 8002124:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <main+0x12c>)
 8002126:	6013      	str	r3, [r2, #0]

  /* creation of LCD_touchscreen */
  LCD_touchscreenHandle = osThreadNew(Start_LCD_touchscreen, NULL, &LCD_touchscreen_attributes);
 8002128:	4a1c      	ldr	r2, [pc, #112]	; (800219c <main+0x130>)
 800212a:	2100      	movs	r1, #0
 800212c:	481c      	ldr	r0, [pc, #112]	; (80021a0 <main+0x134>)
 800212e:	f00b fdbd 	bl	800dcac <osThreadNew>
 8002132:	4603      	mov	r3, r0
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <main+0x138>)
 8002136:	6013      	str	r3, [r2, #0]

  /* creation of RTC */
  RTCHandle = osThreadNew(Start_RTC, NULL, &RTC_attributes);
 8002138:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <main+0x13c>)
 800213a:	2100      	movs	r1, #0
 800213c:	481b      	ldr	r0, [pc, #108]	; (80021ac <main+0x140>)
 800213e:	f00b fdb5 	bl	800dcac <osThreadNew>
 8002142:	4603      	mov	r3, r0
 8002144:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <main+0x144>)
 8002146:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002148:	f00b fd8a 	bl	800dc60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800214c:	e7fe      	b.n	800214c <main+0xe0>
 800214e:	bf00      	nop
 8002150:	2000aaac 	.word	0x2000aaac
 8002154:	2000d0c4 	.word	0x2000d0c4
 8002158:	200076f0 	.word	0x200076f0
 800215c:	08018be4 	.word	0x08018be4
 8002160:	200081e8 	.word	0x200081e8
 8002164:	08018bfc 	.word	0x08018bfc
 8002168:	2000c370 	.word	0x2000c370
 800216c:	08018b0c 	.word	0x08018b0c
 8002170:	08002a29 	.word	0x08002a29
 8002174:	20007648 	.word	0x20007648
 8002178:	08018b30 	.word	0x08018b30
 800217c:	08002a3d 	.word	0x08002a3d
 8002180:	2000cda8 	.word	0x2000cda8
 8002184:	08018b54 	.word	0x08018b54
 8002188:	08002cb9 	.word	0x08002cb9
 800218c:	2000ab3c 	.word	0x2000ab3c
 8002190:	08018b78 	.word	0x08018b78
 8002194:	08002d15 	.word	0x08002d15
 8002198:	2000c378 	.word	0x2000c378
 800219c:	08018b9c 	.word	0x08018b9c
 80021a0:	08002d59 	.word	0x08002d59
 80021a4:	2000c374 	.word	0x2000c374
 80021a8:	08018bc0 	.word	0x08018bc0
 80021ac:	08002f41 	.word	0x08002f41
 80021b0:	2000d22c 	.word	0x2000d22c

080021b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b094      	sub	sp, #80	; 0x50
 80021b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ba:	f107 0320 	add.w	r3, r7, #32
 80021be:	2230      	movs	r2, #48	; 0x30
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f00f fe39 	bl	8011e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <SystemClock_Config+0xcc>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <SystemClock_Config+0xcc>)
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <SystemClock_Config+0xcc>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <SystemClock_Config+0xd0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a21      	ldr	r2, [pc, #132]	; (8002284 <SystemClock_Config+0xd0>)
 80021fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <SystemClock_Config+0xd0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002210:	2301      	movs	r3, #1
 8002212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800221a:	2302      	movs	r3, #2
 800221c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002224:	2308      	movs	r3, #8
 8002226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002228:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800222c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800222e:	2302      	movs	r3, #2
 8002230:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002232:	2307      	movs	r3, #7
 8002234:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002236:	f107 0320 	add.w	r3, r7, #32
 800223a:	4618      	mov	r0, r3
 800223c:	f006 fc80 	bl	8008b40 <HAL_RCC_OscConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002246:	f001 fec7 	bl	8003fd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800224a:	230f      	movs	r3, #15
 800224c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224e:	2302      	movs	r3, #2
 8002250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002256:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800225c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002260:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	2105      	movs	r1, #5
 8002268:	4618      	mov	r0, r3
 800226a:	f006 fee1 	bl	8009030 <HAL_RCC_ClockConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002274:	f001 feb0 	bl	8003fd8 <Error_Handler>
  }
}
 8002278:	bf00      	nop
 800227a:	3750      	adds	r7, #80	; 0x50
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000

08002288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800228e:	463b      	mov	r3, r7
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <MX_ADC1_Init+0x98>)
 800229c:	4a21      	ldr	r2, [pc, #132]	; (8002324 <MX_ADC1_Init+0x9c>)
 800229e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <MX_ADC1_Init+0x98>)
 80022a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <MX_ADC1_Init+0x98>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <MX_ADC1_Init+0x98>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <MX_ADC1_Init+0x98>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <MX_ADC1_Init+0x98>)
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <MX_ADC1_Init+0x98>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <MX_ADC1_Init+0x98>)
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <MX_ADC1_Init+0xa0>)
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <MX_ADC1_Init+0x98>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <MX_ADC1_Init+0x98>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <MX_ADC1_Init+0x98>)
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <MX_ADC1_Init+0x98>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022e8:	480d      	ldr	r0, [pc, #52]	; (8002320 <MX_ADC1_Init+0x98>)
 80022ea:	f002 fea3 	bl	8005034 <HAL_ADC_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022f4:	f001 fe70 	bl	8003fd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022f8:	2309      	movs	r3, #9
 80022fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022fc:	2301      	movs	r3, #1
 80022fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <MX_ADC1_Init+0x98>)
 800230a:	f002 fed7 	bl	80050bc <HAL_ADC_ConfigChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002314:	f001 fe60 	bl	8003fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2000aaf4 	.word	0x2000aaf4
 8002324:	40012000 	.word	0x40012000
 8002328:	0f000001 	.word	0x0f000001

0800232c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <MX_I2C2_Init+0x50>)
 8002332:	4a13      	ldr	r2, [pc, #76]	; (8002380 <MX_I2C2_Init+0x54>)
 8002334:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <MX_I2C2_Init+0x50>)
 8002338:	4a12      	ldr	r2, [pc, #72]	; (8002384 <MX_I2C2_Init+0x58>)
 800233a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <MX_I2C2_Init+0x50>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <MX_I2C2_Init+0x50>)
 8002344:	2200      	movs	r2, #0
 8002346:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <MX_I2C2_Init+0x50>)
 800234a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800234e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <MX_I2C2_Init+0x50>)
 8002352:	2200      	movs	r2, #0
 8002354:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <MX_I2C2_Init+0x50>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <MX_I2C2_Init+0x50>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <MX_I2C2_Init+0x50>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002368:	4804      	ldr	r0, [pc, #16]	; (800237c <MX_I2C2_Init+0x50>)
 800236a:	f004 f927 	bl	80065bc <HAL_I2C_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002374:	f001 fe30 	bl	8003fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200077e0 	.word	0x200077e0
 8002380:	40005800 	.word	0x40005800
 8002384:	000186a0 	.word	0x000186a0

08002388 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <MX_I2C3_Init+0x50>)
 800238e:	4a13      	ldr	r2, [pc, #76]	; (80023dc <MX_I2C3_Init+0x54>)
 8002390:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_I2C3_Init+0x50>)
 8002394:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <MX_I2C3_Init+0x58>)
 8002396:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <MX_I2C3_Init+0x50>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_I2C3_Init+0x50>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_I2C3_Init+0x50>)
 80023a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023aa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <MX_I2C3_Init+0x50>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_I2C3_Init+0x50>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <MX_I2C3_Init+0x50>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_I2C3_Init+0x50>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023c4:	4804      	ldr	r0, [pc, #16]	; (80023d8 <MX_I2C3_Init+0x50>)
 80023c6:	f004 f8f9 	bl	80065bc <HAL_I2C_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80023d0:	f001 fe02 	bl	8003fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	2000764c 	.word	0x2000764c
 80023dc:	40005c00 	.word	0x40005c00
 80023e0:	00061a80 	.word	0x00061a80

080023e4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_RNG_Init+0x20>)
 80023ea:	4a07      	ldr	r2, [pc, #28]	; (8002408 <MX_RNG_Init+0x24>)
 80023ec:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_RNG_Init+0x20>)
 80023f0:	f007 f838 	bl	8009464 <HAL_RNG_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023fa:	f001 fded 	bl	8003fd8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2000cd98 	.word	0x2000cd98
 8002408:	50060800 	.word	0x50060800

0800240c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <MX_SPI1_Init+0x64>)
 8002412:	4a18      	ldr	r2, [pc, #96]	; (8002474 <MX_SPI1_Init+0x68>)
 8002414:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <MX_SPI1_Init+0x64>)
 8002418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800241c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <MX_SPI1_Init+0x64>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <MX_SPI1_Init+0x64>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <MX_SPI1_Init+0x64>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <MX_SPI1_Init+0x64>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_SPI1_Init+0x64>)
 8002438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800243c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_SPI1_Init+0x64>)
 8002440:	2220      	movs	r2, #32
 8002442:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <MX_SPI1_Init+0x64>)
 8002446:	2200      	movs	r2, #0
 8002448:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_SPI1_Init+0x64>)
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <MX_SPI1_Init+0x64>)
 8002452:	2200      	movs	r2, #0
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_SPI1_Init+0x64>)
 8002458:	220a      	movs	r2, #10
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800245c:	4804      	ldr	r0, [pc, #16]	; (8002470 <MX_SPI1_Init+0x64>)
 800245e:	f007 f82b 	bl	80094b8 <HAL_SPI_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002468:	f001 fdb6 	bl	8003fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	2000cdac 	.word	0x2000cdac
 8002474:	40013000 	.word	0x40013000

08002478 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800247c:	4b17      	ldr	r3, [pc, #92]	; (80024dc <MX_SPI2_Init+0x64>)
 800247e:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <MX_SPI2_Init+0x68>)
 8002480:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <MX_SPI2_Init+0x64>)
 8002484:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002488:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <MX_SPI2_Init+0x64>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <MX_SPI2_Init+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <MX_SPI2_Init+0x64>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <MX_SPI2_Init+0x64>)
 800249e:	2200      	movs	r2, #0
 80024a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <MX_SPI2_Init+0x64>)
 80024a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <MX_SPI2_Init+0x64>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <MX_SPI2_Init+0x64>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <MX_SPI2_Init+0x64>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <MX_SPI2_Init+0x64>)
 80024be:	2200      	movs	r2, #0
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <MX_SPI2_Init+0x64>)
 80024c4:	220a      	movs	r2, #10
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024c8:	4804      	ldr	r0, [pc, #16]	; (80024dc <MX_SPI2_Init+0x64>)
 80024ca:	f006 fff5 	bl	80094b8 <HAL_SPI_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024d4:	f001 fd80 	bl	8003fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200076f0 	.word	0x200076f0
 80024e0:	40003800 	.word	0x40003800

080024e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024ea:	f107 030c 	add.w	r3, r7, #12
 80024ee:	2224      	movs	r2, #36	; 0x24
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f00f fca1 	bl	8011e3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <MX_TIM1_Init+0xa8>)
 8002502:	4a23      	ldr	r2, [pc, #140]	; (8002590 <MX_TIM1_Init+0xac>)
 8002504:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <MX_TIM1_Init+0xa8>)
 8002508:	2200      	movs	r2, #0
 800250a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <MX_TIM1_Init+0xa8>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <MX_TIM1_Init+0xa8>)
 8002514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002518:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <MX_TIM1_Init+0xa8>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <MX_TIM1_Init+0xa8>)
 8002522:	2200      	movs	r2, #0
 8002524:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <MX_TIM1_Init+0xa8>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800252c:	2301      	movs	r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002534:	2301      	movs	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002540:	2300      	movs	r3, #0
 8002542:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002544:	2301      	movs	r3, #1
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002548:	2300      	movs	r3, #0
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	4619      	mov	r1, r3
 8002556:	480d      	ldr	r0, [pc, #52]	; (800258c <MX_TIM1_Init+0xa8>)
 8002558:	f007 fdf5 	bl	800a146 <HAL_TIM_Encoder_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002562:	f001 fd39 	bl	8003fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	; (800258c <MX_TIM1_Init+0xa8>)
 8002574:	f008 fa72 	bl	800aa5c <HAL_TIMEx_MasterConfigSynchronization>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800257e:	f001 fd2b 	bl	8003fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	3730      	adds	r7, #48	; 0x30
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000cb4c 	.word	0x2000cb4c
 8002590:	40010000 	.word	0x40010000

08002594 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a8:	463b      	mov	r3, r7
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <MX_TIM3_Init+0x94>)
 80025b2:	4a1e      	ldr	r2, [pc, #120]	; (800262c <MX_TIM3_Init+0x98>)
 80025b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <MX_TIM3_Init+0x94>)
 80025b8:	f240 3247 	movw	r2, #839	; 0x347
 80025bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <MX_TIM3_Init+0x94>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80025c4:	4b18      	ldr	r3, [pc, #96]	; (8002628 <MX_TIM3_Init+0x94>)
 80025c6:	220a      	movs	r2, #10
 80025c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <MX_TIM3_Init+0x94>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <MX_TIM3_Init+0x94>)
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025d6:	4814      	ldr	r0, [pc, #80]	; (8002628 <MX_TIM3_Init+0x94>)
 80025d8:	f007 fcc6 	bl	8009f68 <HAL_TIM_Base_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025e2:	f001 fcf9 	bl	8003fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025ec:	f107 0308 	add.w	r3, r7, #8
 80025f0:	4619      	mov	r1, r3
 80025f2:	480d      	ldr	r0, [pc, #52]	; (8002628 <MX_TIM3_Init+0x94>)
 80025f4:	f007 ffe3 	bl	800a5be <HAL_TIM_ConfigClockSource>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80025fe:	f001 fceb 	bl	8003fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800260a:	463b      	mov	r3, r7
 800260c:	4619      	mov	r1, r3
 800260e:	4806      	ldr	r0, [pc, #24]	; (8002628 <MX_TIM3_Init+0x94>)
 8002610:	f008 fa24 	bl	800aa5c <HAL_TIMEx_MasterConfigSynchronization>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800261a:	f001 fcdd 	bl	8003fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2000aaac 	.word	0x2000aaac
 800262c:	40000400 	.word	0x40000400

08002630 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002636:	463b      	mov	r3, r7
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_TIM7_Init+0x64>)
 8002640:	4a15      	ldr	r2, [pc, #84]	; (8002698 <MX_TIM7_Init+0x68>)
 8002642:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <MX_TIM7_Init+0x64>)
 8002646:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800264a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_TIM7_Init+0x64>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <MX_TIM7_Init+0x64>)
 8002654:	2263      	movs	r2, #99	; 0x63
 8002656:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <MX_TIM7_Init+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800265e:	480d      	ldr	r0, [pc, #52]	; (8002694 <MX_TIM7_Init+0x64>)
 8002660:	f007 fc82 	bl	8009f68 <HAL_TIM_Base_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800266a:	f001 fcb5 	bl	8003fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002676:	463b      	mov	r3, r7
 8002678:	4619      	mov	r1, r3
 800267a:	4806      	ldr	r0, [pc, #24]	; (8002694 <MX_TIM7_Init+0x64>)
 800267c:	f008 f9ee 	bl	800aa5c <HAL_TIMEx_MasterConfigSynchronization>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002686:	f001 fca7 	bl	8003fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000d1e4 	.word	0x2000d1e4
 8002698:	40001400 	.word	0x40001400

0800269c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <MX_TIM10_Init+0x3c>)
 80026a2:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <MX_TIM10_Init+0x40>)
 80026a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <MX_TIM10_Init+0x3c>)
 80026a8:	22a7      	movs	r2, #167	; 0xa7
 80026aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <MX_TIM10_Init+0x3c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <MX_TIM10_Init+0x3c>)
 80026b4:	2209      	movs	r2, #9
 80026b6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <MX_TIM10_Init+0x3c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <MX_TIM10_Init+0x3c>)
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80026c4:	4804      	ldr	r0, [pc, #16]	; (80026d8 <MX_TIM10_Init+0x3c>)
 80026c6:	f007 fc4f 	bl	8009f68 <HAL_TIM_Base_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80026d0:	f001 fc82 	bl	8003fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20007798 	.word	0x20007798
 80026dc:	40014400 	.word	0x40014400

080026e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <MX_DMA_Init+0x3c>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a0b      	ldr	r2, [pc, #44]	; (800271c <MX_DMA_Init+0x3c>)
 80026f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <MX_DMA_Init+0x3c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2105      	movs	r1, #5
 8002706:	200f      	movs	r0, #15
 8002708:	f002 ffd2 	bl	80056b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800270c:	200f      	movs	r0, #15
 800270e:	f002 ffeb 	bl	80056e8 <HAL_NVIC_EnableIRQ>

}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08c      	sub	sp, #48	; 0x30
 8002724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002726:	f107 031c 	add.w	r3, r7, #28
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]
 8002734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	4bb5      	ldr	r3, [pc, #724]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4ab4      	ldr	r2, [pc, #720]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 8002740:	f043 0310 	orr.w	r3, r3, #16
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4bb2      	ldr	r3, [pc, #712]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	61bb      	str	r3, [r7, #24]
 8002750:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	4bae      	ldr	r3, [pc, #696]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4aad      	ldr	r2, [pc, #692]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4bab      	ldr	r3, [pc, #684]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	4ba7      	ldr	r3, [pc, #668]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4aa6      	ldr	r2, [pc, #664]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 8002778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4ba4      	ldr	r3, [pc, #656]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4ba0      	ldr	r3, [pc, #640]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a9f      	ldr	r2, [pc, #636]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b9d      	ldr	r3, [pc, #628]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b99      	ldr	r3, [pc, #612]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a98      	ldr	r2, [pc, #608]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b96      	ldr	r3, [pc, #600]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	4b92      	ldr	r3, [pc, #584]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a91      	ldr	r2, [pc, #580]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b8f      	ldr	r3, [pc, #572]	; (8002a10 <MX_GPIO_Init+0x2f0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 80027de:	2200      	movs	r2, #0
 80027e0:	217c      	movs	r1, #124	; 0x7c
 80027e2:	488c      	ldr	r0, [pc, #560]	; (8002a14 <MX_GPIO_Init+0x2f4>)
 80027e4:	f003 feac 	bl	8006540 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80027e8:	2201      	movs	r2, #1
 80027ea:	2101      	movs	r1, #1
 80027ec:	488a      	ldr	r0, [pc, #552]	; (8002a18 <MX_GPIO_Init+0x2f8>)
 80027ee:	f003 fea7 	bl	8006540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2142      	movs	r1, #66	; 0x42
 80027f6:	4888      	ldr	r0, [pc, #544]	; (8002a18 <MX_GPIO_Init+0x2f8>)
 80027f8:	f003 fea2 	bl	8006540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80027fc:	2200      	movs	r2, #0
 80027fe:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002802:	4886      	ldr	r0, [pc, #536]	; (8002a1c <MX_GPIO_Init+0x2fc>)
 8002804:	f003 fe9c 	bl	8006540 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8002808:	2200      	movs	r2, #0
 800280a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800280e:	4884      	ldr	r0, [pc, #528]	; (8002a20 <MX_GPIO_Init+0x300>)
 8002810:	f003 fe96 	bl	8006540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 8002814:	231c      	movs	r3, #28
 8002816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002818:	2301      	movs	r3, #1
 800281a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	487a      	ldr	r0, [pc, #488]	; (8002a14 <MX_GPIO_Init+0x2f4>)
 800282c:	f003 fbd8 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 8002830:	2360      	movs	r3, #96	; 0x60
 8002832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002834:	2301      	movs	r3, #1
 8002836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4619      	mov	r1, r3
 8002846:	4873      	ldr	r0, [pc, #460]	; (8002a14 <MX_GPIO_Init+0x2f4>)
 8002848:	f003 fbca 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800284c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002852:	2300      	movs	r3, #0
 8002854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800285a:	f107 031c 	add.w	r3, r7, #28
 800285e:	4619      	mov	r1, r3
 8002860:	486d      	ldr	r0, [pc, #436]	; (8002a18 <MX_GPIO_Init+0x2f8>)
 8002862:	f003 fbbd 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 8002866:	2303      	movs	r3, #3
 8002868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286a:	2301      	movs	r3, #1
 800286c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	4866      	ldr	r0, [pc, #408]	; (8002a18 <MX_GPIO_Init+0x2f8>)
 800287e:	f003 fbaf 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002882:	2308      	movs	r3, #8
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002892:	2305      	movs	r3, #5
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	485e      	ldr	r0, [pc, #376]	; (8002a18 <MX_GPIO_Init+0x2f8>)
 800289e:	f003 fb9f 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80028aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	485b      	ldr	r0, [pc, #364]	; (8002a24 <MX_GPIO_Init+0x304>)
 80028b8:	f003 fb92 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80028bc:	2310      	movs	r3, #16
 80028be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028cc:	2306      	movs	r3, #6
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	4619      	mov	r1, r3
 80028d6:	4853      	ldr	r0, [pc, #332]	; (8002a24 <MX_GPIO_Init+0x304>)
 80028d8:	f003 fb82 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80028dc:	2304      	movs	r3, #4
 80028de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	4619      	mov	r1, r3
 80028ee:	484c      	ldr	r0, [pc, #304]	; (8002a20 <MX_GPIO_Init+0x300>)
 80028f0:	f003 fb76 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 80028f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80028fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	4619      	mov	r1, r3
 800290a:	4842      	ldr	r0, [pc, #264]	; (8002a14 <MX_GPIO_Init+0x2f4>)
 800290c:	f003 fb68 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002910:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002914:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002916:	2301      	movs	r3, #1
 8002918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	2300      	movs	r3, #0
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002922:	f107 031c 	add.w	r3, r7, #28
 8002926:	4619      	mov	r1, r3
 8002928:	483c      	ldr	r0, [pc, #240]	; (8002a1c <MX_GPIO_Init+0x2fc>)
 800292a:	f003 fb59 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 800292e:	2340      	movs	r3, #64	; 0x40
 8002930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002932:	2301      	movs	r3, #1
 8002934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800293a:	2302      	movs	r3, #2
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	4619      	mov	r1, r3
 8002944:	4834      	ldr	r0, [pc, #208]	; (8002a18 <MX_GPIO_Init+0x2f8>)
 8002946:	f003 fb4b 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800294a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800294e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800295c:	2306      	movs	r3, #6
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	482c      	ldr	r0, [pc, #176]	; (8002a18 <MX_GPIO_Init+0x2f8>)
 8002968:	f003 fb3a 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800296c:	2320      	movs	r3, #32
 800296e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002970:	2300      	movs	r3, #0
 8002972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	4619      	mov	r1, r3
 800297e:	4827      	ldr	r0, [pc, #156]	; (8002a1c <MX_GPIO_Init+0x2fc>)
 8002980:	f003 fb2e 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002984:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298a:	2312      	movs	r3, #18
 800298c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800298e:	2301      	movs	r3, #1
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002996:	2304      	movs	r3, #4
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	481f      	ldr	r0, [pc, #124]	; (8002a20 <MX_GPIO_Init+0x300>)
 80029a2:	f003 fb1d 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 80029a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80029aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ac:	2301      	movs	r3, #1
 80029ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b4:	2303      	movs	r3, #3
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	4619      	mov	r1, r3
 80029be:	4818      	ldr	r0, [pc, #96]	; (8002a20 <MX_GPIO_Init+0x300>)
 80029c0:	f003 fb0e 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80029c4:	2301      	movs	r3, #1
 80029c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c8:	2300      	movs	r3, #0
 80029ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	4619      	mov	r1, r3
 80029d6:	480f      	ldr	r0, [pc, #60]	; (8002a14 <MX_GPIO_Init+0x2f4>)
 80029d8:	f003 fb02 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80029dc:	2302      	movs	r3, #2
 80029de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80029e0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80029e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 031c 	add.w	r3, r7, #28
 80029ee:	4619      	mov	r1, r3
 80029f0:	4808      	ldr	r0, [pc, #32]	; (8002a14 <MX_GPIO_Init+0x2f4>)
 80029f2:	f003 faf5 	bl	8005fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2105      	movs	r1, #5
 80029fa:	2028      	movs	r0, #40	; 0x28
 80029fc:	f002 fe58 	bl	80056b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a00:	2028      	movs	r0, #40	; 0x28
 8002a02:	f002 fe71 	bl	80056e8 <HAL_NVIC_EnableIRQ>

}
 8002a06:	bf00      	nop
 8002a08:	3730      	adds	r7, #48	; 0x30
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40020800 	.word	0x40020800
 8002a1c:	40020c00 	.word	0x40020c00
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40020000 	.word	0x40020000

08002a28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002a30:	f00e fb90 	bl	8011154 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8002a34:	200a      	movs	r0, #10
 8002a36:	f00b f9cb 	bl	800ddd0 <osDelay>
 8002a3a:	e7fb      	b.n	8002a34 <StartDefaultTask+0xc>

08002a3c <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8002a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8002a48:	f241 3088 	movw	r0, #5000	; 0x1388
 8002a4c:	f00b f9c0 	bl	800ddd0 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8002a50:	4a90      	ldr	r2, [pc, #576]	; (8002c94 <Start_Show_Resources+0x258>)
 8002a52:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	8019      	strh	r1, [r3, #0]
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	0c12      	lsrs	r2, r2, #16
 8002a60:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8002a62:	232d      	movs	r3, #45	; 0x2d
 8002a64:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  char buff[10] = {0};
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8002a6e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8002a78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f00f f9d9 	bl	8011e3a <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8002a88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fb9f 	bl	80001d0 <strlen>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461a      	mov	r2, r3
 8002a96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a7e      	ldr	r2, [pc, #504]	; (8002c98 <Start_Show_Resources+0x25c>)
 8002a9e:	461d      	mov	r5, r3
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa4:	6028      	str	r0, [r5, #0]
 8002aa6:	6069      	str	r1, [r5, #4]
 8002aa8:	60aa      	str	r2, [r5, #8]
 8002aaa:	60eb      	str	r3, [r5, #12]
 8002aac:	cc03      	ldmia	r4!, {r0, r1}
 8002aae:	6128      	str	r0, [r5, #16]
 8002ab0:	6169      	str	r1, [r5, #20]
 8002ab2:	7823      	ldrb	r3, [r4, #0]
 8002ab4:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8002ab6:	f00e fa85 	bl	8010fc4 <xPortGetFreeHeapSize>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b77      	ldr	r3, [pc, #476]	; (8002c9c <Start_Show_Resources+0x260>)
 8002ac0:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8002ac2:	4b76      	ldr	r3, [pc, #472]	; (8002c9c <Start_Show_Resources+0x260>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002aca:	220a      	movs	r2, #10
 8002acc:	4618      	mov	r0, r3
 8002ace:	f00f f9a1 	bl	8011e14 <itoa>
	  strcat(msg.Buf, buff);
 8002ad2:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8002ad6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00f ff56 	bl	801298e <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8002ae2:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8002ae6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f00f ff4e 	bl	801298e <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 8002af2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fb6a 	bl	80001d0 <strlen>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b04:	4413      	add	r3, r2
 8002b06:	4a66      	ldr	r2, [pc, #408]	; (8002ca0 <Start_Show_Resources+0x264>)
 8002b08:	4614      	mov	r4, r2
 8002b0a:	469c      	mov	ip, r3
 8002b0c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002b10:	4665      	mov	r5, ip
 8002b12:	4626      	mov	r6, r4
 8002b14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b16:	6028      	str	r0, [r5, #0]
 8002b18:	6069      	str	r1, [r5, #4]
 8002b1a:	60aa      	str	r2, [r5, #8]
 8002b1c:	60eb      	str	r3, [r5, #12]
 8002b1e:	3410      	adds	r4, #16
 8002b20:	f10c 0c10 	add.w	ip, ip, #16
 8002b24:	4574      	cmp	r4, lr
 8002b26:	d1f3      	bne.n	8002b10 <Start_Show_Resources+0xd4>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8002b28:	485e      	ldr	r0, [pc, #376]	; (8002ca4 <Start_Show_Resources+0x268>)
 8002b2a:	f00d fa15 	bl	800ff58 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8002b34:	e004      	b.n	8002b40 <Start_Show_Resources+0x104>
	  {
	  	buffer_size ++;
 8002b36:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8002b40:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002b44:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b48:	5cd3      	ldrb	r3, [r2, r3]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f3      	bne.n	8002b36 <Start_Show_Resources+0xfa>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002b5a:	e011      	b.n	8002b80 <Start_Show_Resources+0x144>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002b5c:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002b60:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002b64:	4413      	add	r3, r2
 8002b66:	494f      	ldr	r1, [pc, #316]	; (8002ca4 <Start_Show_Resources+0x268>)
 8002b68:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8002b6c:	440a      	add	r2, r1
 8002b6e:	7811      	ldrb	r1, [r2, #0]
 8002b70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b74:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002b76:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002b80:	4a48      	ldr	r2, [pc, #288]	; (8002ca4 <Start_Show_Resources+0x268>)
 8002b82:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e6      	bne.n	8002b5c <Start_Show_Resources+0x120>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8002b8e:	4b46      	ldr	r3, [pc, #280]	; (8002ca8 <Start_Show_Resources+0x26c>)
 8002b90:	f207 4434 	addw	r4, r7, #1076	; 0x434
 8002b94:	461d      	mov	r5, r3
 8002b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b9e:	c403      	stmia	r4!, {r0, r1}
 8002ba0:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	4a41      	ldr	r2, [pc, #260]	; (8002cac <Start_Show_Resources+0x270>)
 8002ba8:	461c      	mov	r4, r3
 8002baa:	4615      	mov	r5, r2
 8002bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bb8:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 8002bbc:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8002bc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f00f fee1 	bl	801298e <strcat>
	  strcat(msg.Buf, str_head_2);
 8002bcc:	f107 020c 	add.w	r2, r7, #12
 8002bd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f00f fed9 	bl	801298e <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8002bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002be0:	2100      	movs	r1, #0
 8002be2:	4830      	ldr	r0, [pc, #192]	; (8002ca4 <Start_Show_Resources+0x268>)
 8002be4:	f00f f929 	bl	8011e3a <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8002be8:	482e      	ldr	r0, [pc, #184]	; (8002ca4 <Start_Show_Resources+0x268>)
 8002bea:	f00d fa4b 	bl	8010084 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 8002bee:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3340      	adds	r3, #64	; 0x40
 8002bfe:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002c08:	e011      	b.n	8002c2e <Start_Show_Resources+0x1f2>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002c0a:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002c0e:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002c12:	4413      	add	r3, r2
 8002c14:	4923      	ldr	r1, [pc, #140]	; (8002ca4 <Start_Show_Resources+0x268>)
 8002c16:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8002c1a:	440a      	add	r2, r1
 8002c1c:	7811      	ldrb	r1, [r2, #0]
 8002c1e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002c22:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002c24:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <Start_Show_Resources+0x268>)
 8002c30:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002c34:	4413      	add	r3, r2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e6      	bne.n	8002c0a <Start_Show_Resources+0x1ce>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8002c3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fac5 	bl	80001d0 <strlen>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c4e:	4413      	add	r3, r2
 8002c50:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <Start_Show_Resources+0x274>)
 8002c52:	4614      	mov	r4, r2
 8002c54:	469c      	mov	ip, r3
 8002c56:	f104 0e20 	add.w	lr, r4, #32
 8002c5a:	4665      	mov	r5, ip
 8002c5c:	4626      	mov	r6, r4
 8002c5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c60:	6028      	str	r0, [r5, #0]
 8002c62:	6069      	str	r1, [r5, #4]
 8002c64:	60aa      	str	r2, [r5, #8]
 8002c66:	60eb      	str	r3, [r5, #12]
 8002c68:	3410      	adds	r4, #16
 8002c6a:	f10c 0c10 	add.w	ip, ip, #16
 8002c6e:	4574      	cmp	r4, lr
 8002c70:	d1f3      	bne.n	8002c5a <Start_Show_Resources+0x21e>
 8002c72:	4665      	mov	r5, ip
 8002c74:	4623      	mov	r3, r4
 8002c76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c78:	6028      	str	r0, [r5, #0]
 8002c7a:	6069      	str	r1, [r5, #4]
 8002c7c:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <Start_Show_Resources+0x278>)
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f00b f92e 	bl	800deec <osMessageQueuePut>
  {
 8002c90:	e6da      	b.n	8002a48 <Start_Show_Resources+0xc>
 8002c92:	bf00      	nop
 8002c94:	08014c44 	.word	0x08014c44
 8002c98:	08014bc8 	.word	0x08014bc8
 8002c9c:	20002798 	.word	0x20002798
 8002ca0:	08014be4 	.word	0x08014be4
 8002ca4:	200023b0 	.word	0x200023b0
 8002ca8:	08014c48 	.word	0x08014c48
 8002cac:	08014c64 	.word	0x08014c64
 8002cb0:	08014c18 	.word	0x08014c18
 8002cb4:	200081e8 	.word	0x200081e8

08002cb8 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <Start_UART_Task+0x58>)
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	f107 010c 	add.w	r1, r7, #12
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f00b f96b 	bl	800dfac <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002cdc:	e004      	b.n	8002ce8 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8002cde:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002ce8:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002cec:	f107 020c 	add.w	r2, r7, #12
 8002cf0:	5cd3      	ldrb	r3, [r2, r3]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f3      	bne.n	8002cde <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8002cf6:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f00e fae5 	bl	80112d0 <CDC_Transmit_FS>
    osDelay(1);
 8002d06:	2001      	movs	r0, #1
 8002d08:	f00b f862 	bl	800ddd0 <osDelay>
  {
 8002d0c:	e7da      	b.n	8002cc4 <Start_UART_Task+0xc>
 8002d0e:	bf00      	nop
 8002d10:	200081e8 	.word	0x200081e8

08002d14 <Start_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD */
void Start_LCD(void *argument)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD */
  /* Infinite loop */

	// Init LCD
	TFT9341_ini(240, 320);
 8002d1c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002d20:	20f0      	movs	r0, #240	; 0xf0
 8002d22:	f7fe fab1 	bl	8001288 <TFT9341_ini>
	TFT9341_SetRotation(3);
 8002d26:	2003      	movs	r0, #3
 8002d28:	f7fe fe16 	bl	8001958 <TFT9341_SetRotation>
	TFT9341_SetTextColor(TFT9341_WHITE);
 8002d2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d30:	f7fe fcce 	bl	80016d0 <TFT9341_SetTextColor>
	TFT9341_SetBackColor(TFT9341_BLUE);
 8002d34:	201f      	movs	r0, #31
 8002d36:	f7fe fcdb 	bl	80016f0 <TFT9341_SetBackColor>
	TFT9341_FillScreen(TFT9341_BLUE);
 8002d3a:	201f      	movs	r0, #31
 8002d3c:	f7fe fc72 	bl	8001624 <TFT9341_FillScreen>

	// Init names sensors
	TFT9341_String_DMA(2,30, "TEST ");
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <Start_LCD+0x40>)
 8002d42:	211e      	movs	r1, #30
 8002d44:	2002      	movs	r0, #2
 8002d46:	f7fe fde3 	bl	8001910 <TFT9341_String_DMA>
	{




		osDelay(1000);
 8002d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d4e:	f00b f83f 	bl	800ddd0 <osDelay>
 8002d52:	e7fa      	b.n	8002d4a <Start_LCD+0x36>
 8002d54:	08014c8c 	.word	0x08014c8c

08002d58 <Start_LCD_touchscreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD_touchscreen */
void Start_LCD_touchscreen(void *argument)
{
 8002d58:	b5b0      	push	{r4, r5, r7, lr}
 8002d5a:	b0b2      	sub	sp, #200	; 0xc8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD_touchscreen */
  /* Infinite loop */
	LCDQUEUE msg;												// Make QUEUE
	memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002d60:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d64:	2264      	movs	r2, #100	; 0x64
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f00f f866 	bl	8011e3a <memset>
	char buffer[50] = {0};
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d76:	222e      	movs	r2, #46	; 0x2e
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f00f f85d 	bl	8011e3a <memset>

	for(;;)
  	 {
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002d80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d84:	2264      	movs	r2, #100	; 0x64
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f00f f856 	bl	8011e3a <memset>
	  //СЕНСОР ЕКРАНУ
	  if(TP_Touchpad_Pressed() == TOUCHPAD_PRESSED)
 8002d8e:	f7fe f9e5 	bl	800115c <TP_Touchpad_Pressed>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	f040 8091 	bne.w	8002ebc <Start_LCD_touchscreen+0x164>
	  {
		  strcat(buffer, "PRESED ");
 8002d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fa16 	bl	80001d0 <strlen>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dac:	4413      	add	r3, r2
 8002dae:	495e      	ldr	r1, [pc, #376]	; (8002f28 <Start_LCD_touchscreen+0x1d0>)
 8002db0:	461a      	mov	r2, r3
 8002db2:	460b      	mov	r3, r1
 8002db4:	cb03      	ldmia	r3!, {r0, r1}
 8002db6:	6010      	str	r0, [r2, #0]
 8002db8:	6051      	str	r1, [r2, #4]

		  uint16_t x_and_y[2] = {0};
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
		  uint8_t status_ts = TP_Read_Coordinates(x_and_y);
 8002dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe f8f4 	bl	8000fb0 <TP_Read_Coordinates>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		  if(status_ts == TOUCHPAD_DATA_OK)
 8002dce:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	f040 808c 	bne.w	8002ef0 <Start_LCD_touchscreen+0x198>
		  {
			  // Convert coordinate from uint16_t format in string format
			  // And save it in main buffer
			  char buff_x_coordinates[6] = {0};
 8002dd8:	2300      	movs	r3, #0
 8002dda:	623b      	str	r3, [r7, #32]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	84bb      	strh	r3, [r7, #36]	; 0x24
			  char buff_y_coordinates[6] = {0};
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	2300      	movs	r3, #0
 8002de6:	83bb      	strh	r3, [r7, #28]
			  char buff_coordinates[15] = {0};
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	f107 030c 	add.w	r3, r7, #12
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	f8c3 2007 	str.w	r2, [r3, #7]

			  strcat(buff_x_coordinates, "x: ");
 8002dfa:	f107 0320 	add.w	r3, r7, #32
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd f9e6 	bl	80001d0 <strlen>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	f107 0320 	add.w	r3, r7, #32
 8002e0c:	4413      	add	r3, r2
 8002e0e:	4a47      	ldr	r2, [pc, #284]	; (8002f2c <Start_LCD_touchscreen+0x1d4>)
 8002e10:	6810      	ldr	r0, [r2, #0]
 8002e12:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[0], buff_x_coordinates, 10);
 8002e14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e16:	4618      	mov	r0, r3
 8002e18:	f107 0320 	add.w	r3, r7, #32
 8002e1c:	220a      	movs	r2, #10
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f00e fff8 	bl	8011e14 <itoa>
			  strcat(buff_x_coordinates, " ");
 8002e24:	f107 0320 	add.w	r3, r7, #32
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd f9d1 	bl	80001d0 <strlen>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	f107 0320 	add.w	r3, r7, #32
 8002e36:	4413      	add	r3, r2
 8002e38:	493d      	ldr	r1, [pc, #244]	; (8002f30 <Start_LCD_touchscreen+0x1d8>)
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	8013      	strh	r3, [r2, #0]

			  strcat(buff_y_coordinates, "y: ");
 8002e42:	f107 0318 	add.w	r3, r7, #24
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd f9c2 	bl	80001d0 <strlen>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f107 0318 	add.w	r3, r7, #24
 8002e54:	4413      	add	r3, r2
 8002e56:	4a37      	ldr	r2, [pc, #220]	; (8002f34 <Start_LCD_touchscreen+0x1dc>)
 8002e58:	6810      	ldr	r0, [r2, #0]
 8002e5a:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[1], buff_y_coordinates, 10);
 8002e5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f107 0318 	add.w	r3, r7, #24
 8002e64:	220a      	movs	r2, #10
 8002e66:	4619      	mov	r1, r3
 8002e68:	f00e ffd4 	bl	8011e14 <itoa>
			  strcat(buff_y_coordinates, " ");
 8002e6c:	f107 0318 	add.w	r3, r7, #24
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd f9ad 	bl	80001d0 <strlen>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f107 0318 	add.w	r3, r7, #24
 8002e7e:	4413      	add	r3, r2
 8002e80:	492b      	ldr	r1, [pc, #172]	; (8002f30 <Start_LCD_touchscreen+0x1d8>)
 8002e82:	461a      	mov	r2, r3
 8002e84:	460b      	mov	r3, r1
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	8013      	strh	r3, [r2, #0]

			  strcat(buff_coordinates, buff_x_coordinates);
 8002e8a:	f107 0220 	add.w	r2, r7, #32
 8002e8e:	f107 0308 	add.w	r3, r7, #8
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f00f fd7a 	bl	801298e <strcat>
			  strcat(buff_coordinates, buff_y_coordinates);
 8002e9a:	f107 0218 	add.w	r2, r7, #24
 8002e9e:	f107 0308 	add.w	r3, r7, #8
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f00f fd72 	bl	801298e <strcat>
			  strcat(buffer, buff_coordinates);
 8002eaa:	f107 0208 	add.w	r2, r7, #8
 8002eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f00f fd6a 	bl	801298e <strcat>
 8002eba:	e019      	b.n	8002ef0 <Start_LCD_touchscreen+0x198>
		  }
	  }
	  else
	  {
		  strcat(buffer, "NO PRESS                  ");
 8002ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd f985 	bl	80001d0 <strlen>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <Start_LCD_touchscreen+0x1e0>)
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed8:	6028      	str	r0, [r5, #0]
 8002eda:	6069      	str	r1, [r5, #4]
 8002edc:	60aa      	str	r2, [r5, #8]
 8002ede:	60eb      	str	r3, [r5, #12]
 8002ee0:	cc03      	ldmia	r4!, {r0, r1}
 8002ee2:	6128      	str	r0, [r5, #16]
 8002ee4:	6169      	str	r1, [r5, #20]
 8002ee6:	8823      	ldrh	r3, [r4, #0]
 8002ee8:	78a2      	ldrb	r2, [r4, #2]
 8002eea:	832b      	strh	r3, [r5, #24]
 8002eec:	4613      	mov	r3, r2
 8002eee:	76ab      	strb	r3, [r5, #26]
	  }

	  strcat(msg.buff, buffer);
 8002ef0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002ef4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f00f fd47 	bl	801298e <strcat>
	  osMessageQueuePut(LCDQueueHandle, &msg, 0, osWaitForever);  	// Write data on queue (In will print on StartUART_Task task)
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <Start_LCD_touchscreen+0x1e4>)
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f00a ffed 	bl	800deec <osMessageQueuePut>
	  memset(buffer, 0, sizeof(buffer));
 8002f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f16:	2232      	movs	r2, #50	; 0x32
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f00e ff8d 	bl	8011e3a <memset>

	  osDelay(200);
 8002f20:	20c8      	movs	r0, #200	; 0xc8
 8002f22:	f00a ff55 	bl	800ddd0 <osDelay>
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002f26:	e72b      	b.n	8002d80 <Start_LCD_touchscreen+0x28>
 8002f28:	08014c94 	.word	0x08014c94
 8002f2c:	08014c9c 	.word	0x08014c9c
 8002f30:	08014ca0 	.word	0x08014ca0
 8002f34:	08014ca4 	.word	0x08014ca4
 8002f38:	08014ca8 	.word	0x08014ca8
 8002f3c:	2000c370 	.word	0x2000c370

08002f40 <Start_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RTC */
void Start_RTC(void *argument)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b0a0      	sub	sp, #128	; 0x80
 8002f44:	af04      	add	r7, sp, #16
 8002f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RTC */
  /* Infinite loop */

	osDelay(1000);
 8002f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f4c:	f00a ff40 	bl	800ddd0 <osDelay>

	// For resd time
	char time[20] = {0};
 8002f50:	2300      	movs	r3, #0
 8002f52:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
	char date[40] = {0};
 8002f62:	2300      	movs	r3, #0
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
 8002f66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f6a:	2224      	movs	r2, #36	; 0x24
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f00e ff63 	bl	8011e3a <memset>
	char time_buf[10] = {0};
 8002f74:	2300      	movs	r3, #0
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	809a      	strh	r2, [r3, #4]
	char time_buf_2[10] = {0};
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	809a      	strh	r2, [r3, #4]

	uint8_t seconds = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	75fb      	strb	r3, [r7, #23]
	uint8_t minutes = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	75bb      	strb	r3, [r7, #22]
	uint8_t hours = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	757b      	strb	r3, [r7, #21]
	uint8_t day = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	753b      	strb	r3, [r7, #20]
	uint8_t date_day = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	74fb      	strb	r3, [r7, #19]
	uint8_t mounth = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	74bb      	strb	r3, [r7, #18]
	uint8_t year = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	747b      	strb	r3, [r7, #17]
	uint8_t status = 9;
 8002fac:	2309      	movs	r3, #9
 8002fae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	//

	oled_init();
 8002fb2:	f001 ff3d 	bl	8004e30 <oled_init>
	oled_update();
 8002fb6:	f001 fee7 	bl	8004d88 <oled_update>
	ds3231_I2C_init();
 8002fba:	f7fe fd9f 	bl	8001afc <ds3231_I2C_init>

	// Encoder
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002fbe:	213c      	movs	r1, #60	; 0x3c
 8002fc0:	48c9      	ldr	r0, [pc, #804]	; (80032e8 <Start_RTC+0x3a8>)
 8002fc2:	f007 f966 	bl	800a292 <HAL_TIM_Encoder_Start>
	int32_t prevCounter = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
	//

	for(;;)
	{
		switch (klick)
 8002fca:	4bc8      	ldr	r3, [pc, #800]	; (80032ec <Start_RTC+0x3ac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b0f      	cmp	r3, #15
 8002fd0:	d8fb      	bhi.n	8002fca <Start_RTC+0x8a>
 8002fd2:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <Start_RTC+0x98>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	08003019 	.word	0x08003019
 8002fdc:	0800362d 	.word	0x0800362d
 8002fe0:	08002fcb 	.word	0x08002fcb
 8002fe4:	08003795 	.word	0x08003795
 8002fe8:	08002fcb 	.word	0x08002fcb
 8002fec:	080038b5 	.word	0x080038b5
 8002ff0:	08002fcb 	.word	0x08002fcb
 8002ff4:	08003a09 	.word	0x08003a09
 8002ff8:	08002fcb 	.word	0x08002fcb
 8002ffc:	08003b33 	.word	0x08003b33
 8003000:	08002fcb 	.word	0x08002fcb
 8003004:	08003c83 	.word	0x08003c83
 8003008:	08002fcb 	.word	0x08002fcb
 800300c:	08003da9 	.word	0x08003da9
 8003010:	08002fcb 	.word	0x08002fcb
 8003014:	08003efb 	.word	0x08003efb
		{
			case 0:					// Read time and data from DS3231

				strcat(time_buf, "TIME");
 8003018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd f8d7 	bl	80001d0 <strlen>
 8003022:	4603      	mov	r3, r0
 8003024:	461a      	mov	r2, r3
 8003026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302a:	4413      	add	r3, r2
 800302c:	4ab0      	ldr	r2, [pc, #704]	; (80032f0 <Start_RTC+0x3b0>)
 800302e:	6810      	ldr	r0, [r2, #0]
 8003030:	6018      	str	r0, [r3, #0]
 8003032:	7912      	ldrb	r2, [r2, #4]
 8003034:	711a      	strb	r2, [r3, #4]
				graphics_text(40, 10, 3, time_buf);
 8003036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303a:	2203      	movs	r2, #3
 800303c:	210a      	movs	r1, #10
 800303e:	2028      	movs	r0, #40	; 0x28
 8003040:	f001 fdee 	bl	8004c20 <graphics_text>
				oled_update();
 8003044:	f001 fea0 	bl	8004d88 <oled_update>
				osDelay(2000);
 8003048:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800304c:	f00a fec0 	bl	800ddd0 <osDelay>
				clear();
 8003050:	f001 fd52 	bl	8004af8 <clear>
				oled_update();
 8003054:	f001 fe98 	bl	8004d88 <oled_update>

				while(klick == 0)
 8003058:	e2e1      	b.n	800361e <Start_RTC+0x6de>
				{
					memset(time, 0, sizeof(time));
 800305a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800305e:	2214      	movs	r2, #20
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f00e fee9 	bl	8011e3a <memset>
					memset(date, 0, sizeof(date));
 8003068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800306c:	2228      	movs	r2, #40	; 0x28
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f00e fee2 	bl	8011e3a <memset>
					memset(time_buf, 0, sizeof(time_buf));
 8003076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307a:	220a      	movs	r2, #10
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f00e fedb 	bl	8011e3a <memset>
					memset(time_buf_2, 0, sizeof(time_buf_2));
 8003084:	f107 0318 	add.w	r3, r7, #24
 8003088:	220a      	movs	r2, #10
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f00e fed4 	bl	8011e3a <memset>

					// 1. Read time from RTS
					// Red status (Detect DS3231)
					uint8_t buff= 0;
 8003092:	2300      	movs	r3, #0
 8003094:	72fb      	strb	r3, [r7, #11]
					status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 8003096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309a:	9302      	str	r3, [sp, #8]
 800309c:	2301      	movs	r3, #1
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	f107 030b 	add.w	r3, r7, #11
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	2301      	movs	r3, #1
 80030a8:	2200      	movs	r2, #0
 80030aa:	21d0      	movs	r1, #208	; 0xd0
 80030ac:	4891      	ldr	r0, [pc, #580]	; (80032f4 <Start_RTC+0x3b4>)
 80030ae:	f003 fdc1 	bl	8006c34 <HAL_I2C_Mem_Read>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if(status != HAL_OK )								// If DS3231 doesen'e detect
 80030b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d050      	beq.n	8003162 <Start_RTC+0x222>
					{
						clear();
 80030c0:	f001 fd1a 	bl	8004af8 <clear>
						while(status != HAL_OK)							// If ERROR
 80030c4:	e046      	b.n	8003154 <Start_RTC+0x214>
						{
							strcat(time_buf, "RTC ERROR");
 80030c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd f880 	bl	80001d0 <strlen>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d8:	4413      	add	r3, r2
 80030da:	4987      	ldr	r1, [pc, #540]	; (80032f8 <Start_RTC+0x3b8>)
 80030dc:	461a      	mov	r2, r3
 80030de:	460b      	mov	r3, r1
 80030e0:	cb03      	ldmia	r3!, {r0, r1}
 80030e2:	6010      	str	r0, [r2, #0]
 80030e4:	6051      	str	r1, [r2, #4]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	8113      	strh	r3, [r2, #8]
							graphics_text(8, 5, 3, time_buf);
 80030ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ee:	2203      	movs	r2, #3
 80030f0:	2105      	movs	r1, #5
 80030f2:	2008      	movs	r0, #8
 80030f4:	f001 fd94 	bl	8004c20 <graphics_text>
							oled_update();
 80030f8:	f001 fe46 	bl	8004d88 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 80030fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003100:	220a      	movs	r2, #10
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f00e fe98 	bl	8011e3a <memset>
							osDelay(300);
 800310a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800310e:	f00a fe5f 	bl	800ddd0 <osDelay>

							invert_rectangle(0, 0, 128, 32);
 8003112:	2320      	movs	r3, #32
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	2100      	movs	r1, #0
 8003118:	2000      	movs	r0, #0
 800311a:	f001 fcbf 	bl	8004a9c <invert_rectangle>
							oled_update();
 800311e:	f001 fe33 	bl	8004d88 <oled_update>
							osDelay(300);
 8003122:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003126:	f00a fe53 	bl	800ddd0 <osDelay>

							clear();
 800312a:	f001 fce5 	bl	8004af8 <clear>
							oled_update();
 800312e:	f001 fe2b 	bl	8004d88 <oled_update>

							status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 8003132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003136:	9302      	str	r3, [sp, #8]
 8003138:	2301      	movs	r3, #1
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	f107 030b 	add.w	r3, r7, #11
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2301      	movs	r3, #1
 8003144:	2200      	movs	r2, #0
 8003146:	21d0      	movs	r1, #208	; 0xd0
 8003148:	486a      	ldr	r0, [pc, #424]	; (80032f4 <Start_RTC+0x3b4>)
 800314a:	f003 fd73 	bl	8006c34 <HAL_I2C_Mem_Read>
 800314e:	4603      	mov	r3, r0
 8003150:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						while(status != HAL_OK)							// If ERROR
 8003154:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1b4      	bne.n	80030c6 <Start_RTC+0x186>
						}
						clear();
 800315c:	f001 fccc 	bl	8004af8 <clear>
 8003160:	e25d      	b.n	800361e <Start_RTC+0x6de>
					}

					else	// If all DS3231 detected, read time and date
					{
						ds3231_read(DS3231_REGISTER_SECONDS_DEFAULT, &seconds);
 8003162:	f107 0317 	add.w	r3, r7, #23
 8003166:	4619      	mov	r1, r3
 8003168:	2000      	movs	r0, #0
 800316a:	f7fe fccf 	bl	8001b0c <ds3231_read>
						ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &minutes);
 800316e:	f107 0316 	add.w	r3, r7, #22
 8003172:	4619      	mov	r1, r3
 8003174:	2001      	movs	r0, #1
 8003176:	f7fe fcc9 	bl	8001b0c <ds3231_read>
						ds3231_read(DS3231_REGISTER_HOURS_DEFAULT, &hours);
 800317a:	f107 0315 	add.w	r3, r7, #21
 800317e:	4619      	mov	r1, r3
 8003180:	2002      	movs	r0, #2
 8003182:	f7fe fcc3 	bl	8001b0c <ds3231_read>

						ds3231_read(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &day);
 8003186:	f107 0314 	add.w	r3, r7, #20
 800318a:	4619      	mov	r1, r3
 800318c:	2003      	movs	r0, #3
 800318e:	f7fe fcbd 	bl	8001b0c <ds3231_read>
						ds3231_read(DS3231_REGISTER_DATE_DEFAULT, &date_day);
 8003192:	f107 0313 	add.w	r3, r7, #19
 8003196:	4619      	mov	r1, r3
 8003198:	2004      	movs	r0, #4
 800319a:	f7fe fcb7 	bl	8001b0c <ds3231_read>
						ds3231_read(DS3231_REGISTER_MONTH_DEFAULT, &mounth);
 800319e:	f107 0312 	add.w	r3, r7, #18
 80031a2:	4619      	mov	r1, r3
 80031a4:	2005      	movs	r0, #5
 80031a6:	f7fe fcb1 	bl	8001b0c <ds3231_read>
						ds3231_read(DS3231_REGISTER_YEAR_DEFAULT, &year);
 80031aa:	f107 0311 	add.w	r3, r7, #17
 80031ae:	4619      	mov	r1, r3
 80031b0:	2006      	movs	r0, #6
 80031b2:	f7fe fcab 	bl	8001b0c <ds3231_read>

						// Convert in string
						// Print minutes on OLED
						if(hours < 10)
 80031b6:	7d7b      	ldrb	r3, [r7, #21]
 80031b8:	2b09      	cmp	r3, #9
 80031ba:	d835      	bhi.n	8003228 <Start_RTC+0x2e8>
						{
							memset(time_buf, 0, sizeof(time_buf));
 80031bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c0:	220a      	movs	r2, #10
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00e fe38 	bl	8011e3a <memset>
							sprintf(time_buf, "%c", '0');
 80031ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ce:	2230      	movs	r2, #48	; 0x30
 80031d0:	494a      	ldr	r1, [pc, #296]	; (80032fc <Start_RTC+0x3bc>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f00f fb78 	bl	80128c8 <siprintf>
							sprintf(time_buf_2, "%d", hours);
 80031d8:	7d7b      	ldrb	r3, [r7, #21]
 80031da:	461a      	mov	r2, r3
 80031dc:	f107 0318 	add.w	r3, r7, #24
 80031e0:	4947      	ldr	r1, [pc, #284]	; (8003300 <Start_RTC+0x3c0>)
 80031e2:	4618      	mov	r0, r3
 80031e4:	f00f fb70 	bl	80128c8 <siprintf>
							strcat(time_buf, time_buf_2);
 80031e8:	f107 0218 	add.w	r2, r7, #24
 80031ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f00f fbcb 	bl	801298e <strcat>
							strcat(time, time_buf);
 80031f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80031fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f00f fbc3 	bl	801298e <strcat>
							strcat(time, ":");
 8003208:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800320c:	4618      	mov	r0, r3
 800320e:	f7fc ffdf 	bl	80001d0 <strlen>
 8003212:	4603      	mov	r3, r0
 8003214:	461a      	mov	r2, r3
 8003216:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800321a:	4413      	add	r3, r2
 800321c:	4939      	ldr	r1, [pc, #228]	; (8003304 <Start_RTC+0x3c4>)
 800321e:	461a      	mov	r2, r3
 8003220:	460b      	mov	r3, r1
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	8013      	strh	r3, [r2, #0]
 8003226:	e025      	b.n	8003274 <Start_RTC+0x334>
						}
						else
						{
							sprintf(time_buf, "%d", hours);
 8003228:	7d7b      	ldrb	r3, [r7, #21]
 800322a:	461a      	mov	r2, r3
 800322c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003230:	4933      	ldr	r1, [pc, #204]	; (8003300 <Start_RTC+0x3c0>)
 8003232:	4618      	mov	r0, r3
 8003234:	f00f fb48 	bl	80128c8 <siprintf>
							strcat(time, time_buf);
 8003238:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800323c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f00f fba3 	bl	801298e <strcat>
							strcat(time, ":");
 8003248:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800324c:	4618      	mov	r0, r3
 800324e:	f7fc ffbf 	bl	80001d0 <strlen>
 8003252:	4603      	mov	r3, r0
 8003254:	461a      	mov	r2, r3
 8003256:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800325a:	4413      	add	r3, r2
 800325c:	4929      	ldr	r1, [pc, #164]	; (8003304 <Start_RTC+0x3c4>)
 800325e:	461a      	mov	r2, r3
 8003260:	460b      	mov	r3, r1
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 8003266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326a:	220a      	movs	r2, #10
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f00e fde3 	bl	8011e3a <memset>
						}

						// Print minutes on OLED
						if(minutes < 10)
 8003274:	7dbb      	ldrb	r3, [r7, #22]
 8003276:	2b09      	cmp	r3, #9
 8003278:	d846      	bhi.n	8003308 <Start_RTC+0x3c8>
						{
							memset(time_buf, 0, sizeof(time_buf));
 800327a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800327e:	220a      	movs	r2, #10
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f00e fdd9 	bl	8011e3a <memset>
							sprintf(time_buf, "%c", '0');
 8003288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328c:	2230      	movs	r2, #48	; 0x30
 800328e:	491b      	ldr	r1, [pc, #108]	; (80032fc <Start_RTC+0x3bc>)
 8003290:	4618      	mov	r0, r3
 8003292:	f00f fb19 	bl	80128c8 <siprintf>
							sprintf(time_buf_2, "%d", minutes);
 8003296:	7dbb      	ldrb	r3, [r7, #22]
 8003298:	461a      	mov	r2, r3
 800329a:	f107 0318 	add.w	r3, r7, #24
 800329e:	4918      	ldr	r1, [pc, #96]	; (8003300 <Start_RTC+0x3c0>)
 80032a0:	4618      	mov	r0, r3
 80032a2:	f00f fb11 	bl	80128c8 <siprintf>
							strcat(time_buf, time_buf_2);
 80032a6:	f107 0218 	add.w	r2, r7, #24
 80032aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f00f fb6c 	bl	801298e <strcat>
							strcat(time, time_buf);
 80032b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80032ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f00f fb64 	bl	801298e <strcat>
							strcat(time, ":");
 80032c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fc ff80 	bl	80001d0 <strlen>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032d8:	4413      	add	r3, r2
 80032da:	490a      	ldr	r1, [pc, #40]	; (8003304 <Start_RTC+0x3c4>)
 80032dc:	461a      	mov	r2, r3
 80032de:	460b      	mov	r3, r1
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	8013      	strh	r3, [r2, #0]
 80032e4:	e036      	b.n	8003354 <Start_RTC+0x414>
 80032e6:	bf00      	nop
 80032e8:	2000cb4c 	.word	0x2000cb4c
 80032ec:	200027a4 	.word	0x200027a4
 80032f0:	08014cc4 	.word	0x08014cc4
 80032f4:	2000764c 	.word	0x2000764c
 80032f8:	08014ccc 	.word	0x08014ccc
 80032fc:	08014b60 	.word	0x08014b60
 8003300:	08014b64 	.word	0x08014b64
 8003304:	08014b68 	.word	0x08014b68
						}
						else
						{
							sprintf(time_buf, "%d", minutes);
 8003308:	7dbb      	ldrb	r3, [r7, #22]
 800330a:	461a      	mov	r2, r3
 800330c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003310:	49d0      	ldr	r1, [pc, #832]	; (8003654 <Start_RTC+0x714>)
 8003312:	4618      	mov	r0, r3
 8003314:	f00f fad8 	bl	80128c8 <siprintf>
							strcat(time, time_buf);
 8003318:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800331c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f00f fb33 	bl	801298e <strcat>
							strcat(time, ":");
 8003328:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800332c:	4618      	mov	r0, r3
 800332e:	f7fc ff4f 	bl	80001d0 <strlen>
 8003332:	4603      	mov	r3, r0
 8003334:	461a      	mov	r2, r3
 8003336:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800333a:	4413      	add	r3, r2
 800333c:	49c6      	ldr	r1, [pc, #792]	; (8003658 <Start_RTC+0x718>)
 800333e:	461a      	mov	r2, r3
 8003340:	460b      	mov	r3, r1
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 8003346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800334a:	220a      	movs	r2, #10
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f00e fd73 	bl	8011e3a <memset>
						}

						// Print seconds on OLED
						if(seconds == 0)
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <Start_RTC+0x422>
						{
							clear();
 800335a:	f001 fbcd 	bl	8004af8 <clear>
							oled_update();
 800335e:	f001 fd13 	bl	8004d88 <oled_update>
						}
						if(seconds < 10)
 8003362:	7dfb      	ldrb	r3, [r7, #23]
 8003364:	2b09      	cmp	r3, #9
 8003366:	d826      	bhi.n	80033b6 <Start_RTC+0x476>
						{
							memset(time_buf, 0, sizeof(time_buf));
 8003368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336c:	220a      	movs	r2, #10
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f00e fd62 	bl	8011e3a <memset>
							sprintf(time_buf, "%c", '0');
 8003376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800337a:	2230      	movs	r2, #48	; 0x30
 800337c:	49b7      	ldr	r1, [pc, #732]	; (800365c <Start_RTC+0x71c>)
 800337e:	4618      	mov	r0, r3
 8003380:	f00f faa2 	bl	80128c8 <siprintf>
							sprintf(time_buf_2, "%d", seconds);
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	461a      	mov	r2, r3
 8003388:	f107 0318 	add.w	r3, r7, #24
 800338c:	49b1      	ldr	r1, [pc, #708]	; (8003654 <Start_RTC+0x714>)
 800338e:	4618      	mov	r0, r3
 8003390:	f00f fa9a 	bl	80128c8 <siprintf>
							strcat(time_buf, time_buf_2);
 8003394:	f107 0218 	add.w	r2, r7, #24
 8003398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800339c:	4611      	mov	r1, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	f00f faf5 	bl	801298e <strcat>
							strcat(time, time_buf);
 80033a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f00f faed 	bl	801298e <strcat>
 80033b4:	e016      	b.n	80033e4 <Start_RTC+0x4a4>
						}
						else
						{
							sprintf(time_buf, "%d", seconds);
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033be:	49a5      	ldr	r1, [pc, #660]	; (8003654 <Start_RTC+0x714>)
 80033c0:	4618      	mov	r0, r3
 80033c2:	f00f fa81 	bl	80128c8 <siprintf>
							strcat(time, time_buf);
 80033c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f00f fadc 	bl	801298e <strcat>
							memset(time_buf, 0, sizeof(time_buf));
 80033d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033da:	220a      	movs	r2, #10
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f00e fd2b 	bl	8011e3a <memset>
						}

						// Print date
						sprintf(time_buf, "%d", date_day);
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ec:	4999      	ldr	r1, [pc, #612]	; (8003654 <Start_RTC+0x714>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	f00f fa6a 	bl	80128c8 <siprintf>
						strcat(date, time_buf);
 80033f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f00f fac5 	bl	801298e <strcat>
						strcat(date, ".");
 8003404:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003408:	4618      	mov	r0, r3
 800340a:	f7fc fee1 	bl	80001d0 <strlen>
 800340e:	4603      	mov	r3, r0
 8003410:	461a      	mov	r2, r3
 8003412:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003416:	4413      	add	r3, r2
 8003418:	4991      	ldr	r1, [pc, #580]	; (8003660 <Start_RTC+0x720>)
 800341a:	461a      	mov	r2, r3
 800341c:	460b      	mov	r3, r1
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	8013      	strh	r3, [r2, #0]
						memset(time_buf, 0, sizeof(time_buf));
 8003422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003426:	220a      	movs	r2, #10
 8003428:	2100      	movs	r1, #0
 800342a:	4618      	mov	r0, r3
 800342c:	f00e fd05 	bl	8011e3a <memset>

						sprintf(time_buf, "%d", mounth);
 8003430:	7cbb      	ldrb	r3, [r7, #18]
 8003432:	461a      	mov	r2, r3
 8003434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003438:	4986      	ldr	r1, [pc, #536]	; (8003654 <Start_RTC+0x714>)
 800343a:	4618      	mov	r0, r3
 800343c:	f00f fa44 	bl	80128c8 <siprintf>
						strcat(date, time_buf);
 8003440:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003444:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f00f fa9f 	bl	801298e <strcat>
						strcat(date, ".");
 8003450:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003454:	4618      	mov	r0, r3
 8003456:	f7fc febb 	bl	80001d0 <strlen>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003462:	4413      	add	r3, r2
 8003464:	497e      	ldr	r1, [pc, #504]	; (8003660 <Start_RTC+0x720>)
 8003466:	461a      	mov	r2, r3
 8003468:	460b      	mov	r3, r1
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	8013      	strh	r3, [r2, #0]
						memset(time_buf, 0, sizeof(time_buf));
 800346e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003472:	220a      	movs	r2, #10
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f00e fcdf 	bl	8011e3a <memset>

						sprintf(time_buf, "%d", year);
 800347c:	7c7b      	ldrb	r3, [r7, #17]
 800347e:	461a      	mov	r2, r3
 8003480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003484:	4973      	ldr	r1, [pc, #460]	; (8003654 <Start_RTC+0x714>)
 8003486:	4618      	mov	r0, r3
 8003488:	f00f fa1e 	bl	80128c8 <siprintf>
						strcat(date, "20");
 800348c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003490:	4618      	mov	r0, r3
 8003492:	f7fc fe9d 	bl	80001d0 <strlen>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800349e:	4413      	add	r3, r2
 80034a0:	4a70      	ldr	r2, [pc, #448]	; (8003664 <Start_RTC+0x724>)
 80034a2:	8811      	ldrh	r1, [r2, #0]
 80034a4:	7892      	ldrb	r2, [r2, #2]
 80034a6:	8019      	strh	r1, [r3, #0]
 80034a8:	709a      	strb	r2, [r3, #2]
						strcat(date, time_buf);
 80034aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80034ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f00f fa6a 	bl	801298e <strcat>
						memset(time_buf, 0, sizeof(time_buf));
 80034ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034be:	220a      	movs	r2, #10
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f00e fcb9 	bl	8011e3a <memset>

						// day
						switch (day)
 80034c8:	7d3b      	ldrb	r3, [r7, #20]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	f200 8092 	bhi.w	80035f6 <Start_RTC+0x6b6>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <Start_RTC+0x598>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	080034f5 	.word	0x080034f5
 80034dc:	08003517 	.word	0x08003517
 80034e0:	0800353d 	.word	0x0800353d
 80034e4:	08003567 	.word	0x08003567
 80034e8:	0800358d 	.word	0x0800358d
 80034ec:	080035af 	.word	0x080035af
 80034f0:	080035d5 	.word	0x080035d5
						{
							case 1:
								strcat(date, " Monday");
 80034f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fc fe69 	bl	80001d0 <strlen>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003506:	4413      	add	r3, r2
 8003508:	4957      	ldr	r1, [pc, #348]	; (8003668 <Start_RTC+0x728>)
 800350a:	461a      	mov	r2, r3
 800350c:	460b      	mov	r3, r1
 800350e:	cb03      	ldmia	r3!, {r0, r1}
 8003510:	6010      	str	r0, [r2, #0]
 8003512:	6051      	str	r1, [r2, #4]
								break;
 8003514:	e06f      	b.n	80035f6 <Start_RTC+0x6b6>
							case 2:
								strcat(date, " Tuesday");
 8003516:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800351a:	4618      	mov	r0, r3
 800351c:	f7fc fe58 	bl	80001d0 <strlen>
 8003520:	4603      	mov	r3, r0
 8003522:	461a      	mov	r2, r3
 8003524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003528:	4413      	add	r3, r2
 800352a:	4950      	ldr	r1, [pc, #320]	; (800366c <Start_RTC+0x72c>)
 800352c:	461a      	mov	r2, r3
 800352e:	460b      	mov	r3, r1
 8003530:	cb03      	ldmia	r3!, {r0, r1}
 8003532:	6010      	str	r0, [r2, #0]
 8003534:	6051      	str	r1, [r2, #4]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	7213      	strb	r3, [r2, #8]
								break;
 800353a:	e05c      	b.n	80035f6 <Start_RTC+0x6b6>
							case 3:
								strcat(date, " Wednesday");
 800353c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003540:	4618      	mov	r0, r3
 8003542:	f7fc fe45 	bl	80001d0 <strlen>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800354e:	4413      	add	r3, r2
 8003550:	4947      	ldr	r1, [pc, #284]	; (8003670 <Start_RTC+0x730>)
 8003552:	461a      	mov	r2, r3
 8003554:	460b      	mov	r3, r1
 8003556:	cb03      	ldmia	r3!, {r0, r1}
 8003558:	6010      	str	r0, [r2, #0]
 800355a:	6051      	str	r1, [r2, #4]
 800355c:	8819      	ldrh	r1, [r3, #0]
 800355e:	789b      	ldrb	r3, [r3, #2]
 8003560:	8111      	strh	r1, [r2, #8]
 8003562:	7293      	strb	r3, [r2, #10]
								break;
 8003564:	e047      	b.n	80035f6 <Start_RTC+0x6b6>
							case 4:
								strcat(date, " Thursday");
 8003566:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800356a:	4618      	mov	r0, r3
 800356c:	f7fc fe30 	bl	80001d0 <strlen>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003578:	4413      	add	r3, r2
 800357a:	493e      	ldr	r1, [pc, #248]	; (8003674 <Start_RTC+0x734>)
 800357c:	461a      	mov	r2, r3
 800357e:	460b      	mov	r3, r1
 8003580:	cb03      	ldmia	r3!, {r0, r1}
 8003582:	6010      	str	r0, [r2, #0]
 8003584:	6051      	str	r1, [r2, #4]
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	8113      	strh	r3, [r2, #8]
								break;
 800358a:	e034      	b.n	80035f6 <Start_RTC+0x6b6>
							case 5:
								strcat(date, " Friday");
 800358c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc fe1d 	bl	80001d0 <strlen>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800359e:	4413      	add	r3, r2
 80035a0:	4935      	ldr	r1, [pc, #212]	; (8003678 <Start_RTC+0x738>)
 80035a2:	461a      	mov	r2, r3
 80035a4:	460b      	mov	r3, r1
 80035a6:	cb03      	ldmia	r3!, {r0, r1}
 80035a8:	6010      	str	r0, [r2, #0]
 80035aa:	6051      	str	r1, [r2, #4]
								break;
 80035ac:	e023      	b.n	80035f6 <Start_RTC+0x6b6>
							case 6:
								strcat(date, " Saturday");
 80035ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fc fe0c 	bl	80001d0 <strlen>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035c0:	4413      	add	r3, r2
 80035c2:	492e      	ldr	r1, [pc, #184]	; (800367c <Start_RTC+0x73c>)
 80035c4:	461a      	mov	r2, r3
 80035c6:	460b      	mov	r3, r1
 80035c8:	cb03      	ldmia	r3!, {r0, r1}
 80035ca:	6010      	str	r0, [r2, #0]
 80035cc:	6051      	str	r1, [r2, #4]
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	8113      	strh	r3, [r2, #8]
								break;
 80035d2:	e010      	b.n	80035f6 <Start_RTC+0x6b6>
							case 7:
								strcat(date, " Sunday");
 80035d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc fdf9 	bl	80001d0 <strlen>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035e6:	4413      	add	r3, r2
 80035e8:	4925      	ldr	r1, [pc, #148]	; (8003680 <Start_RTC+0x740>)
 80035ea:	461a      	mov	r2, r3
 80035ec:	460b      	mov	r3, r1
 80035ee:	cb03      	ldmia	r3!, {r0, r1}
 80035f0:	6010      	str	r0, [r2, #0]
 80035f2:	6051      	str	r1, [r2, #4]
								break;
 80035f4:	bf00      	nop
						}

						graphics_text(40, 0, 3, time);
 80035f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035fa:	2203      	movs	r2, #3
 80035fc:	2100      	movs	r1, #0
 80035fe:	2028      	movs	r0, #40	; 0x28
 8003600:	f001 fb0e 	bl	8004c20 <graphics_text>
						graphics_text(0, 24, 2, date);
 8003604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003608:	2202      	movs	r2, #2
 800360a:	2118      	movs	r1, #24
 800360c:	2000      	movs	r0, #0
 800360e:	f001 fb07 	bl	8004c20 <graphics_text>
						oled_update();
 8003612:	f001 fbb9 	bl	8004d88 <oled_update>

						osDelay(1000);
 8003616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800361a:	f00a fbd9 	bl	800ddd0 <osDelay>
				while(klick == 0)
 800361e:	4b19      	ldr	r3, [pc, #100]	; (8003684 <Start_RTC+0x744>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f43f ad19 	beq.w	800305a <Start_RTC+0x11a>
					}
				}
		  		break;
 8003628:	f000 bca3 	b.w	8003f72 <Start_RTC+0x1032>


			case 1:
				// Set yer
				graphics_text(0, 0, 1, "   SET:");
 800362c:	4b16      	ldr	r3, [pc, #88]	; (8003688 <Start_RTC+0x748>)
 800362e:	2201      	movs	r2, #1
 8003630:	2100      	movs	r1, #0
 8003632:	2000      	movs	r0, #0
 8003634:	f001 faf4 	bl	8004c20 <graphics_text>
				graphics_text(0, 8, 1, "YEAR   ");
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <Start_RTC+0x74c>)
 800363a:	2201      	movs	r2, #1
 800363c:	2108      	movs	r1, #8
 800363e:	2000      	movs	r0, #0
 8003640:	f001 faee 	bl	8004c20 <graphics_text>
				oled_update();
 8003644:	f001 fba0 	bl	8004d88 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 0);								// Start count encoder from 0
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <Start_RTC+0x750>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2200      	movs	r2, #0
 800364e:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 1)
 8003650:	e071      	b.n	8003736 <Start_RTC+0x7f6>
 8003652:	bf00      	nop
 8003654:	08014b64 	.word	0x08014b64
 8003658:	08014b68 	.word	0x08014b68
 800365c:	08014b60 	.word	0x08014b60
 8003660:	08014b6c 	.word	0x08014b6c
 8003664:	08014b70 	.word	0x08014b70
 8003668:	08014cd8 	.word	0x08014cd8
 800366c:	08014ce0 	.word	0x08014ce0
 8003670:	08014cec 	.word	0x08014cec
 8003674:	08014cf8 	.word	0x08014cf8
 8003678:	08014d04 	.word	0x08014d04
 800367c:	08014d0c 	.word	0x08014d0c
 8003680:	08014d18 	.word	0x08014d18
 8003684:	200027a4 	.word	0x200027a4
 8003688:	08014d20 	.word	0x08014d20
 800368c:	08014d28 	.word	0x08014d28
 8003690:	2000cb4c 	.word	0x2000cb4c
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8003694:	4b92      	ldr	r3, [pc, #584]	; (80038e0 <Start_RTC+0x9a0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	461a      	mov	r2, r3
 800369c:	4b91      	ldr	r3, [pc, #580]	; (80038e4 <Start_RTC+0x9a4>)
 800369e:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80036a0:	4b90      	ldr	r3, [pc, #576]	; (80038e4 <Start_RTC+0x9a4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	0fda      	lsrs	r2, r3, #31
 80036aa:	4413      	add	r3, r2
 80036ac:	105b      	asrs	r3, r3, #1
 80036ae:	425b      	negs	r3, r3
 80036b0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80036b4:	337f      	adds	r3, #127	; 0x7f
 80036b6:	4a8b      	ldr	r2, [pc, #556]	; (80038e4 <Start_RTC+0x9a4>)
 80036b8:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 80036ba:	4b8a      	ldr	r3, [pc, #552]	; (80038e4 <Start_RTC+0x9a4>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d038      	beq.n	8003736 <Start_RTC+0x7f6>
					{
						prevCounter = currCounter;
 80036c4:	4b87      	ldr	r3, [pc, #540]	; (80038e4 <Start_RTC+0x9a4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
						if(currCounter > 100)									// Encoder count from 0 to 100
 80036ca:	4b86      	ldr	r3, [pc, #536]	; (80038e4 <Start_RTC+0x9a4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	dd06      	ble.n	80036e0 <Start_RTC+0x7a0>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 80036d2:	4b83      	ldr	r3, [pc, #524]	; (80038e0 <Start_RTC+0x9a0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 80036da:	4b82      	ldr	r3, [pc, #520]	; (80038e4 <Start_RTC+0x9a4>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
						}
						if(currCounter < 0)
 80036e0:	4b80      	ldr	r3, [pc, #512]	; (80038e4 <Start_RTC+0x9a4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	da06      	bge.n	80036f6 <Start_RTC+0x7b6>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 80036e8:	4b7d      	ldr	r3, [pc, #500]	; (80038e0 <Start_RTC+0x9a0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2200      	movs	r2, #0
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 80036f0:	4b7c      	ldr	r3, [pc, #496]	; (80038e4 <Start_RTC+0x9a4>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
						}

						graphics_text(0, 16, 1, "           ");
 80036f6:	4b7c      	ldr	r3, [pc, #496]	; (80038e8 <Start_RTC+0x9a8>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	2110      	movs	r1, #16
 80036fc:	2000      	movs	r0, #0
 80036fe:	f001 fa8f 	bl	8004c20 <graphics_text>
						oled_update();
 8003702:	f001 fb41 	bl	8004d88 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 8003706:	4b77      	ldr	r3, [pc, #476]	; (80038e4 <Start_RTC+0x9a4>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370e:	4977      	ldr	r1, [pc, #476]	; (80038ec <Start_RTC+0x9ac>)
 8003710:	4618      	mov	r0, r3
 8003712:	f00f f8d9 	bl	80128c8 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 8003716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371a:	2201      	movs	r2, #1
 800371c:	2110      	movs	r1, #16
 800371e:	2000      	movs	r0, #0
 8003720:	f001 fa7e 	bl	8004c20 <graphics_text>
						oled_update();
 8003724:	f001 fb30 	bl	8004d88 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8003728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800372c:	220a      	movs	r2, #10
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f00e fb82 	bl	8011e3a <memset>
				while(klick == 1)
 8003736:	4b6e      	ldr	r3, [pc, #440]	; (80038f0 <Start_RTC+0x9b0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d0aa      	beq.n	8003694 <Start_RTC+0x754>
					}
				}
				if(klick == 2)
 800373e:	4b6c      	ldr	r3, [pc, #432]	; (80038f0 <Start_RTC+0x9b0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b02      	cmp	r3, #2
 8003744:	f040 8405 	bne.w	8003f52 <Start_RTC+0x1012>
				{
					// write data
					ds3231_set(DS3231_REGISTER_YEAR_DEFAULT, &prevCounter);
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	4619      	mov	r1, r3
 800374e:	2006      	movs	r0, #6
 8003750:	f7fe fa9c 	bl	8001c8c <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 8003754:	4b67      	ldr	r3, [pc, #412]	; (80038f4 <Start_RTC+0x9b4>)
 8003756:	2201      	movs	r2, #1
 8003758:	2110      	movs	r1, #16
 800375a:	2000      	movs	r0, #0
 800375c:	f001 fa60 	bl	8004c20 <graphics_text>
					oled_update();
 8003760:	f001 fb12 	bl	8004d88 <oled_update>

					graphics_text(0, 16, 1, "installed");
 8003764:	4b64      	ldr	r3, [pc, #400]	; (80038f8 <Start_RTC+0x9b8>)
 8003766:	2201      	movs	r2, #1
 8003768:	2110      	movs	r1, #16
 800376a:	2000      	movs	r0, #0
 800376c:	f001 fa58 	bl	8004c20 <graphics_text>
					oled_update();
 8003770:	f001 fb0a 	bl	8004d88 <oled_update>

					osDelay(800);
 8003774:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003778:	f00a fb2a 	bl	800ddd0 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 800377c:	4b5d      	ldr	r3, [pc, #372]	; (80038f4 <Start_RTC+0x9b4>)
 800377e:	2201      	movs	r2, #1
 8003780:	2110      	movs	r1, #16
 8003782:	2000      	movs	r0, #0
 8003784:	f001 fa4c 	bl	8004c20 <graphics_text>
					oled_update();
 8003788:	f001 fafe 	bl	8004d88 <oled_update>

					klick = 3;
 800378c:	4b58      	ldr	r3, [pc, #352]	; (80038f0 <Start_RTC+0x9b0>)
 800378e:	2203      	movs	r2, #3
 8003790:	601a      	str	r2, [r3, #0]
				}
				break;
 8003792:	e3de      	b.n	8003f52 <Start_RTC+0x1012>

			case 3:
				// set month
				graphics_text(0, 8, 1, "MONTH");
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <Start_RTC+0x9bc>)
 8003796:	2201      	movs	r2, #1
 8003798:	2108      	movs	r1, #8
 800379a:	2000      	movs	r0, #0
 800379c:	f001 fa40 	bl	8004c20 <graphics_text>
				oled_update();
 80037a0:	f001 faf2 	bl	8004d88 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 80037a4:	4b4e      	ldr	r3, [pc, #312]	; (80038e0 <Start_RTC+0x9a0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
				currCounter = 1;
 80037ac:	4b4d      	ldr	r3, [pc, #308]	; (80038e4 <Start_RTC+0x9a4>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

				while(klick == 3)
 80037b2:	e050      	b.n	8003856 <Start_RTC+0x916>
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80037b4:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <Start_RTC+0x9a0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b49      	ldr	r3, [pc, #292]	; (80038e4 <Start_RTC+0x9a4>)
 80037be:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80037c0:	4b48      	ldr	r3, [pc, #288]	; (80038e4 <Start_RTC+0x9a4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	0fda      	lsrs	r2, r3, #31
 80037ca:	4413      	add	r3, r2
 80037cc:	105b      	asrs	r3, r3, #1
 80037ce:	425b      	negs	r3, r3
 80037d0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80037d4:	337f      	adds	r3, #127	; 0x7f
 80037d6:	4a43      	ldr	r2, [pc, #268]	; (80038e4 <Start_RTC+0x9a4>)
 80037d8:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 80037da:	4b42      	ldr	r3, [pc, #264]	; (80038e4 <Start_RTC+0x9a4>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d038      	beq.n	8003856 <Start_RTC+0x916>
					{
						prevCounter = currCounter;
 80037e4:	4b3f      	ldr	r3, [pc, #252]	; (80038e4 <Start_RTC+0x9a4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]

						if(currCounter > 12)
 80037ea:	4b3e      	ldr	r3, [pc, #248]	; (80038e4 <Start_RTC+0x9a4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	dd06      	ble.n	8003800 <Start_RTC+0x8c0>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <Start_RTC+0x9a0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2201      	movs	r2, #1
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 80037fa:	4b3a      	ldr	r3, [pc, #232]	; (80038e4 <Start_RTC+0x9a4>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
						}

						if(currCounter < 1)
 8003800:	4b38      	ldr	r3, [pc, #224]	; (80038e4 <Start_RTC+0x9a4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	dc06      	bgt.n	8003816 <Start_RTC+0x8d6>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8003808:	4b35      	ldr	r3, [pc, #212]	; (80038e0 <Start_RTC+0x9a0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2201      	movs	r2, #1
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 8003810:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <Start_RTC+0x9a4>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]
						}


						graphics_text(0, 16, 1, "           ");
 8003816:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <Start_RTC+0x9a8>)
 8003818:	2201      	movs	r2, #1
 800381a:	2110      	movs	r1, #16
 800381c:	2000      	movs	r0, #0
 800381e:	f001 f9ff 	bl	8004c20 <graphics_text>
						oled_update();
 8003822:	f001 fab1 	bl	8004d88 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <Start_RTC+0x9a4>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800382e:	492f      	ldr	r1, [pc, #188]	; (80038ec <Start_RTC+0x9ac>)
 8003830:	4618      	mov	r0, r3
 8003832:	f00f f849 	bl	80128c8 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 8003836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800383a:	2201      	movs	r2, #1
 800383c:	2110      	movs	r1, #16
 800383e:	2000      	movs	r0, #0
 8003840:	f001 f9ee 	bl	8004c20 <graphics_text>
						oled_update();
 8003844:	f001 faa0 	bl	8004d88 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8003848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800384c:	220a      	movs	r2, #10
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f00e faf2 	bl	8011e3a <memset>
				while(klick == 3)
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <Start_RTC+0x9b0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d0aa      	beq.n	80037b4 <Start_RTC+0x874>

					}
				}
				if(klick == 4)
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <Start_RTC+0x9b0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b04      	cmp	r3, #4
 8003864:	f040 8378 	bne.w	8003f58 <Start_RTC+0x1018>
				{
					// write data
					ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 8003868:	f107 030c 	add.w	r3, r7, #12
 800386c:	4619      	mov	r1, r3
 800386e:	2005      	movs	r0, #5
 8003870:	f7fe fa0c 	bl	8001c8c <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 8003874:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <Start_RTC+0x9b4>)
 8003876:	2201      	movs	r2, #1
 8003878:	2110      	movs	r1, #16
 800387a:	2000      	movs	r0, #0
 800387c:	f001 f9d0 	bl	8004c20 <graphics_text>
					oled_update();
 8003880:	f001 fa82 	bl	8004d88 <oled_update>

					graphics_text(0, 16, 1, "installed");
 8003884:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <Start_RTC+0x9b8>)
 8003886:	2201      	movs	r2, #1
 8003888:	2110      	movs	r1, #16
 800388a:	2000      	movs	r0, #0
 800388c:	f001 f9c8 	bl	8004c20 <graphics_text>
					oled_update();
 8003890:	f001 fa7a 	bl	8004d88 <oled_update>

					osDelay(800);
 8003894:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003898:	f00a fa9a 	bl	800ddd0 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 800389c:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <Start_RTC+0x9b4>)
 800389e:	2201      	movs	r2, #1
 80038a0:	2110      	movs	r1, #16
 80038a2:	2000      	movs	r0, #0
 80038a4:	f001 f9bc 	bl	8004c20 <graphics_text>
					oled_update();
 80038a8:	f001 fa6e 	bl	8004d88 <oled_update>

					klick = 5;
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <Start_RTC+0x9b0>)
 80038ae:	2205      	movs	r2, #5
 80038b0:	601a      	str	r2, [r3, #0]
				}

				break;
 80038b2:	e351      	b.n	8003f58 <Start_RTC+0x1018>

			case 5:
				// Set date

				graphics_text(0, 8, 1, "              ");
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <Start_RTC+0x9c0>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	2108      	movs	r1, #8
 80038ba:	2000      	movs	r0, #0
 80038bc:	f001 f9b0 	bl	8004c20 <graphics_text>
				oled_update();
 80038c0:	f001 fa62 	bl	8004d88 <oled_update>
				graphics_text(0, 8, 1, "DATE");
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <Start_RTC+0x9c4>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	2108      	movs	r1, #8
 80038ca:	2000      	movs	r0, #0
 80038cc:	f001 f9a8 	bl	8004c20 <graphics_text>
				oled_update();
 80038d0:	f001 fa5a 	bl	8004d88 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 80038d4:	4b02      	ldr	r3, [pc, #8]	; (80038e0 <Start_RTC+0x9a0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2201      	movs	r2, #1
 80038da:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 5)
 80038dc:	e065      	b.n	80039aa <Start_RTC+0xa6a>
 80038de:	bf00      	nop
 80038e0:	2000cb4c 	.word	0x2000cb4c
 80038e4:	200027a0 	.word	0x200027a0
 80038e8:	08014d30 	.word	0x08014d30
 80038ec:	08014b64 	.word	0x08014b64
 80038f0:	200027a4 	.word	0x200027a4
 80038f4:	08014d3c 	.word	0x08014d3c
 80038f8:	08014d50 	.word	0x08014d50
 80038fc:	08014d5c 	.word	0x08014d5c
 8003900:	08014d64 	.word	0x08014d64
 8003904:	08014d74 	.word	0x08014d74
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8003908:	4b94      	ldr	r3, [pc, #592]	; (8003b5c <Start_RTC+0xc1c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	461a      	mov	r2, r3
 8003910:	4b93      	ldr	r3, [pc, #588]	; (8003b60 <Start_RTC+0xc20>)
 8003912:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8003914:	4b92      	ldr	r3, [pc, #584]	; (8003b60 <Start_RTC+0xc20>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3b01      	subs	r3, #1
 800391a:	b29b      	uxth	r3, r3
 800391c:	0fda      	lsrs	r2, r3, #31
 800391e:	4413      	add	r3, r2
 8003920:	105b      	asrs	r3, r3, #1
 8003922:	425b      	negs	r3, r3
 8003924:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003928:	337f      	adds	r3, #127	; 0x7f
 800392a:	4a8d      	ldr	r2, [pc, #564]	; (8003b60 <Start_RTC+0xc20>)
 800392c:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 800392e:	4b8c      	ldr	r3, [pc, #560]	; (8003b60 <Start_RTC+0xc20>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	429a      	cmp	r2, r3
 8003936:	d038      	beq.n	80039aa <Start_RTC+0xa6a>
					{
						prevCounter = currCounter;
 8003938:	4b89      	ldr	r3, [pc, #548]	; (8003b60 <Start_RTC+0xc20>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]

						if(currCounter > 31)
 800393e:	4b88      	ldr	r3, [pc, #544]	; (8003b60 <Start_RTC+0xc20>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b1f      	cmp	r3, #31
 8003944:	dd06      	ble.n	8003954 <Start_RTC+0xa14>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8003946:	4b85      	ldr	r3, [pc, #532]	; (8003b5c <Start_RTC+0xc1c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2201      	movs	r2, #1
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 800394e:	4b84      	ldr	r3, [pc, #528]	; (8003b60 <Start_RTC+0xc20>)
 8003950:	2201      	movs	r2, #1
 8003952:	601a      	str	r2, [r3, #0]
						}
						if(currCounter < 1)
 8003954:	4b82      	ldr	r3, [pc, #520]	; (8003b60 <Start_RTC+0xc20>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	dc06      	bgt.n	800396a <Start_RTC+0xa2a>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 800395c:	4b7f      	ldr	r3, [pc, #508]	; (8003b5c <Start_RTC+0xc1c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 8003964:	4b7e      	ldr	r3, [pc, #504]	; (8003b60 <Start_RTC+0xc20>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
						}

						graphics_text(0, 16, 1, "           ");
 800396a:	4b7e      	ldr	r3, [pc, #504]	; (8003b64 <Start_RTC+0xc24>)
 800396c:	2201      	movs	r2, #1
 800396e:	2110      	movs	r1, #16
 8003970:	2000      	movs	r0, #0
 8003972:	f001 f955 	bl	8004c20 <graphics_text>
						oled_update();
 8003976:	f001 fa07 	bl	8004d88 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 800397a:	4b79      	ldr	r3, [pc, #484]	; (8003b60 <Start_RTC+0xc20>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003982:	4979      	ldr	r1, [pc, #484]	; (8003b68 <Start_RTC+0xc28>)
 8003984:	4618      	mov	r0, r3
 8003986:	f00e ff9f 	bl	80128c8 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 800398a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800398e:	2201      	movs	r2, #1
 8003990:	2110      	movs	r1, #16
 8003992:	2000      	movs	r0, #0
 8003994:	f001 f944 	bl	8004c20 <graphics_text>
						oled_update();
 8003998:	f001 f9f6 	bl	8004d88 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 800399c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a0:	220a      	movs	r2, #10
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f00e fa48 	bl	8011e3a <memset>
				while(klick == 5)
 80039aa:	4b70      	ldr	r3, [pc, #448]	; (8003b6c <Start_RTC+0xc2c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d0aa      	beq.n	8003908 <Start_RTC+0x9c8>

					}
				}
				if(klick == 6)
 80039b2:	4b6e      	ldr	r3, [pc, #440]	; (8003b6c <Start_RTC+0xc2c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	f040 82d1 	bne.w	8003f5e <Start_RTC+0x101e>
				{
					// write data
					ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	4619      	mov	r1, r3
 80039c2:	2005      	movs	r0, #5
 80039c4:	f7fe f962 	bl	8001c8c <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 80039c8:	4b69      	ldr	r3, [pc, #420]	; (8003b70 <Start_RTC+0xc30>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	2110      	movs	r1, #16
 80039ce:	2000      	movs	r0, #0
 80039d0:	f001 f926 	bl	8004c20 <graphics_text>
					oled_update();
 80039d4:	f001 f9d8 	bl	8004d88 <oled_update>

					graphics_text(0, 16, 1, "installed");
 80039d8:	4b66      	ldr	r3, [pc, #408]	; (8003b74 <Start_RTC+0xc34>)
 80039da:	2201      	movs	r2, #1
 80039dc:	2110      	movs	r1, #16
 80039de:	2000      	movs	r0, #0
 80039e0:	f001 f91e 	bl	8004c20 <graphics_text>
					oled_update();
 80039e4:	f001 f9d0 	bl	8004d88 <oled_update>

					osDelay(800);
 80039e8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80039ec:	f00a f9f0 	bl	800ddd0 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 80039f0:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <Start_RTC+0xc30>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	2110      	movs	r1, #16
 80039f6:	2000      	movs	r0, #0
 80039f8:	f001 f912 	bl	8004c20 <graphics_text>
					oled_update();
 80039fc:	f001 f9c4 	bl	8004d88 <oled_update>

					klick = 7;
 8003a00:	4b5a      	ldr	r3, [pc, #360]	; (8003b6c <Start_RTC+0xc2c>)
 8003a02:	2207      	movs	r2, #7
 8003a04:	601a      	str	r2, [r3, #0]
				}

				break;
 8003a06:	e2aa      	b.n	8003f5e <Start_RTC+0x101e>

			case 7:
				// Set day of week

				graphics_text(0, 8, 1, "              ");
 8003a08:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <Start_RTC+0xc38>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	2108      	movs	r1, #8
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f001 f906 	bl	8004c20 <graphics_text>
				oled_update();
 8003a14:	f001 f9b8 	bl	8004d88 <oled_update>
				graphics_text(0, 8, 1, "DAY");
 8003a18:	4b58      	ldr	r3, [pc, #352]	; (8003b7c <Start_RTC+0xc3c>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	2108      	movs	r1, #8
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f001 f8fe 	bl	8004c20 <graphics_text>
				oled_update();
 8003a24:	f001 f9b0 	bl	8004d88 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 1);
 8003a28:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <Start_RTC+0xc1c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 7)
 8003a30:	e050      	b.n	8003ad4 <Start_RTC+0xb94>
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8003a32:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <Start_RTC+0xc1c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b49      	ldr	r3, [pc, #292]	; (8003b60 <Start_RTC+0xc20>)
 8003a3c:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8003a3e:	4b48      	ldr	r3, [pc, #288]	; (8003b60 <Start_RTC+0xc20>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	0fda      	lsrs	r2, r3, #31
 8003a48:	4413      	add	r3, r2
 8003a4a:	105b      	asrs	r3, r3, #1
 8003a4c:	425b      	negs	r3, r3
 8003a4e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003a52:	337f      	adds	r3, #127	; 0x7f
 8003a54:	4a42      	ldr	r2, [pc, #264]	; (8003b60 <Start_RTC+0xc20>)
 8003a56:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 8003a58:	4b41      	ldr	r3, [pc, #260]	; (8003b60 <Start_RTC+0xc20>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d038      	beq.n	8003ad4 <Start_RTC+0xb94>
					{
						prevCounter = currCounter;
 8003a62:	4b3f      	ldr	r3, [pc, #252]	; (8003b60 <Start_RTC+0xc20>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
						if(currCounter > 7)
 8003a68:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <Start_RTC+0xc20>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b07      	cmp	r3, #7
 8003a6e:	dd06      	ble.n	8003a7e <Start_RTC+0xb3e>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8003a70:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <Start_RTC+0xc1c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2201      	movs	r2, #1
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 8003a78:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <Start_RTC+0xc20>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
						}
						if(currCounter < 1)
 8003a7e:	4b38      	ldr	r3, [pc, #224]	; (8003b60 <Start_RTC+0xc20>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	dc06      	bgt.n	8003a94 <Start_RTC+0xb54>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8003a86:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <Start_RTC+0xc1c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 8003a8e:	4b34      	ldr	r3, [pc, #208]	; (8003b60 <Start_RTC+0xc20>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
						}

						graphics_text(0, 16, 1, "           ");
 8003a94:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <Start_RTC+0xc24>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	2110      	movs	r1, #16
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f001 f8c0 	bl	8004c20 <graphics_text>
						oled_update();
 8003aa0:	f001 f972 	bl	8004d88 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <Start_RTC+0xc20>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aac:	492e      	ldr	r1, [pc, #184]	; (8003b68 <Start_RTC+0xc28>)
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f00e ff0a 	bl	80128c8 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 8003ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab8:	2201      	movs	r2, #1
 8003aba:	2110      	movs	r1, #16
 8003abc:	2000      	movs	r0, #0
 8003abe:	f001 f8af 	bl	8004c20 <graphics_text>
						oled_update();
 8003ac2:	f001 f961 	bl	8004d88 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8003ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aca:	220a      	movs	r2, #10
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f00e f9b3 	bl	8011e3a <memset>
				while(klick == 7)
 8003ad4:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <Start_RTC+0xc2c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b07      	cmp	r3, #7
 8003ada:	d0aa      	beq.n	8003a32 <Start_RTC+0xaf2>

					}
				}
				if(klick == 8)
 8003adc:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <Start_RTC+0xc2c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	f040 823f 	bne.w	8003f64 <Start_RTC+0x1024>
				{
					// write data
					ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 8003ae6:	f107 030c 	add.w	r3, r7, #12
 8003aea:	4619      	mov	r1, r3
 8003aec:	2005      	movs	r0, #5
 8003aee:	f7fe f8cd 	bl	8001c8c <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 8003af2:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <Start_RTC+0xc30>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	2110      	movs	r1, #16
 8003af8:	2000      	movs	r0, #0
 8003afa:	f001 f891 	bl	8004c20 <graphics_text>
					oled_update();
 8003afe:	f001 f943 	bl	8004d88 <oled_update>

					graphics_text(0, 16, 1, "installed");
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <Start_RTC+0xc34>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	2110      	movs	r1, #16
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f001 f889 	bl	8004c20 <graphics_text>
					oled_update();
 8003b0e:	f001 f93b 	bl	8004d88 <oled_update>

					osDelay(800);
 8003b12:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003b16:	f00a f95b 	bl	800ddd0 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <Start_RTC+0xc30>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	2110      	movs	r1, #16
 8003b20:	2000      	movs	r0, #0
 8003b22:	f001 f87d 	bl	8004c20 <graphics_text>
					oled_update();
 8003b26:	f001 f92f 	bl	8004d88 <oled_update>

					klick = 9;
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <Start_RTC+0xc2c>)
 8003b2c:	2209      	movs	r2, #9
 8003b2e:	601a      	str	r2, [r3, #0]
				}
				break;
 8003b30:	e218      	b.n	8003f64 <Start_RTC+0x1024>

			case 9:
				// Set hour

				graphics_text(0, 8, 1, "              ");
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <Start_RTC+0xc38>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	2108      	movs	r1, #8
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f001 f871 	bl	8004c20 <graphics_text>
				oled_update();
 8003b3e:	f001 f923 	bl	8004d88 <oled_update>
				graphics_text(0, 8, 1, "HOUR");
 8003b42:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <Start_RTC+0xc40>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	2108      	movs	r1, #8
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f001 f869 	bl	8004c20 <graphics_text>
				oled_update();
 8003b4e:	f001 f91b 	bl	8004d88 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003b52:	4b02      	ldr	r3, [pc, #8]	; (8003b5c <Start_RTC+0xc1c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 9)
 8003b5a:	e08d      	b.n	8003c78 <Start_RTC+0xd38>
 8003b5c:	2000cb4c 	.word	0x2000cb4c
 8003b60:	200027a0 	.word	0x200027a0
 8003b64:	08014d30 	.word	0x08014d30
 8003b68:	08014b64 	.word	0x08014b64
 8003b6c:	200027a4 	.word	0x200027a4
 8003b70:	08014d3c 	.word	0x08014d3c
 8003b74:	08014d50 	.word	0x08014d50
 8003b78:	08014d64 	.word	0x08014d64
 8003b7c:	08014d7c 	.word	0x08014d7c
 8003b80:	08014d80 	.word	0x08014d80
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8003b84:	4b93      	ldr	r3, [pc, #588]	; (8003dd4 <Start_RTC+0xe94>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b92      	ldr	r3, [pc, #584]	; (8003dd8 <Start_RTC+0xe98>)
 8003b8e:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8003b90:	4b91      	ldr	r3, [pc, #580]	; (8003dd8 <Start_RTC+0xe98>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	0fda      	lsrs	r2, r3, #31
 8003b9a:	4413      	add	r3, r2
 8003b9c:	105b      	asrs	r3, r3, #1
 8003b9e:	425b      	negs	r3, r3
 8003ba0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003ba4:	337f      	adds	r3, #127	; 0x7f
 8003ba6:	4a8c      	ldr	r2, [pc, #560]	; (8003dd8 <Start_RTC+0xe98>)
 8003ba8:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 8003baa:	4b8b      	ldr	r3, [pc, #556]	; (8003dd8 <Start_RTC+0xe98>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d038      	beq.n	8003c26 <Start_RTC+0xce6>
					{
						prevCounter = currCounter;
 8003bb4:	4b88      	ldr	r3, [pc, #544]	; (8003dd8 <Start_RTC+0xe98>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
						if(currCounter > 23)
 8003bba:	4b87      	ldr	r3, [pc, #540]	; (8003dd8 <Start_RTC+0xe98>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b17      	cmp	r3, #23
 8003bc0:	dd06      	ble.n	8003bd0 <Start_RTC+0xc90>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003bc2:	4b84      	ldr	r3, [pc, #528]	; (8003dd4 <Start_RTC+0xe94>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 8003bca:	4b83      	ldr	r3, [pc, #524]	; (8003dd8 <Start_RTC+0xe98>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
						}
						if(currCounter < 0)
 8003bd0:	4b81      	ldr	r3, [pc, #516]	; (8003dd8 <Start_RTC+0xe98>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	da06      	bge.n	8003be6 <Start_RTC+0xca6>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003bd8:	4b7e      	ldr	r3, [pc, #504]	; (8003dd4 <Start_RTC+0xe94>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 8003be0:	4b7d      	ldr	r3, [pc, #500]	; (8003dd8 <Start_RTC+0xe98>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
						}

						graphics_text(0, 16, 1, "           ");
 8003be6:	4b7d      	ldr	r3, [pc, #500]	; (8003ddc <Start_RTC+0xe9c>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	2110      	movs	r1, #16
 8003bec:	2000      	movs	r0, #0
 8003bee:	f001 f817 	bl	8004c20 <graphics_text>
						oled_update();
 8003bf2:	f001 f8c9 	bl	8004d88 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 8003bf6:	4b78      	ldr	r3, [pc, #480]	; (8003dd8 <Start_RTC+0xe98>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bfe:	4978      	ldr	r1, [pc, #480]	; (8003de0 <Start_RTC+0xea0>)
 8003c00:	4618      	mov	r0, r3
 8003c02:	f00e fe61 	bl	80128c8 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 8003c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	2110      	movs	r1, #16
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f001 f806 	bl	8004c20 <graphics_text>
						oled_update();
 8003c14:	f001 f8b8 	bl	8004d88 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8003c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c1c:	220a      	movs	r2, #10
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f00e f90a 	bl	8011e3a <memset>
					}

					if(klick == 10)
 8003c26:	4b6f      	ldr	r3, [pc, #444]	; (8003de4 <Start_RTC+0xea4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b0a      	cmp	r3, #10
 8003c2c:	d124      	bne.n	8003c78 <Start_RTC+0xd38>
					{
						// write data
						ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 8003c2e:	f107 030c 	add.w	r3, r7, #12
 8003c32:	4619      	mov	r1, r3
 8003c34:	2005      	movs	r0, #5
 8003c36:	f7fe f829 	bl	8001c8c <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8003c3a:	4b6b      	ldr	r3, [pc, #428]	; (8003de8 <Start_RTC+0xea8>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	2110      	movs	r1, #16
 8003c40:	2000      	movs	r0, #0
 8003c42:	f000 ffed 	bl	8004c20 <graphics_text>
						oled_update();
 8003c46:	f001 f89f 	bl	8004d88 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8003c4a:	4b68      	ldr	r3, [pc, #416]	; (8003dec <Start_RTC+0xeac>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	2110      	movs	r1, #16
 8003c50:	2000      	movs	r0, #0
 8003c52:	f000 ffe5 	bl	8004c20 <graphics_text>
						oled_update();
 8003c56:	f001 f897 	bl	8004d88 <oled_update>

						osDelay(800);
 8003c5a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003c5e:	f00a f8b7 	bl	800ddd0 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8003c62:	4b61      	ldr	r3, [pc, #388]	; (8003de8 <Start_RTC+0xea8>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	2110      	movs	r1, #16
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f000 ffd9 	bl	8004c20 <graphics_text>
						oled_update();
 8003c6e:	f001 f88b 	bl	8004d88 <oled_update>

						klick = 11;
 8003c72:	4b5c      	ldr	r3, [pc, #368]	; (8003de4 <Start_RTC+0xea4>)
 8003c74:	220b      	movs	r2, #11
 8003c76:	601a      	str	r2, [r3, #0]
				while(klick == 9)
 8003c78:	4b5a      	ldr	r3, [pc, #360]	; (8003de4 <Start_RTC+0xea4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b09      	cmp	r3, #9
 8003c7e:	d081      	beq.n	8003b84 <Start_RTC+0xc44>
					}
				}
				break;
 8003c80:	e177      	b.n	8003f72 <Start_RTC+0x1032>

			case 11:
				// Set minutes

				graphics_text(0, 8, 1, "              ");
 8003c82:	4b5b      	ldr	r3, [pc, #364]	; (8003df0 <Start_RTC+0xeb0>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	2108      	movs	r1, #8
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f000 ffc9 	bl	8004c20 <graphics_text>
				oled_update();
 8003c8e:	f001 f87b 	bl	8004d88 <oled_update>
				graphics_text(0, 8, 1, "MINUTES");
 8003c92:	4b58      	ldr	r3, [pc, #352]	; (8003df4 <Start_RTC+0xeb4>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	2108      	movs	r1, #8
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f000 ffc1 	bl	8004c20 <graphics_text>
				oled_update();
 8003c9e:	f001 f873 	bl	8004d88 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003ca2:	4b4c      	ldr	r3, [pc, #304]	; (8003dd4 <Start_RTC+0xe94>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 11)
 8003caa:	e04e      	b.n	8003d4a <Start_RTC+0xe0a>
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8003cac:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <Start_RTC+0xe94>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4b48      	ldr	r3, [pc, #288]	; (8003dd8 <Start_RTC+0xe98>)
 8003cb6:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8003cb8:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <Start_RTC+0xe98>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	0fda      	lsrs	r2, r3, #31
 8003cc2:	4413      	add	r3, r2
 8003cc4:	105b      	asrs	r3, r3, #1
 8003cc6:	425b      	negs	r3, r3
 8003cc8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003ccc:	337f      	adds	r3, #127	; 0x7f
 8003cce:	4a42      	ldr	r2, [pc, #264]	; (8003dd8 <Start_RTC+0xe98>)
 8003cd0:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 8003cd2:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <Start_RTC+0xe98>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d036      	beq.n	8003d4a <Start_RTC+0xe0a>
					{
						prevCounter = currCounter;
 8003cdc:	4b3e      	ldr	r3, [pc, #248]	; (8003dd8 <Start_RTC+0xe98>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
						if(currCounter > 59)
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <Start_RTC+0xe98>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b3b      	cmp	r3, #59	; 0x3b
 8003ce8:	dd05      	ble.n	8003cf6 <Start_RTC+0xdb6>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003cea:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <Start_RTC+0xe94>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
						}
						if(currCounter < 0)
 8003cf6:	4b38      	ldr	r3, [pc, #224]	; (8003dd8 <Start_RTC+0xe98>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	da05      	bge.n	8003d0a <Start_RTC+0xdca>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003cfe:	4b35      	ldr	r3, [pc, #212]	; (8003dd4 <Start_RTC+0xe94>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2200      	movs	r2, #0
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
						}

						graphics_text(0, 16, 1, "           ");
 8003d0a:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <Start_RTC+0xe9c>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	2110      	movs	r1, #16
 8003d10:	2000      	movs	r0, #0
 8003d12:	f000 ff85 	bl	8004c20 <graphics_text>
						oled_update();
 8003d16:	f001 f837 	bl	8004d88 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 8003d1a:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <Start_RTC+0xe98>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d22:	492f      	ldr	r1, [pc, #188]	; (8003de0 <Start_RTC+0xea0>)
 8003d24:	4618      	mov	r0, r3
 8003d26:	f00e fdcf 	bl	80128c8 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 8003d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2e:	2201      	movs	r2, #1
 8003d30:	2110      	movs	r1, #16
 8003d32:	2000      	movs	r0, #0
 8003d34:	f000 ff74 	bl	8004c20 <graphics_text>
						oled_update();
 8003d38:	f001 f826 	bl	8004d88 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8003d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d40:	220a      	movs	r2, #10
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f00e f878 	bl	8011e3a <memset>
				while(klick == 11)
 8003d4a:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <Start_RTC+0xea4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b0b      	cmp	r3, #11
 8003d50:	d0ac      	beq.n	8003cac <Start_RTC+0xd6c>
					}
				}
				if(klick == 12)
 8003d52:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <Start_RTC+0xea4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	f040 8107 	bne.w	8003f6a <Start_RTC+0x102a>
				{
					// write data
					ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 8003d5c:	f107 030c 	add.w	r3, r7, #12
 8003d60:	4619      	mov	r1, r3
 8003d62:	2005      	movs	r0, #5
 8003d64:	f7fd ff92 	bl	8001c8c <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 8003d68:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <Start_RTC+0xea8>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	2110      	movs	r1, #16
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f000 ff56 	bl	8004c20 <graphics_text>
					oled_update();
 8003d74:	f001 f808 	bl	8004d88 <oled_update>

					graphics_text(0, 16, 1, "installed");
 8003d78:	4b1c      	ldr	r3, [pc, #112]	; (8003dec <Start_RTC+0xeac>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	2110      	movs	r1, #16
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f000 ff4e 	bl	8004c20 <graphics_text>
					oled_update();
 8003d84:	f001 f800 	bl	8004d88 <oled_update>

					osDelay(800);
 8003d88:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003d8c:	f00a f820 	bl	800ddd0 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 8003d90:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <Start_RTC+0xea8>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	2110      	movs	r1, #16
 8003d96:	2000      	movs	r0, #0
 8003d98:	f000 ff42 	bl	8004c20 <graphics_text>
					oled_update();
 8003d9c:	f000 fff4 	bl	8004d88 <oled_update>

					klick = 13;
 8003da0:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <Start_RTC+0xea4>)
 8003da2:	220d      	movs	r2, #13
 8003da4:	601a      	str	r2, [r3, #0]
				}
				break;
 8003da6:	e0e0      	b.n	8003f6a <Start_RTC+0x102a>

			case 13:
				// Set minutes

				graphics_text(0, 8, 1, "              ");
 8003da8:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <Start_RTC+0xeb0>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	2108      	movs	r1, #8
 8003dae:	2000      	movs	r0, #0
 8003db0:	f000 ff36 	bl	8004c20 <graphics_text>
				oled_update();
 8003db4:	f000 ffe8 	bl	8004d88 <oled_update>
				graphics_text(0, 8, 1, "SECONDS");
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <Start_RTC+0xeb8>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	2108      	movs	r1, #8
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f000 ff2e 	bl	8004c20 <graphics_text>
				oled_update();
 8003dc4:	f000 ffe0 	bl	8004d88 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003dc8:	4b02      	ldr	r3, [pc, #8]	; (8003dd4 <Start_RTC+0xe94>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 13)
 8003dd0:	e065      	b.n	8003e9e <Start_RTC+0xf5e>
 8003dd2:	bf00      	nop
 8003dd4:	2000cb4c 	.word	0x2000cb4c
 8003dd8:	200027a0 	.word	0x200027a0
 8003ddc:	08014d30 	.word	0x08014d30
 8003de0:	08014b64 	.word	0x08014b64
 8003de4:	200027a4 	.word	0x200027a4
 8003de8:	08014d3c 	.word	0x08014d3c
 8003dec:	08014d50 	.word	0x08014d50
 8003df0:	08014d64 	.word	0x08014d64
 8003df4:	08014d88 	.word	0x08014d88
 8003df8:	08014d90 	.word	0x08014d90
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8003dfc:	4b5e      	ldr	r3, [pc, #376]	; (8003f78 <Start_RTC+0x1038>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	461a      	mov	r2, r3
 8003e04:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <Start_RTC+0x103c>)
 8003e06:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8003e08:	4b5c      	ldr	r3, [pc, #368]	; (8003f7c <Start_RTC+0x103c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	0fda      	lsrs	r2, r3, #31
 8003e12:	4413      	add	r3, r2
 8003e14:	105b      	asrs	r3, r3, #1
 8003e16:	425b      	negs	r3, r3
 8003e18:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003e1c:	337f      	adds	r3, #127	; 0x7f
 8003e1e:	4a57      	ldr	r2, [pc, #348]	; (8003f7c <Start_RTC+0x103c>)
 8003e20:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 8003e22:	4b56      	ldr	r3, [pc, #344]	; (8003f7c <Start_RTC+0x103c>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d038      	beq.n	8003e9e <Start_RTC+0xf5e>
					{
						prevCounter = currCounter;
 8003e2c:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <Start_RTC+0x103c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60fb      	str	r3, [r7, #12]
						if(currCounter > 59)
 8003e32:	4b52      	ldr	r3, [pc, #328]	; (8003f7c <Start_RTC+0x103c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b3b      	cmp	r3, #59	; 0x3b
 8003e38:	dd06      	ble.n	8003e48 <Start_RTC+0xf08>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003e3a:	4b4f      	ldr	r3, [pc, #316]	; (8003f78 <Start_RTC+0x1038>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 8003e42:	4b4e      	ldr	r3, [pc, #312]	; (8003f7c <Start_RTC+0x103c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
						}
						if(currCounter < 0)
 8003e48:	4b4c      	ldr	r3, [pc, #304]	; (8003f7c <Start_RTC+0x103c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	da06      	bge.n	8003e5e <Start_RTC+0xf1e>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003e50:	4b49      	ldr	r3, [pc, #292]	; (8003f78 <Start_RTC+0x1038>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2200      	movs	r2, #0
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 8003e58:	4b48      	ldr	r3, [pc, #288]	; (8003f7c <Start_RTC+0x103c>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
						}
						graphics_text(0, 16, 1, "           ");
 8003e5e:	4b48      	ldr	r3, [pc, #288]	; (8003f80 <Start_RTC+0x1040>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	2110      	movs	r1, #16
 8003e64:	2000      	movs	r0, #0
 8003e66:	f000 fedb 	bl	8004c20 <graphics_text>
						oled_update();
 8003e6a:	f000 ff8d 	bl	8004d88 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 8003e6e:	4b43      	ldr	r3, [pc, #268]	; (8003f7c <Start_RTC+0x103c>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e76:	4943      	ldr	r1, [pc, #268]	; (8003f84 <Start_RTC+0x1044>)
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f00e fd25 	bl	80128c8 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 8003e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e82:	2201      	movs	r2, #1
 8003e84:	2110      	movs	r1, #16
 8003e86:	2000      	movs	r0, #0
 8003e88:	f000 feca 	bl	8004c20 <graphics_text>
						oled_update();
 8003e8c:	f000 ff7c 	bl	8004d88 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8003e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e94:	220a      	movs	r2, #10
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f00d ffce 	bl	8011e3a <memset>
				while(klick == 13)
 8003e9e:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <Start_RTC+0x1048>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b0d      	cmp	r3, #13
 8003ea4:	d0aa      	beq.n	8003dfc <Start_RTC+0xebc>
					}
				}
				if(klick == 14)
 8003ea6:	4b38      	ldr	r3, [pc, #224]	; (8003f88 <Start_RTC+0x1048>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b0e      	cmp	r3, #14
 8003eac:	d160      	bne.n	8003f70 <Start_RTC+0x1030>
				{
					// write data
					ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 8003eae:	f107 030c 	add.w	r3, r7, #12
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	2005      	movs	r0, #5
 8003eb6:	f7fd fee9 	bl	8001c8c <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 8003eba:	4b34      	ldr	r3, [pc, #208]	; (8003f8c <Start_RTC+0x104c>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2110      	movs	r1, #16
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f000 fead 	bl	8004c20 <graphics_text>
					oled_update();
 8003ec6:	f000 ff5f 	bl	8004d88 <oled_update>

					graphics_text(0, 16, 1, "installed");
 8003eca:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <Start_RTC+0x1050>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	2110      	movs	r1, #16
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f000 fea5 	bl	8004c20 <graphics_text>
					oled_update();
 8003ed6:	f000 ff57 	bl	8004d88 <oled_update>

					osDelay(800);
 8003eda:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003ede:	f009 ff77 	bl	800ddd0 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 8003ee2:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <Start_RTC+0x104c>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	2110      	movs	r1, #16
 8003ee8:	2000      	movs	r0, #0
 8003eea:	f000 fe99 	bl	8004c20 <graphics_text>
					oled_update();
 8003eee:	f000 ff4b 	bl	8004d88 <oled_update>

					klick = 15;
 8003ef2:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <Start_RTC+0x1048>)
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	601a      	str	r2, [r3, #0]
				}
				break;
 8003ef8:	e03a      	b.n	8003f70 <Start_RTC+0x1030>

			case 15:		// EXIT

				osDelay(500);
 8003efa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003efe:	f009 ff67 	bl	800ddd0 <osDelay>
				clear();
 8003f02:	f000 fdf9 	bl	8004af8 <clear>
				oled_update();
 8003f06:	f000 ff3f 	bl	8004d88 <oled_update>

				for(uint8_t q = 0; q < 3; q ++)
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8003f10:	e017      	b.n	8003f42 <Start_RTC+0x1002>
				{
					graphics_text(20, 16, 2, "THE TIME IS SET");
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <Start_RTC+0x1054>)
 8003f14:	2202      	movs	r2, #2
 8003f16:	2110      	movs	r1, #16
 8003f18:	2014      	movs	r0, #20
 8003f1a:	f000 fe81 	bl	8004c20 <graphics_text>
					oled_update();
 8003f1e:	f000 ff33 	bl	8004d88 <oled_update>
					osDelay(400);
 8003f22:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003f26:	f009 ff53 	bl	800ddd0 <osDelay>

					clear();
 8003f2a:	f000 fde5 	bl	8004af8 <clear>
					oled_update();
 8003f2e:	f000 ff2b 	bl	8004d88 <oled_update>
					osDelay(200);
 8003f32:	20c8      	movs	r0, #200	; 0xc8
 8003f34:	f009 ff4c 	bl	800ddd0 <osDelay>
				for(uint8_t q = 0; q < 3; q ++)
 8003f38:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8003f42:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d9e3      	bls.n	8003f12 <Start_RTC+0xfd2>
				}
				klick = 0;					// Return to show time
 8003f4a:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <Start_RTC+0x1048>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

				break;
 8003f50:	e00f      	b.n	8003f72 <Start_RTC+0x1032>
				break;
 8003f52:	bf00      	nop
 8003f54:	f7ff b839 	b.w	8002fca <Start_RTC+0x8a>
				break;
 8003f58:	bf00      	nop
 8003f5a:	f7ff b836 	b.w	8002fca <Start_RTC+0x8a>
				break;
 8003f5e:	bf00      	nop
 8003f60:	f7ff b833 	b.w	8002fca <Start_RTC+0x8a>
				break;
 8003f64:	bf00      	nop
 8003f66:	f7ff b830 	b.w	8002fca <Start_RTC+0x8a>
				break;
 8003f6a:	bf00      	nop
 8003f6c:	f7ff b82d 	b.w	8002fca <Start_RTC+0x8a>
				break;
 8003f70:	bf00      	nop
		switch (klick)
 8003f72:	f7ff b82a 	b.w	8002fca <Start_RTC+0x8a>
 8003f76:	bf00      	nop
 8003f78:	2000cb4c 	.word	0x2000cb4c
 8003f7c:	200027a0 	.word	0x200027a0
 8003f80:	08014d30 	.word	0x08014d30
 8003f84:	08014b64 	.word	0x08014b64
 8003f88:	200027a4 	.word	0x200027a4
 8003f8c:	08014d3c 	.word	0x08014d3c
 8003f90:	08014d50 	.word	0x08014d50
 8003f94:	08014d98 	.word	0x08014d98

08003f98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]




	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d104      	bne.n	8003fb4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	4a07      	ldr	r2, [pc, #28]	; (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003fb2:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a06      	ldr	r2, [pc, #24]	; (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8003fbe:	f000 fff5 	bl	8004fac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	2000cd94 	.word	0x2000cd94
 8003fd4:	40002000 	.word	0x40002000

08003fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fdc:	b672      	cpsid	i
}
 8003fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fe0:	e7fe      	b.n	8003fe0 <Error_Handler+0x8>
	...

08003fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	4b12      	ldr	r3, [pc, #72]	; (8004038 <HAL_MspInit+0x54>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	4a11      	ldr	r2, [pc, #68]	; (8004038 <HAL_MspInit+0x54>)
 8003ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <HAL_MspInit+0x54>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <HAL_MspInit+0x54>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <HAL_MspInit+0x54>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <HAL_MspInit+0x54>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004022:	2200      	movs	r2, #0
 8004024:	210f      	movs	r1, #15
 8004026:	f06f 0001 	mvn.w	r0, #1
 800402a:	f001 fb41 	bl	80056b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800

0800403c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	; 0x28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004044:	f107 0314 	add.w	r3, r7, #20
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <HAL_ADC_MspInit+0x7c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d127      	bne.n	80040ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	4b16      	ldr	r3, [pc, #88]	; (80040bc <HAL_ADC_MspInit+0x80>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	4a15      	ldr	r2, [pc, #84]	; (80040bc <HAL_ADC_MspInit+0x80>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	6453      	str	r3, [r2, #68]	; 0x44
 800406e:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_ADC_MspInit+0x80>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_ADC_MspInit+0x80>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4a0e      	ldr	r2, [pc, #56]	; (80040bc <HAL_ADC_MspInit+0x80>)
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	6313      	str	r3, [r2, #48]	; 0x30
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_ADC_MspInit+0x80>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004096:	2302      	movs	r3, #2
 8004098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800409a:	2303      	movs	r3, #3
 800409c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a2:	f107 0314 	add.w	r3, r7, #20
 80040a6:	4619      	mov	r1, r3
 80040a8:	4805      	ldr	r0, [pc, #20]	; (80040c0 <HAL_ADC_MspInit+0x84>)
 80040aa:	f001 ff99 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80040ae:	bf00      	nop
 80040b0:	3728      	adds	r7, #40	; 0x28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40012000 	.word	0x40012000
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40020400 	.word	0x40020400

080040c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08c      	sub	sp, #48	; 0x30
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040cc:	f107 031c 	add.w	r3, r7, #28
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a42      	ldr	r2, [pc, #264]	; (80041ec <HAL_I2C_MspInit+0x128>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d12d      	bne.n	8004142 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	4b41      	ldr	r3, [pc, #260]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	4a40      	ldr	r2, [pc, #256]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	6313      	str	r3, [r2, #48]	; 0x30
 80040f6:	4b3e      	ldr	r3, [pc, #248]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004102:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004108:	2312      	movs	r3, #18
 800410a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410c:	2300      	movs	r3, #0
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004110:	2303      	movs	r3, #3
 8004112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004114:	2304      	movs	r3, #4
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004118:	f107 031c 	add.w	r3, r7, #28
 800411c:	4619      	mov	r1, r3
 800411e:	4835      	ldr	r0, [pc, #212]	; (80041f4 <HAL_I2C_MspInit+0x130>)
 8004120:	f001 ff5e 	bl	8005fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	4a30      	ldr	r2, [pc, #192]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 800412e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004132:	6413      	str	r3, [r2, #64]	; 0x40
 8004134:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004140:	e050      	b.n	80041e4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2c      	ldr	r2, [pc, #176]	; (80041f8 <HAL_I2C_MspInit+0x134>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d14b      	bne.n	80041e4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	4a26      	ldr	r2, [pc, #152]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 8004156:	f043 0304 	orr.w	r3, r3, #4
 800415a:	6313      	str	r3, [r2, #48]	; 0x30
 800415c:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	4b20      	ldr	r3, [pc, #128]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	4a1f      	ldr	r2, [pc, #124]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	6313      	str	r3, [r2, #48]	; 0x30
 8004178:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800418a:	2312      	movs	r3, #18
 800418c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004192:	2303      	movs	r3, #3
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004196:	2304      	movs	r3, #4
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800419a:	f107 031c 	add.w	r3, r7, #28
 800419e:	4619      	mov	r1, r3
 80041a0:	4816      	ldr	r0, [pc, #88]	; (80041fc <HAL_I2C_MspInit+0x138>)
 80041a2:	f001 ff1d 	bl	8005fe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ac:	2312      	movs	r3, #18
 80041ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b4:	2303      	movs	r3, #3
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041b8:	2304      	movs	r3, #4
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041bc:	f107 031c 	add.w	r3, r7, #28
 80041c0:	4619      	mov	r1, r3
 80041c2:	480f      	ldr	r0, [pc, #60]	; (8004200 <HAL_I2C_MspInit+0x13c>)
 80041c4:	f001 ff0c 	bl	8005fe0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80041c8:	2300      	movs	r3, #0
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	4a07      	ldr	r2, [pc, #28]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80041d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041d6:	6413      	str	r3, [r2, #64]	; 0x40
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	68bb      	ldr	r3, [r7, #8]
}
 80041e4:	bf00      	nop
 80041e6:	3730      	adds	r7, #48	; 0x30
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40005800 	.word	0x40005800
 80041f0:	40023800 	.word	0x40023800
 80041f4:	40020400 	.word	0x40020400
 80041f8:	40005c00 	.word	0x40005c00
 80041fc:	40020800 	.word	0x40020800
 8004200:	40020000 	.word	0x40020000

08004204 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0b      	ldr	r2, [pc, #44]	; (8004240 <HAL_RNG_MspInit+0x3c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d10d      	bne.n	8004232 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <HAL_RNG_MspInit+0x40>)
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <HAL_RNG_MspInit+0x40>)
 8004220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004224:	6353      	str	r3, [r2, #52]	; 0x34
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <HAL_RNG_MspInit+0x40>)
 8004228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	50060800 	.word	0x50060800
 8004244:	40023800 	.word	0x40023800

08004248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	; 0x30
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004250:	f107 031c 	add.w	r3, r7, #28
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a5d      	ldr	r2, [pc, #372]	; (80043dc <HAL_SPI_MspInit+0x194>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d12c      	bne.n	80042c4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	4b5c      	ldr	r3, [pc, #368]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	4a5b      	ldr	r2, [pc, #364]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 8004274:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004278:	6453      	str	r3, [r2, #68]	; 0x44
 800427a:	4b59      	ldr	r3, [pc, #356]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	4b55      	ldr	r3, [pc, #340]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	4a54      	ldr	r2, [pc, #336]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6313      	str	r3, [r2, #48]	; 0x30
 8004296:	4b52      	ldr	r3, [pc, #328]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80042a2:	23e0      	movs	r3, #224	; 0xe0
 80042a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a6:	2302      	movs	r3, #2
 80042a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ae:	2302      	movs	r3, #2
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042b2:	2305      	movs	r3, #5
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b6:	f107 031c 	add.w	r3, r7, #28
 80042ba:	4619      	mov	r1, r3
 80042bc:	4849      	ldr	r0, [pc, #292]	; (80043e4 <HAL_SPI_MspInit+0x19c>)
 80042be:	f001 fe8f 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80042c2:	e086      	b.n	80043d2 <HAL_SPI_MspInit+0x18a>
  else if(hspi->Instance==SPI2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a47      	ldr	r2, [pc, #284]	; (80043e8 <HAL_SPI_MspInit+0x1a0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	f040 8081 	bne.w	80043d2 <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	4b42      	ldr	r3, [pc, #264]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	4a41      	ldr	r2, [pc, #260]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 80042da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042de:	6413      	str	r3, [r2, #64]	; 0x40
 80042e0:	4b3f      	ldr	r3, [pc, #252]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	4a3a      	ldr	r2, [pc, #232]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 80042f6:	f043 0304 	orr.w	r3, r3, #4
 80042fa:	6313      	str	r3, [r2, #48]	; 0x30
 80042fc:	4b38      	ldr	r3, [pc, #224]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	4a33      	ldr	r2, [pc, #204]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 8004312:	f043 0302 	orr.w	r3, r3, #2
 8004316:	6313      	str	r3, [r2, #48]	; 0x30
 8004318:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <HAL_SPI_MspInit+0x198>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004324:	2304      	movs	r3, #4
 8004326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004328:	2302      	movs	r3, #2
 800432a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432c:	2300      	movs	r3, #0
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004330:	2303      	movs	r3, #3
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004334:	2305      	movs	r3, #5
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004338:	f107 031c 	add.w	r3, r7, #28
 800433c:	4619      	mov	r1, r3
 800433e:	482b      	ldr	r0, [pc, #172]	; (80043ec <HAL_SPI_MspInit+0x1a4>)
 8004340:	f001 fe4e 	bl	8005fe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004344:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434a:	2302      	movs	r3, #2
 800434c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434e:	2300      	movs	r3, #0
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004352:	2303      	movs	r3, #3
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004356:	2305      	movs	r3, #5
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800435a:	f107 031c 	add.w	r3, r7, #28
 800435e:	4619      	mov	r1, r3
 8004360:	4823      	ldr	r0, [pc, #140]	; (80043f0 <HAL_SPI_MspInit+0x1a8>)
 8004362:	f001 fe3d 	bl	8005fe0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004366:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 8004368:	4a23      	ldr	r2, [pc, #140]	; (80043f8 <HAL_SPI_MspInit+0x1b0>)
 800436a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800436c:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 800436e:	2200      	movs	r2, #0
 8004370:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 8004374:	2240      	movs	r2, #64	; 0x40
 8004376:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004378:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 800437a:	2200      	movs	r2, #0
 800437c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800437e:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 8004380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004384:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004386:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 8004388:	2200      	movs	r2, #0
 800438a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 800438e:	2200      	movs	r2, #0
 8004390:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004392:	4b18      	ldr	r3, [pc, #96]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 8004394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004398:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800439a:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 800439c:	2200      	movs	r2, #0
 800439e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043a0:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80043a6:	4813      	ldr	r0, [pc, #76]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 80043a8:	f001 f9ba 	bl	8005720 <HAL_DMA_Init>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_SPI_MspInit+0x16e>
      Error_Handler();
 80043b2:	f7ff fe11 	bl	8003fd8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a0e      	ldr	r2, [pc, #56]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 80043ba:	649a      	str	r2, [r3, #72]	; 0x48
 80043bc:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <HAL_SPI_MspInit+0x1ac>)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80043c2:	2200      	movs	r2, #0
 80043c4:	2105      	movs	r1, #5
 80043c6:	2024      	movs	r0, #36	; 0x24
 80043c8:	f001 f972 	bl	80056b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80043cc:	2024      	movs	r0, #36	; 0x24
 80043ce:	f001 f98b 	bl	80056e8 <HAL_NVIC_EnableIRQ>
}
 80043d2:	bf00      	nop
 80043d4:	3730      	adds	r7, #48	; 0x30
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40013000 	.word	0x40013000
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40020000 	.word	0x40020000
 80043e8:	40003800 	.word	0x40003800
 80043ec:	40020800 	.word	0x40020800
 80043f0:	40020400 	.word	0x40020400
 80043f4:	2000d0c4 	.word	0x2000d0c4
 80043f8:	40026070 	.word	0x40026070

080043fc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a16      	ldr	r2, [pc, #88]	; (8004464 <HAL_SPI_MspDeInit+0x68>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10a      	bne.n	8004424 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800440e:	4b16      	ldr	r3, [pc, #88]	; (8004468 <HAL_SPI_MspDeInit+0x6c>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	4a15      	ldr	r2, [pc, #84]	; (8004468 <HAL_SPI_MspDeInit+0x6c>)
 8004414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004418:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 800441a:	21e0      	movs	r1, #224	; 0xe0
 800441c:	4813      	ldr	r0, [pc, #76]	; (800446c <HAL_SPI_MspDeInit+0x70>)
 800441e:	f001 ff7b 	bl	8006318 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8004422:	e01b      	b.n	800445c <HAL_SPI_MspDeInit+0x60>
  else if(hspi->Instance==SPI2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <HAL_SPI_MspDeInit+0x74>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d116      	bne.n	800445c <HAL_SPI_MspDeInit+0x60>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800442e:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <HAL_SPI_MspDeInit+0x6c>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <HAL_SPI_MspDeInit+0x6c>)
 8004434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004438:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 800443a:	2104      	movs	r1, #4
 800443c:	480d      	ldr	r0, [pc, #52]	; (8004474 <HAL_SPI_MspDeInit+0x78>)
 800443e:	f001 ff6b 	bl	8006318 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 8004442:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8004446:	480c      	ldr	r0, [pc, #48]	; (8004478 <HAL_SPI_MspDeInit+0x7c>)
 8004448:	f001 ff66 	bl	8006318 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004450:	4618      	mov	r0, r3
 8004452:	f001 fa13 	bl	800587c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8004456:	2024      	movs	r0, #36	; 0x24
 8004458:	f001 f954 	bl	8005704 <HAL_NVIC_DisableIRQ>
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40013000 	.word	0x40013000
 8004468:	40023800 	.word	0x40023800
 800446c:	40020000 	.word	0x40020000
 8004470:	40003800 	.word	0x40003800
 8004474:	40020800 	.word	0x40020800
 8004478:	40020400 	.word	0x40020400

0800447c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <HAL_TIM_Encoder_MspInit+0x94>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d134      	bne.n	8004508 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <HAL_TIM_Encoder_MspInit+0x98>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <HAL_TIM_Encoder_MspInit+0x98>)
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	6453      	str	r3, [r2, #68]	; 0x44
 80044ae:	4b19      	ldr	r3, [pc, #100]	; (8004514 <HAL_TIM_Encoder_MspInit+0x98>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	4b15      	ldr	r3, [pc, #84]	; (8004514 <HAL_TIM_Encoder_MspInit+0x98>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	4a14      	ldr	r2, [pc, #80]	; (8004514 <HAL_TIM_Encoder_MspInit+0x98>)
 80044c4:	f043 0310 	orr.w	r3, r3, #16
 80044c8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ca:	4b12      	ldr	r3, [pc, #72]	; (8004514 <HAL_TIM_Encoder_MspInit+0x98>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80044d6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80044da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044dc:	2302      	movs	r3, #2
 80044de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e4:	2300      	movs	r3, #0
 80044e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80044e8:	2301      	movs	r3, #1
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044ec:	f107 0314 	add.w	r3, r7, #20
 80044f0:	4619      	mov	r1, r3
 80044f2:	4809      	ldr	r0, [pc, #36]	; (8004518 <HAL_TIM_Encoder_MspInit+0x9c>)
 80044f4:	f001 fd74 	bl	8005fe0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80044f8:	2200      	movs	r2, #0
 80044fa:	2105      	movs	r1, #5
 80044fc:	2019      	movs	r0, #25
 80044fe:	f001 f8d7 	bl	80056b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004502:	2019      	movs	r0, #25
 8004504:	f001 f8f0 	bl	80056e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004508:	bf00      	nop
 800450a:	3728      	adds	r7, #40	; 0x28
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40010000 	.word	0x40010000
 8004514:	40023800 	.word	0x40023800
 8004518:	40021000 	.word	0x40021000

0800451c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <HAL_TIM_Base_MspInit+0xb8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d116      	bne.n	800455c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <HAL_TIM_Base_MspInit+0xbc>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	4a28      	ldr	r2, [pc, #160]	; (80045d8 <HAL_TIM_Base_MspInit+0xbc>)
 8004538:	f043 0302 	orr.w	r3, r3, #2
 800453c:	6413      	str	r3, [r2, #64]	; 0x40
 800453e:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <HAL_TIM_Base_MspInit+0xbc>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800454a:	2200      	movs	r2, #0
 800454c:	2105      	movs	r1, #5
 800454e:	201d      	movs	r0, #29
 8004550:	f001 f8ae 	bl	80056b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004554:	201d      	movs	r0, #29
 8004556:	f001 f8c7 	bl	80056e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800455a:	e036      	b.n	80045ca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <HAL_TIM_Base_MspInit+0xc0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d116      	bne.n	8004594 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_TIM_Base_MspInit+0xbc>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <HAL_TIM_Base_MspInit+0xbc>)
 8004570:	f043 0320 	orr.w	r3, r3, #32
 8004574:	6413      	str	r3, [r2, #64]	; 0x40
 8004576:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <HAL_TIM_Base_MspInit+0xbc>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004582:	2200      	movs	r2, #0
 8004584:	2105      	movs	r1, #5
 8004586:	2037      	movs	r0, #55	; 0x37
 8004588:	f001 f892 	bl	80056b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800458c:	2037      	movs	r0, #55	; 0x37
 800458e:	f001 f8ab 	bl	80056e8 <HAL_NVIC_EnableIRQ>
}
 8004592:	e01a      	b.n	80045ca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a11      	ldr	r2, [pc, #68]	; (80045e0 <HAL_TIM_Base_MspInit+0xc4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d115      	bne.n	80045ca <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <HAL_TIM_Base_MspInit+0xbc>)
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	4a0c      	ldr	r2, [pc, #48]	; (80045d8 <HAL_TIM_Base_MspInit+0xbc>)
 80045a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ac:	6453      	str	r3, [r2, #68]	; 0x44
 80045ae:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <HAL_TIM_Base_MspInit+0xbc>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	2105      	movs	r1, #5
 80045be:	2019      	movs	r0, #25
 80045c0:	f001 f876 	bl	80056b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80045c4:	2019      	movs	r0, #25
 80045c6:	f001 f88f 	bl	80056e8 <HAL_NVIC_EnableIRQ>
}
 80045ca:	bf00      	nop
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40001400 	.word	0x40001400
 80045e0:	40014400 	.word	0x40014400

080045e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08c      	sub	sp, #48	; 0x30
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80045f4:	2200      	movs	r2, #0
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	202d      	movs	r0, #45	; 0x2d
 80045fa:	f001 f859 	bl	80056b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80045fe:	202d      	movs	r0, #45	; 0x2d
 8004600:	f001 f872 	bl	80056e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	4b1f      	ldr	r3, [pc, #124]	; (8004688 <HAL_InitTick+0xa4>)
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <HAL_InitTick+0xa4>)
 800460e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004612:	6413      	str	r3, [r2, #64]	; 0x40
 8004614:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <HAL_InitTick+0xa4>)
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004620:	f107 0210 	add.w	r2, r7, #16
 8004624:	f107 0314 	add.w	r3, r7, #20
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f004 fee8 	bl	8009400 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004630:	f004 fed2 	bl	80093d8 <HAL_RCC_GetPCLK1Freq>
 8004634:	4603      	mov	r3, r0
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	4a13      	ldr	r2, [pc, #76]	; (800468c <HAL_InitTick+0xa8>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	0c9b      	lsrs	r3, r3, #18
 8004644:	3b01      	subs	r3, #1
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004648:	4b11      	ldr	r3, [pc, #68]	; (8004690 <HAL_InitTick+0xac>)
 800464a:	4a12      	ldr	r2, [pc, #72]	; (8004694 <HAL_InitTick+0xb0>)
 800464c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800464e:	4b10      	ldr	r3, [pc, #64]	; (8004690 <HAL_InitTick+0xac>)
 8004650:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004654:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004656:	4a0e      	ldr	r2, [pc, #56]	; (8004690 <HAL_InitTick+0xac>)
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <HAL_InitTick+0xac>)
 800465e:	2200      	movs	r2, #0
 8004660:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_InitTick+0xac>)
 8004664:	2200      	movs	r2, #0
 8004666:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004668:	4809      	ldr	r0, [pc, #36]	; (8004690 <HAL_InitTick+0xac>)
 800466a:	f005 fc7d 	bl	8009f68 <HAL_TIM_Base_Init>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004674:	4806      	ldr	r0, [pc, #24]	; (8004690 <HAL_InitTick+0xac>)
 8004676:	f005 fcc7 	bl	800a008 <HAL_TIM_Base_Start_IT>
 800467a:	4603      	mov	r3, r0
 800467c:	e000      	b.n	8004680 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
}
 8004680:	4618      	mov	r0, r3
 8004682:	3730      	adds	r7, #48	; 0x30
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40023800 	.word	0x40023800
 800468c:	431bde83 	.word	0x431bde83
 8004690:	2000d630 	.word	0x2000d630
 8004694:	40002000 	.word	0x40002000

08004698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800469c:	e7fe      	b.n	800469c <NMI_Handler+0x4>

0800469e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800469e:	b480      	push	{r7}
 80046a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046a2:	e7fe      	b.n	80046a2 <HardFault_Handler+0x4>

080046a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046a8:	e7fe      	b.n	80046a8 <MemManage_Handler+0x4>

080046aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046aa:	b480      	push	{r7}
 80046ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046ae:	e7fe      	b.n	80046ae <BusFault_Handler+0x4>

080046b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046b4:	e7fe      	b.n	80046b4 <UsageFault_Handler+0x4>

080046b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80046c8:	4802      	ldr	r0, [pc, #8]	; (80046d4 <DMA1_Stream4_IRQHandler+0x10>)
 80046ca:	f001 fa1f 	bl	8005b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	2000d0c4 	.word	0x2000d0c4

080046d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046dc:	4803      	ldr	r0, [pc, #12]	; (80046ec <TIM1_UP_TIM10_IRQHandler+0x14>)
 80046de:	f005 fe66 	bl	800a3ae <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80046e2:	4803      	ldr	r0, [pc, #12]	; (80046f0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80046e4:	f005 fe63 	bl	800a3ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80046e8:	bf00      	nop
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	2000cb4c 	.word	0x2000cb4c
 80046f0:	20007798 	.word	0x20007798

080046f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80046f8:	4802      	ldr	r0, [pc, #8]	; (8004704 <TIM3_IRQHandler+0x10>)
 80046fa:	f005 fe58 	bl	800a3ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	2000aaac 	.word	0x2000aaac

08004708 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800470c:	4802      	ldr	r0, [pc, #8]	; (8004718 <SPI2_IRQHandler+0x10>)
 800470e:	f005 f9b7 	bl	8009a80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	200076f0 	.word	0x200076f0

0800471c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_TIM_Base_Start_IT(&htim7);								//	Turn on Timer with 100Hz period = 0,01 sec
 8004720:	4804      	ldr	r0, [pc, #16]	; (8004734 <EXTI15_10_IRQHandler+0x18>)
 8004722:	f005 fc71 	bl	800a008 <HAL_TIM_Base_Start_IT>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004726:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800472a:	f001 ff23 	bl	8006574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800472e:	bf00      	nop
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	2000d1e4 	.word	0x2000d1e4

08004738 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800473c:	4802      	ldr	r0, [pc, #8]	; (8004748 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800473e:	f005 fe36 	bl	800a3ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004742:	bf00      	nop
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	2000d630 	.word	0x2000d630

0800474c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

	if(tim_val == 4)											// Waiting 3 period of timer7: (0,01 *3 = 0,03 second)
 8004750:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <TIM7_IRQHandler+0x64>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b04      	cmp	r3, #4
 8004756:	d121      	bne.n	800479c <TIM7_IRQHandler+0x50>
	{
		tim_val = 0;
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <TIM7_IRQHandler+0x64>)
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)	// If button steel pressed
 800475e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004762:	4814      	ldr	r0, [pc, #80]	; (80047b4 <TIM7_IRQHandler+0x68>)
 8004764:	f001 fed4 	bl	8006510 <HAL_GPIO_ReadPin>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d112      	bne.n	8004794 <TIM7_IRQHandler+0x48>
		{
			klick++;
 800476e:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <TIM7_IRQHandler+0x6c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3301      	adds	r3, #1
 8004774:	4a10      	ldr	r2, [pc, #64]	; (80047b8 <TIM7_IRQHandler+0x6c>)
 8004776:	6013      	str	r3, [r2, #0]
			if(klick >= 15)										// it mean we have only 4 LEDs
 8004778:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <TIM7_IRQHandler+0x6c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b0e      	cmp	r3, #14
 800477e:	dd06      	ble.n	800478e <TIM7_IRQHandler+0x42>
			{
				klick = 0;
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <TIM7_IRQHandler+0x6c>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim7);					// Stop timer (becouse counter can turn on only encoder key)
 8004786:	480d      	ldr	r0, [pc, #52]	; (80047bc <TIM7_IRQHandler+0x70>)
 8004788:	f005 fcae 	bl	800a0e8 <HAL_TIM_Base_Stop_IT>
 800478c:	e002      	b.n	8004794 <TIM7_IRQHandler+0x48>
			}
			else
			{
				HAL_TIM_Base_Stop_IT(&htim7);
 800478e:	480b      	ldr	r0, [pc, #44]	; (80047bc <TIM7_IRQHandler+0x70>)
 8004790:	f005 fcaa 	bl	800a0e8 <HAL_TIM_Base_Stop_IT>
			}
		}
		HAL_TIM_Base_Stop_IT(&htim7);
 8004794:	4809      	ldr	r0, [pc, #36]	; (80047bc <TIM7_IRQHandler+0x70>)
 8004796:	f005 fca7 	bl	800a0e8 <HAL_TIM_Base_Stop_IT>
 800479a:	e004      	b.n	80047a6 <TIM7_IRQHandler+0x5a>
	}
	else
	{
		tim_val++;
 800479c:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <TIM7_IRQHandler+0x64>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3301      	adds	r3, #1
 80047a2:	4a03      	ldr	r2, [pc, #12]	; (80047b0 <TIM7_IRQHandler+0x64>)
 80047a4:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80047a6:	4805      	ldr	r0, [pc, #20]	; (80047bc <TIM7_IRQHandler+0x70>)
 80047a8:	f005 fe01 	bl	800a3ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	200027a8 	.word	0x200027a8
 80047b4:	40021000 	.word	0x40021000
 80047b8:	200027a4 	.word	0x200027a4
 80047bc:	2000d1e4 	.word	0x2000d1e4

080047c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80047c4:	4802      	ldr	r0, [pc, #8]	; (80047d0 <OTG_FS_IRQHandler+0x10>)
 80047c6:	f003 f988 	bl	8007ada <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	2000ed8c 	.word	0x2000ed8c

080047d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
	return 1;
 80047d8:	2301      	movs	r3, #1
}
 80047da:	4618      	mov	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <_kill>:

int _kill(int pid, int sig)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80047ee:	f00d f9d9 	bl	8011ba4 <__errno>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2216      	movs	r2, #22
 80047f6:	601a      	str	r2, [r3, #0]
	return -1;
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <_exit>:

void _exit (int status)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800480c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ffe7 	bl	80047e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004816:	e7fe      	b.n	8004816 <_exit+0x12>

08004818 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e00a      	b.n	8004840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800482a:	f3af 8000 	nop.w
 800482e:	4601      	mov	r1, r0
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	60ba      	str	r2, [r7, #8]
 8004836:	b2ca      	uxtb	r2, r1
 8004838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	3301      	adds	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	dbf0      	blt.n	800482a <_read+0x12>
	}

return len;
 8004848:	687b      	ldr	r3, [r7, #4]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e009      	b.n	8004878 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	60ba      	str	r2, [r7, #8]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	3301      	adds	r3, #1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	429a      	cmp	r2, r3
 800487e:	dbf1      	blt.n	8004864 <_write+0x12>
	}
	return len;
 8004880:	687b      	ldr	r3, [r7, #4]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <_close>:

int _close(int file)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
	return -1;
 8004892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048b2:	605a      	str	r2, [r3, #4]
	return 0;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <_isatty>:

int _isatty(int file)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
	return 1;
 80048ca:	2301      	movs	r3, #1
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
	return 0;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <_sbrk+0x5c>)
 80048fe:	4b15      	ldr	r3, [pc, #84]	; (8004954 <_sbrk+0x60>)
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <_sbrk+0x64>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004910:	4b11      	ldr	r3, [pc, #68]	; (8004958 <_sbrk+0x64>)
 8004912:	4a12      	ldr	r2, [pc, #72]	; (800495c <_sbrk+0x68>)
 8004914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <_sbrk+0x64>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	429a      	cmp	r2, r3
 8004922:	d207      	bcs.n	8004934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004924:	f00d f93e 	bl	8011ba4 <__errno>
 8004928:	4603      	mov	r3, r0
 800492a:	220c      	movs	r2, #12
 800492c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004932:	e009      	b.n	8004948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <_sbrk+0x64>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <_sbrk+0x64>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	4a05      	ldr	r2, [pc, #20]	; (8004958 <_sbrk+0x64>)
 8004944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004946:	68fb      	ldr	r3, [r7, #12]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20020000 	.word	0x20020000
 8004954:	00000900 	.word	0x00000900
 8004958:	200027ac 	.word	0x200027ac
 800495c:	2000f1a8 	.word	0x2000f1a8

08004960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <SystemInit+0x20>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	4a05      	ldr	r2, [pc, #20]	; (8004980 <SystemInit+0x20>)
 800496c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000ed00 	.word	0xe000ed00

08004984 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
 800498e:	460b      	mov	r3, r1
 8004990:	71bb      	strb	r3, [r7, #6]
 8004992:	4613      	mov	r3, r2
 8004994:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 8004996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499a:	2b00      	cmp	r3, #0
 800499c:	db3b      	blt.n	8004a16 <draw_pixel+0x92>
 800499e:	79bb      	ldrb	r3, [r7, #6]
 80049a0:	2b1f      	cmp	r3, #31
 80049a2:	d838      	bhi.n	8004a16 <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 80049a8:	79bb      	ldrb	r3, [r7, #6]
 80049aa:	08db      	lsrs	r3, r3, #3
 80049ac:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 80049ae:	7bfa      	ldrb	r2, [r7, #15]
 80049b0:	79bb      	ldrb	r3, [r7, #6]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	737b      	strb	r3, [r7, #13]
		if(color)
 80049bc:	797b      	ldrb	r3, [r7, #5]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d012      	beq.n	80049e8 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 80049c2:	7bba      	ldrb	r2, [r7, #14]
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	4917      	ldr	r1, [pc, #92]	; (8004a24 <draw_pixel+0xa0>)
 80049c8:	01d2      	lsls	r2, r2, #7
 80049ca:	440a      	add	r2, r1
 80049cc:	4413      	add	r3, r2
 80049ce:	7818      	ldrb	r0, [r3, #0]
 80049d0:	7bba      	ldrb	r2, [r7, #14]
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	7b79      	ldrb	r1, [r7, #13]
 80049d6:	4301      	orrs	r1, r0
 80049d8:	b2c8      	uxtb	r0, r1
 80049da:	4912      	ldr	r1, [pc, #72]	; (8004a24 <draw_pixel+0xa0>)
 80049dc:	01d2      	lsls	r2, r2, #7
 80049de:	440a      	add	r2, r1
 80049e0:	4413      	add	r3, r2
 80049e2:	4602      	mov	r2, r0
 80049e4:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 80049e6:	e016      	b.n	8004a16 <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 80049e8:	7bba      	ldrb	r2, [r7, #14]
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	490d      	ldr	r1, [pc, #52]	; (8004a24 <draw_pixel+0xa0>)
 80049ee:	01d2      	lsls	r2, r2, #7
 80049f0:	440a      	add	r2, r1
 80049f2:	4413      	add	r3, r2
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	b25a      	sxtb	r2, r3
 80049f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	b25b      	sxtb	r3, r3
 8004a00:	4013      	ands	r3, r2
 8004a02:	b259      	sxtb	r1, r3
 8004a04:	7bba      	ldrb	r2, [r7, #14]
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	b2c8      	uxtb	r0, r1
 8004a0a:	4906      	ldr	r1, [pc, #24]	; (8004a24 <draw_pixel+0xa0>)
 8004a0c:	01d2      	lsls	r2, r2, #7
 8004a0e:	440a      	add	r2, r1
 8004a10:	4413      	add	r3, r2
 8004a12:	4602      	mov	r2, r0
 8004a14:	701a      	strb	r2, [r3, #0]
}
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	2000d678 	.word	0x2000d678

08004a28 <invert_pixel>:
				draw_pixel(x*3+i,y*3+j,color);
	}
}

void invert_pixel(uint8_t x, uint8_t y)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	460a      	mov	r2, r1
 8004a32:	71fb      	strb	r3, [r7, #7]
 8004a34:	4613      	mov	r3, r2
 8004a36:	71bb      	strb	r3, [r7, #6]
	if(x<128 && y<32)
 8004a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	db24      	blt.n	8004a8a <invert_pixel+0x62>
 8004a40:	79bb      	ldrb	r3, [r7, #6]
 8004a42:	2b1f      	cmp	r3, #31
 8004a44:	d821      	bhi.n	8004a8a <invert_pixel+0x62>
	{
		uint8_t pixel = 0x01;
 8004a46:	2301      	movs	r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
		gddram[y>>3][x] ^= pixel<<(y%8);
 8004a4a:	79bb      	ldrb	r3, [r7, #6]
 8004a4c:	08db      	lsrs	r3, r3, #3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	4910      	ldr	r1, [pc, #64]	; (8004a98 <invert_pixel+0x70>)
 8004a56:	01d2      	lsls	r2, r2, #7
 8004a58:	440a      	add	r2, r1
 8004a5a:	4413      	add	r3, r2
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	b25a      	sxtb	r2, r3
 8004a60:	7bf9      	ldrb	r1, [r7, #15]
 8004a62:	79bb      	ldrb	r3, [r7, #6]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6c:	b25b      	sxtb	r3, r3
 8004a6e:	4053      	eors	r3, r2
 8004a70:	b259      	sxtb	r1, r3
 8004a72:	79bb      	ldrb	r3, [r7, #6]
 8004a74:	08db      	lsrs	r3, r3, #3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	b2c8      	uxtb	r0, r1
 8004a7e:	4906      	ldr	r1, [pc, #24]	; (8004a98 <invert_pixel+0x70>)
 8004a80:	01d2      	lsls	r2, r2, #7
 8004a82:	440a      	add	r2, r1
 8004a84:	4413      	add	r3, r2
 8004a86:	4602      	mov	r2, r0
 8004a88:	701a      	strb	r2, [r3, #0]
	}
}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	2000d678 	.word	0x2000d678

08004a9c <invert_rectangle>:

void invert_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8004a9c:	b590      	push	{r4, r7, lr}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4623      	mov	r3, r4
 8004aac:	71fb      	strb	r3, [r7, #7]
 8004aae:	4603      	mov	r3, r0
 8004ab0:	71bb      	strb	r3, [r7, #6]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	717b      	strb	r3, [r7, #5]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	713b      	strb	r3, [r7, #4]
	uint8_t i,j;
	for(i=x0;i<x1;i++)
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	73fb      	strb	r3, [r7, #15]
 8004abe:	e012      	b.n	8004ae6 <invert_rectangle+0x4a>
		for(j=y0;j<y1;j++)
 8004ac0:	79bb      	ldrb	r3, [r7, #6]
 8004ac2:	73bb      	strb	r3, [r7, #14]
 8004ac4:	e008      	b.n	8004ad8 <invert_rectangle+0x3c>
			invert_pixel(i,j);
 8004ac6:	7bba      	ldrb	r2, [r7, #14]
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff ffab 	bl	8004a28 <invert_pixel>
		for(j=y0;j<y1;j++)
 8004ad2:	7bbb      	ldrb	r3, [r7, #14]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	73bb      	strb	r3, [r7, #14]
 8004ad8:	7bba      	ldrb	r2, [r7, #14]
 8004ada:	793b      	ldrb	r3, [r7, #4]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d3f2      	bcc.n	8004ac6 <invert_rectangle+0x2a>
	for(i=x0;i<x1;i++)
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
 8004ae6:	7bfa      	ldrb	r2, [r7, #15]
 8004ae8:	797b      	ldrb	r3, [r7, #5]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d3e8      	bcc.n	8004ac0 <invert_rectangle+0x24>
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd90      	pop	{r4, r7, pc}

08004af8 <clear>:

void clear(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i=0;i<4;i++)
 8004afe:	2300      	movs	r3, #0
 8004b00:	71fb      	strb	r3, [r7, #7]
 8004b02:	e014      	b.n	8004b2e <clear+0x36>
		for(j=0;j<128;j++)
 8004b04:	2300      	movs	r3, #0
 8004b06:	71bb      	strb	r3, [r7, #6]
 8004b08:	e00a      	b.n	8004b20 <clear+0x28>
			gddram[i][j]=0x00;
 8004b0a:	79fa      	ldrb	r2, [r7, #7]
 8004b0c:	79bb      	ldrb	r3, [r7, #6]
 8004b0e:	490d      	ldr	r1, [pc, #52]	; (8004b44 <clear+0x4c>)
 8004b10:	01d2      	lsls	r2, r2, #7
 8004b12:	440a      	add	r2, r1
 8004b14:	4413      	add	r3, r2
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
		for(j=0;j<128;j++)
 8004b1a:	79bb      	ldrb	r3, [r7, #6]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	71bb      	strb	r3, [r7, #6]
 8004b20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	daf0      	bge.n	8004b0a <clear+0x12>
	for(i=0;i<4;i++)
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	71fb      	strb	r3, [r7, #7]
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d9e7      	bls.n	8004b04 <clear+0xc>
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	2000d678 	.word	0x2000d678

08004b48 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4604      	mov	r4, r0
 8004b50:	4608      	mov	r0, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	461a      	mov	r2, r3
 8004b56:	4623      	mov	r3, r4
 8004b58:	71fb      	strb	r3, [r7, #7]
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	71bb      	strb	r3, [r7, #6]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	717b      	strb	r3, [r7, #5]
 8004b62:	4613      	mov	r3, r2
 8004b64:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	75fb      	strb	r3, [r7, #23]
 8004b6e:	e04d      	b.n	8004c0c <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 8004b70:	2300      	movs	r3, #0
 8004b72:	75bb      	strb	r3, [r7, #22]
 8004b74:	e042      	b.n	8004bfc <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	08db      	lsrs	r3, r3, #3
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	7dbb      	ldrb	r3, [r7, #22]
 8004b7e:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004b82:	fb11 f303 	smulbb	r3, r1, r3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4413      	add	r3, r2
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 8004ba6:	7bba      	ldrb	r2, [r7, #14]
 8004ba8:	7b7b      	ldrb	r3, [r7, #13]
 8004baa:	4013      	ands	r3, r2
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00f      	beq.n	8004bd2 <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 8004bb2:	79fa      	ldrb	r2, [r7, #7]
 8004bb4:	797b      	ldrb	r3, [r7, #5]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	b2d8      	uxtb	r0, r3
 8004bc0:	7dba      	ldrb	r2, [r7, #22]
 8004bc2:	79bb      	ldrb	r3, [r7, #6]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2201      	movs	r2, #1
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f7ff feda 	bl	8004984 <draw_pixel>
 8004bd0:	e00e      	b.n	8004bf0 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8004bd2:	79fa      	ldrb	r2, [r7, #7]
 8004bd4:	797b      	ldrb	r3, [r7, #5]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	4413      	add	r3, r2
 8004bde:	b2d8      	uxtb	r0, r3
 8004be0:	7dba      	ldrb	r2, [r7, #22]
 8004be2:	79bb      	ldrb	r3, [r7, #6]
 8004be4:	4413      	add	r3, r2
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2200      	movs	r2, #0
 8004bea:	4619      	mov	r1, r3
 8004bec:	f7ff feca 	bl	8004984 <draw_pixel>
		for (y=0; y<height; y++)
 8004bf0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	75bb      	strb	r3, [r7, #22]
 8004bfc:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8004c00:	793b      	ldrb	r3, [r7, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	dbb7      	blt.n	8004b76 <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	75fb      	strb	r3, [r7, #23]
 8004c0c:	7dfa      	ldrb	r2, [r7, #23]
 8004c0e:	797b      	ldrb	r3, [r7, #5]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d3ad      	bcc.n	8004b70 <graphics_Glyph+0x28>
		}
	}
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd90      	pop	{r4, r7, pc}
	...

08004c20 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b089      	sub	sp, #36	; 0x24
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4603      	mov	r3, r0
 8004c2a:	71fb      	strb	r3, [r7, #7]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	71bb      	strb	r3, [r7, #6]
 8004c30:	4613      	mov	r3, r2
 8004c32:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 8004c38:	e081      	b.n	8004d3e <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 8004c40:	797a      	ldrb	r2, [r7, #5]
 8004c42:	4944      	ldr	r1, [pc, #272]	; (8004d54 <graphics_text+0x134>)
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3310      	adds	r3, #16
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	7dba      	ldrb	r2, [r7, #22]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d30b      	bcc.n	8004c70 <graphics_text+0x50>
 8004c58:	797a      	ldrb	r2, [r7, #5]
 8004c5a:	493e      	ldr	r1, [pc, #248]	; (8004d54 <graphics_text+0x134>)
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	3311      	adds	r3, #17
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	7dba      	ldrb	r2, [r7, #22]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d909      	bls.n	8004c84 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 8004c70:	797a      	ldrb	r2, [r7, #5]
 8004c72:	4938      	ldr	r1, [pc, #224]	; (8004d54 <graphics_text+0x134>)
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3312      	adds	r3, #18
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 8004c84:	797a      	ldrb	r2, [r7, #5]
 8004c86:	4933      	ldr	r1, [pc, #204]	; (8004d54 <graphics_text+0x134>)
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	3310      	adds	r3, #16
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	7dba      	ldrb	r2, [r7, #22]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 8004c9c:	797a      	ldrb	r2, [r7, #5]
 8004c9e:	492d      	ldr	r1, [pc, #180]	; (8004d54 <graphics_text+0x134>)
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	3308      	adds	r3, #8
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8004cb0:	7d7b      	ldrb	r3, [r7, #21]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10c      	bne.n	8004cd0 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 8004cb6:	797a      	ldrb	r2, [r7, #5]
 8004cb8:	4926      	ldr	r1, [pc, #152]	; (8004d54 <graphics_text+0x134>)
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	7dbb      	ldrb	r3, [r7, #22]
 8004cca:	4413      	add	r3, r2
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8004cd0:	797a      	ldrb	r2, [r7, #5]
 8004cd2:	4920      	ldr	r1, [pc, #128]	; (8004d54 <graphics_text+0x134>)
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	3301      	adds	r3, #1
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 8004ce4:	797a      	ldrb	r2, [r7, #5]
 8004ce6:	491b      	ldr	r1, [pc, #108]	; (8004d54 <graphics_text+0x134>)
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 8004cf6:	797a      	ldrb	r2, [r7, #5]
 8004cf8:	4916      	ldr	r1, [pc, #88]	; (8004d54 <graphics_text+0x134>)
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3304      	adds	r3, #4
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	7dbb      	ldrb	r3, [r7, #22]
 8004d0a:	7cf9      	ldrb	r1, [r7, #19]
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	7d39      	ldrb	r1, [r7, #20]
 8004d12:	fb01 f303 	mul.w	r3, r1, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]


		x+=width;
 8004d1a:	7dfa      	ldrb	r2, [r7, #23]
 8004d1c:	7d7b      	ldrb	r3, [r7, #21]
 8004d1e:	4413      	add	r3, r2
 8004d20:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 8004d22:	7d3c      	ldrb	r4, [r7, #20]
 8004d24:	7d7a      	ldrb	r2, [r7, #21]
 8004d26:	79b9      	ldrb	r1, [r7, #6]
 8004d28:	7df8      	ldrb	r0, [r7, #23]
 8004d2a:	7cfb      	ldrb	r3, [r7, #19]
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	4623      	mov	r3, r4
 8004d34:	f7ff ff08 	bl	8004b48 <graphics_Glyph>
		str++;								/* point to next character in string */
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f47f af79 	bne.w	8004c3a <graphics_text+0x1a>
	}

}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd90      	pop	{r4, r7, pc}
 8004d52:	bf00      	nop
 8004d54:	08018c2c 	.word	0x08018c2c

08004d58 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 8004d62:	2300      	movs	r3, #0
 8004d64:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 8004d6a:	f107 020c 	add.w	r2, r7, #12
 8004d6e:	2332      	movs	r3, #50	; 0x32
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	2302      	movs	r3, #2
 8004d74:	2178      	movs	r1, #120	; 0x78
 8004d76:	4803      	ldr	r0, [pc, #12]	; (8004d84 <ssd1306_command+0x2c>)
 8004d78:	f001 fd64 	bl	8006844 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	2000764c 	.word	0x2000764c

08004d88 <oled_update>:

void oled_update(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 8004d8e:	2021      	movs	r0, #33	; 0x21
 8004d90:	f7ff ffe2 	bl	8004d58 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 8004d94:	2000      	movs	r0, #0
 8004d96:	f7ff ffdf 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 8004d9a:	207f      	movs	r0, #127	; 0x7f
 8004d9c:	f7ff ffdc 	bl	8004d58 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8004da0:	2022      	movs	r0, #34	; 0x22
 8004da2:	f7ff ffd9 	bl	8004d58 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 8004da6:	2000      	movs	r0, #0
 8004da8:	f7ff ffd6 	bl	8004d58 <ssd1306_command>
  ssd1306_command(3); // Page end address
 8004dac:	2003      	movs	r0, #3
 8004dae:	f7ff ffd3 	bl	8004d58 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 8004db2:	2340      	movs	r3, #64	; 0x40
 8004db4:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	82fb      	strh	r3, [r7, #22]
 8004dba:	e02d      	b.n	8004e18 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	757b      	strb	r3, [r7, #21]
 8004dc0:	e024      	b.n	8004e0c <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	753b      	strb	r3, [r7, #20]
 8004dc6:	e012      	b.n	8004dee <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8004dc8:	8af9      	ldrh	r1, [r7, #22]
 8004dca:	7d7a      	ldrb	r2, [r7, #21]
 8004dcc:	7d3b      	ldrb	r3, [r7, #20]
 8004dce:	4413      	add	r3, r2
 8004dd0:	1e5a      	subs	r2, r3, #1
 8004dd2:	7d3b      	ldrb	r3, [r7, #20]
 8004dd4:	4814      	ldr	r0, [pc, #80]	; (8004e28 <oled_update+0xa0>)
 8004dd6:	01c9      	lsls	r1, r1, #7
 8004dd8:	4401      	add	r1, r0
 8004dda:	440a      	add	r2, r1
 8004ddc:	7812      	ldrb	r2, [r2, #0]
 8004dde:	f107 0118 	add.w	r1, r7, #24
 8004de2:	440b      	add	r3, r1
 8004de4:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8004de8:	7d3b      	ldrb	r3, [r7, #20]
 8004dea:	3301      	adds	r3, #1
 8004dec:	753b      	strb	r3, [r7, #20]
 8004dee:	7d3b      	ldrb	r3, [r7, #20]
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	d9e9      	bls.n	8004dc8 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 8004df4:	463a      	mov	r2, r7
 8004df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2311      	movs	r3, #17
 8004dfe:	2178      	movs	r1, #120	; 0x78
 8004e00:	480a      	ldr	r0, [pc, #40]	; (8004e2c <oled_update+0xa4>)
 8004e02:	f001 fd1f 	bl	8006844 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 8004e06:	7d7b      	ldrb	r3, [r7, #21]
 8004e08:	3310      	adds	r3, #16
 8004e0a:	757b      	strb	r3, [r7, #21]
 8004e0c:	7d7b      	ldrb	r3, [r7, #21]
 8004e0e:	2b7e      	cmp	r3, #126	; 0x7e
 8004e10:	d9d7      	bls.n	8004dc2 <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 8004e12:	8afb      	ldrh	r3, [r7, #22]
 8004e14:	3301      	adds	r3, #1
 8004e16:	82fb      	strh	r3, [r7, #22]
 8004e18:	8afb      	ldrh	r3, [r7, #22]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d9ce      	bls.n	8004dbc <oled_update+0x34>
		}
	}

}
 8004e1e:	bf00      	nop
 8004e20:	bf00      	nop
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	2000d678 	.word	0x2000d678
 8004e2c:	2000764c 	.word	0x2000764c

08004e30 <oled_init>:

void oled_init(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8004e36:	20ae      	movs	r0, #174	; 0xae
 8004e38:	f7ff ff8e 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8004e3c:	20d5      	movs	r0, #213	; 0xd5
 8004e3e:	f7ff ff8b 	bl	8004d58 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 8004e42:	2080      	movs	r0, #128	; 0x80
 8004e44:	f7ff ff88 	bl	8004d58 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8004e48:	20a8      	movs	r0, #168	; 0xa8
 8004e4a:	f7ff ff85 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 8004e4e:	201f      	movs	r0, #31
 8004e50:	f7ff ff82 	bl	8004d58 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8004e54:	20d3      	movs	r0, #211	; 0xd3
 8004e56:	f7ff ff7f 	bl	8004d58 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f7ff ff7c 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8004e60:	2040      	movs	r0, #64	; 0x40
 8004e62:	f7ff ff79 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8004e66:	208d      	movs	r0, #141	; 0x8d
 8004e68:	f7ff ff76 	bl	8004d58 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 8004e6c:	2014      	movs	r0, #20
 8004e6e:	f7ff ff73 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8004e72:	2020      	movs	r0, #32
 8004e74:	f7ff ff70 	bl	8004d58 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8004e78:	2000      	movs	r0, #0
 8004e7a:	f7ff ff6d 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 8004e7e:	20a1      	movs	r0, #161	; 0xa1
 8004e80:	f7ff ff6a 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 8004e84:	20c8      	movs	r0, #200	; 0xc8
 8004e86:	f7ff ff67 	bl	8004d58 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 8004e8a:	20da      	movs	r0, #218	; 0xda
 8004e8c:	f7ff ff64 	bl	8004d58 <ssd1306_command>
  ssd1306_command(0x02);
 8004e90:	2002      	movs	r0, #2
 8004e92:	f7ff ff61 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 8004e96:	2081      	movs	r0, #129	; 0x81
 8004e98:	f7ff ff5e 	bl	8004d58 <ssd1306_command>
  ssd1306_command(0x8F);
 8004e9c:	208f      	movs	r0, #143	; 0x8f
 8004e9e:	f7ff ff5b 	bl	8004d58 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8004ea2:	20d9      	movs	r0, #217	; 0xd9
 8004ea4:	f7ff ff58 	bl	8004d58 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8004ea8:	20f1      	movs	r0, #241	; 0xf1
 8004eaa:	f7ff ff55 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8004eae:	20db      	movs	r0, #219	; 0xdb
 8004eb0:	f7ff ff52 	bl	8004d58 <ssd1306_command>
  ssd1306_command(0x40);
 8004eb4:	2040      	movs	r0, #64	; 0x40
 8004eb6:	f7ff ff4f 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 8004eba:	20a4      	movs	r0, #164	; 0xa4
 8004ebc:	f7ff ff4c 	bl	8004d58 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8004ec0:	20a6      	movs	r0, #166	; 0xa6
 8004ec2:	f7ff ff49 	bl	8004d58 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 8004ec6:	202e      	movs	r0, #46	; 0x2e
 8004ec8:	f7ff ff46 	bl	8004d58 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8004ecc:	20af      	movs	r0, #175	; 0xaf
 8004ece:	f7ff ff43 	bl	8004d58 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	e013      	b.n	8004f00 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	e00a      	b.n	8004ef4 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 8004ede:	4a0c      	ldr	r2, [pc, #48]	; (8004f10 <oled_init+0xe0>)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	01db      	lsls	r3, r3, #7
 8004ee4:	441a      	add	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef8:	ddf1      	ble.n	8004ede <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3301      	adds	r3, #1
 8004efe:	607b      	str	r3, [r7, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	dde8      	ble.n	8004ed8 <oled_init+0xa8>
}
 8004f06:	bf00      	nop
 8004f08:	bf00      	nop
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	2000d678 	.word	0x2000d678

08004f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f18:	480d      	ldr	r0, [pc, #52]	; (8004f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f1a:	490e      	ldr	r1, [pc, #56]	; (8004f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f1c:	4a0e      	ldr	r2, [pc, #56]	; (8004f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f20:	e002      	b.n	8004f28 <LoopCopyDataInit>

08004f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f26:	3304      	adds	r3, #4

08004f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f2c:	d3f9      	bcc.n	8004f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f2e:	4a0b      	ldr	r2, [pc, #44]	; (8004f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f30:	4c0b      	ldr	r4, [pc, #44]	; (8004f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f34:	e001      	b.n	8004f3a <LoopFillZerobss>

08004f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f38:	3204      	adds	r2, #4

08004f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f3c:	d3fb      	bcc.n	8004f36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f3e:	f7ff fd0f 	bl	8004960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f42:	f00c ff2b 	bl	8011d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f46:	f7fd f891 	bl	800206c <main>
  bx  lr    
 8004f4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f54:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 8004f58:	0801b4b4 	.word	0x0801b4b4
  ldr r2, =_sbss
 8004f5c:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 8004f60:	2000f1a4 	.word	0x2000f1a4

08004f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f64:	e7fe      	b.n	8004f64 <ADC_IRQHandler>
	...

08004f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <HAL_Init+0x40>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <HAL_Init+0x40>)
 8004f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_Init+0x40>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <HAL_Init+0x40>)
 8004f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f84:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <HAL_Init+0x40>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a07      	ldr	r2, [pc, #28]	; (8004fa8 <HAL_Init+0x40>)
 8004f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f90:	2003      	movs	r0, #3
 8004f92:	f000 fb82 	bl	800569a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f96:	200f      	movs	r0, #15
 8004f98:	f7ff fb24 	bl	80045e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f9c:	f7ff f822 	bl	8003fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40023c00 	.word	0x40023c00

08004fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_IncTick+0x20>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <HAL_IncTick+0x24>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4413      	add	r3, r2
 8004fbc:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <HAL_IncTick+0x24>)
 8004fbe:	6013      	str	r3, [r2, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000034 	.word	0x20000034
 8004fd0:	2000d878 	.word	0x2000d878

08004fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8004fd8:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <HAL_GetTick+0x14>)
 8004fda:	681b      	ldr	r3, [r3, #0]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	2000d878 	.word	0x2000d878

08004fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ff4:	f7ff ffee 	bl	8004fd4 <HAL_GetTick>
 8004ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005004:	d005      	beq.n	8005012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HAL_Delay+0x44>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005012:	bf00      	nop
 8005014:	f7ff ffde 	bl	8004fd4 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	429a      	cmp	r2, r3
 8005022:	d8f7      	bhi.n	8005014 <HAL_Delay+0x28>
  {
  }
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000034 	.word	0x20000034

08005034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e033      	b.n	80050b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fe fff2 	bl	800403c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	d118      	bne.n	80050a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800507a:	f023 0302 	bic.w	r3, r3, #2
 800507e:	f043 0202 	orr.w	r2, r3, #2
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f93a 	bl	8005300 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	f043 0201 	orr.w	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
 80050a2:	e001      	b.n	80050a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x1c>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e105      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x228>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b09      	cmp	r3, #9
 80050e6:	d925      	bls.n	8005134 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68d9      	ldr	r1, [r3, #12]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	4613      	mov	r3, r2
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4413      	add	r3, r2
 80050fc:	3b1e      	subs	r3, #30
 80050fe:	2207      	movs	r2, #7
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43da      	mvns	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	400a      	ands	r2, r1
 800510c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68d9      	ldr	r1, [r3, #12]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	4618      	mov	r0, r3
 8005120:	4603      	mov	r3, r0
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	4403      	add	r3, r0
 8005126:	3b1e      	subs	r3, #30
 8005128:	409a      	lsls	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	e022      	b.n	800517a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6919      	ldr	r1, [r3, #16]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	4613      	mov	r3, r2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	4413      	add	r3, r2
 8005148:	2207      	movs	r2, #7
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43da      	mvns	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	400a      	ands	r2, r1
 8005156:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6919      	ldr	r1, [r3, #16]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	4618      	mov	r0, r3
 800516a:	4603      	mov	r3, r0
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4403      	add	r3, r0
 8005170:	409a      	lsls	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b06      	cmp	r3, #6
 8005180:	d824      	bhi.n	80051cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	3b05      	subs	r3, #5
 8005194:	221f      	movs	r2, #31
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43da      	mvns	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	400a      	ands	r2, r1
 80051a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	4618      	mov	r0, r3
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	3b05      	subs	r3, #5
 80051be:	fa00 f203 	lsl.w	r2, r0, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	635a      	str	r2, [r3, #52]	; 0x34
 80051ca:	e04c      	b.n	8005266 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b0c      	cmp	r3, #12
 80051d2:	d824      	bhi.n	800521e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	3b23      	subs	r3, #35	; 0x23
 80051e6:	221f      	movs	r2, #31
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	43da      	mvns	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	400a      	ands	r2, r1
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	4618      	mov	r0, r3
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	3b23      	subs	r3, #35	; 0x23
 8005210:	fa00 f203 	lsl.w	r2, r0, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
 800521c:	e023      	b.n	8005266 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	3b41      	subs	r3, #65	; 0x41
 8005230:	221f      	movs	r2, #31
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43da      	mvns	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	400a      	ands	r2, r1
 800523e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	4618      	mov	r0, r3
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	3b41      	subs	r3, #65	; 0x41
 800525a:	fa00 f203 	lsl.w	r2, r0, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005266:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <HAL_ADC_ConfigChannel+0x234>)
 8005268:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <HAL_ADC_ConfigChannel+0x238>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d109      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x1cc>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b12      	cmp	r3, #18
 800527a:	d105      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <HAL_ADC_ConfigChannel+0x238>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d123      	bne.n	80052da <HAL_ADC_ConfigChannel+0x21e>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b10      	cmp	r3, #16
 8005298:	d003      	beq.n	80052a2 <HAL_ADC_ConfigChannel+0x1e6>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b11      	cmp	r3, #17
 80052a0:	d11b      	bne.n	80052da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b10      	cmp	r3, #16
 80052b4:	d111      	bne.n	80052da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052b6:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <HAL_ADC_ConfigChannel+0x23c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a10      	ldr	r2, [pc, #64]	; (80052fc <HAL_ADC_ConfigChannel+0x240>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	0c9a      	lsrs	r2, r3, #18
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80052cc:	e002      	b.n	80052d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f9      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	40012300 	.word	0x40012300
 80052f4:	40012000 	.word	0x40012000
 80052f8:	2000002c 	.word	0x2000002c
 80052fc:	431bde83 	.word	0x431bde83

08005300 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005308:	4b79      	ldr	r3, [pc, #484]	; (80054f0 <ADC_Init+0x1f0>)
 800530a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	431a      	orrs	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6859      	ldr	r1, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	021a      	lsls	r2, r3, #8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6859      	ldr	r1, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800537a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6899      	ldr	r1, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	4a58      	ldr	r2, [pc, #352]	; (80054f4 <ADC_Init+0x1f4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d022      	beq.n	80053de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6899      	ldr	r1, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6899      	ldr	r1, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
 80053dc:	e00f      	b.n	80053fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0202 	bic.w	r2, r2, #2
 800540c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6899      	ldr	r1, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	7e1b      	ldrb	r3, [r3, #24]
 8005418:	005a      	lsls	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800543a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800544a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	3b01      	subs	r3, #1
 8005458:	035a      	lsls	r2, r3, #13
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	e007      	b.n	8005474 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005472:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	3b01      	subs	r3, #1
 8005490:	051a      	lsls	r2, r3, #20
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6899      	ldr	r1, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054b6:	025a      	lsls	r2, r3, #9
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6899      	ldr	r1, [r3, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	029a      	lsls	r2, r3, #10
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	609a      	str	r2, [r3, #8]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	40012300 	.word	0x40012300
 80054f4:	0f000001 	.word	0x0f000001

080054f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <__NVIC_SetPriorityGrouping+0x44>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005514:	4013      	ands	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800552a:	4a04      	ldr	r2, [pc, #16]	; (800553c <__NVIC_SetPriorityGrouping+0x44>)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	60d3      	str	r3, [r2, #12]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	e000ed00 	.word	0xe000ed00

08005540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005544:	4b04      	ldr	r3, [pc, #16]	; (8005558 <__NVIC_GetPriorityGrouping+0x18>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	0a1b      	lsrs	r3, r3, #8
 800554a:	f003 0307 	and.w	r3, r3, #7
}
 800554e:	4618      	mov	r0, r3
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	e000ed00 	.word	0xe000ed00

0800555c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556a:	2b00      	cmp	r3, #0
 800556c:	db0b      	blt.n	8005586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	f003 021f 	and.w	r2, r3, #31
 8005574:	4907      	ldr	r1, [pc, #28]	; (8005594 <__NVIC_EnableIRQ+0x38>)
 8005576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	2001      	movs	r0, #1
 800557e:	fa00 f202 	lsl.w	r2, r0, r2
 8005582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	e000e100 	.word	0xe000e100

08005598 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	db12      	blt.n	80055d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	f003 021f 	and.w	r2, r3, #31
 80055b0:	490a      	ldr	r1, [pc, #40]	; (80055dc <__NVIC_DisableIRQ+0x44>)
 80055b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	2001      	movs	r0, #1
 80055ba:	fa00 f202 	lsl.w	r2, r0, r2
 80055be:	3320      	adds	r3, #32
 80055c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80055c4:	f3bf 8f4f 	dsb	sy
}
 80055c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80055ca:	f3bf 8f6f 	isb	sy
}
 80055ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	e000e100 	.word	0xe000e100

080055e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	6039      	str	r1, [r7, #0]
 80055ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	db0a      	blt.n	800560a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	490c      	ldr	r1, [pc, #48]	; (800562c <__NVIC_SetPriority+0x4c>)
 80055fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fe:	0112      	lsls	r2, r2, #4
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	440b      	add	r3, r1
 8005604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005608:	e00a      	b.n	8005620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	b2da      	uxtb	r2, r3
 800560e:	4908      	ldr	r1, [pc, #32]	; (8005630 <__NVIC_SetPriority+0x50>)
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	3b04      	subs	r3, #4
 8005618:	0112      	lsls	r2, r2, #4
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	440b      	add	r3, r1
 800561e:	761a      	strb	r2, [r3, #24]
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	e000e100 	.word	0xe000e100
 8005630:	e000ed00 	.word	0xe000ed00

08005634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005634:	b480      	push	{r7}
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f1c3 0307 	rsb	r3, r3, #7
 800564e:	2b04      	cmp	r3, #4
 8005650:	bf28      	it	cs
 8005652:	2304      	movcs	r3, #4
 8005654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3304      	adds	r3, #4
 800565a:	2b06      	cmp	r3, #6
 800565c:	d902      	bls.n	8005664 <NVIC_EncodePriority+0x30>
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	3b03      	subs	r3, #3
 8005662:	e000      	b.n	8005666 <NVIC_EncodePriority+0x32>
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43da      	mvns	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	401a      	ands	r2, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800567c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	fa01 f303 	lsl.w	r3, r1, r3
 8005686:	43d9      	mvns	r1, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800568c:	4313      	orrs	r3, r2
         );
}
 800568e:	4618      	mov	r0, r3
 8005690:	3724      	adds	r7, #36	; 0x24
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff ff28 	bl	80054f8 <__NVIC_SetPriorityGrouping>
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056c2:	f7ff ff3d 	bl	8005540 <__NVIC_GetPriorityGrouping>
 80056c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	6978      	ldr	r0, [r7, #20]
 80056ce:	f7ff ffb1 	bl	8005634 <NVIC_EncodePriority>
 80056d2:	4602      	mov	r2, r0
 80056d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d8:	4611      	mov	r1, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff ff80 	bl	80055e0 <__NVIC_SetPriority>
}
 80056e0:	bf00      	nop
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff ff30 	bl	800555c <__NVIC_EnableIRQ>
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff ff40 	bl	8005598 <__NVIC_DisableIRQ>
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800572c:	f7ff fc52 	bl	8004fd4 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e099      	b.n	8005870 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0201 	bic.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800575c:	e00f      	b.n	800577e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800575e:	f7ff fc39 	bl	8004fd4 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b05      	cmp	r3, #5
 800576a:	d908      	bls.n	800577e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2203      	movs	r2, #3
 8005776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e078      	b.n	8005870 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e8      	bne.n	800575e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4b38      	ldr	r3, [pc, #224]	; (8005878 <HAL_DMA_Init+0x158>)
 8005798:	4013      	ands	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d107      	bne.n	80057e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	4313      	orrs	r3, r2
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f023 0307 	bic.w	r3, r3, #7
 80057fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	2b04      	cmp	r3, #4
 8005810:	d117      	bne.n	8005842 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00e      	beq.n	8005842 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fb5f 	bl	8005ee8 <DMA_CheckFifoParam>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2240      	movs	r2, #64	; 0x40
 8005834:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800583e:	2301      	movs	r3, #1
 8005840:	e016      	b.n	8005870 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fb16 	bl	8005e7c <DMA_CalcBaseAndBitshift>
 8005850:	4603      	mov	r3, r0
 8005852:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005858:	223f      	movs	r2, #63	; 0x3f
 800585a:	409a      	lsls	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	f010803f 	.word	0xf010803f

0800587c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e050      	b.n	8005930 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d101      	bne.n	800589e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
 800589c:	e048      	b.n	8005930 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2200      	movs	r2, #0
 80058c4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2221      	movs	r2, #33	; 0x21
 80058dc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 facc 	bl	8005e7c <DMA_CalcBaseAndBitshift>
 80058e4:	4603      	mov	r3, r0
 80058e6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005910:	223f      	movs	r2, #63	; 0x3f
 8005912:	409a      	lsls	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_DMA_Start_IT+0x26>
 800595a:	2302      	movs	r3, #2
 800595c:	e040      	b.n	80059e0 <HAL_DMA_Start_IT+0xa8>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b01      	cmp	r3, #1
 8005970:	d12f      	bne.n	80059d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fa4a 	bl	8005e20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005990:	223f      	movs	r2, #63	; 0x3f
 8005992:	409a      	lsls	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0216 	orr.w	r2, r2, #22
 80059a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0208 	orr.w	r2, r2, #8
 80059be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	e005      	b.n	80059de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80059da:	2302      	movs	r3, #2
 80059dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80059de:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80059f6:	f7ff faed 	bl	8004fd4 <HAL_GetTick>
 80059fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d008      	beq.n	8005a1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2280      	movs	r2, #128	; 0x80
 8005a0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e052      	b.n	8005ac0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0216 	bic.w	r2, r2, #22
 8005a28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695a      	ldr	r2, [r3, #20]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <HAL_DMA_Abort+0x62>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0208 	bic.w	r2, r2, #8
 8005a58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a6a:	e013      	b.n	8005a94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a6c:	f7ff fab2 	bl	8004fd4 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	d90c      	bls.n	8005a94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2203      	movs	r2, #3
 8005a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e015      	b.n	8005ac0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e4      	bne.n	8005a6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa6:	223f      	movs	r2, #63	; 0x3f
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d004      	beq.n	8005ae6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2280      	movs	r2, #128	; 0x80
 8005ae0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e00c      	b.n	8005b00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2205      	movs	r2, #5
 8005aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0201 	bic.w	r2, r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b18:	4b92      	ldr	r3, [pc, #584]	; (8005d64 <HAL_DMA_IRQHandler+0x258>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a92      	ldr	r2, [pc, #584]	; (8005d68 <HAL_DMA_IRQHandler+0x25c>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	0a9b      	lsrs	r3, r3, #10
 8005b24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b36:	2208      	movs	r2, #8
 8005b38:	409a      	lsls	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01a      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d013      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0204 	bic.w	r2, r2, #4
 8005b5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b64:	2208      	movs	r2, #8
 8005b66:	409a      	lsls	r2, r3
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b70:	f043 0201 	orr.w	r2, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d012      	beq.n	8005bae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	409a      	lsls	r2, r3
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba6:	f043 0202 	orr.w	r2, r3, #2
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb2:	2204      	movs	r2, #4
 8005bb4:	409a      	lsls	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d012      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00b      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bdc:	f043 0204 	orr.w	r2, r3, #4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be8:	2210      	movs	r2, #16
 8005bea:	409a      	lsls	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d043      	beq.n	8005c7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d03c      	beq.n	8005c7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c06:	2210      	movs	r2, #16
 8005c08:	409a      	lsls	r2, r3
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d018      	beq.n	8005c4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d108      	bne.n	8005c3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d024      	beq.n	8005c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	4798      	blx	r3
 8005c3a:	e01f      	b.n	8005c7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01b      	beq.n	8005c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	4798      	blx	r3
 8005c4c:	e016      	b.n	8005c7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d107      	bne.n	8005c6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0208 	bic.w	r2, r2, #8
 8005c6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c80:	2220      	movs	r2, #32
 8005c82:	409a      	lsls	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 808e 	beq.w	8005daa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 8086 	beq.w	8005daa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	409a      	lsls	r2, r3
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b05      	cmp	r3, #5
 8005cb4:	d136      	bne.n	8005d24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0216 	bic.w	r2, r2, #22
 8005cc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695a      	ldr	r2, [r3, #20]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d103      	bne.n	8005ce6 <HAL_DMA_IRQHandler+0x1da>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0208 	bic.w	r2, r2, #8
 8005cf4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfa:	223f      	movs	r2, #63	; 0x3f
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d07d      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	4798      	blx	r3
        }
        return;
 8005d22:	e078      	b.n	8005e16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d01c      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d108      	bne.n	8005d52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d030      	beq.n	8005daa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
 8005d50:	e02b      	b.n	8005daa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d027      	beq.n	8005daa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
 8005d62:	e022      	b.n	8005daa <HAL_DMA_IRQHandler+0x29e>
 8005d64:	2000002c 	.word	0x2000002c
 8005d68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10f      	bne.n	8005d9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0210 	bic.w	r2, r2, #16
 8005d88:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d032      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d022      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2205      	movs	r2, #5
 8005dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0201 	bic.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	60bb      	str	r3, [r7, #8]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d307      	bcc.n	8005df2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f2      	bne.n	8005dd6 <HAL_DMA_IRQHandler+0x2ca>
 8005df0:	e000      	b.n	8005df4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005df2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
 8005e14:	e000      	b.n	8005e18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005e16:	bf00      	nop
    }
  }
}
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop

08005e20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d108      	bne.n	8005e60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e5e:	e007      	b.n	8005e70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	60da      	str	r2, [r3, #12]
}
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	3b10      	subs	r3, #16
 8005e8c:	4a14      	ldr	r2, [pc, #80]	; (8005ee0 <DMA_CalcBaseAndBitshift+0x64>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	091b      	lsrs	r3, r3, #4
 8005e94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e96:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <DMA_CalcBaseAndBitshift+0x68>)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d909      	bls.n	8005ebe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005eb2:	f023 0303 	bic.w	r3, r3, #3
 8005eb6:	1d1a      	adds	r2, r3, #4
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	659a      	str	r2, [r3, #88]	; 0x58
 8005ebc:	e007      	b.n	8005ece <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	aaaaaaab 	.word	0xaaaaaaab
 8005ee4:	0801b094 	.word	0x0801b094

08005ee8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d11f      	bne.n	8005f42 <DMA_CheckFifoParam+0x5a>
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d856      	bhi.n	8005fb6 <DMA_CheckFifoParam+0xce>
 8005f08:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <DMA_CheckFifoParam+0x28>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f21 	.word	0x08005f21
 8005f14:	08005f33 	.word	0x08005f33
 8005f18:	08005f21 	.word	0x08005f21
 8005f1c:	08005fb7 	.word	0x08005fb7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d046      	beq.n	8005fba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f30:	e043      	b.n	8005fba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f3a:	d140      	bne.n	8005fbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f40:	e03d      	b.n	8005fbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4a:	d121      	bne.n	8005f90 <DMA_CheckFifoParam+0xa8>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d837      	bhi.n	8005fc2 <DMA_CheckFifoParam+0xda>
 8005f52:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <DMA_CheckFifoParam+0x70>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f69 	.word	0x08005f69
 8005f5c:	08005f6f 	.word	0x08005f6f
 8005f60:	08005f69 	.word	0x08005f69
 8005f64:	08005f81 	.word	0x08005f81
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f6c:	e030      	b.n	8005fd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d025      	beq.n	8005fc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f7e:	e022      	b.n	8005fc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f88:	d11f      	bne.n	8005fca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f8e:	e01c      	b.n	8005fca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d903      	bls.n	8005f9e <DMA_CheckFifoParam+0xb6>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d003      	beq.n	8005fa4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f9c:	e018      	b.n	8005fd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa2:	e015      	b.n	8005fd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00e      	beq.n	8005fce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb4:	e00b      	b.n	8005fce <DMA_CheckFifoParam+0xe6>
      break;
 8005fb6:	bf00      	nop
 8005fb8:	e00a      	b.n	8005fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8005fba:	bf00      	nop
 8005fbc:	e008      	b.n	8005fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8005fbe:	bf00      	nop
 8005fc0:	e006      	b.n	8005fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8005fc2:	bf00      	nop
 8005fc4:	e004      	b.n	8005fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8005fc6:	bf00      	nop
 8005fc8:	e002      	b.n	8005fd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005fca:	bf00      	nop
 8005fcc:	e000      	b.n	8005fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8005fce:	bf00      	nop
    }
  } 
  
  return status; 
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop

08005fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b089      	sub	sp, #36	; 0x24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
 8005ffa:	e16b      	b.n	80062d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4013      	ands	r3, r2
 800600e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	429a      	cmp	r2, r3
 8006016:	f040 815a 	bne.w	80062ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b01      	cmp	r3, #1
 8006024:	d005      	beq.n	8006032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800602e:	2b02      	cmp	r3, #2
 8006030:	d130      	bne.n	8006094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	2203      	movs	r2, #3
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	43db      	mvns	r3, r3
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	4013      	ands	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	4313      	orrs	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006068:	2201      	movs	r2, #1
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	43db      	mvns	r3, r3
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	4013      	ands	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	091b      	lsrs	r3, r3, #4
 800607e:	f003 0201 	and.w	r2, r3, #1
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4313      	orrs	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	2b03      	cmp	r3, #3
 800609e:	d017      	beq.n	80060d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	2203      	movs	r2, #3
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d123      	bne.n	8006124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	08da      	lsrs	r2, r3, #3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3208      	adds	r2, #8
 80060e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	220f      	movs	r2, #15
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43db      	mvns	r3, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4013      	ands	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4313      	orrs	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	08da      	lsrs	r2, r3, #3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3208      	adds	r2, #8
 800611e:	69b9      	ldr	r1, [r7, #24]
 8006120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	2203      	movs	r2, #3
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	43db      	mvns	r3, r3
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	4013      	ands	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f003 0203 	and.w	r2, r3, #3
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	4313      	orrs	r3, r2
 8006150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80b4 	beq.w	80062ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	4b60      	ldr	r3, [pc, #384]	; (80062ec <HAL_GPIO_Init+0x30c>)
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	4a5f      	ldr	r2, [pc, #380]	; (80062ec <HAL_GPIO_Init+0x30c>)
 8006170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006174:	6453      	str	r3, [r2, #68]	; 0x44
 8006176:	4b5d      	ldr	r3, [pc, #372]	; (80062ec <HAL_GPIO_Init+0x30c>)
 8006178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006182:	4a5b      	ldr	r2, [pc, #364]	; (80062f0 <HAL_GPIO_Init+0x310>)
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	3302      	adds	r3, #2
 800618a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800618e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	220f      	movs	r2, #15
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	43db      	mvns	r3, r3
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	4013      	ands	r3, r2
 80061a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a52      	ldr	r2, [pc, #328]	; (80062f4 <HAL_GPIO_Init+0x314>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d02b      	beq.n	8006206 <HAL_GPIO_Init+0x226>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a51      	ldr	r2, [pc, #324]	; (80062f8 <HAL_GPIO_Init+0x318>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d025      	beq.n	8006202 <HAL_GPIO_Init+0x222>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a50      	ldr	r2, [pc, #320]	; (80062fc <HAL_GPIO_Init+0x31c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01f      	beq.n	80061fe <HAL_GPIO_Init+0x21e>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a4f      	ldr	r2, [pc, #316]	; (8006300 <HAL_GPIO_Init+0x320>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d019      	beq.n	80061fa <HAL_GPIO_Init+0x21a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a4e      	ldr	r2, [pc, #312]	; (8006304 <HAL_GPIO_Init+0x324>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d013      	beq.n	80061f6 <HAL_GPIO_Init+0x216>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a4d      	ldr	r2, [pc, #308]	; (8006308 <HAL_GPIO_Init+0x328>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d00d      	beq.n	80061f2 <HAL_GPIO_Init+0x212>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a4c      	ldr	r2, [pc, #304]	; (800630c <HAL_GPIO_Init+0x32c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d007      	beq.n	80061ee <HAL_GPIO_Init+0x20e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a4b      	ldr	r2, [pc, #300]	; (8006310 <HAL_GPIO_Init+0x330>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d101      	bne.n	80061ea <HAL_GPIO_Init+0x20a>
 80061e6:	2307      	movs	r3, #7
 80061e8:	e00e      	b.n	8006208 <HAL_GPIO_Init+0x228>
 80061ea:	2308      	movs	r3, #8
 80061ec:	e00c      	b.n	8006208 <HAL_GPIO_Init+0x228>
 80061ee:	2306      	movs	r3, #6
 80061f0:	e00a      	b.n	8006208 <HAL_GPIO_Init+0x228>
 80061f2:	2305      	movs	r3, #5
 80061f4:	e008      	b.n	8006208 <HAL_GPIO_Init+0x228>
 80061f6:	2304      	movs	r3, #4
 80061f8:	e006      	b.n	8006208 <HAL_GPIO_Init+0x228>
 80061fa:	2303      	movs	r3, #3
 80061fc:	e004      	b.n	8006208 <HAL_GPIO_Init+0x228>
 80061fe:	2302      	movs	r3, #2
 8006200:	e002      	b.n	8006208 <HAL_GPIO_Init+0x228>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <HAL_GPIO_Init+0x228>
 8006206:	2300      	movs	r3, #0
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	f002 0203 	and.w	r2, r2, #3
 800620e:	0092      	lsls	r2, r2, #2
 8006210:	4093      	lsls	r3, r2
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	4313      	orrs	r3, r2
 8006216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006218:	4935      	ldr	r1, [pc, #212]	; (80062f0 <HAL_GPIO_Init+0x310>)
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	089b      	lsrs	r3, r3, #2
 800621e:	3302      	adds	r3, #2
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006226:	4b3b      	ldr	r3, [pc, #236]	; (8006314 <HAL_GPIO_Init+0x334>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	43db      	mvns	r3, r3
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	4013      	ands	r3, r2
 8006234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800624a:	4a32      	ldr	r2, [pc, #200]	; (8006314 <HAL_GPIO_Init+0x334>)
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006250:	4b30      	ldr	r3, [pc, #192]	; (8006314 <HAL_GPIO_Init+0x334>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	43db      	mvns	r3, r3
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	4013      	ands	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006274:	4a27      	ldr	r2, [pc, #156]	; (8006314 <HAL_GPIO_Init+0x334>)
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800627a:	4b26      	ldr	r3, [pc, #152]	; (8006314 <HAL_GPIO_Init+0x334>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	43db      	mvns	r3, r3
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	4013      	ands	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800629e:	4a1d      	ldr	r2, [pc, #116]	; (8006314 <HAL_GPIO_Init+0x334>)
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062a4:	4b1b      	ldr	r3, [pc, #108]	; (8006314 <HAL_GPIO_Init+0x334>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	43db      	mvns	r3, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	4013      	ands	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062c8:	4a12      	ldr	r2, [pc, #72]	; (8006314 <HAL_GPIO_Init+0x334>)
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	3301      	adds	r3, #1
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2b0f      	cmp	r3, #15
 80062d8:	f67f ae90 	bls.w	8005ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	3724      	adds	r7, #36	; 0x24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40023800 	.word	0x40023800
 80062f0:	40013800 	.word	0x40013800
 80062f4:	40020000 	.word	0x40020000
 80062f8:	40020400 	.word	0x40020400
 80062fc:	40020800 	.word	0x40020800
 8006300:	40020c00 	.word	0x40020c00
 8006304:	40021000 	.word	0x40021000
 8006308:	40021400 	.word	0x40021400
 800630c:	40021800 	.word	0x40021800
 8006310:	40021c00 	.word	0x40021c00
 8006314:	40013c00 	.word	0x40013c00

08006318 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800632a:	2300      	movs	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	e0cd      	b.n	80064d0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006334:	2201      	movs	r2, #1
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4013      	ands	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	429a      	cmp	r2, r3
 800634c:	f040 80bd 	bne.w	80064ca <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006350:	4a65      	ldr	r2, [pc, #404]	; (80064e8 <HAL_GPIO_DeInit+0x1d0>)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	089b      	lsrs	r3, r3, #2
 8006356:	3302      	adds	r3, #2
 8006358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800635c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	220f      	movs	r2, #15
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	4013      	ands	r3, r2
 8006370:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a5d      	ldr	r2, [pc, #372]	; (80064ec <HAL_GPIO_DeInit+0x1d4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d02b      	beq.n	80063d2 <HAL_GPIO_DeInit+0xba>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a5c      	ldr	r2, [pc, #368]	; (80064f0 <HAL_GPIO_DeInit+0x1d8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d025      	beq.n	80063ce <HAL_GPIO_DeInit+0xb6>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a5b      	ldr	r2, [pc, #364]	; (80064f4 <HAL_GPIO_DeInit+0x1dc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01f      	beq.n	80063ca <HAL_GPIO_DeInit+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a5a      	ldr	r2, [pc, #360]	; (80064f8 <HAL_GPIO_DeInit+0x1e0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d019      	beq.n	80063c6 <HAL_GPIO_DeInit+0xae>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a59      	ldr	r2, [pc, #356]	; (80064fc <HAL_GPIO_DeInit+0x1e4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d013      	beq.n	80063c2 <HAL_GPIO_DeInit+0xaa>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a58      	ldr	r2, [pc, #352]	; (8006500 <HAL_GPIO_DeInit+0x1e8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00d      	beq.n	80063be <HAL_GPIO_DeInit+0xa6>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a57      	ldr	r2, [pc, #348]	; (8006504 <HAL_GPIO_DeInit+0x1ec>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d007      	beq.n	80063ba <HAL_GPIO_DeInit+0xa2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a56      	ldr	r2, [pc, #344]	; (8006508 <HAL_GPIO_DeInit+0x1f0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d101      	bne.n	80063b6 <HAL_GPIO_DeInit+0x9e>
 80063b2:	2307      	movs	r3, #7
 80063b4:	e00e      	b.n	80063d4 <HAL_GPIO_DeInit+0xbc>
 80063b6:	2308      	movs	r3, #8
 80063b8:	e00c      	b.n	80063d4 <HAL_GPIO_DeInit+0xbc>
 80063ba:	2306      	movs	r3, #6
 80063bc:	e00a      	b.n	80063d4 <HAL_GPIO_DeInit+0xbc>
 80063be:	2305      	movs	r3, #5
 80063c0:	e008      	b.n	80063d4 <HAL_GPIO_DeInit+0xbc>
 80063c2:	2304      	movs	r3, #4
 80063c4:	e006      	b.n	80063d4 <HAL_GPIO_DeInit+0xbc>
 80063c6:	2303      	movs	r3, #3
 80063c8:	e004      	b.n	80063d4 <HAL_GPIO_DeInit+0xbc>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e002      	b.n	80063d4 <HAL_GPIO_DeInit+0xbc>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <HAL_GPIO_DeInit+0xbc>
 80063d2:	2300      	movs	r3, #0
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	f002 0203 	and.w	r2, r2, #3
 80063da:	0092      	lsls	r2, r2, #2
 80063dc:	4093      	lsls	r3, r2
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d132      	bne.n	800644a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80063e4:	4b49      	ldr	r3, [pc, #292]	; (800650c <HAL_GPIO_DeInit+0x1f4>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	43db      	mvns	r3, r3
 80063ec:	4947      	ldr	r1, [pc, #284]	; (800650c <HAL_GPIO_DeInit+0x1f4>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80063f2:	4b46      	ldr	r3, [pc, #280]	; (800650c <HAL_GPIO_DeInit+0x1f4>)
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	4944      	ldr	r1, [pc, #272]	; (800650c <HAL_GPIO_DeInit+0x1f4>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006400:	4b42      	ldr	r3, [pc, #264]	; (800650c <HAL_GPIO_DeInit+0x1f4>)
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	43db      	mvns	r3, r3
 8006408:	4940      	ldr	r1, [pc, #256]	; (800650c <HAL_GPIO_DeInit+0x1f4>)
 800640a:	4013      	ands	r3, r2
 800640c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800640e:	4b3f      	ldr	r3, [pc, #252]	; (800650c <HAL_GPIO_DeInit+0x1f4>)
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	43db      	mvns	r3, r3
 8006416:	493d      	ldr	r1, [pc, #244]	; (800650c <HAL_GPIO_DeInit+0x1f4>)
 8006418:	4013      	ands	r3, r2
 800641a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	220f      	movs	r2, #15
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800642c:	4a2e      	ldr	r2, [pc, #184]	; (80064e8 <HAL_GPIO_DeInit+0x1d0>)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	3302      	adds	r3, #2
 8006434:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	43da      	mvns	r2, r3
 800643c:	482a      	ldr	r0, [pc, #168]	; (80064e8 <HAL_GPIO_DeInit+0x1d0>)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	089b      	lsrs	r3, r3, #2
 8006442:	400a      	ands	r2, r1
 8006444:	3302      	adds	r3, #2
 8006446:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	2103      	movs	r1, #3
 8006454:	fa01 f303 	lsl.w	r3, r1, r3
 8006458:	43db      	mvns	r3, r3
 800645a:	401a      	ands	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	08da      	lsrs	r2, r3, #3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3208      	adds	r2, #8
 8006468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	220f      	movs	r2, #15
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	43db      	mvns	r3, r3
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	08d2      	lsrs	r2, r2, #3
 8006480:	4019      	ands	r1, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3208      	adds	r2, #8
 8006486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	2103      	movs	r1, #3
 8006494:	fa01 f303 	lsl.w	r3, r1, r3
 8006498:	43db      	mvns	r3, r3
 800649a:	401a      	ands	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	2101      	movs	r1, #1
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ac:	43db      	mvns	r3, r3
 80064ae:	401a      	ands	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	2103      	movs	r1, #3
 80064be:	fa01 f303 	lsl.w	r3, r1, r3
 80064c2:	43db      	mvns	r3, r3
 80064c4:	401a      	ands	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	3301      	adds	r3, #1
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	f67f af2e 	bls.w	8006334 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40013800 	.word	0x40013800
 80064ec:	40020000 	.word	0x40020000
 80064f0:	40020400 	.word	0x40020400
 80064f4:	40020800 	.word	0x40020800
 80064f8:	40020c00 	.word	0x40020c00
 80064fc:	40021000 	.word	0x40021000
 8006500:	40021400 	.word	0x40021400
 8006504:	40021800 	.word	0x40021800
 8006508:	40021c00 	.word	0x40021c00
 800650c:	40013c00 	.word	0x40013c00

08006510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	887b      	ldrh	r3, [r7, #2]
 8006522:	4013      	ands	r3, r2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
 800652c:	e001      	b.n	8006532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800652e:	2300      	movs	r3, #0
 8006530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	807b      	strh	r3, [r7, #2]
 800654c:	4613      	mov	r3, r2
 800654e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006550:	787b      	ldrb	r3, [r7, #1]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006556:	887a      	ldrh	r2, [r7, #2]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800655c:	e003      	b.n	8006566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800655e:	887b      	ldrh	r3, [r7, #2]
 8006560:	041a      	lsls	r2, r3, #16
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	619a      	str	r2, [r3, #24]
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800657e:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006580:	695a      	ldr	r2, [r3, #20]
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	4013      	ands	r3, r2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d006      	beq.n	8006598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800658a:	4a05      	ldr	r2, [pc, #20]	; (80065a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 f806 	bl	80065a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40013c00 	.word	0x40013c00

080065a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e12b      	b.n	8006826 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d106      	bne.n	80065e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fd fd6e 	bl	80040c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2224      	movs	r2, #36	; 0x24
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0201 	bic.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800660e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800661e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006620:	f002 feda 	bl	80093d8 <HAL_RCC_GetPCLK1Freq>
 8006624:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	4a81      	ldr	r2, [pc, #516]	; (8006830 <HAL_I2C_Init+0x274>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d807      	bhi.n	8006640 <HAL_I2C_Init+0x84>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a80      	ldr	r2, [pc, #512]	; (8006834 <HAL_I2C_Init+0x278>)
 8006634:	4293      	cmp	r3, r2
 8006636:	bf94      	ite	ls
 8006638:	2301      	movls	r3, #1
 800663a:	2300      	movhi	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	e006      	b.n	800664e <HAL_I2C_Init+0x92>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4a7d      	ldr	r2, [pc, #500]	; (8006838 <HAL_I2C_Init+0x27c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	bf94      	ite	ls
 8006648:	2301      	movls	r3, #1
 800664a:	2300      	movhi	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e0e7      	b.n	8006826 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4a78      	ldr	r2, [pc, #480]	; (800683c <HAL_I2C_Init+0x280>)
 800665a:	fba2 2303 	umull	r2, r3, r2, r3
 800665e:	0c9b      	lsrs	r3, r3, #18
 8006660:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	430a      	orrs	r2, r1
 8006674:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	4a6a      	ldr	r2, [pc, #424]	; (8006830 <HAL_I2C_Init+0x274>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d802      	bhi.n	8006690 <HAL_I2C_Init+0xd4>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	3301      	adds	r3, #1
 800668e:	e009      	b.n	80066a4 <HAL_I2C_Init+0xe8>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006696:	fb02 f303 	mul.w	r3, r2, r3
 800669a:	4a69      	ldr	r2, [pc, #420]	; (8006840 <HAL_I2C_Init+0x284>)
 800669c:	fba2 2303 	umull	r2, r3, r2, r3
 80066a0:	099b      	lsrs	r3, r3, #6
 80066a2:	3301      	adds	r3, #1
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6812      	ldr	r2, [r2, #0]
 80066a8:	430b      	orrs	r3, r1
 80066aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	495c      	ldr	r1, [pc, #368]	; (8006830 <HAL_I2C_Init+0x274>)
 80066c0:	428b      	cmp	r3, r1
 80066c2:	d819      	bhi.n	80066f8 <HAL_I2C_Init+0x13c>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	1e59      	subs	r1, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80066d2:	1c59      	adds	r1, r3, #1
 80066d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066d8:	400b      	ands	r3, r1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <HAL_I2C_Init+0x138>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	1e59      	subs	r1, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80066ec:	3301      	adds	r3, #1
 80066ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066f2:	e051      	b.n	8006798 <HAL_I2C_Init+0x1dc>
 80066f4:	2304      	movs	r3, #4
 80066f6:	e04f      	b.n	8006798 <HAL_I2C_Init+0x1dc>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d111      	bne.n	8006724 <HAL_I2C_Init+0x168>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	1e58      	subs	r0, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6859      	ldr	r1, [r3, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	440b      	add	r3, r1
 800670e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006712:	3301      	adds	r3, #1
 8006714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006718:	2b00      	cmp	r3, #0
 800671a:	bf0c      	ite	eq
 800671c:	2301      	moveq	r3, #1
 800671e:	2300      	movne	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	e012      	b.n	800674a <HAL_I2C_Init+0x18e>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	1e58      	subs	r0, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6859      	ldr	r1, [r3, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	0099      	lsls	r1, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	fbb0 f3f3 	udiv	r3, r0, r3
 800673a:	3301      	adds	r3, #1
 800673c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006740:	2b00      	cmp	r3, #0
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <HAL_I2C_Init+0x196>
 800674e:	2301      	movs	r3, #1
 8006750:	e022      	b.n	8006798 <HAL_I2C_Init+0x1dc>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10e      	bne.n	8006778 <HAL_I2C_Init+0x1bc>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	1e58      	subs	r0, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6859      	ldr	r1, [r3, #4]
 8006762:	460b      	mov	r3, r1
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	440b      	add	r3, r1
 8006768:	fbb0 f3f3 	udiv	r3, r0, r3
 800676c:	3301      	adds	r3, #1
 800676e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006776:	e00f      	b.n	8006798 <HAL_I2C_Init+0x1dc>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	1e58      	subs	r0, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6859      	ldr	r1, [r3, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	0099      	lsls	r1, r3, #2
 8006788:	440b      	add	r3, r1
 800678a:	fbb0 f3f3 	udiv	r3, r0, r3
 800678e:	3301      	adds	r3, #1
 8006790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	6809      	ldr	r1, [r1, #0]
 800679c:	4313      	orrs	r3, r2
 800679e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80067c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6911      	ldr	r1, [r2, #16]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	68d2      	ldr	r2, [r2, #12]
 80067d2:	4311      	orrs	r1, r2
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	430b      	orrs	r3, r1
 80067da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695a      	ldr	r2, [r3, #20]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	000186a0 	.word	0x000186a0
 8006834:	001e847f 	.word	0x001e847f
 8006838:	003d08ff 	.word	0x003d08ff
 800683c:	431bde83 	.word	0x431bde83
 8006840:	10624dd3 	.word	0x10624dd3

08006844 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	607a      	str	r2, [r7, #4]
 800684e:	461a      	mov	r2, r3
 8006850:	460b      	mov	r3, r1
 8006852:	817b      	strh	r3, [r7, #10]
 8006854:	4613      	mov	r3, r2
 8006856:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006858:	f7fe fbbc 	bl	8004fd4 <HAL_GetTick>
 800685c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b20      	cmp	r3, #32
 8006868:	f040 80e0 	bne.w	8006a2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	2319      	movs	r3, #25
 8006872:	2201      	movs	r2, #1
 8006874:	4970      	ldr	r1, [pc, #448]	; (8006a38 <HAL_I2C_Master_Transmit+0x1f4>)
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fe02 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006882:	2302      	movs	r3, #2
 8006884:	e0d3      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_I2C_Master_Transmit+0x50>
 8006890:	2302      	movs	r3, #2
 8006892:	e0cc      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x1ea>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d007      	beq.n	80068ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0201 	orr.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2221      	movs	r2, #33	; 0x21
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2210      	movs	r2, #16
 80068d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	893a      	ldrh	r2, [r7, #8]
 80068ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a50      	ldr	r2, [pc, #320]	; (8006a3c <HAL_I2C_Master_Transmit+0x1f8>)
 80068fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80068fc:	8979      	ldrh	r1, [r7, #10]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	6a3a      	ldr	r2, [r7, #32]
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 fbbc 	bl	8007080 <I2C_MasterRequestWrite>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e08d      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006928:	e066      	b.n	80069f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	6a39      	ldr	r1, [r7, #32]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 fe7c 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00d      	beq.n	8006956 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	2b04      	cmp	r3, #4
 8006940:	d107      	bne.n	8006952 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006950:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e06b      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	781a      	ldrb	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b04      	cmp	r3, #4
 8006992:	d11b      	bne.n	80069cc <HAL_I2C_Master_Transmit+0x188>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d017      	beq.n	80069cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	6a39      	ldr	r1, [r7, #32]
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 fe6c 	bl	80076ae <I2C_WaitOnBTFFlagUntilTimeout>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00d      	beq.n	80069f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d107      	bne.n	80069f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e01a      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d194      	bne.n	800692a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e000      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006a2c:	2302      	movs	r3, #2
  }
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	00100002 	.word	0x00100002
 8006a3c:	ffff0000 	.word	0xffff0000

08006a40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	4608      	mov	r0, r1
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4603      	mov	r3, r0
 8006a50:	817b      	strh	r3, [r7, #10]
 8006a52:	460b      	mov	r3, r1
 8006a54:	813b      	strh	r3, [r7, #8]
 8006a56:	4613      	mov	r3, r2
 8006a58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a5a:	f7fe fabb 	bl	8004fd4 <HAL_GetTick>
 8006a5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	f040 80d9 	bne.w	8006c20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	2319      	movs	r3, #25
 8006a74:	2201      	movs	r2, #1
 8006a76:	496d      	ldr	r1, [pc, #436]	; (8006c2c <HAL_I2C_Mem_Write+0x1ec>)
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fd01 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a84:	2302      	movs	r3, #2
 8006a86:	e0cc      	b.n	8006c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_I2C_Mem_Write+0x56>
 8006a92:	2302      	movs	r3, #2
 8006a94:	e0c5      	b.n	8006c22 <HAL_I2C_Mem_Write+0x1e2>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d007      	beq.n	8006abc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2221      	movs	r2, #33	; 0x21
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2240      	movs	r2, #64	; 0x40
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a3a      	ldr	r2, [r7, #32]
 8006ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4a4d      	ldr	r2, [pc, #308]	; (8006c30 <HAL_I2C_Mem_Write+0x1f0>)
 8006afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006afe:	88f8      	ldrh	r0, [r7, #6]
 8006b00:	893a      	ldrh	r2, [r7, #8]
 8006b02:	8979      	ldrh	r1, [r7, #10]
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 fb38 	bl	8007184 <I2C_RequestMemoryWrite>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d052      	beq.n	8006bc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e081      	b.n	8006c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 fd82 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00d      	beq.n	8006b4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d107      	bne.n	8006b46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e06b      	b.n	8006c22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	781a      	ldrb	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d11b      	bne.n	8006bc0 <HAL_I2C_Mem_Write+0x180>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d017      	beq.n	8006bc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	781a      	ldrb	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1aa      	bne.n	8006b1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fd6e 	bl	80076ae <I2C_WaitOnBTFFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00d      	beq.n	8006bf4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d107      	bne.n	8006bf0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e016      	b.n	8006c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e000      	b.n	8006c22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c20:	2302      	movs	r3, #2
  }
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	00100002 	.word	0x00100002
 8006c30:	ffff0000 	.word	0xffff0000

08006c34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08c      	sub	sp, #48	; 0x30
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	4611      	mov	r1, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	817b      	strh	r3, [r7, #10]
 8006c46:	460b      	mov	r3, r1
 8006c48:	813b      	strh	r3, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c4e:	f7fe f9c1 	bl	8004fd4 <HAL_GetTick>
 8006c52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	f040 8208 	bne.w	8007072 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	2319      	movs	r3, #25
 8006c68:	2201      	movs	r2, #1
 8006c6a:	497b      	ldr	r1, [pc, #492]	; (8006e58 <HAL_I2C_Mem_Read+0x224>)
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fc07 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e1fb      	b.n	8007074 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_I2C_Mem_Read+0x56>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e1f4      	b.n	8007074 <HAL_I2C_Mem_Read+0x440>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d007      	beq.n	8006cb0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2222      	movs	r2, #34	; 0x22
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2240      	movs	r2, #64	; 0x40
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a5b      	ldr	r2, [pc, #364]	; (8006e5c <HAL_I2C_Mem_Read+0x228>)
 8006cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cf2:	88f8      	ldrh	r0, [r7, #6]
 8006cf4:	893a      	ldrh	r2, [r7, #8]
 8006cf6:	8979      	ldrh	r1, [r7, #10]
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	4603      	mov	r3, r0
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fad4 	bl	80072b0 <I2C_RequestMemoryRead>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e1b0      	b.n	8007074 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d113      	bne.n	8006d42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	623b      	str	r3, [r7, #32]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	623b      	str	r3, [r7, #32]
 8006d2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e184      	b.n	800704c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d11b      	bne.n	8006d82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	61fb      	str	r3, [r7, #28]
 8006d6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e164      	b.n	800704c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d11b      	bne.n	8006dc2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006daa:	2300      	movs	r3, #0
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	e144      	b.n	800704c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	617b      	str	r3, [r7, #20]
 8006dd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006dd8:	e138      	b.n	800704c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	f200 80f1 	bhi.w	8006fc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d123      	bne.n	8006e34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fc9d 	bl	8007730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e139      	b.n	8007074 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e32:	e10b      	b.n	800704c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d14e      	bne.n	8006eda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	2200      	movs	r2, #0
 8006e44:	4906      	ldr	r1, [pc, #24]	; (8006e60 <HAL_I2C_Mem_Read+0x22c>)
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 fb1a 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e10e      	b.n	8007074 <HAL_I2C_Mem_Read+0x440>
 8006e56:	bf00      	nop
 8006e58:	00100002 	.word	0x00100002
 8006e5c:	ffff0000 	.word	0xffff0000
 8006e60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ed8:	e0b8      	b.n	800704c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	4966      	ldr	r1, [pc, #408]	; (800707c <HAL_I2C_Mem_Read+0x448>)
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 facb 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0bf      	b.n	8007074 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691a      	ldr	r2, [r3, #16]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	494f      	ldr	r1, [pc, #316]	; (800707c <HAL_I2C_Mem_Read+0x448>)
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 fa9d 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e091      	b.n	8007074 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	691a      	ldr	r2, [r3, #16]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fc4:	e042      	b.n	800704c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 fbb0 	bl	8007730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e04c      	b.n	8007074 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	b2d2      	uxtb	r2, r2
 8006fe6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b04      	cmp	r3, #4
 8007018:	d118      	bne.n	800704c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007036:	3b01      	subs	r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b01      	subs	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007050:	2b00      	cmp	r3, #0
 8007052:	f47f aec2 	bne.w	8006dda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2220      	movs	r2, #32
 800705a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	e000      	b.n	8007074 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007072:	2302      	movs	r3, #2
  }
}
 8007074:	4618      	mov	r0, r3
 8007076:	3728      	adds	r7, #40	; 0x28
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	00010004 	.word	0x00010004

08007080 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af02      	add	r7, sp, #8
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	607a      	str	r2, [r7, #4]
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	460b      	mov	r3, r1
 800708e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b08      	cmp	r3, #8
 800709a:	d006      	beq.n	80070aa <I2C_MasterRequestWrite+0x2a>
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d003      	beq.n	80070aa <I2C_MasterRequestWrite+0x2a>
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070a8:	d108      	bne.n	80070bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	e00b      	b.n	80070d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c0:	2b12      	cmp	r3, #18
 80070c2:	d107      	bne.n	80070d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f9cd 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00d      	beq.n	8007108 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fa:	d103      	bne.n	8007104 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007102:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e035      	b.n	8007174 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007110:	d108      	bne.n	8007124 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007112:	897b      	ldrh	r3, [r7, #10]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	461a      	mov	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007120:	611a      	str	r2, [r3, #16]
 8007122:	e01b      	b.n	800715c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007124:	897b      	ldrh	r3, [r7, #10]
 8007126:	11db      	asrs	r3, r3, #7
 8007128:	b2db      	uxtb	r3, r3
 800712a:	f003 0306 	and.w	r3, r3, #6
 800712e:	b2db      	uxtb	r3, r3
 8007130:	f063 030f 	orn	r3, r3, #15
 8007134:	b2da      	uxtb	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	490e      	ldr	r1, [pc, #56]	; (800717c <I2C_MasterRequestWrite+0xfc>)
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 f9f3 	bl	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e010      	b.n	8007174 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007152:	897b      	ldrh	r3, [r7, #10]
 8007154:	b2da      	uxtb	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4907      	ldr	r1, [pc, #28]	; (8007180 <I2C_MasterRequestWrite+0x100>)
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f9e3 	bl	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e000      	b.n	8007174 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	00010008 	.word	0x00010008
 8007180:	00010002 	.word	0x00010002

08007184 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af02      	add	r7, sp, #8
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	461a      	mov	r2, r3
 8007192:	4603      	mov	r3, r0
 8007194:	817b      	strh	r3, [r7, #10]
 8007196:	460b      	mov	r3, r1
 8007198:	813b      	strh	r3, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 f960 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00d      	beq.n	80071e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d4:	d103      	bne.n	80071de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e05f      	b.n	80072a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071e2:	897b      	ldrh	r3, [r7, #10]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	461a      	mov	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	6a3a      	ldr	r2, [r7, #32]
 80071f6:	492d      	ldr	r1, [pc, #180]	; (80072ac <I2C_RequestMemoryWrite+0x128>)
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f998 	bl	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e04c      	b.n	80072a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007208:	2300      	movs	r3, #0
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800721e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007220:	6a39      	ldr	r1, [r7, #32]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 fa02 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00d      	beq.n	800724a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	2b04      	cmp	r3, #4
 8007234:	d107      	bne.n	8007246 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007244:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e02b      	b.n	80072a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d105      	bne.n	800725c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007250:	893b      	ldrh	r3, [r7, #8]
 8007252:	b2da      	uxtb	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	611a      	str	r2, [r3, #16]
 800725a:	e021      	b.n	80072a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800725c:	893b      	ldrh	r3, [r7, #8]
 800725e:	0a1b      	lsrs	r3, r3, #8
 8007260:	b29b      	uxth	r3, r3
 8007262:	b2da      	uxtb	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800726a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800726c:	6a39      	ldr	r1, [r7, #32]
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 f9dc 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00d      	beq.n	8007296 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	2b04      	cmp	r3, #4
 8007280:	d107      	bne.n	8007292 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007290:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e005      	b.n	80072a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007296:	893b      	ldrh	r3, [r7, #8]
 8007298:	b2da      	uxtb	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	00010002 	.word	0x00010002

080072b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	4608      	mov	r0, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	461a      	mov	r2, r3
 80072be:	4603      	mov	r3, r0
 80072c0:	817b      	strh	r3, [r7, #10]
 80072c2:	460b      	mov	r3, r1
 80072c4:	813b      	strh	r3, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f8c2 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00d      	beq.n	800731e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007310:	d103      	bne.n	800731a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007318:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e0aa      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800731e:	897b      	ldrh	r3, [r7, #10]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800732c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	6a3a      	ldr	r2, [r7, #32]
 8007332:	4952      	ldr	r1, [pc, #328]	; (800747c <I2C_RequestMemoryRead+0x1cc>)
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 f8fa 	bl	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e097      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800735a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735c:	6a39      	ldr	r1, [r7, #32]
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 f964 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00d      	beq.n	8007386 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	2b04      	cmp	r3, #4
 8007370:	d107      	bne.n	8007382 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007380:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e076      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d105      	bne.n	8007398 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800738c:	893b      	ldrh	r3, [r7, #8]
 800738e:	b2da      	uxtb	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	611a      	str	r2, [r3, #16]
 8007396:	e021      	b.n	80073dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007398:	893b      	ldrh	r3, [r7, #8]
 800739a:	0a1b      	lsrs	r3, r3, #8
 800739c:	b29b      	uxth	r3, r3
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a8:	6a39      	ldr	r1, [r7, #32]
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 f93e 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00d      	beq.n	80073d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d107      	bne.n	80073ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e050      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073d2:	893b      	ldrh	r3, [r7, #8]
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073de:	6a39      	ldr	r1, [r7, #32]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f923 	bl	800762c <I2C_WaitOnTXEFlagUntilTimeout>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00d      	beq.n	8007408 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d107      	bne.n	8007404 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007402:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e035      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007416:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	2200      	movs	r2, #0
 8007420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 f82b 	bl	8007480 <I2C_WaitOnFlagUntilTimeout>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00d      	beq.n	800744c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743e:	d103      	bne.n	8007448 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e013      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800744c:	897b      	ldrh	r3, [r7, #10]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	b2da      	uxtb	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	6a3a      	ldr	r2, [r7, #32]
 8007460:	4906      	ldr	r1, [pc, #24]	; (800747c <I2C_RequestMemoryRead+0x1cc>)
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 f863 	bl	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e000      	b.n	8007474 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	00010002 	.word	0x00010002

08007480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	4613      	mov	r3, r2
 800748e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007490:	e025      	b.n	80074de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007498:	d021      	beq.n	80074de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749a:	f7fd fd9b 	bl	8004fd4 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d302      	bcc.n	80074b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d116      	bne.n	80074de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	f043 0220 	orr.w	r2, r3, #32
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e023      	b.n	8007526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	0c1b      	lsrs	r3, r3, #16
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d10d      	bne.n	8007504 <I2C_WaitOnFlagUntilTimeout+0x84>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	43da      	mvns	r2, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4013      	ands	r3, r2
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bf0c      	ite	eq
 80074fa:	2301      	moveq	r3, #1
 80074fc:	2300      	movne	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	461a      	mov	r2, r3
 8007502:	e00c      	b.n	800751e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	43da      	mvns	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4013      	ands	r3, r2
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	bf0c      	ite	eq
 8007516:	2301      	moveq	r3, #1
 8007518:	2300      	movne	r3, #0
 800751a:	b2db      	uxtb	r3, r3
 800751c:	461a      	mov	r2, r3
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	429a      	cmp	r2, r3
 8007522:	d0b6      	beq.n	8007492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800753c:	e051      	b.n	80075e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800754c:	d123      	bne.n	8007596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800755c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f043 0204 	orr.w	r2, r3, #4
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e046      	b.n	8007624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800759c:	d021      	beq.n	80075e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759e:	f7fd fd19 	bl	8004fd4 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d302      	bcc.n	80075b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d116      	bne.n	80075e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f043 0220 	orr.w	r2, r3, #32
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e020      	b.n	8007624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	0c1b      	lsrs	r3, r3, #16
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d10c      	bne.n	8007606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	43da      	mvns	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4013      	ands	r3, r2
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	bf14      	ite	ne
 80075fe:	2301      	movne	r3, #1
 8007600:	2300      	moveq	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	e00b      	b.n	800761e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	43da      	mvns	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4013      	ands	r3, r2
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	bf14      	ite	ne
 8007618:	2301      	movne	r3, #1
 800761a:	2300      	moveq	r3, #0
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d18d      	bne.n	800753e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007638:	e02d      	b.n	8007696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 f8ce 	bl	80077dc <I2C_IsAcknowledgeFailed>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e02d      	b.n	80076a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007650:	d021      	beq.n	8007696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007652:	f7fd fcbf 	bl	8004fd4 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	429a      	cmp	r2, r3
 8007660:	d302      	bcc.n	8007668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d116      	bne.n	8007696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	f043 0220 	orr.w	r2, r3, #32
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e007      	b.n	80076a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a0:	2b80      	cmp	r3, #128	; 0x80
 80076a2:	d1ca      	bne.n	800763a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076ba:	e02d      	b.n	8007718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f88d 	bl	80077dc <I2C_IsAcknowledgeFailed>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e02d      	b.n	8007728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076d2:	d021      	beq.n	8007718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d4:	f7fd fc7e 	bl	8004fd4 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d302      	bcc.n	80076ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d116      	bne.n	8007718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	f043 0220 	orr.w	r2, r3, #32
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e007      	b.n	8007728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b04      	cmp	r3, #4
 8007724:	d1ca      	bne.n	80076bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800773c:	e042      	b.n	80077c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b10      	cmp	r3, #16
 800774a:	d119      	bne.n	8007780 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f06f 0210 	mvn.w	r2, #16
 8007754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2220      	movs	r2, #32
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e029      	b.n	80077d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007780:	f7fd fc28 	bl	8004fd4 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	429a      	cmp	r2, r3
 800778e:	d302      	bcc.n	8007796 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d116      	bne.n	80077c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b0:	f043 0220 	orr.w	r2, r3, #32
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e007      	b.n	80077d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d1b5      	bne.n	800773e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f2:	d11b      	bne.n	800782c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007818:	f043 0204 	orr.w	r2, r3, #4
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800783a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800783c:	b08f      	sub	sp, #60	; 0x3c
 800783e:	af0a      	add	r7, sp, #40	; 0x28
 8007840:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e10f      	b.n	8007a6c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f009 fe7a 	bl	8011560 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2203      	movs	r2, #3
 8007870:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f003 fa8b 	bl	800ada6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	603b      	str	r3, [r7, #0]
 8007896:	687e      	ldr	r6, [r7, #4]
 8007898:	466d      	mov	r5, sp
 800789a:	f106 0410 	add.w	r4, r6, #16
 800789e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80078ae:	1d33      	adds	r3, r6, #4
 80078b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078b2:	6838      	ldr	r0, [r7, #0]
 80078b4:	f003 f962 	bl	800ab7c <USB_CoreInit>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d005      	beq.n	80078ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e0d0      	b.n	8007a6c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2100      	movs	r1, #0
 80078d0:	4618      	mov	r0, r3
 80078d2:	f003 fa79 	bl	800adc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
 80078da:	e04a      	b.n	8007972 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80078dc:	7bfa      	ldrb	r2, [r7, #15]
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	4613      	mov	r3, r2
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	440b      	add	r3, r1
 80078ea:	333d      	adds	r3, #61	; 0x3d
 80078ec:	2201      	movs	r2, #1
 80078ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80078f0:	7bfa      	ldrb	r2, [r7, #15]
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	4613      	mov	r3, r2
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	1a9b      	subs	r3, r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	440b      	add	r3, r1
 80078fe:	333c      	adds	r3, #60	; 0x3c
 8007900:	7bfa      	ldrb	r2, [r7, #15]
 8007902:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007904:	7bfa      	ldrb	r2, [r7, #15]
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	b298      	uxth	r0, r3
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	4613      	mov	r3, r2
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	1a9b      	subs	r3, r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	440b      	add	r3, r1
 8007916:	3342      	adds	r3, #66	; 0x42
 8007918:	4602      	mov	r2, r0
 800791a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800791c:	7bfa      	ldrb	r2, [r7, #15]
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	4613      	mov	r3, r2
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	1a9b      	subs	r3, r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	440b      	add	r3, r1
 800792a:	333f      	adds	r3, #63	; 0x3f
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007930:	7bfa      	ldrb	r2, [r7, #15]
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	4613      	mov	r3, r2
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	1a9b      	subs	r3, r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	440b      	add	r3, r1
 800793e:	3344      	adds	r3, #68	; 0x44
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007944:	7bfa      	ldrb	r2, [r7, #15]
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	4613      	mov	r3, r2
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	1a9b      	subs	r3, r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	440b      	add	r3, r1
 8007952:	3348      	adds	r3, #72	; 0x48
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007958:	7bfa      	ldrb	r2, [r7, #15]
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	4613      	mov	r3, r2
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	1a9b      	subs	r3, r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	440b      	add	r3, r1
 8007966:	3350      	adds	r3, #80	; 0x50
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	3301      	adds	r3, #1
 8007970:	73fb      	strb	r3, [r7, #15]
 8007972:	7bfa      	ldrb	r2, [r7, #15]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	429a      	cmp	r2, r3
 800797a:	d3af      	bcc.n	80078dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
 8007980:	e044      	b.n	8007a0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007982:	7bfa      	ldrb	r2, [r7, #15]
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	4613      	mov	r3, r2
 8007988:	00db      	lsls	r3, r3, #3
 800798a:	1a9b      	subs	r3, r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007998:	7bfa      	ldrb	r2, [r7, #15]
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4613      	mov	r3, r2
 800799e:	00db      	lsls	r3, r3, #3
 80079a0:	1a9b      	subs	r3, r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	440b      	add	r3, r1
 80079a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80079aa:	7bfa      	ldrb	r2, [r7, #15]
 80079ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80079ae:	7bfa      	ldrb	r2, [r7, #15]
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	4613      	mov	r3, r2
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	1a9b      	subs	r3, r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	440b      	add	r3, r1
 80079bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80079c4:	7bfa      	ldrb	r2, [r7, #15]
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	1a9b      	subs	r3, r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	440b      	add	r3, r1
 80079d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80079da:	7bfa      	ldrb	r2, [r7, #15]
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80079f0:	7bfa      	ldrb	r2, [r7, #15]
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	4613      	mov	r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	1a9b      	subs	r3, r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	73fb      	strb	r3, [r7, #15]
 8007a0c:	7bfa      	ldrb	r2, [r7, #15]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d3b5      	bcc.n	8007982 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	603b      	str	r3, [r7, #0]
 8007a1c:	687e      	ldr	r6, [r7, #4]
 8007a1e:	466d      	mov	r5, sp
 8007a20:	f106 0410 	add.w	r4, r6, #16
 8007a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007a30:	e885 0003 	stmia.w	r5, {r0, r1}
 8007a34:	1d33      	adds	r3, r6, #4
 8007a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a38:	6838      	ldr	r0, [r7, #0]
 8007a3a:	f003 fa11 	bl	800ae60 <USB_DevInit>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e00d      	b.n	8007a6c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f004 fa8d 	bl	800bf84 <USB_DevDisconnect>

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_PCD_Start+0x1c>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e020      	b.n	8007ad2 <HAL_PCD_Start+0x5e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d109      	bne.n	8007ab4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d005      	beq.n	8007ab4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f003 f963 	bl	800ad84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f004 fa3d 	bl	800bf42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007ada:	b590      	push	{r4, r7, lr}
 8007adc:	b08d      	sub	sp, #52	; 0x34
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f004 fafb 	bl	800c0ec <USB_GetMode>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f040 839d 	bne.w	8008238 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f004 fa5f 	bl	800bfc6 <USB_ReadInterrupts>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 8393 	beq.w	8008236 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f004 fa56 	bl	800bfc6 <USB_ReadInterrupts>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d107      	bne.n	8007b34 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695a      	ldr	r2, [r3, #20]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f002 0202 	and.w	r2, r2, #2
 8007b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f004 fa44 	bl	800bfc6 <USB_ReadInterrupts>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	d161      	bne.n	8007c0c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0210 	bic.w	r2, r2, #16
 8007b56:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	f003 020f 	and.w	r2, r3, #15
 8007b64:	4613      	mov	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	4413      	add	r3, r2
 8007b74:	3304      	adds	r3, #4
 8007b76:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	0c5b      	lsrs	r3, r3, #17
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d124      	bne.n	8007bce <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d035      	beq.n	8007bfc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	091b      	lsrs	r3, r3, #4
 8007b98:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6a38      	ldr	r0, [r7, #32]
 8007ba4:	f004 f87b 	bl	800bc9e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	091b      	lsrs	r3, r3, #4
 8007bb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bb4:	441a      	add	r2, r3
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	091b      	lsrs	r3, r3, #4
 8007bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bc6:	441a      	add	r2, r3
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	619a      	str	r2, [r3, #24]
 8007bcc:	e016      	b.n	8007bfc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	0c5b      	lsrs	r3, r3, #17
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	2b06      	cmp	r3, #6
 8007bd8:	d110      	bne.n	8007bfc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007be0:	2208      	movs	r2, #8
 8007be2:	4619      	mov	r1, r3
 8007be4:	6a38      	ldr	r0, [r7, #32]
 8007be6:	f004 f85a 	bl	800bc9e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	699a      	ldr	r2, [r3, #24]
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	091b      	lsrs	r3, r3, #4
 8007bf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bf6:	441a      	add	r2, r3
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0210 	orr.w	r2, r2, #16
 8007c0a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f004 f9d8 	bl	800bfc6 <USB_ReadInterrupts>
 8007c16:	4603      	mov	r3, r0
 8007c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c20:	d16e      	bne.n	8007d00 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f004 f9de 	bl	800bfec <USB_ReadDevAllOutEpInterrupt>
 8007c30:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007c32:	e062      	b.n	8007cfa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d057      	beq.n	8007cee <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c44:	b2d2      	uxtb	r2, r2
 8007c46:	4611      	mov	r1, r2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f004 fa03 	bl	800c054 <USB_ReadDevOutEPInterrupt>
 8007c4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00c      	beq.n	8007c74 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c66:	461a      	mov	r2, r3
 8007c68:	2301      	movs	r3, #1
 8007c6a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007c6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fdb0 	bl	80087d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f003 0308 	and.w	r3, r3, #8
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00c      	beq.n	8007c98 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 feaa 	bl	80089ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f003 0310 	and.w	r3, r3, #16
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d008      	beq.n	8007cb4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cae:	461a      	mov	r2, r3
 8007cb0:	2310      	movs	r3, #16
 8007cb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2320      	movs	r3, #32
 8007cce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	085b      	lsrs	r3, r3, #1
 8007cf8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d199      	bne.n	8007c34 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f004 f95e 	bl	800bfc6 <USB_ReadInterrupts>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d14:	f040 80c0 	bne.w	8007e98 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f004 f97f 	bl	800c020 <USB_ReadDevAllInEpInterrupt>
 8007d22:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007d28:	e0b2      	b.n	8007e90 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 80a7 	beq.w	8007e84 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3c:	b2d2      	uxtb	r2, r2
 8007d3e:	4611      	mov	r1, r2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f004 f9a5 	bl	800c090 <USB_ReadDevInEPInterrupt>
 8007d46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d057      	beq.n	8007e02 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	f003 030f 	and.w	r3, r3, #15
 8007d58:	2201      	movs	r2, #1
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	43db      	mvns	r3, r3
 8007d6c:	69f9      	ldr	r1, [r7, #28]
 8007d6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d72:	4013      	ands	r3, r2
 8007d74:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d82:	461a      	mov	r2, r3
 8007d84:	2301      	movs	r3, #1
 8007d86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d132      	bne.n	8007df6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d94:	4613      	mov	r3, r2
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	1a9b      	subs	r3, r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	3348      	adds	r3, #72	; 0x48
 8007da0:	6819      	ldr	r1, [r3, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da6:	4613      	mov	r3, r2
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4403      	add	r3, r0
 8007db0:	3344      	adds	r3, #68	; 0x44
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4419      	add	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dba:	4613      	mov	r3, r2
 8007dbc:	00db      	lsls	r3, r3, #3
 8007dbe:	1a9b      	subs	r3, r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4403      	add	r3, r0
 8007dc4:	3348      	adds	r3, #72	; 0x48
 8007dc6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d113      	bne.n	8007df6 <HAL_PCD_IRQHandler+0x31c>
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	1a9b      	subs	r3, r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	3350      	adds	r3, #80	; 0x50
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d108      	bne.n	8007df6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6818      	ldr	r0, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007dee:	461a      	mov	r2, r3
 8007df0:	2101      	movs	r1, #1
 8007df2:	f004 f9ad 	bl	800c150 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f009 fc3e 	bl	801167e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e18:	461a      	mov	r2, r3
 8007e1a:	2308      	movs	r3, #8
 8007e1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f003 0310 	and.w	r3, r3, #16
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d008      	beq.n	8007e3a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e34:	461a      	mov	r2, r3
 8007e36:	2310      	movs	r3, #16
 8007e38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	461a      	mov	r2, r3
 8007e52:	2340      	movs	r3, #64	; 0x40
 8007e54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d008      	beq.n	8007e72 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	2302      	movs	r3, #2
 8007e70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fc1b 	bl	80086ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	3301      	adds	r3, #1
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	085b      	lsrs	r3, r3, #1
 8007e8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f47f af49 	bne.w	8007d2a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f004 f892 	bl	800bfc6 <USB_ReadInterrupts>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eac:	d122      	bne.n	8007ef4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ebc:	f023 0301 	bic.w	r3, r3, #1
 8007ec0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d108      	bne.n	8007ede <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fe26 	bl	8008b28 <HAL_PCDEx_LPM_Callback>
 8007edc:	e002      	b.n	8007ee4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f009 fc44 	bl	801176c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695a      	ldr	r2, [r3, #20]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007ef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f004 f864 	bl	800bfc6 <USB_ReadInterrupts>
 8007efe:	4603      	mov	r3, r0
 8007f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f08:	d112      	bne.n	8007f30 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d102      	bne.n	8007f20 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f009 fc00 	bl	8011720 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	695a      	ldr	r2, [r3, #20]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007f2e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f004 f846 	bl	800bfc6 <USB_ReadInterrupts>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f44:	f040 80c7 	bne.w	80080d6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f56:	f023 0301 	bic.w	r3, r3, #1
 8007f5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2110      	movs	r1, #16
 8007f62:	4618      	mov	r0, r3
 8007f64:	f003 f8e0 	bl	800b128 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f6c:	e056      	b.n	800801c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f92:	0151      	lsls	r1, r2, #5
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	440a      	add	r2, r1
 8007f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fa0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fb2:	0151      	lsls	r1, r2, #5
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	440a      	add	r2, r1
 8007fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fd4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe6:	0151      	lsls	r1, r2, #5
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	440a      	add	r2, r1
 8007fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ff4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008010:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008014:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	3301      	adds	r3, #1
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008022:	429a      	cmp	r2, r3
 8008024:	d3a3      	bcc.n	8007f6e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008034:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008038:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803e:	2b00      	cmp	r3, #0
 8008040:	d016      	beq.n	8008070 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800804c:	69fa      	ldr	r2, [r7, #28]
 800804e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008052:	f043 030b 	orr.w	r3, r3, #11
 8008056:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008062:	69fa      	ldr	r2, [r7, #28]
 8008064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008068:	f043 030b 	orr.w	r3, r3, #11
 800806c:	6453      	str	r3, [r2, #68]	; 0x44
 800806e:	e015      	b.n	800809c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	69fa      	ldr	r2, [r7, #28]
 800807a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800807e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008082:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008086:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	69fa      	ldr	r2, [r7, #28]
 8008092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008096:	f043 030b 	orr.w	r3, r3, #11
 800809a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80080ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6818      	ldr	r0, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80080c0:	461a      	mov	r2, r3
 80080c2:	f004 f845 	bl	800c150 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695a      	ldr	r2, [r3, #20]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80080d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4618      	mov	r0, r3
 80080dc:	f003 ff73 	bl	800bfc6 <USB_ReadInterrupts>
 80080e0:	4603      	mov	r3, r0
 80080e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ea:	d124      	bne.n	8008136 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f004 f809 	bl	800c108 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f003 f871 	bl	800b1e2 <USB_GetDevSpeed>
 8008100:	4603      	mov	r3, r0
 8008102:	461a      	mov	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681c      	ldr	r4, [r3, #0]
 800810c:	f001 f958 	bl	80093c0 <HAL_RCC_GetHCLKFreq>
 8008110:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008116:	b2db      	uxtb	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	4620      	mov	r0, r4
 800811c:	f002 fd90 	bl	800ac40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f009 fad4 	bl	80116ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	695a      	ldr	r2, [r3, #20]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008134:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4618      	mov	r0, r3
 800813c:	f003 ff43 	bl	800bfc6 <USB_ReadInterrupts>
 8008140:	4603      	mov	r3, r0
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b08      	cmp	r3, #8
 8008148:	d10a      	bne.n	8008160 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f009 fab1 	bl	80116b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	695a      	ldr	r2, [r3, #20]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f002 0208 	and.w	r2, r2, #8
 800815e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4618      	mov	r0, r3
 8008166:	f003 ff2e 	bl	800bfc6 <USB_ReadInterrupts>
 800816a:	4603      	mov	r3, r0
 800816c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008174:	d10f      	bne.n	8008196 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	b2db      	uxtb	r3, r3
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f009 fb13 	bl	80117ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	695a      	ldr	r2, [r3, #20]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4618      	mov	r0, r3
 800819c:	f003 ff13 	bl	800bfc6 <USB_ReadInterrupts>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081aa:	d10f      	bne.n	80081cc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f009 fae6 	bl	8011788 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	695a      	ldr	r2, [r3, #20]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80081ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f003 fef8 	bl	800bfc6 <USB_ReadInterrupts>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e0:	d10a      	bne.n	80081f8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f009 faf4 	bl	80117d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695a      	ldr	r2, [r3, #20]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80081f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f003 fee2 	bl	800bfc6 <USB_ReadInterrupts>
 8008202:	4603      	mov	r3, r0
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b04      	cmp	r3, #4
 800820a:	d115      	bne.n	8008238 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f009 fae4 	bl	80117ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6859      	ldr	r1, [r3, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	430a      	orrs	r2, r1
 8008232:	605a      	str	r2, [r3, #4]
 8008234:	e000      	b.n	8008238 <HAL_PCD_IRQHandler+0x75e>
      return;
 8008236:	bf00      	nop
    }
  }
}
 8008238:	3734      	adds	r7, #52	; 0x34
 800823a:	46bd      	mov	sp, r7
 800823c:	bd90      	pop	{r4, r7, pc}

0800823e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	460b      	mov	r3, r1
 8008248:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008250:	2b01      	cmp	r3, #1
 8008252:	d101      	bne.n	8008258 <HAL_PCD_SetAddress+0x1a>
 8008254:	2302      	movs	r3, #2
 8008256:	e013      	b.n	8008280 <HAL_PCD_SetAddress+0x42>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	78fa      	ldrb	r2, [r7, #3]
 800826e:	4611      	mov	r1, r2
 8008270:	4618      	mov	r0, r3
 8008272:	f003 fe40 	bl	800bef6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	4608      	mov	r0, r1
 8008292:	4611      	mov	r1, r2
 8008294:	461a      	mov	r2, r3
 8008296:	4603      	mov	r3, r0
 8008298:	70fb      	strb	r3, [r7, #3]
 800829a:	460b      	mov	r3, r1
 800829c:	803b      	strh	r3, [r7, #0]
 800829e:	4613      	mov	r3, r2
 80082a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80082a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	da0f      	bge.n	80082ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082ae:	78fb      	ldrb	r3, [r7, #3]
 80082b0:	f003 020f 	and.w	r2, r3, #15
 80082b4:	4613      	mov	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	3338      	adds	r3, #56	; 0x38
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	4413      	add	r3, r2
 80082c2:	3304      	adds	r3, #4
 80082c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2201      	movs	r2, #1
 80082ca:	705a      	strb	r2, [r3, #1]
 80082cc:	e00f      	b.n	80082ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	f003 020f 	and.w	r2, r3, #15
 80082d4:	4613      	mov	r3, r2
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	1a9b      	subs	r3, r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	4413      	add	r3, r2
 80082e4:	3304      	adds	r3, #4
 80082e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	f003 030f 	and.w	r3, r3, #15
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80082fa:	883a      	ldrh	r2, [r7, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	78ba      	ldrb	r2, [r7, #2]
 8008304:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d004      	beq.n	8008318 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008318:	78bb      	ldrb	r3, [r7, #2]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d102      	bne.n	8008324 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800832a:	2b01      	cmp	r3, #1
 800832c:	d101      	bne.n	8008332 <HAL_PCD_EP_Open+0xaa>
 800832e:	2302      	movs	r3, #2
 8008330:	e00e      	b.n	8008350 <HAL_PCD_EP_Open+0xc8>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68f9      	ldr	r1, [r7, #12]
 8008340:	4618      	mov	r0, r3
 8008342:	f002 ff73 	bl	800b22c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800834e:	7afb      	ldrb	r3, [r7, #11]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008368:	2b00      	cmp	r3, #0
 800836a:	da0f      	bge.n	800838c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800836c:	78fb      	ldrb	r3, [r7, #3]
 800836e:	f003 020f 	and.w	r2, r3, #15
 8008372:	4613      	mov	r3, r2
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	3338      	adds	r3, #56	; 0x38
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	4413      	add	r3, r2
 8008380:	3304      	adds	r3, #4
 8008382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2201      	movs	r2, #1
 8008388:	705a      	strb	r2, [r3, #1]
 800838a:	e00f      	b.n	80083ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800838c:	78fb      	ldrb	r3, [r7, #3]
 800838e:	f003 020f 	and.w	r2, r3, #15
 8008392:	4613      	mov	r3, r2
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	1a9b      	subs	r3, r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	4413      	add	r3, r2
 80083a2:	3304      	adds	r3, #4
 80083a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80083ac:	78fb      	ldrb	r3, [r7, #3]
 80083ae:	f003 030f 	and.w	r3, r3, #15
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d101      	bne.n	80083c6 <HAL_PCD_EP_Close+0x6e>
 80083c2:	2302      	movs	r3, #2
 80083c4:	e00e      	b.n	80083e4 <HAL_PCD_EP_Close+0x8c>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f002 ffb1 	bl	800b33c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	607a      	str	r2, [r7, #4]
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	460b      	mov	r3, r1
 80083fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	f003 020f 	and.w	r2, r3, #15
 8008402:	4613      	mov	r3, r2
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	1a9b      	subs	r3, r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	4413      	add	r3, r2
 8008412:	3304      	adds	r3, #4
 8008414:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2200      	movs	r2, #0
 8008426:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2200      	movs	r2, #0
 800842c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800842e:	7afb      	ldrb	r3, [r7, #11]
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	b2da      	uxtb	r2, r3
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d102      	bne.n	8008448 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008448:	7afb      	ldrb	r3, [r7, #11]
 800844a:	f003 030f 	and.w	r3, r3, #15
 800844e:	2b00      	cmp	r3, #0
 8008450:	d109      	bne.n	8008466 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	6979      	ldr	r1, [r7, #20]
 8008460:	f003 fa8c 	bl	800b97c <USB_EP0StartXfer>
 8008464:	e008      	b.n	8008478 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	b2db      	uxtb	r3, r3
 8008470:	461a      	mov	r2, r3
 8008472:	6979      	ldr	r1, [r7, #20]
 8008474:	f003 f83e 	bl	800b4f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	460b      	mov	r3, r1
 800848c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800848e:	78fb      	ldrb	r3, [r7, #3]
 8008490:	f003 020f 	and.w	r2, r3, #15
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	00db      	lsls	r3, r3, #3
 800849a:	1a9b      	subs	r3, r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80084a4:	681b      	ldr	r3, [r3, #0]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
 80084be:	460b      	mov	r3, r1
 80084c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084c2:	7afb      	ldrb	r3, [r7, #11]
 80084c4:	f003 020f 	and.w	r2, r3, #15
 80084c8:	4613      	mov	r3, r2
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	1a9b      	subs	r3, r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	3338      	adds	r3, #56	; 0x38
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	4413      	add	r3, r2
 80084d6:	3304      	adds	r3, #4
 80084d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2201      	movs	r2, #1
 80084f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084f2:	7afb      	ldrb	r3, [r7, #11]
 80084f4:	f003 030f 	and.w	r3, r3, #15
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d102      	bne.n	800850c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800850c:	7afb      	ldrb	r3, [r7, #11]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	2b00      	cmp	r3, #0
 8008514:	d109      	bne.n	800852a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	b2db      	uxtb	r3, r3
 8008520:	461a      	mov	r2, r3
 8008522:	6979      	ldr	r1, [r7, #20]
 8008524:	f003 fa2a 	bl	800b97c <USB_EP0StartXfer>
 8008528:	e008      	b.n	800853c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6818      	ldr	r0, [r3, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	461a      	mov	r2, r3
 8008536:	6979      	ldr	r1, [r7, #20]
 8008538:	f002 ffdc 	bl	800b4f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008552:	78fb      	ldrb	r3, [r7, #3]
 8008554:	f003 020f 	and.w	r2, r3, #15
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	429a      	cmp	r2, r3
 800855e:	d901      	bls.n	8008564 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e050      	b.n	8008606 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008568:	2b00      	cmp	r3, #0
 800856a:	da0f      	bge.n	800858c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	f003 020f 	and.w	r2, r3, #15
 8008572:	4613      	mov	r3, r2
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	3338      	adds	r3, #56	; 0x38
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	4413      	add	r3, r2
 8008580:	3304      	adds	r3, #4
 8008582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2201      	movs	r2, #1
 8008588:	705a      	strb	r2, [r3, #1]
 800858a:	e00d      	b.n	80085a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	4613      	mov	r3, r2
 8008590:	00db      	lsls	r3, r3, #3
 8008592:	1a9b      	subs	r3, r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	3304      	adds	r3, #4
 80085a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	f003 030f 	and.w	r3, r3, #15
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_PCD_EP_SetStall+0x82>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e01e      	b.n	8008606 <HAL_PCD_EP_SetStall+0xc0>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68f9      	ldr	r1, [r7, #12]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f003 fbb9 	bl	800bd4e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80085dc:	78fb      	ldrb	r3, [r7, #3]
 80085de:	f003 030f 	and.w	r3, r3, #15
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10a      	bne.n	80085fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	b2d9      	uxtb	r1, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80085f6:	461a      	mov	r2, r3
 80085f8:	f003 fdaa 	bl	800c150 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	f003 020f 	and.w	r2, r3, #15
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	429a      	cmp	r2, r3
 8008626:	d901      	bls.n	800862c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e042      	b.n	80086b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800862c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008630:	2b00      	cmp	r3, #0
 8008632:	da0f      	bge.n	8008654 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	f003 020f 	and.w	r2, r3, #15
 800863a:	4613      	mov	r3, r2
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	3338      	adds	r3, #56	; 0x38
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	4413      	add	r3, r2
 8008648:	3304      	adds	r3, #4
 800864a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	705a      	strb	r2, [r3, #1]
 8008652:	e00f      	b.n	8008674 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	f003 020f 	and.w	r2, r3, #15
 800865a:	4613      	mov	r3, r2
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	4413      	add	r3, r2
 800866a:	3304      	adds	r3, #4
 800866c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	b2da      	uxtb	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_PCD_EP_ClrStall+0x86>
 8008690:	2302      	movs	r3, #2
 8008692:	e00e      	b.n	80086b2 <HAL_PCD_EP_ClrStall+0xa4>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68f9      	ldr	r1, [r7, #12]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f003 fbc1 	bl	800be2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b08a      	sub	sp, #40	; 0x28
 80086be:	af02      	add	r7, sp, #8
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4613      	mov	r3, r2
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	1a9b      	subs	r3, r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	3338      	adds	r3, #56	; 0x38
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	3304      	adds	r3, #4
 80086e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d901      	bls.n	80086f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e06c      	b.n	80087cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	695a      	ldr	r2, [r3, #20]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	429a      	cmp	r2, r3
 8008706:	d902      	bls.n	800870e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	3303      	adds	r3, #3
 8008712:	089b      	lsrs	r3, r3, #2
 8008714:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008716:	e02b      	b.n	8008770 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	695a      	ldr	r2, [r3, #20]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	69fa      	ldr	r2, [r7, #28]
 800872a:	429a      	cmp	r2, r3
 800872c:	d902      	bls.n	8008734 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	3303      	adds	r3, #3
 8008738:	089b      	lsrs	r3, r3, #2
 800873a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	68d9      	ldr	r1, [r3, #12]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	b2da      	uxtb	r2, r3
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800874c:	b2db      	uxtb	r3, r3
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	4603      	mov	r3, r0
 8008752:	6978      	ldr	r0, [r7, #20]
 8008754:	f003 fa65 	bl	800bc22 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	441a      	add	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	699a      	ldr	r2, [r3, #24]
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	441a      	add	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	b29b      	uxth	r3, r3
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	429a      	cmp	r2, r3
 8008784:	d809      	bhi.n	800879a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800878e:	429a      	cmp	r2, r3
 8008790:	d203      	bcs.n	800879a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1be      	bne.n	8008718 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	695a      	ldr	r2, [r3, #20]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d811      	bhi.n	80087ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	f003 030f 	and.w	r3, r3, #15
 80087ac:	2201      	movs	r2, #1
 80087ae:	fa02 f303 	lsl.w	r3, r2, r3
 80087b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	43db      	mvns	r3, r3
 80087c0:	6939      	ldr	r1, [r7, #16]
 80087c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087c6:	4013      	ands	r3, r2
 80087c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	333c      	adds	r3, #60	; 0x3c
 80087ec:	3304      	adds	r3, #4
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b01      	cmp	r3, #1
 8008808:	f040 80a0 	bne.w	800894c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f003 0308 	and.w	r3, r3, #8
 8008812:	2b00      	cmp	r3, #0
 8008814:	d015      	beq.n	8008842 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	4a72      	ldr	r2, [pc, #456]	; (80089e4 <PCD_EP_OutXfrComplete_int+0x210>)
 800881a:	4293      	cmp	r3, r2
 800881c:	f240 80dd 	bls.w	80089da <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 80d7 	beq.w	80089da <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008838:	461a      	mov	r2, r3
 800883a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800883e:	6093      	str	r3, [r2, #8]
 8008840:	e0cb      	b.n	80089da <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f003 0320 	and.w	r3, r3, #32
 8008848:	2b00      	cmp	r3, #0
 800884a:	d009      	beq.n	8008860 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008858:	461a      	mov	r2, r3
 800885a:	2320      	movs	r3, #32
 800885c:	6093      	str	r3, [r2, #8]
 800885e:	e0bc      	b.n	80089da <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008866:	2b00      	cmp	r3, #0
 8008868:	f040 80b7 	bne.w	80089da <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4a5d      	ldr	r2, [pc, #372]	; (80089e4 <PCD_EP_OutXfrComplete_int+0x210>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d90f      	bls.n	8008894 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888a:	461a      	mov	r2, r3
 800888c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008890:	6093      	str	r3, [r2, #8]
 8008892:	e0a2      	b.n	80089da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008894:	6879      	ldr	r1, [r7, #4]
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	4613      	mov	r3, r2
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	440b      	add	r3, r1
 80088a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80088a6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	0159      	lsls	r1, r3, #5
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	440b      	add	r3, r1
 80088b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80088ba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	4613      	mov	r3, r2
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4403      	add	r3, r0
 80088ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80088ce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80088d0:	6879      	ldr	r1, [r7, #4]
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	4613      	mov	r3, r2
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	1a9b      	subs	r3, r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	440b      	add	r3, r1
 80088de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80088e2:	6819      	ldr	r1, [r3, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	4613      	mov	r3, r2
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4403      	add	r3, r0
 80088f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4419      	add	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	4613      	mov	r3, r2
 8008900:	00db      	lsls	r3, r3, #3
 8008902:	1a9b      	subs	r3, r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4403      	add	r3, r0
 8008908:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800890c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d114      	bne.n	800893e <PCD_EP_OutXfrComplete_int+0x16a>
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	4613      	mov	r3, r2
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	1a9b      	subs	r3, r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	440b      	add	r3, r1
 8008922:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d108      	bne.n	800893e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6818      	ldr	r0, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008936:	461a      	mov	r2, r3
 8008938:	2101      	movs	r1, #1
 800893a:	f003 fc09 	bl	800c150 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	b2db      	uxtb	r3, r3
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f008 fe7f 	bl	8011648 <HAL_PCD_DataOutStageCallback>
 800894a:	e046      	b.n	80089da <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4a26      	ldr	r2, [pc, #152]	; (80089e8 <PCD_EP_OutXfrComplete_int+0x214>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d124      	bne.n	800899e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896a:	461a      	mov	r2, r3
 800896c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008970:	6093      	str	r3, [r2, #8]
 8008972:	e032      	b.n	80089da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f003 0320 	and.w	r3, r3, #32
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	4413      	add	r3, r2
 8008986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898a:	461a      	mov	r2, r3
 800898c:	2320      	movs	r3, #32
 800898e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f008 fe56 	bl	8011648 <HAL_PCD_DataOutStageCallback>
 800899c:	e01d      	b.n	80089da <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d114      	bne.n	80089ce <PCD_EP_OutXfrComplete_int+0x1fa>
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	4613      	mov	r3, r2
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	440b      	add	r3, r1
 80089b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d108      	bne.n	80089ce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80089c6:	461a      	mov	r2, r3
 80089c8:	2100      	movs	r1, #0
 80089ca:	f003 fbc1 	bl	800c150 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f008 fe37 	bl	8011648 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	4f54300a 	.word	0x4f54300a
 80089e8:	4f54310a 	.word	0x4f54310a

080089ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	333c      	adds	r3, #60	; 0x3c
 8008a04:	3304      	adds	r3, #4
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4a15      	ldr	r2, [pc, #84]	; (8008a74 <PCD_EP_OutSetupPacket_int+0x88>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d90e      	bls.n	8008a40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d009      	beq.n	8008a40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f008 fdef 	bl	8011624 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4a0a      	ldr	r2, [pc, #40]	; (8008a74 <PCD_EP_OutSetupPacket_int+0x88>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d90c      	bls.n	8008a68 <PCD_EP_OutSetupPacket_int+0x7c>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d108      	bne.n	8008a68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008a60:	461a      	mov	r2, r3
 8008a62:	2101      	movs	r1, #1
 8008a64:	f003 fb74 	bl	800c150 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	4f54300a 	.word	0x4f54300a

08008a78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
 8008a84:	4613      	mov	r3, r2
 8008a86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d107      	bne.n	8008aa6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008a96:	883b      	ldrh	r3, [r7, #0]
 8008a98:	0419      	lsls	r1, r3, #16
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8008aa4:	e028      	b.n	8008af8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aac:	0c1b      	lsrs	r3, r3, #16
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73fb      	strb	r3, [r7, #15]
 8008ab8:	e00d      	b.n	8008ad6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	3340      	adds	r3, #64	; 0x40
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	0c1b      	lsrs	r3, r3, #16
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	4413      	add	r3, r2
 8008ace:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	73fb      	strb	r3, [r7, #15]
 8008ad6:	7bfa      	ldrb	r2, [r7, #15]
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d3ec      	bcc.n	8008aba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008ae0:	883b      	ldrh	r3, [r7, #0]
 8008ae2:	0418      	lsls	r0, r3, #16
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6819      	ldr	r1, [r3, #0]
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	4302      	orrs	r2, r0
 8008af0:	3340      	adds	r3, #64	; 0x40
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	887a      	ldrh	r2, [r7, #2]
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e264      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d075      	beq.n	8008c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b5e:	4ba3      	ldr	r3, [pc, #652]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f003 030c 	and.w	r3, r3, #12
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d00c      	beq.n	8008b84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b6a:	4ba0      	ldr	r3, [pc, #640]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b72:	2b08      	cmp	r3, #8
 8008b74:	d112      	bne.n	8008b9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b76:	4b9d      	ldr	r3, [pc, #628]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b82:	d10b      	bne.n	8008b9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b84:	4b99      	ldr	r3, [pc, #612]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d05b      	beq.n	8008c48 <HAL_RCC_OscConfig+0x108>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d157      	bne.n	8008c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e23f      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba4:	d106      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x74>
 8008ba6:	4b91      	ldr	r3, [pc, #580]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a90      	ldr	r2, [pc, #576]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	e01d      	b.n	8008bf0 <HAL_RCC_OscConfig+0xb0>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bbc:	d10c      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x98>
 8008bbe:	4b8b      	ldr	r3, [pc, #556]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a8a      	ldr	r2, [pc, #552]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	4b88      	ldr	r3, [pc, #544]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a87      	ldr	r2, [pc, #540]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	e00b      	b.n	8008bf0 <HAL_RCC_OscConfig+0xb0>
 8008bd8:	4b84      	ldr	r3, [pc, #528]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a83      	ldr	r2, [pc, #524]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	4b81      	ldr	r3, [pc, #516]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a80      	ldr	r2, [pc, #512]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d013      	beq.n	8008c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf8:	f7fc f9ec 	bl	8004fd4 <HAL_GetTick>
 8008bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bfe:	e008      	b.n	8008c12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c00:	f7fc f9e8 	bl	8004fd4 <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	2b64      	cmp	r3, #100	; 0x64
 8008c0c:	d901      	bls.n	8008c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e204      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c12:	4b76      	ldr	r3, [pc, #472]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0f0      	beq.n	8008c00 <HAL_RCC_OscConfig+0xc0>
 8008c1e:	e014      	b.n	8008c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c20:	f7fc f9d8 	bl	8004fd4 <HAL_GetTick>
 8008c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c26:	e008      	b.n	8008c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c28:	f7fc f9d4 	bl	8004fd4 <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b64      	cmp	r3, #100	; 0x64
 8008c34:	d901      	bls.n	8008c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e1f0      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c3a:	4b6c      	ldr	r3, [pc, #432]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f0      	bne.n	8008c28 <HAL_RCC_OscConfig+0xe8>
 8008c46:	e000      	b.n	8008c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d063      	beq.n	8008d1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c56:	4b65      	ldr	r3, [pc, #404]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f003 030c 	and.w	r3, r3, #12
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c62:	4b62      	ldr	r3, [pc, #392]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c6a:	2b08      	cmp	r3, #8
 8008c6c:	d11c      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c6e:	4b5f      	ldr	r3, [pc, #380]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d116      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c7a:	4b5c      	ldr	r3, [pc, #368]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d005      	beq.n	8008c92 <HAL_RCC_OscConfig+0x152>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d001      	beq.n	8008c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e1c4      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c92:	4b56      	ldr	r3, [pc, #344]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	4952      	ldr	r1, [pc, #328]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ca6:	e03a      	b.n	8008d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d020      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cb0:	4b4f      	ldr	r3, [pc, #316]	; (8008df0 <HAL_RCC_OscConfig+0x2b0>)
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb6:	f7fc f98d 	bl	8004fd4 <HAL_GetTick>
 8008cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cbc:	e008      	b.n	8008cd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cbe:	f7fc f989 	bl	8004fd4 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d901      	bls.n	8008cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e1a5      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cd0:	4b46      	ldr	r3, [pc, #280]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0f0      	beq.n	8008cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cdc:	4b43      	ldr	r3, [pc, #268]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	4940      	ldr	r1, [pc, #256]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	600b      	str	r3, [r1, #0]
 8008cf0:	e015      	b.n	8008d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cf2:	4b3f      	ldr	r3, [pc, #252]	; (8008df0 <HAL_RCC_OscConfig+0x2b0>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf8:	f7fc f96c 	bl	8004fd4 <HAL_GetTick>
 8008cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cfe:	e008      	b.n	8008d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d00:	f7fc f968 	bl	8004fd4 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d901      	bls.n	8008d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e184      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d12:	4b36      	ldr	r3, [pc, #216]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1f0      	bne.n	8008d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0308 	and.w	r3, r3, #8
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d030      	beq.n	8008d8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d016      	beq.n	8008d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d32:	4b30      	ldr	r3, [pc, #192]	; (8008df4 <HAL_RCC_OscConfig+0x2b4>)
 8008d34:	2201      	movs	r2, #1
 8008d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d38:	f7fc f94c 	bl	8004fd4 <HAL_GetTick>
 8008d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d3e:	e008      	b.n	8008d52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d40:	f7fc f948 	bl	8004fd4 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d901      	bls.n	8008d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e164      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d52:	4b26      	ldr	r3, [pc, #152]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0f0      	beq.n	8008d40 <HAL_RCC_OscConfig+0x200>
 8008d5e:	e015      	b.n	8008d8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d60:	4b24      	ldr	r3, [pc, #144]	; (8008df4 <HAL_RCC_OscConfig+0x2b4>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d66:	f7fc f935 	bl	8004fd4 <HAL_GetTick>
 8008d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d6c:	e008      	b.n	8008d80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d6e:	f7fc f931 	bl	8004fd4 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e14d      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d80:	4b1a      	ldr	r3, [pc, #104]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1f0      	bne.n	8008d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 80a0 	beq.w	8008eda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d9e:	4b13      	ldr	r3, [pc, #76]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10f      	bne.n	8008dca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008daa:	2300      	movs	r3, #0
 8008dac:	60bb      	str	r3, [r7, #8]
 8008dae:	4b0f      	ldr	r3, [pc, #60]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db2:	4a0e      	ldr	r2, [pc, #56]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008db8:	6413      	str	r3, [r2, #64]	; 0x40
 8008dba:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <HAL_RCC_OscConfig+0x2ac>)
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dc2:	60bb      	str	r3, [r7, #8]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dca:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <HAL_RCC_OscConfig+0x2b8>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d121      	bne.n	8008e1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dd6:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <HAL_RCC_OscConfig+0x2b8>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a07      	ldr	r2, [pc, #28]	; (8008df8 <HAL_RCC_OscConfig+0x2b8>)
 8008ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008de2:	f7fc f8f7 	bl	8004fd4 <HAL_GetTick>
 8008de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008de8:	e011      	b.n	8008e0e <HAL_RCC_OscConfig+0x2ce>
 8008dea:	bf00      	nop
 8008dec:	40023800 	.word	0x40023800
 8008df0:	42470000 	.word	0x42470000
 8008df4:	42470e80 	.word	0x42470e80
 8008df8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dfc:	f7fc f8ea 	bl	8004fd4 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d901      	bls.n	8008e0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e106      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e0e:	4b85      	ldr	r3, [pc, #532]	; (8009024 <HAL_RCC_OscConfig+0x4e4>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0f0      	beq.n	8008dfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d106      	bne.n	8008e30 <HAL_RCC_OscConfig+0x2f0>
 8008e22:	4b81      	ldr	r3, [pc, #516]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e26:	4a80      	ldr	r2, [pc, #512]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008e28:	f043 0301 	orr.w	r3, r3, #1
 8008e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008e2e:	e01c      	b.n	8008e6a <HAL_RCC_OscConfig+0x32a>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	2b05      	cmp	r3, #5
 8008e36:	d10c      	bne.n	8008e52 <HAL_RCC_OscConfig+0x312>
 8008e38:	4b7b      	ldr	r3, [pc, #492]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e3c:	4a7a      	ldr	r2, [pc, #488]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008e3e:	f043 0304 	orr.w	r3, r3, #4
 8008e42:	6713      	str	r3, [r2, #112]	; 0x70
 8008e44:	4b78      	ldr	r3, [pc, #480]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e48:	4a77      	ldr	r2, [pc, #476]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008e4a:	f043 0301 	orr.w	r3, r3, #1
 8008e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e50:	e00b      	b.n	8008e6a <HAL_RCC_OscConfig+0x32a>
 8008e52:	4b75      	ldr	r3, [pc, #468]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e56:	4a74      	ldr	r2, [pc, #464]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008e58:	f023 0301 	bic.w	r3, r3, #1
 8008e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8008e5e:	4b72      	ldr	r3, [pc, #456]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e62:	4a71      	ldr	r2, [pc, #452]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008e64:	f023 0304 	bic.w	r3, r3, #4
 8008e68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d015      	beq.n	8008e9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e72:	f7fc f8af 	bl	8004fd4 <HAL_GetTick>
 8008e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e78:	e00a      	b.n	8008e90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e7a:	f7fc f8ab 	bl	8004fd4 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d901      	bls.n	8008e90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e0c5      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e90:	4b65      	ldr	r3, [pc, #404]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0ee      	beq.n	8008e7a <HAL_RCC_OscConfig+0x33a>
 8008e9c:	e014      	b.n	8008ec8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e9e:	f7fc f899 	bl	8004fd4 <HAL_GetTick>
 8008ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ea4:	e00a      	b.n	8008ebc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ea6:	f7fc f895 	bl	8004fd4 <HAL_GetTick>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d901      	bls.n	8008ebc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e0af      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ebc:	4b5a      	ldr	r3, [pc, #360]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec0:	f003 0302 	and.w	r3, r3, #2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1ee      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d105      	bne.n	8008eda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ece:	4b56      	ldr	r3, [pc, #344]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed2:	4a55      	ldr	r2, [pc, #340]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ed8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 809b 	beq.w	800901a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ee4:	4b50      	ldr	r3, [pc, #320]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f003 030c 	and.w	r3, r3, #12
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d05c      	beq.n	8008faa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d141      	bne.n	8008f7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ef8:	4b4c      	ldr	r3, [pc, #304]	; (800902c <HAL_RCC_OscConfig+0x4ec>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008efe:	f7fc f869 	bl	8004fd4 <HAL_GetTick>
 8008f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f04:	e008      	b.n	8008f18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f06:	f7fc f865 	bl	8004fd4 <HAL_GetTick>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d901      	bls.n	8008f18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e081      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f18:	4b43      	ldr	r3, [pc, #268]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1f0      	bne.n	8008f06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	69da      	ldr	r2, [r3, #28]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	019b      	lsls	r3, r3, #6
 8008f34:	431a      	orrs	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3a:	085b      	lsrs	r3, r3, #1
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	041b      	lsls	r3, r3, #16
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f46:	061b      	lsls	r3, r3, #24
 8008f48:	4937      	ldr	r1, [pc, #220]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f4e:	4b37      	ldr	r3, [pc, #220]	; (800902c <HAL_RCC_OscConfig+0x4ec>)
 8008f50:	2201      	movs	r2, #1
 8008f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f54:	f7fc f83e 	bl	8004fd4 <HAL_GetTick>
 8008f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f5a:	e008      	b.n	8008f6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f5c:	f7fc f83a 	bl	8004fd4 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e056      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f6e:	4b2e      	ldr	r3, [pc, #184]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0f0      	beq.n	8008f5c <HAL_RCC_OscConfig+0x41c>
 8008f7a:	e04e      	b.n	800901a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f7c:	4b2b      	ldr	r3, [pc, #172]	; (800902c <HAL_RCC_OscConfig+0x4ec>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f82:	f7fc f827 	bl	8004fd4 <HAL_GetTick>
 8008f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f88:	e008      	b.n	8008f9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f8a:	f7fc f823 	bl	8004fd4 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d901      	bls.n	8008f9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e03f      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f9c:	4b22      	ldr	r3, [pc, #136]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1f0      	bne.n	8008f8a <HAL_RCC_OscConfig+0x44a>
 8008fa8:	e037      	b.n	800901a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d101      	bne.n	8008fb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e032      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fb6:	4b1c      	ldr	r3, [pc, #112]	; (8009028 <HAL_RCC_OscConfig+0x4e8>)
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d028      	beq.n	8009016 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d121      	bne.n	8009016 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d11a      	bne.n	8009016 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008fec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d111      	bne.n	8009016 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffc:	085b      	lsrs	r3, r3, #1
 8008ffe:	3b01      	subs	r3, #1
 8009000:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009002:	429a      	cmp	r2, r3
 8009004:	d107      	bne.n	8009016 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009012:	429a      	cmp	r2, r3
 8009014:	d001      	beq.n	800901a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e000      	b.n	800901c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	40007000 	.word	0x40007000
 8009028:	40023800 	.word	0x40023800
 800902c:	42470060 	.word	0x42470060

08009030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e0cc      	b.n	80091de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009044:	4b68      	ldr	r3, [pc, #416]	; (80091e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0307 	and.w	r3, r3, #7
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	d90c      	bls.n	800906c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009052:	4b65      	ldr	r3, [pc, #404]	; (80091e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	b2d2      	uxtb	r2, r2
 8009058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800905a:	4b63      	ldr	r3, [pc, #396]	; (80091e8 <HAL_RCC_ClockConfig+0x1b8>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 0307 	and.w	r3, r3, #7
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d001      	beq.n	800906c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e0b8      	b.n	80091de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	2b00      	cmp	r3, #0
 8009076:	d020      	beq.n	80090ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0304 	and.w	r3, r3, #4
 8009080:	2b00      	cmp	r3, #0
 8009082:	d005      	beq.n	8009090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009084:	4b59      	ldr	r3, [pc, #356]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	4a58      	ldr	r2, [pc, #352]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 800908a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800908e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0308 	and.w	r3, r3, #8
 8009098:	2b00      	cmp	r3, #0
 800909a:	d005      	beq.n	80090a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800909c:	4b53      	ldr	r3, [pc, #332]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	4a52      	ldr	r2, [pc, #328]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 80090a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090a8:	4b50      	ldr	r3, [pc, #320]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	494d      	ldr	r1, [pc, #308]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d044      	beq.n	8009150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d107      	bne.n	80090de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ce:	4b47      	ldr	r3, [pc, #284]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d119      	bne.n	800910e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e07f      	b.n	80091de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d003      	beq.n	80090ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d107      	bne.n	80090fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ee:	4b3f      	ldr	r3, [pc, #252]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d109      	bne.n	800910e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e06f      	b.n	80091de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090fe:	4b3b      	ldr	r3, [pc, #236]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0302 	and.w	r3, r3, #2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e067      	b.n	80091de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800910e:	4b37      	ldr	r3, [pc, #220]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f023 0203 	bic.w	r2, r3, #3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	4934      	ldr	r1, [pc, #208]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 800911c:	4313      	orrs	r3, r2
 800911e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009120:	f7fb ff58 	bl	8004fd4 <HAL_GetTick>
 8009124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009126:	e00a      	b.n	800913e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009128:	f7fb ff54 	bl	8004fd4 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	f241 3288 	movw	r2, #5000	; 0x1388
 8009136:	4293      	cmp	r3, r2
 8009138:	d901      	bls.n	800913e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e04f      	b.n	80091de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800913e:	4b2b      	ldr	r3, [pc, #172]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f003 020c 	and.w	r2, r3, #12
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	429a      	cmp	r2, r3
 800914e:	d1eb      	bne.n	8009128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009150:	4b25      	ldr	r3, [pc, #148]	; (80091e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0307 	and.w	r3, r3, #7
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	429a      	cmp	r2, r3
 800915c:	d20c      	bcs.n	8009178 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800915e:	4b22      	ldr	r3, [pc, #136]	; (80091e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	b2d2      	uxtb	r2, r2
 8009164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009166:	4b20      	ldr	r3, [pc, #128]	; (80091e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0307 	and.w	r3, r3, #7
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d001      	beq.n	8009178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e032      	b.n	80091de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0304 	and.w	r3, r3, #4
 8009180:	2b00      	cmp	r3, #0
 8009182:	d008      	beq.n	8009196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009184:	4b19      	ldr	r3, [pc, #100]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	4916      	ldr	r1, [pc, #88]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 8009192:	4313      	orrs	r3, r2
 8009194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0308 	and.w	r3, r3, #8
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d009      	beq.n	80091b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091a2:	4b12      	ldr	r3, [pc, #72]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	00db      	lsls	r3, r3, #3
 80091b0:	490e      	ldr	r1, [pc, #56]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091b6:	f000 f821 	bl	80091fc <HAL_RCC_GetSysClockFreq>
 80091ba:	4602      	mov	r2, r0
 80091bc:	4b0b      	ldr	r3, [pc, #44]	; (80091ec <HAL_RCC_ClockConfig+0x1bc>)
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	091b      	lsrs	r3, r3, #4
 80091c2:	f003 030f 	and.w	r3, r3, #15
 80091c6:	490a      	ldr	r1, [pc, #40]	; (80091f0 <HAL_RCC_ClockConfig+0x1c0>)
 80091c8:	5ccb      	ldrb	r3, [r1, r3]
 80091ca:	fa22 f303 	lsr.w	r3, r2, r3
 80091ce:	4a09      	ldr	r2, [pc, #36]	; (80091f4 <HAL_RCC_ClockConfig+0x1c4>)
 80091d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091d2:	4b09      	ldr	r3, [pc, #36]	; (80091f8 <HAL_RCC_ClockConfig+0x1c8>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fb fa04 	bl	80045e4 <HAL_InitTick>

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	40023c00 	.word	0x40023c00
 80091ec:	40023800 	.word	0x40023800
 80091f0:	08018c14 	.word	0x08018c14
 80091f4:	2000002c 	.word	0x2000002c
 80091f8:	20000030 	.word	0x20000030

080091fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	607b      	str	r3, [r7, #4]
 8009208:	2300      	movs	r3, #0
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	2300      	movs	r3, #0
 800920e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009214:	4b67      	ldr	r3, [pc, #412]	; (80093b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f003 030c 	and.w	r3, r3, #12
 800921c:	2b08      	cmp	r3, #8
 800921e:	d00d      	beq.n	800923c <HAL_RCC_GetSysClockFreq+0x40>
 8009220:	2b08      	cmp	r3, #8
 8009222:	f200 80bd 	bhi.w	80093a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <HAL_RCC_GetSysClockFreq+0x34>
 800922a:	2b04      	cmp	r3, #4
 800922c:	d003      	beq.n	8009236 <HAL_RCC_GetSysClockFreq+0x3a>
 800922e:	e0b7      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009230:	4b61      	ldr	r3, [pc, #388]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009232:	60bb      	str	r3, [r7, #8]
       break;
 8009234:	e0b7      	b.n	80093a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009236:	4b61      	ldr	r3, [pc, #388]	; (80093bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009238:	60bb      	str	r3, [r7, #8]
      break;
 800923a:	e0b4      	b.n	80093a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800923c:	4b5d      	ldr	r3, [pc, #372]	; (80093b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009244:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009246:	4b5b      	ldr	r3, [pc, #364]	; (80093b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d04d      	beq.n	80092ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009252:	4b58      	ldr	r3, [pc, #352]	; (80093b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	099b      	lsrs	r3, r3, #6
 8009258:	461a      	mov	r2, r3
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009262:	f04f 0100 	mov.w	r1, #0
 8009266:	ea02 0800 	and.w	r8, r2, r0
 800926a:	ea03 0901 	and.w	r9, r3, r1
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	f04f 0200 	mov.w	r2, #0
 8009276:	f04f 0300 	mov.w	r3, #0
 800927a:	014b      	lsls	r3, r1, #5
 800927c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009280:	0142      	lsls	r2, r0, #5
 8009282:	4610      	mov	r0, r2
 8009284:	4619      	mov	r1, r3
 8009286:	ebb0 0008 	subs.w	r0, r0, r8
 800928a:	eb61 0109 	sbc.w	r1, r1, r9
 800928e:	f04f 0200 	mov.w	r2, #0
 8009292:	f04f 0300 	mov.w	r3, #0
 8009296:	018b      	lsls	r3, r1, #6
 8009298:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800929c:	0182      	lsls	r2, r0, #6
 800929e:	1a12      	subs	r2, r2, r0
 80092a0:	eb63 0301 	sbc.w	r3, r3, r1
 80092a4:	f04f 0000 	mov.w	r0, #0
 80092a8:	f04f 0100 	mov.w	r1, #0
 80092ac:	00d9      	lsls	r1, r3, #3
 80092ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80092b2:	00d0      	lsls	r0, r2, #3
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	eb12 0208 	adds.w	r2, r2, r8
 80092bc:	eb43 0309 	adc.w	r3, r3, r9
 80092c0:	f04f 0000 	mov.w	r0, #0
 80092c4:	f04f 0100 	mov.w	r1, #0
 80092c8:	0259      	lsls	r1, r3, #9
 80092ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80092ce:	0250      	lsls	r0, r2, #9
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4610      	mov	r0, r2
 80092d6:	4619      	mov	r1, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	461a      	mov	r2, r3
 80092dc:	f04f 0300 	mov.w	r3, #0
 80092e0:	f7f7 fc82 	bl	8000be8 <__aeabi_uldivmod>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4613      	mov	r3, r2
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	e04a      	b.n	8009384 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092ee:	4b31      	ldr	r3, [pc, #196]	; (80093b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	099b      	lsrs	r3, r3, #6
 80092f4:	461a      	mov	r2, r3
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80092fe:	f04f 0100 	mov.w	r1, #0
 8009302:	ea02 0400 	and.w	r4, r2, r0
 8009306:	ea03 0501 	and.w	r5, r3, r1
 800930a:	4620      	mov	r0, r4
 800930c:	4629      	mov	r1, r5
 800930e:	f04f 0200 	mov.w	r2, #0
 8009312:	f04f 0300 	mov.w	r3, #0
 8009316:	014b      	lsls	r3, r1, #5
 8009318:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800931c:	0142      	lsls	r2, r0, #5
 800931e:	4610      	mov	r0, r2
 8009320:	4619      	mov	r1, r3
 8009322:	1b00      	subs	r0, r0, r4
 8009324:	eb61 0105 	sbc.w	r1, r1, r5
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	f04f 0300 	mov.w	r3, #0
 8009330:	018b      	lsls	r3, r1, #6
 8009332:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009336:	0182      	lsls	r2, r0, #6
 8009338:	1a12      	subs	r2, r2, r0
 800933a:	eb63 0301 	sbc.w	r3, r3, r1
 800933e:	f04f 0000 	mov.w	r0, #0
 8009342:	f04f 0100 	mov.w	r1, #0
 8009346:	00d9      	lsls	r1, r3, #3
 8009348:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800934c:	00d0      	lsls	r0, r2, #3
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	1912      	adds	r2, r2, r4
 8009354:	eb45 0303 	adc.w	r3, r5, r3
 8009358:	f04f 0000 	mov.w	r0, #0
 800935c:	f04f 0100 	mov.w	r1, #0
 8009360:	0299      	lsls	r1, r3, #10
 8009362:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009366:	0290      	lsls	r0, r2, #10
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4610      	mov	r0, r2
 800936e:	4619      	mov	r1, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	461a      	mov	r2, r3
 8009374:	f04f 0300 	mov.w	r3, #0
 8009378:	f7f7 fc36 	bl	8000be8 <__aeabi_uldivmod>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4613      	mov	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009384:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	0c1b      	lsrs	r3, r3, #16
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	3301      	adds	r3, #1
 8009390:	005b      	lsls	r3, r3, #1
 8009392:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	fbb2 f3f3 	udiv	r3, r2, r3
 800939c:	60bb      	str	r3, [r7, #8]
      break;
 800939e:	e002      	b.n	80093a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80093a2:	60bb      	str	r3, [r7, #8]
      break;
 80093a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093a6:	68bb      	ldr	r3, [r7, #8]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80093b2:	bf00      	nop
 80093b4:	40023800 	.word	0x40023800
 80093b8:	00f42400 	.word	0x00f42400
 80093bc:	007a1200 	.word	0x007a1200

080093c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093c0:	b480      	push	{r7}
 80093c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093c4:	4b03      	ldr	r3, [pc, #12]	; (80093d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80093c6:	681b      	ldr	r3, [r3, #0]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	2000002c 	.word	0x2000002c

080093d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80093dc:	f7ff fff0 	bl	80093c0 <HAL_RCC_GetHCLKFreq>
 80093e0:	4602      	mov	r2, r0
 80093e2:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	0a9b      	lsrs	r3, r3, #10
 80093e8:	f003 0307 	and.w	r3, r3, #7
 80093ec:	4903      	ldr	r1, [pc, #12]	; (80093fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80093ee:	5ccb      	ldrb	r3, [r1, r3]
 80093f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	40023800 	.word	0x40023800
 80093fc:	08018c24 	.word	0x08018c24

08009400 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	220f      	movs	r2, #15
 800940e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009410:	4b12      	ldr	r3, [pc, #72]	; (800945c <HAL_RCC_GetClockConfig+0x5c>)
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f003 0203 	and.w	r2, r3, #3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800941c:	4b0f      	ldr	r3, [pc, #60]	; (800945c <HAL_RCC_GetClockConfig+0x5c>)
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009428:	4b0c      	ldr	r3, [pc, #48]	; (800945c <HAL_RCC_GetClockConfig+0x5c>)
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009434:	4b09      	ldr	r3, [pc, #36]	; (800945c <HAL_RCC_GetClockConfig+0x5c>)
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	08db      	lsrs	r3, r3, #3
 800943a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009442:	4b07      	ldr	r3, [pc, #28]	; (8009460 <HAL_RCC_GetClockConfig+0x60>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 0207 	and.w	r2, r3, #7
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	601a      	str	r2, [r3, #0]
}
 800944e:	bf00      	nop
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	40023800 	.word	0x40023800
 8009460:	40023c00 	.word	0x40023c00

08009464 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e01c      	b.n	80094b0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	795b      	ldrb	r3, [r3, #5]
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b00      	cmp	r3, #0
 800947e:	d105      	bne.n	800948c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7fa febc 	bl	8004204 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f042 0204 	orr.w	r2, r2, #4
 80094a0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e07b      	b.n	80095c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d108      	bne.n	80094e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094da:	d009      	beq.n	80094f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	61da      	str	r2, [r3, #28]
 80094e2:	e005      	b.n	80094f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7fa fe9c 	bl	8004248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2202      	movs	r2, #2
 8009514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009526:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	f003 0302 	and.w	r3, r3, #2
 800954c:	431a      	orrs	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009560:	431a      	orrs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009574:	ea42 0103 	orr.w	r1, r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	430a      	orrs	r2, r1
 8009586:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	0c1b      	lsrs	r3, r3, #16
 800958e:	f003 0104 	and.w	r1, r3, #4
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009596:	f003 0210 	and.w	r2, r3, #16
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69da      	ldr	r2, [r3, #28]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e01a      	b.n	8009612 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095f2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7fa ff01 	bl	80043fc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b088      	sub	sp, #32
 800961e:	af00      	add	r7, sp, #0
 8009620:	60f8      	str	r0, [r7, #12]
 8009622:	60b9      	str	r1, [r7, #8]
 8009624:	603b      	str	r3, [r7, #0]
 8009626:	4613      	mov	r3, r2
 8009628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009634:	2b01      	cmp	r3, #1
 8009636:	d101      	bne.n	800963c <HAL_SPI_Transmit+0x22>
 8009638:	2302      	movs	r3, #2
 800963a:	e126      	b.n	800988a <HAL_SPI_Transmit+0x270>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009644:	f7fb fcc6 	bl	8004fd4 <HAL_GetTick>
 8009648:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800964a:	88fb      	ldrh	r3, [r7, #6]
 800964c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b01      	cmp	r3, #1
 8009658:	d002      	beq.n	8009660 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800965a:	2302      	movs	r3, #2
 800965c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800965e:	e10b      	b.n	8009878 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d002      	beq.n	800966c <HAL_SPI_Transmit+0x52>
 8009666:	88fb      	ldrh	r3, [r7, #6]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009670:	e102      	b.n	8009878 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2203      	movs	r2, #3
 8009676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	88fa      	ldrh	r2, [r7, #6]
 800968a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	88fa      	ldrh	r2, [r7, #6]
 8009690:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096b8:	d10f      	bne.n	80096da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e4:	2b40      	cmp	r3, #64	; 0x40
 80096e6:	d007      	beq.n	80096f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009700:	d14b      	bne.n	800979a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <HAL_SPI_Transmit+0xf6>
 800970a:	8afb      	ldrh	r3, [r7, #22]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d13e      	bne.n	800978e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009714:	881a      	ldrh	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009720:	1c9a      	adds	r2, r3, #2
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800972a:	b29b      	uxth	r3, r3
 800972c:	3b01      	subs	r3, #1
 800972e:	b29a      	uxth	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009734:	e02b      	b.n	800978e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f003 0302 	and.w	r3, r3, #2
 8009740:	2b02      	cmp	r3, #2
 8009742:	d112      	bne.n	800976a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009748:	881a      	ldrh	r2, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009754:	1c9a      	adds	r2, r3, #2
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800975e:	b29b      	uxth	r3, r3
 8009760:	3b01      	subs	r3, #1
 8009762:	b29a      	uxth	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	86da      	strh	r2, [r3, #54]	; 0x36
 8009768:	e011      	b.n	800978e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800976a:	f7fb fc33 	bl	8004fd4 <HAL_GetTick>
 800976e:	4602      	mov	r2, r0
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d803      	bhi.n	8009782 <HAL_SPI_Transmit+0x168>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009780:	d102      	bne.n	8009788 <HAL_SPI_Transmit+0x16e>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d102      	bne.n	800978e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009788:	2303      	movs	r3, #3
 800978a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800978c:	e074      	b.n	8009878 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1ce      	bne.n	8009736 <HAL_SPI_Transmit+0x11c>
 8009798:	e04c      	b.n	8009834 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <HAL_SPI_Transmit+0x18e>
 80097a2:	8afb      	ldrh	r3, [r7, #22]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d140      	bne.n	800982a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	330c      	adds	r3, #12
 80097b2:	7812      	ldrb	r2, [r2, #0]
 80097b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3b01      	subs	r3, #1
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80097ce:	e02c      	b.n	800982a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f003 0302 	and.w	r3, r3, #2
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d113      	bne.n	8009806 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	330c      	adds	r3, #12
 80097e8:	7812      	ldrb	r2, [r2, #0]
 80097ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	3b01      	subs	r3, #1
 80097fe:	b29a      	uxth	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	86da      	strh	r2, [r3, #54]	; 0x36
 8009804:	e011      	b.n	800982a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009806:	f7fb fbe5 	bl	8004fd4 <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	429a      	cmp	r2, r3
 8009814:	d803      	bhi.n	800981e <HAL_SPI_Transmit+0x204>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800981c:	d102      	bne.n	8009824 <HAL_SPI_Transmit+0x20a>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009828:	e026      	b.n	8009878 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800982e:	b29b      	uxth	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1cd      	bne.n	80097d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 fb53 	bl	8009ee4 <SPI_EndRxTxTransaction>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d002      	beq.n	800984a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2220      	movs	r2, #32
 8009848:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10a      	bne.n	8009868 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009852:	2300      	movs	r3, #0
 8009854:	613b      	str	r3, [r7, #16]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	613b      	str	r3, [r7, #16]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	613b      	str	r3, [r7, #16]
 8009866:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	77fb      	strb	r3, [r7, #31]
 8009874:	e000      	b.n	8009878 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009876:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009888:	7ffb      	ldrb	r3, [r7, #31]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3720      	adds	r7, #32
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d101      	bne.n	80098b4 <HAL_SPI_Transmit_DMA+0x20>
 80098b0:	2302      	movs	r3, #2
 80098b2:	e09b      	b.n	80099ec <HAL_SPI_Transmit_DMA+0x158>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d002      	beq.n	80098ce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80098c8:	2302      	movs	r3, #2
 80098ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80098cc:	e089      	b.n	80099e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <HAL_SPI_Transmit_DMA+0x46>
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d102      	bne.n	80098e0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80098de:	e080      	b.n	80099e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2203      	movs	r2, #3
 80098e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	88fa      	ldrh	r2, [r7, #6]
 80098f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	88fa      	ldrh	r2, [r7, #6]
 80098fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2200      	movs	r2, #0
 8009910:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009926:	d10f      	bne.n	8009948 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009936:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009946:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800994c:	4a29      	ldr	r2, [pc, #164]	; (80099f4 <HAL_SPI_Transmit_DMA+0x160>)
 800994e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009954:	4a28      	ldr	r2, [pc, #160]	; (80099f8 <HAL_SPI_Transmit_DMA+0x164>)
 8009956:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800995c:	4a27      	ldr	r2, [pc, #156]	; (80099fc <HAL_SPI_Transmit_DMA+0x168>)
 800995e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009964:	2200      	movs	r2, #0
 8009966:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009970:	4619      	mov	r1, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	330c      	adds	r3, #12
 8009978:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800997e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009980:	f7fb ffda 	bl	8005938 <HAL_DMA_Start_IT>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00c      	beq.n	80099a4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998e:	f043 0210 	orr.w	r2, r3, #16
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80099a2:	e01e      	b.n	80099e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ae:	2b40      	cmp	r3, #64	; 0x40
 80099b0:	d007      	beq.n	80099c2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099c0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f042 0220 	orr.w	r2, r2, #32
 80099d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f042 0202 	orr.w	r2, r2, #2
 80099e0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	08009d51 	.word	0x08009d51
 80099f8:	08009ca9 	.word	0x08009ca9
 80099fc:	08009d6d 	.word	0x08009d6d

08009a00 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00f      	beq.n	8009a34 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fb ffe5 	bl	80059e8 <HAL_DMA_Abort>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d007      	beq.n	8009a34 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a28:	f043 0210 	orr.w	r2, r3, #16
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00f      	beq.n	8009a5c <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fb ffd1 	bl	80059e8 <HAL_DMA_Abort>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d007      	beq.n	8009a5c <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a50:	f043 0210 	orr.w	r2, r3, #16
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f022 0203 	bic.w	r2, r2, #3
 8009a6a:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	099b      	lsrs	r3, r3, #6
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10f      	bne.n	8009ac4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00a      	beq.n	8009ac4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	099b      	lsrs	r3, r3, #6
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d004      	beq.n	8009ac4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	4798      	blx	r3
    return;
 8009ac2:	e0d7      	b.n	8009c74 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	085b      	lsrs	r3, r3, #1
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00a      	beq.n	8009ae6 <HAL_SPI_IRQHandler+0x66>
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	09db      	lsrs	r3, r3, #7
 8009ad4:	f003 0301 	and.w	r3, r3, #1
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d004      	beq.n	8009ae6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	4798      	blx	r3
    return;
 8009ae4:	e0c6      	b.n	8009c74 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	095b      	lsrs	r3, r3, #5
 8009aea:	f003 0301 	and.w	r3, r3, #1
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10c      	bne.n	8009b0c <HAL_SPI_IRQHandler+0x8c>
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	099b      	lsrs	r3, r3, #6
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d106      	bne.n	8009b0c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	0a1b      	lsrs	r3, r3, #8
 8009b02:	f003 0301 	and.w	r3, r3, #1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 80b4 	beq.w	8009c74 <HAL_SPI_IRQHandler+0x1f4>
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	095b      	lsrs	r3, r3, #5
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 80ad 	beq.w	8009c74 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	099b      	lsrs	r3, r3, #6
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d023      	beq.n	8009b6e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d011      	beq.n	8009b56 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b36:	f043 0204 	orr.w	r2, r3, #4
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b3e:	2300      	movs	r3, #0
 8009b40:	617b      	str	r3, [r7, #20]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	617b      	str	r3, [r7, #20]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	617b      	str	r3, [r7, #20]
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	e00b      	b.n	8009b6e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b56:	2300      	movs	r3, #0
 8009b58:	613b      	str	r3, [r7, #16]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	613b      	str	r3, [r7, #16]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	613b      	str	r3, [r7, #16]
 8009b6a:	693b      	ldr	r3, [r7, #16]
        return;
 8009b6c:	e082      	b.n	8009c74 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	095b      	lsrs	r3, r3, #5
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d014      	beq.n	8009ba4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7e:	f043 0201 	orr.w	r2, r3, #1
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	0a1b      	lsrs	r3, r3, #8
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00c      	beq.n	8009bca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb4:	f043 0208 	orr.w	r2, r3, #8
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	60bb      	str	r3, [r7, #8]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	60bb      	str	r3, [r7, #8]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d04f      	beq.n	8009c72 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009be0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	f003 0302 	and.w	r3, r3, #2
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d104      	bne.n	8009bfe <HAL_SPI_IRQHandler+0x17e>
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d034      	beq.n	8009c68 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f022 0203 	bic.w	r2, r2, #3
 8009c0c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d011      	beq.n	8009c3a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1a:	4a18      	ldr	r2, [pc, #96]	; (8009c7c <HAL_SPI_IRQHandler+0x1fc>)
 8009c1c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fb ff50 	bl	8005ac8 <HAL_DMA_Abort_IT>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d005      	beq.n	8009c3a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d016      	beq.n	8009c70 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c46:	4a0d      	ldr	r2, [pc, #52]	; (8009c7c <HAL_SPI_IRQHandler+0x1fc>)
 8009c48:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fb ff3a 	bl	8005ac8 <HAL_DMA_Abort_IT>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009c66:	e003      	b.n	8009c70 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f813 	bl	8009c94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009c6e:	e000      	b.n	8009c72 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009c70:	bf00      	nop
    return;
 8009c72:	bf00      	nop
  }
}
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	08009dad 	.word	0x08009dad

08009c80 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cb6:	f7fb f98d 	bl	8004fd4 <HAL_GetTick>
 8009cba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cca:	d03b      	beq.n	8009d44 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f022 0220 	bic.w	r2, r2, #32
 8009cda:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f022 0202 	bic.w	r2, r2, #2
 8009cea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	2164      	movs	r1, #100	; 0x64
 8009cf0:	6978      	ldr	r0, [r7, #20]
 8009cf2:	f000 f8f7 	bl	8009ee4 <SPI_EndRxTxTransaction>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d005      	beq.n	8009d08 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d00:	f043 0220 	orr.w	r2, r3, #32
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10a      	bne.n	8009d26 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009d3c:	6978      	ldr	r0, [r7, #20]
 8009d3e:	f7ff ffa9 	bl	8009c94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009d42:	e002      	b.n	8009d4a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009d44:	6978      	ldr	r0, [r7, #20]
 8009d46:	f7f8 f96d 	bl	8002024 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d4a:	3718      	adds	r7, #24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f7ff ff8e 	bl	8009c80 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d64:	bf00      	nop
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d78:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f022 0203 	bic.w	r2, r2, #3
 8009d88:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d8e:	f043 0210 	orr.w	r2, r3, #16
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7ff ff78 	bl	8009c94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009da4:	bf00      	nop
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f7ff ff64 	bl	8009c94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009dcc:	bf00      	nop
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	4613      	mov	r3, r2
 8009de2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009de4:	f7fb f8f6 	bl	8004fd4 <HAL_GetTick>
 8009de8:	4602      	mov	r2, r0
 8009dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dec:	1a9b      	subs	r3, r3, r2
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	4413      	add	r3, r2
 8009df2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009df4:	f7fb f8ee 	bl	8004fd4 <HAL_GetTick>
 8009df8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009dfa:	4b39      	ldr	r3, [pc, #228]	; (8009ee0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	015b      	lsls	r3, r3, #5
 8009e00:	0d1b      	lsrs	r3, r3, #20
 8009e02:	69fa      	ldr	r2, [r7, #28]
 8009e04:	fb02 f303 	mul.w	r3, r2, r3
 8009e08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e0a:	e054      	b.n	8009eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e12:	d050      	beq.n	8009eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e14:	f7fb f8de 	bl	8004fd4 <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	69fa      	ldr	r2, [r7, #28]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d902      	bls.n	8009e2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d13d      	bne.n	8009ea6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e42:	d111      	bne.n	8009e68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e4c:	d004      	beq.n	8009e58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e56:	d107      	bne.n	8009e68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e70:	d10f      	bne.n	8009e92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e017      	b.n	8009ed6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009eac:	2300      	movs	r3, #0
 8009eae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	689a      	ldr	r2, [r3, #8]
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	bf0c      	ite	eq
 8009ec6:	2301      	moveq	r3, #1
 8009ec8:	2300      	movne	r3, #0
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	461a      	mov	r2, r3
 8009ece:	79fb      	ldrb	r3, [r7, #7]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d19b      	bne.n	8009e0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3720      	adds	r7, #32
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	2000002c 	.word	0x2000002c

08009ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b088      	sub	sp, #32
 8009ee8:	af02      	add	r7, sp, #8
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ef0:	4b1b      	ldr	r3, [pc, #108]	; (8009f60 <SPI_EndRxTxTransaction+0x7c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a1b      	ldr	r2, [pc, #108]	; (8009f64 <SPI_EndRxTxTransaction+0x80>)
 8009ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8009efa:	0d5b      	lsrs	r3, r3, #21
 8009efc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f00:	fb02 f303 	mul.w	r3, r2, r3
 8009f04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f0e:	d112      	bne.n	8009f36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2200      	movs	r2, #0
 8009f18:	2180      	movs	r1, #128	; 0x80
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f7ff ff5a 	bl	8009dd4 <SPI_WaitFlagStateUntilTimeout>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d016      	beq.n	8009f54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2a:	f043 0220 	orr.w	r2, r3, #32
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e00f      	b.n	8009f56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00a      	beq.n	8009f52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f4c:	2b80      	cmp	r3, #128	; 0x80
 8009f4e:	d0f2      	beq.n	8009f36 <SPI_EndRxTxTransaction+0x52>
 8009f50:	e000      	b.n	8009f54 <SPI_EndRxTxTransaction+0x70>
        break;
 8009f52:	bf00      	nop
  }

  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	2000002c 	.word	0x2000002c
 8009f64:	165e9f81 	.word	0x165e9f81

08009f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e041      	b.n	8009ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d106      	bne.n	8009f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7fa fac4 	bl	800451c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f000 fbf8 	bl	800a79c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d001      	beq.n	800a020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e04e      	b.n	800a0be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2202      	movs	r2, #2
 800a024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68da      	ldr	r2, [r3, #12]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f042 0201 	orr.w	r2, r2, #1
 800a036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a23      	ldr	r2, [pc, #140]	; (800a0cc <HAL_TIM_Base_Start_IT+0xc4>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d022      	beq.n	800a088 <HAL_TIM_Base_Start_IT+0x80>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a04a:	d01d      	beq.n	800a088 <HAL_TIM_Base_Start_IT+0x80>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a1f      	ldr	r2, [pc, #124]	; (800a0d0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d018      	beq.n	800a088 <HAL_TIM_Base_Start_IT+0x80>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a1e      	ldr	r2, [pc, #120]	; (800a0d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d013      	beq.n	800a088 <HAL_TIM_Base_Start_IT+0x80>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a1c      	ldr	r2, [pc, #112]	; (800a0d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d00e      	beq.n	800a088 <HAL_TIM_Base_Start_IT+0x80>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a1b      	ldr	r2, [pc, #108]	; (800a0dc <HAL_TIM_Base_Start_IT+0xd4>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d009      	beq.n	800a088 <HAL_TIM_Base_Start_IT+0x80>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a19      	ldr	r2, [pc, #100]	; (800a0e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d004      	beq.n	800a088 <HAL_TIM_Base_Start_IT+0x80>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a18      	ldr	r2, [pc, #96]	; (800a0e4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d111      	bne.n	800a0ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f003 0307 	and.w	r3, r3, #7
 800a092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2b06      	cmp	r3, #6
 800a098:	d010      	beq.n	800a0bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f042 0201 	orr.w	r2, r2, #1
 800a0a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0aa:	e007      	b.n	800a0bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f042 0201 	orr.w	r2, r2, #1
 800a0ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3714      	adds	r7, #20
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	40010000 	.word	0x40010000
 800a0d0:	40000400 	.word	0x40000400
 800a0d4:	40000800 	.word	0x40000800
 800a0d8:	40000c00 	.word	0x40000c00
 800a0dc:	40010400 	.word	0x40010400
 800a0e0:	40014000 	.word	0x40014000
 800a0e4:	40001800 	.word	0x40001800

0800a0e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68da      	ldr	r2, [r3, #12]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f022 0201 	bic.w	r2, r2, #1
 800a0fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6a1a      	ldr	r2, [r3, #32]
 800a106:	f241 1311 	movw	r3, #4369	; 0x1111
 800a10a:	4013      	ands	r3, r2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10f      	bne.n	800a130 <HAL_TIM_Base_Stop_IT+0x48>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6a1a      	ldr	r2, [r3, #32]
 800a116:	f240 4344 	movw	r3, #1092	; 0x444
 800a11a:	4013      	ands	r3, r2
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d107      	bne.n	800a130 <HAL_TIM_Base_Stop_IT+0x48>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f022 0201 	bic.w	r2, r2, #1
 800a12e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b086      	sub	sp, #24
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e097      	b.n	800a28a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7fa f984 	bl	800447c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2202      	movs	r2, #2
 800a178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	6812      	ldr	r2, [r2, #0]
 800a186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a18a:	f023 0307 	bic.w	r3, r3, #7
 800a18e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3304      	adds	r3, #4
 800a198:	4619      	mov	r1, r3
 800a19a:	4610      	mov	r0, r2
 800a19c:	f000 fafe 	bl	800a79c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1c8:	f023 0303 	bic.w	r3, r3, #3
 800a1cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	689a      	ldr	r2, [r3, #8]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	021b      	lsls	r3, r3, #8
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a1e6:	f023 030c 	bic.w	r3, r3, #12
 800a1ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	68da      	ldr	r2, [r3, #12]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	021b      	lsls	r3, r3, #8
 800a202:	4313      	orrs	r3, r2
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	4313      	orrs	r3, r2
 800a208:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	011a      	lsls	r2, r3, #4
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	031b      	lsls	r3, r3, #12
 800a216:	4313      	orrs	r3, r2
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a224:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a22c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	011b      	lsls	r3, r3, #4
 800a238:	4313      	orrs	r3, r2
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2a2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a2aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a2b2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a2ba:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d110      	bne.n	800a2e4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d102      	bne.n	800a2ce <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2c8:	7b7b      	ldrb	r3, [r7, #13]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d001      	beq.n	800a2d2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e069      	b.n	800a3a6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2202      	movs	r2, #2
 800a2d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2202      	movs	r2, #2
 800a2de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2e2:	e031      	b.n	800a348 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	d110      	bne.n	800a30c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2ea:	7bbb      	ldrb	r3, [r7, #14]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d102      	bne.n	800a2f6 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2f0:	7b3b      	ldrb	r3, [r7, #12]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d001      	beq.n	800a2fa <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e055      	b.n	800a3a6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2202      	movs	r2, #2
 800a306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a30a:	e01d      	b.n	800a348 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d108      	bne.n	800a324 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d105      	bne.n	800a324 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a318:	7b7b      	ldrb	r3, [r7, #13]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d102      	bne.n	800a324 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a31e:	7b3b      	ldrb	r3, [r7, #12]
 800a320:	2b01      	cmp	r3, #1
 800a322:	d001      	beq.n	800a328 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e03e      	b.n	800a3a6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2202      	movs	r2, #2
 800a32c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2202      	movs	r2, #2
 800a334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2202      	movs	r2, #2
 800a33c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2202      	movs	r2, #2
 800a344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <HAL_TIM_Encoder_Start+0xc4>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b04      	cmp	r3, #4
 800a352:	d008      	beq.n	800a366 <HAL_TIM_Encoder_Start+0xd4>
 800a354:	e00f      	b.n	800a376 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2201      	movs	r2, #1
 800a35c:	2100      	movs	r1, #0
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fb56 	bl	800aa10 <TIM_CCxChannelCmd>
      break;
 800a364:	e016      	b.n	800a394 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2201      	movs	r2, #1
 800a36c:	2104      	movs	r1, #4
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 fb4e 	bl	800aa10 <TIM_CCxChannelCmd>
      break;
 800a374:	e00e      	b.n	800a394 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2201      	movs	r2, #1
 800a37c:	2100      	movs	r1, #0
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 fb46 	bl	800aa10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2201      	movs	r2, #1
 800a38a:	2104      	movs	r1, #4
 800a38c:	4618      	mov	r0, r3
 800a38e:	f000 fb3f 	bl	800aa10 <TIM_CCxChannelCmd>
      break;
 800a392:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f042 0201 	orr.w	r2, r2, #1
 800a3a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b082      	sub	sp, #8
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	f003 0302 	and.w	r3, r3, #2
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d122      	bne.n	800a40a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d11b      	bne.n	800a40a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f06f 0202 	mvn.w	r2, #2
 800a3da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	f003 0303 	and.w	r3, r3, #3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d003      	beq.n	800a3f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f9b5 	bl	800a760 <HAL_TIM_IC_CaptureCallback>
 800a3f6:	e005      	b.n	800a404 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f9a7 	bl	800a74c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f9b8 	bl	800a774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	f003 0304 	and.w	r3, r3, #4
 800a414:	2b04      	cmp	r3, #4
 800a416:	d122      	bne.n	800a45e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	f003 0304 	and.w	r3, r3, #4
 800a422:	2b04      	cmp	r3, #4
 800a424:	d11b      	bne.n	800a45e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f06f 0204 	mvn.w	r2, #4
 800a42e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2202      	movs	r2, #2
 800a434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f98b 	bl	800a760 <HAL_TIM_IC_CaptureCallback>
 800a44a:	e005      	b.n	800a458 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f97d 	bl	800a74c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f98e 	bl	800a774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	f003 0308 	and.w	r3, r3, #8
 800a468:	2b08      	cmp	r3, #8
 800a46a:	d122      	bne.n	800a4b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	f003 0308 	and.w	r3, r3, #8
 800a476:	2b08      	cmp	r3, #8
 800a478:	d11b      	bne.n	800a4b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f06f 0208 	mvn.w	r2, #8
 800a482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2204      	movs	r2, #4
 800a488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	f003 0303 	and.w	r3, r3, #3
 800a494:	2b00      	cmp	r3, #0
 800a496:	d003      	beq.n	800a4a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f961 	bl	800a760 <HAL_TIM_IC_CaptureCallback>
 800a49e:	e005      	b.n	800a4ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f953 	bl	800a74c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f964 	bl	800a774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	f003 0310 	and.w	r3, r3, #16
 800a4bc:	2b10      	cmp	r3, #16
 800a4be:	d122      	bne.n	800a506 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	f003 0310 	and.w	r3, r3, #16
 800a4ca:	2b10      	cmp	r3, #16
 800a4cc:	d11b      	bne.n	800a506 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f06f 0210 	mvn.w	r2, #16
 800a4d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2208      	movs	r2, #8
 800a4dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	69db      	ldr	r3, [r3, #28]
 800a4e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f937 	bl	800a760 <HAL_TIM_IC_CaptureCallback>
 800a4f2:	e005      	b.n	800a500 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f929 	bl	800a74c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f93a 	bl	800a774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	f003 0301 	and.w	r3, r3, #1
 800a510:	2b01      	cmp	r3, #1
 800a512:	d10e      	bne.n	800a532 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f003 0301 	and.w	r3, r3, #1
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d107      	bne.n	800a532 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f06f 0201 	mvn.w	r2, #1
 800a52a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7f9 fd33 	bl	8003f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a53c:	2b80      	cmp	r3, #128	; 0x80
 800a53e:	d10e      	bne.n	800a55e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a54a:	2b80      	cmp	r3, #128	; 0x80
 800a54c:	d107      	bne.n	800a55e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fb05 	bl	800ab68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a568:	2b40      	cmp	r3, #64	; 0x40
 800a56a:	d10e      	bne.n	800a58a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a576:	2b40      	cmp	r3, #64	; 0x40
 800a578:	d107      	bne.n	800a58a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f8ff 	bl	800a788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	f003 0320 	and.w	r3, r3, #32
 800a594:	2b20      	cmp	r3, #32
 800a596:	d10e      	bne.n	800a5b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f003 0320 	and.w	r3, r3, #32
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	d107      	bne.n	800a5b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f06f 0220 	mvn.w	r2, #32
 800a5ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 facf 	bl	800ab54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d101      	bne.n	800a5da <HAL_TIM_ConfigClockSource+0x1c>
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	e0b4      	b.n	800a744 <HAL_TIM_ConfigClockSource+0x186>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a600:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a612:	d03e      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0xd4>
 800a614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a618:	f200 8087 	bhi.w	800a72a <HAL_TIM_ConfigClockSource+0x16c>
 800a61c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a620:	f000 8086 	beq.w	800a730 <HAL_TIM_ConfigClockSource+0x172>
 800a624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a628:	d87f      	bhi.n	800a72a <HAL_TIM_ConfigClockSource+0x16c>
 800a62a:	2b70      	cmp	r3, #112	; 0x70
 800a62c:	d01a      	beq.n	800a664 <HAL_TIM_ConfigClockSource+0xa6>
 800a62e:	2b70      	cmp	r3, #112	; 0x70
 800a630:	d87b      	bhi.n	800a72a <HAL_TIM_ConfigClockSource+0x16c>
 800a632:	2b60      	cmp	r3, #96	; 0x60
 800a634:	d050      	beq.n	800a6d8 <HAL_TIM_ConfigClockSource+0x11a>
 800a636:	2b60      	cmp	r3, #96	; 0x60
 800a638:	d877      	bhi.n	800a72a <HAL_TIM_ConfigClockSource+0x16c>
 800a63a:	2b50      	cmp	r3, #80	; 0x50
 800a63c:	d03c      	beq.n	800a6b8 <HAL_TIM_ConfigClockSource+0xfa>
 800a63e:	2b50      	cmp	r3, #80	; 0x50
 800a640:	d873      	bhi.n	800a72a <HAL_TIM_ConfigClockSource+0x16c>
 800a642:	2b40      	cmp	r3, #64	; 0x40
 800a644:	d058      	beq.n	800a6f8 <HAL_TIM_ConfigClockSource+0x13a>
 800a646:	2b40      	cmp	r3, #64	; 0x40
 800a648:	d86f      	bhi.n	800a72a <HAL_TIM_ConfigClockSource+0x16c>
 800a64a:	2b30      	cmp	r3, #48	; 0x30
 800a64c:	d064      	beq.n	800a718 <HAL_TIM_ConfigClockSource+0x15a>
 800a64e:	2b30      	cmp	r3, #48	; 0x30
 800a650:	d86b      	bhi.n	800a72a <HAL_TIM_ConfigClockSource+0x16c>
 800a652:	2b20      	cmp	r3, #32
 800a654:	d060      	beq.n	800a718 <HAL_TIM_ConfigClockSource+0x15a>
 800a656:	2b20      	cmp	r3, #32
 800a658:	d867      	bhi.n	800a72a <HAL_TIM_ConfigClockSource+0x16c>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d05c      	beq.n	800a718 <HAL_TIM_ConfigClockSource+0x15a>
 800a65e:	2b10      	cmp	r3, #16
 800a660:	d05a      	beq.n	800a718 <HAL_TIM_ConfigClockSource+0x15a>
 800a662:	e062      	b.n	800a72a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6818      	ldr	r0, [r3, #0]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	6899      	ldr	r1, [r3, #8]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	f000 f9ac 	bl	800a9d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a686:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	609a      	str	r2, [r3, #8]
      break;
 800a690:	e04f      	b.n	800a732 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6818      	ldr	r0, [r3, #0]
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	6899      	ldr	r1, [r3, #8]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	f000 f995 	bl	800a9d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689a      	ldr	r2, [r3, #8]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6b4:	609a      	str	r2, [r3, #8]
      break;
 800a6b6:	e03c      	b.n	800a732 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6818      	ldr	r0, [r3, #0]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	6859      	ldr	r1, [r3, #4]
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	f000 f909 	bl	800a8dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2150      	movs	r1, #80	; 0x50
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 f962 	bl	800a99a <TIM_ITRx_SetConfig>
      break;
 800a6d6:	e02c      	b.n	800a732 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	6859      	ldr	r1, [r3, #4]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	f000 f928 	bl	800a93a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2160      	movs	r1, #96	; 0x60
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f000 f952 	bl	800a99a <TIM_ITRx_SetConfig>
      break;
 800a6f6:	e01c      	b.n	800a732 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6818      	ldr	r0, [r3, #0]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	6859      	ldr	r1, [r3, #4]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	461a      	mov	r2, r3
 800a706:	f000 f8e9 	bl	800a8dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2140      	movs	r1, #64	; 0x40
 800a710:	4618      	mov	r0, r3
 800a712:	f000 f942 	bl	800a99a <TIM_ITRx_SetConfig>
      break;
 800a716:	e00c      	b.n	800a732 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4619      	mov	r1, r3
 800a722:	4610      	mov	r0, r2
 800a724:	f000 f939 	bl	800a99a <TIM_ITRx_SetConfig>
      break;
 800a728:	e003      	b.n	800a732 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	73fb      	strb	r3, [r7, #15]
      break;
 800a72e:	e000      	b.n	800a732 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a730:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a742:	7bfb      	ldrb	r3, [r7, #15]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a40      	ldr	r2, [pc, #256]	; (800a8b0 <TIM_Base_SetConfig+0x114>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d013      	beq.n	800a7dc <TIM_Base_SetConfig+0x40>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ba:	d00f      	beq.n	800a7dc <TIM_Base_SetConfig+0x40>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a3d      	ldr	r2, [pc, #244]	; (800a8b4 <TIM_Base_SetConfig+0x118>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d00b      	beq.n	800a7dc <TIM_Base_SetConfig+0x40>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a3c      	ldr	r2, [pc, #240]	; (800a8b8 <TIM_Base_SetConfig+0x11c>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d007      	beq.n	800a7dc <TIM_Base_SetConfig+0x40>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a3b      	ldr	r2, [pc, #236]	; (800a8bc <TIM_Base_SetConfig+0x120>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d003      	beq.n	800a7dc <TIM_Base_SetConfig+0x40>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a3a      	ldr	r2, [pc, #232]	; (800a8c0 <TIM_Base_SetConfig+0x124>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d108      	bne.n	800a7ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a2f      	ldr	r2, [pc, #188]	; (800a8b0 <TIM_Base_SetConfig+0x114>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d02b      	beq.n	800a84e <TIM_Base_SetConfig+0xb2>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7fc:	d027      	beq.n	800a84e <TIM_Base_SetConfig+0xb2>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a2c      	ldr	r2, [pc, #176]	; (800a8b4 <TIM_Base_SetConfig+0x118>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d023      	beq.n	800a84e <TIM_Base_SetConfig+0xb2>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a2b      	ldr	r2, [pc, #172]	; (800a8b8 <TIM_Base_SetConfig+0x11c>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d01f      	beq.n	800a84e <TIM_Base_SetConfig+0xb2>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a2a      	ldr	r2, [pc, #168]	; (800a8bc <TIM_Base_SetConfig+0x120>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d01b      	beq.n	800a84e <TIM_Base_SetConfig+0xb2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a29      	ldr	r2, [pc, #164]	; (800a8c0 <TIM_Base_SetConfig+0x124>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d017      	beq.n	800a84e <TIM_Base_SetConfig+0xb2>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a28      	ldr	r2, [pc, #160]	; (800a8c4 <TIM_Base_SetConfig+0x128>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d013      	beq.n	800a84e <TIM_Base_SetConfig+0xb2>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a27      	ldr	r2, [pc, #156]	; (800a8c8 <TIM_Base_SetConfig+0x12c>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d00f      	beq.n	800a84e <TIM_Base_SetConfig+0xb2>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a26      	ldr	r2, [pc, #152]	; (800a8cc <TIM_Base_SetConfig+0x130>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d00b      	beq.n	800a84e <TIM_Base_SetConfig+0xb2>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a25      	ldr	r2, [pc, #148]	; (800a8d0 <TIM_Base_SetConfig+0x134>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d007      	beq.n	800a84e <TIM_Base_SetConfig+0xb2>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a24      	ldr	r2, [pc, #144]	; (800a8d4 <TIM_Base_SetConfig+0x138>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d003      	beq.n	800a84e <TIM_Base_SetConfig+0xb2>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a23      	ldr	r2, [pc, #140]	; (800a8d8 <TIM_Base_SetConfig+0x13c>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d108      	bne.n	800a860 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a0a      	ldr	r2, [pc, #40]	; (800a8b0 <TIM_Base_SetConfig+0x114>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d003      	beq.n	800a894 <TIM_Base_SetConfig+0xf8>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a0c      	ldr	r2, [pc, #48]	; (800a8c0 <TIM_Base_SetConfig+0x124>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d103      	bne.n	800a89c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	691a      	ldr	r2, [r3, #16]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	615a      	str	r2, [r3, #20]
}
 800a8a2:	bf00      	nop
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	40010000 	.word	0x40010000
 800a8b4:	40000400 	.word	0x40000400
 800a8b8:	40000800 	.word	0x40000800
 800a8bc:	40000c00 	.word	0x40000c00
 800a8c0:	40010400 	.word	0x40010400
 800a8c4:	40014000 	.word	0x40014000
 800a8c8:	40014400 	.word	0x40014400
 800a8cc:	40014800 	.word	0x40014800
 800a8d0:	40001800 	.word	0x40001800
 800a8d4:	40001c00 	.word	0x40001c00
 800a8d8:	40002000 	.word	0x40002000

0800a8dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6a1b      	ldr	r3, [r3, #32]
 800a8ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	f023 0201 	bic.w	r2, r3, #1
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	011b      	lsls	r3, r3, #4
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	4313      	orrs	r3, r2
 800a910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f023 030a 	bic.w	r3, r3, #10
 800a918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	697a      	ldr	r2, [r7, #20]
 800a92c:	621a      	str	r2, [r3, #32]
}
 800a92e:	bf00      	nop
 800a930:	371c      	adds	r7, #28
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b087      	sub	sp, #28
 800a93e:	af00      	add	r7, sp, #0
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	60b9      	str	r1, [r7, #8]
 800a944:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	f023 0210 	bic.w	r2, r3, #16
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6a1b      	ldr	r3, [r3, #32]
 800a95c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	031b      	lsls	r3, r3, #12
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a976:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	011b      	lsls	r3, r3, #4
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	4313      	orrs	r3, r2
 800a980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	621a      	str	r2, [r3, #32]
}
 800a98e:	bf00      	nop
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b085      	sub	sp, #20
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	f043 0307 	orr.w	r3, r3, #7
 800a9bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	609a      	str	r2, [r3, #8]
}
 800a9c4:	bf00      	nop
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
 800a9dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	021a      	lsls	r2, r3, #8
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	431a      	orrs	r2, r3
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	609a      	str	r2, [r3, #8]
}
 800aa04:	bf00      	nop
 800aa06:	371c      	adds	r7, #28
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b087      	sub	sp, #28
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f003 031f 	and.w	r3, r3, #31
 800aa22:	2201      	movs	r2, #1
 800aa24:	fa02 f303 	lsl.w	r3, r2, r3
 800aa28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6a1a      	ldr	r2, [r3, #32]
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	43db      	mvns	r3, r3
 800aa32:	401a      	ands	r2, r3
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6a1a      	ldr	r2, [r3, #32]
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f003 031f 	and.w	r3, r3, #31
 800aa42:	6879      	ldr	r1, [r7, #4]
 800aa44:	fa01 f303 	lsl.w	r3, r1, r3
 800aa48:	431a      	orrs	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	621a      	str	r2, [r3, #32]
}
 800aa4e:	bf00      	nop
 800aa50:	371c      	adds	r7, #28
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
	...

0800aa5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d101      	bne.n	800aa74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa70:	2302      	movs	r3, #2
 800aa72:	e05a      	b.n	800ab2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2202      	movs	r2, #2
 800aa80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a21      	ldr	r2, [pc, #132]	; (800ab38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d022      	beq.n	800aafe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aac0:	d01d      	beq.n	800aafe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a1d      	ldr	r2, [pc, #116]	; (800ab3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d018      	beq.n	800aafe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a1b      	ldr	r2, [pc, #108]	; (800ab40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d013      	beq.n	800aafe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a1a      	ldr	r2, [pc, #104]	; (800ab44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d00e      	beq.n	800aafe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a18      	ldr	r2, [pc, #96]	; (800ab48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d009      	beq.n	800aafe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a17      	ldr	r2, [pc, #92]	; (800ab4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d004      	beq.n	800aafe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a15      	ldr	r2, [pc, #84]	; (800ab50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d10c      	bne.n	800ab18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	40010000 	.word	0x40010000
 800ab3c:	40000400 	.word	0x40000400
 800ab40:	40000800 	.word	0x40000800
 800ab44:	40000c00 	.word	0x40000c00
 800ab48:	40010400 	.word	0x40010400
 800ab4c:	40014000 	.word	0x40014000
 800ab50:	40001800 	.word	0x40001800

0800ab54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab7c:	b084      	sub	sp, #16
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	f107 001c 	add.w	r0, r7, #28
 800ab8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d122      	bne.n	800abda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800aba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800abbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d105      	bne.n	800abce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f001 fb1c 	bl	800c20c <USB_CoreReset>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73fb      	strb	r3, [r7, #15]
 800abd8:	e01a      	b.n	800ac10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f001 fb10 	bl	800c20c <USB_CoreReset>
 800abec:	4603      	mov	r3, r0
 800abee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800abf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d106      	bne.n	800ac04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	639a      	str	r2, [r3, #56]	; 0x38
 800ac02:	e005      	b.n	800ac10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ac10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d10b      	bne.n	800ac2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	f043 0206 	orr.w	r2, r3, #6
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f043 0220 	orr.w	r2, r3, #32
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac3a:	b004      	add	sp, #16
 800ac3c:	4770      	bx	lr
	...

0800ac40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b087      	sub	sp, #28
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d165      	bne.n	800ad20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	4a41      	ldr	r2, [pc, #260]	; (800ad5c <USB_SetTurnaroundTime+0x11c>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d906      	bls.n	800ac6a <USB_SetTurnaroundTime+0x2a>
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	4a40      	ldr	r2, [pc, #256]	; (800ad60 <USB_SetTurnaroundTime+0x120>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d202      	bcs.n	800ac6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ac64:	230f      	movs	r3, #15
 800ac66:	617b      	str	r3, [r7, #20]
 800ac68:	e062      	b.n	800ad30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	4a3c      	ldr	r2, [pc, #240]	; (800ad60 <USB_SetTurnaroundTime+0x120>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d306      	bcc.n	800ac80 <USB_SetTurnaroundTime+0x40>
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	4a3b      	ldr	r2, [pc, #236]	; (800ad64 <USB_SetTurnaroundTime+0x124>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d202      	bcs.n	800ac80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ac7a:	230e      	movs	r3, #14
 800ac7c:	617b      	str	r3, [r7, #20]
 800ac7e:	e057      	b.n	800ad30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	4a38      	ldr	r2, [pc, #224]	; (800ad64 <USB_SetTurnaroundTime+0x124>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d306      	bcc.n	800ac96 <USB_SetTurnaroundTime+0x56>
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	4a37      	ldr	r2, [pc, #220]	; (800ad68 <USB_SetTurnaroundTime+0x128>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d202      	bcs.n	800ac96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ac90:	230d      	movs	r3, #13
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	e04c      	b.n	800ad30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	4a33      	ldr	r2, [pc, #204]	; (800ad68 <USB_SetTurnaroundTime+0x128>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d306      	bcc.n	800acac <USB_SetTurnaroundTime+0x6c>
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	4a32      	ldr	r2, [pc, #200]	; (800ad6c <USB_SetTurnaroundTime+0x12c>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d802      	bhi.n	800acac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aca6:	230c      	movs	r3, #12
 800aca8:	617b      	str	r3, [r7, #20]
 800acaa:	e041      	b.n	800ad30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	4a2f      	ldr	r2, [pc, #188]	; (800ad6c <USB_SetTurnaroundTime+0x12c>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d906      	bls.n	800acc2 <USB_SetTurnaroundTime+0x82>
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	4a2e      	ldr	r2, [pc, #184]	; (800ad70 <USB_SetTurnaroundTime+0x130>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d802      	bhi.n	800acc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800acbc:	230b      	movs	r3, #11
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	e036      	b.n	800ad30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	4a2a      	ldr	r2, [pc, #168]	; (800ad70 <USB_SetTurnaroundTime+0x130>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d906      	bls.n	800acd8 <USB_SetTurnaroundTime+0x98>
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	4a29      	ldr	r2, [pc, #164]	; (800ad74 <USB_SetTurnaroundTime+0x134>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d802      	bhi.n	800acd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800acd2:	230a      	movs	r3, #10
 800acd4:	617b      	str	r3, [r7, #20]
 800acd6:	e02b      	b.n	800ad30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	4a26      	ldr	r2, [pc, #152]	; (800ad74 <USB_SetTurnaroundTime+0x134>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d906      	bls.n	800acee <USB_SetTurnaroundTime+0xae>
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	4a25      	ldr	r2, [pc, #148]	; (800ad78 <USB_SetTurnaroundTime+0x138>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d202      	bcs.n	800acee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ace8:	2309      	movs	r3, #9
 800acea:	617b      	str	r3, [r7, #20]
 800acec:	e020      	b.n	800ad30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	4a21      	ldr	r2, [pc, #132]	; (800ad78 <USB_SetTurnaroundTime+0x138>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d306      	bcc.n	800ad04 <USB_SetTurnaroundTime+0xc4>
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	4a20      	ldr	r2, [pc, #128]	; (800ad7c <USB_SetTurnaroundTime+0x13c>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d802      	bhi.n	800ad04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800acfe:	2308      	movs	r3, #8
 800ad00:	617b      	str	r3, [r7, #20]
 800ad02:	e015      	b.n	800ad30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	4a1d      	ldr	r2, [pc, #116]	; (800ad7c <USB_SetTurnaroundTime+0x13c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d906      	bls.n	800ad1a <USB_SetTurnaroundTime+0xda>
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	4a1c      	ldr	r2, [pc, #112]	; (800ad80 <USB_SetTurnaroundTime+0x140>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d202      	bcs.n	800ad1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ad14:	2307      	movs	r3, #7
 800ad16:	617b      	str	r3, [r7, #20]
 800ad18:	e00a      	b.n	800ad30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ad1a:	2306      	movs	r3, #6
 800ad1c:	617b      	str	r3, [r7, #20]
 800ad1e:	e007      	b.n	800ad30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d102      	bne.n	800ad2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ad26:	2309      	movs	r3, #9
 800ad28:	617b      	str	r3, [r7, #20]
 800ad2a:	e001      	b.n	800ad30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ad2c:	2309      	movs	r3, #9
 800ad2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	68da      	ldr	r2, [r3, #12]
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	029b      	lsls	r3, r3, #10
 800ad44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ad48:	431a      	orrs	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	371c      	adds	r7, #28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	00d8acbf 	.word	0x00d8acbf
 800ad60:	00e4e1c0 	.word	0x00e4e1c0
 800ad64:	00f42400 	.word	0x00f42400
 800ad68:	01067380 	.word	0x01067380
 800ad6c:	011a499f 	.word	0x011a499f
 800ad70:	01312cff 	.word	0x01312cff
 800ad74:	014ca43f 	.word	0x014ca43f
 800ad78:	016e3600 	.word	0x016e3600
 800ad7c:	01a6ab1f 	.word	0x01a6ab1f
 800ad80:	01e84800 	.word	0x01e84800

0800ad84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	f043 0201 	orr.w	r2, r3, #1
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b083      	sub	sp, #12
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	f023 0201 	bic.w	r2, r3, #1
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ade4:	78fb      	ldrb	r3, [r7, #3]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d115      	bne.n	800ae16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800adf6:	2001      	movs	r0, #1
 800adf8:	f7fa f8f8 	bl	8004fec <HAL_Delay>
      ms++;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	3301      	adds	r3, #1
 800ae00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f001 f972 	bl	800c0ec <USB_GetMode>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d01e      	beq.n	800ae4c <USB_SetCurrentMode+0x84>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2b31      	cmp	r3, #49	; 0x31
 800ae12:	d9f0      	bls.n	800adf6 <USB_SetCurrentMode+0x2e>
 800ae14:	e01a      	b.n	800ae4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ae16:	78fb      	ldrb	r3, [r7, #3]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d115      	bne.n	800ae48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ae28:	2001      	movs	r0, #1
 800ae2a:	f7fa f8df 	bl	8004fec <HAL_Delay>
      ms++;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3301      	adds	r3, #1
 800ae32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f001 f959 	bl	800c0ec <USB_GetMode>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <USB_SetCurrentMode+0x84>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b31      	cmp	r3, #49	; 0x31
 800ae44:	d9f0      	bls.n	800ae28 <USB_SetCurrentMode+0x60>
 800ae46:	e001      	b.n	800ae4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e005      	b.n	800ae58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2b32      	cmp	r3, #50	; 0x32
 800ae50:	d101      	bne.n	800ae56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e000      	b.n	800ae58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae60:	b084      	sub	sp, #16
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b086      	sub	sp, #24
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ae6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	613b      	str	r3, [r7, #16]
 800ae7e:	e009      	b.n	800ae94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	3340      	adds	r3, #64	; 0x40
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	3301      	adds	r3, #1
 800ae92:	613b      	str	r3, [r7, #16]
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2b0e      	cmp	r3, #14
 800ae98:	d9f2      	bls.n	800ae80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ae9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d11c      	bne.n	800aeda <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aeae:	f043 0302 	orr.w	r3, r3, #2
 800aeb2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	639a      	str	r2, [r3, #56]	; 0x38
 800aed8:	e00b      	b.n	800aef2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aede:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aef8:	461a      	mov	r2, r3
 800aefa:	2300      	movs	r3, #0
 800aefc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af04:	4619      	mov	r1, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af0c:	461a      	mov	r2, r3
 800af0e:	680b      	ldr	r3, [r1, #0]
 800af10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af14:	2b01      	cmp	r3, #1
 800af16:	d10c      	bne.n	800af32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800af18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d104      	bne.n	800af28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800af1e:	2100      	movs	r1, #0
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f945 	bl	800b1b0 <USB_SetDevSpeed>
 800af26:	e008      	b.n	800af3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800af28:	2101      	movs	r1, #1
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f940 	bl	800b1b0 <USB_SetDevSpeed>
 800af30:	e003      	b.n	800af3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800af32:	2103      	movs	r1, #3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f93b 	bl	800b1b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af3a:	2110      	movs	r1, #16
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f8f3 	bl	800b128 <USB_FlushTxFifo>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f90f 	bl	800b170 <USB_FlushRxFifo>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af62:	461a      	mov	r2, r3
 800af64:	2300      	movs	r3, #0
 800af66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af6e:	461a      	mov	r2, r3
 800af70:	2300      	movs	r3, #0
 800af72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af7a:	461a      	mov	r2, r3
 800af7c:	2300      	movs	r3, #0
 800af7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af80:	2300      	movs	r3, #0
 800af82:	613b      	str	r3, [r7, #16]
 800af84:	e043      	b.n	800b00e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	015a      	lsls	r2, r3, #5
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	4413      	add	r3, r2
 800af8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af9c:	d118      	bne.n	800afd0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10a      	bne.n	800afba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb0:	461a      	mov	r2, r3
 800afb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	e013      	b.n	800afe2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	015a      	lsls	r2, r3, #5
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	4413      	add	r3, r2
 800afc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc6:	461a      	mov	r2, r3
 800afc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800afcc:	6013      	str	r3, [r2, #0]
 800afce:	e008      	b.n	800afe2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	015a      	lsls	r2, r3, #5
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	4413      	add	r3, r2
 800afd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afdc:	461a      	mov	r2, r3
 800afde:	2300      	movs	r3, #0
 800afe0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	015a      	lsls	r2, r3, #5
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	4413      	add	r3, r2
 800afea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afee:	461a      	mov	r2, r3
 800aff0:	2300      	movs	r3, #0
 800aff2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	015a      	lsls	r2, r3, #5
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	4413      	add	r3, r2
 800affc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b000:	461a      	mov	r2, r3
 800b002:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b006:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	3301      	adds	r3, #1
 800b00c:	613b      	str	r3, [r7, #16]
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	429a      	cmp	r2, r3
 800b014:	d3b7      	bcc.n	800af86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b016:	2300      	movs	r3, #0
 800b018:	613b      	str	r3, [r7, #16]
 800b01a:	e043      	b.n	800b0a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	015a      	lsls	r2, r3, #5
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4413      	add	r3, r2
 800b024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b02e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b032:	d118      	bne.n	800b066 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10a      	bne.n	800b050 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	015a      	lsls	r2, r3, #5
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	4413      	add	r3, r2
 800b042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b046:	461a      	mov	r2, r3
 800b048:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b04c:	6013      	str	r3, [r2, #0]
 800b04e:	e013      	b.n	800b078 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4413      	add	r3, r2
 800b058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b05c:	461a      	mov	r2, r3
 800b05e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	e008      	b.n	800b078 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	015a      	lsls	r2, r3, #5
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	4413      	add	r3, r2
 800b06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b072:	461a      	mov	r2, r3
 800b074:	2300      	movs	r3, #0
 800b076:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	015a      	lsls	r2, r3, #5
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	4413      	add	r3, r2
 800b080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b084:	461a      	mov	r2, r3
 800b086:	2300      	movs	r3, #0
 800b088:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	015a      	lsls	r2, r3, #5
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	4413      	add	r3, r2
 800b092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b096:	461a      	mov	r2, r3
 800b098:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b09c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	613b      	str	r3, [r7, #16]
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d3b7      	bcc.n	800b01c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b0cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d105      	bne.n	800b0e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	f043 0210 	orr.w	r2, r3, #16
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	699a      	ldr	r2, [r3, #24]
 800b0e4:	4b0f      	ldr	r3, [pc, #60]	; (800b124 <USB_DevInit+0x2c4>)
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d005      	beq.n	800b0fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	699b      	ldr	r3, [r3, #24]
 800b0f6:	f043 0208 	orr.w	r2, r3, #8
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b100:	2b01      	cmp	r3, #1
 800b102:	d107      	bne.n	800b114 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b10c:	f043 0304 	orr.w	r3, r3, #4
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b114:	7dfb      	ldrb	r3, [r7, #23]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b120:	b004      	add	sp, #16
 800b122:	4770      	bx	lr
 800b124:	803c3800 	.word	0x803c3800

0800b128 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b132:	2300      	movs	r3, #0
 800b134:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	019b      	lsls	r3, r3, #6
 800b13a:	f043 0220 	orr.w	r2, r3, #32
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3301      	adds	r3, #1
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	4a08      	ldr	r2, [pc, #32]	; (800b16c <USB_FlushTxFifo+0x44>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d901      	bls.n	800b152 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800b14e:	2303      	movs	r3, #3
 800b150:	e006      	b.n	800b160 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	f003 0320 	and.w	r3, r3, #32
 800b15a:	2b20      	cmp	r3, #32
 800b15c:	d0f1      	beq.n	800b142 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3714      	adds	r7, #20
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	00030d40 	.word	0x00030d40

0800b170 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2210      	movs	r2, #16
 800b180:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3301      	adds	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]
 800b188:	4a08      	ldr	r2, [pc, #32]	; (800b1ac <USB_FlushRxFifo+0x3c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d901      	bls.n	800b192 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800b18e:	2303      	movs	r3, #3
 800b190:	e006      	b.n	800b1a0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	f003 0310 	and.w	r3, r3, #16
 800b19a:	2b10      	cmp	r3, #16
 800b19c:	d0f1      	beq.n	800b182 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	00030d40 	.word	0x00030d40

0800b1b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	78fb      	ldrb	r3, [r7, #3]
 800b1ca:	68f9      	ldr	r1, [r7, #12]
 800b1cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b087      	sub	sp, #28
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	f003 0306 	and.w	r3, r3, #6
 800b1fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d102      	bne.n	800b208 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b202:	2300      	movs	r3, #0
 800b204:	75fb      	strb	r3, [r7, #23]
 800b206:	e00a      	b.n	800b21e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d002      	beq.n	800b214 <USB_GetDevSpeed+0x32>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b06      	cmp	r3, #6
 800b212:	d102      	bne.n	800b21a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b214:	2302      	movs	r3, #2
 800b216:	75fb      	strb	r3, [r7, #23]
 800b218:	e001      	b.n	800b21e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b21a:	230f      	movs	r3, #15
 800b21c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b220:	4618      	mov	r0, r3
 800b222:	371c      	adds	r7, #28
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	785b      	ldrb	r3, [r3, #1]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d13a      	bne.n	800b2be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b24e:	69da      	ldr	r2, [r3, #28]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	f003 030f 	and.w	r3, r3, #15
 800b258:	2101      	movs	r1, #1
 800b25a:	fa01 f303 	lsl.w	r3, r1, r3
 800b25e:	b29b      	uxth	r3, r3
 800b260:	68f9      	ldr	r1, [r7, #12]
 800b262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b266:	4313      	orrs	r3, r2
 800b268:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	015a      	lsls	r2, r3, #5
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	4413      	add	r3, r2
 800b272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d155      	bne.n	800b32c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	4413      	add	r3, r2
 800b288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	78db      	ldrb	r3, [r3, #3]
 800b29a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b29c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	059b      	lsls	r3, r3, #22
 800b2a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	0151      	lsls	r1, r2, #5
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	440a      	add	r2, r1
 800b2ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	e036      	b.n	800b32c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c4:	69da      	ldr	r2, [r3, #28]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	f003 030f 	and.w	r3, r3, #15
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2d4:	041b      	lsls	r3, r3, #16
 800b2d6:	68f9      	ldr	r1, [r7, #12]
 800b2d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	015a      	lsls	r2, r3, #5
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d11a      	bne.n	800b32c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	015a      	lsls	r2, r3, #5
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	78db      	ldrb	r3, [r3, #3]
 800b310:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b312:	430b      	orrs	r3, r1
 800b314:	4313      	orrs	r3, r2
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	0151      	lsls	r1, r2, #5
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	440a      	add	r2, r1
 800b31e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b32a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
	...

0800b33c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	785b      	ldrb	r3, [r3, #1]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d161      	bne.n	800b41c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	015a      	lsls	r2, r3, #5
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4413      	add	r3, r2
 800b360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b36a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b36e:	d11f      	bne.n	800b3b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	015a      	lsls	r2, r3, #5
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	4413      	add	r3, r2
 800b378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	0151      	lsls	r1, r2, #5
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	440a      	add	r2, r1
 800b386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b38a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b38e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	015a      	lsls	r2, r3, #5
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4413      	add	r3, r2
 800b398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68ba      	ldr	r2, [r7, #8]
 800b3a0:	0151      	lsls	r1, r2, #5
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	440a      	add	r2, r1
 800b3a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	f003 030f 	and.w	r3, r3, #15
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	43db      	mvns	r3, r3
 800b3ca:	68f9      	ldr	r1, [r7, #12]
 800b3cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3da:	69da      	ldr	r2, [r3, #28]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	f003 030f 	and.w	r3, r3, #15
 800b3e4:	2101      	movs	r1, #1
 800b3e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	43db      	mvns	r3, r3
 800b3ee:	68f9      	ldr	r1, [r7, #12]
 800b3f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	015a      	lsls	r2, r3, #5
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	4413      	add	r3, r2
 800b400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	0159      	lsls	r1, r3, #5
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	440b      	add	r3, r1
 800b40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b412:	4619      	mov	r1, r3
 800b414:	4b35      	ldr	r3, [pc, #212]	; (800b4ec <USB_DeactivateEndpoint+0x1b0>)
 800b416:	4013      	ands	r3, r2
 800b418:	600b      	str	r3, [r1, #0]
 800b41a:	e060      	b.n	800b4de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	015a      	lsls	r2, r3, #5
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4413      	add	r3, r2
 800b424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b42e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b432:	d11f      	bne.n	800b474 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	015a      	lsls	r2, r3, #5
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	4413      	add	r3, r2
 800b43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	0151      	lsls	r1, r2, #5
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	440a      	add	r2, r1
 800b44a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b44e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b452:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	015a      	lsls	r2, r3, #5
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	4413      	add	r3, r2
 800b45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	0151      	lsls	r1, r2, #5
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	440a      	add	r2, r1
 800b46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b46e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b472:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b47a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	f003 030f 	and.w	r3, r3, #15
 800b484:	2101      	movs	r1, #1
 800b486:	fa01 f303 	lsl.w	r3, r1, r3
 800b48a:	041b      	lsls	r3, r3, #16
 800b48c:	43db      	mvns	r3, r3
 800b48e:	68f9      	ldr	r1, [r7, #12]
 800b490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b494:	4013      	ands	r3, r2
 800b496:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b49e:	69da      	ldr	r2, [r3, #28]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	f003 030f 	and.w	r3, r3, #15
 800b4a8:	2101      	movs	r1, #1
 800b4aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ae:	041b      	lsls	r3, r3, #16
 800b4b0:	43db      	mvns	r3, r3
 800b4b2:	68f9      	ldr	r1, [r7, #12]
 800b4b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	015a      	lsls	r2, r3, #5
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	0159      	lsls	r1, r3, #5
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	440b      	add	r3, r1
 800b4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	4b05      	ldr	r3, [pc, #20]	; (800b4f0 <USB_DeactivateEndpoint+0x1b4>)
 800b4da:	4013      	ands	r3, r2
 800b4dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr
 800b4ec:	ec337800 	.word	0xec337800
 800b4f0:	eff37800 	.word	0xeff37800

0800b4f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08a      	sub	sp, #40	; 0x28
 800b4f8:	af02      	add	r7, sp, #8
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	4613      	mov	r3, r2
 800b500:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	785b      	ldrb	r3, [r3, #1]
 800b510:	2b01      	cmp	r3, #1
 800b512:	f040 815c 	bne.w	800b7ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d132      	bne.n	800b584 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	015a      	lsls	r2, r3, #5
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	4413      	add	r3, r2
 800b526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	69ba      	ldr	r2, [r7, #24]
 800b52e:	0151      	lsls	r1, r2, #5
 800b530:	69fa      	ldr	r2, [r7, #28]
 800b532:	440a      	add	r2, r1
 800b534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b538:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b53c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b540:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	015a      	lsls	r2, r3, #5
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	4413      	add	r3, r2
 800b54a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	69ba      	ldr	r2, [r7, #24]
 800b552:	0151      	lsls	r1, r2, #5
 800b554:	69fa      	ldr	r2, [r7, #28]
 800b556:	440a      	add	r2, r1
 800b558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b55c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	015a      	lsls	r2, r3, #5
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	4413      	add	r3, r2
 800b56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	69ba      	ldr	r2, [r7, #24]
 800b572:	0151      	lsls	r1, r2, #5
 800b574:	69fa      	ldr	r2, [r7, #28]
 800b576:	440a      	add	r2, r1
 800b578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b57c:	0cdb      	lsrs	r3, r3, #19
 800b57e:	04db      	lsls	r3, r3, #19
 800b580:	6113      	str	r3, [r2, #16]
 800b582:	e074      	b.n	800b66e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	015a      	lsls	r2, r3, #5
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	4413      	add	r3, r2
 800b58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	69ba      	ldr	r2, [r7, #24]
 800b594:	0151      	lsls	r1, r2, #5
 800b596:	69fa      	ldr	r2, [r7, #28]
 800b598:	440a      	add	r2, r1
 800b59a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b59e:	0cdb      	lsrs	r3, r3, #19
 800b5a0:	04db      	lsls	r3, r3, #19
 800b5a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	015a      	lsls	r2, r3, #5
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	69ba      	ldr	r2, [r7, #24]
 800b5b4:	0151      	lsls	r1, r2, #5
 800b5b6:	69fa      	ldr	r2, [r7, #28]
 800b5b8:	440a      	add	r2, r1
 800b5ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b5c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	015a      	lsls	r2, r3, #5
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6959      	ldr	r1, [r3, #20]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	440b      	add	r3, r1
 800b5e0:	1e59      	subs	r1, r3, #1
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b5ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b5ec:	4b9d      	ldr	r3, [pc, #628]	; (800b864 <USB_EPStartXfer+0x370>)
 800b5ee:	400b      	ands	r3, r1
 800b5f0:	69b9      	ldr	r1, [r7, #24]
 800b5f2:	0148      	lsls	r0, r1, #5
 800b5f4:	69f9      	ldr	r1, [r7, #28]
 800b5f6:	4401      	add	r1, r0
 800b5f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	015a      	lsls	r2, r3, #5
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	4413      	add	r3, r2
 800b608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b60c:	691a      	ldr	r2, [r3, #16]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b616:	69b9      	ldr	r1, [r7, #24]
 800b618:	0148      	lsls	r0, r1, #5
 800b61a:	69f9      	ldr	r1, [r7, #28]
 800b61c:	4401      	add	r1, r0
 800b61e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b622:	4313      	orrs	r3, r2
 800b624:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	78db      	ldrb	r3, [r3, #3]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d11f      	bne.n	800b66e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	015a      	lsls	r2, r3, #5
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	4413      	add	r3, r2
 800b636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	69ba      	ldr	r2, [r7, #24]
 800b63e:	0151      	lsls	r1, r2, #5
 800b640:	69fa      	ldr	r2, [r7, #28]
 800b642:	440a      	add	r2, r1
 800b644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b648:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b64c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	69ba      	ldr	r2, [r7, #24]
 800b65e:	0151      	lsls	r1, r2, #5
 800b660:	69fa      	ldr	r2, [r7, #28]
 800b662:	440a      	add	r2, r1
 800b664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b66c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b66e:	79fb      	ldrb	r3, [r7, #7]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d14b      	bne.n	800b70c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d009      	beq.n	800b690 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	4413      	add	r3, r2
 800b684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b688:	461a      	mov	r2, r3
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	78db      	ldrb	r3, [r3, #3]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d128      	bne.n	800b6ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d110      	bne.n	800b6ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	69ba      	ldr	r2, [r7, #24]
 800b6b8:	0151      	lsls	r1, r2, #5
 800b6ba:	69fa      	ldr	r2, [r7, #28]
 800b6bc:	440a      	add	r2, r1
 800b6be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	e00f      	b.n	800b6ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	015a      	lsls	r2, r3, #5
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	69ba      	ldr	r2, [r7, #24]
 800b6da:	0151      	lsls	r1, r2, #5
 800b6dc:	69fa      	ldr	r2, [r7, #28]
 800b6de:	440a      	add	r2, r1
 800b6e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	015a      	lsls	r2, r3, #5
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	69ba      	ldr	r2, [r7, #24]
 800b6fa:	0151      	lsls	r1, r2, #5
 800b6fc:	69fa      	ldr	r2, [r7, #28]
 800b6fe:	440a      	add	r2, r1
 800b700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b704:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b708:	6013      	str	r3, [r2, #0]
 800b70a:	e12f      	b.n	800b96c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	4413      	add	r3, r2
 800b714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	69ba      	ldr	r2, [r7, #24]
 800b71c:	0151      	lsls	r1, r2, #5
 800b71e:	69fa      	ldr	r2, [r7, #28]
 800b720:	440a      	add	r2, r1
 800b722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b726:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b72a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	78db      	ldrb	r3, [r3, #3]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d015      	beq.n	800b760 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	695b      	ldr	r3, [r3, #20]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f000 8117 	beq.w	800b96c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	f003 030f 	and.w	r3, r3, #15
 800b74e:	2101      	movs	r1, #1
 800b750:	fa01 f303 	lsl.w	r3, r1, r3
 800b754:	69f9      	ldr	r1, [r7, #28]
 800b756:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b75a:	4313      	orrs	r3, r2
 800b75c:	634b      	str	r3, [r1, #52]	; 0x34
 800b75e:	e105      	b.n	800b96c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d110      	bne.n	800b792 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	4413      	add	r3, r2
 800b778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	69ba      	ldr	r2, [r7, #24]
 800b780:	0151      	lsls	r1, r2, #5
 800b782:	69fa      	ldr	r2, [r7, #28]
 800b784:	440a      	add	r2, r1
 800b786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b78a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b78e:	6013      	str	r3, [r2, #0]
 800b790:	e00f      	b.n	800b7b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	015a      	lsls	r2, r3, #5
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	4413      	add	r3, r2
 800b79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	0151      	lsls	r1, r2, #5
 800b7a4:	69fa      	ldr	r2, [r7, #28]
 800b7a6:	440a      	add	r2, r1
 800b7a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	68d9      	ldr	r1, [r3, #12]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	781a      	ldrb	r2, [r3, #0]
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	b298      	uxth	r0, r3
 800b7c0:	79fb      	ldrb	r3, [r7, #7]
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f000 fa2b 	bl	800bc22 <USB_WritePacket>
 800b7cc:	e0ce      	b.n	800b96c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	015a      	lsls	r2, r3, #5
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	69ba      	ldr	r2, [r7, #24]
 800b7de:	0151      	lsls	r1, r2, #5
 800b7e0:	69fa      	ldr	r2, [r7, #28]
 800b7e2:	440a      	add	r2, r1
 800b7e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7e8:	0cdb      	lsrs	r3, r3, #19
 800b7ea:	04db      	lsls	r3, r3, #19
 800b7ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	015a      	lsls	r2, r3, #5
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	69ba      	ldr	r2, [r7, #24]
 800b7fe:	0151      	lsls	r1, r2, #5
 800b800:	69fa      	ldr	r2, [r7, #28]
 800b802:	440a      	add	r2, r1
 800b804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b808:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b80c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b810:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d126      	bne.n	800b868 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	015a      	lsls	r2, r3, #5
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	4413      	add	r3, r2
 800b822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b826:	691a      	ldr	r2, [r3, #16]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b830:	69b9      	ldr	r1, [r7, #24]
 800b832:	0148      	lsls	r0, r1, #5
 800b834:	69f9      	ldr	r1, [r7, #28]
 800b836:	4401      	add	r1, r0
 800b838:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b83c:	4313      	orrs	r3, r2
 800b83e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	015a      	lsls	r2, r3, #5
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	4413      	add	r3, r2
 800b848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	0151      	lsls	r1, r2, #5
 800b852:	69fa      	ldr	r2, [r7, #28]
 800b854:	440a      	add	r2, r1
 800b856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b85a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b85e:	6113      	str	r3, [r2, #16]
 800b860:	e036      	b.n	800b8d0 <USB_EPStartXfer+0x3dc>
 800b862:	bf00      	nop
 800b864:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	695a      	ldr	r2, [r3, #20]
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	4413      	add	r3, r2
 800b872:	1e5a      	subs	r2, r3, #1
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	015a      	lsls	r2, r3, #5
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	4413      	add	r3, r2
 800b886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b88a:	691a      	ldr	r2, [r3, #16]
 800b88c:	8afb      	ldrh	r3, [r7, #22]
 800b88e:	04d9      	lsls	r1, r3, #19
 800b890:	4b39      	ldr	r3, [pc, #228]	; (800b978 <USB_EPStartXfer+0x484>)
 800b892:	400b      	ands	r3, r1
 800b894:	69b9      	ldr	r1, [r7, #24]
 800b896:	0148      	lsls	r0, r1, #5
 800b898:	69f9      	ldr	r1, [r7, #28]
 800b89a:	4401      	add	r1, r0
 800b89c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	015a      	lsls	r2, r3, #5
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b0:	691a      	ldr	r2, [r3, #16]
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	8af9      	ldrh	r1, [r7, #22]
 800b8b8:	fb01 f303 	mul.w	r3, r1, r3
 800b8bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8c0:	69b9      	ldr	r1, [r7, #24]
 800b8c2:	0148      	lsls	r0, r1, #5
 800b8c4:	69f9      	ldr	r1, [r7, #28]
 800b8c6:	4401      	add	r1, r0
 800b8c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b8d0:	79fb      	ldrb	r3, [r7, #7]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d10d      	bne.n	800b8f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d009      	beq.n	800b8f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	68d9      	ldr	r1, [r3, #12]
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ee:	460a      	mov	r2, r1
 800b8f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	78db      	ldrb	r3, [r3, #3]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d128      	bne.n	800b94c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b906:	2b00      	cmp	r3, #0
 800b908:	d110      	bne.n	800b92c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	015a      	lsls	r2, r3, #5
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	4413      	add	r3, r2
 800b912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	69ba      	ldr	r2, [r7, #24]
 800b91a:	0151      	lsls	r1, r2, #5
 800b91c:	69fa      	ldr	r2, [r7, #28]
 800b91e:	440a      	add	r2, r1
 800b920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b924:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b928:	6013      	str	r3, [r2, #0]
 800b92a:	e00f      	b.n	800b94c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	015a      	lsls	r2, r3, #5
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	4413      	add	r3, r2
 800b934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	69ba      	ldr	r2, [r7, #24]
 800b93c:	0151      	lsls	r1, r2, #5
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	440a      	add	r2, r1
 800b942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b94a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	015a      	lsls	r2, r3, #5
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	4413      	add	r3, r2
 800b954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	69ba      	ldr	r2, [r7, #24]
 800b95c:	0151      	lsls	r1, r2, #5
 800b95e:	69fa      	ldr	r2, [r7, #28]
 800b960:	440a      	add	r2, r1
 800b962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b966:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b96a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3720      	adds	r7, #32
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	1ff80000 	.word	0x1ff80000

0800b97c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b087      	sub	sp, #28
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	4613      	mov	r3, r2
 800b988:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	785b      	ldrb	r3, [r3, #1]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	f040 80cd 	bne.w	800bb38 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d132      	bne.n	800ba0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	015a      	lsls	r2, r3, #5
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	0151      	lsls	r1, r2, #5
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	440a      	add	r2, r1
 800b9bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b9c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b9c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	015a      	lsls	r2, r3, #5
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	0151      	lsls	r1, r2, #5
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	440a      	add	r2, r1
 800b9e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	015a      	lsls	r2, r3, #5
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9f6:	691b      	ldr	r3, [r3, #16]
 800b9f8:	693a      	ldr	r2, [r7, #16]
 800b9fa:	0151      	lsls	r1, r2, #5
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	440a      	add	r2, r1
 800ba00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba04:	0cdb      	lsrs	r3, r3, #19
 800ba06:	04db      	lsls	r3, r3, #19
 800ba08:	6113      	str	r3, [r2, #16]
 800ba0a:	e04e      	b.n	800baaa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	015a      	lsls	r2, r3, #5
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	4413      	add	r3, r2
 800ba14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	0151      	lsls	r1, r2, #5
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	440a      	add	r2, r1
 800ba22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba26:	0cdb      	lsrs	r3, r3, #19
 800ba28:	04db      	lsls	r3, r3, #19
 800ba2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	015a      	lsls	r2, r3, #5
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	4413      	add	r3, r2
 800ba34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	0151      	lsls	r1, r2, #5
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	440a      	add	r2, r1
 800ba42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	695a      	ldr	r2, [r3, #20]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d903      	bls.n	800ba64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	689a      	ldr	r2, [r3, #8]
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	015a      	lsls	r2, r3, #5
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	693a      	ldr	r2, [r7, #16]
 800ba74:	0151      	lsls	r1, r2, #5
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	440a      	add	r2, r1
 800ba7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	015a      	lsls	r2, r3, #5
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba90:	691a      	ldr	r2, [r3, #16]
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	695b      	ldr	r3, [r3, #20]
 800ba96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba9a:	6939      	ldr	r1, [r7, #16]
 800ba9c:	0148      	lsls	r0, r1, #5
 800ba9e:	6979      	ldr	r1, [r7, #20]
 800baa0:	4401      	add	r1, r0
 800baa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800baa6:	4313      	orrs	r3, r2
 800baa8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800baaa:	79fb      	ldrb	r3, [r7, #7]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d11e      	bne.n	800baee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	691b      	ldr	r3, [r3, #16]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d009      	beq.n	800bacc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	015a      	lsls	r2, r3, #5
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	4413      	add	r3, r2
 800bac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac4:	461a      	mov	r2, r3
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	015a      	lsls	r2, r3, #5
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	4413      	add	r3, r2
 800bad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	0151      	lsls	r1, r2, #5
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	440a      	add	r2, r1
 800bae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800baea:	6013      	str	r3, [r2, #0]
 800baec:	e092      	b.n	800bc14 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	015a      	lsls	r2, r3, #5
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	4413      	add	r3, r2
 800baf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	0151      	lsls	r1, r2, #5
 800bb00:	697a      	ldr	r2, [r7, #20]
 800bb02:	440a      	add	r2, r1
 800bb04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d07e      	beq.n	800bc14 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	f003 030f 	and.w	r3, r3, #15
 800bb26:	2101      	movs	r1, #1
 800bb28:	fa01 f303 	lsl.w	r3, r1, r3
 800bb2c:	6979      	ldr	r1, [r7, #20]
 800bb2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb32:	4313      	orrs	r3, r2
 800bb34:	634b      	str	r3, [r1, #52]	; 0x34
 800bb36:	e06d      	b.n	800bc14 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	015a      	lsls	r2, r3, #5
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	693a      	ldr	r2, [r7, #16]
 800bb48:	0151      	lsls	r1, r2, #5
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	440a      	add	r2, r1
 800bb4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb52:	0cdb      	lsrs	r3, r3, #19
 800bb54:	04db      	lsls	r3, r3, #19
 800bb56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	015a      	lsls	r2, r3, #5
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	4413      	add	r3, r2
 800bb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	693a      	ldr	r2, [r7, #16]
 800bb68:	0151      	lsls	r1, r2, #5
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	440a      	add	r2, r1
 800bb6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb7a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d003      	beq.n	800bb8c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	689a      	ldr	r2, [r3, #8]
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	015a      	lsls	r2, r3, #5
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	4413      	add	r3, r2
 800bb94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	0151      	lsls	r1, r2, #5
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	440a      	add	r2, r1
 800bba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	015a      	lsls	r2, r3, #5
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb8:	691a      	ldr	r2, [r3, #16]
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbc2:	6939      	ldr	r1, [r7, #16]
 800bbc4:	0148      	lsls	r0, r1, #5
 800bbc6:	6979      	ldr	r1, [r7, #20]
 800bbc8:	4401      	add	r1, r0
 800bbca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bbd2:	79fb      	ldrb	r3, [r7, #7]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d10d      	bne.n	800bbf4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d009      	beq.n	800bbf4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	68d9      	ldr	r1, [r3, #12]
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	015a      	lsls	r2, r3, #5
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	4413      	add	r3, r2
 800bbec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf0:	460a      	mov	r2, r1
 800bbf2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	015a      	lsls	r2, r3, #5
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	0151      	lsls	r1, r2, #5
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	440a      	add	r2, r1
 800bc0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	371c      	adds	r7, #28
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b089      	sub	sp, #36	; 0x24
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	60f8      	str	r0, [r7, #12]
 800bc2a:	60b9      	str	r1, [r7, #8]
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	461a      	mov	r2, r3
 800bc30:	460b      	mov	r3, r1
 800bc32:	71fb      	strb	r3, [r7, #7]
 800bc34:	4613      	mov	r3, r2
 800bc36:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bc40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d123      	bne.n	800bc90 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bc48:	88bb      	ldrh	r3, [r7, #4]
 800bc4a:	3303      	adds	r3, #3
 800bc4c:	089b      	lsrs	r3, r3, #2
 800bc4e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bc50:	2300      	movs	r3, #0
 800bc52:	61bb      	str	r3, [r7, #24]
 800bc54:	e018      	b.n	800bc88 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bc56:	79fb      	ldrb	r3, [r7, #7]
 800bc58:	031a      	lsls	r2, r3, #12
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc62:	461a      	mov	r2, r3
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	3301      	adds	r3, #1
 800bc74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	3301      	adds	r3, #1
 800bc86:	61bb      	str	r3, [r7, #24]
 800bc88:	69ba      	ldr	r2, [r7, #24]
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d3e2      	bcc.n	800bc56 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3724      	adds	r7, #36	; 0x24
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b08b      	sub	sp, #44	; 0x2c
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	60f8      	str	r0, [r7, #12]
 800bca6:	60b9      	str	r1, [r7, #8]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bcb4:	88fb      	ldrh	r3, [r7, #6]
 800bcb6:	089b      	lsrs	r3, r3, #2
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bcbc:	88fb      	ldrh	r3, [r7, #6]
 800bcbe:	f003 0303 	and.w	r3, r3, #3
 800bcc2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	623b      	str	r3, [r7, #32]
 800bcc8:	e014      	b.n	800bcf4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	601a      	str	r2, [r3, #0]
    pDest++;
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd8:	3301      	adds	r3, #1
 800bcda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcde:	3301      	adds	r3, #1
 800bce0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce4:	3301      	adds	r3, #1
 800bce6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	3301      	adds	r3, #1
 800bcec:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bcee:	6a3b      	ldr	r3, [r7, #32]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	623b      	str	r3, [r7, #32]
 800bcf4:	6a3a      	ldr	r2, [r7, #32]
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d3e6      	bcc.n	800bcca <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bcfc:	8bfb      	ldrh	r3, [r7, #30]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d01e      	beq.n	800bd40 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bd02:	2300      	movs	r3, #0
 800bd04:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	f107 0310 	add.w	r3, r7, #16
 800bd12:	6812      	ldr	r2, [r2, #0]
 800bd14:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bd16:	693a      	ldr	r2, [r7, #16]
 800bd18:	6a3b      	ldr	r3, [r7, #32]
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	00db      	lsls	r3, r3, #3
 800bd1e:	fa22 f303 	lsr.w	r3, r2, r3
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd26:	701a      	strb	r2, [r3, #0]
      i++;
 800bd28:	6a3b      	ldr	r3, [r7, #32]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	623b      	str	r3, [r7, #32]
      pDest++;
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd30:	3301      	adds	r3, #1
 800bd32:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bd34:	8bfb      	ldrh	r3, [r7, #30]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bd3a:	8bfb      	ldrh	r3, [r7, #30]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1ea      	bne.n	800bd16 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	372c      	adds	r7, #44	; 0x2c
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd4e:	b480      	push	{r7}
 800bd50:	b085      	sub	sp, #20
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	785b      	ldrb	r3, [r3, #1]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d12c      	bne.n	800bdc4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	015a      	lsls	r2, r3, #5
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	4413      	add	r3, r2
 800bd72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	db12      	blt.n	800bda2 <USB_EPSetStall+0x54>
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00f      	beq.n	800bda2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	015a      	lsls	r2, r3, #5
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4413      	add	r3, r2
 800bd8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	0151      	lsls	r1, r2, #5
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	440a      	add	r2, r1
 800bd98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bda0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	015a      	lsls	r2, r3, #5
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	4413      	add	r3, r2
 800bdaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	0151      	lsls	r1, r2, #5
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	440a      	add	r2, r1
 800bdb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bdc0:	6013      	str	r3, [r2, #0]
 800bdc2:	e02b      	b.n	800be1c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	db12      	blt.n	800bdfc <USB_EPSetStall+0xae>
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00f      	beq.n	800bdfc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	015a      	lsls	r2, r3, #5
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4413      	add	r3, r2
 800bde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	0151      	lsls	r1, r2, #5
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	440a      	add	r2, r1
 800bdf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bdfa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4413      	add	r3, r2
 800be04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	0151      	lsls	r1, r2, #5
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	440a      	add	r2, r1
 800be12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3714      	adds	r7, #20
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be2a:	b480      	push	{r7}
 800be2c:	b085      	sub	sp, #20
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	785b      	ldrb	r3, [r3, #1]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d128      	bne.n	800be98 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	015a      	lsls	r2, r3, #5
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	4413      	add	r3, r2
 800be4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	0151      	lsls	r1, r2, #5
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	440a      	add	r2, r1
 800be5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	78db      	ldrb	r3, [r3, #3]
 800be6a:	2b03      	cmp	r3, #3
 800be6c:	d003      	beq.n	800be76 <USB_EPClearStall+0x4c>
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	78db      	ldrb	r3, [r3, #3]
 800be72:	2b02      	cmp	r3, #2
 800be74:	d138      	bne.n	800bee8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	015a      	lsls	r2, r3, #5
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	4413      	add	r3, r2
 800be7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	0151      	lsls	r1, r2, #5
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	440a      	add	r2, r1
 800be8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be94:	6013      	str	r3, [r2, #0]
 800be96:	e027      	b.n	800bee8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	015a      	lsls	r2, r3, #5
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	4413      	add	r3, r2
 800bea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	0151      	lsls	r1, r2, #5
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	440a      	add	r2, r1
 800beae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800beb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	78db      	ldrb	r3, [r3, #3]
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d003      	beq.n	800bec8 <USB_EPClearStall+0x9e>
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	78db      	ldrb	r3, [r3, #3]
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d10f      	bne.n	800bee8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	015a      	lsls	r2, r3, #5
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4413      	add	r3, r2
 800bed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	0151      	lsls	r1, r2, #5
 800beda:	68fa      	ldr	r2, [r7, #12]
 800bedc:	440a      	add	r2, r1
 800bede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bee6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3714      	adds	r7, #20
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bef6:	b480      	push	{r7}
 800bef8:	b085      	sub	sp, #20
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	460b      	mov	r3, r1
 800bf00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bf18:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	78fb      	ldrb	r3, [r7, #3]
 800bf24:	011b      	lsls	r3, r3, #4
 800bf26:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bf2a:	68f9      	ldr	r1, [r7, #12]
 800bf2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf30:	4313      	orrs	r3, r2
 800bf32:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b085      	sub	sp, #20
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf5c:	f023 0303 	bic.w	r3, r3, #3
 800bf60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf70:	f023 0302 	bic.w	r3, r3, #2
 800bf74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf9e:	f023 0303 	bic.w	r3, r3, #3
 800bfa2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfb2:	f043 0302 	orr.w	r3, r3, #2
 800bfb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bfb8:	2300      	movs	r3, #0
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr

0800bfc6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bfc6:	b480      	push	{r7}
 800bfc8:	b085      	sub	sp, #20
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	4013      	ands	r3, r2
 800bfdc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bfde:	68fb      	ldr	r3, [r7, #12]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c008:	69db      	ldr	r3, [r3, #28]
 800c00a:	68ba      	ldr	r2, [r7, #8]
 800c00c:	4013      	ands	r3, r2
 800c00e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	0c1b      	lsrs	r3, r3, #16
}
 800c014:	4618      	mov	r0, r3
 800c016:	3714      	adds	r7, #20
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c03c:	69db      	ldr	r3, [r3, #28]
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	4013      	ands	r3, r2
 800c042:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	b29b      	uxth	r3, r3
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3714      	adds	r7, #20
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	460b      	mov	r3, r1
 800c05e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c064:	78fb      	ldrb	r3, [r7, #3]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	4413      	add	r3, r2
 800c06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c07a:	695b      	ldr	r3, [r3, #20]
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	4013      	ands	r3, r2
 800c080:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c082:	68bb      	ldr	r3, [r7, #8]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c090:	b480      	push	{r7}
 800c092:	b087      	sub	sp, #28
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	460b      	mov	r3, r1
 800c09a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c0b4:	78fb      	ldrb	r3, [r7, #3]
 800c0b6:	f003 030f 	and.w	r3, r3, #15
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c0:	01db      	lsls	r3, r3, #7
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c0ca:	78fb      	ldrb	r3, [r7, #3]
 800c0cc:	015a      	lsls	r2, r3, #5
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	693a      	ldr	r2, [r7, #16]
 800c0da:	4013      	ands	r3, r2
 800c0dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c0de:	68bb      	ldr	r3, [r7, #8]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	371c      	adds	r7, #28
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	f003 0301 	and.w	r3, r3, #1
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c122:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c126:	f023 0307 	bic.w	r3, r3, #7
 800c12a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c13a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c13e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
	...

0800c150 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	460b      	mov	r3, r1
 800c15a:	607a      	str	r2, [r7, #4]
 800c15c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	333c      	adds	r3, #60	; 0x3c
 800c166:	3304      	adds	r3, #4
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	4a26      	ldr	r2, [pc, #152]	; (800c208 <USB_EP0_OutStart+0xb8>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d90a      	bls.n	800c18a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c184:	d101      	bne.n	800c18a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c186:	2300      	movs	r3, #0
 800c188:	e037      	b.n	800c1fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c190:	461a      	mov	r2, r3
 800c192:	2300      	movs	r3, #0
 800c194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	697a      	ldr	r2, [r7, #20]
 800c1a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	697a      	ldr	r2, [r7, #20]
 800c1b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1b8:	f043 0318 	orr.w	r3, r3, #24
 800c1bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	697a      	ldr	r2, [r7, #20]
 800c1c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c1d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c1d2:	7afb      	ldrb	r3, [r7, #11]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d10f      	bne.n	800c1f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1de:	461a      	mov	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	697a      	ldr	r2, [r7, #20]
 800c1ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c1f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	371c      	adds	r7, #28
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	4f54300a 	.word	0x4f54300a

0800c20c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c214:	2300      	movs	r3, #0
 800c216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3301      	adds	r3, #1
 800c21c:	60fb      	str	r3, [r7, #12]
 800c21e:	4a13      	ldr	r2, [pc, #76]	; (800c26c <USB_CoreReset+0x60>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d901      	bls.n	800c228 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800c224:	2303      	movs	r3, #3
 800c226:	e01a      	b.n	800c25e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	daf3      	bge.n	800c218 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c230:	2300      	movs	r3, #0
 800c232:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	f043 0201 	orr.w	r2, r3, #1
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3301      	adds	r3, #1
 800c244:	60fb      	str	r3, [r7, #12]
 800c246:	4a09      	ldr	r2, [pc, #36]	; (800c26c <USB_CoreReset+0x60>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d901      	bls.n	800c250 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800c24c:	2303      	movs	r3, #3
 800c24e:	e006      	b.n	800c25e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d0f1      	beq.n	800c240 <USB_CoreReset+0x34>

  return HAL_OK;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3714      	adds	r7, #20
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	00030d40 	.word	0x00030d40

0800c270 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c27c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c280:	f005 fc4c 	bl	8011b1c <USBD_static_malloc>
 800c284:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d105      	bne.n	800c298 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c294:	2302      	movs	r3, #2
 800c296:	e066      	b.n	800c366 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	7c1b      	ldrb	r3, [r3, #16]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d119      	bne.n	800c2dc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c2a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2ac:	2202      	movs	r2, #2
 800c2ae:	2181      	movs	r1, #129	; 0x81
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f005 fb10 	bl	80118d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c2bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f005 fb06 	bl	80118d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2210      	movs	r2, #16
 800c2d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c2da:	e016      	b.n	800c30a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c2dc:	2340      	movs	r3, #64	; 0x40
 800c2de:	2202      	movs	r2, #2
 800c2e0:	2181      	movs	r1, #129	; 0x81
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f005 faf7 	bl	80118d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c2ee:	2340      	movs	r3, #64	; 0x40
 800c2f0:	2202      	movs	r2, #2
 800c2f2:	2101      	movs	r1, #1
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f005 faee 	bl	80118d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2210      	movs	r2, #16
 800c306:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c30a:	2308      	movs	r3, #8
 800c30c:	2203      	movs	r2, #3
 800c30e:	2182      	movs	r1, #130	; 0x82
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f005 fae0 	bl	80118d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2201      	movs	r2, #1
 800c31a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	7c1b      	ldrb	r3, [r3, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d109      	bne.n	800c354 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c34a:	2101      	movs	r1, #1
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f005 fbb1 	bl	8011ab4 <USBD_LL_PrepareReceive>
 800c352:	e007      	b.n	800c364 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c35a:	2340      	movs	r3, #64	; 0x40
 800c35c:	2101      	movs	r1, #1
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f005 fba8 	bl	8011ab4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b082      	sub	sp, #8
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
 800c376:	460b      	mov	r3, r1
 800c378:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c37a:	2181      	movs	r1, #129	; 0x81
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f005 fad0 	bl	8011922 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c388:	2101      	movs	r1, #1
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f005 fac9 	bl	8011922 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c398:	2182      	movs	r1, #130	; 0x82
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f005 fac1 	bl	8011922 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00e      	beq.n	800c3d8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f005 fbb4 	bl	8011b38 <USBD_static_free>
    pdev->pClassData = NULL;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
	...

0800c3e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d101      	bne.n	800c40c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c408:	2303      	movs	r3, #3
 800c40a:	e0af      	b.n	800c56c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c414:	2b00      	cmp	r3, #0
 800c416:	d03f      	beq.n	800c498 <USBD_CDC_Setup+0xb4>
 800c418:	2b20      	cmp	r3, #32
 800c41a:	f040 809f 	bne.w	800c55c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	88db      	ldrh	r3, [r3, #6]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d02e      	beq.n	800c484 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	b25b      	sxtb	r3, r3
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	da16      	bge.n	800c45e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c43c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c43e:	683a      	ldr	r2, [r7, #0]
 800c440:	88d2      	ldrh	r2, [r2, #6]
 800c442:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	88db      	ldrh	r3, [r3, #6]
 800c448:	2b07      	cmp	r3, #7
 800c44a:	bf28      	it	cs
 800c44c:	2307      	movcs	r3, #7
 800c44e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	89fa      	ldrh	r2, [r7, #14]
 800c454:	4619      	mov	r1, r3
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f001 fb19 	bl	800da8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c45c:	e085      	b.n	800c56a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	785a      	ldrb	r2, [r3, #1]
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	88db      	ldrh	r3, [r3, #6]
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c474:	6939      	ldr	r1, [r7, #16]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	88db      	ldrh	r3, [r3, #6]
 800c47a:	461a      	mov	r2, r3
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f001 fb32 	bl	800dae6 <USBD_CtlPrepareRx>
      break;
 800c482:	e072      	b.n	800c56a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	683a      	ldr	r2, [r7, #0]
 800c48e:	7850      	ldrb	r0, [r2, #1]
 800c490:	2200      	movs	r2, #0
 800c492:	6839      	ldr	r1, [r7, #0]
 800c494:	4798      	blx	r3
      break;
 800c496:	e068      	b.n	800c56a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	785b      	ldrb	r3, [r3, #1]
 800c49c:	2b0b      	cmp	r3, #11
 800c49e:	d852      	bhi.n	800c546 <USBD_CDC_Setup+0x162>
 800c4a0:	a201      	add	r2, pc, #4	; (adr r2, 800c4a8 <USBD_CDC_Setup+0xc4>)
 800c4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a6:	bf00      	nop
 800c4a8:	0800c4d9 	.word	0x0800c4d9
 800c4ac:	0800c555 	.word	0x0800c555
 800c4b0:	0800c547 	.word	0x0800c547
 800c4b4:	0800c547 	.word	0x0800c547
 800c4b8:	0800c547 	.word	0x0800c547
 800c4bc:	0800c547 	.word	0x0800c547
 800c4c0:	0800c547 	.word	0x0800c547
 800c4c4:	0800c547 	.word	0x0800c547
 800c4c8:	0800c547 	.word	0x0800c547
 800c4cc:	0800c547 	.word	0x0800c547
 800c4d0:	0800c503 	.word	0x0800c503
 800c4d4:	0800c52d 	.word	0x0800c52d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	2b03      	cmp	r3, #3
 800c4e2:	d107      	bne.n	800c4f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c4e4:	f107 030a 	add.w	r3, r7, #10
 800c4e8:	2202      	movs	r2, #2
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f001 face 	bl	800da8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c4f2:	e032      	b.n	800c55a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f001 fa58 	bl	800d9ac <USBD_CtlError>
            ret = USBD_FAIL;
 800c4fc:	2303      	movs	r3, #3
 800c4fe:	75fb      	strb	r3, [r7, #23]
          break;
 800c500:	e02b      	b.n	800c55a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b03      	cmp	r3, #3
 800c50c:	d107      	bne.n	800c51e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c50e:	f107 030d 	add.w	r3, r7, #13
 800c512:	2201      	movs	r2, #1
 800c514:	4619      	mov	r1, r3
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f001 fab9 	bl	800da8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c51c:	e01d      	b.n	800c55a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f001 fa43 	bl	800d9ac <USBD_CtlError>
            ret = USBD_FAIL;
 800c526:	2303      	movs	r3, #3
 800c528:	75fb      	strb	r3, [r7, #23]
          break;
 800c52a:	e016      	b.n	800c55a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b03      	cmp	r3, #3
 800c536:	d00f      	beq.n	800c558 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f001 fa36 	bl	800d9ac <USBD_CtlError>
            ret = USBD_FAIL;
 800c540:	2303      	movs	r3, #3
 800c542:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c544:	e008      	b.n	800c558 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f001 fa2f 	bl	800d9ac <USBD_CtlError>
          ret = USBD_FAIL;
 800c54e:	2303      	movs	r3, #3
 800c550:	75fb      	strb	r3, [r7, #23]
          break;
 800c552:	e002      	b.n	800c55a <USBD_CDC_Setup+0x176>
          break;
 800c554:	bf00      	nop
 800c556:	e008      	b.n	800c56a <USBD_CDC_Setup+0x186>
          break;
 800c558:	bf00      	nop
      }
      break;
 800c55a:	e006      	b.n	800c56a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c55c:	6839      	ldr	r1, [r7, #0]
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f001 fa24 	bl	800d9ac <USBD_CtlError>
      ret = USBD_FAIL;
 800c564:	2303      	movs	r3, #3
 800c566:	75fb      	strb	r3, [r7, #23]
      break;
 800c568:	bf00      	nop
  }

  return (uint8_t)ret;
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	460b      	mov	r3, r1
 800c57e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c586:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c592:	2303      	movs	r3, #3
 800c594:	e04f      	b.n	800c636 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c59c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c59e:	78fa      	ldrb	r2, [r7, #3]
 800c5a0:	6879      	ldr	r1, [r7, #4]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	440b      	add	r3, r1
 800c5ac:	3318      	adds	r3, #24
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d029      	beq.n	800c608 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c5b4:	78fa      	ldrb	r2, [r7, #3]
 800c5b6:	6879      	ldr	r1, [r7, #4]
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	440b      	add	r3, r1
 800c5c2:	3318      	adds	r3, #24
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	78f9      	ldrb	r1, [r7, #3]
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	00db      	lsls	r3, r3, #3
 800c5ce:	1a5b      	subs	r3, r3, r1
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4403      	add	r3, r0
 800c5d4:	3344      	adds	r3, #68	; 0x44
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800c5dc:	fb03 f301 	mul.w	r3, r3, r1
 800c5e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d110      	bne.n	800c608 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c5e6:	78fa      	ldrb	r2, [r7, #3]
 800c5e8:	6879      	ldr	r1, [r7, #4]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	4413      	add	r3, r2
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	440b      	add	r3, r1
 800c5f4:	3318      	adds	r3, #24
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c5fa:	78f9      	ldrb	r1, [r7, #3]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	2200      	movs	r2, #0
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f005 fa36 	bl	8011a72 <USBD_LL_Transmit>
 800c606:	e015      	b.n	800c634 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00b      	beq.n	800c634 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c630:	78fa      	ldrb	r2, [r7, #3]
 800c632:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	460b      	mov	r3, r1
 800c648:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c650:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d101      	bne.n	800c660 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c65c:	2303      	movs	r3, #3
 800c65e:	e015      	b.n	800c68c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c660:	78fb      	ldrb	r3, [r7, #3]
 800c662:	4619      	mov	r1, r3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f005 fa46 	bl	8011af6 <USBD_LL_GetRxDataSize>
 800c66a:	4602      	mov	r2, r0
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c686:	4611      	mov	r1, r2
 800c688:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3710      	adds	r7, #16
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d101      	bne.n	800c6ae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c6aa:	2303      	movs	r3, #3
 800c6ac:	e01b      	b.n	800c6e6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d015      	beq.n	800c6e4 <USBD_CDC_EP0_RxReady+0x50>
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c6be:	2bff      	cmp	r3, #255	; 0xff
 800c6c0:	d010      	beq.n	800c6e4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	68fa      	ldr	r2, [r7, #12]
 800c6cc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c6d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c6d8:	b292      	uxth	r2, r2
 800c6da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	22ff      	movs	r2, #255	; 0xff
 800c6e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
	...

0800c6f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2243      	movs	r2, #67	; 0x43
 800c6fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c6fe:	4b03      	ldr	r3, [pc, #12]	; (800c70c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c700:	4618      	mov	r0, r3
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	200000c0 	.word	0x200000c0

0800c710 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2243      	movs	r2, #67	; 0x43
 800c71c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c71e:	4b03      	ldr	r3, [pc, #12]	; (800c72c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c720:	4618      	mov	r0, r3
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	2000007c 	.word	0x2000007c

0800c730 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2243      	movs	r2, #67	; 0x43
 800c73c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c73e:	4b03      	ldr	r3, [pc, #12]	; (800c74c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c740:	4618      	mov	r0, r3
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr
 800c74c:	20000104 	.word	0x20000104

0800c750 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	220a      	movs	r2, #10
 800c75c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c75e:	4b03      	ldr	r3, [pc, #12]	; (800c76c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c760:	4618      	mov	r0, r3
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	20000038 	.word	0x20000038

0800c770 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c780:	2303      	movs	r3, #3
 800c782:	e004      	b.n	800c78e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	370c      	adds	r7, #12
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr

0800c79a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c79a:	b480      	push	{r7}
 800c79c:	b087      	sub	sp, #28
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	60f8      	str	r0, [r7, #12]
 800c7a2:	60b9      	str	r1, [r7, #8]
 800c7a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d101      	bne.n	800c7b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	e008      	b.n	800c7ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	371c      	adds	r7, #28
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b085      	sub	sp, #20
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d101      	bne.n	800c7f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	e004      	b.n	800c7fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c816:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c818:	2301      	movs	r3, #1
 800c81a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c826:	2303      	movs	r3, #3
 800c828:	e01a      	b.n	800c860 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c830:	2b00      	cmp	r3, #0
 800c832:	d114      	bne.n	800c85e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2201      	movs	r2, #1
 800c838:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c852:	2181      	movs	r1, #129	; 0x81
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f005 f90c 	bl	8011a72 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c85a:	2300      	movs	r3, #0
 800c85c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c876:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c882:	2303      	movs	r3, #3
 800c884:	e016      	b.n	800c8b4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	7c1b      	ldrb	r3, [r3, #16]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d109      	bne.n	800c8a2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c894:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c898:	2101      	movs	r1, #1
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f005 f90a 	bl	8011ab4 <USBD_LL_PrepareReceive>
 800c8a0:	e007      	b.n	800c8b2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8a8:	2340      	movs	r3, #64	; 0x40
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f005 f901 	bl	8011ab4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d101      	bne.n	800c8d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	e01f      	b.n	800c914 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d003      	beq.n	800c8fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	79fa      	ldrb	r2, [r7, #7]
 800c906:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f004 ff7d 	bl	8011808 <USBD_LL_Init>
 800c90e:	4603      	mov	r3, r0
 800c910:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c912:	7dfb      	ldrb	r3, [r7, #23]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3718      	adds	r7, #24
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c926:	2300      	movs	r3, #0
 800c928:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c930:	2303      	movs	r3, #3
 800c932:	e016      	b.n	800c962 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00b      	beq.n	800c960 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c950:	f107 020e 	add.w	r2, r7, #14
 800c954:	4610      	mov	r0, r2
 800c956:	4798      	blx	r3
 800c958:	4602      	mov	r2, r0
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c960:	2300      	movs	r3, #0
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b082      	sub	sp, #8
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f004 ff94 	bl	80118a0 <USBD_LL_Start>
 800c978:	4603      	mov	r3, r0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3708      	adds	r7, #8
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c9a4:	2303      	movs	r3, #3
 800c9a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d009      	beq.n	800c9c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	78fa      	ldrb	r2, [r7, #3]
 800c9bc:	4611      	mov	r1, r2
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	4798      	blx	r3
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	460b      	mov	r3, r1
 800c9da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d007      	beq.n	800c9f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	78fa      	ldrb	r2, [r7, #3]
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	4798      	blx	r3
  }

  return USBD_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca10:	6839      	ldr	r1, [r7, #0]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f000 ff90 	bl	800d938 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ca26:	461a      	mov	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca34:	f003 031f 	and.w	r3, r3, #31
 800ca38:	2b02      	cmp	r3, #2
 800ca3a:	d01a      	beq.n	800ca72 <USBD_LL_SetupStage+0x72>
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	d822      	bhi.n	800ca86 <USBD_LL_SetupStage+0x86>
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <USBD_LL_SetupStage+0x4a>
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d00a      	beq.n	800ca5e <USBD_LL_SetupStage+0x5e>
 800ca48:	e01d      	b.n	800ca86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca50:	4619      	mov	r1, r3
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fa62 	bl	800cf1c <USBD_StdDevReq>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca5c:	e020      	b.n	800caa0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca64:	4619      	mov	r1, r3
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 fac6 	bl	800cff8 <USBD_StdItfReq>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ca70:	e016      	b.n	800caa0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 fb05 	bl	800d08a <USBD_StdEPReq>
 800ca80:	4603      	mov	r3, r0
 800ca82:	73fb      	strb	r3, [r7, #15]
      break;
 800ca84:	e00c      	b.n	800caa0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	4619      	mov	r1, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f004 ff63 	bl	8011960 <USBD_LL_StallEP>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca9e:	bf00      	nop
  }

  return ret;
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b086      	sub	sp, #24
 800caae:	af00      	add	r7, sp, #0
 800cab0:	60f8      	str	r0, [r7, #12]
 800cab2:	460b      	mov	r3, r1
 800cab4:	607a      	str	r2, [r7, #4]
 800cab6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cab8:	7afb      	ldrb	r3, [r7, #11]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d138      	bne.n	800cb30 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cac4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cacc:	2b03      	cmp	r3, #3
 800cace:	d14a      	bne.n	800cb66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	689a      	ldr	r2, [r3, #8]
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d913      	bls.n	800cb04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	689a      	ldr	r2, [r3, #8]
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	1ad2      	subs	r2, r2, r3
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	68da      	ldr	r2, [r3, #12]
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	4293      	cmp	r3, r2
 800caf4:	bf28      	it	cs
 800caf6:	4613      	movcs	r3, r2
 800caf8:	461a      	mov	r2, r3
 800cafa:	6879      	ldr	r1, [r7, #4]
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f001 f80f 	bl	800db20 <USBD_CtlContinueRx>
 800cb02:	e030      	b.n	800cb66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	2b03      	cmp	r3, #3
 800cb0e:	d10b      	bne.n	800cb28 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb16:	691b      	ldr	r3, [r3, #16]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d005      	beq.n	800cb28 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb22:	691b      	ldr	r3, [r3, #16]
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f001 f80a 	bl	800db42 <USBD_CtlSendStatus>
 800cb2e:	e01a      	b.n	800cb66 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	2b03      	cmp	r3, #3
 800cb3a:	d114      	bne.n	800cb66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb42:	699b      	ldr	r3, [r3, #24]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00e      	beq.n	800cb66 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb4e:	699b      	ldr	r3, [r3, #24]
 800cb50:	7afa      	ldrb	r2, [r7, #11]
 800cb52:	4611      	mov	r1, r2
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	4798      	blx	r3
 800cb58:	4603      	mov	r3, r0
 800cb5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cb5c:	7dfb      	ldrb	r3, [r7, #23]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
 800cb64:	e000      	b.n	800cb68 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3718      	adds	r7, #24
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	607a      	str	r2, [r7, #4]
 800cb7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cb7e:	7afb      	ldrb	r3, [r7, #11]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d16b      	bne.n	800cc5c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	3314      	adds	r3, #20
 800cb88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d156      	bne.n	800cc42 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	689a      	ldr	r2, [r3, #8]
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d914      	bls.n	800cbca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	689a      	ldr	r2, [r3, #8]
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	1ad2      	subs	r2, r2, r3
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	6879      	ldr	r1, [r7, #4]
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f000 ff84 	bl	800dac4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f004 ff76 	bl	8011ab4 <USBD_LL_PrepareReceive>
 800cbc8:	e03b      	b.n	800cc42 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	68da      	ldr	r2, [r3, #12]
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d11c      	bne.n	800cc10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	685a      	ldr	r2, [r3, #4]
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d316      	bcc.n	800cc10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d20f      	bcs.n	800cc10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f000 ff65 	bl	800dac4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc02:	2300      	movs	r3, #0
 800cc04:	2200      	movs	r2, #0
 800cc06:	2100      	movs	r1, #0
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f004 ff53 	bl	8011ab4 <USBD_LL_PrepareReceive>
 800cc0e:	e018      	b.n	800cc42 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	2b03      	cmp	r3, #3
 800cc1a:	d10b      	bne.n	800cc34 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d005      	beq.n	800cc34 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc34:	2180      	movs	r1, #128	; 0x80
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f004 fe92 	bl	8011960 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f000 ff93 	bl	800db68 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d122      	bne.n	800cc92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f7ff fe98 	bl	800c982 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cc5a:	e01a      	b.n	800cc92 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	2b03      	cmp	r3, #3
 800cc66:	d114      	bne.n	800cc92 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc6e:	695b      	ldr	r3, [r3, #20]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00e      	beq.n	800cc92 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc7a:	695b      	ldr	r3, [r3, #20]
 800cc7c:	7afa      	ldrb	r2, [r7, #11]
 800cc7e:	4611      	mov	r1, r2
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	4798      	blx	r3
 800cc84:	4603      	mov	r3, r0
 800cc86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800cc8e:	7dfb      	ldrb	r3, [r7, #23]
 800cc90:	e000      	b.n	800cc94 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d101      	bne.n	800ccd0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cccc:	2303      	movs	r3, #3
 800ccce:	e02f      	b.n	800cd30 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00f      	beq.n	800ccfa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d009      	beq.n	800ccfa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	6852      	ldr	r2, [r2, #4]
 800ccf2:	b2d2      	uxtb	r2, r2
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ccfa:	2340      	movs	r3, #64	; 0x40
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	2100      	movs	r1, #0
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f004 fde8 	bl	80118d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2240      	movs	r2, #64	; 0x40
 800cd12:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd16:	2340      	movs	r3, #64	; 0x40
 800cd18:	2200      	movs	r2, #0
 800cd1a:	2180      	movs	r1, #128	; 0x80
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f004 fdda 	bl	80118d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2201      	movs	r2, #1
 800cd26:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2240      	movs	r2, #64	; 0x40
 800cd2c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	460b      	mov	r3, r1
 800cd42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	78fa      	ldrb	r2, [r7, #3]
 800cd48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2204      	movs	r2, #4
 800cd72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	2b04      	cmp	r3, #4
 800cd96:	d106      	bne.n	800cda6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cd9e:	b2da      	uxtb	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	370c      	adds	r7, #12
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800cdc6:	2303      	movs	r3, #3
 800cdc8:	e012      	b.n	800cdf0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	2b03      	cmp	r3, #3
 800cdd4:	d10b      	bne.n	800cdee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cddc:	69db      	ldr	r3, [r3, #28]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d005      	beq.n	800cdee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cde8:	69db      	ldr	r3, [r3, #28]
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cdee:	2300      	movs	r3, #0
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3708      	adds	r7, #8
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	460b      	mov	r3, r1
 800ce02:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	e014      	b.n	800ce3c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b03      	cmp	r3, #3
 800ce1c:	d10d      	bne.n	800ce3a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d007      	beq.n	800ce3a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce30:	6a1b      	ldr	r3, [r3, #32]
 800ce32:	78fa      	ldrb	r2, [r7, #3]
 800ce34:	4611      	mov	r1, r2
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d101      	bne.n	800ce5e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ce5a:	2303      	movs	r3, #3
 800ce5c:	e014      	b.n	800ce88 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d10d      	bne.n	800ce86 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d007      	beq.n	800ce86 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce7e:	78fa      	ldrb	r2, [r7, #3]
 800ce80:	4611      	mov	r1, r2
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	370c      	adds	r7, #12
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr

0800cea6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b082      	sub	sp, #8
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d009      	beq.n	800ced4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	6852      	ldr	r2, [r2, #4]
 800cecc:	b2d2      	uxtb	r2, r2
 800cece:	4611      	mov	r1, r2
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	4798      	blx	r3
  }

  return USBD_OK;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cede:	b480      	push	{r7}
 800cee0:	b087      	sub	sp, #28
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	3301      	adds	r3, #1
 800cef4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cefc:	8a3b      	ldrh	r3, [r7, #16]
 800cefe:	021b      	lsls	r3, r3, #8
 800cf00:	b21a      	sxth	r2, r3
 800cf02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	b21b      	sxth	r3, r3
 800cf0a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cf0c:	89fb      	ldrh	r3, [r7, #14]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	371c      	adds	r7, #28
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr
	...

0800cf1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf32:	2b40      	cmp	r3, #64	; 0x40
 800cf34:	d005      	beq.n	800cf42 <USBD_StdDevReq+0x26>
 800cf36:	2b40      	cmp	r3, #64	; 0x40
 800cf38:	d853      	bhi.n	800cfe2 <USBD_StdDevReq+0xc6>
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00b      	beq.n	800cf56 <USBD_StdDevReq+0x3a>
 800cf3e:	2b20      	cmp	r3, #32
 800cf40:	d14f      	bne.n	800cfe2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	6839      	ldr	r1, [r7, #0]
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	4798      	blx	r3
 800cf50:	4603      	mov	r3, r0
 800cf52:	73fb      	strb	r3, [r7, #15]
      break;
 800cf54:	e04a      	b.n	800cfec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	785b      	ldrb	r3, [r3, #1]
 800cf5a:	2b09      	cmp	r3, #9
 800cf5c:	d83b      	bhi.n	800cfd6 <USBD_StdDevReq+0xba>
 800cf5e:	a201      	add	r2, pc, #4	; (adr r2, 800cf64 <USBD_StdDevReq+0x48>)
 800cf60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf64:	0800cfb9 	.word	0x0800cfb9
 800cf68:	0800cfcd 	.word	0x0800cfcd
 800cf6c:	0800cfd7 	.word	0x0800cfd7
 800cf70:	0800cfc3 	.word	0x0800cfc3
 800cf74:	0800cfd7 	.word	0x0800cfd7
 800cf78:	0800cf97 	.word	0x0800cf97
 800cf7c:	0800cf8d 	.word	0x0800cf8d
 800cf80:	0800cfd7 	.word	0x0800cfd7
 800cf84:	0800cfaf 	.word	0x0800cfaf
 800cf88:	0800cfa1 	.word	0x0800cfa1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 f9de 	bl	800d350 <USBD_GetDescriptor>
          break;
 800cf94:	e024      	b.n	800cfe0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf96:	6839      	ldr	r1, [r7, #0]
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 fb43 	bl	800d624 <USBD_SetAddress>
          break;
 800cf9e:	e01f      	b.n	800cfe0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cfa0:	6839      	ldr	r1, [r7, #0]
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 fb82 	bl	800d6ac <USBD_SetConfig>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	73fb      	strb	r3, [r7, #15]
          break;
 800cfac:	e018      	b.n	800cfe0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 fc21 	bl	800d7f8 <USBD_GetConfig>
          break;
 800cfb6:	e013      	b.n	800cfe0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 fc52 	bl	800d864 <USBD_GetStatus>
          break;
 800cfc0:	e00e      	b.n	800cfe0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cfc2:	6839      	ldr	r1, [r7, #0]
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 fc81 	bl	800d8cc <USBD_SetFeature>
          break;
 800cfca:	e009      	b.n	800cfe0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cfcc:	6839      	ldr	r1, [r7, #0]
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fc90 	bl	800d8f4 <USBD_ClrFeature>
          break;
 800cfd4:	e004      	b.n	800cfe0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cfd6:	6839      	ldr	r1, [r7, #0]
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fce7 	bl	800d9ac <USBD_CtlError>
          break;
 800cfde:	bf00      	nop
      }
      break;
 800cfe0:	e004      	b.n	800cfec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cfe2:	6839      	ldr	r1, [r7, #0]
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 fce1 	bl	800d9ac <USBD_CtlError>
      break;
 800cfea:	bf00      	nop
  }

  return ret;
 800cfec:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop

0800cff8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d00e:	2b40      	cmp	r3, #64	; 0x40
 800d010:	d005      	beq.n	800d01e <USBD_StdItfReq+0x26>
 800d012:	2b40      	cmp	r3, #64	; 0x40
 800d014:	d82f      	bhi.n	800d076 <USBD_StdItfReq+0x7e>
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <USBD_StdItfReq+0x26>
 800d01a:	2b20      	cmp	r3, #32
 800d01c:	d12b      	bne.n	800d076 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d024:	b2db      	uxtb	r3, r3
 800d026:	3b01      	subs	r3, #1
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d81d      	bhi.n	800d068 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	889b      	ldrh	r3, [r3, #4]
 800d030:	b2db      	uxtb	r3, r3
 800d032:	2b01      	cmp	r3, #1
 800d034:	d813      	bhi.n	800d05e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	6839      	ldr	r1, [r7, #0]
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	4798      	blx	r3
 800d044:	4603      	mov	r3, r0
 800d046:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	88db      	ldrh	r3, [r3, #6]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d110      	bne.n	800d072 <USBD_StdItfReq+0x7a>
 800d050:	7bfb      	ldrb	r3, [r7, #15]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10d      	bne.n	800d072 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 fd73 	bl	800db42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d05c:	e009      	b.n	800d072 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d05e:	6839      	ldr	r1, [r7, #0]
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 fca3 	bl	800d9ac <USBD_CtlError>
          break;
 800d066:	e004      	b.n	800d072 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d068:	6839      	ldr	r1, [r7, #0]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 fc9e 	bl	800d9ac <USBD_CtlError>
          break;
 800d070:	e000      	b.n	800d074 <USBD_StdItfReq+0x7c>
          break;
 800d072:	bf00      	nop
      }
      break;
 800d074:	e004      	b.n	800d080 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d076:	6839      	ldr	r1, [r7, #0]
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 fc97 	bl	800d9ac <USBD_CtlError>
      break;
 800d07e:	bf00      	nop
  }

  return ret;
 800d080:	7bfb      	ldrb	r3, [r7, #15]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b084      	sub	sp, #16
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d094:	2300      	movs	r3, #0
 800d096:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	889b      	ldrh	r3, [r3, #4]
 800d09c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0a6:	2b40      	cmp	r3, #64	; 0x40
 800d0a8:	d007      	beq.n	800d0ba <USBD_StdEPReq+0x30>
 800d0aa:	2b40      	cmp	r3, #64	; 0x40
 800d0ac:	f200 8145 	bhi.w	800d33a <USBD_StdEPReq+0x2b0>
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00c      	beq.n	800d0ce <USBD_StdEPReq+0x44>
 800d0b4:	2b20      	cmp	r3, #32
 800d0b6:	f040 8140 	bne.w	800d33a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	4798      	blx	r3
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d0cc:	e13a      	b.n	800d344 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	785b      	ldrb	r3, [r3, #1]
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	d007      	beq.n	800d0e6 <USBD_StdEPReq+0x5c>
 800d0d6:	2b03      	cmp	r3, #3
 800d0d8:	f300 8129 	bgt.w	800d32e <USBD_StdEPReq+0x2a4>
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d07f      	beq.n	800d1e0 <USBD_StdEPReq+0x156>
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d03c      	beq.n	800d15e <USBD_StdEPReq+0xd4>
 800d0e4:	e123      	b.n	800d32e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d002      	beq.n	800d0f8 <USBD_StdEPReq+0x6e>
 800d0f2:	2b03      	cmp	r3, #3
 800d0f4:	d016      	beq.n	800d124 <USBD_StdEPReq+0x9a>
 800d0f6:	e02c      	b.n	800d152 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0f8:	7bbb      	ldrb	r3, [r7, #14]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00d      	beq.n	800d11a <USBD_StdEPReq+0x90>
 800d0fe:	7bbb      	ldrb	r3, [r7, #14]
 800d100:	2b80      	cmp	r3, #128	; 0x80
 800d102:	d00a      	beq.n	800d11a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d104:	7bbb      	ldrb	r3, [r7, #14]
 800d106:	4619      	mov	r1, r3
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f004 fc29 	bl	8011960 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d10e:	2180      	movs	r1, #128	; 0x80
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f004 fc25 	bl	8011960 <USBD_LL_StallEP>
 800d116:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d118:	e020      	b.n	800d15c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d11a:	6839      	ldr	r1, [r7, #0]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fc45 	bl	800d9ac <USBD_CtlError>
              break;
 800d122:	e01b      	b.n	800d15c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	885b      	ldrh	r3, [r3, #2]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d10e      	bne.n	800d14a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d12c:	7bbb      	ldrb	r3, [r7, #14]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00b      	beq.n	800d14a <USBD_StdEPReq+0xc0>
 800d132:	7bbb      	ldrb	r3, [r7, #14]
 800d134:	2b80      	cmp	r3, #128	; 0x80
 800d136:	d008      	beq.n	800d14a <USBD_StdEPReq+0xc0>
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	88db      	ldrh	r3, [r3, #6]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d104      	bne.n	800d14a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d140:	7bbb      	ldrb	r3, [r7, #14]
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f004 fc0b 	bl	8011960 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fcf9 	bl	800db42 <USBD_CtlSendStatus>

              break;
 800d150:	e004      	b.n	800d15c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 fc29 	bl	800d9ac <USBD_CtlError>
              break;
 800d15a:	bf00      	nop
          }
          break;
 800d15c:	e0ec      	b.n	800d338 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d164:	b2db      	uxtb	r3, r3
 800d166:	2b02      	cmp	r3, #2
 800d168:	d002      	beq.n	800d170 <USBD_StdEPReq+0xe6>
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d016      	beq.n	800d19c <USBD_StdEPReq+0x112>
 800d16e:	e030      	b.n	800d1d2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d170:	7bbb      	ldrb	r3, [r7, #14]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00d      	beq.n	800d192 <USBD_StdEPReq+0x108>
 800d176:	7bbb      	ldrb	r3, [r7, #14]
 800d178:	2b80      	cmp	r3, #128	; 0x80
 800d17a:	d00a      	beq.n	800d192 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d17c:	7bbb      	ldrb	r3, [r7, #14]
 800d17e:	4619      	mov	r1, r3
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f004 fbed 	bl	8011960 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d186:	2180      	movs	r1, #128	; 0x80
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f004 fbe9 	bl	8011960 <USBD_LL_StallEP>
 800d18e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d190:	e025      	b.n	800d1de <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d192:	6839      	ldr	r1, [r7, #0]
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 fc09 	bl	800d9ac <USBD_CtlError>
              break;
 800d19a:	e020      	b.n	800d1de <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	885b      	ldrh	r3, [r3, #2]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d11b      	bne.n	800d1dc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d1a4:	7bbb      	ldrb	r3, [r7, #14]
 800d1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d004      	beq.n	800d1b8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d1ae:	7bbb      	ldrb	r3, [r7, #14]
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f004 fbf3 	bl	801199e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 fcc2 	bl	800db42 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	4798      	blx	r3
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d1d0:	e004      	b.n	800d1dc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d1d2:	6839      	ldr	r1, [r7, #0]
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 fbe9 	bl	800d9ac <USBD_CtlError>
              break;
 800d1da:	e000      	b.n	800d1de <USBD_StdEPReq+0x154>
              break;
 800d1dc:	bf00      	nop
          }
          break;
 800d1de:	e0ab      	b.n	800d338 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d002      	beq.n	800d1f2 <USBD_StdEPReq+0x168>
 800d1ec:	2b03      	cmp	r3, #3
 800d1ee:	d032      	beq.n	800d256 <USBD_StdEPReq+0x1cc>
 800d1f0:	e097      	b.n	800d322 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1f2:	7bbb      	ldrb	r3, [r7, #14]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d007      	beq.n	800d208 <USBD_StdEPReq+0x17e>
 800d1f8:	7bbb      	ldrb	r3, [r7, #14]
 800d1fa:	2b80      	cmp	r3, #128	; 0x80
 800d1fc:	d004      	beq.n	800d208 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d1fe:	6839      	ldr	r1, [r7, #0]
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 fbd3 	bl	800d9ac <USBD_CtlError>
                break;
 800d206:	e091      	b.n	800d32c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	da0b      	bge.n	800d228 <USBD_StdEPReq+0x19e>
 800d210:	7bbb      	ldrb	r3, [r7, #14]
 800d212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d216:	4613      	mov	r3, r2
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	4413      	add	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	3310      	adds	r3, #16
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	4413      	add	r3, r2
 800d224:	3304      	adds	r3, #4
 800d226:	e00b      	b.n	800d240 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d228:	7bbb      	ldrb	r3, [r7, #14]
 800d22a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d22e:	4613      	mov	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4413      	add	r3, r2
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	4413      	add	r3, r2
 800d23e:	3304      	adds	r3, #4
 800d240:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	2200      	movs	r2, #0
 800d246:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	2202      	movs	r2, #2
 800d24c:	4619      	mov	r1, r3
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 fc1d 	bl	800da8e <USBD_CtlSendData>
              break;
 800d254:	e06a      	b.n	800d32c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	da11      	bge.n	800d282 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d25e:	7bbb      	ldrb	r3, [r7, #14]
 800d260:	f003 020f 	and.w	r2, r3, #15
 800d264:	6879      	ldr	r1, [r7, #4]
 800d266:	4613      	mov	r3, r2
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	4413      	add	r3, r2
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	440b      	add	r3, r1
 800d270:	3324      	adds	r3, #36	; 0x24
 800d272:	881b      	ldrh	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d117      	bne.n	800d2a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d278:	6839      	ldr	r1, [r7, #0]
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 fb96 	bl	800d9ac <USBD_CtlError>
                  break;
 800d280:	e054      	b.n	800d32c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d282:	7bbb      	ldrb	r3, [r7, #14]
 800d284:	f003 020f 	and.w	r2, r3, #15
 800d288:	6879      	ldr	r1, [r7, #4]
 800d28a:	4613      	mov	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4413      	add	r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	440b      	add	r3, r1
 800d294:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d104      	bne.n	800d2a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d29e:	6839      	ldr	r1, [r7, #0]
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fb83 	bl	800d9ac <USBD_CtlError>
                  break;
 800d2a6:	e041      	b.n	800d32c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	da0b      	bge.n	800d2c8 <USBD_StdEPReq+0x23e>
 800d2b0:	7bbb      	ldrb	r3, [r7, #14]
 800d2b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	4413      	add	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	3310      	adds	r3, #16
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	3304      	adds	r3, #4
 800d2c6:	e00b      	b.n	800d2e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d2c8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	4413      	add	r3, r2
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	4413      	add	r3, r2
 800d2de:	3304      	adds	r3, #4
 800d2e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d2e2:	7bbb      	ldrb	r3, [r7, #14]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <USBD_StdEPReq+0x264>
 800d2e8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ea:	2b80      	cmp	r3, #128	; 0x80
 800d2ec:	d103      	bne.n	800d2f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	e00e      	b.n	800d314 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d2f6:	7bbb      	ldrb	r3, [r7, #14]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f004 fb6e 	bl	80119dc <USBD_LL_IsStallEP>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d003      	beq.n	800d30e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2201      	movs	r2, #1
 800d30a:	601a      	str	r2, [r3, #0]
 800d30c:	e002      	b.n	800d314 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	2200      	movs	r2, #0
 800d312:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2202      	movs	r2, #2
 800d318:	4619      	mov	r1, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 fbb7 	bl	800da8e <USBD_CtlSendData>
              break;
 800d320:	e004      	b.n	800d32c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fb41 	bl	800d9ac <USBD_CtlError>
              break;
 800d32a:	bf00      	nop
          }
          break;
 800d32c:	e004      	b.n	800d338 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d32e:	6839      	ldr	r1, [r7, #0]
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 fb3b 	bl	800d9ac <USBD_CtlError>
          break;
 800d336:	bf00      	nop
      }
      break;
 800d338:	e004      	b.n	800d344 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d33a:	6839      	ldr	r1, [r7, #0]
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fb35 	bl	800d9ac <USBD_CtlError>
      break;
 800d342:	bf00      	nop
  }

  return ret;
 800d344:	7bfb      	ldrb	r3, [r7, #15]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
	...

0800d350 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d35a:	2300      	movs	r3, #0
 800d35c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d362:	2300      	movs	r3, #0
 800d364:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	885b      	ldrh	r3, [r3, #2]
 800d36a:	0a1b      	lsrs	r3, r3, #8
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	3b01      	subs	r3, #1
 800d370:	2b06      	cmp	r3, #6
 800d372:	f200 8128 	bhi.w	800d5c6 <USBD_GetDescriptor+0x276>
 800d376:	a201      	add	r2, pc, #4	; (adr r2, 800d37c <USBD_GetDescriptor+0x2c>)
 800d378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37c:	0800d399 	.word	0x0800d399
 800d380:	0800d3b1 	.word	0x0800d3b1
 800d384:	0800d3f1 	.word	0x0800d3f1
 800d388:	0800d5c7 	.word	0x0800d5c7
 800d38c:	0800d5c7 	.word	0x0800d5c7
 800d390:	0800d567 	.word	0x0800d567
 800d394:	0800d593 	.word	0x0800d593
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	7c12      	ldrb	r2, [r2, #16]
 800d3a4:	f107 0108 	add.w	r1, r7, #8
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	4798      	blx	r3
 800d3ac:	60f8      	str	r0, [r7, #12]
      break;
 800d3ae:	e112      	b.n	800d5d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	7c1b      	ldrb	r3, [r3, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d10d      	bne.n	800d3d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c0:	f107 0208 	add.w	r2, r7, #8
 800d3c4:	4610      	mov	r0, r2
 800d3c6:	4798      	blx	r3
 800d3c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d3d2:	e100      	b.n	800d5d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3dc:	f107 0208 	add.w	r2, r7, #8
 800d3e0:	4610      	mov	r0, r2
 800d3e2:	4798      	blx	r3
 800d3e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	701a      	strb	r2, [r3, #0]
      break;
 800d3ee:	e0f2      	b.n	800d5d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	885b      	ldrh	r3, [r3, #2]
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	2b05      	cmp	r3, #5
 800d3f8:	f200 80ac 	bhi.w	800d554 <USBD_GetDescriptor+0x204>
 800d3fc:	a201      	add	r2, pc, #4	; (adr r2, 800d404 <USBD_GetDescriptor+0xb4>)
 800d3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d402:	bf00      	nop
 800d404:	0800d41d 	.word	0x0800d41d
 800d408:	0800d451 	.word	0x0800d451
 800d40c:	0800d485 	.word	0x0800d485
 800d410:	0800d4b9 	.word	0x0800d4b9
 800d414:	0800d4ed 	.word	0x0800d4ed
 800d418:	0800d521 	.word	0x0800d521
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d00b      	beq.n	800d440 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	7c12      	ldrb	r2, [r2, #16]
 800d434:	f107 0108 	add.w	r1, r7, #8
 800d438:	4610      	mov	r0, r2
 800d43a:	4798      	blx	r3
 800d43c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d43e:	e091      	b.n	800d564 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d440:	6839      	ldr	r1, [r7, #0]
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 fab2 	bl	800d9ac <USBD_CtlError>
            err++;
 800d448:	7afb      	ldrb	r3, [r7, #11]
 800d44a:	3301      	adds	r3, #1
 800d44c:	72fb      	strb	r3, [r7, #11]
          break;
 800d44e:	e089      	b.n	800d564 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00b      	beq.n	800d474 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	7c12      	ldrb	r2, [r2, #16]
 800d468:	f107 0108 	add.w	r1, r7, #8
 800d46c:	4610      	mov	r0, r2
 800d46e:	4798      	blx	r3
 800d470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d472:	e077      	b.n	800d564 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d474:	6839      	ldr	r1, [r7, #0]
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fa98 	bl	800d9ac <USBD_CtlError>
            err++;
 800d47c:	7afb      	ldrb	r3, [r7, #11]
 800d47e:	3301      	adds	r3, #1
 800d480:	72fb      	strb	r3, [r7, #11]
          break;
 800d482:	e06f      	b.n	800d564 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00b      	beq.n	800d4a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	7c12      	ldrb	r2, [r2, #16]
 800d49c:	f107 0108 	add.w	r1, r7, #8
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	4798      	blx	r3
 800d4a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4a6:	e05d      	b.n	800d564 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4a8:	6839      	ldr	r1, [r7, #0]
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f000 fa7e 	bl	800d9ac <USBD_CtlError>
            err++;
 800d4b0:	7afb      	ldrb	r3, [r7, #11]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	72fb      	strb	r3, [r7, #11]
          break;
 800d4b6:	e055      	b.n	800d564 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00b      	beq.n	800d4dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4ca:	691b      	ldr	r3, [r3, #16]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	7c12      	ldrb	r2, [r2, #16]
 800d4d0:	f107 0108 	add.w	r1, r7, #8
 800d4d4:	4610      	mov	r0, r2
 800d4d6:	4798      	blx	r3
 800d4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4da:	e043      	b.n	800d564 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 fa64 	bl	800d9ac <USBD_CtlError>
            err++;
 800d4e4:	7afb      	ldrb	r3, [r7, #11]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d4ea:	e03b      	b.n	800d564 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4f2:	695b      	ldr	r3, [r3, #20]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00b      	beq.n	800d510 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4fe:	695b      	ldr	r3, [r3, #20]
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	7c12      	ldrb	r2, [r2, #16]
 800d504:	f107 0108 	add.w	r1, r7, #8
 800d508:	4610      	mov	r0, r2
 800d50a:	4798      	blx	r3
 800d50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d50e:	e029      	b.n	800d564 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d510:	6839      	ldr	r1, [r7, #0]
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 fa4a 	bl	800d9ac <USBD_CtlError>
            err++;
 800d518:	7afb      	ldrb	r3, [r7, #11]
 800d51a:	3301      	adds	r3, #1
 800d51c:	72fb      	strb	r3, [r7, #11]
          break;
 800d51e:	e021      	b.n	800d564 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d526:	699b      	ldr	r3, [r3, #24]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00b      	beq.n	800d544 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d532:	699b      	ldr	r3, [r3, #24]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	7c12      	ldrb	r2, [r2, #16]
 800d538:	f107 0108 	add.w	r1, r7, #8
 800d53c:	4610      	mov	r0, r2
 800d53e:	4798      	blx	r3
 800d540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d542:	e00f      	b.n	800d564 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d544:	6839      	ldr	r1, [r7, #0]
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 fa30 	bl	800d9ac <USBD_CtlError>
            err++;
 800d54c:	7afb      	ldrb	r3, [r7, #11]
 800d54e:	3301      	adds	r3, #1
 800d550:	72fb      	strb	r3, [r7, #11]
          break;
 800d552:	e007      	b.n	800d564 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 fa28 	bl	800d9ac <USBD_CtlError>
          err++;
 800d55c:	7afb      	ldrb	r3, [r7, #11]
 800d55e:	3301      	adds	r3, #1
 800d560:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d562:	bf00      	nop
      }
      break;
 800d564:	e037      	b.n	800d5d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	7c1b      	ldrb	r3, [r3, #16]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d109      	bne.n	800d582 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d576:	f107 0208 	add.w	r2, r7, #8
 800d57a:	4610      	mov	r0, r2
 800d57c:	4798      	blx	r3
 800d57e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d580:	e029      	b.n	800d5d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 fa11 	bl	800d9ac <USBD_CtlError>
        err++;
 800d58a:	7afb      	ldrb	r3, [r7, #11]
 800d58c:	3301      	adds	r3, #1
 800d58e:	72fb      	strb	r3, [r7, #11]
      break;
 800d590:	e021      	b.n	800d5d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	7c1b      	ldrb	r3, [r3, #16]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10d      	bne.n	800d5b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a2:	f107 0208 	add.w	r2, r7, #8
 800d5a6:	4610      	mov	r0, r2
 800d5a8:	4798      	blx	r3
 800d5aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	2207      	movs	r2, #7
 800d5b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d5b4:	e00f      	b.n	800d5d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d5b6:	6839      	ldr	r1, [r7, #0]
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f9f7 	bl	800d9ac <USBD_CtlError>
        err++;
 800d5be:	7afb      	ldrb	r3, [r7, #11]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	72fb      	strb	r3, [r7, #11]
      break;
 800d5c4:	e007      	b.n	800d5d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f9ef 	bl	800d9ac <USBD_CtlError>
      err++;
 800d5ce:	7afb      	ldrb	r3, [r7, #11]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	72fb      	strb	r3, [r7, #11]
      break;
 800d5d4:	bf00      	nop
  }

  if (err != 0U)
 800d5d6:	7afb      	ldrb	r3, [r7, #11]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d11e      	bne.n	800d61a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	88db      	ldrh	r3, [r3, #6]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d016      	beq.n	800d612 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d5e4:	893b      	ldrh	r3, [r7, #8]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00e      	beq.n	800d608 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	88da      	ldrh	r2, [r3, #6]
 800d5ee:	893b      	ldrh	r3, [r7, #8]
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	bf28      	it	cs
 800d5f4:	4613      	movcs	r3, r2
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d5fa:	893b      	ldrh	r3, [r7, #8]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	68f9      	ldr	r1, [r7, #12]
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 fa44 	bl	800da8e <USBD_CtlSendData>
 800d606:	e009      	b.n	800d61c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d608:	6839      	ldr	r1, [r7, #0]
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 f9ce 	bl	800d9ac <USBD_CtlError>
 800d610:	e004      	b.n	800d61c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 fa95 	bl	800db42 <USBD_CtlSendStatus>
 800d618:	e000      	b.n	800d61c <USBD_GetDescriptor+0x2cc>
    return;
 800d61a:	bf00      	nop
  }
}
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop

0800d624 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	889b      	ldrh	r3, [r3, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d131      	bne.n	800d69a <USBD_SetAddress+0x76>
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	88db      	ldrh	r3, [r3, #6]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d12d      	bne.n	800d69a <USBD_SetAddress+0x76>
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	885b      	ldrh	r3, [r3, #2]
 800d642:	2b7f      	cmp	r3, #127	; 0x7f
 800d644:	d829      	bhi.n	800d69a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	885b      	ldrh	r3, [r3, #2]
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d650:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	2b03      	cmp	r3, #3
 800d65c:	d104      	bne.n	800d668 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d65e:	6839      	ldr	r1, [r7, #0]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 f9a3 	bl	800d9ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d666:	e01d      	b.n	800d6a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	7bfa      	ldrb	r2, [r7, #15]
 800d66c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d670:	7bfb      	ldrb	r3, [r7, #15]
 800d672:	4619      	mov	r1, r3
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f004 f9dd 	bl	8011a34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fa61 	bl	800db42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d680:	7bfb      	ldrb	r3, [r7, #15]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d004      	beq.n	800d690 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2202      	movs	r2, #2
 800d68a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d68e:	e009      	b.n	800d6a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2201      	movs	r2, #1
 800d694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d698:	e004      	b.n	800d6a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d69a:	6839      	ldr	r1, [r7, #0]
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 f985 	bl	800d9ac <USBD_CtlError>
  }
}
 800d6a2:	bf00      	nop
 800d6a4:	bf00      	nop
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	885b      	ldrh	r3, [r3, #2]
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	4b4c      	ldr	r3, [pc, #304]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d6c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d6c4:	4b4b      	ldr	r3, [pc, #300]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d905      	bls.n	800d6d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 f96c 	bl	800d9ac <USBD_CtlError>
    return USBD_FAIL;
 800d6d4:	2303      	movs	r3, #3
 800d6d6:	e088      	b.n	800d7ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	2b02      	cmp	r3, #2
 800d6e2:	d002      	beq.n	800d6ea <USBD_SetConfig+0x3e>
 800d6e4:	2b03      	cmp	r3, #3
 800d6e6:	d025      	beq.n	800d734 <USBD_SetConfig+0x88>
 800d6e8:	e071      	b.n	800d7ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d6ea:	4b42      	ldr	r3, [pc, #264]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d01c      	beq.n	800d72c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d6f2:	4b40      	ldr	r3, [pc, #256]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d6fc:	4b3d      	ldr	r3, [pc, #244]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	4619      	mov	r1, r3
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7ff f948 	bl	800c998 <USBD_SetClassConfig>
 800d708:	4603      	mov	r3, r0
 800d70a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d70c:	7bfb      	ldrb	r3, [r7, #15]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d004      	beq.n	800d71c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d712:	6839      	ldr	r1, [r7, #0]
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 f949 	bl	800d9ac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d71a:	e065      	b.n	800d7e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 fa10 	bl	800db42 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2203      	movs	r2, #3
 800d726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d72a:	e05d      	b.n	800d7e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 fa08 	bl	800db42 <USBD_CtlSendStatus>
      break;
 800d732:	e059      	b.n	800d7e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d734:	4b2f      	ldr	r3, [pc, #188]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d112      	bne.n	800d762 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2202      	movs	r2, #2
 800d740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d744:	4b2b      	ldr	r3, [pc, #172]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	461a      	mov	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d74e:	4b29      	ldr	r3, [pc, #164]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	4619      	mov	r1, r3
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7ff f93b 	bl	800c9d0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f9f1 	bl	800db42 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d760:	e042      	b.n	800d7e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d762:	4b24      	ldr	r3, [pc, #144]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	461a      	mov	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d02a      	beq.n	800d7c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	b2db      	uxtb	r3, r3
 800d776:	4619      	mov	r1, r3
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7ff f929 	bl	800c9d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d77e:	4b1d      	ldr	r3, [pc, #116]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	461a      	mov	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d788:	4b1a      	ldr	r3, [pc, #104]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	4619      	mov	r1, r3
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff f902 	bl	800c998 <USBD_SetClassConfig>
 800d794:	4603      	mov	r3, r0
 800d796:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d798:	7bfb      	ldrb	r3, [r7, #15]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00f      	beq.n	800d7be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d79e:	6839      	ldr	r1, [r7, #0]
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 f903 	bl	800d9ac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7ff f90e 	bl	800c9d0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2202      	movs	r2, #2
 800d7b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d7bc:	e014      	b.n	800d7e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 f9bf 	bl	800db42 <USBD_CtlSendStatus>
      break;
 800d7c4:	e010      	b.n	800d7e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f9bb 	bl	800db42 <USBD_CtlSendStatus>
      break;
 800d7cc:	e00c      	b.n	800d7e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 f8eb 	bl	800d9ac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d7d6:	4b07      	ldr	r3, [pc, #28]	; (800d7f4 <USBD_SetConfig+0x148>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7ff f8f7 	bl	800c9d0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d7e6:	bf00      	nop
  }

  return ret;
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	200027b0 	.word	0x200027b0

0800d7f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	88db      	ldrh	r3, [r3, #6]
 800d806:	2b01      	cmp	r3, #1
 800d808:	d004      	beq.n	800d814 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d80a:	6839      	ldr	r1, [r7, #0]
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 f8cd 	bl	800d9ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d812:	e023      	b.n	800d85c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	dc02      	bgt.n	800d826 <USBD_GetConfig+0x2e>
 800d820:	2b00      	cmp	r3, #0
 800d822:	dc03      	bgt.n	800d82c <USBD_GetConfig+0x34>
 800d824:	e015      	b.n	800d852 <USBD_GetConfig+0x5a>
 800d826:	2b03      	cmp	r3, #3
 800d828:	d00b      	beq.n	800d842 <USBD_GetConfig+0x4a>
 800d82a:	e012      	b.n	800d852 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	3308      	adds	r3, #8
 800d836:	2201      	movs	r2, #1
 800d838:	4619      	mov	r1, r3
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 f927 	bl	800da8e <USBD_CtlSendData>
        break;
 800d840:	e00c      	b.n	800d85c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	3304      	adds	r3, #4
 800d846:	2201      	movs	r2, #1
 800d848:	4619      	mov	r1, r3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f91f 	bl	800da8e <USBD_CtlSendData>
        break;
 800d850:	e004      	b.n	800d85c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d852:	6839      	ldr	r1, [r7, #0]
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 f8a9 	bl	800d9ac <USBD_CtlError>
        break;
 800d85a:	bf00      	nop
}
 800d85c:	bf00      	nop
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d874:	b2db      	uxtb	r3, r3
 800d876:	3b01      	subs	r3, #1
 800d878:	2b02      	cmp	r3, #2
 800d87a:	d81e      	bhi.n	800d8ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	88db      	ldrh	r3, [r3, #6]
 800d880:	2b02      	cmp	r3, #2
 800d882:	d004      	beq.n	800d88e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d884:	6839      	ldr	r1, [r7, #0]
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f890 	bl	800d9ac <USBD_CtlError>
        break;
 800d88c:	e01a      	b.n	800d8c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2201      	movs	r2, #1
 800d892:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d005      	beq.n	800d8aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	f043 0202 	orr.w	r2, r3, #2
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	330c      	adds	r3, #12
 800d8ae:	2202      	movs	r2, #2
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f8eb 	bl	800da8e <USBD_CtlSendData>
      break;
 800d8b8:	e004      	b.n	800d8c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f875 	bl	800d9ac <USBD_CtlError>
      break;
 800d8c2:	bf00      	nop
  }
}
 800d8c4:	bf00      	nop
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	885b      	ldrh	r3, [r3, #2]
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d106      	bne.n	800d8ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 f92b 	bl	800db42 <USBD_CtlSendStatus>
  }
}
 800d8ec:	bf00      	nop
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d904:	b2db      	uxtb	r3, r3
 800d906:	3b01      	subs	r3, #1
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d80b      	bhi.n	800d924 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	885b      	ldrh	r3, [r3, #2]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d10c      	bne.n	800d92e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 f910 	bl	800db42 <USBD_CtlSendStatus>
      }
      break;
 800d922:	e004      	b.n	800d92e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d924:	6839      	ldr	r1, [r7, #0]
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 f840 	bl	800d9ac <USBD_CtlError>
      break;
 800d92c:	e000      	b.n	800d930 <USBD_ClrFeature+0x3c>
      break;
 800d92e:	bf00      	nop
  }
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	781a      	ldrb	r2, [r3, #0]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	3301      	adds	r3, #1
 800d952:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	781a      	ldrb	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	3301      	adds	r3, #1
 800d960:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	f7ff fabb 	bl	800cede <SWAPBYTE>
 800d968:	4603      	mov	r3, r0
 800d96a:	461a      	mov	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	3301      	adds	r3, #1
 800d974:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	3301      	adds	r3, #1
 800d97a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f7ff faae 	bl	800cede <SWAPBYTE>
 800d982:	4603      	mov	r3, r0
 800d984:	461a      	mov	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	3301      	adds	r3, #1
 800d98e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	3301      	adds	r3, #1
 800d994:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f7ff faa1 	bl	800cede <SWAPBYTE>
 800d99c:	4603      	mov	r3, r0
 800d99e:	461a      	mov	r2, r3
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	80da      	strh	r2, [r3, #6]
}
 800d9a4:	bf00      	nop
 800d9a6:	3710      	adds	r7, #16
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9b6:	2180      	movs	r1, #128	; 0x80
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f003 ffd1 	bl	8011960 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d9be:	2100      	movs	r1, #0
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f003 ffcd 	bl	8011960 <USBD_LL_StallEP>
}
 800d9c6:	bf00      	nop
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b086      	sub	sp, #24
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	60f8      	str	r0, [r7, #12]
 800d9d6:	60b9      	str	r1, [r7, #8]
 800d9d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d036      	beq.n	800da52 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d9e8:	6938      	ldr	r0, [r7, #16]
 800d9ea:	f000 f836 	bl	800da5a <USBD_GetLen>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	005b      	lsls	r3, r3, #1
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d9fc:	7dfb      	ldrb	r3, [r7, #23]
 800d9fe:	68ba      	ldr	r2, [r7, #8]
 800da00:	4413      	add	r3, r2
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	7812      	ldrb	r2, [r2, #0]
 800da06:	701a      	strb	r2, [r3, #0]
  idx++;
 800da08:	7dfb      	ldrb	r3, [r7, #23]
 800da0a:	3301      	adds	r3, #1
 800da0c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800da0e:	7dfb      	ldrb	r3, [r7, #23]
 800da10:	68ba      	ldr	r2, [r7, #8]
 800da12:	4413      	add	r3, r2
 800da14:	2203      	movs	r2, #3
 800da16:	701a      	strb	r2, [r3, #0]
  idx++;
 800da18:	7dfb      	ldrb	r3, [r7, #23]
 800da1a:	3301      	adds	r3, #1
 800da1c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800da1e:	e013      	b.n	800da48 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800da20:	7dfb      	ldrb	r3, [r7, #23]
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	4413      	add	r3, r2
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	7812      	ldrb	r2, [r2, #0]
 800da2a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	3301      	adds	r3, #1
 800da30:	613b      	str	r3, [r7, #16]
    idx++;
 800da32:	7dfb      	ldrb	r3, [r7, #23]
 800da34:	3301      	adds	r3, #1
 800da36:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800da38:	7dfb      	ldrb	r3, [r7, #23]
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	4413      	add	r3, r2
 800da3e:	2200      	movs	r2, #0
 800da40:	701a      	strb	r2, [r3, #0]
    idx++;
 800da42:	7dfb      	ldrb	r3, [r7, #23]
 800da44:	3301      	adds	r3, #1
 800da46:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1e7      	bne.n	800da20 <USBD_GetString+0x52>
 800da50:	e000      	b.n	800da54 <USBD_GetString+0x86>
    return;
 800da52:	bf00      	nop
  }
}
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800da5a:	b480      	push	{r7}
 800da5c:	b085      	sub	sp, #20
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800da62:	2300      	movs	r3, #0
 800da64:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800da6a:	e005      	b.n	800da78 <USBD_GetLen+0x1e>
  {
    len++;
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
 800da6e:	3301      	adds	r3, #1
 800da70:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	3301      	adds	r3, #1
 800da76:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1f5      	bne.n	800da6c <USBD_GetLen+0x12>
  }

  return len;
 800da80:	7bfb      	ldrb	r3, [r7, #15]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3714      	adds	r7, #20
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b084      	sub	sp, #16
 800da92:	af00      	add	r7, sp, #0
 800da94:	60f8      	str	r0, [r7, #12]
 800da96:	60b9      	str	r1, [r7, #8]
 800da98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2202      	movs	r2, #2
 800da9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	2100      	movs	r1, #0
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f003 ffdc 	bl	8011a72 <USBD_LL_Transmit>

  return USBD_OK;
 800daba:	2300      	movs	r3, #0
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	68ba      	ldr	r2, [r7, #8]
 800dad4:	2100      	movs	r1, #0
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f003 ffcb 	bl	8011a72 <USBD_LL_Transmit>

  return USBD_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	60f8      	str	r0, [r7, #12]
 800daee:	60b9      	str	r1, [r7, #8]
 800daf0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2203      	movs	r2, #3
 800daf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68ba      	ldr	r2, [r7, #8]
 800db0e:	2100      	movs	r1, #0
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	f003 ffcf 	bl	8011ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db16:	2300      	movs	r3, #0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3710      	adds	r7, #16
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	68ba      	ldr	r2, [r7, #8]
 800db30:	2100      	movs	r1, #0
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	f003 ffbe 	bl	8011ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db38:	2300      	movs	r3, #0
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800db42:	b580      	push	{r7, lr}
 800db44:	b082      	sub	sp, #8
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2204      	movs	r2, #4
 800db4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800db52:	2300      	movs	r3, #0
 800db54:	2200      	movs	r2, #0
 800db56:	2100      	movs	r1, #0
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f003 ff8a 	bl	8011a72 <USBD_LL_Transmit>

  return USBD_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2205      	movs	r2, #5
 800db74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db78:	2300      	movs	r3, #0
 800db7a:	2200      	movs	r2, #0
 800db7c:	2100      	movs	r1, #0
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f003 ff98 	bl	8011ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
	...

0800db90 <__NVIC_SetPriority>:
{
 800db90:	b480      	push	{r7}
 800db92:	b083      	sub	sp, #12
 800db94:	af00      	add	r7, sp, #0
 800db96:	4603      	mov	r3, r0
 800db98:	6039      	str	r1, [r7, #0]
 800db9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	db0a      	blt.n	800dbba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	490c      	ldr	r1, [pc, #48]	; (800dbdc <__NVIC_SetPriority+0x4c>)
 800dbaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbae:	0112      	lsls	r2, r2, #4
 800dbb0:	b2d2      	uxtb	r2, r2
 800dbb2:	440b      	add	r3, r1
 800dbb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dbb8:	e00a      	b.n	800dbd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	4908      	ldr	r1, [pc, #32]	; (800dbe0 <__NVIC_SetPriority+0x50>)
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	f003 030f 	and.w	r3, r3, #15
 800dbc6:	3b04      	subs	r3, #4
 800dbc8:	0112      	lsls	r2, r2, #4
 800dbca:	b2d2      	uxtb	r2, r2
 800dbcc:	440b      	add	r3, r1
 800dbce:	761a      	strb	r2, [r3, #24]
}
 800dbd0:	bf00      	nop
 800dbd2:	370c      	adds	r7, #12
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr
 800dbdc:	e000e100 	.word	0xe000e100
 800dbe0:	e000ed00 	.word	0xe000ed00

0800dbe4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dbe8:	4b05      	ldr	r3, [pc, #20]	; (800dc00 <SysTick_Handler+0x1c>)
 800dbea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dbec:	f002 f902 	bl	800fdf4 <xTaskGetSchedulerState>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d001      	beq.n	800dbfa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dbf6:	f003 f827 	bl	8010c48 <xPortSysTickHandler>
  }
}
 800dbfa:	bf00      	nop
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	e000e010 	.word	0xe000e010

0800dc04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dc08:	2100      	movs	r1, #0
 800dc0a:	f06f 0004 	mvn.w	r0, #4
 800dc0e:	f7ff ffbf 	bl	800db90 <__NVIC_SetPriority>
#endif
}
 800dc12:	bf00      	nop
 800dc14:	bd80      	pop	{r7, pc}
	...

0800dc18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc1e:	f3ef 8305 	mrs	r3, IPSR
 800dc22:	603b      	str	r3, [r7, #0]
  return(result);
 800dc24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dc2a:	f06f 0305 	mvn.w	r3, #5
 800dc2e:	607b      	str	r3, [r7, #4]
 800dc30:	e00c      	b.n	800dc4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dc32:	4b0a      	ldr	r3, [pc, #40]	; (800dc5c <osKernelInitialize+0x44>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d105      	bne.n	800dc46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dc3a:	4b08      	ldr	r3, [pc, #32]	; (800dc5c <osKernelInitialize+0x44>)
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc40:	2300      	movs	r3, #0
 800dc42:	607b      	str	r3, [r7, #4]
 800dc44:	e002      	b.n	800dc4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dc46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc4c:	687b      	ldr	r3, [r7, #4]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	370c      	adds	r7, #12
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	200027b4 	.word	0x200027b4

0800dc60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc66:	f3ef 8305 	mrs	r3, IPSR
 800dc6a:	603b      	str	r3, [r7, #0]
  return(result);
 800dc6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d003      	beq.n	800dc7a <osKernelStart+0x1a>
    stat = osErrorISR;
 800dc72:	f06f 0305 	mvn.w	r3, #5
 800dc76:	607b      	str	r3, [r7, #4]
 800dc78:	e010      	b.n	800dc9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc7a:	4b0b      	ldr	r3, [pc, #44]	; (800dca8 <osKernelStart+0x48>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d109      	bne.n	800dc96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc82:	f7ff ffbf 	bl	800dc04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc86:	4b08      	ldr	r3, [pc, #32]	; (800dca8 <osKernelStart+0x48>)
 800dc88:	2202      	movs	r2, #2
 800dc8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc8c:	f001 fad0 	bl	800f230 <vTaskStartScheduler>
      stat = osOK;
 800dc90:	2300      	movs	r3, #0
 800dc92:	607b      	str	r3, [r7, #4]
 800dc94:	e002      	b.n	800dc9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dc96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc9c:	687b      	ldr	r3, [r7, #4]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	200027b4 	.word	0x200027b4

0800dcac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b08e      	sub	sp, #56	; 0x38
 800dcb0:	af04      	add	r7, sp, #16
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcbc:	f3ef 8305 	mrs	r3, IPSR
 800dcc0:	617b      	str	r3, [r7, #20]
  return(result);
 800dcc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d17e      	bne.n	800ddc6 <osThreadNew+0x11a>
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d07b      	beq.n	800ddc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dcce:	2380      	movs	r3, #128	; 0x80
 800dcd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dcd2:	2318      	movs	r3, #24
 800dcd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dcda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d045      	beq.n	800dd72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d002      	beq.n	800dcf4 <osThreadNew+0x48>
        name = attr->name;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d002      	beq.n	800dd02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	699b      	ldr	r3, [r3, #24]
 800dd00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d008      	beq.n	800dd1a <osThreadNew+0x6e>
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	2b38      	cmp	r3, #56	; 0x38
 800dd0c:	d805      	bhi.n	800dd1a <osThreadNew+0x6e>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	f003 0301 	and.w	r3, r3, #1
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d001      	beq.n	800dd1e <osThreadNew+0x72>
        return (NULL);
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	e054      	b.n	800ddc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	695b      	ldr	r3, [r3, #20]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d003      	beq.n	800dd2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	695b      	ldr	r3, [r3, #20]
 800dd2a:	089b      	lsrs	r3, r3, #2
 800dd2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00e      	beq.n	800dd54 <osThreadNew+0xa8>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	2bbf      	cmp	r3, #191	; 0xbf
 800dd3c:	d90a      	bls.n	800dd54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d006      	beq.n	800dd54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	695b      	ldr	r3, [r3, #20]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d002      	beq.n	800dd54 <osThreadNew+0xa8>
        mem = 1;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	61bb      	str	r3, [r7, #24]
 800dd52:	e010      	b.n	800dd76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d10c      	bne.n	800dd76 <osThreadNew+0xca>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d108      	bne.n	800dd76 <osThreadNew+0xca>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	691b      	ldr	r3, [r3, #16]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d104      	bne.n	800dd76 <osThreadNew+0xca>
          mem = 0;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	61bb      	str	r3, [r7, #24]
 800dd70:	e001      	b.n	800dd76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dd72:	2300      	movs	r3, #0
 800dd74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d110      	bne.n	800dd9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd84:	9202      	str	r2, [sp, #8]
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	6a3a      	ldr	r2, [r7, #32]
 800dd90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f000 fff6 	bl	800ed84 <xTaskCreateStatic>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	613b      	str	r3, [r7, #16]
 800dd9c:	e013      	b.n	800ddc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d110      	bne.n	800ddc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dda4:	6a3b      	ldr	r3, [r7, #32]
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	f107 0310 	add.w	r3, r7, #16
 800ddac:	9301      	str	r3, [sp, #4]
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f001 f841 	bl	800ee3e <xTaskCreate>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d001      	beq.n	800ddc6 <osThreadNew+0x11a>
            hTask = NULL;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ddc6:	693b      	ldr	r3, [r7, #16]
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3728      	adds	r7, #40	; 0x28
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddd8:	f3ef 8305 	mrs	r3, IPSR
 800dddc:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d003      	beq.n	800ddec <osDelay+0x1c>
    stat = osErrorISR;
 800dde4:	f06f 0305 	mvn.w	r3, #5
 800dde8:	60fb      	str	r3, [r7, #12]
 800ddea:	e007      	b.n	800ddfc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ddec:	2300      	movs	r3, #0
 800ddee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <osDelay+0x2c>
      vTaskDelay(ticks);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f001 f980 	bl	800f0fc <vTaskDelay>
    }
  }

  return (stat);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800de06:	b580      	push	{r7, lr}
 800de08:	b08a      	sub	sp, #40	; 0x28
 800de0a:	af02      	add	r7, sp, #8
 800de0c:	60f8      	str	r0, [r7, #12]
 800de0e:	60b9      	str	r1, [r7, #8]
 800de10:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800de12:	2300      	movs	r3, #0
 800de14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de16:	f3ef 8305 	mrs	r3, IPSR
 800de1a:	613b      	str	r3, [r7, #16]
  return(result);
 800de1c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d15f      	bne.n	800dee2 <osMessageQueueNew+0xdc>
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d05c      	beq.n	800dee2 <osMessageQueueNew+0xdc>
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d059      	beq.n	800dee2 <osMessageQueueNew+0xdc>
    mem = -1;
 800de2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d029      	beq.n	800de8e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d012      	beq.n	800de68 <osMessageQueueNew+0x62>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	2b4f      	cmp	r3, #79	; 0x4f
 800de48:	d90e      	bls.n	800de68 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00a      	beq.n	800de68 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	695a      	ldr	r2, [r3, #20]
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	68b9      	ldr	r1, [r7, #8]
 800de5a:	fb01 f303 	mul.w	r3, r1, r3
 800de5e:	429a      	cmp	r2, r3
 800de60:	d302      	bcc.n	800de68 <osMessageQueueNew+0x62>
        mem = 1;
 800de62:	2301      	movs	r3, #1
 800de64:	61bb      	str	r3, [r7, #24]
 800de66:	e014      	b.n	800de92 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d110      	bne.n	800de92 <osMessageQueueNew+0x8c>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d10c      	bne.n	800de92 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d108      	bne.n	800de92 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	695b      	ldr	r3, [r3, #20]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d104      	bne.n	800de92 <osMessageQueueNew+0x8c>
          mem = 0;
 800de88:	2300      	movs	r3, #0
 800de8a:	61bb      	str	r3, [r7, #24]
 800de8c:	e001      	b.n	800de92 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d10b      	bne.n	800deb0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	691a      	ldr	r2, [r3, #16]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	2100      	movs	r1, #0
 800dea2:	9100      	str	r1, [sp, #0]
 800dea4:	68b9      	ldr	r1, [r7, #8]
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f000 fa2e 	bl	800e308 <xQueueGenericCreateStatic>
 800deac:	61f8      	str	r0, [r7, #28]
 800deae:	e008      	b.n	800dec2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d105      	bne.n	800dec2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800deb6:	2200      	movs	r2, #0
 800deb8:	68b9      	ldr	r1, [r7, #8]
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f000 fa9c 	bl	800e3f8 <xQueueGenericCreate>
 800dec0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00c      	beq.n	800dee2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d003      	beq.n	800ded6 <osMessageQueueNew+0xd0>
        name = attr->name;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	617b      	str	r3, [r7, #20]
 800ded4:	e001      	b.n	800deda <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800deda:	6979      	ldr	r1, [r7, #20]
 800dedc:	69f8      	ldr	r0, [r7, #28]
 800dede:	f000 fef3 	bl	800ecc8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dee2:	69fb      	ldr	r3, [r7, #28]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3720      	adds	r7, #32
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	603b      	str	r3, [r7, #0]
 800def8:	4613      	mov	r3, r2
 800defa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800df00:	2300      	movs	r3, #0
 800df02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df04:	f3ef 8305 	mrs	r3, IPSR
 800df08:	617b      	str	r3, [r7, #20]
  return(result);
 800df0a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d028      	beq.n	800df62 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d005      	beq.n	800df22 <osMessageQueuePut+0x36>
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d002      	beq.n	800df22 <osMessageQueuePut+0x36>
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d003      	beq.n	800df2a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800df22:	f06f 0303 	mvn.w	r3, #3
 800df26:	61fb      	str	r3, [r7, #28]
 800df28:	e038      	b.n	800df9c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800df2a:	2300      	movs	r3, #0
 800df2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800df2e:	f107 0210 	add.w	r2, r7, #16
 800df32:	2300      	movs	r3, #0
 800df34:	68b9      	ldr	r1, [r7, #8]
 800df36:	69b8      	ldr	r0, [r7, #24]
 800df38:	f000 fbba 	bl	800e6b0 <xQueueGenericSendFromISR>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d003      	beq.n	800df4a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800df42:	f06f 0302 	mvn.w	r3, #2
 800df46:	61fb      	str	r3, [r7, #28]
 800df48:	e028      	b.n	800df9c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d025      	beq.n	800df9c <osMessageQueuePut+0xb0>
 800df50:	4b15      	ldr	r3, [pc, #84]	; (800dfa8 <osMessageQueuePut+0xbc>)
 800df52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df56:	601a      	str	r2, [r3, #0]
 800df58:	f3bf 8f4f 	dsb	sy
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	e01c      	b.n	800df9c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d002      	beq.n	800df6e <osMessageQueuePut+0x82>
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d103      	bne.n	800df76 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800df6e:	f06f 0303 	mvn.w	r3, #3
 800df72:	61fb      	str	r3, [r7, #28]
 800df74:	e012      	b.n	800df9c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800df76:	2300      	movs	r3, #0
 800df78:	683a      	ldr	r2, [r7, #0]
 800df7a:	68b9      	ldr	r1, [r7, #8]
 800df7c:	69b8      	ldr	r0, [r7, #24]
 800df7e:	f000 fa99 	bl	800e4b4 <xQueueGenericSend>
 800df82:	4603      	mov	r3, r0
 800df84:	2b01      	cmp	r3, #1
 800df86:	d009      	beq.n	800df9c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d003      	beq.n	800df96 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800df8e:	f06f 0301 	mvn.w	r3, #1
 800df92:	61fb      	str	r3, [r7, #28]
 800df94:	e002      	b.n	800df9c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800df96:	f06f 0302 	mvn.w	r3, #2
 800df9a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800df9c:	69fb      	ldr	r3, [r7, #28]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3720      	adds	r7, #32
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	e000ed04 	.word	0xe000ed04

0800dfac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b088      	sub	sp, #32
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
 800dfb8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfc2:	f3ef 8305 	mrs	r3, IPSR
 800dfc6:	617b      	str	r3, [r7, #20]
  return(result);
 800dfc8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d028      	beq.n	800e020 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d005      	beq.n	800dfe0 <osMessageQueueGet+0x34>
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d002      	beq.n	800dfe0 <osMessageQueueGet+0x34>
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d003      	beq.n	800dfe8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dfe0:	f06f 0303 	mvn.w	r3, #3
 800dfe4:	61fb      	str	r3, [r7, #28]
 800dfe6:	e037      	b.n	800e058 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dfec:	f107 0310 	add.w	r3, r7, #16
 800dff0:	461a      	mov	r2, r3
 800dff2:	68b9      	ldr	r1, [r7, #8]
 800dff4:	69b8      	ldr	r0, [r7, #24]
 800dff6:	f000 fcd7 	bl	800e9a8 <xQueueReceiveFromISR>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d003      	beq.n	800e008 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e000:	f06f 0302 	mvn.w	r3, #2
 800e004:	61fb      	str	r3, [r7, #28]
 800e006:	e027      	b.n	800e058 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d024      	beq.n	800e058 <osMessageQueueGet+0xac>
 800e00e:	4b15      	ldr	r3, [pc, #84]	; (800e064 <osMessageQueueGet+0xb8>)
 800e010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e014:	601a      	str	r2, [r3, #0]
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	e01b      	b.n	800e058 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d002      	beq.n	800e02c <osMessageQueueGet+0x80>
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d103      	bne.n	800e034 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e02c:	f06f 0303 	mvn.w	r3, #3
 800e030:	61fb      	str	r3, [r7, #28]
 800e032:	e011      	b.n	800e058 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	68b9      	ldr	r1, [r7, #8]
 800e038:	69b8      	ldr	r0, [r7, #24]
 800e03a:	f000 fbd5 	bl	800e7e8 <xQueueReceive>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b01      	cmp	r3, #1
 800e042:	d009      	beq.n	800e058 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d003      	beq.n	800e052 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e04a:	f06f 0301 	mvn.w	r3, #1
 800e04e:	61fb      	str	r3, [r7, #28]
 800e050:	e002      	b.n	800e058 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e052:	f06f 0302 	mvn.w	r3, #2
 800e056:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e058:	69fb      	ldr	r3, [r7, #28]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3720      	adds	r7, #32
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	e000ed04 	.word	0xe000ed04

0800e068 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e068:	b480      	push	{r7}
 800e06a:	b085      	sub	sp, #20
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	4a07      	ldr	r2, [pc, #28]	; (800e094 <vApplicationGetIdleTaskMemory+0x2c>)
 800e078:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	4a06      	ldr	r2, [pc, #24]	; (800e098 <vApplicationGetIdleTaskMemory+0x30>)
 800e07e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2280      	movs	r2, #128	; 0x80
 800e084:	601a      	str	r2, [r3, #0]
}
 800e086:	bf00      	nop
 800e088:	3714      	adds	r7, #20
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	200027b8 	.word	0x200027b8
 800e098:	20002878 	.word	0x20002878

0800e09c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	4a07      	ldr	r2, [pc, #28]	; (800e0c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800e0ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	4a06      	ldr	r2, [pc, #24]	; (800e0cc <vApplicationGetTimerTaskMemory+0x30>)
 800e0b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e0ba:	601a      	str	r2, [r3, #0]
}
 800e0bc:	bf00      	nop
 800e0be:	3714      	adds	r7, #20
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr
 800e0c8:	20002a78 	.word	0x20002a78
 800e0cc:	20002b38 	.word	0x20002b38

0800e0d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f103 0208 	add.w	r2, r3, #8
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f103 0208 	add.w	r2, r3, #8
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f103 0208 	add.w	r2, r3, #8
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e104:	bf00      	nop
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e11e:	bf00      	nop
 800e120:	370c      	adds	r7, #12
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr

0800e12a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e12a:	b480      	push	{r7}
 800e12c:	b085      	sub	sp, #20
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
 800e132:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	689a      	ldr	r2, [r3, #8]
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	683a      	ldr	r2, [r7, #0]
 800e14e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	1c5a      	adds	r2, r3, #1
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	601a      	str	r2, [r3, #0]
}
 800e166:	bf00      	nop
 800e168:	3714      	adds	r7, #20
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e172:	b480      	push	{r7}
 800e174:	b085      	sub	sp, #20
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
 800e17a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e188:	d103      	bne.n	800e192 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	691b      	ldr	r3, [r3, #16]
 800e18e:	60fb      	str	r3, [r7, #12]
 800e190:	e00c      	b.n	800e1ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	3308      	adds	r3, #8
 800e196:	60fb      	str	r3, [r7, #12]
 800e198:	e002      	b.n	800e1a0 <vListInsert+0x2e>
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	60fb      	str	r3, [r7, #12]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	68ba      	ldr	r2, [r7, #8]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d2f6      	bcs.n	800e19a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	683a      	ldr	r2, [r7, #0]
 800e1ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	68fa      	ldr	r2, [r7, #12]
 800e1c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	601a      	str	r2, [r3, #0]
}
 800e1d8:	bf00      	nop
 800e1da:	3714      	adds	r7, #20
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	6892      	ldr	r2, [r2, #8]
 800e1fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	6852      	ldr	r2, [r2, #4]
 800e204:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d103      	bne.n	800e218 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	689a      	ldr	r2, [r3, #8]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	1e5a      	subs	r2, r3, #1
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3714      	adds	r7, #20
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d10a      	bne.n	800e262 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e250:	f383 8811 	msr	BASEPRI, r3
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e25e:	bf00      	nop
 800e260:	e7fe      	b.n	800e260 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e262:	f002 fc5f 	bl	8010b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e26e:	68f9      	ldr	r1, [r7, #12]
 800e270:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e272:	fb01 f303 	mul.w	r3, r1, r3
 800e276:	441a      	add	r2, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2200      	movs	r2, #0
 800e280:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e292:	3b01      	subs	r3, #1
 800e294:	68f9      	ldr	r1, [r7, #12]
 800e296:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e298:	fb01 f303 	mul.w	r3, r1, r3
 800e29c:	441a      	add	r2, r3
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	22ff      	movs	r2, #255	; 0xff
 800e2a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	22ff      	movs	r2, #255	; 0xff
 800e2ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d114      	bne.n	800e2e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d01a      	beq.n	800e2f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	3310      	adds	r3, #16
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f001 faff 	bl	800f8c8 <xTaskRemoveFromEventList>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d012      	beq.n	800e2f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e2d0:	4b0c      	ldr	r3, [pc, #48]	; (800e304 <xQueueGenericReset+0xcc>)
 800e2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d6:	601a      	str	r2, [r3, #0]
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	f3bf 8f6f 	isb	sy
 800e2e0:	e009      	b.n	800e2f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	3310      	adds	r3, #16
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7ff fef2 	bl	800e0d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	3324      	adds	r3, #36	; 0x24
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7ff feed 	bl	800e0d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e2f6:	f002 fc45 	bl	8010b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e2fa:	2301      	movs	r3, #1
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}
 800e304:	e000ed04 	.word	0xe000ed04

0800e308 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b08e      	sub	sp, #56	; 0x38
 800e30c:	af02      	add	r7, sp, #8
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
 800e314:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d10a      	bne.n	800e332 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e320:	f383 8811 	msr	BASEPRI, r3
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	f3bf 8f4f 	dsb	sy
 800e32c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e32e:	bf00      	nop
 800e330:	e7fe      	b.n	800e330 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d10a      	bne.n	800e34e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33c:	f383 8811 	msr	BASEPRI, r3
 800e340:	f3bf 8f6f 	isb	sy
 800e344:	f3bf 8f4f 	dsb	sy
 800e348:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e34a:	bf00      	nop
 800e34c:	e7fe      	b.n	800e34c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <xQueueGenericCreateStatic+0x52>
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d001      	beq.n	800e35e <xQueueGenericCreateStatic+0x56>
 800e35a:	2301      	movs	r3, #1
 800e35c:	e000      	b.n	800e360 <xQueueGenericCreateStatic+0x58>
 800e35e:	2300      	movs	r3, #0
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10a      	bne.n	800e37a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e368:	f383 8811 	msr	BASEPRI, r3
 800e36c:	f3bf 8f6f 	isb	sy
 800e370:	f3bf 8f4f 	dsb	sy
 800e374:	623b      	str	r3, [r7, #32]
}
 800e376:	bf00      	nop
 800e378:	e7fe      	b.n	800e378 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d102      	bne.n	800e386 <xQueueGenericCreateStatic+0x7e>
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d101      	bne.n	800e38a <xQueueGenericCreateStatic+0x82>
 800e386:	2301      	movs	r3, #1
 800e388:	e000      	b.n	800e38c <xQueueGenericCreateStatic+0x84>
 800e38a:	2300      	movs	r3, #0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10a      	bne.n	800e3a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	61fb      	str	r3, [r7, #28]
}
 800e3a2:	bf00      	nop
 800e3a4:	e7fe      	b.n	800e3a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e3a6:	2350      	movs	r3, #80	; 0x50
 800e3a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	2b50      	cmp	r3, #80	; 0x50
 800e3ae:	d00a      	beq.n	800e3c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b4:	f383 8811 	msr	BASEPRI, r3
 800e3b8:	f3bf 8f6f 	isb	sy
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	61bb      	str	r3, [r7, #24]
}
 800e3c2:	bf00      	nop
 800e3c4:	e7fe      	b.n	800e3c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e3c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00d      	beq.n	800e3ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	68b9      	ldr	r1, [r7, #8]
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f000 f83f 	bl	800e46c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3730      	adds	r7, #48	; 0x30
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08a      	sub	sp, #40	; 0x28
 800e3fc:	af02      	add	r7, sp, #8
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	4613      	mov	r3, r2
 800e404:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d10a      	bne.n	800e422 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e410:	f383 8811 	msr	BASEPRI, r3
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	613b      	str	r3, [r7, #16]
}
 800e41e:	bf00      	nop
 800e420:	e7fe      	b.n	800e420 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	fb02 f303 	mul.w	r3, r2, r3
 800e42a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	3350      	adds	r3, #80	; 0x50
 800e430:	4618      	mov	r0, r3
 800e432:	f002 fc99 	bl	8010d68 <pvPortMalloc>
 800e436:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d011      	beq.n	800e462 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	3350      	adds	r3, #80	; 0x50
 800e446:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e450:	79fa      	ldrb	r2, [r7, #7]
 800e452:	69bb      	ldr	r3, [r7, #24]
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	4613      	mov	r3, r2
 800e458:	697a      	ldr	r2, [r7, #20]
 800e45a:	68b9      	ldr	r1, [r7, #8]
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f000 f805 	bl	800e46c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e462:	69bb      	ldr	r3, [r7, #24]
	}
 800e464:	4618      	mov	r0, r3
 800e466:	3720      	adds	r7, #32
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b084      	sub	sp, #16
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	607a      	str	r2, [r7, #4]
 800e478:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d103      	bne.n	800e488 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	69ba      	ldr	r2, [r7, #24]
 800e484:	601a      	str	r2, [r3, #0]
 800e486:	e002      	b.n	800e48e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e488:	69bb      	ldr	r3, [r7, #24]
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e494:	69bb      	ldr	r3, [r7, #24]
 800e496:	68ba      	ldr	r2, [r7, #8]
 800e498:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e49a:	2101      	movs	r1, #1
 800e49c:	69b8      	ldr	r0, [r7, #24]
 800e49e:	f7ff fecb 	bl	800e238 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	78fa      	ldrb	r2, [r7, #3]
 800e4a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e4aa:	bf00      	nop
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
	...

0800e4b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b08e      	sub	sp, #56	; 0x38
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
 800e4c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d10a      	bne.n	800e4e6 <xQueueGenericSend+0x32>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e4e2:	bf00      	nop
 800e4e4:	e7fe      	b.n	800e4e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d103      	bne.n	800e4f4 <xQueueGenericSend+0x40>
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d101      	bne.n	800e4f8 <xQueueGenericSend+0x44>
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e000      	b.n	800e4fa <xQueueGenericSend+0x46>
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d10a      	bne.n	800e514 <xQueueGenericSend+0x60>
	__asm volatile
 800e4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e502:	f383 8811 	msr	BASEPRI, r3
 800e506:	f3bf 8f6f 	isb	sy
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e510:	bf00      	nop
 800e512:	e7fe      	b.n	800e512 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	2b02      	cmp	r3, #2
 800e518:	d103      	bne.n	800e522 <xQueueGenericSend+0x6e>
 800e51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d101      	bne.n	800e526 <xQueueGenericSend+0x72>
 800e522:	2301      	movs	r3, #1
 800e524:	e000      	b.n	800e528 <xQueueGenericSend+0x74>
 800e526:	2300      	movs	r3, #0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d10a      	bne.n	800e542 <xQueueGenericSend+0x8e>
	__asm volatile
 800e52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e530:	f383 8811 	msr	BASEPRI, r3
 800e534:	f3bf 8f6f 	isb	sy
 800e538:	f3bf 8f4f 	dsb	sy
 800e53c:	623b      	str	r3, [r7, #32]
}
 800e53e:	bf00      	nop
 800e540:	e7fe      	b.n	800e540 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e542:	f001 fc57 	bl	800fdf4 <xTaskGetSchedulerState>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d102      	bne.n	800e552 <xQueueGenericSend+0x9e>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d101      	bne.n	800e556 <xQueueGenericSend+0xa2>
 800e552:	2301      	movs	r3, #1
 800e554:	e000      	b.n	800e558 <xQueueGenericSend+0xa4>
 800e556:	2300      	movs	r3, #0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d10a      	bne.n	800e572 <xQueueGenericSend+0xbe>
	__asm volatile
 800e55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e560:	f383 8811 	msr	BASEPRI, r3
 800e564:	f3bf 8f6f 	isb	sy
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	61fb      	str	r3, [r7, #28]
}
 800e56e:	bf00      	nop
 800e570:	e7fe      	b.n	800e570 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e572:	f002 fad7 	bl	8010b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e57e:	429a      	cmp	r2, r3
 800e580:	d302      	bcc.n	800e588 <xQueueGenericSend+0xd4>
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	2b02      	cmp	r3, #2
 800e586:	d129      	bne.n	800e5dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e588:	683a      	ldr	r2, [r7, #0]
 800e58a:	68b9      	ldr	r1, [r7, #8]
 800e58c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e58e:	f000 fa8b 	bl	800eaa8 <prvCopyDataToQueue>
 800e592:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d010      	beq.n	800e5be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e59e:	3324      	adds	r3, #36	; 0x24
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f001 f991 	bl	800f8c8 <xTaskRemoveFromEventList>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d013      	beq.n	800e5d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e5ac:	4b3f      	ldr	r3, [pc, #252]	; (800e6ac <xQueueGenericSend+0x1f8>)
 800e5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5b2:	601a      	str	r2, [r3, #0]
 800e5b4:	f3bf 8f4f 	dsb	sy
 800e5b8:	f3bf 8f6f 	isb	sy
 800e5bc:	e00a      	b.n	800e5d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d007      	beq.n	800e5d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e5c4:	4b39      	ldr	r3, [pc, #228]	; (800e6ac <xQueueGenericSend+0x1f8>)
 800e5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e5d4:	f002 fad6 	bl	8010b84 <vPortExitCritical>
				return pdPASS;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	e063      	b.n	800e6a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d103      	bne.n	800e5ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e5e2:	f002 facf 	bl	8010b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	e05c      	b.n	800e6a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d106      	bne.n	800e5fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e5f0:	f107 0314 	add.w	r3, r7, #20
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f001 f9cb 	bl	800f990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5fe:	f002 fac1 	bl	8010b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e602:	f000 fe89 	bl	800f318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e606:	f002 fa8d 	bl	8010b24 <vPortEnterCritical>
 800e60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e610:	b25b      	sxtb	r3, r3
 800e612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e616:	d103      	bne.n	800e620 <xQueueGenericSend+0x16c>
 800e618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61a:	2200      	movs	r2, #0
 800e61c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e626:	b25b      	sxtb	r3, r3
 800e628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e62c:	d103      	bne.n	800e636 <xQueueGenericSend+0x182>
 800e62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e630:	2200      	movs	r2, #0
 800e632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e636:	f002 faa5 	bl	8010b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e63a:	1d3a      	adds	r2, r7, #4
 800e63c:	f107 0314 	add.w	r3, r7, #20
 800e640:	4611      	mov	r1, r2
 800e642:	4618      	mov	r0, r3
 800e644:	f001 f9ba 	bl	800f9bc <xTaskCheckForTimeOut>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d124      	bne.n	800e698 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e64e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e650:	f000 fb22 	bl	800ec98 <prvIsQueueFull>
 800e654:	4603      	mov	r3, r0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d018      	beq.n	800e68c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65c:	3310      	adds	r3, #16
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	4611      	mov	r1, r2
 800e662:	4618      	mov	r0, r3
 800e664:	f001 f8e0 	bl	800f828 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e66a:	f000 faad 	bl	800ebc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e66e:	f000 fe61 	bl	800f334 <xTaskResumeAll>
 800e672:	4603      	mov	r3, r0
 800e674:	2b00      	cmp	r3, #0
 800e676:	f47f af7c 	bne.w	800e572 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e67a:	4b0c      	ldr	r3, [pc, #48]	; (800e6ac <xQueueGenericSend+0x1f8>)
 800e67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e680:	601a      	str	r2, [r3, #0]
 800e682:	f3bf 8f4f 	dsb	sy
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	e772      	b.n	800e572 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e68c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e68e:	f000 fa9b 	bl	800ebc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e692:	f000 fe4f 	bl	800f334 <xTaskResumeAll>
 800e696:	e76c      	b.n	800e572 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e69a:	f000 fa95 	bl	800ebc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e69e:	f000 fe49 	bl	800f334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e6a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3738      	adds	r7, #56	; 0x38
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	e000ed04 	.word	0xe000ed04

0800e6b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b090      	sub	sp, #64	; 0x40
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	607a      	str	r2, [r7, #4]
 800e6bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d10a      	bne.n	800e6de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6cc:	f383 8811 	msr	BASEPRI, r3
 800e6d0:	f3bf 8f6f 	isb	sy
 800e6d4:	f3bf 8f4f 	dsb	sy
 800e6d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e6da:	bf00      	nop
 800e6dc:	e7fe      	b.n	800e6dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d103      	bne.n	800e6ec <xQueueGenericSendFromISR+0x3c>
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d101      	bne.n	800e6f0 <xQueueGenericSendFromISR+0x40>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e000      	b.n	800e6f2 <xQueueGenericSendFromISR+0x42>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10a      	bne.n	800e70c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fa:	f383 8811 	msr	BASEPRI, r3
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f3bf 8f4f 	dsb	sy
 800e706:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e708:	bf00      	nop
 800e70a:	e7fe      	b.n	800e70a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	2b02      	cmp	r3, #2
 800e710:	d103      	bne.n	800e71a <xQueueGenericSendFromISR+0x6a>
 800e712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e716:	2b01      	cmp	r3, #1
 800e718:	d101      	bne.n	800e71e <xQueueGenericSendFromISR+0x6e>
 800e71a:	2301      	movs	r3, #1
 800e71c:	e000      	b.n	800e720 <xQueueGenericSendFromISR+0x70>
 800e71e:	2300      	movs	r3, #0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10a      	bne.n	800e73a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e728:	f383 8811 	msr	BASEPRI, r3
 800e72c:	f3bf 8f6f 	isb	sy
 800e730:	f3bf 8f4f 	dsb	sy
 800e734:	623b      	str	r3, [r7, #32]
}
 800e736:	bf00      	nop
 800e738:	e7fe      	b.n	800e738 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e73a:	f002 fad5 	bl	8010ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e73e:	f3ef 8211 	mrs	r2, BASEPRI
 800e742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e746:	f383 8811 	msr	BASEPRI, r3
 800e74a:	f3bf 8f6f 	isb	sy
 800e74e:	f3bf 8f4f 	dsb	sy
 800e752:	61fa      	str	r2, [r7, #28]
 800e754:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e756:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e758:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e762:	429a      	cmp	r2, r3
 800e764:	d302      	bcc.n	800e76c <xQueueGenericSendFromISR+0xbc>
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	2b02      	cmp	r3, #2
 800e76a:	d12f      	bne.n	800e7cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e77a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e77c:	683a      	ldr	r2, [r7, #0]
 800e77e:	68b9      	ldr	r1, [r7, #8]
 800e780:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e782:	f000 f991 	bl	800eaa8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e786:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e78a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e78e:	d112      	bne.n	800e7b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e794:	2b00      	cmp	r3, #0
 800e796:	d016      	beq.n	800e7c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79a:	3324      	adds	r3, #36	; 0x24
 800e79c:	4618      	mov	r0, r3
 800e79e:	f001 f893 	bl	800f8c8 <xTaskRemoveFromEventList>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d00e      	beq.n	800e7c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00b      	beq.n	800e7c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	601a      	str	r2, [r3, #0]
 800e7b4:	e007      	b.n	800e7c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e7b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	b25a      	sxtb	r2, r3
 800e7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e7ca:	e001      	b.n	800e7d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e7da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3740      	adds	r7, #64	; 0x40
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
	...

0800e7e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b08c      	sub	sp, #48	; 0x30
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d10a      	bne.n	800e818 <xQueueReceive+0x30>
	__asm volatile
 800e802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e806:	f383 8811 	msr	BASEPRI, r3
 800e80a:	f3bf 8f6f 	isb	sy
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	623b      	str	r3, [r7, #32]
}
 800e814:	bf00      	nop
 800e816:	e7fe      	b.n	800e816 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d103      	bne.n	800e826 <xQueueReceive+0x3e>
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e822:	2b00      	cmp	r3, #0
 800e824:	d101      	bne.n	800e82a <xQueueReceive+0x42>
 800e826:	2301      	movs	r3, #1
 800e828:	e000      	b.n	800e82c <xQueueReceive+0x44>
 800e82a:	2300      	movs	r3, #0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d10a      	bne.n	800e846 <xQueueReceive+0x5e>
	__asm volatile
 800e830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e834:	f383 8811 	msr	BASEPRI, r3
 800e838:	f3bf 8f6f 	isb	sy
 800e83c:	f3bf 8f4f 	dsb	sy
 800e840:	61fb      	str	r3, [r7, #28]
}
 800e842:	bf00      	nop
 800e844:	e7fe      	b.n	800e844 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e846:	f001 fad5 	bl	800fdf4 <xTaskGetSchedulerState>
 800e84a:	4603      	mov	r3, r0
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d102      	bne.n	800e856 <xQueueReceive+0x6e>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d101      	bne.n	800e85a <xQueueReceive+0x72>
 800e856:	2301      	movs	r3, #1
 800e858:	e000      	b.n	800e85c <xQueueReceive+0x74>
 800e85a:	2300      	movs	r3, #0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d10a      	bne.n	800e876 <xQueueReceive+0x8e>
	__asm volatile
 800e860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e864:	f383 8811 	msr	BASEPRI, r3
 800e868:	f3bf 8f6f 	isb	sy
 800e86c:	f3bf 8f4f 	dsb	sy
 800e870:	61bb      	str	r3, [r7, #24]
}
 800e872:	bf00      	nop
 800e874:	e7fe      	b.n	800e874 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e876:	f002 f955 	bl	8010b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e87e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e882:	2b00      	cmp	r3, #0
 800e884:	d01f      	beq.n	800e8c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e886:	68b9      	ldr	r1, [r7, #8]
 800e888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e88a:	f000 f977 	bl	800eb7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e890:	1e5a      	subs	r2, r3, #1
 800e892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e894:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e898:	691b      	ldr	r3, [r3, #16]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d00f      	beq.n	800e8be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a0:	3310      	adds	r3, #16
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f001 f810 	bl	800f8c8 <xTaskRemoveFromEventList>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d007      	beq.n	800e8be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e8ae:	4b3d      	ldr	r3, [pc, #244]	; (800e9a4 <xQueueReceive+0x1bc>)
 800e8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8b4:	601a      	str	r2, [r3, #0]
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e8be:	f002 f961 	bl	8010b84 <vPortExitCritical>
				return pdPASS;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e069      	b.n	800e99a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d103      	bne.n	800e8d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e8cc:	f002 f95a 	bl	8010b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	e062      	b.n	800e99a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d106      	bne.n	800e8e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8da:	f107 0310 	add.w	r3, r7, #16
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f001 f856 	bl	800f990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e8e8:	f002 f94c 	bl	8010b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e8ec:	f000 fd14 	bl	800f318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8f0:	f002 f918 	bl	8010b24 <vPortEnterCritical>
 800e8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8fa:	b25b      	sxtb	r3, r3
 800e8fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e900:	d103      	bne.n	800e90a <xQueueReceive+0x122>
 800e902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e904:	2200      	movs	r2, #0
 800e906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e910:	b25b      	sxtb	r3, r3
 800e912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e916:	d103      	bne.n	800e920 <xQueueReceive+0x138>
 800e918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91a:	2200      	movs	r2, #0
 800e91c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e920:	f002 f930 	bl	8010b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e924:	1d3a      	adds	r2, r7, #4
 800e926:	f107 0310 	add.w	r3, r7, #16
 800e92a:	4611      	mov	r1, r2
 800e92c:	4618      	mov	r0, r3
 800e92e:	f001 f845 	bl	800f9bc <xTaskCheckForTimeOut>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d123      	bne.n	800e980 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e93a:	f000 f997 	bl	800ec6c <prvIsQueueEmpty>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d017      	beq.n	800e974 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	3324      	adds	r3, #36	; 0x24
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	4611      	mov	r1, r2
 800e94c:	4618      	mov	r0, r3
 800e94e:	f000 ff6b 	bl	800f828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e954:	f000 f938 	bl	800ebc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e958:	f000 fcec 	bl	800f334 <xTaskResumeAll>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d189      	bne.n	800e876 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e962:	4b10      	ldr	r3, [pc, #64]	; (800e9a4 <xQueueReceive+0x1bc>)
 800e964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	f3bf 8f6f 	isb	sy
 800e972:	e780      	b.n	800e876 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e976:	f000 f927 	bl	800ebc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e97a:	f000 fcdb 	bl	800f334 <xTaskResumeAll>
 800e97e:	e77a      	b.n	800e876 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e982:	f000 f921 	bl	800ebc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e986:	f000 fcd5 	bl	800f334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e98a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e98c:	f000 f96e 	bl	800ec6c <prvIsQueueEmpty>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	f43f af6f 	beq.w	800e876 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e998:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3730      	adds	r7, #48	; 0x30
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	e000ed04 	.word	0xe000ed04

0800e9a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b08e      	sub	sp, #56	; 0x38
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d10a      	bne.n	800e9d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c2:	f383 8811 	msr	BASEPRI, r3
 800e9c6:	f3bf 8f6f 	isb	sy
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	623b      	str	r3, [r7, #32]
}
 800e9d0:	bf00      	nop
 800e9d2:	e7fe      	b.n	800e9d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d103      	bne.n	800e9e2 <xQueueReceiveFromISR+0x3a>
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d101      	bne.n	800e9e6 <xQueueReceiveFromISR+0x3e>
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	e000      	b.n	800e9e8 <xQueueReceiveFromISR+0x40>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d10a      	bne.n	800ea02 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f0:	f383 8811 	msr	BASEPRI, r3
 800e9f4:	f3bf 8f6f 	isb	sy
 800e9f8:	f3bf 8f4f 	dsb	sy
 800e9fc:	61fb      	str	r3, [r7, #28]
}
 800e9fe:	bf00      	nop
 800ea00:	e7fe      	b.n	800ea00 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea02:	f002 f971 	bl	8010ce8 <vPortValidateInterruptPriority>
	__asm volatile
 800ea06:	f3ef 8211 	mrs	r2, BASEPRI
 800ea0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0e:	f383 8811 	msr	BASEPRI, r3
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	f3bf 8f4f 	dsb	sy
 800ea1a:	61ba      	str	r2, [r7, #24]
 800ea1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ea1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d02f      	beq.n	800ea8e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ea2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea38:	68b9      	ldr	r1, [r7, #8]
 800ea3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea3c:	f000 f89e 	bl	800eb7c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ea40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea42:	1e5a      	subs	r2, r3, #1
 800ea44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ea48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea50:	d112      	bne.n	800ea78 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d016      	beq.n	800ea88 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5c:	3310      	adds	r3, #16
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f000 ff32 	bl	800f8c8 <xTaskRemoveFromEventList>
 800ea64:	4603      	mov	r3, r0
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00e      	beq.n	800ea88 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00b      	beq.n	800ea88 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2201      	movs	r2, #1
 800ea74:	601a      	str	r2, [r3, #0]
 800ea76:	e007      	b.n	800ea88 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ea78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	b25a      	sxtb	r2, r3
 800ea82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ea8c:	e001      	b.n	800ea92 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	637b      	str	r3, [r7, #52]	; 0x34
 800ea92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea94:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	f383 8811 	msr	BASEPRI, r3
}
 800ea9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3738      	adds	r7, #56	; 0x38
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b086      	sub	sp, #24
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eab4:	2300      	movs	r3, #0
 800eab6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eabc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d10d      	bne.n	800eae2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d14d      	bne.n	800eb6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f001 f9ac 	bl	800fe30 <xTaskPriorityDisinherit>
 800ead8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2200      	movs	r2, #0
 800eade:	609a      	str	r2, [r3, #8]
 800eae0:	e043      	b.n	800eb6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d119      	bne.n	800eb1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6858      	ldr	r0, [r3, #4]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	68b9      	ldr	r1, [r7, #8]
 800eaf4:	f003 f993 	bl	8011e1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb00:	441a      	add	r2, r3
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	685a      	ldr	r2, [r3, #4]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	689b      	ldr	r3, [r3, #8]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d32b      	bcc.n	800eb6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	605a      	str	r2, [r3, #4]
 800eb1a:	e026      	b.n	800eb6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	68d8      	ldr	r0, [r3, #12]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb24:	461a      	mov	r2, r3
 800eb26:	68b9      	ldr	r1, [r7, #8]
 800eb28:	f003 f979 	bl	8011e1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	68da      	ldr	r2, [r3, #12]
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb34:	425b      	negs	r3, r3
 800eb36:	441a      	add	r2, r3
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	68da      	ldr	r2, [r3, #12]
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d207      	bcs.n	800eb58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	689a      	ldr	r2, [r3, #8]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb50:	425b      	negs	r3, r3
 800eb52:	441a      	add	r2, r3
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b02      	cmp	r3, #2
 800eb5c:	d105      	bne.n	800eb6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d002      	beq.n	800eb6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	3b01      	subs	r3, #1
 800eb68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	1c5a      	adds	r2, r3, #1
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eb72:	697b      	ldr	r3, [r7, #20]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3718      	adds	r7, #24
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d018      	beq.n	800ebc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	68da      	ldr	r2, [r3, #12]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb96:	441a      	add	r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	68da      	ldr	r2, [r3, #12]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d303      	bcc.n	800ebb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	68d9      	ldr	r1, [r3, #12]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb8:	461a      	mov	r2, r3
 800ebba:	6838      	ldr	r0, [r7, #0]
 800ebbc:	f003 f92f 	bl	8011e1e <memcpy>
	}
}
 800ebc0:	bf00      	nop
 800ebc2:	3708      	adds	r7, #8
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ebd0:	f001 ffa8 	bl	8010b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebdc:	e011      	b.n	800ec02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d012      	beq.n	800ec0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	3324      	adds	r3, #36	; 0x24
 800ebea:	4618      	mov	r0, r3
 800ebec:	f000 fe6c 	bl	800f8c8 <xTaskRemoveFromEventList>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d001      	beq.n	800ebfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ebf6:	f000 ff43 	bl	800fa80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ebfa:	7bfb      	ldrb	r3, [r7, #15]
 800ebfc:	3b01      	subs	r3, #1
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	dce9      	bgt.n	800ebde <prvUnlockQueue+0x16>
 800ec0a:	e000      	b.n	800ec0e <prvUnlockQueue+0x46>
					break;
 800ec0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	22ff      	movs	r2, #255	; 0xff
 800ec12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ec16:	f001 ffb5 	bl	8010b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ec1a:	f001 ff83 	bl	8010b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec26:	e011      	b.n	800ec4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d012      	beq.n	800ec56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	3310      	adds	r3, #16
 800ec34:	4618      	mov	r0, r3
 800ec36:	f000 fe47 	bl	800f8c8 <xTaskRemoveFromEventList>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d001      	beq.n	800ec44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ec40:	f000 ff1e 	bl	800fa80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ec44:	7bbb      	ldrb	r3, [r7, #14]
 800ec46:	3b01      	subs	r3, #1
 800ec48:	b2db      	uxtb	r3, r3
 800ec4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	dce9      	bgt.n	800ec28 <prvUnlockQueue+0x60>
 800ec54:	e000      	b.n	800ec58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ec56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	22ff      	movs	r2, #255	; 0xff
 800ec5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ec60:	f001 ff90 	bl	8010b84 <vPortExitCritical>
}
 800ec64:	bf00      	nop
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec74:	f001 ff56 	bl	8010b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d102      	bne.n	800ec86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ec80:	2301      	movs	r3, #1
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	e001      	b.n	800ec8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ec86:	2300      	movs	r3, #0
 800ec88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec8a:	f001 ff7b 	bl	8010b84 <vPortExitCritical>

	return xReturn;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3710      	adds	r7, #16
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eca0:	f001 ff40 	bl	8010b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d102      	bne.n	800ecb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	60fb      	str	r3, [r7, #12]
 800ecb4:	e001      	b.n	800ecba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ecba:	f001 ff63 	bl	8010b84 <vPortExitCritical>

	return xReturn;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60fb      	str	r3, [r7, #12]
 800ecd6:	e014      	b.n	800ed02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ecd8:	4a0f      	ldr	r2, [pc, #60]	; (800ed18 <vQueueAddToRegistry+0x50>)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d10b      	bne.n	800ecfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ece4:	490c      	ldr	r1, [pc, #48]	; (800ed18 <vQueueAddToRegistry+0x50>)
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	683a      	ldr	r2, [r7, #0]
 800ecea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ecee:	4a0a      	ldr	r2, [pc, #40]	; (800ed18 <vQueueAddToRegistry+0x50>)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	4413      	add	r3, r2
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ecfa:	e006      	b.n	800ed0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	60fb      	str	r3, [r7, #12]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2b07      	cmp	r3, #7
 800ed06:	d9e7      	bls.n	800ecd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed08:	bf00      	nop
 800ed0a:	bf00      	nop
 800ed0c:	3714      	adds	r7, #20
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop
 800ed18:	2000d87c 	.word	0x2000d87c

0800ed1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b086      	sub	sp, #24
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	60b9      	str	r1, [r7, #8]
 800ed26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ed2c:	f001 fefa 	bl	8010b24 <vPortEnterCritical>
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed36:	b25b      	sxtb	r3, r3
 800ed38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed3c:	d103      	bne.n	800ed46 <vQueueWaitForMessageRestricted+0x2a>
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed4c:	b25b      	sxtb	r3, r3
 800ed4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed52:	d103      	bne.n	800ed5c <vQueueWaitForMessageRestricted+0x40>
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed5c:	f001 ff12 	bl	8010b84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d106      	bne.n	800ed76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	3324      	adds	r3, #36	; 0x24
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	68b9      	ldr	r1, [r7, #8]
 800ed70:	4618      	mov	r0, r3
 800ed72:	f000 fd7d 	bl	800f870 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ed76:	6978      	ldr	r0, [r7, #20]
 800ed78:	f7ff ff26 	bl	800ebc8 <prvUnlockQueue>
	}
 800ed7c:	bf00      	nop
 800ed7e:	3718      	adds	r7, #24
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b08e      	sub	sp, #56	; 0x38
 800ed88:	af04      	add	r7, sp, #16
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
 800ed90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ed92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10a      	bne.n	800edae <xTaskCreateStatic+0x2a>
	__asm volatile
 800ed98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	623b      	str	r3, [r7, #32]
}
 800edaa:	bf00      	nop
 800edac:	e7fe      	b.n	800edac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800edae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d10a      	bne.n	800edca <xTaskCreateStatic+0x46>
	__asm volatile
 800edb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb8:	f383 8811 	msr	BASEPRI, r3
 800edbc:	f3bf 8f6f 	isb	sy
 800edc0:	f3bf 8f4f 	dsb	sy
 800edc4:	61fb      	str	r3, [r7, #28]
}
 800edc6:	bf00      	nop
 800edc8:	e7fe      	b.n	800edc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800edca:	23c0      	movs	r3, #192	; 0xc0
 800edcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	2bc0      	cmp	r3, #192	; 0xc0
 800edd2:	d00a      	beq.n	800edea <xTaskCreateStatic+0x66>
	__asm volatile
 800edd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd8:	f383 8811 	msr	BASEPRI, r3
 800eddc:	f3bf 8f6f 	isb	sy
 800ede0:	f3bf 8f4f 	dsb	sy
 800ede4:	61bb      	str	r3, [r7, #24]
}
 800ede6:	bf00      	nop
 800ede8:	e7fe      	b.n	800ede8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800edea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800edec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d01e      	beq.n	800ee30 <xTaskCreateStatic+0xac>
 800edf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d01b      	beq.n	800ee30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800edf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800edfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ee02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee04:	2202      	movs	r2, #2
 800ee06:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	9303      	str	r3, [sp, #12]
 800ee0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee10:	9302      	str	r3, [sp, #8]
 800ee12:	f107 0314 	add.w	r3, r7, #20
 800ee16:	9301      	str	r3, [sp, #4]
 800ee18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	68b9      	ldr	r1, [r7, #8]
 800ee22:	68f8      	ldr	r0, [r7, #12]
 800ee24:	f000 f850 	bl	800eec8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee2a:	f000 f8f7 	bl	800f01c <prvAddNewTaskToReadyList>
 800ee2e:	e001      	b.n	800ee34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ee30:	2300      	movs	r3, #0
 800ee32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ee34:	697b      	ldr	r3, [r7, #20]
	}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3728      	adds	r7, #40	; 0x28
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b08c      	sub	sp, #48	; 0x30
 800ee42:	af04      	add	r7, sp, #16
 800ee44:	60f8      	str	r0, [r7, #12]
 800ee46:	60b9      	str	r1, [r7, #8]
 800ee48:	603b      	str	r3, [r7, #0]
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ee4e:	88fb      	ldrh	r3, [r7, #6]
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	4618      	mov	r0, r3
 800ee54:	f001 ff88 	bl	8010d68 <pvPortMalloc>
 800ee58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00e      	beq.n	800ee7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ee60:	20c0      	movs	r0, #192	; 0xc0
 800ee62:	f001 ff81 	bl	8010d68 <pvPortMalloc>
 800ee66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d003      	beq.n	800ee76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	697a      	ldr	r2, [r7, #20]
 800ee72:	631a      	str	r2, [r3, #48]	; 0x30
 800ee74:	e005      	b.n	800ee82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ee76:	6978      	ldr	r0, [r7, #20]
 800ee78:	f002 f842 	bl	8010f00 <vPortFree>
 800ee7c:	e001      	b.n	800ee82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ee82:	69fb      	ldr	r3, [r7, #28]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d017      	beq.n	800eeb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ee90:	88fa      	ldrh	r2, [r7, #6]
 800ee92:	2300      	movs	r3, #0
 800ee94:	9303      	str	r3, [sp, #12]
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	9302      	str	r3, [sp, #8]
 800ee9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9c:	9301      	str	r3, [sp, #4]
 800ee9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	68b9      	ldr	r1, [r7, #8]
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f000 f80e 	bl	800eec8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eeac:	69f8      	ldr	r0, [r7, #28]
 800eeae:	f000 f8b5 	bl	800f01c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	61bb      	str	r3, [r7, #24]
 800eeb6:	e002      	b.n	800eebe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eeb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eebc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eebe:	69bb      	ldr	r3, [r7, #24]
	}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3720      	adds	r7, #32
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b088      	sub	sp, #32
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
 800eed4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	461a      	mov	r2, r3
 800eee0:	21a5      	movs	r1, #165	; 0xa5
 800eee2:	f002 ffaa 	bl	8011e3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eef0:	3b01      	subs	r3, #1
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	4413      	add	r3, r2
 800eef6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	f023 0307 	bic.w	r3, r3, #7
 800eefe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	f003 0307 	and.w	r3, r3, #7
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00a      	beq.n	800ef20 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ef0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0e:	f383 8811 	msr	BASEPRI, r3
 800ef12:	f3bf 8f6f 	isb	sy
 800ef16:	f3bf 8f4f 	dsb	sy
 800ef1a:	617b      	str	r3, [r7, #20]
}
 800ef1c:	bf00      	nop
 800ef1e:	e7fe      	b.n	800ef1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d01f      	beq.n	800ef66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef26:	2300      	movs	r3, #0
 800ef28:	61fb      	str	r3, [r7, #28]
 800ef2a:	e012      	b.n	800ef52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ef2c:	68ba      	ldr	r2, [r7, #8]
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	4413      	add	r3, r2
 800ef32:	7819      	ldrb	r1, [r3, #0]
 800ef34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef36:	69fb      	ldr	r3, [r7, #28]
 800ef38:	4413      	add	r3, r2
 800ef3a:	3334      	adds	r3, #52	; 0x34
 800ef3c:	460a      	mov	r2, r1
 800ef3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	4413      	add	r3, r2
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d006      	beq.n	800ef5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	3301      	adds	r3, #1
 800ef50:	61fb      	str	r3, [r7, #28]
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	2b0f      	cmp	r3, #15
 800ef56:	d9e9      	bls.n	800ef2c <prvInitialiseNewTask+0x64>
 800ef58:	e000      	b.n	800ef5c <prvInitialiseNewTask+0x94>
			{
				break;
 800ef5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ef5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ef64:	e003      	b.n	800ef6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ef66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef70:	2b37      	cmp	r3, #55	; 0x37
 800ef72:	d901      	bls.n	800ef78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ef74:	2337      	movs	r3, #55	; 0x37
 800ef76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ef78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ef84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef86:	2200      	movs	r2, #0
 800ef88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8c:	3304      	adds	r3, #4
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7ff f8be 	bl	800e110 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ef94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef96:	3318      	adds	r3, #24
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7ff f8b9 	bl	800e110 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ef9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800efaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800efae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800efb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb6:	2200      	movs	r2, #0
 800efb8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	2200      	movs	r2, #0
 800efbe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800efc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc4:	2200      	movs	r2, #0
 800efc6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800efca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efcc:	3358      	adds	r3, #88	; 0x58
 800efce:	2260      	movs	r2, #96	; 0x60
 800efd0:	2100      	movs	r1, #0
 800efd2:	4618      	mov	r0, r3
 800efd4:	f002 ff31 	bl	8011e3a <memset>
 800efd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efda:	4a0d      	ldr	r2, [pc, #52]	; (800f010 <prvInitialiseNewTask+0x148>)
 800efdc:	65da      	str	r2, [r3, #92]	; 0x5c
 800efde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe0:	4a0c      	ldr	r2, [pc, #48]	; (800f014 <prvInitialiseNewTask+0x14c>)
 800efe2:	661a      	str	r2, [r3, #96]	; 0x60
 800efe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe6:	4a0c      	ldr	r2, [pc, #48]	; (800f018 <prvInitialiseNewTask+0x150>)
 800efe8:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	68f9      	ldr	r1, [r7, #12]
 800efee:	69b8      	ldr	r0, [r7, #24]
 800eff0:	f001 fc6e 	bl	80108d0 <pxPortInitialiseStack>
 800eff4:	4602      	mov	r2, r0
 800eff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800effa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effc:	2b00      	cmp	r3, #0
 800effe:	d002      	beq.n	800f006 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f006:	bf00      	nop
 800f008:	3720      	adds	r7, #32
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	0801b0bc 	.word	0x0801b0bc
 800f014:	0801b0dc 	.word	0x0801b0dc
 800f018:	0801b09c 	.word	0x0801b09c

0800f01c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f024:	f001 fd7e 	bl	8010b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f028:	4b2d      	ldr	r3, [pc, #180]	; (800f0e0 <prvAddNewTaskToReadyList+0xc4>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	3301      	adds	r3, #1
 800f02e:	4a2c      	ldr	r2, [pc, #176]	; (800f0e0 <prvAddNewTaskToReadyList+0xc4>)
 800f030:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f032:	4b2c      	ldr	r3, [pc, #176]	; (800f0e4 <prvAddNewTaskToReadyList+0xc8>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d109      	bne.n	800f04e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f03a:	4a2a      	ldr	r2, [pc, #168]	; (800f0e4 <prvAddNewTaskToReadyList+0xc8>)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f040:	4b27      	ldr	r3, [pc, #156]	; (800f0e0 <prvAddNewTaskToReadyList+0xc4>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	2b01      	cmp	r3, #1
 800f046:	d110      	bne.n	800f06a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f048:	f000 fd3e 	bl	800fac8 <prvInitialiseTaskLists>
 800f04c:	e00d      	b.n	800f06a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f04e:	4b26      	ldr	r3, [pc, #152]	; (800f0e8 <prvAddNewTaskToReadyList+0xcc>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d109      	bne.n	800f06a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f056:	4b23      	ldr	r3, [pc, #140]	; (800f0e4 <prvAddNewTaskToReadyList+0xc8>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f060:	429a      	cmp	r2, r3
 800f062:	d802      	bhi.n	800f06a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f064:	4a1f      	ldr	r2, [pc, #124]	; (800f0e4 <prvAddNewTaskToReadyList+0xc8>)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f06a:	4b20      	ldr	r3, [pc, #128]	; (800f0ec <prvAddNewTaskToReadyList+0xd0>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	3301      	adds	r3, #1
 800f070:	4a1e      	ldr	r2, [pc, #120]	; (800f0ec <prvAddNewTaskToReadyList+0xd0>)
 800f072:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f074:	4b1d      	ldr	r3, [pc, #116]	; (800f0ec <prvAddNewTaskToReadyList+0xd0>)
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f080:	4b1b      	ldr	r3, [pc, #108]	; (800f0f0 <prvAddNewTaskToReadyList+0xd4>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	429a      	cmp	r2, r3
 800f086:	d903      	bls.n	800f090 <prvAddNewTaskToReadyList+0x74>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08c:	4a18      	ldr	r2, [pc, #96]	; (800f0f0 <prvAddNewTaskToReadyList+0xd4>)
 800f08e:	6013      	str	r3, [r2, #0]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f094:	4613      	mov	r3, r2
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	4413      	add	r3, r2
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	4a15      	ldr	r2, [pc, #84]	; (800f0f4 <prvAddNewTaskToReadyList+0xd8>)
 800f09e:	441a      	add	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	f7ff f83f 	bl	800e12a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f0ac:	f001 fd6a 	bl	8010b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f0b0:	4b0d      	ldr	r3, [pc, #52]	; (800f0e8 <prvAddNewTaskToReadyList+0xcc>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00e      	beq.n	800f0d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f0b8:	4b0a      	ldr	r3, [pc, #40]	; (800f0e4 <prvAddNewTaskToReadyList+0xc8>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d207      	bcs.n	800f0d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f0c6:	4b0c      	ldr	r3, [pc, #48]	; (800f0f8 <prvAddNewTaskToReadyList+0xdc>)
 800f0c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	f3bf 8f4f 	dsb	sy
 800f0d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f0d6:	bf00      	nop
 800f0d8:	3708      	adds	r7, #8
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	2000340c 	.word	0x2000340c
 800f0e4:	20002f38 	.word	0x20002f38
 800f0e8:	20003418 	.word	0x20003418
 800f0ec:	20003428 	.word	0x20003428
 800f0f0:	20003414 	.word	0x20003414
 800f0f4:	20002f3c 	.word	0x20002f3c
 800f0f8:	e000ed04 	.word	0xe000ed04

0800f0fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f104:	2300      	movs	r3, #0
 800f106:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d017      	beq.n	800f13e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f10e:	4b13      	ldr	r3, [pc, #76]	; (800f15c <vTaskDelay+0x60>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d00a      	beq.n	800f12c <vTaskDelay+0x30>
	__asm volatile
 800f116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11a:	f383 8811 	msr	BASEPRI, r3
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	60bb      	str	r3, [r7, #8]
}
 800f128:	bf00      	nop
 800f12a:	e7fe      	b.n	800f12a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f12c:	f000 f8f4 	bl	800f318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f130:	2100      	movs	r1, #0
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f001 f82a 	bl	801018c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f138:	f000 f8fc 	bl	800f334 <xTaskResumeAll>
 800f13c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d107      	bne.n	800f154 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f144:	4b06      	ldr	r3, [pc, #24]	; (800f160 <vTaskDelay+0x64>)
 800f146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f14a:	601a      	str	r2, [r3, #0]
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f154:	bf00      	nop
 800f156:	3710      	adds	r7, #16
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	20003434 	.word	0x20003434
 800f160:	e000ed04 	.word	0xe000ed04

0800f164 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800f164:	b580      	push	{r7, lr}
 800f166:	b088      	sub	sp, #32
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d10a      	bne.n	800f18c <eTaskGetState+0x28>
	__asm volatile
 800f176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17a:	f383 8811 	msr	BASEPRI, r3
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	60bb      	str	r3, [r7, #8]
}
 800f188:	bf00      	nop
 800f18a:	e7fe      	b.n	800f18a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800f18c:	4b23      	ldr	r3, [pc, #140]	; (800f21c <eTaskGetState+0xb8>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	69ba      	ldr	r2, [r7, #24]
 800f192:	429a      	cmp	r2, r3
 800f194:	d102      	bne.n	800f19c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800f196:	2300      	movs	r3, #0
 800f198:	77fb      	strb	r3, [r7, #31]
 800f19a:	e03a      	b.n	800f212 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800f19c:	f001 fcc2 	bl	8010b24 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	695b      	ldr	r3, [r3, #20]
 800f1a4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800f1a6:	4b1e      	ldr	r3, [pc, #120]	; (800f220 <eTaskGetState+0xbc>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800f1ac:	4b1d      	ldr	r3, [pc, #116]	; (800f224 <eTaskGetState+0xc0>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800f1b2:	f001 fce7 	bl	8010b84 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800f1b6:	697a      	ldr	r2, [r7, #20]
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d003      	beq.n	800f1c6 <eTaskGetState+0x62>
 800f1be:	697a      	ldr	r2, [r7, #20]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d102      	bne.n	800f1cc <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800f1c6:	2302      	movs	r3, #2
 800f1c8:	77fb      	strb	r3, [r7, #31]
 800f1ca:	e022      	b.n	800f212 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	4a16      	ldr	r2, [pc, #88]	; (800f228 <eTaskGetState+0xc4>)
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	d112      	bne.n	800f1fa <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d10b      	bne.n	800f1f4 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f1dc:	69bb      	ldr	r3, [r7, #24]
 800f1de:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d102      	bne.n	800f1ee <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800f1e8:	2302      	movs	r3, #2
 800f1ea:	77fb      	strb	r3, [r7, #31]
 800f1ec:	e011      	b.n	800f212 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800f1ee:	2303      	movs	r3, #3
 800f1f0:	77fb      	strb	r3, [r7, #31]
 800f1f2:	e00e      	b.n	800f212 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800f1f4:	2302      	movs	r3, #2
 800f1f6:	77fb      	strb	r3, [r7, #31]
 800f1f8:	e00b      	b.n	800f212 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	4a0b      	ldr	r2, [pc, #44]	; (800f22c <eTaskGetState+0xc8>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d002      	beq.n	800f208 <eTaskGetState+0xa4>
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d102      	bne.n	800f20e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800f208:	2304      	movs	r3, #4
 800f20a:	77fb      	strb	r3, [r7, #31]
 800f20c:	e001      	b.n	800f212 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800f20e:	2301      	movs	r3, #1
 800f210:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800f212:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800f214:	4618      	mov	r0, r3
 800f216:	3720      	adds	r7, #32
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	20002f38 	.word	0x20002f38
 800f220:	200033c4 	.word	0x200033c4
 800f224:	200033c8 	.word	0x200033c8
 800f228:	200033f8 	.word	0x200033f8
 800f22c:	200033e0 	.word	0x200033e0

0800f230 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b08a      	sub	sp, #40	; 0x28
 800f234:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f236:	2300      	movs	r3, #0
 800f238:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f23a:	2300      	movs	r3, #0
 800f23c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f23e:	463a      	mov	r2, r7
 800f240:	1d39      	adds	r1, r7, #4
 800f242:	f107 0308 	add.w	r3, r7, #8
 800f246:	4618      	mov	r0, r3
 800f248:	f7fe ff0e 	bl	800e068 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f24c:	6839      	ldr	r1, [r7, #0]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	68ba      	ldr	r2, [r7, #8]
 800f252:	9202      	str	r2, [sp, #8]
 800f254:	9301      	str	r3, [sp, #4]
 800f256:	2300      	movs	r3, #0
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	2300      	movs	r3, #0
 800f25c:	460a      	mov	r2, r1
 800f25e:	4925      	ldr	r1, [pc, #148]	; (800f2f4 <vTaskStartScheduler+0xc4>)
 800f260:	4825      	ldr	r0, [pc, #148]	; (800f2f8 <vTaskStartScheduler+0xc8>)
 800f262:	f7ff fd8f 	bl	800ed84 <xTaskCreateStatic>
 800f266:	4603      	mov	r3, r0
 800f268:	4a24      	ldr	r2, [pc, #144]	; (800f2fc <vTaskStartScheduler+0xcc>)
 800f26a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f26c:	4b23      	ldr	r3, [pc, #140]	; (800f2fc <vTaskStartScheduler+0xcc>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d002      	beq.n	800f27a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f274:	2301      	movs	r3, #1
 800f276:	617b      	str	r3, [r7, #20]
 800f278:	e001      	b.n	800f27e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f27a:	2300      	movs	r3, #0
 800f27c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	2b01      	cmp	r3, #1
 800f282:	d102      	bne.n	800f28a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f284:	f000 ffd6 	bl	8010234 <xTimerCreateTimerTask>
 800f288:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d11e      	bne.n	800f2ce <vTaskStartScheduler+0x9e>
	__asm volatile
 800f290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f294:	f383 8811 	msr	BASEPRI, r3
 800f298:	f3bf 8f6f 	isb	sy
 800f29c:	f3bf 8f4f 	dsb	sy
 800f2a0:	613b      	str	r3, [r7, #16]
}
 800f2a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f2a4:	4b16      	ldr	r3, [pc, #88]	; (800f300 <vTaskStartScheduler+0xd0>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	3358      	adds	r3, #88	; 0x58
 800f2aa:	4a16      	ldr	r2, [pc, #88]	; (800f304 <vTaskStartScheduler+0xd4>)
 800f2ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f2ae:	4b16      	ldr	r3, [pc, #88]	; (800f308 <vTaskStartScheduler+0xd8>)
 800f2b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f2b6:	4b15      	ldr	r3, [pc, #84]	; (800f30c <vTaskStartScheduler+0xdc>)
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f2bc:	4b14      	ldr	r3, [pc, #80]	; (800f310 <vTaskStartScheduler+0xe0>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f2c2:	4b14      	ldr	r3, [pc, #80]	; (800f314 <vTaskStartScheduler+0xe4>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f2c8:	f001 fb8a 	bl	80109e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f2cc:	e00e      	b.n	800f2ec <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2d4:	d10a      	bne.n	800f2ec <vTaskStartScheduler+0xbc>
	__asm volatile
 800f2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2da:	f383 8811 	msr	BASEPRI, r3
 800f2de:	f3bf 8f6f 	isb	sy
 800f2e2:	f3bf 8f4f 	dsb	sy
 800f2e6:	60fb      	str	r3, [r7, #12]
}
 800f2e8:	bf00      	nop
 800f2ea:	e7fe      	b.n	800f2ea <vTaskStartScheduler+0xba>
}
 800f2ec:	bf00      	nop
 800f2ee:	3718      	adds	r7, #24
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	08014da8 	.word	0x08014da8
 800f2f8:	0800fa99 	.word	0x0800fa99
 800f2fc:	20003430 	.word	0x20003430
 800f300:	20002f38 	.word	0x20002f38
 800f304:	200001b0 	.word	0x200001b0
 800f308:	2000342c 	.word	0x2000342c
 800f30c:	20003418 	.word	0x20003418
 800f310:	20003410 	.word	0x20003410
 800f314:	2000cd94 	.word	0x2000cd94

0800f318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f318:	b480      	push	{r7}
 800f31a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f31c:	4b04      	ldr	r3, [pc, #16]	; (800f330 <vTaskSuspendAll+0x18>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	3301      	adds	r3, #1
 800f322:	4a03      	ldr	r2, [pc, #12]	; (800f330 <vTaskSuspendAll+0x18>)
 800f324:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f326:	bf00      	nop
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr
 800f330:	20003434 	.word	0x20003434

0800f334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f33a:	2300      	movs	r3, #0
 800f33c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f33e:	2300      	movs	r3, #0
 800f340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f342:	4b42      	ldr	r3, [pc, #264]	; (800f44c <xTaskResumeAll+0x118>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d10a      	bne.n	800f360 <xTaskResumeAll+0x2c>
	__asm volatile
 800f34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34e:	f383 8811 	msr	BASEPRI, r3
 800f352:	f3bf 8f6f 	isb	sy
 800f356:	f3bf 8f4f 	dsb	sy
 800f35a:	603b      	str	r3, [r7, #0]
}
 800f35c:	bf00      	nop
 800f35e:	e7fe      	b.n	800f35e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f360:	f001 fbe0 	bl	8010b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f364:	4b39      	ldr	r3, [pc, #228]	; (800f44c <xTaskResumeAll+0x118>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	3b01      	subs	r3, #1
 800f36a:	4a38      	ldr	r2, [pc, #224]	; (800f44c <xTaskResumeAll+0x118>)
 800f36c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f36e:	4b37      	ldr	r3, [pc, #220]	; (800f44c <xTaskResumeAll+0x118>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d162      	bne.n	800f43c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f376:	4b36      	ldr	r3, [pc, #216]	; (800f450 <xTaskResumeAll+0x11c>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d05e      	beq.n	800f43c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f37e:	e02f      	b.n	800f3e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f380:	4b34      	ldr	r3, [pc, #208]	; (800f454 <xTaskResumeAll+0x120>)
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	3318      	adds	r3, #24
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fe ff29 	bl	800e1e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	3304      	adds	r3, #4
 800f396:	4618      	mov	r0, r3
 800f398:	f7fe ff24 	bl	800e1e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3a0:	4b2d      	ldr	r3, [pc, #180]	; (800f458 <xTaskResumeAll+0x124>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d903      	bls.n	800f3b0 <xTaskResumeAll+0x7c>
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ac:	4a2a      	ldr	r2, [pc, #168]	; (800f458 <xTaskResumeAll+0x124>)
 800f3ae:	6013      	str	r3, [r2, #0]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	009b      	lsls	r3, r3, #2
 800f3b8:	4413      	add	r3, r2
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	4a27      	ldr	r2, [pc, #156]	; (800f45c <xTaskResumeAll+0x128>)
 800f3be:	441a      	add	r2, r3
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	3304      	adds	r3, #4
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	4610      	mov	r0, r2
 800f3c8:	f7fe feaf 	bl	800e12a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3d0:	4b23      	ldr	r3, [pc, #140]	; (800f460 <xTaskResumeAll+0x12c>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d302      	bcc.n	800f3e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f3da:	4b22      	ldr	r3, [pc, #136]	; (800f464 <xTaskResumeAll+0x130>)
 800f3dc:	2201      	movs	r2, #1
 800f3de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f3e0:	4b1c      	ldr	r3, [pc, #112]	; (800f454 <xTaskResumeAll+0x120>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d1cb      	bne.n	800f380 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d001      	beq.n	800f3f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f3ee:	f000 fce1 	bl	800fdb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f3f2:	4b1d      	ldr	r3, [pc, #116]	; (800f468 <xTaskResumeAll+0x134>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d010      	beq.n	800f420 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f3fe:	f000 f8d7 	bl	800f5b0 <xTaskIncrementTick>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d002      	beq.n	800f40e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f408:	4b16      	ldr	r3, [pc, #88]	; (800f464 <xTaskResumeAll+0x130>)
 800f40a:	2201      	movs	r2, #1
 800f40c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	3b01      	subs	r3, #1
 800f412:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d1f1      	bne.n	800f3fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f41a:	4b13      	ldr	r3, [pc, #76]	; (800f468 <xTaskResumeAll+0x134>)
 800f41c:	2200      	movs	r2, #0
 800f41e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f420:	4b10      	ldr	r3, [pc, #64]	; (800f464 <xTaskResumeAll+0x130>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d009      	beq.n	800f43c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f428:	2301      	movs	r3, #1
 800f42a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f42c:	4b0f      	ldr	r3, [pc, #60]	; (800f46c <xTaskResumeAll+0x138>)
 800f42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f432:	601a      	str	r2, [r3, #0]
 800f434:	f3bf 8f4f 	dsb	sy
 800f438:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f43c:	f001 fba2 	bl	8010b84 <vPortExitCritical>

	return xAlreadyYielded;
 800f440:	68bb      	ldr	r3, [r7, #8]
}
 800f442:	4618      	mov	r0, r3
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	20003434 	.word	0x20003434
 800f450:	2000340c 	.word	0x2000340c
 800f454:	200033cc 	.word	0x200033cc
 800f458:	20003414 	.word	0x20003414
 800f45c:	20002f3c 	.word	0x20002f3c
 800f460:	20002f38 	.word	0x20002f38
 800f464:	20003420 	.word	0x20003420
 800f468:	2000341c 	.word	0x2000341c
 800f46c:	e000ed04 	.word	0xe000ed04

0800f470 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f476:	4b05      	ldr	r3, [pc, #20]	; (800f48c <xTaskGetTickCount+0x1c>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f47c:	687b      	ldr	r3, [r7, #4]
}
 800f47e:	4618      	mov	r0, r3
 800f480:	370c      	adds	r7, #12
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	20003410 	.word	0x20003410

0800f490 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800f490:	b580      	push	{r7, lr}
 800f492:	b086      	sub	sp, #24
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f49c:	2300      	movs	r3, #0
 800f49e:	617b      	str	r3, [r7, #20]
 800f4a0:	2338      	movs	r3, #56	; 0x38
 800f4a2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800f4a4:	f7ff ff38 	bl	800f318 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f4a8:	4b3a      	ldr	r3, [pc, #232]	; (800f594 <uxTaskGetSystemState+0x104>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d369      	bcc.n	800f586 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f4b8:	697a      	ldr	r2, [r7, #20]
 800f4ba:	4613      	mov	r3, r2
 800f4bc:	00db      	lsls	r3, r3, #3
 800f4be:	4413      	add	r3, r2
 800f4c0:	009b      	lsls	r3, r3, #2
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	1898      	adds	r0, r3, r2
 800f4c8:	693a      	ldr	r2, [r7, #16]
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	009b      	lsls	r3, r3, #2
 800f4ce:	4413      	add	r3, r2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	4a31      	ldr	r2, [pc, #196]	; (800f598 <uxTaskGetSystemState+0x108>)
 800f4d4:	4413      	add	r3, r2
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	4619      	mov	r1, r3
 800f4da:	f000 fbc9 	bl	800fc70 <prvListTasksWithinSingleList>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	4413      	add	r3, r2
 800f4e4:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d1e2      	bne.n	800f4b2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f4ec:	697a      	ldr	r2, [r7, #20]
 800f4ee:	4613      	mov	r3, r2
 800f4f0:	00db      	lsls	r3, r3, #3
 800f4f2:	4413      	add	r3, r2
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	4a27      	ldr	r2, [pc, #156]	; (800f59c <uxTaskGetSystemState+0x10c>)
 800f4fe:	6811      	ldr	r1, [r2, #0]
 800f500:	2202      	movs	r2, #2
 800f502:	4618      	mov	r0, r3
 800f504:	f000 fbb4 	bl	800fc70 <prvListTasksWithinSingleList>
 800f508:	4602      	mov	r2, r0
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	4413      	add	r3, r2
 800f50e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f510:	697a      	ldr	r2, [r7, #20]
 800f512:	4613      	mov	r3, r2
 800f514:	00db      	lsls	r3, r3, #3
 800f516:	4413      	add	r3, r2
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	461a      	mov	r2, r3
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	4413      	add	r3, r2
 800f520:	4a1f      	ldr	r2, [pc, #124]	; (800f5a0 <uxTaskGetSystemState+0x110>)
 800f522:	6811      	ldr	r1, [r2, #0]
 800f524:	2202      	movs	r2, #2
 800f526:	4618      	mov	r0, r3
 800f528:	f000 fba2 	bl	800fc70 <prvListTasksWithinSingleList>
 800f52c:	4602      	mov	r2, r0
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	4413      	add	r3, r2
 800f532:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f534:	697a      	ldr	r2, [r7, #20]
 800f536:	4613      	mov	r3, r2
 800f538:	00db      	lsls	r3, r3, #3
 800f53a:	4413      	add	r3, r2
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	461a      	mov	r2, r3
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	4413      	add	r3, r2
 800f544:	2204      	movs	r2, #4
 800f546:	4917      	ldr	r1, [pc, #92]	; (800f5a4 <uxTaskGetSystemState+0x114>)
 800f548:	4618      	mov	r0, r3
 800f54a:	f000 fb91 	bl	800fc70 <prvListTasksWithinSingleList>
 800f54e:	4602      	mov	r2, r0
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	4413      	add	r3, r2
 800f554:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f556:	697a      	ldr	r2, [r7, #20]
 800f558:	4613      	mov	r3, r2
 800f55a:	00db      	lsls	r3, r3, #3
 800f55c:	4413      	add	r3, r2
 800f55e:	009b      	lsls	r3, r3, #2
 800f560:	461a      	mov	r2, r3
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	4413      	add	r3, r2
 800f566:	2203      	movs	r2, #3
 800f568:	490f      	ldr	r1, [pc, #60]	; (800f5a8 <uxTaskGetSystemState+0x118>)
 800f56a:	4618      	mov	r0, r3
 800f56c:	f000 fb80 	bl	800fc70 <prvListTasksWithinSingleList>
 800f570:	4602      	mov	r2, r0
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	4413      	add	r3, r2
 800f576:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d003      	beq.n	800f586 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f57e:	4b0b      	ldr	r3, [pc, #44]	; (800f5ac <uxTaskGetSystemState+0x11c>)
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800f586:	f7ff fed5 	bl	800f334 <xTaskResumeAll>

		return uxTask;
 800f58a:	697b      	ldr	r3, [r7, #20]
	}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3718      	adds	r7, #24
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	2000340c 	.word	0x2000340c
 800f598:	20002f3c 	.word	0x20002f3c
 800f59c:	200033c4 	.word	0x200033c4
 800f5a0:	200033c8 	.word	0x200033c8
 800f5a4:	200033e0 	.word	0x200033e0
 800f5a8:	200033f8 	.word	0x200033f8
 800f5ac:	2000cd94 	.word	0x2000cd94

0800f5b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b086      	sub	sp, #24
 800f5b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5ba:	4b4f      	ldr	r3, [pc, #316]	; (800f6f8 <xTaskIncrementTick+0x148>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	f040 808f 	bne.w	800f6e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f5c4:	4b4d      	ldr	r3, [pc, #308]	; (800f6fc <xTaskIncrementTick+0x14c>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f5cc:	4a4b      	ldr	r2, [pc, #300]	; (800f6fc <xTaskIncrementTick+0x14c>)
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d120      	bne.n	800f61a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f5d8:	4b49      	ldr	r3, [pc, #292]	; (800f700 <xTaskIncrementTick+0x150>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d00a      	beq.n	800f5f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800f5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e6:	f383 8811 	msr	BASEPRI, r3
 800f5ea:	f3bf 8f6f 	isb	sy
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	603b      	str	r3, [r7, #0]
}
 800f5f4:	bf00      	nop
 800f5f6:	e7fe      	b.n	800f5f6 <xTaskIncrementTick+0x46>
 800f5f8:	4b41      	ldr	r3, [pc, #260]	; (800f700 <xTaskIncrementTick+0x150>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	60fb      	str	r3, [r7, #12]
 800f5fe:	4b41      	ldr	r3, [pc, #260]	; (800f704 <xTaskIncrementTick+0x154>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4a3f      	ldr	r2, [pc, #252]	; (800f700 <xTaskIncrementTick+0x150>)
 800f604:	6013      	str	r3, [r2, #0]
 800f606:	4a3f      	ldr	r2, [pc, #252]	; (800f704 <xTaskIncrementTick+0x154>)
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6013      	str	r3, [r2, #0]
 800f60c:	4b3e      	ldr	r3, [pc, #248]	; (800f708 <xTaskIncrementTick+0x158>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	3301      	adds	r3, #1
 800f612:	4a3d      	ldr	r2, [pc, #244]	; (800f708 <xTaskIncrementTick+0x158>)
 800f614:	6013      	str	r3, [r2, #0]
 800f616:	f000 fbcd 	bl	800fdb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f61a:	4b3c      	ldr	r3, [pc, #240]	; (800f70c <xTaskIncrementTick+0x15c>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	693a      	ldr	r2, [r7, #16]
 800f620:	429a      	cmp	r2, r3
 800f622:	d349      	bcc.n	800f6b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f624:	4b36      	ldr	r3, [pc, #216]	; (800f700 <xTaskIncrementTick+0x150>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d104      	bne.n	800f638 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f62e:	4b37      	ldr	r3, [pc, #220]	; (800f70c <xTaskIncrementTick+0x15c>)
 800f630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f634:	601a      	str	r2, [r3, #0]
					break;
 800f636:	e03f      	b.n	800f6b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f638:	4b31      	ldr	r3, [pc, #196]	; (800f700 <xTaskIncrementTick+0x150>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	68db      	ldr	r3, [r3, #12]
 800f640:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f648:	693a      	ldr	r2, [r7, #16]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d203      	bcs.n	800f658 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f650:	4a2e      	ldr	r2, [pc, #184]	; (800f70c <xTaskIncrementTick+0x15c>)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f656:	e02f      	b.n	800f6b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	3304      	adds	r3, #4
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7fe fdc1 	bl	800e1e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f666:	2b00      	cmp	r3, #0
 800f668:	d004      	beq.n	800f674 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	3318      	adds	r3, #24
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fe fdb8 	bl	800e1e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f678:	4b25      	ldr	r3, [pc, #148]	; (800f710 <xTaskIncrementTick+0x160>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d903      	bls.n	800f688 <xTaskIncrementTick+0xd8>
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f684:	4a22      	ldr	r2, [pc, #136]	; (800f710 <xTaskIncrementTick+0x160>)
 800f686:	6013      	str	r3, [r2, #0]
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f68c:	4613      	mov	r3, r2
 800f68e:	009b      	lsls	r3, r3, #2
 800f690:	4413      	add	r3, r2
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	4a1f      	ldr	r2, [pc, #124]	; (800f714 <xTaskIncrementTick+0x164>)
 800f696:	441a      	add	r2, r3
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	3304      	adds	r3, #4
 800f69c:	4619      	mov	r1, r3
 800f69e:	4610      	mov	r0, r2
 800f6a0:	f7fe fd43 	bl	800e12a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6a8:	4b1b      	ldr	r3, [pc, #108]	; (800f718 <xTaskIncrementTick+0x168>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d3b8      	bcc.n	800f624 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6b6:	e7b5      	b.n	800f624 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f6b8:	4b17      	ldr	r3, [pc, #92]	; (800f718 <xTaskIncrementTick+0x168>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6be:	4915      	ldr	r1, [pc, #84]	; (800f714 <xTaskIncrementTick+0x164>)
 800f6c0:	4613      	mov	r3, r2
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	4413      	add	r3, r2
 800f6c6:	009b      	lsls	r3, r3, #2
 800f6c8:	440b      	add	r3, r1
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d901      	bls.n	800f6d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f6d4:	4b11      	ldr	r3, [pc, #68]	; (800f71c <xTaskIncrementTick+0x16c>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d007      	beq.n	800f6ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f6dc:	2301      	movs	r3, #1
 800f6de:	617b      	str	r3, [r7, #20]
 800f6e0:	e004      	b.n	800f6ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f6e2:	4b0f      	ldr	r3, [pc, #60]	; (800f720 <xTaskIncrementTick+0x170>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	4a0d      	ldr	r2, [pc, #52]	; (800f720 <xTaskIncrementTick+0x170>)
 800f6ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f6ec:	697b      	ldr	r3, [r7, #20]
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3718      	adds	r7, #24
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	20003434 	.word	0x20003434
 800f6fc:	20003410 	.word	0x20003410
 800f700:	200033c4 	.word	0x200033c4
 800f704:	200033c8 	.word	0x200033c8
 800f708:	20003424 	.word	0x20003424
 800f70c:	2000342c 	.word	0x2000342c
 800f710:	20003414 	.word	0x20003414
 800f714:	20002f3c 	.word	0x20002f3c
 800f718:	20002f38 	.word	0x20002f38
 800f71c:	20003420 	.word	0x20003420
 800f720:	2000341c 	.word	0x2000341c

0800f724 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f724:	b480      	push	{r7}
 800f726:	b085      	sub	sp, #20
 800f728:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f72a:	4b36      	ldr	r3, [pc, #216]	; (800f804 <vTaskSwitchContext+0xe0>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d003      	beq.n	800f73a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f732:	4b35      	ldr	r3, [pc, #212]	; (800f808 <vTaskSwitchContext+0xe4>)
 800f734:	2201      	movs	r2, #1
 800f736:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f738:	e05e      	b.n	800f7f8 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800f73a:	4b33      	ldr	r3, [pc, #204]	; (800f808 <vTaskSwitchContext+0xe4>)
 800f73c:	2200      	movs	r2, #0
 800f73e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f740:	4b32      	ldr	r3, [pc, #200]	; (800f80c <vTaskSwitchContext+0xe8>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4a32      	ldr	r2, [pc, #200]	; (800f810 <vTaskSwitchContext+0xec>)
 800f746:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f748:	4b31      	ldr	r3, [pc, #196]	; (800f810 <vTaskSwitchContext+0xec>)
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	4b31      	ldr	r3, [pc, #196]	; (800f814 <vTaskSwitchContext+0xf0>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	429a      	cmp	r2, r3
 800f752:	d909      	bls.n	800f768 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f754:	4b30      	ldr	r3, [pc, #192]	; (800f818 <vTaskSwitchContext+0xf4>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f75a:	4a2d      	ldr	r2, [pc, #180]	; (800f810 <vTaskSwitchContext+0xec>)
 800f75c:	6810      	ldr	r0, [r2, #0]
 800f75e:	4a2d      	ldr	r2, [pc, #180]	; (800f814 <vTaskSwitchContext+0xf0>)
 800f760:	6812      	ldr	r2, [r2, #0]
 800f762:	1a82      	subs	r2, r0, r2
 800f764:	440a      	add	r2, r1
 800f766:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800f768:	4b29      	ldr	r3, [pc, #164]	; (800f810 <vTaskSwitchContext+0xec>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a29      	ldr	r2, [pc, #164]	; (800f814 <vTaskSwitchContext+0xf0>)
 800f76e:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f770:	4b2a      	ldr	r3, [pc, #168]	; (800f81c <vTaskSwitchContext+0xf8>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	60fb      	str	r3, [r7, #12]
 800f776:	e010      	b.n	800f79a <vTaskSwitchContext+0x76>
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d10a      	bne.n	800f794 <vTaskSwitchContext+0x70>
	__asm volatile
 800f77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f782:	f383 8811 	msr	BASEPRI, r3
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	607b      	str	r3, [r7, #4]
}
 800f790:	bf00      	nop
 800f792:	e7fe      	b.n	800f792 <vTaskSwitchContext+0x6e>
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	3b01      	subs	r3, #1
 800f798:	60fb      	str	r3, [r7, #12]
 800f79a:	4921      	ldr	r1, [pc, #132]	; (800f820 <vTaskSwitchContext+0xfc>)
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	4613      	mov	r3, r2
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	4413      	add	r3, r2
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	440b      	add	r3, r1
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d0e4      	beq.n	800f778 <vTaskSwitchContext+0x54>
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	009b      	lsls	r3, r3, #2
 800f7b4:	4413      	add	r3, r2
 800f7b6:	009b      	lsls	r3, r3, #2
 800f7b8:	4a19      	ldr	r2, [pc, #100]	; (800f820 <vTaskSwitchContext+0xfc>)
 800f7ba:	4413      	add	r3, r2
 800f7bc:	60bb      	str	r3, [r7, #8]
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	685a      	ldr	r2, [r3, #4]
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	605a      	str	r2, [r3, #4]
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	685a      	ldr	r2, [r3, #4]
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	3308      	adds	r3, #8
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d104      	bne.n	800f7de <vTaskSwitchContext+0xba>
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	685a      	ldr	r2, [r3, #4]
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	605a      	str	r2, [r3, #4]
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	4a0c      	ldr	r2, [pc, #48]	; (800f818 <vTaskSwitchContext+0xf4>)
 800f7e6:	6013      	str	r3, [r2, #0]
 800f7e8:	4a0c      	ldr	r2, [pc, #48]	; (800f81c <vTaskSwitchContext+0xf8>)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f7ee:	4b0a      	ldr	r3, [pc, #40]	; (800f818 <vTaskSwitchContext+0xf4>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	3358      	adds	r3, #88	; 0x58
 800f7f4:	4a0b      	ldr	r2, [pc, #44]	; (800f824 <vTaskSwitchContext+0x100>)
 800f7f6:	6013      	str	r3, [r2, #0]
}
 800f7f8:	bf00      	nop
 800f7fa:	3714      	adds	r7, #20
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr
 800f804:	20003434 	.word	0x20003434
 800f808:	20003420 	.word	0x20003420
 800f80c:	2000cd94 	.word	0x2000cd94
 800f810:	2000343c 	.word	0x2000343c
 800f814:	20003438 	.word	0x20003438
 800f818:	20002f38 	.word	0x20002f38
 800f81c:	20003414 	.word	0x20003414
 800f820:	20002f3c 	.word	0x20002f3c
 800f824:	200001b0 	.word	0x200001b0

0800f828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d10a      	bne.n	800f84e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83c:	f383 8811 	msr	BASEPRI, r3
 800f840:	f3bf 8f6f 	isb	sy
 800f844:	f3bf 8f4f 	dsb	sy
 800f848:	60fb      	str	r3, [r7, #12]
}
 800f84a:	bf00      	nop
 800f84c:	e7fe      	b.n	800f84c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f84e:	4b07      	ldr	r3, [pc, #28]	; (800f86c <vTaskPlaceOnEventList+0x44>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	3318      	adds	r3, #24
 800f854:	4619      	mov	r1, r3
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7fe fc8b 	bl	800e172 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f85c:	2101      	movs	r1, #1
 800f85e:	6838      	ldr	r0, [r7, #0]
 800f860:	f000 fc94 	bl	801018c <prvAddCurrentTaskToDelayedList>
}
 800f864:	bf00      	nop
 800f866:	3710      	adds	r7, #16
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	20002f38 	.word	0x20002f38

0800f870 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d10a      	bne.n	800f898 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f886:	f383 8811 	msr	BASEPRI, r3
 800f88a:	f3bf 8f6f 	isb	sy
 800f88e:	f3bf 8f4f 	dsb	sy
 800f892:	617b      	str	r3, [r7, #20]
}
 800f894:	bf00      	nop
 800f896:	e7fe      	b.n	800f896 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f898:	4b0a      	ldr	r3, [pc, #40]	; (800f8c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	3318      	adds	r3, #24
 800f89e:	4619      	mov	r1, r3
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	f7fe fc42 	bl	800e12a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d002      	beq.n	800f8b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f8ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f8b2:	6879      	ldr	r1, [r7, #4]
 800f8b4:	68b8      	ldr	r0, [r7, #8]
 800f8b6:	f000 fc69 	bl	801018c <prvAddCurrentTaskToDelayedList>
	}
 800f8ba:	bf00      	nop
 800f8bc:	3718      	adds	r7, #24
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	20002f38 	.word	0x20002f38

0800f8c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b086      	sub	sp, #24
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	68db      	ldr	r3, [r3, #12]
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d10a      	bne.n	800f8f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e2:	f383 8811 	msr	BASEPRI, r3
 800f8e6:	f3bf 8f6f 	isb	sy
 800f8ea:	f3bf 8f4f 	dsb	sy
 800f8ee:	60fb      	str	r3, [r7, #12]
}
 800f8f0:	bf00      	nop
 800f8f2:	e7fe      	b.n	800f8f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	3318      	adds	r3, #24
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fe fc73 	bl	800e1e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8fe:	4b1e      	ldr	r3, [pc, #120]	; (800f978 <xTaskRemoveFromEventList+0xb0>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d11d      	bne.n	800f942 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	3304      	adds	r3, #4
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fe fc6a 	bl	800e1e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f914:	4b19      	ldr	r3, [pc, #100]	; (800f97c <xTaskRemoveFromEventList+0xb4>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d903      	bls.n	800f924 <xTaskRemoveFromEventList+0x5c>
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f920:	4a16      	ldr	r2, [pc, #88]	; (800f97c <xTaskRemoveFromEventList+0xb4>)
 800f922:	6013      	str	r3, [r2, #0]
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f928:	4613      	mov	r3, r2
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	4413      	add	r3, r2
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	4a13      	ldr	r2, [pc, #76]	; (800f980 <xTaskRemoveFromEventList+0xb8>)
 800f932:	441a      	add	r2, r3
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	3304      	adds	r3, #4
 800f938:	4619      	mov	r1, r3
 800f93a:	4610      	mov	r0, r2
 800f93c:	f7fe fbf5 	bl	800e12a <vListInsertEnd>
 800f940:	e005      	b.n	800f94e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	3318      	adds	r3, #24
 800f946:	4619      	mov	r1, r3
 800f948:	480e      	ldr	r0, [pc, #56]	; (800f984 <xTaskRemoveFromEventList+0xbc>)
 800f94a:	f7fe fbee 	bl	800e12a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f952:	4b0d      	ldr	r3, [pc, #52]	; (800f988 <xTaskRemoveFromEventList+0xc0>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f958:	429a      	cmp	r2, r3
 800f95a:	d905      	bls.n	800f968 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f95c:	2301      	movs	r3, #1
 800f95e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f960:	4b0a      	ldr	r3, [pc, #40]	; (800f98c <xTaskRemoveFromEventList+0xc4>)
 800f962:	2201      	movs	r2, #1
 800f964:	601a      	str	r2, [r3, #0]
 800f966:	e001      	b.n	800f96c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f968:	2300      	movs	r3, #0
 800f96a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f96c:	697b      	ldr	r3, [r7, #20]
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3718      	adds	r7, #24
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	20003434 	.word	0x20003434
 800f97c:	20003414 	.word	0x20003414
 800f980:	20002f3c 	.word	0x20002f3c
 800f984:	200033cc 	.word	0x200033cc
 800f988:	20002f38 	.word	0x20002f38
 800f98c:	20003420 	.word	0x20003420

0800f990 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f998:	4b06      	ldr	r3, [pc, #24]	; (800f9b4 <vTaskInternalSetTimeOutState+0x24>)
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f9a0:	4b05      	ldr	r3, [pc, #20]	; (800f9b8 <vTaskInternalSetTimeOutState+0x28>)
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	605a      	str	r2, [r3, #4]
}
 800f9a8:	bf00      	nop
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr
 800f9b4:	20003424 	.word	0x20003424
 800f9b8:	20003410 	.word	0x20003410

0800f9bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b088      	sub	sp, #32
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d10a      	bne.n	800f9e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d0:	f383 8811 	msr	BASEPRI, r3
 800f9d4:	f3bf 8f6f 	isb	sy
 800f9d8:	f3bf 8f4f 	dsb	sy
 800f9dc:	613b      	str	r3, [r7, #16]
}
 800f9de:	bf00      	nop
 800f9e0:	e7fe      	b.n	800f9e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d10a      	bne.n	800f9fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ec:	f383 8811 	msr	BASEPRI, r3
 800f9f0:	f3bf 8f6f 	isb	sy
 800f9f4:	f3bf 8f4f 	dsb	sy
 800f9f8:	60fb      	str	r3, [r7, #12]
}
 800f9fa:	bf00      	nop
 800f9fc:	e7fe      	b.n	800f9fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f9fe:	f001 f891 	bl	8010b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fa02:	4b1d      	ldr	r3, [pc, #116]	; (800fa78 <xTaskCheckForTimeOut+0xbc>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	69ba      	ldr	r2, [r7, #24]
 800fa0e:	1ad3      	subs	r3, r2, r3
 800fa10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa1a:	d102      	bne.n	800fa22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	61fb      	str	r3, [r7, #28]
 800fa20:	e023      	b.n	800fa6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	4b15      	ldr	r3, [pc, #84]	; (800fa7c <xTaskCheckForTimeOut+0xc0>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d007      	beq.n	800fa3e <xTaskCheckForTimeOut+0x82>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	69ba      	ldr	r2, [r7, #24]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d302      	bcc.n	800fa3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa38:	2301      	movs	r3, #1
 800fa3a:	61fb      	str	r3, [r7, #28]
 800fa3c:	e015      	b.n	800fa6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	697a      	ldr	r2, [r7, #20]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d20b      	bcs.n	800fa60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	1ad2      	subs	r2, r2, r3
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f7ff ff9b 	bl	800f990 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	61fb      	str	r3, [r7, #28]
 800fa5e:	e004      	b.n	800fa6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	2200      	movs	r2, #0
 800fa64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa66:	2301      	movs	r3, #1
 800fa68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa6a:	f001 f88b 	bl	8010b84 <vPortExitCritical>

	return xReturn;
 800fa6e:	69fb      	ldr	r3, [r7, #28]
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3720      	adds	r7, #32
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	20003410 	.word	0x20003410
 800fa7c:	20003424 	.word	0x20003424

0800fa80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa80:	b480      	push	{r7}
 800fa82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa84:	4b03      	ldr	r3, [pc, #12]	; (800fa94 <vTaskMissedYield+0x14>)
 800fa86:	2201      	movs	r2, #1
 800fa88:	601a      	str	r2, [r3, #0]
}
 800fa8a:	bf00      	nop
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr
 800fa94:	20003420 	.word	0x20003420

0800fa98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800faa0:	f000 f852 	bl	800fb48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800faa4:	4b06      	ldr	r3, [pc, #24]	; (800fac0 <prvIdleTask+0x28>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	d9f9      	bls.n	800faa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800faac:	4b05      	ldr	r3, [pc, #20]	; (800fac4 <prvIdleTask+0x2c>)
 800faae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fab2:	601a      	str	r2, [r3, #0]
 800fab4:	f3bf 8f4f 	dsb	sy
 800fab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fabc:	e7f0      	b.n	800faa0 <prvIdleTask+0x8>
 800fabe:	bf00      	nop
 800fac0:	20002f3c 	.word	0x20002f3c
 800fac4:	e000ed04 	.word	0xe000ed04

0800fac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800face:	2300      	movs	r3, #0
 800fad0:	607b      	str	r3, [r7, #4]
 800fad2:	e00c      	b.n	800faee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	4613      	mov	r3, r2
 800fad8:	009b      	lsls	r3, r3, #2
 800fada:	4413      	add	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	4a12      	ldr	r2, [pc, #72]	; (800fb28 <prvInitialiseTaskLists+0x60>)
 800fae0:	4413      	add	r3, r2
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fe faf4 	bl	800e0d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	3301      	adds	r3, #1
 800faec:	607b      	str	r3, [r7, #4]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2b37      	cmp	r3, #55	; 0x37
 800faf2:	d9ef      	bls.n	800fad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800faf4:	480d      	ldr	r0, [pc, #52]	; (800fb2c <prvInitialiseTaskLists+0x64>)
 800faf6:	f7fe faeb 	bl	800e0d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fafa:	480d      	ldr	r0, [pc, #52]	; (800fb30 <prvInitialiseTaskLists+0x68>)
 800fafc:	f7fe fae8 	bl	800e0d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fb00:	480c      	ldr	r0, [pc, #48]	; (800fb34 <prvInitialiseTaskLists+0x6c>)
 800fb02:	f7fe fae5 	bl	800e0d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fb06:	480c      	ldr	r0, [pc, #48]	; (800fb38 <prvInitialiseTaskLists+0x70>)
 800fb08:	f7fe fae2 	bl	800e0d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fb0c:	480b      	ldr	r0, [pc, #44]	; (800fb3c <prvInitialiseTaskLists+0x74>)
 800fb0e:	f7fe fadf 	bl	800e0d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fb12:	4b0b      	ldr	r3, [pc, #44]	; (800fb40 <prvInitialiseTaskLists+0x78>)
 800fb14:	4a05      	ldr	r2, [pc, #20]	; (800fb2c <prvInitialiseTaskLists+0x64>)
 800fb16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fb18:	4b0a      	ldr	r3, [pc, #40]	; (800fb44 <prvInitialiseTaskLists+0x7c>)
 800fb1a:	4a05      	ldr	r2, [pc, #20]	; (800fb30 <prvInitialiseTaskLists+0x68>)
 800fb1c:	601a      	str	r2, [r3, #0]
}
 800fb1e:	bf00      	nop
 800fb20:	3708      	adds	r7, #8
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	20002f3c 	.word	0x20002f3c
 800fb2c:	2000339c 	.word	0x2000339c
 800fb30:	200033b0 	.word	0x200033b0
 800fb34:	200033cc 	.word	0x200033cc
 800fb38:	200033e0 	.word	0x200033e0
 800fb3c:	200033f8 	.word	0x200033f8
 800fb40:	200033c4 	.word	0x200033c4
 800fb44:	200033c8 	.word	0x200033c8

0800fb48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb4e:	e019      	b.n	800fb84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb50:	f000 ffe8 	bl	8010b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb54:	4b10      	ldr	r3, [pc, #64]	; (800fb98 <prvCheckTasksWaitingTermination+0x50>)
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	3304      	adds	r3, #4
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7fe fb3f 	bl	800e1e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb66:	4b0d      	ldr	r3, [pc, #52]	; (800fb9c <prvCheckTasksWaitingTermination+0x54>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	3b01      	subs	r3, #1
 800fb6c:	4a0b      	ldr	r2, [pc, #44]	; (800fb9c <prvCheckTasksWaitingTermination+0x54>)
 800fb6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb70:	4b0b      	ldr	r3, [pc, #44]	; (800fba0 <prvCheckTasksWaitingTermination+0x58>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	3b01      	subs	r3, #1
 800fb76:	4a0a      	ldr	r2, [pc, #40]	; (800fba0 <prvCheckTasksWaitingTermination+0x58>)
 800fb78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb7a:	f001 f803 	bl	8010b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f000 f8e4 	bl	800fd4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb84:	4b06      	ldr	r3, [pc, #24]	; (800fba0 <prvCheckTasksWaitingTermination+0x58>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1e1      	bne.n	800fb50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fb8c:	bf00      	nop
 800fb8e:	bf00      	nop
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	200033e0 	.word	0x200033e0
 800fb9c:	2000340c 	.word	0x2000340c
 800fba0:	200033f4 	.word	0x200033f4

0800fba4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b086      	sub	sp, #24
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	607a      	str	r2, [r7, #4]
 800fbb0:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d102      	bne.n	800fbbe <vTaskGetInfo+0x1a>
 800fbb8:	4b2c      	ldr	r3, [pc, #176]	; (800fc6c <vTaskGetInfo+0xc8>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	e000      	b.n	800fbc0 <vTaskGetInfo+0x1c>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	697a      	ldr	r2, [r7, #20]
 800fbc6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800fbfa:	78fb      	ldrb	r3, [r7, #3]
 800fbfc:	2b05      	cmp	r3, #5
 800fbfe:	d01a      	beq.n	800fc36 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800fc00:	4b1a      	ldr	r3, [pc, #104]	; (800fc6c <vTaskGetInfo+0xc8>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	697a      	ldr	r2, [r7, #20]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d103      	bne.n	800fc12 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	731a      	strb	r2, [r3, #12]
 800fc10:	e018      	b.n	800fc44 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	78fa      	ldrb	r2, [r7, #3]
 800fc16:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800fc18:	78fb      	ldrb	r3, [r7, #3]
 800fc1a:	2b03      	cmp	r3, #3
 800fc1c:	d112      	bne.n	800fc44 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800fc1e:	f7ff fb7b 	bl	800f318 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d002      	beq.n	800fc30 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	2202      	movs	r2, #2
 800fc2e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800fc30:	f7ff fb80 	bl	800f334 <xTaskResumeAll>
 800fc34:	e006      	b.n	800fc44 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800fc36:	6978      	ldr	r0, [r7, #20]
 800fc38:	f7ff fa94 	bl	800f164 <eTaskGetState>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	461a      	mov	r2, r3
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d009      	beq.n	800fc5e <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f000 f860 	bl	800fd14 <prvTaskCheckFreeStackSpace>
 800fc54:	4603      	mov	r3, r0
 800fc56:	461a      	mov	r2, r3
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800fc5c:	e002      	b.n	800fc64 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	2200      	movs	r2, #0
 800fc62:	841a      	strh	r2, [r3, #32]
	}
 800fc64:	bf00      	nop
 800fc66:	3718      	adds	r7, #24
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	20002f38 	.word	0x20002f38

0800fc70 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b08a      	sub	sp, #40	; 0x28
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d03f      	beq.n	800fd0a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	623b      	str	r3, [r7, #32]
 800fc8e:	6a3b      	ldr	r3, [r7, #32]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	685a      	ldr	r2, [r3, #4]
 800fc94:	6a3b      	ldr	r3, [r7, #32]
 800fc96:	605a      	str	r2, [r3, #4]
 800fc98:	6a3b      	ldr	r3, [r7, #32]
 800fc9a:	685a      	ldr	r2, [r3, #4]
 800fc9c:	6a3b      	ldr	r3, [r7, #32]
 800fc9e:	3308      	adds	r3, #8
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d104      	bne.n	800fcae <prvListTasksWithinSingleList+0x3e>
 800fca4:	6a3b      	ldr	r3, [r7, #32]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	685a      	ldr	r2, [r3, #4]
 800fcaa:	6a3b      	ldr	r3, [r7, #32]
 800fcac:	605a      	str	r2, [r3, #4]
 800fcae:	6a3b      	ldr	r3, [r7, #32]
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	68db      	ldr	r3, [r3, #12]
 800fcb4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	61bb      	str	r3, [r7, #24]
 800fcba:	69bb      	ldr	r3, [r7, #24]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	685a      	ldr	r2, [r3, #4]
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	605a      	str	r2, [r3, #4]
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	685a      	ldr	r2, [r3, #4]
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	3308      	adds	r3, #8
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d104      	bne.n	800fcda <prvListTasksWithinSingleList+0x6a>
 800fcd0:	69bb      	ldr	r3, [r7, #24]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	685a      	ldr	r2, [r3, #4]
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	605a      	str	r2, [r3, #4]
 800fcda:	69bb      	ldr	r3, [r7, #24]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800fce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fce4:	4613      	mov	r3, r2
 800fce6:	00db      	lsls	r3, r3, #3
 800fce8:	4413      	add	r3, r2
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	461a      	mov	r2, r3
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	1899      	adds	r1, r3, r2
 800fcf2:	79fb      	ldrb	r3, [r7, #7]
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	6978      	ldr	r0, [r7, #20]
 800fcf8:	f7ff ff54 	bl	800fba4 <vTaskGetInfo>
				uxTask++;
 800fcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfe:	3301      	adds	r3, #1
 800fd00:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800fd02:	697a      	ldr	r2, [r7, #20]
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d1d5      	bne.n	800fcb6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800fd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3728      	adds	r7, #40	; 0x28
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800fd14:	b480      	push	{r7}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fd20:	e005      	b.n	800fd2e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	3301      	adds	r3, #1
 800fd26:	607b      	str	r3, [r7, #4]
			ulCount++;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	2ba5      	cmp	r3, #165	; 0xa5
 800fd34:	d0f5      	beq.n	800fd22 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	089b      	lsrs	r3, r3, #2
 800fd3a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	b29b      	uxth	r3, r3
	}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3714      	adds	r7, #20
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	3358      	adds	r3, #88	; 0x58
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f002 fd49 	bl	80127f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d108      	bne.n	800fd7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f001 f8c7 	bl	8010f00 <vPortFree>
				vPortFree( pxTCB );
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f001 f8c4 	bl	8010f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fd78:	e018      	b.n	800fdac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d103      	bne.n	800fd8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f001 f8bb 	bl	8010f00 <vPortFree>
	}
 800fd8a:	e00f      	b.n	800fdac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fd92:	2b02      	cmp	r3, #2
 800fd94:	d00a      	beq.n	800fdac <prvDeleteTCB+0x60>
	__asm volatile
 800fd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd9a:	f383 8811 	msr	BASEPRI, r3
 800fd9e:	f3bf 8f6f 	isb	sy
 800fda2:	f3bf 8f4f 	dsb	sy
 800fda6:	60fb      	str	r3, [r7, #12]
}
 800fda8:	bf00      	nop
 800fdaa:	e7fe      	b.n	800fdaa <prvDeleteTCB+0x5e>
	}
 800fdac:	bf00      	nop
 800fdae:	3710      	adds	r7, #16
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b083      	sub	sp, #12
 800fdb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdba:	4b0c      	ldr	r3, [pc, #48]	; (800fdec <prvResetNextTaskUnblockTime+0x38>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d104      	bne.n	800fdce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fdc4:	4b0a      	ldr	r3, [pc, #40]	; (800fdf0 <prvResetNextTaskUnblockTime+0x3c>)
 800fdc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fdcc:	e008      	b.n	800fde0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdce:	4b07      	ldr	r3, [pc, #28]	; (800fdec <prvResetNextTaskUnblockTime+0x38>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	68db      	ldr	r3, [r3, #12]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	4a04      	ldr	r2, [pc, #16]	; (800fdf0 <prvResetNextTaskUnblockTime+0x3c>)
 800fdde:	6013      	str	r3, [r2, #0]
}
 800fde0:	bf00      	nop
 800fde2:	370c      	adds	r7, #12
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr
 800fdec:	200033c4 	.word	0x200033c4
 800fdf0:	2000342c 	.word	0x2000342c

0800fdf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b083      	sub	sp, #12
 800fdf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fdfa:	4b0b      	ldr	r3, [pc, #44]	; (800fe28 <xTaskGetSchedulerState+0x34>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d102      	bne.n	800fe08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fe02:	2301      	movs	r3, #1
 800fe04:	607b      	str	r3, [r7, #4]
 800fe06:	e008      	b.n	800fe1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe08:	4b08      	ldr	r3, [pc, #32]	; (800fe2c <xTaskGetSchedulerState+0x38>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d102      	bne.n	800fe16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fe10:	2302      	movs	r3, #2
 800fe12:	607b      	str	r3, [r7, #4]
 800fe14:	e001      	b.n	800fe1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe16:	2300      	movs	r3, #0
 800fe18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe1a:	687b      	ldr	r3, [r7, #4]
	}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	370c      	adds	r7, #12
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr
 800fe28:	20003418 	.word	0x20003418
 800fe2c:	20003434 	.word	0x20003434

0800fe30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b086      	sub	sp, #24
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d056      	beq.n	800fef4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fe46:	4b2e      	ldr	r3, [pc, #184]	; (800ff00 <xTaskPriorityDisinherit+0xd0>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	693a      	ldr	r2, [r7, #16]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d00a      	beq.n	800fe66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fe50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe54:	f383 8811 	msr	BASEPRI, r3
 800fe58:	f3bf 8f6f 	isb	sy
 800fe5c:	f3bf 8f4f 	dsb	sy
 800fe60:	60fb      	str	r3, [r7, #12]
}
 800fe62:	bf00      	nop
 800fe64:	e7fe      	b.n	800fe64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d10a      	bne.n	800fe84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fe6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe72:	f383 8811 	msr	BASEPRI, r3
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	60bb      	str	r3, [r7, #8]
}
 800fe80:	bf00      	nop
 800fe82:	e7fe      	b.n	800fe82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe88:	1e5a      	subs	r2, r3, #1
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d02c      	beq.n	800fef4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d128      	bne.n	800fef4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	3304      	adds	r3, #4
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fe f99c 	bl	800e1e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec4:	4b0f      	ldr	r3, [pc, #60]	; (800ff04 <xTaskPriorityDisinherit+0xd4>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	429a      	cmp	r2, r3
 800feca:	d903      	bls.n	800fed4 <xTaskPriorityDisinherit+0xa4>
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed0:	4a0c      	ldr	r2, [pc, #48]	; (800ff04 <xTaskPriorityDisinherit+0xd4>)
 800fed2:	6013      	str	r3, [r2, #0]
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fed8:	4613      	mov	r3, r2
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	4413      	add	r3, r2
 800fede:	009b      	lsls	r3, r3, #2
 800fee0:	4a09      	ldr	r2, [pc, #36]	; (800ff08 <xTaskPriorityDisinherit+0xd8>)
 800fee2:	441a      	add	r2, r3
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	3304      	adds	r3, #4
 800fee8:	4619      	mov	r1, r3
 800feea:	4610      	mov	r0, r2
 800feec:	f7fe f91d 	bl	800e12a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fef0:	2301      	movs	r3, #1
 800fef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fef4:	697b      	ldr	r3, [r7, #20]
	}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3718      	adds	r7, #24
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	20002f38 	.word	0x20002f38
 800ff04:	20003414 	.word	0x20003414
 800ff08:	20002f3c 	.word	0x20002f3c

0800ff0c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ff16:	6839      	ldr	r1, [r7, #0]
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f002 fd47 	bl	80129ac <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f7f0 f956 	bl	80001d0 <strlen>
 800ff24:	60f8      	str	r0, [r7, #12]
 800ff26:	e007      	b.n	800ff38 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800ff28:	687a      	ldr	r2, [r7, #4]
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	2220      	movs	r2, #32
 800ff30:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	3301      	adds	r3, #1
 800ff36:	60fb      	str	r3, [r7, #12]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2b0e      	cmp	r3, #14
 800ff3c:	d9f4      	bls.n	800ff28 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	4413      	add	r3, r2
 800ff44:	2200      	movs	r2, #0
 800ff46:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	4413      	add	r3, r2
	}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3710      	adds	r7, #16
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
	...

0800ff58 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ff58:	b590      	push	{r4, r7, lr}
 800ff5a:	b089      	sub	sp, #36	; 0x24
 800ff5c:	af02      	add	r7, sp, #8
 800ff5e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ff66:	4b45      	ldr	r3, [pc, #276]	; (801007c <vTaskList+0x124>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800ff6c:	4b43      	ldr	r3, [pc, #268]	; (801007c <vTaskList+0x124>)
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	4613      	mov	r3, r2
 800ff72:	00db      	lsls	r3, r3, #3
 800ff74:	4413      	add	r3, r2
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f000 fef5 	bl	8010d68 <pvPortMalloc>
 800ff7e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d076      	beq.n	8010074 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ff86:	2200      	movs	r2, #0
 800ff88:	68f9      	ldr	r1, [r7, #12]
 800ff8a:	68b8      	ldr	r0, [r7, #8]
 800ff8c:	f7ff fa80 	bl	800f490 <uxTaskGetSystemState>
 800ff90:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ff92:	2300      	movs	r3, #0
 800ff94:	617b      	str	r3, [r7, #20]
 800ff96:	e066      	b.n	8010066 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ff98:	697a      	ldr	r2, [r7, #20]
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	00db      	lsls	r3, r3, #3
 800ff9e:	4413      	add	r3, r2
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	7b1b      	ldrb	r3, [r3, #12]
 800ffaa:	2b04      	cmp	r3, #4
 800ffac:	d81b      	bhi.n	800ffe6 <vTaskList+0x8e>
 800ffae:	a201      	add	r2, pc, #4	; (adr r2, 800ffb4 <vTaskList+0x5c>)
 800ffb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb4:	0800ffc9 	.word	0x0800ffc9
 800ffb8:	0800ffcf 	.word	0x0800ffcf
 800ffbc:	0800ffd5 	.word	0x0800ffd5
 800ffc0:	0800ffdb 	.word	0x0800ffdb
 800ffc4:	0800ffe1 	.word	0x0800ffe1
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800ffc8:	2358      	movs	r3, #88	; 0x58
 800ffca:	74fb      	strb	r3, [r7, #19]
										break;
 800ffcc:	e00e      	b.n	800ffec <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800ffce:	2352      	movs	r3, #82	; 0x52
 800ffd0:	74fb      	strb	r3, [r7, #19]
										break;
 800ffd2:	e00b      	b.n	800ffec <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ffd4:	2342      	movs	r3, #66	; 0x42
 800ffd6:	74fb      	strb	r3, [r7, #19]
										break;
 800ffd8:	e008      	b.n	800ffec <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ffda:	2353      	movs	r3, #83	; 0x53
 800ffdc:	74fb      	strb	r3, [r7, #19]
										break;
 800ffde:	e005      	b.n	800ffec <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ffe0:	2344      	movs	r3, #68	; 0x44
 800ffe2:	74fb      	strb	r3, [r7, #19]
										break;
 800ffe4:	e002      	b.n	800ffec <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	74fb      	strb	r3, [r7, #19]
										break;
 800ffea:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ffec:	697a      	ldr	r2, [r7, #20]
 800ffee:	4613      	mov	r3, r2
 800fff0:	00db      	lsls	r3, r3, #3
 800fff2:	4413      	add	r3, r2
 800fff4:	009b      	lsls	r3, r3, #2
 800fff6:	461a      	mov	r2, r3
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	4413      	add	r3, r2
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	4619      	mov	r1, r3
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7ff ff83 	bl	800ff0c <prvWriteNameToBuffer>
 8010006:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8010008:	7cf9      	ldrb	r1, [r7, #19]
 801000a:	697a      	ldr	r2, [r7, #20]
 801000c:	4613      	mov	r3, r2
 801000e:	00db      	lsls	r3, r3, #3
 8010010:	4413      	add	r3, r2
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	461a      	mov	r2, r3
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	4413      	add	r3, r2
 801001a:	6918      	ldr	r0, [r3, #16]
 801001c:	697a      	ldr	r2, [r7, #20]
 801001e:	4613      	mov	r3, r2
 8010020:	00db      	lsls	r3, r3, #3
 8010022:	4413      	add	r3, r2
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	461a      	mov	r2, r3
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	4413      	add	r3, r2
 801002c:	8c1b      	ldrh	r3, [r3, #32]
 801002e:	461c      	mov	r4, r3
 8010030:	697a      	ldr	r2, [r7, #20]
 8010032:	4613      	mov	r3, r2
 8010034:	00db      	lsls	r3, r3, #3
 8010036:	4413      	add	r3, r2
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	461a      	mov	r2, r3
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	4413      	add	r3, r2
 8010040:	689b      	ldr	r3, [r3, #8]
 8010042:	9301      	str	r3, [sp, #4]
 8010044:	9400      	str	r4, [sp, #0]
 8010046:	4603      	mov	r3, r0
 8010048:	460a      	mov	r2, r1
 801004a:	490d      	ldr	r1, [pc, #52]	; (8010080 <vTaskList+0x128>)
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f002 fc3b 	bl	80128c8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f7f0 f8bc 	bl	80001d0 <strlen>
 8010058:	4602      	mov	r2, r0
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4413      	add	r3, r2
 801005e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	3301      	adds	r3, #1
 8010064:	617b      	str	r3, [r7, #20]
 8010066:	697a      	ldr	r2, [r7, #20]
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	429a      	cmp	r2, r3
 801006c:	d394      	bcc.n	800ff98 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 801006e:	68b8      	ldr	r0, [r7, #8]
 8010070:	f000 ff46 	bl	8010f00 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010074:	bf00      	nop
 8010076:	371c      	adds	r7, #28
 8010078:	46bd      	mov	sp, r7
 801007a:	bd90      	pop	{r4, r7, pc}
 801007c:	2000340c 	.word	0x2000340c
 8010080:	08014db0 	.word	0x08014db0

08010084 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8010084:	b580      	push	{r7, lr}
 8010086:	b088      	sub	sp, #32
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2200      	movs	r2, #0
 8010090:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8010092:	4b3a      	ldr	r3, [pc, #232]	; (801017c <vTaskGetRunTimeStats+0xf8>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8010098:	4b38      	ldr	r3, [pc, #224]	; (801017c <vTaskGetRunTimeStats+0xf8>)
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	4613      	mov	r3, r2
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	4413      	add	r3, r2
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	4618      	mov	r0, r3
 80100a6:	f000 fe5f 	bl	8010d68 <pvPortMalloc>
 80100aa:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d05f      	beq.n	8010172 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80100b2:	f107 030c 	add.w	r3, r7, #12
 80100b6:	461a      	mov	r2, r3
 80100b8:	69b9      	ldr	r1, [r7, #24]
 80100ba:	6978      	ldr	r0, [r7, #20]
 80100bc:	f7ff f9e8 	bl	800f490 <uxTaskGetSystemState>
 80100c0:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	4a2e      	ldr	r2, [pc, #184]	; (8010180 <vTaskGetRunTimeStats+0xfc>)
 80100c6:	fba2 2303 	umull	r2, r3, r2, r3
 80100ca:	095b      	lsrs	r3, r3, #5
 80100cc:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d04b      	beq.n	801016c <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 80100d4:	2300      	movs	r3, #0
 80100d6:	61fb      	str	r3, [r7, #28]
 80100d8:	e044      	b.n	8010164 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80100da:	69fa      	ldr	r2, [r7, #28]
 80100dc:	4613      	mov	r3, r2
 80100de:	00db      	lsls	r3, r3, #3
 80100e0:	4413      	add	r3, r2
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	461a      	mov	r2, r3
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	4413      	add	r3, r2
 80100ea:	699a      	ldr	r2, [r3, #24]
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80100f2:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80100f4:	69fa      	ldr	r2, [r7, #28]
 80100f6:	4613      	mov	r3, r2
 80100f8:	00db      	lsls	r3, r3, #3
 80100fa:	4413      	add	r3, r2
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	461a      	mov	r2, r3
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	4413      	add	r3, r2
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	4619      	mov	r1, r3
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7ff feff 	bl	800ff0c <prvWriteNameToBuffer>
 801010e:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d00e      	beq.n	8010134 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8010116:	69fa      	ldr	r2, [r7, #28]
 8010118:	4613      	mov	r3, r2
 801011a:	00db      	lsls	r3, r3, #3
 801011c:	4413      	add	r3, r2
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	461a      	mov	r2, r3
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	4413      	add	r3, r2
 8010126:	699a      	ldr	r2, [r3, #24]
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	4916      	ldr	r1, [pc, #88]	; (8010184 <vTaskGetRunTimeStats+0x100>)
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f002 fbcb 	bl	80128c8 <siprintf>
 8010132:	e00d      	b.n	8010150 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8010134:	69fa      	ldr	r2, [r7, #28]
 8010136:	4613      	mov	r3, r2
 8010138:	00db      	lsls	r3, r3, #3
 801013a:	4413      	add	r3, r2
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	461a      	mov	r2, r3
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	4413      	add	r3, r2
 8010144:	699b      	ldr	r3, [r3, #24]
 8010146:	461a      	mov	r2, r3
 8010148:	490f      	ldr	r1, [pc, #60]	; (8010188 <vTaskGetRunTimeStats+0x104>)
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f002 fbbc 	bl	80128c8 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7f0 f83d 	bl	80001d0 <strlen>
 8010156:	4602      	mov	r2, r0
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	4413      	add	r3, r2
 801015c:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	3301      	adds	r3, #1
 8010162:	61fb      	str	r3, [r7, #28]
 8010164:	69fa      	ldr	r2, [r7, #28]
 8010166:	69bb      	ldr	r3, [r7, #24]
 8010168:	429a      	cmp	r2, r3
 801016a:	d3b6      	bcc.n	80100da <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 801016c:	6978      	ldr	r0, [r7, #20]
 801016e:	f000 fec7 	bl	8010f00 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010172:	bf00      	nop
 8010174:	3720      	adds	r7, #32
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	2000340c 	.word	0x2000340c
 8010180:	51eb851f 	.word	0x51eb851f
 8010184:	08014dc0 	.word	0x08014dc0
 8010188:	08014dcc 	.word	0x08014dcc

0801018c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010196:	4b21      	ldr	r3, [pc, #132]	; (801021c <prvAddCurrentTaskToDelayedList+0x90>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801019c:	4b20      	ldr	r3, [pc, #128]	; (8010220 <prvAddCurrentTaskToDelayedList+0x94>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	3304      	adds	r3, #4
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7fe f81e 	bl	800e1e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101ae:	d10a      	bne.n	80101c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d007      	beq.n	80101c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101b6:	4b1a      	ldr	r3, [pc, #104]	; (8010220 <prvAddCurrentTaskToDelayedList+0x94>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3304      	adds	r3, #4
 80101bc:	4619      	mov	r1, r3
 80101be:	4819      	ldr	r0, [pc, #100]	; (8010224 <prvAddCurrentTaskToDelayedList+0x98>)
 80101c0:	f7fd ffb3 	bl	800e12a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80101c4:	e026      	b.n	8010214 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80101c6:	68fa      	ldr	r2, [r7, #12]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4413      	add	r3, r2
 80101cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80101ce:	4b14      	ldr	r3, [pc, #80]	; (8010220 <prvAddCurrentTaskToDelayedList+0x94>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	68ba      	ldr	r2, [r7, #8]
 80101d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80101d6:	68ba      	ldr	r2, [r7, #8]
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d209      	bcs.n	80101f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101de:	4b12      	ldr	r3, [pc, #72]	; (8010228 <prvAddCurrentTaskToDelayedList+0x9c>)
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	4b0f      	ldr	r3, [pc, #60]	; (8010220 <prvAddCurrentTaskToDelayedList+0x94>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	3304      	adds	r3, #4
 80101e8:	4619      	mov	r1, r3
 80101ea:	4610      	mov	r0, r2
 80101ec:	f7fd ffc1 	bl	800e172 <vListInsert>
}
 80101f0:	e010      	b.n	8010214 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101f2:	4b0e      	ldr	r3, [pc, #56]	; (801022c <prvAddCurrentTaskToDelayedList+0xa0>)
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	4b0a      	ldr	r3, [pc, #40]	; (8010220 <prvAddCurrentTaskToDelayedList+0x94>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	3304      	adds	r3, #4
 80101fc:	4619      	mov	r1, r3
 80101fe:	4610      	mov	r0, r2
 8010200:	f7fd ffb7 	bl	800e172 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010204:	4b0a      	ldr	r3, [pc, #40]	; (8010230 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	68ba      	ldr	r2, [r7, #8]
 801020a:	429a      	cmp	r2, r3
 801020c:	d202      	bcs.n	8010214 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801020e:	4a08      	ldr	r2, [pc, #32]	; (8010230 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	6013      	str	r3, [r2, #0]
}
 8010214:	bf00      	nop
 8010216:	3710      	adds	r7, #16
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	20003410 	.word	0x20003410
 8010220:	20002f38 	.word	0x20002f38
 8010224:	200033f8 	.word	0x200033f8
 8010228:	200033c8 	.word	0x200033c8
 801022c:	200033c4 	.word	0x200033c4
 8010230:	2000342c 	.word	0x2000342c

08010234 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b08a      	sub	sp, #40	; 0x28
 8010238:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801023a:	2300      	movs	r3, #0
 801023c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801023e:	f000 fb07 	bl	8010850 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010242:	4b1c      	ldr	r3, [pc, #112]	; (80102b4 <xTimerCreateTimerTask+0x80>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d021      	beq.n	801028e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801024a:	2300      	movs	r3, #0
 801024c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801024e:	2300      	movs	r3, #0
 8010250:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010252:	1d3a      	adds	r2, r7, #4
 8010254:	f107 0108 	add.w	r1, r7, #8
 8010258:	f107 030c 	add.w	r3, r7, #12
 801025c:	4618      	mov	r0, r3
 801025e:	f7fd ff1d 	bl	800e09c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010262:	6879      	ldr	r1, [r7, #4]
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	68fa      	ldr	r2, [r7, #12]
 8010268:	9202      	str	r2, [sp, #8]
 801026a:	9301      	str	r3, [sp, #4]
 801026c:	2302      	movs	r3, #2
 801026e:	9300      	str	r3, [sp, #0]
 8010270:	2300      	movs	r3, #0
 8010272:	460a      	mov	r2, r1
 8010274:	4910      	ldr	r1, [pc, #64]	; (80102b8 <xTimerCreateTimerTask+0x84>)
 8010276:	4811      	ldr	r0, [pc, #68]	; (80102bc <xTimerCreateTimerTask+0x88>)
 8010278:	f7fe fd84 	bl	800ed84 <xTaskCreateStatic>
 801027c:	4603      	mov	r3, r0
 801027e:	4a10      	ldr	r2, [pc, #64]	; (80102c0 <xTimerCreateTimerTask+0x8c>)
 8010280:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010282:	4b0f      	ldr	r3, [pc, #60]	; (80102c0 <xTimerCreateTimerTask+0x8c>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d001      	beq.n	801028e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801028a:	2301      	movs	r3, #1
 801028c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d10a      	bne.n	80102aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010298:	f383 8811 	msr	BASEPRI, r3
 801029c:	f3bf 8f6f 	isb	sy
 80102a0:	f3bf 8f4f 	dsb	sy
 80102a4:	613b      	str	r3, [r7, #16]
}
 80102a6:	bf00      	nop
 80102a8:	e7fe      	b.n	80102a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80102aa:	697b      	ldr	r3, [r7, #20]
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3718      	adds	r7, #24
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	20003470 	.word	0x20003470
 80102b8:	08014dd8 	.word	0x08014dd8
 80102bc:	080103f9 	.word	0x080103f9
 80102c0:	20003474 	.word	0x20003474

080102c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b08a      	sub	sp, #40	; 0x28
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	607a      	str	r2, [r7, #4]
 80102d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80102d2:	2300      	movs	r3, #0
 80102d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d10a      	bne.n	80102f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80102dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e0:	f383 8811 	msr	BASEPRI, r3
 80102e4:	f3bf 8f6f 	isb	sy
 80102e8:	f3bf 8f4f 	dsb	sy
 80102ec:	623b      	str	r3, [r7, #32]
}
 80102ee:	bf00      	nop
 80102f0:	e7fe      	b.n	80102f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80102f2:	4b1a      	ldr	r3, [pc, #104]	; (801035c <xTimerGenericCommand+0x98>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d02a      	beq.n	8010350 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	2b05      	cmp	r3, #5
 801030a:	dc18      	bgt.n	801033e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801030c:	f7ff fd72 	bl	800fdf4 <xTaskGetSchedulerState>
 8010310:	4603      	mov	r3, r0
 8010312:	2b02      	cmp	r3, #2
 8010314:	d109      	bne.n	801032a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010316:	4b11      	ldr	r3, [pc, #68]	; (801035c <xTimerGenericCommand+0x98>)
 8010318:	6818      	ldr	r0, [r3, #0]
 801031a:	f107 0110 	add.w	r1, r7, #16
 801031e:	2300      	movs	r3, #0
 8010320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010322:	f7fe f8c7 	bl	800e4b4 <xQueueGenericSend>
 8010326:	6278      	str	r0, [r7, #36]	; 0x24
 8010328:	e012      	b.n	8010350 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801032a:	4b0c      	ldr	r3, [pc, #48]	; (801035c <xTimerGenericCommand+0x98>)
 801032c:	6818      	ldr	r0, [r3, #0]
 801032e:	f107 0110 	add.w	r1, r7, #16
 8010332:	2300      	movs	r3, #0
 8010334:	2200      	movs	r2, #0
 8010336:	f7fe f8bd 	bl	800e4b4 <xQueueGenericSend>
 801033a:	6278      	str	r0, [r7, #36]	; 0x24
 801033c:	e008      	b.n	8010350 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801033e:	4b07      	ldr	r3, [pc, #28]	; (801035c <xTimerGenericCommand+0x98>)
 8010340:	6818      	ldr	r0, [r3, #0]
 8010342:	f107 0110 	add.w	r1, r7, #16
 8010346:	2300      	movs	r3, #0
 8010348:	683a      	ldr	r2, [r7, #0]
 801034a:	f7fe f9b1 	bl	800e6b0 <xQueueGenericSendFromISR>
 801034e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010352:	4618      	mov	r0, r3
 8010354:	3728      	adds	r7, #40	; 0x28
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	20003470 	.word	0x20003470

08010360 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b088      	sub	sp, #32
 8010364:	af02      	add	r7, sp, #8
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801036a:	4b22      	ldr	r3, [pc, #136]	; (80103f4 <prvProcessExpiredTimer+0x94>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	3304      	adds	r3, #4
 8010378:	4618      	mov	r0, r3
 801037a:	f7fd ff33 	bl	800e1e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010384:	f003 0304 	and.w	r3, r3, #4
 8010388:	2b00      	cmp	r3, #0
 801038a:	d022      	beq.n	80103d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	699a      	ldr	r2, [r3, #24]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	18d1      	adds	r1, r2, r3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	683a      	ldr	r2, [r7, #0]
 8010398:	6978      	ldr	r0, [r7, #20]
 801039a:	f000 f8d1 	bl	8010540 <prvInsertTimerInActiveList>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d01f      	beq.n	80103e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103a4:	2300      	movs	r3, #0
 80103a6:	9300      	str	r3, [sp, #0]
 80103a8:	2300      	movs	r3, #0
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	2100      	movs	r1, #0
 80103ae:	6978      	ldr	r0, [r7, #20]
 80103b0:	f7ff ff88 	bl	80102c4 <xTimerGenericCommand>
 80103b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d113      	bne.n	80103e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80103bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c0:	f383 8811 	msr	BASEPRI, r3
 80103c4:	f3bf 8f6f 	isb	sy
 80103c8:	f3bf 8f4f 	dsb	sy
 80103cc:	60fb      	str	r3, [r7, #12]
}
 80103ce:	bf00      	nop
 80103d0:	e7fe      	b.n	80103d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103d8:	f023 0301 	bic.w	r3, r3, #1
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	6a1b      	ldr	r3, [r3, #32]
 80103e8:	6978      	ldr	r0, [r7, #20]
 80103ea:	4798      	blx	r3
}
 80103ec:	bf00      	nop
 80103ee:	3718      	adds	r7, #24
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	20003468 	.word	0x20003468

080103f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010400:	f107 0308 	add.w	r3, r7, #8
 8010404:	4618      	mov	r0, r3
 8010406:	f000 f857 	bl	80104b8 <prvGetNextExpireTime>
 801040a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	4619      	mov	r1, r3
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f000 f803 	bl	801041c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010416:	f000 f8d5 	bl	80105c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801041a:	e7f1      	b.n	8010400 <prvTimerTask+0x8>

0801041c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010426:	f7fe ff77 	bl	800f318 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801042a:	f107 0308 	add.w	r3, r7, #8
 801042e:	4618      	mov	r0, r3
 8010430:	f000 f866 	bl	8010500 <prvSampleTimeNow>
 8010434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d130      	bne.n	801049e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d10a      	bne.n	8010458 <prvProcessTimerOrBlockTask+0x3c>
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	429a      	cmp	r2, r3
 8010448:	d806      	bhi.n	8010458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801044a:	f7fe ff73 	bl	800f334 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801044e:	68f9      	ldr	r1, [r7, #12]
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7ff ff85 	bl	8010360 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010456:	e024      	b.n	80104a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d008      	beq.n	8010470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801045e:	4b13      	ldr	r3, [pc, #76]	; (80104ac <prvProcessTimerOrBlockTask+0x90>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d101      	bne.n	801046c <prvProcessTimerOrBlockTask+0x50>
 8010468:	2301      	movs	r3, #1
 801046a:	e000      	b.n	801046e <prvProcessTimerOrBlockTask+0x52>
 801046c:	2300      	movs	r3, #0
 801046e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010470:	4b0f      	ldr	r3, [pc, #60]	; (80104b0 <prvProcessTimerOrBlockTask+0x94>)
 8010472:	6818      	ldr	r0, [r3, #0]
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	1ad3      	subs	r3, r2, r3
 801047a:	683a      	ldr	r2, [r7, #0]
 801047c:	4619      	mov	r1, r3
 801047e:	f7fe fc4d 	bl	800ed1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010482:	f7fe ff57 	bl	800f334 <xTaskResumeAll>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d10a      	bne.n	80104a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801048c:	4b09      	ldr	r3, [pc, #36]	; (80104b4 <prvProcessTimerOrBlockTask+0x98>)
 801048e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010492:	601a      	str	r2, [r3, #0]
 8010494:	f3bf 8f4f 	dsb	sy
 8010498:	f3bf 8f6f 	isb	sy
}
 801049c:	e001      	b.n	80104a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801049e:	f7fe ff49 	bl	800f334 <xTaskResumeAll>
}
 80104a2:	bf00      	nop
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	2000346c 	.word	0x2000346c
 80104b0:	20003470 	.word	0x20003470
 80104b4:	e000ed04 	.word	0xe000ed04

080104b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80104b8:	b480      	push	{r7}
 80104ba:	b085      	sub	sp, #20
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80104c0:	4b0e      	ldr	r3, [pc, #56]	; (80104fc <prvGetNextExpireTime+0x44>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d101      	bne.n	80104ce <prvGetNextExpireTime+0x16>
 80104ca:	2201      	movs	r2, #1
 80104cc:	e000      	b.n	80104d0 <prvGetNextExpireTime+0x18>
 80104ce:	2200      	movs	r2, #0
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d105      	bne.n	80104e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80104dc:	4b07      	ldr	r3, [pc, #28]	; (80104fc <prvGetNextExpireTime+0x44>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	60fb      	str	r3, [r7, #12]
 80104e6:	e001      	b.n	80104ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80104e8:	2300      	movs	r3, #0
 80104ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80104ec:	68fb      	ldr	r3, [r7, #12]
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3714      	adds	r7, #20
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	20003468 	.word	0x20003468

08010500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010508:	f7fe ffb2 	bl	800f470 <xTaskGetTickCount>
 801050c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801050e:	4b0b      	ldr	r3, [pc, #44]	; (801053c <prvSampleTimeNow+0x3c>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	68fa      	ldr	r2, [r7, #12]
 8010514:	429a      	cmp	r2, r3
 8010516:	d205      	bcs.n	8010524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010518:	f000 f936 	bl	8010788 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2201      	movs	r2, #1
 8010520:	601a      	str	r2, [r3, #0]
 8010522:	e002      	b.n	801052a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801052a:	4a04      	ldr	r2, [pc, #16]	; (801053c <prvSampleTimeNow+0x3c>)
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010530:	68fb      	ldr	r3, [r7, #12]
}
 8010532:	4618      	mov	r0, r3
 8010534:	3710      	adds	r7, #16
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	20003478 	.word	0x20003478

08010540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b086      	sub	sp, #24
 8010544:	af00      	add	r7, sp, #0
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	60b9      	str	r1, [r7, #8]
 801054a:	607a      	str	r2, [r7, #4]
 801054c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801054e:	2300      	movs	r3, #0
 8010550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	68ba      	ldr	r2, [r7, #8]
 8010556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	68fa      	ldr	r2, [r7, #12]
 801055c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801055e:	68ba      	ldr	r2, [r7, #8]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	429a      	cmp	r2, r3
 8010564:	d812      	bhi.n	801058c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	1ad2      	subs	r2, r2, r3
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	699b      	ldr	r3, [r3, #24]
 8010570:	429a      	cmp	r2, r3
 8010572:	d302      	bcc.n	801057a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010574:	2301      	movs	r3, #1
 8010576:	617b      	str	r3, [r7, #20]
 8010578:	e01b      	b.n	80105b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801057a:	4b10      	ldr	r3, [pc, #64]	; (80105bc <prvInsertTimerInActiveList+0x7c>)
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	3304      	adds	r3, #4
 8010582:	4619      	mov	r1, r3
 8010584:	4610      	mov	r0, r2
 8010586:	f7fd fdf4 	bl	800e172 <vListInsert>
 801058a:	e012      	b.n	80105b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	429a      	cmp	r2, r3
 8010592:	d206      	bcs.n	80105a2 <prvInsertTimerInActiveList+0x62>
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	429a      	cmp	r2, r3
 801059a:	d302      	bcc.n	80105a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801059c:	2301      	movs	r3, #1
 801059e:	617b      	str	r3, [r7, #20]
 80105a0:	e007      	b.n	80105b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80105a2:	4b07      	ldr	r3, [pc, #28]	; (80105c0 <prvInsertTimerInActiveList+0x80>)
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	3304      	adds	r3, #4
 80105aa:	4619      	mov	r1, r3
 80105ac:	4610      	mov	r0, r2
 80105ae:	f7fd fde0 	bl	800e172 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80105b2:	697b      	ldr	r3, [r7, #20]
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3718      	adds	r7, #24
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	2000346c 	.word	0x2000346c
 80105c0:	20003468 	.word	0x20003468

080105c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b08e      	sub	sp, #56	; 0x38
 80105c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80105ca:	e0ca      	b.n	8010762 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	da18      	bge.n	8010604 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80105d2:	1d3b      	adds	r3, r7, #4
 80105d4:	3304      	adds	r3, #4
 80105d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80105d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d10a      	bne.n	80105f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80105de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e2:	f383 8811 	msr	BASEPRI, r3
 80105e6:	f3bf 8f6f 	isb	sy
 80105ea:	f3bf 8f4f 	dsb	sy
 80105ee:	61fb      	str	r3, [r7, #28]
}
 80105f0:	bf00      	nop
 80105f2:	e7fe      	b.n	80105f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80105f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105fa:	6850      	ldr	r0, [r2, #4]
 80105fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105fe:	6892      	ldr	r2, [r2, #8]
 8010600:	4611      	mov	r1, r2
 8010602:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2b00      	cmp	r3, #0
 8010608:	f2c0 80aa 	blt.w	8010760 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010612:	695b      	ldr	r3, [r3, #20]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d004      	beq.n	8010622 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061a:	3304      	adds	r3, #4
 801061c:	4618      	mov	r0, r3
 801061e:	f7fd fde1 	bl	800e1e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010622:	463b      	mov	r3, r7
 8010624:	4618      	mov	r0, r3
 8010626:	f7ff ff6b 	bl	8010500 <prvSampleTimeNow>
 801062a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2b09      	cmp	r3, #9
 8010630:	f200 8097 	bhi.w	8010762 <prvProcessReceivedCommands+0x19e>
 8010634:	a201      	add	r2, pc, #4	; (adr r2, 801063c <prvProcessReceivedCommands+0x78>)
 8010636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801063a:	bf00      	nop
 801063c:	08010665 	.word	0x08010665
 8010640:	08010665 	.word	0x08010665
 8010644:	08010665 	.word	0x08010665
 8010648:	080106d9 	.word	0x080106d9
 801064c:	080106ed 	.word	0x080106ed
 8010650:	08010737 	.word	0x08010737
 8010654:	08010665 	.word	0x08010665
 8010658:	08010665 	.word	0x08010665
 801065c:	080106d9 	.word	0x080106d9
 8010660:	080106ed 	.word	0x080106ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801066a:	f043 0301 	orr.w	r3, r3, #1
 801066e:	b2da      	uxtb	r2, r3
 8010670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010676:	68ba      	ldr	r2, [r7, #8]
 8010678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067a:	699b      	ldr	r3, [r3, #24]
 801067c:	18d1      	adds	r1, r2, r3
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010684:	f7ff ff5c 	bl	8010540 <prvInsertTimerInActiveList>
 8010688:	4603      	mov	r3, r0
 801068a:	2b00      	cmp	r3, #0
 801068c:	d069      	beq.n	8010762 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010690:	6a1b      	ldr	r3, [r3, #32]
 8010692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010694:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801069c:	f003 0304 	and.w	r3, r3, #4
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d05e      	beq.n	8010762 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80106a4:	68ba      	ldr	r2, [r7, #8]
 80106a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a8:	699b      	ldr	r3, [r3, #24]
 80106aa:	441a      	add	r2, r3
 80106ac:	2300      	movs	r3, #0
 80106ae:	9300      	str	r3, [sp, #0]
 80106b0:	2300      	movs	r3, #0
 80106b2:	2100      	movs	r1, #0
 80106b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106b6:	f7ff fe05 	bl	80102c4 <xTimerGenericCommand>
 80106ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80106bc:	6a3b      	ldr	r3, [r7, #32]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d14f      	bne.n	8010762 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80106c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c6:	f383 8811 	msr	BASEPRI, r3
 80106ca:	f3bf 8f6f 	isb	sy
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	61bb      	str	r3, [r7, #24]
}
 80106d4:	bf00      	nop
 80106d6:	e7fe      	b.n	80106d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80106d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106de:	f023 0301 	bic.w	r3, r3, #1
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80106ea:	e03a      	b.n	8010762 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80106ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106f2:	f043 0301 	orr.w	r3, r3, #1
 80106f6:	b2da      	uxtb	r2, r3
 80106f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80106fe:	68ba      	ldr	r2, [r7, #8]
 8010700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010702:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010706:	699b      	ldr	r3, [r3, #24]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d10a      	bne.n	8010722 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801070c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010710:	f383 8811 	msr	BASEPRI, r3
 8010714:	f3bf 8f6f 	isb	sy
 8010718:	f3bf 8f4f 	dsb	sy
 801071c:	617b      	str	r3, [r7, #20]
}
 801071e:	bf00      	nop
 8010720:	e7fe      	b.n	8010720 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010724:	699a      	ldr	r2, [r3, #24]
 8010726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010728:	18d1      	adds	r1, r2, r3
 801072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801072e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010730:	f7ff ff06 	bl	8010540 <prvInsertTimerInActiveList>
					break;
 8010734:	e015      	b.n	8010762 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801073c:	f003 0302 	and.w	r3, r3, #2
 8010740:	2b00      	cmp	r3, #0
 8010742:	d103      	bne.n	801074c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010746:	f000 fbdb 	bl	8010f00 <vPortFree>
 801074a:	e00a      	b.n	8010762 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010752:	f023 0301 	bic.w	r3, r3, #1
 8010756:	b2da      	uxtb	r2, r3
 8010758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801075e:	e000      	b.n	8010762 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010760:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010762:	4b08      	ldr	r3, [pc, #32]	; (8010784 <prvProcessReceivedCommands+0x1c0>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	1d39      	adds	r1, r7, #4
 8010768:	2200      	movs	r2, #0
 801076a:	4618      	mov	r0, r3
 801076c:	f7fe f83c 	bl	800e7e8 <xQueueReceive>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	f47f af2a 	bne.w	80105cc <prvProcessReceivedCommands+0x8>
	}
}
 8010778:	bf00      	nop
 801077a:	bf00      	nop
 801077c:	3730      	adds	r7, #48	; 0x30
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
 8010782:	bf00      	nop
 8010784:	20003470 	.word	0x20003470

08010788 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b088      	sub	sp, #32
 801078c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801078e:	e048      	b.n	8010822 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010790:	4b2d      	ldr	r3, [pc, #180]	; (8010848 <prvSwitchTimerLists+0xc0>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801079a:	4b2b      	ldr	r3, [pc, #172]	; (8010848 <prvSwitchTimerLists+0xc0>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	3304      	adds	r3, #4
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fd fd1b 	bl	800e1e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	6a1b      	ldr	r3, [r3, #32]
 80107b2:	68f8      	ldr	r0, [r7, #12]
 80107b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107bc:	f003 0304 	and.w	r3, r3, #4
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d02e      	beq.n	8010822 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	699b      	ldr	r3, [r3, #24]
 80107c8:	693a      	ldr	r2, [r7, #16]
 80107ca:	4413      	add	r3, r2
 80107cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80107ce:	68ba      	ldr	r2, [r7, #8]
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d90e      	bls.n	80107f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	68ba      	ldr	r2, [r7, #8]
 80107da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	68fa      	ldr	r2, [r7, #12]
 80107e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80107e2:	4b19      	ldr	r3, [pc, #100]	; (8010848 <prvSwitchTimerLists+0xc0>)
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	3304      	adds	r3, #4
 80107ea:	4619      	mov	r1, r3
 80107ec:	4610      	mov	r0, r2
 80107ee:	f7fd fcc0 	bl	800e172 <vListInsert>
 80107f2:	e016      	b.n	8010822 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80107f4:	2300      	movs	r3, #0
 80107f6:	9300      	str	r3, [sp, #0]
 80107f8:	2300      	movs	r3, #0
 80107fa:	693a      	ldr	r2, [r7, #16]
 80107fc:	2100      	movs	r1, #0
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f7ff fd60 	bl	80102c4 <xTimerGenericCommand>
 8010804:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d10a      	bne.n	8010822 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801080c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010810:	f383 8811 	msr	BASEPRI, r3
 8010814:	f3bf 8f6f 	isb	sy
 8010818:	f3bf 8f4f 	dsb	sy
 801081c:	603b      	str	r3, [r7, #0]
}
 801081e:	bf00      	nop
 8010820:	e7fe      	b.n	8010820 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010822:	4b09      	ldr	r3, [pc, #36]	; (8010848 <prvSwitchTimerLists+0xc0>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d1b1      	bne.n	8010790 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801082c:	4b06      	ldr	r3, [pc, #24]	; (8010848 <prvSwitchTimerLists+0xc0>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010832:	4b06      	ldr	r3, [pc, #24]	; (801084c <prvSwitchTimerLists+0xc4>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	4a04      	ldr	r2, [pc, #16]	; (8010848 <prvSwitchTimerLists+0xc0>)
 8010838:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801083a:	4a04      	ldr	r2, [pc, #16]	; (801084c <prvSwitchTimerLists+0xc4>)
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	6013      	str	r3, [r2, #0]
}
 8010840:	bf00      	nop
 8010842:	3718      	adds	r7, #24
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	20003468 	.word	0x20003468
 801084c:	2000346c 	.word	0x2000346c

08010850 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010856:	f000 f965 	bl	8010b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801085a:	4b15      	ldr	r3, [pc, #84]	; (80108b0 <prvCheckForValidListAndQueue+0x60>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d120      	bne.n	80108a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010862:	4814      	ldr	r0, [pc, #80]	; (80108b4 <prvCheckForValidListAndQueue+0x64>)
 8010864:	f7fd fc34 	bl	800e0d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010868:	4813      	ldr	r0, [pc, #76]	; (80108b8 <prvCheckForValidListAndQueue+0x68>)
 801086a:	f7fd fc31 	bl	800e0d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801086e:	4b13      	ldr	r3, [pc, #76]	; (80108bc <prvCheckForValidListAndQueue+0x6c>)
 8010870:	4a10      	ldr	r2, [pc, #64]	; (80108b4 <prvCheckForValidListAndQueue+0x64>)
 8010872:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010874:	4b12      	ldr	r3, [pc, #72]	; (80108c0 <prvCheckForValidListAndQueue+0x70>)
 8010876:	4a10      	ldr	r2, [pc, #64]	; (80108b8 <prvCheckForValidListAndQueue+0x68>)
 8010878:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801087a:	2300      	movs	r3, #0
 801087c:	9300      	str	r3, [sp, #0]
 801087e:	4b11      	ldr	r3, [pc, #68]	; (80108c4 <prvCheckForValidListAndQueue+0x74>)
 8010880:	4a11      	ldr	r2, [pc, #68]	; (80108c8 <prvCheckForValidListAndQueue+0x78>)
 8010882:	2110      	movs	r1, #16
 8010884:	200a      	movs	r0, #10
 8010886:	f7fd fd3f 	bl	800e308 <xQueueGenericCreateStatic>
 801088a:	4603      	mov	r3, r0
 801088c:	4a08      	ldr	r2, [pc, #32]	; (80108b0 <prvCheckForValidListAndQueue+0x60>)
 801088e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010890:	4b07      	ldr	r3, [pc, #28]	; (80108b0 <prvCheckForValidListAndQueue+0x60>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d005      	beq.n	80108a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010898:	4b05      	ldr	r3, [pc, #20]	; (80108b0 <prvCheckForValidListAndQueue+0x60>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	490b      	ldr	r1, [pc, #44]	; (80108cc <prvCheckForValidListAndQueue+0x7c>)
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fe fa12 	bl	800ecc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80108a4:	f000 f96e 	bl	8010b84 <vPortExitCritical>
}
 80108a8:	bf00      	nop
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	20003470 	.word	0x20003470
 80108b4:	20003440 	.word	0x20003440
 80108b8:	20003454 	.word	0x20003454
 80108bc:	20003468 	.word	0x20003468
 80108c0:	2000346c 	.word	0x2000346c
 80108c4:	2000351c 	.word	0x2000351c
 80108c8:	2000347c 	.word	0x2000347c
 80108cc:	08014de0 	.word	0x08014de0

080108d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80108d0:	b480      	push	{r7}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	60f8      	str	r0, [r7, #12]
 80108d8:	60b9      	str	r1, [r7, #8]
 80108da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	3b04      	subs	r3, #4
 80108e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80108e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	3b04      	subs	r3, #4
 80108ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	f023 0201 	bic.w	r2, r3, #1
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	3b04      	subs	r3, #4
 80108fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010900:	4a0c      	ldr	r2, [pc, #48]	; (8010934 <pxPortInitialiseStack+0x64>)
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	3b14      	subs	r3, #20
 801090a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	3b04      	subs	r3, #4
 8010916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	f06f 0202 	mvn.w	r2, #2
 801091e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	3b20      	subs	r3, #32
 8010924:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010926:	68fb      	ldr	r3, [r7, #12]
}
 8010928:	4618      	mov	r0, r3
 801092a:	3714      	adds	r7, #20
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr
 8010934:	08010939 	.word	0x08010939

08010938 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010938:	b480      	push	{r7}
 801093a:	b085      	sub	sp, #20
 801093c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801093e:	2300      	movs	r3, #0
 8010940:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010942:	4b12      	ldr	r3, [pc, #72]	; (801098c <prvTaskExitError+0x54>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801094a:	d00a      	beq.n	8010962 <prvTaskExitError+0x2a>
	__asm volatile
 801094c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010950:	f383 8811 	msr	BASEPRI, r3
 8010954:	f3bf 8f6f 	isb	sy
 8010958:	f3bf 8f4f 	dsb	sy
 801095c:	60fb      	str	r3, [r7, #12]
}
 801095e:	bf00      	nop
 8010960:	e7fe      	b.n	8010960 <prvTaskExitError+0x28>
	__asm volatile
 8010962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010966:	f383 8811 	msr	BASEPRI, r3
 801096a:	f3bf 8f6f 	isb	sy
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	60bb      	str	r3, [r7, #8]
}
 8010974:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010976:	bf00      	nop
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d0fc      	beq.n	8010978 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801097e:	bf00      	nop
 8010980:	bf00      	nop
 8010982:	3714      	adds	r7, #20
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr
 801098c:	20000148 	.word	0x20000148

08010990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010990:	4b07      	ldr	r3, [pc, #28]	; (80109b0 <pxCurrentTCBConst2>)
 8010992:	6819      	ldr	r1, [r3, #0]
 8010994:	6808      	ldr	r0, [r1, #0]
 8010996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801099a:	f380 8809 	msr	PSP, r0
 801099e:	f3bf 8f6f 	isb	sy
 80109a2:	f04f 0000 	mov.w	r0, #0
 80109a6:	f380 8811 	msr	BASEPRI, r0
 80109aa:	4770      	bx	lr
 80109ac:	f3af 8000 	nop.w

080109b0 <pxCurrentTCBConst2>:
 80109b0:	20002f38 	.word	0x20002f38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80109b4:	bf00      	nop
 80109b6:	bf00      	nop

080109b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80109b8:	4808      	ldr	r0, [pc, #32]	; (80109dc <prvPortStartFirstTask+0x24>)
 80109ba:	6800      	ldr	r0, [r0, #0]
 80109bc:	6800      	ldr	r0, [r0, #0]
 80109be:	f380 8808 	msr	MSP, r0
 80109c2:	f04f 0000 	mov.w	r0, #0
 80109c6:	f380 8814 	msr	CONTROL, r0
 80109ca:	b662      	cpsie	i
 80109cc:	b661      	cpsie	f
 80109ce:	f3bf 8f4f 	dsb	sy
 80109d2:	f3bf 8f6f 	isb	sy
 80109d6:	df00      	svc	0
 80109d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80109da:	bf00      	nop
 80109dc:	e000ed08 	.word	0xe000ed08

080109e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b086      	sub	sp, #24
 80109e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80109e6:	4b46      	ldr	r3, [pc, #280]	; (8010b00 <xPortStartScheduler+0x120>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4a46      	ldr	r2, [pc, #280]	; (8010b04 <xPortStartScheduler+0x124>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d10a      	bne.n	8010a06 <xPortStartScheduler+0x26>
	__asm volatile
 80109f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f4:	f383 8811 	msr	BASEPRI, r3
 80109f8:	f3bf 8f6f 	isb	sy
 80109fc:	f3bf 8f4f 	dsb	sy
 8010a00:	613b      	str	r3, [r7, #16]
}
 8010a02:	bf00      	nop
 8010a04:	e7fe      	b.n	8010a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010a06:	4b3e      	ldr	r3, [pc, #248]	; (8010b00 <xPortStartScheduler+0x120>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	4a3f      	ldr	r2, [pc, #252]	; (8010b08 <xPortStartScheduler+0x128>)
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d10a      	bne.n	8010a26 <xPortStartScheduler+0x46>
	__asm volatile
 8010a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a14:	f383 8811 	msr	BASEPRI, r3
 8010a18:	f3bf 8f6f 	isb	sy
 8010a1c:	f3bf 8f4f 	dsb	sy
 8010a20:	60fb      	str	r3, [r7, #12]
}
 8010a22:	bf00      	nop
 8010a24:	e7fe      	b.n	8010a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010a26:	4b39      	ldr	r3, [pc, #228]	; (8010b0c <xPortStartScheduler+0x12c>)
 8010a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	22ff      	movs	r2, #255	; 0xff
 8010a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010a40:	78fb      	ldrb	r3, [r7, #3]
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010a48:	b2da      	uxtb	r2, r3
 8010a4a:	4b31      	ldr	r3, [pc, #196]	; (8010b10 <xPortStartScheduler+0x130>)
 8010a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010a4e:	4b31      	ldr	r3, [pc, #196]	; (8010b14 <xPortStartScheduler+0x134>)
 8010a50:	2207      	movs	r2, #7
 8010a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a54:	e009      	b.n	8010a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010a56:	4b2f      	ldr	r3, [pc, #188]	; (8010b14 <xPortStartScheduler+0x134>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	4a2d      	ldr	r2, [pc, #180]	; (8010b14 <xPortStartScheduler+0x134>)
 8010a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010a60:	78fb      	ldrb	r3, [r7, #3]
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	005b      	lsls	r3, r3, #1
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a6a:	78fb      	ldrb	r3, [r7, #3]
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a72:	2b80      	cmp	r3, #128	; 0x80
 8010a74:	d0ef      	beq.n	8010a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010a76:	4b27      	ldr	r3, [pc, #156]	; (8010b14 <xPortStartScheduler+0x134>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f1c3 0307 	rsb	r3, r3, #7
 8010a7e:	2b04      	cmp	r3, #4
 8010a80:	d00a      	beq.n	8010a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8010a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a86:	f383 8811 	msr	BASEPRI, r3
 8010a8a:	f3bf 8f6f 	isb	sy
 8010a8e:	f3bf 8f4f 	dsb	sy
 8010a92:	60bb      	str	r3, [r7, #8]
}
 8010a94:	bf00      	nop
 8010a96:	e7fe      	b.n	8010a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010a98:	4b1e      	ldr	r3, [pc, #120]	; (8010b14 <xPortStartScheduler+0x134>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	021b      	lsls	r3, r3, #8
 8010a9e:	4a1d      	ldr	r2, [pc, #116]	; (8010b14 <xPortStartScheduler+0x134>)
 8010aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010aa2:	4b1c      	ldr	r3, [pc, #112]	; (8010b14 <xPortStartScheduler+0x134>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010aaa:	4a1a      	ldr	r2, [pc, #104]	; (8010b14 <xPortStartScheduler+0x134>)
 8010aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	b2da      	uxtb	r2, r3
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010ab6:	4b18      	ldr	r3, [pc, #96]	; (8010b18 <xPortStartScheduler+0x138>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	4a17      	ldr	r2, [pc, #92]	; (8010b18 <xPortStartScheduler+0x138>)
 8010abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ac2:	4b15      	ldr	r3, [pc, #84]	; (8010b18 <xPortStartScheduler+0x138>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	4a14      	ldr	r2, [pc, #80]	; (8010b18 <xPortStartScheduler+0x138>)
 8010ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010ace:	f000 f8dd 	bl	8010c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010ad2:	4b12      	ldr	r3, [pc, #72]	; (8010b1c <xPortStartScheduler+0x13c>)
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010ad8:	f000 f8fc 	bl	8010cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010adc:	4b10      	ldr	r3, [pc, #64]	; (8010b20 <xPortStartScheduler+0x140>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a0f      	ldr	r2, [pc, #60]	; (8010b20 <xPortStartScheduler+0x140>)
 8010ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010ae8:	f7ff ff66 	bl	80109b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010aec:	f7fe fe1a 	bl	800f724 <vTaskSwitchContext>
	prvTaskExitError();
 8010af0:	f7ff ff22 	bl	8010938 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3718      	adds	r7, #24
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	e000ed00 	.word	0xe000ed00
 8010b04:	410fc271 	.word	0x410fc271
 8010b08:	410fc270 	.word	0x410fc270
 8010b0c:	e000e400 	.word	0xe000e400
 8010b10:	2000356c 	.word	0x2000356c
 8010b14:	20003570 	.word	0x20003570
 8010b18:	e000ed20 	.word	0xe000ed20
 8010b1c:	20000148 	.word	0x20000148
 8010b20:	e000ef34 	.word	0xe000ef34

08010b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010b24:	b480      	push	{r7}
 8010b26:	b083      	sub	sp, #12
 8010b28:	af00      	add	r7, sp, #0
	__asm volatile
 8010b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b2e:	f383 8811 	msr	BASEPRI, r3
 8010b32:	f3bf 8f6f 	isb	sy
 8010b36:	f3bf 8f4f 	dsb	sy
 8010b3a:	607b      	str	r3, [r7, #4]
}
 8010b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010b3e:	4b0f      	ldr	r3, [pc, #60]	; (8010b7c <vPortEnterCritical+0x58>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	3301      	adds	r3, #1
 8010b44:	4a0d      	ldr	r2, [pc, #52]	; (8010b7c <vPortEnterCritical+0x58>)
 8010b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010b48:	4b0c      	ldr	r3, [pc, #48]	; (8010b7c <vPortEnterCritical+0x58>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	2b01      	cmp	r3, #1
 8010b4e:	d10f      	bne.n	8010b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010b50:	4b0b      	ldr	r3, [pc, #44]	; (8010b80 <vPortEnterCritical+0x5c>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00a      	beq.n	8010b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8010b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5e:	f383 8811 	msr	BASEPRI, r3
 8010b62:	f3bf 8f6f 	isb	sy
 8010b66:	f3bf 8f4f 	dsb	sy
 8010b6a:	603b      	str	r3, [r7, #0]
}
 8010b6c:	bf00      	nop
 8010b6e:	e7fe      	b.n	8010b6e <vPortEnterCritical+0x4a>
	}
}
 8010b70:	bf00      	nop
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr
 8010b7c:	20000148 	.word	0x20000148
 8010b80:	e000ed04 	.word	0xe000ed04

08010b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b84:	b480      	push	{r7}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b8a:	4b12      	ldr	r3, [pc, #72]	; (8010bd4 <vPortExitCritical+0x50>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d10a      	bne.n	8010ba8 <vPortExitCritical+0x24>
	__asm volatile
 8010b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b96:	f383 8811 	msr	BASEPRI, r3
 8010b9a:	f3bf 8f6f 	isb	sy
 8010b9e:	f3bf 8f4f 	dsb	sy
 8010ba2:	607b      	str	r3, [r7, #4]
}
 8010ba4:	bf00      	nop
 8010ba6:	e7fe      	b.n	8010ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010ba8:	4b0a      	ldr	r3, [pc, #40]	; (8010bd4 <vPortExitCritical+0x50>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	3b01      	subs	r3, #1
 8010bae:	4a09      	ldr	r2, [pc, #36]	; (8010bd4 <vPortExitCritical+0x50>)
 8010bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010bb2:	4b08      	ldr	r3, [pc, #32]	; (8010bd4 <vPortExitCritical+0x50>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d105      	bne.n	8010bc6 <vPortExitCritical+0x42>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	f383 8811 	msr	BASEPRI, r3
}
 8010bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010bc6:	bf00      	nop
 8010bc8:	370c      	adds	r7, #12
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr
 8010bd2:	bf00      	nop
 8010bd4:	20000148 	.word	0x20000148
	...

08010be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010be0:	f3ef 8009 	mrs	r0, PSP
 8010be4:	f3bf 8f6f 	isb	sy
 8010be8:	4b15      	ldr	r3, [pc, #84]	; (8010c40 <pxCurrentTCBConst>)
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	f01e 0f10 	tst.w	lr, #16
 8010bf0:	bf08      	it	eq
 8010bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bfa:	6010      	str	r0, [r2, #0]
 8010bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010c04:	f380 8811 	msr	BASEPRI, r0
 8010c08:	f3bf 8f4f 	dsb	sy
 8010c0c:	f3bf 8f6f 	isb	sy
 8010c10:	f7fe fd88 	bl	800f724 <vTaskSwitchContext>
 8010c14:	f04f 0000 	mov.w	r0, #0
 8010c18:	f380 8811 	msr	BASEPRI, r0
 8010c1c:	bc09      	pop	{r0, r3}
 8010c1e:	6819      	ldr	r1, [r3, #0]
 8010c20:	6808      	ldr	r0, [r1, #0]
 8010c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c26:	f01e 0f10 	tst.w	lr, #16
 8010c2a:	bf08      	it	eq
 8010c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010c30:	f380 8809 	msr	PSP, r0
 8010c34:	f3bf 8f6f 	isb	sy
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop
 8010c3c:	f3af 8000 	nop.w

08010c40 <pxCurrentTCBConst>:
 8010c40:	20002f38 	.word	0x20002f38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010c44:	bf00      	nop
 8010c46:	bf00      	nop

08010c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c52:	f383 8811 	msr	BASEPRI, r3
 8010c56:	f3bf 8f6f 	isb	sy
 8010c5a:	f3bf 8f4f 	dsb	sy
 8010c5e:	607b      	str	r3, [r7, #4]
}
 8010c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010c62:	f7fe fca5 	bl	800f5b0 <xTaskIncrementTick>
 8010c66:	4603      	mov	r3, r0
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d003      	beq.n	8010c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c6c:	4b06      	ldr	r3, [pc, #24]	; (8010c88 <xPortSysTickHandler+0x40>)
 8010c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c72:	601a      	str	r2, [r3, #0]
 8010c74:	2300      	movs	r3, #0
 8010c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	f383 8811 	msr	BASEPRI, r3
}
 8010c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c80:	bf00      	nop
 8010c82:	3708      	adds	r7, #8
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	e000ed04 	.word	0xe000ed04

08010c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c90:	4b0b      	ldr	r3, [pc, #44]	; (8010cc0 <vPortSetupTimerInterrupt+0x34>)
 8010c92:	2200      	movs	r2, #0
 8010c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c96:	4b0b      	ldr	r3, [pc, #44]	; (8010cc4 <vPortSetupTimerInterrupt+0x38>)
 8010c98:	2200      	movs	r2, #0
 8010c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c9c:	4b0a      	ldr	r3, [pc, #40]	; (8010cc8 <vPortSetupTimerInterrupt+0x3c>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4a0a      	ldr	r2, [pc, #40]	; (8010ccc <vPortSetupTimerInterrupt+0x40>)
 8010ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ca6:	099b      	lsrs	r3, r3, #6
 8010ca8:	4a09      	ldr	r2, [pc, #36]	; (8010cd0 <vPortSetupTimerInterrupt+0x44>)
 8010caa:	3b01      	subs	r3, #1
 8010cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010cae:	4b04      	ldr	r3, [pc, #16]	; (8010cc0 <vPortSetupTimerInterrupt+0x34>)
 8010cb0:	2207      	movs	r2, #7
 8010cb2:	601a      	str	r2, [r3, #0]
}
 8010cb4:	bf00      	nop
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop
 8010cc0:	e000e010 	.word	0xe000e010
 8010cc4:	e000e018 	.word	0xe000e018
 8010cc8:	2000002c 	.word	0x2000002c
 8010ccc:	10624dd3 	.word	0x10624dd3
 8010cd0:	e000e014 	.word	0xe000e014

08010cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010ce4 <vPortEnableVFP+0x10>
 8010cd8:	6801      	ldr	r1, [r0, #0]
 8010cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010cde:	6001      	str	r1, [r0, #0]
 8010ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ce2:	bf00      	nop
 8010ce4:	e000ed88 	.word	0xe000ed88

08010ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010ce8:	b480      	push	{r7}
 8010cea:	b085      	sub	sp, #20
 8010cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010cee:	f3ef 8305 	mrs	r3, IPSR
 8010cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2b0f      	cmp	r3, #15
 8010cf8:	d914      	bls.n	8010d24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010cfa:	4a17      	ldr	r2, [pc, #92]	; (8010d58 <vPortValidateInterruptPriority+0x70>)
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	4413      	add	r3, r2
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d04:	4b15      	ldr	r3, [pc, #84]	; (8010d5c <vPortValidateInterruptPriority+0x74>)
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	7afa      	ldrb	r2, [r7, #11]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d20a      	bcs.n	8010d24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d12:	f383 8811 	msr	BASEPRI, r3
 8010d16:	f3bf 8f6f 	isb	sy
 8010d1a:	f3bf 8f4f 	dsb	sy
 8010d1e:	607b      	str	r3, [r7, #4]
}
 8010d20:	bf00      	nop
 8010d22:	e7fe      	b.n	8010d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010d24:	4b0e      	ldr	r3, [pc, #56]	; (8010d60 <vPortValidateInterruptPriority+0x78>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010d2c:	4b0d      	ldr	r3, [pc, #52]	; (8010d64 <vPortValidateInterruptPriority+0x7c>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d90a      	bls.n	8010d4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d38:	f383 8811 	msr	BASEPRI, r3
 8010d3c:	f3bf 8f6f 	isb	sy
 8010d40:	f3bf 8f4f 	dsb	sy
 8010d44:	603b      	str	r3, [r7, #0]
}
 8010d46:	bf00      	nop
 8010d48:	e7fe      	b.n	8010d48 <vPortValidateInterruptPriority+0x60>
	}
 8010d4a:	bf00      	nop
 8010d4c:	3714      	adds	r7, #20
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	e000e3f0 	.word	0xe000e3f0
 8010d5c:	2000356c 	.word	0x2000356c
 8010d60:	e000ed0c 	.word	0xe000ed0c
 8010d64:	20003570 	.word	0x20003570

08010d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b08a      	sub	sp, #40	; 0x28
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d70:	2300      	movs	r3, #0
 8010d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010d74:	f7fe fad0 	bl	800f318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d78:	4b5b      	ldr	r3, [pc, #364]	; (8010ee8 <pvPortMalloc+0x180>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d101      	bne.n	8010d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d80:	f000 f92c 	bl	8010fdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d84:	4b59      	ldr	r3, [pc, #356]	; (8010eec <pvPortMalloc+0x184>)
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4013      	ands	r3, r2
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f040 8093 	bne.w	8010eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d01d      	beq.n	8010dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010d98:	2208      	movs	r2, #8
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	4413      	add	r3, r2
 8010d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f003 0307 	and.w	r3, r3, #7
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d014      	beq.n	8010dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f023 0307 	bic.w	r3, r3, #7
 8010db0:	3308      	adds	r3, #8
 8010db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f003 0307 	and.w	r3, r3, #7
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00a      	beq.n	8010dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8010dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc2:	f383 8811 	msr	BASEPRI, r3
 8010dc6:	f3bf 8f6f 	isb	sy
 8010dca:	f3bf 8f4f 	dsb	sy
 8010dce:	617b      	str	r3, [r7, #20]
}
 8010dd0:	bf00      	nop
 8010dd2:	e7fe      	b.n	8010dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d06e      	beq.n	8010eb8 <pvPortMalloc+0x150>
 8010dda:	4b45      	ldr	r3, [pc, #276]	; (8010ef0 <pvPortMalloc+0x188>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	687a      	ldr	r2, [r7, #4]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d869      	bhi.n	8010eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010de4:	4b43      	ldr	r3, [pc, #268]	; (8010ef4 <pvPortMalloc+0x18c>)
 8010de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010de8:	4b42      	ldr	r3, [pc, #264]	; (8010ef4 <pvPortMalloc+0x18c>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010dee:	e004      	b.n	8010dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	687a      	ldr	r2, [r7, #4]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d903      	bls.n	8010e0c <pvPortMalloc+0xa4>
 8010e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d1f1      	bne.n	8010df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010e0c:	4b36      	ldr	r3, [pc, #216]	; (8010ee8 <pvPortMalloc+0x180>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d050      	beq.n	8010eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010e16:	6a3b      	ldr	r3, [r7, #32]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	2208      	movs	r2, #8
 8010e1c:	4413      	add	r3, r2
 8010e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	6a3b      	ldr	r3, [r7, #32]
 8010e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2a:	685a      	ldr	r2, [r3, #4]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	1ad2      	subs	r2, r2, r3
 8010e30:	2308      	movs	r3, #8
 8010e32:	005b      	lsls	r3, r3, #1
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d91f      	bls.n	8010e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	f003 0307 	and.w	r3, r3, #7
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d00a      	beq.n	8010e60 <pvPortMalloc+0xf8>
	__asm volatile
 8010e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e4e:	f383 8811 	msr	BASEPRI, r3
 8010e52:	f3bf 8f6f 	isb	sy
 8010e56:	f3bf 8f4f 	dsb	sy
 8010e5a:	613b      	str	r3, [r7, #16]
}
 8010e5c:	bf00      	nop
 8010e5e:	e7fe      	b.n	8010e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e62:	685a      	ldr	r2, [r3, #4]
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	1ad2      	subs	r2, r2, r3
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6e:	687a      	ldr	r2, [r7, #4]
 8010e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e72:	69b8      	ldr	r0, [r7, #24]
 8010e74:	f000 f914 	bl	80110a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e78:	4b1d      	ldr	r3, [pc, #116]	; (8010ef0 <pvPortMalloc+0x188>)
 8010e7a:	681a      	ldr	r2, [r3, #0]
 8010e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	1ad3      	subs	r3, r2, r3
 8010e82:	4a1b      	ldr	r2, [pc, #108]	; (8010ef0 <pvPortMalloc+0x188>)
 8010e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e86:	4b1a      	ldr	r3, [pc, #104]	; (8010ef0 <pvPortMalloc+0x188>)
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	4b1b      	ldr	r3, [pc, #108]	; (8010ef8 <pvPortMalloc+0x190>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d203      	bcs.n	8010e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e92:	4b17      	ldr	r3, [pc, #92]	; (8010ef0 <pvPortMalloc+0x188>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	4a18      	ldr	r2, [pc, #96]	; (8010ef8 <pvPortMalloc+0x190>)
 8010e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9c:	685a      	ldr	r2, [r3, #4]
 8010e9e:	4b13      	ldr	r3, [pc, #76]	; (8010eec <pvPortMalloc+0x184>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	431a      	orrs	r2, r3
 8010ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eaa:	2200      	movs	r2, #0
 8010eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010eae:	4b13      	ldr	r3, [pc, #76]	; (8010efc <pvPortMalloc+0x194>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	4a11      	ldr	r2, [pc, #68]	; (8010efc <pvPortMalloc+0x194>)
 8010eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010eb8:	f7fe fa3c 	bl	800f334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	f003 0307 	and.w	r3, r3, #7
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d00a      	beq.n	8010edc <pvPortMalloc+0x174>
	__asm volatile
 8010ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eca:	f383 8811 	msr	BASEPRI, r3
 8010ece:	f3bf 8f6f 	isb	sy
 8010ed2:	f3bf 8f4f 	dsb	sy
 8010ed6:	60fb      	str	r3, [r7, #12]
}
 8010ed8:	bf00      	nop
 8010eda:	e7fe      	b.n	8010eda <pvPortMalloc+0x172>
	return pvReturn;
 8010edc:	69fb      	ldr	r3, [r7, #28]
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3728      	adds	r7, #40	; 0x28
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	200073fc 	.word	0x200073fc
 8010eec:	20007410 	.word	0x20007410
 8010ef0:	20007400 	.word	0x20007400
 8010ef4:	200073f4 	.word	0x200073f4
 8010ef8:	20007404 	.word	0x20007404
 8010efc:	20007408 	.word	0x20007408

08010f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b086      	sub	sp, #24
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d04d      	beq.n	8010fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010f12:	2308      	movs	r3, #8
 8010f14:	425b      	negs	r3, r3
 8010f16:	697a      	ldr	r2, [r7, #20]
 8010f18:	4413      	add	r3, r2
 8010f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	685a      	ldr	r2, [r3, #4]
 8010f24:	4b24      	ldr	r3, [pc, #144]	; (8010fb8 <vPortFree+0xb8>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	4013      	ands	r3, r2
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d10a      	bne.n	8010f44 <vPortFree+0x44>
	__asm volatile
 8010f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f32:	f383 8811 	msr	BASEPRI, r3
 8010f36:	f3bf 8f6f 	isb	sy
 8010f3a:	f3bf 8f4f 	dsb	sy
 8010f3e:	60fb      	str	r3, [r7, #12]
}
 8010f40:	bf00      	nop
 8010f42:	e7fe      	b.n	8010f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d00a      	beq.n	8010f62 <vPortFree+0x62>
	__asm volatile
 8010f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f50:	f383 8811 	msr	BASEPRI, r3
 8010f54:	f3bf 8f6f 	isb	sy
 8010f58:	f3bf 8f4f 	dsb	sy
 8010f5c:	60bb      	str	r3, [r7, #8]
}
 8010f5e:	bf00      	nop
 8010f60:	e7fe      	b.n	8010f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	685a      	ldr	r2, [r3, #4]
 8010f66:	4b14      	ldr	r3, [pc, #80]	; (8010fb8 <vPortFree+0xb8>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4013      	ands	r3, r2
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d01e      	beq.n	8010fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d11a      	bne.n	8010fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	685a      	ldr	r2, [r3, #4]
 8010f7c:	4b0e      	ldr	r3, [pc, #56]	; (8010fb8 <vPortFree+0xb8>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	43db      	mvns	r3, r3
 8010f82:	401a      	ands	r2, r3
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f88:	f7fe f9c6 	bl	800f318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	685a      	ldr	r2, [r3, #4]
 8010f90:	4b0a      	ldr	r3, [pc, #40]	; (8010fbc <vPortFree+0xbc>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4413      	add	r3, r2
 8010f96:	4a09      	ldr	r2, [pc, #36]	; (8010fbc <vPortFree+0xbc>)
 8010f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f9a:	6938      	ldr	r0, [r7, #16]
 8010f9c:	f000 f880 	bl	80110a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010fa0:	4b07      	ldr	r3, [pc, #28]	; (8010fc0 <vPortFree+0xc0>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	4a06      	ldr	r2, [pc, #24]	; (8010fc0 <vPortFree+0xc0>)
 8010fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010faa:	f7fe f9c3 	bl	800f334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010fae:	bf00      	nop
 8010fb0:	3718      	adds	r7, #24
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	20007410 	.word	0x20007410
 8010fbc:	20007400 	.word	0x20007400
 8010fc0:	2000740c 	.word	0x2000740c

08010fc4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8010fc8:	4b03      	ldr	r3, [pc, #12]	; (8010fd8 <xPortGetFreeHeapSize+0x14>)
 8010fca:	681b      	ldr	r3, [r3, #0]
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	20007400 	.word	0x20007400

08010fdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b085      	sub	sp, #20
 8010fe0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010fe2:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8010fe6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010fe8:	4b27      	ldr	r3, [pc, #156]	; (8011088 <prvHeapInit+0xac>)
 8010fea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	f003 0307 	and.w	r3, r3, #7
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d00c      	beq.n	8011010 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	3307      	adds	r3, #7
 8010ffa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f023 0307 	bic.w	r3, r3, #7
 8011002:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011004:	68ba      	ldr	r2, [r7, #8]
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	1ad3      	subs	r3, r2, r3
 801100a:	4a1f      	ldr	r2, [pc, #124]	; (8011088 <prvHeapInit+0xac>)
 801100c:	4413      	add	r3, r2
 801100e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011014:	4a1d      	ldr	r2, [pc, #116]	; (801108c <prvHeapInit+0xb0>)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801101a:	4b1c      	ldr	r3, [pc, #112]	; (801108c <prvHeapInit+0xb0>)
 801101c:	2200      	movs	r2, #0
 801101e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	68ba      	ldr	r2, [r7, #8]
 8011024:	4413      	add	r3, r2
 8011026:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011028:	2208      	movs	r2, #8
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	1a9b      	subs	r3, r3, r2
 801102e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	f023 0307 	bic.w	r3, r3, #7
 8011036:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	4a15      	ldr	r2, [pc, #84]	; (8011090 <prvHeapInit+0xb4>)
 801103c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801103e:	4b14      	ldr	r3, [pc, #80]	; (8011090 <prvHeapInit+0xb4>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	2200      	movs	r2, #0
 8011044:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011046:	4b12      	ldr	r3, [pc, #72]	; (8011090 <prvHeapInit+0xb4>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2200      	movs	r2, #0
 801104c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	68fa      	ldr	r2, [r7, #12]
 8011056:	1ad2      	subs	r2, r2, r3
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801105c:	4b0c      	ldr	r3, [pc, #48]	; (8011090 <prvHeapInit+0xb4>)
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	685b      	ldr	r3, [r3, #4]
 8011068:	4a0a      	ldr	r2, [pc, #40]	; (8011094 <prvHeapInit+0xb8>)
 801106a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	685b      	ldr	r3, [r3, #4]
 8011070:	4a09      	ldr	r2, [pc, #36]	; (8011098 <prvHeapInit+0xbc>)
 8011072:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011074:	4b09      	ldr	r3, [pc, #36]	; (801109c <prvHeapInit+0xc0>)
 8011076:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801107a:	601a      	str	r2, [r3, #0]
}
 801107c:	bf00      	nop
 801107e:	3714      	adds	r7, #20
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr
 8011088:	20003574 	.word	0x20003574
 801108c:	200073f4 	.word	0x200073f4
 8011090:	200073fc 	.word	0x200073fc
 8011094:	20007404 	.word	0x20007404
 8011098:	20007400 	.word	0x20007400
 801109c:	20007410 	.word	0x20007410

080110a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80110a0:	b480      	push	{r7}
 80110a2:	b085      	sub	sp, #20
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80110a8:	4b28      	ldr	r3, [pc, #160]	; (801114c <prvInsertBlockIntoFreeList+0xac>)
 80110aa:	60fb      	str	r3, [r7, #12]
 80110ac:	e002      	b.n	80110b4 <prvInsertBlockIntoFreeList+0x14>
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	60fb      	str	r3, [r7, #12]
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	687a      	ldr	r2, [r7, #4]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d8f7      	bhi.n	80110ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	68ba      	ldr	r2, [r7, #8]
 80110c8:	4413      	add	r3, r2
 80110ca:	687a      	ldr	r2, [r7, #4]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d108      	bne.n	80110e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	685a      	ldr	r2, [r3, #4]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	685b      	ldr	r3, [r3, #4]
 80110d8:	441a      	add	r2, r3
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	68ba      	ldr	r2, [r7, #8]
 80110ec:	441a      	add	r2, r3
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d118      	bne.n	8011128 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	4b15      	ldr	r3, [pc, #84]	; (8011150 <prvInsertBlockIntoFreeList+0xb0>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	429a      	cmp	r2, r3
 8011100:	d00d      	beq.n	801111e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	685a      	ldr	r2, [r3, #4]
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	441a      	add	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	681a      	ldr	r2, [r3, #0]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	601a      	str	r2, [r3, #0]
 801111c:	e008      	b.n	8011130 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801111e:	4b0c      	ldr	r3, [pc, #48]	; (8011150 <prvInsertBlockIntoFreeList+0xb0>)
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	601a      	str	r2, [r3, #0]
 8011126:	e003      	b.n	8011130 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681a      	ldr	r2, [r3, #0]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011130:	68fa      	ldr	r2, [r7, #12]
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	429a      	cmp	r2, r3
 8011136:	d002      	beq.n	801113e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801113e:	bf00      	nop
 8011140:	3714      	adds	r7, #20
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr
 801114a:	bf00      	nop
 801114c:	200073f4 	.word	0x200073f4
 8011150:	200073fc 	.word	0x200073fc

08011154 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011158:	2200      	movs	r2, #0
 801115a:	4912      	ldr	r1, [pc, #72]	; (80111a4 <MX_USB_DEVICE_Init+0x50>)
 801115c:	4812      	ldr	r0, [pc, #72]	; (80111a8 <MX_USB_DEVICE_Init+0x54>)
 801115e:	f7fb fbad 	bl	800c8bc <USBD_Init>
 8011162:	4603      	mov	r3, r0
 8011164:	2b00      	cmp	r3, #0
 8011166:	d001      	beq.n	801116c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011168:	f7f2 ff36 	bl	8003fd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801116c:	490f      	ldr	r1, [pc, #60]	; (80111ac <MX_USB_DEVICE_Init+0x58>)
 801116e:	480e      	ldr	r0, [pc, #56]	; (80111a8 <MX_USB_DEVICE_Init+0x54>)
 8011170:	f7fb fbd4 	bl	800c91c <USBD_RegisterClass>
 8011174:	4603      	mov	r3, r0
 8011176:	2b00      	cmp	r3, #0
 8011178:	d001      	beq.n	801117e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801117a:	f7f2 ff2d 	bl	8003fd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801117e:	490c      	ldr	r1, [pc, #48]	; (80111b0 <MX_USB_DEVICE_Init+0x5c>)
 8011180:	4809      	ldr	r0, [pc, #36]	; (80111a8 <MX_USB_DEVICE_Init+0x54>)
 8011182:	f7fb faf5 	bl	800c770 <USBD_CDC_RegisterInterface>
 8011186:	4603      	mov	r3, r0
 8011188:	2b00      	cmp	r3, #0
 801118a:	d001      	beq.n	8011190 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801118c:	f7f2 ff24 	bl	8003fd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011190:	4805      	ldr	r0, [pc, #20]	; (80111a8 <MX_USB_DEVICE_Init+0x54>)
 8011192:	f7fb fbea 	bl	800c96a <USBD_Start>
 8011196:	4603      	mov	r3, r0
 8011198:	2b00      	cmp	r3, #0
 801119a:	d001      	beq.n	80111a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801119c:	f7f2 ff1c 	bl	8003fd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80111a0:	bf00      	nop
 80111a2:	bd80      	pop	{r7, pc}
 80111a4:	20000160 	.word	0x20000160
 80111a8:	2000d8bc 	.word	0x2000d8bc
 80111ac:	20000044 	.word	0x20000044
 80111b0:	2000014c 	.word	0x2000014c

080111b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80111b8:	2200      	movs	r2, #0
 80111ba:	4905      	ldr	r1, [pc, #20]	; (80111d0 <CDC_Init_FS+0x1c>)
 80111bc:	4805      	ldr	r0, [pc, #20]	; (80111d4 <CDC_Init_FS+0x20>)
 80111be:	f7fb faec 	bl	800c79a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80111c2:	4905      	ldr	r1, [pc, #20]	; (80111d8 <CDC_Init_FS+0x24>)
 80111c4:	4803      	ldr	r0, [pc, #12]	; (80111d4 <CDC_Init_FS+0x20>)
 80111c6:	f7fb fb06 	bl	800c7d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80111ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	2000e38c 	.word	0x2000e38c
 80111d4:	2000d8bc 	.word	0x2000d8bc
 80111d8:	2000db8c 	.word	0x2000db8c

080111dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80111dc:	b480      	push	{r7}
 80111de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80111e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr

080111ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b083      	sub	sp, #12
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	4603      	mov	r3, r0
 80111f4:	6039      	str	r1, [r7, #0]
 80111f6:	71fb      	strb	r3, [r7, #7]
 80111f8:	4613      	mov	r3, r2
 80111fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80111fc:	79fb      	ldrb	r3, [r7, #7]
 80111fe:	2b23      	cmp	r3, #35	; 0x23
 8011200:	d84a      	bhi.n	8011298 <CDC_Control_FS+0xac>
 8011202:	a201      	add	r2, pc, #4	; (adr r2, 8011208 <CDC_Control_FS+0x1c>)
 8011204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011208:	08011299 	.word	0x08011299
 801120c:	08011299 	.word	0x08011299
 8011210:	08011299 	.word	0x08011299
 8011214:	08011299 	.word	0x08011299
 8011218:	08011299 	.word	0x08011299
 801121c:	08011299 	.word	0x08011299
 8011220:	08011299 	.word	0x08011299
 8011224:	08011299 	.word	0x08011299
 8011228:	08011299 	.word	0x08011299
 801122c:	08011299 	.word	0x08011299
 8011230:	08011299 	.word	0x08011299
 8011234:	08011299 	.word	0x08011299
 8011238:	08011299 	.word	0x08011299
 801123c:	08011299 	.word	0x08011299
 8011240:	08011299 	.word	0x08011299
 8011244:	08011299 	.word	0x08011299
 8011248:	08011299 	.word	0x08011299
 801124c:	08011299 	.word	0x08011299
 8011250:	08011299 	.word	0x08011299
 8011254:	08011299 	.word	0x08011299
 8011258:	08011299 	.word	0x08011299
 801125c:	08011299 	.word	0x08011299
 8011260:	08011299 	.word	0x08011299
 8011264:	08011299 	.word	0x08011299
 8011268:	08011299 	.word	0x08011299
 801126c:	08011299 	.word	0x08011299
 8011270:	08011299 	.word	0x08011299
 8011274:	08011299 	.word	0x08011299
 8011278:	08011299 	.word	0x08011299
 801127c:	08011299 	.word	0x08011299
 8011280:	08011299 	.word	0x08011299
 8011284:	08011299 	.word	0x08011299
 8011288:	08011299 	.word	0x08011299
 801128c:	08011299 	.word	0x08011299
 8011290:	08011299 	.word	0x08011299
 8011294:	08011299 	.word	0x08011299
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011298:	bf00      	nop
  }

  return (USBD_OK);
 801129a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801129c:	4618      	mov	r0, r3
 801129e:	370c      	adds	r7, #12
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80112b2:	6879      	ldr	r1, [r7, #4]
 80112b4:	4805      	ldr	r0, [pc, #20]	; (80112cc <CDC_Receive_FS+0x24>)
 80112b6:	f7fb fa8e 	bl	800c7d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80112ba:	4804      	ldr	r0, [pc, #16]	; (80112cc <CDC_Receive_FS+0x24>)
 80112bc:	f7fb fad4 	bl	800c868 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80112c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3708      	adds	r7, #8
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	bf00      	nop
 80112cc:	2000d8bc 	.word	0x2000d8bc

080112d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b084      	sub	sp, #16
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	460b      	mov	r3, r1
 80112da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80112dc:	2300      	movs	r3, #0
 80112de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80112e0:	4b0d      	ldr	r3, [pc, #52]	; (8011318 <CDC_Transmit_FS+0x48>)
 80112e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d001      	beq.n	80112f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80112f2:	2301      	movs	r3, #1
 80112f4:	e00b      	b.n	801130e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80112f6:	887b      	ldrh	r3, [r7, #2]
 80112f8:	461a      	mov	r2, r3
 80112fa:	6879      	ldr	r1, [r7, #4]
 80112fc:	4806      	ldr	r0, [pc, #24]	; (8011318 <CDC_Transmit_FS+0x48>)
 80112fe:	f7fb fa4c 	bl	800c79a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011302:	4805      	ldr	r0, [pc, #20]	; (8011318 <CDC_Transmit_FS+0x48>)
 8011304:	f7fb fa80 	bl	800c808 <USBD_CDC_TransmitPacket>
 8011308:	4603      	mov	r3, r0
 801130a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801130c:	7bfb      	ldrb	r3, [r7, #15]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	2000d8bc 	.word	0x2000d8bc

0801131c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801131c:	b480      	push	{r7}
 801131e:	b087      	sub	sp, #28
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	4613      	mov	r3, r2
 8011328:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801132a:	2300      	movs	r3, #0
 801132c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801132e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011332:	4618      	mov	r0, r3
 8011334:	371c      	adds	r7, #28
 8011336:	46bd      	mov	sp, r7
 8011338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133c:	4770      	bx	lr
	...

08011340 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011340:	b480      	push	{r7}
 8011342:	b083      	sub	sp, #12
 8011344:	af00      	add	r7, sp, #0
 8011346:	4603      	mov	r3, r0
 8011348:	6039      	str	r1, [r7, #0]
 801134a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	2212      	movs	r2, #18
 8011350:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011352:	4b03      	ldr	r3, [pc, #12]	; (8011360 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011354:	4618      	mov	r0, r3
 8011356:	370c      	adds	r7, #12
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr
 8011360:	2000017c 	.word	0x2000017c

08011364 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011364:	b480      	push	{r7}
 8011366:	b083      	sub	sp, #12
 8011368:	af00      	add	r7, sp, #0
 801136a:	4603      	mov	r3, r0
 801136c:	6039      	str	r1, [r7, #0]
 801136e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	2204      	movs	r2, #4
 8011374:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011376:	4b03      	ldr	r3, [pc, #12]	; (8011384 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011378:	4618      	mov	r0, r3
 801137a:	370c      	adds	r7, #12
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr
 8011384:	20000190 	.word	0x20000190

08011388 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
 801138e:	4603      	mov	r3, r0
 8011390:	6039      	str	r1, [r7, #0]
 8011392:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011394:	79fb      	ldrb	r3, [r7, #7]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d105      	bne.n	80113a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801139a:	683a      	ldr	r2, [r7, #0]
 801139c:	4907      	ldr	r1, [pc, #28]	; (80113bc <USBD_FS_ProductStrDescriptor+0x34>)
 801139e:	4808      	ldr	r0, [pc, #32]	; (80113c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80113a0:	f7fc fb15 	bl	800d9ce <USBD_GetString>
 80113a4:	e004      	b.n	80113b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80113a6:	683a      	ldr	r2, [r7, #0]
 80113a8:	4904      	ldr	r1, [pc, #16]	; (80113bc <USBD_FS_ProductStrDescriptor+0x34>)
 80113aa:	4805      	ldr	r0, [pc, #20]	; (80113c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80113ac:	f7fc fb0f 	bl	800d9ce <USBD_GetString>
  }
  return USBD_StrDesc;
 80113b0:	4b02      	ldr	r3, [pc, #8]	; (80113bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	2000eb8c 	.word	0x2000eb8c
 80113c0:	08014de8 	.word	0x08014de8

080113c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b082      	sub	sp, #8
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	4603      	mov	r3, r0
 80113cc:	6039      	str	r1, [r7, #0]
 80113ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80113d0:	683a      	ldr	r2, [r7, #0]
 80113d2:	4904      	ldr	r1, [pc, #16]	; (80113e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80113d4:	4804      	ldr	r0, [pc, #16]	; (80113e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80113d6:	f7fc fafa 	bl	800d9ce <USBD_GetString>
  return USBD_StrDesc;
 80113da:	4b02      	ldr	r3, [pc, #8]	; (80113e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3708      	adds	r7, #8
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	2000eb8c 	.word	0x2000eb8c
 80113e8:	08014e00 	.word	0x08014e00

080113ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b082      	sub	sp, #8
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	4603      	mov	r3, r0
 80113f4:	6039      	str	r1, [r7, #0]
 80113f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	221a      	movs	r2, #26
 80113fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80113fe:	f000 f843 	bl	8011488 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011402:	4b02      	ldr	r3, [pc, #8]	; (801140c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011404:	4618      	mov	r0, r3
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	20000194 	.word	0x20000194

08011410 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
 8011416:	4603      	mov	r3, r0
 8011418:	6039      	str	r1, [r7, #0]
 801141a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801141c:	79fb      	ldrb	r3, [r7, #7]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d105      	bne.n	801142e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011422:	683a      	ldr	r2, [r7, #0]
 8011424:	4907      	ldr	r1, [pc, #28]	; (8011444 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011426:	4808      	ldr	r0, [pc, #32]	; (8011448 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011428:	f7fc fad1 	bl	800d9ce <USBD_GetString>
 801142c:	e004      	b.n	8011438 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801142e:	683a      	ldr	r2, [r7, #0]
 8011430:	4904      	ldr	r1, [pc, #16]	; (8011444 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011432:	4805      	ldr	r0, [pc, #20]	; (8011448 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011434:	f7fc facb 	bl	800d9ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8011438:	4b02      	ldr	r3, [pc, #8]	; (8011444 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801143a:	4618      	mov	r0, r3
 801143c:	3708      	adds	r7, #8
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	2000eb8c 	.word	0x2000eb8c
 8011448:	08014e14 	.word	0x08014e14

0801144c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b082      	sub	sp, #8
 8011450:	af00      	add	r7, sp, #0
 8011452:	4603      	mov	r3, r0
 8011454:	6039      	str	r1, [r7, #0]
 8011456:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011458:	79fb      	ldrb	r3, [r7, #7]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d105      	bne.n	801146a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801145e:	683a      	ldr	r2, [r7, #0]
 8011460:	4907      	ldr	r1, [pc, #28]	; (8011480 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011462:	4808      	ldr	r0, [pc, #32]	; (8011484 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011464:	f7fc fab3 	bl	800d9ce <USBD_GetString>
 8011468:	e004      	b.n	8011474 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801146a:	683a      	ldr	r2, [r7, #0]
 801146c:	4904      	ldr	r1, [pc, #16]	; (8011480 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801146e:	4805      	ldr	r0, [pc, #20]	; (8011484 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011470:	f7fc faad 	bl	800d9ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8011474:	4b02      	ldr	r3, [pc, #8]	; (8011480 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011476:	4618      	mov	r0, r3
 8011478:	3708      	adds	r7, #8
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	2000eb8c 	.word	0x2000eb8c
 8011484:	08014e20 	.word	0x08014e20

08011488 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801148e:	4b0f      	ldr	r3, [pc, #60]	; (80114cc <Get_SerialNum+0x44>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011494:	4b0e      	ldr	r3, [pc, #56]	; (80114d0 <Get_SerialNum+0x48>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801149a:	4b0e      	ldr	r3, [pc, #56]	; (80114d4 <Get_SerialNum+0x4c>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80114a0:	68fa      	ldr	r2, [r7, #12]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4413      	add	r3, r2
 80114a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d009      	beq.n	80114c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80114ae:	2208      	movs	r2, #8
 80114b0:	4909      	ldr	r1, [pc, #36]	; (80114d8 <Get_SerialNum+0x50>)
 80114b2:	68f8      	ldr	r0, [r7, #12]
 80114b4:	f000 f814 	bl	80114e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80114b8:	2204      	movs	r2, #4
 80114ba:	4908      	ldr	r1, [pc, #32]	; (80114dc <Get_SerialNum+0x54>)
 80114bc:	68b8      	ldr	r0, [r7, #8]
 80114be:	f000 f80f 	bl	80114e0 <IntToUnicode>
  }
}
 80114c2:	bf00      	nop
 80114c4:	3710      	adds	r7, #16
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
 80114ca:	bf00      	nop
 80114cc:	1fff7a10 	.word	0x1fff7a10
 80114d0:	1fff7a14 	.word	0x1fff7a14
 80114d4:	1fff7a18 	.word	0x1fff7a18
 80114d8:	20000196 	.word	0x20000196
 80114dc:	200001a6 	.word	0x200001a6

080114e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b087      	sub	sp, #28
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	4613      	mov	r3, r2
 80114ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80114ee:	2300      	movs	r3, #0
 80114f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80114f2:	2300      	movs	r3, #0
 80114f4:	75fb      	strb	r3, [r7, #23]
 80114f6:	e027      	b.n	8011548 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	0f1b      	lsrs	r3, r3, #28
 80114fc:	2b09      	cmp	r3, #9
 80114fe:	d80b      	bhi.n	8011518 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	0f1b      	lsrs	r3, r3, #28
 8011504:	b2da      	uxtb	r2, r3
 8011506:	7dfb      	ldrb	r3, [r7, #23]
 8011508:	005b      	lsls	r3, r3, #1
 801150a:	4619      	mov	r1, r3
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	440b      	add	r3, r1
 8011510:	3230      	adds	r2, #48	; 0x30
 8011512:	b2d2      	uxtb	r2, r2
 8011514:	701a      	strb	r2, [r3, #0]
 8011516:	e00a      	b.n	801152e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	0f1b      	lsrs	r3, r3, #28
 801151c:	b2da      	uxtb	r2, r3
 801151e:	7dfb      	ldrb	r3, [r7, #23]
 8011520:	005b      	lsls	r3, r3, #1
 8011522:	4619      	mov	r1, r3
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	440b      	add	r3, r1
 8011528:	3237      	adds	r2, #55	; 0x37
 801152a:	b2d2      	uxtb	r2, r2
 801152c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	011b      	lsls	r3, r3, #4
 8011532:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011534:	7dfb      	ldrb	r3, [r7, #23]
 8011536:	005b      	lsls	r3, r3, #1
 8011538:	3301      	adds	r3, #1
 801153a:	68ba      	ldr	r2, [r7, #8]
 801153c:	4413      	add	r3, r2
 801153e:	2200      	movs	r2, #0
 8011540:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011542:	7dfb      	ldrb	r3, [r7, #23]
 8011544:	3301      	adds	r3, #1
 8011546:	75fb      	strb	r3, [r7, #23]
 8011548:	7dfa      	ldrb	r2, [r7, #23]
 801154a:	79fb      	ldrb	r3, [r7, #7]
 801154c:	429a      	cmp	r2, r3
 801154e:	d3d3      	bcc.n	80114f8 <IntToUnicode+0x18>
  }
}
 8011550:	bf00      	nop
 8011552:	bf00      	nop
 8011554:	371c      	adds	r7, #28
 8011556:	46bd      	mov	sp, r7
 8011558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155c:	4770      	bx	lr
	...

08011560 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b08a      	sub	sp, #40	; 0x28
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011568:	f107 0314 	add.w	r3, r7, #20
 801156c:	2200      	movs	r2, #0
 801156e:	601a      	str	r2, [r3, #0]
 8011570:	605a      	str	r2, [r3, #4]
 8011572:	609a      	str	r2, [r3, #8]
 8011574:	60da      	str	r2, [r3, #12]
 8011576:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011580:	d147      	bne.n	8011612 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011582:	2300      	movs	r3, #0
 8011584:	613b      	str	r3, [r7, #16]
 8011586:	4b25      	ldr	r3, [pc, #148]	; (801161c <HAL_PCD_MspInit+0xbc>)
 8011588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801158a:	4a24      	ldr	r2, [pc, #144]	; (801161c <HAL_PCD_MspInit+0xbc>)
 801158c:	f043 0301 	orr.w	r3, r3, #1
 8011590:	6313      	str	r3, [r2, #48]	; 0x30
 8011592:	4b22      	ldr	r3, [pc, #136]	; (801161c <HAL_PCD_MspInit+0xbc>)
 8011594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011596:	f003 0301 	and.w	r3, r3, #1
 801159a:	613b      	str	r3, [r7, #16]
 801159c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801159e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80115a4:	2300      	movs	r3, #0
 80115a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115a8:	2300      	movs	r3, #0
 80115aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80115ac:	f107 0314 	add.w	r3, r7, #20
 80115b0:	4619      	mov	r1, r3
 80115b2:	481b      	ldr	r0, [pc, #108]	; (8011620 <HAL_PCD_MspInit+0xc0>)
 80115b4:	f7f4 fd14 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80115b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80115bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115be:	2302      	movs	r3, #2
 80115c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115c2:	2300      	movs	r3, #0
 80115c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80115c6:	2300      	movs	r3, #0
 80115c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80115ca:	230a      	movs	r3, #10
 80115cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80115ce:	f107 0314 	add.w	r3, r7, #20
 80115d2:	4619      	mov	r1, r3
 80115d4:	4812      	ldr	r0, [pc, #72]	; (8011620 <HAL_PCD_MspInit+0xc0>)
 80115d6:	f7f4 fd03 	bl	8005fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80115da:	4b10      	ldr	r3, [pc, #64]	; (801161c <HAL_PCD_MspInit+0xbc>)
 80115dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115de:	4a0f      	ldr	r2, [pc, #60]	; (801161c <HAL_PCD_MspInit+0xbc>)
 80115e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115e4:	6353      	str	r3, [r2, #52]	; 0x34
 80115e6:	2300      	movs	r3, #0
 80115e8:	60fb      	str	r3, [r7, #12]
 80115ea:	4b0c      	ldr	r3, [pc, #48]	; (801161c <HAL_PCD_MspInit+0xbc>)
 80115ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115ee:	4a0b      	ldr	r2, [pc, #44]	; (801161c <HAL_PCD_MspInit+0xbc>)
 80115f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80115f4:	6453      	str	r3, [r2, #68]	; 0x44
 80115f6:	4b09      	ldr	r3, [pc, #36]	; (801161c <HAL_PCD_MspInit+0xbc>)
 80115f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80115fe:	60fb      	str	r3, [r7, #12]
 8011600:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011602:	2200      	movs	r2, #0
 8011604:	2105      	movs	r1, #5
 8011606:	2043      	movs	r0, #67	; 0x43
 8011608:	f7f4 f852 	bl	80056b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801160c:	2043      	movs	r0, #67	; 0x43
 801160e:	f7f4 f86b 	bl	80056e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011612:	bf00      	nop
 8011614:	3728      	adds	r7, #40	; 0x28
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	40023800 	.word	0x40023800
 8011620:	40020000 	.word	0x40020000

08011624 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011638:	4619      	mov	r1, r3
 801163a:	4610      	mov	r0, r2
 801163c:	f7fb f9e0 	bl	800ca00 <USBD_LL_SetupStage>
}
 8011640:	bf00      	nop
 8011642:	3708      	adds	r7, #8
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	460b      	mov	r3, r1
 8011652:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801165a:	78fa      	ldrb	r2, [r7, #3]
 801165c:	6879      	ldr	r1, [r7, #4]
 801165e:	4613      	mov	r3, r2
 8011660:	00db      	lsls	r3, r3, #3
 8011662:	1a9b      	subs	r3, r3, r2
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	440b      	add	r3, r1
 8011668:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801166c:	681a      	ldr	r2, [r3, #0]
 801166e:	78fb      	ldrb	r3, [r7, #3]
 8011670:	4619      	mov	r1, r3
 8011672:	f7fb fa1a 	bl	800caaa <USBD_LL_DataOutStage>
}
 8011676:	bf00      	nop
 8011678:	3708      	adds	r7, #8
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}

0801167e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801167e:	b580      	push	{r7, lr}
 8011680:	b082      	sub	sp, #8
 8011682:	af00      	add	r7, sp, #0
 8011684:	6078      	str	r0, [r7, #4]
 8011686:	460b      	mov	r3, r1
 8011688:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011690:	78fa      	ldrb	r2, [r7, #3]
 8011692:	6879      	ldr	r1, [r7, #4]
 8011694:	4613      	mov	r3, r2
 8011696:	00db      	lsls	r3, r3, #3
 8011698:	1a9b      	subs	r3, r3, r2
 801169a:	009b      	lsls	r3, r3, #2
 801169c:	440b      	add	r3, r1
 801169e:	3348      	adds	r3, #72	; 0x48
 80116a0:	681a      	ldr	r2, [r3, #0]
 80116a2:	78fb      	ldrb	r3, [r7, #3]
 80116a4:	4619      	mov	r1, r3
 80116a6:	f7fb fa63 	bl	800cb70 <USBD_LL_DataInStage>
}
 80116aa:	bf00      	nop
 80116ac:	3708      	adds	r7, #8
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b082      	sub	sp, #8
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7fb fb77 	bl	800cdb4 <USBD_LL_SOF>
}
 80116c6:	bf00      	nop
 80116c8:	3708      	adds	r7, #8
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}

080116ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b084      	sub	sp, #16
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80116d6:	2301      	movs	r3, #1
 80116d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d102      	bne.n	80116e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80116e2:	2300      	movs	r3, #0
 80116e4:	73fb      	strb	r3, [r7, #15]
 80116e6:	e008      	b.n	80116fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	68db      	ldr	r3, [r3, #12]
 80116ec:	2b02      	cmp	r3, #2
 80116ee:	d102      	bne.n	80116f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80116f0:	2301      	movs	r3, #1
 80116f2:	73fb      	strb	r3, [r7, #15]
 80116f4:	e001      	b.n	80116fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80116f6:	f7f2 fc6f 	bl	8003fd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011700:	7bfa      	ldrb	r2, [r7, #15]
 8011702:	4611      	mov	r1, r2
 8011704:	4618      	mov	r0, r3
 8011706:	f7fb fb17 	bl	800cd38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011710:	4618      	mov	r0, r3
 8011712:	f7fb fac3 	bl	800cc9c <USBD_LL_Reset>
}
 8011716:	bf00      	nop
 8011718:	3710      	adds	r7, #16
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
	...

08011720 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b082      	sub	sp, #8
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801172e:	4618      	mov	r0, r3
 8011730:	f7fb fb12 	bl	800cd58 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	6812      	ldr	r2, [r2, #0]
 8011742:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011746:	f043 0301 	orr.w	r3, r3, #1
 801174a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6a1b      	ldr	r3, [r3, #32]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d005      	beq.n	8011760 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011754:	4b04      	ldr	r3, [pc, #16]	; (8011768 <HAL_PCD_SuspendCallback+0x48>)
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	4a03      	ldr	r2, [pc, #12]	; (8011768 <HAL_PCD_SuspendCallback+0x48>)
 801175a:	f043 0306 	orr.w	r3, r3, #6
 801175e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011760:	bf00      	nop
 8011762:	3708      	adds	r7, #8
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	e000ed00 	.word	0xe000ed00

0801176c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801177a:	4618      	mov	r0, r3
 801177c:	f7fb fb02 	bl	800cd84 <USBD_LL_Resume>
}
 8011780:	bf00      	nop
 8011782:	3708      	adds	r7, #8
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	460b      	mov	r3, r1
 8011792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801179a:	78fa      	ldrb	r2, [r7, #3]
 801179c:	4611      	mov	r1, r2
 801179e:	4618      	mov	r0, r3
 80117a0:	f7fb fb50 	bl	800ce44 <USBD_LL_IsoOUTIncomplete>
}
 80117a4:	bf00      	nop
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	460b      	mov	r3, r1
 80117b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80117be:	78fa      	ldrb	r2, [r7, #3]
 80117c0:	4611      	mov	r1, r2
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fb fb18 	bl	800cdf8 <USBD_LL_IsoINIncomplete>
}
 80117c8:	bf00      	nop
 80117ca:	3708      	adds	r7, #8
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}

080117d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80117de:	4618      	mov	r0, r3
 80117e0:	f7fb fb56 	bl	800ce90 <USBD_LL_DevConnected>
}
 80117e4:	bf00      	nop
 80117e6:	3708      	adds	r7, #8
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}

080117ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b082      	sub	sp, #8
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fb fb53 	bl	800cea6 <USBD_LL_DevDisconnected>
}
 8011800:	bf00      	nop
 8011802:	3708      	adds	r7, #8
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}

08011808 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d13c      	bne.n	8011892 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011818:	4a20      	ldr	r2, [pc, #128]	; (801189c <USBD_LL_Init+0x94>)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	4a1e      	ldr	r2, [pc, #120]	; (801189c <USBD_LL_Init+0x94>)
 8011824:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011828:	4b1c      	ldr	r3, [pc, #112]	; (801189c <USBD_LL_Init+0x94>)
 801182a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801182e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011830:	4b1a      	ldr	r3, [pc, #104]	; (801189c <USBD_LL_Init+0x94>)
 8011832:	2204      	movs	r2, #4
 8011834:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011836:	4b19      	ldr	r3, [pc, #100]	; (801189c <USBD_LL_Init+0x94>)
 8011838:	2202      	movs	r2, #2
 801183a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801183c:	4b17      	ldr	r3, [pc, #92]	; (801189c <USBD_LL_Init+0x94>)
 801183e:	2200      	movs	r2, #0
 8011840:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011842:	4b16      	ldr	r3, [pc, #88]	; (801189c <USBD_LL_Init+0x94>)
 8011844:	2202      	movs	r2, #2
 8011846:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011848:	4b14      	ldr	r3, [pc, #80]	; (801189c <USBD_LL_Init+0x94>)
 801184a:	2200      	movs	r2, #0
 801184c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801184e:	4b13      	ldr	r3, [pc, #76]	; (801189c <USBD_LL_Init+0x94>)
 8011850:	2200      	movs	r2, #0
 8011852:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011854:	4b11      	ldr	r3, [pc, #68]	; (801189c <USBD_LL_Init+0x94>)
 8011856:	2200      	movs	r2, #0
 8011858:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801185a:	4b10      	ldr	r3, [pc, #64]	; (801189c <USBD_LL_Init+0x94>)
 801185c:	2200      	movs	r2, #0
 801185e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011860:	4b0e      	ldr	r3, [pc, #56]	; (801189c <USBD_LL_Init+0x94>)
 8011862:	2200      	movs	r2, #0
 8011864:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011866:	480d      	ldr	r0, [pc, #52]	; (801189c <USBD_LL_Init+0x94>)
 8011868:	f7f5 ffe7 	bl	800783a <HAL_PCD_Init>
 801186c:	4603      	mov	r3, r0
 801186e:	2b00      	cmp	r3, #0
 8011870:	d001      	beq.n	8011876 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011872:	f7f2 fbb1 	bl	8003fd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011876:	2180      	movs	r1, #128	; 0x80
 8011878:	4808      	ldr	r0, [pc, #32]	; (801189c <USBD_LL_Init+0x94>)
 801187a:	f7f7 f944 	bl	8008b06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801187e:	2240      	movs	r2, #64	; 0x40
 8011880:	2100      	movs	r1, #0
 8011882:	4806      	ldr	r0, [pc, #24]	; (801189c <USBD_LL_Init+0x94>)
 8011884:	f7f7 f8f8 	bl	8008a78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011888:	2280      	movs	r2, #128	; 0x80
 801188a:	2101      	movs	r1, #1
 801188c:	4803      	ldr	r0, [pc, #12]	; (801189c <USBD_LL_Init+0x94>)
 801188e:	f7f7 f8f3 	bl	8008a78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011892:	2300      	movs	r3, #0
}
 8011894:	4618      	mov	r0, r3
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}
 801189c:	2000ed8c 	.word	0x2000ed8c

080118a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118a8:	2300      	movs	r3, #0
 80118aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118ac:	2300      	movs	r3, #0
 80118ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7f6 f8dc 	bl	8007a74 <HAL_PCD_Start>
 80118bc:	4603      	mov	r3, r0
 80118be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118c0:	7bfb      	ldrb	r3, [r7, #15]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f000 f942 	bl	8011b4c <USBD_Get_USB_Status>
 80118c8:	4603      	mov	r3, r0
 80118ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	3710      	adds	r7, #16
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}

080118d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80118d6:	b580      	push	{r7, lr}
 80118d8:	b084      	sub	sp, #16
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
 80118de:	4608      	mov	r0, r1
 80118e0:	4611      	mov	r1, r2
 80118e2:	461a      	mov	r2, r3
 80118e4:	4603      	mov	r3, r0
 80118e6:	70fb      	strb	r3, [r7, #3]
 80118e8:	460b      	mov	r3, r1
 80118ea:	70bb      	strb	r3, [r7, #2]
 80118ec:	4613      	mov	r3, r2
 80118ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118f0:	2300      	movs	r3, #0
 80118f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118f4:	2300      	movs	r3, #0
 80118f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80118fe:	78bb      	ldrb	r3, [r7, #2]
 8011900:	883a      	ldrh	r2, [r7, #0]
 8011902:	78f9      	ldrb	r1, [r7, #3]
 8011904:	f7f6 fcc0 	bl	8008288 <HAL_PCD_EP_Open>
 8011908:	4603      	mov	r3, r0
 801190a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801190c:	7bfb      	ldrb	r3, [r7, #15]
 801190e:	4618      	mov	r0, r3
 8011910:	f000 f91c 	bl	8011b4c <USBD_Get_USB_Status>
 8011914:	4603      	mov	r3, r0
 8011916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011918:	7bbb      	ldrb	r3, [r7, #14]
}
 801191a:	4618      	mov	r0, r3
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011922:	b580      	push	{r7, lr}
 8011924:	b084      	sub	sp, #16
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
 801192a:	460b      	mov	r3, r1
 801192c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801192e:	2300      	movs	r3, #0
 8011930:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011932:	2300      	movs	r3, #0
 8011934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801193c:	78fa      	ldrb	r2, [r7, #3]
 801193e:	4611      	mov	r1, r2
 8011940:	4618      	mov	r0, r3
 8011942:	f7f6 fd09 	bl	8008358 <HAL_PCD_EP_Close>
 8011946:	4603      	mov	r3, r0
 8011948:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801194a:	7bfb      	ldrb	r3, [r7, #15]
 801194c:	4618      	mov	r0, r3
 801194e:	f000 f8fd 	bl	8011b4c <USBD_Get_USB_Status>
 8011952:	4603      	mov	r3, r0
 8011954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011956:	7bbb      	ldrb	r3, [r7, #14]
}
 8011958:	4618      	mov	r0, r3
 801195a:	3710      	adds	r7, #16
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}

08011960 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b084      	sub	sp, #16
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	460b      	mov	r3, r1
 801196a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801196c:	2300      	movs	r3, #0
 801196e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011970:	2300      	movs	r3, #0
 8011972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801197a:	78fa      	ldrb	r2, [r7, #3]
 801197c:	4611      	mov	r1, r2
 801197e:	4618      	mov	r0, r3
 8011980:	f7f6 fde1 	bl	8008546 <HAL_PCD_EP_SetStall>
 8011984:	4603      	mov	r3, r0
 8011986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011988:	7bfb      	ldrb	r3, [r7, #15]
 801198a:	4618      	mov	r0, r3
 801198c:	f000 f8de 	bl	8011b4c <USBD_Get_USB_Status>
 8011990:	4603      	mov	r3, r0
 8011992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011994:	7bbb      	ldrb	r3, [r7, #14]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b084      	sub	sp, #16
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
 80119a6:	460b      	mov	r3, r1
 80119a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119aa:	2300      	movs	r3, #0
 80119ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119ae:	2300      	movs	r3, #0
 80119b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80119b8:	78fa      	ldrb	r2, [r7, #3]
 80119ba:	4611      	mov	r1, r2
 80119bc:	4618      	mov	r0, r3
 80119be:	f7f6 fe26 	bl	800860e <HAL_PCD_EP_ClrStall>
 80119c2:	4603      	mov	r3, r0
 80119c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119c6:	7bfb      	ldrb	r3, [r7, #15]
 80119c8:	4618      	mov	r0, r3
 80119ca:	f000 f8bf 	bl	8011b4c <USBD_Get_USB_Status>
 80119ce:	4603      	mov	r3, r0
 80119d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3710      	adds	r7, #16
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119dc:	b480      	push	{r7}
 80119de:	b085      	sub	sp, #20
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	460b      	mov	r3, r1
 80119e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80119ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80119f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	da0b      	bge.n	8011a10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80119f8:	78fb      	ldrb	r3, [r7, #3]
 80119fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80119fe:	68f9      	ldr	r1, [r7, #12]
 8011a00:	4613      	mov	r3, r2
 8011a02:	00db      	lsls	r3, r3, #3
 8011a04:	1a9b      	subs	r3, r3, r2
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	440b      	add	r3, r1
 8011a0a:	333e      	adds	r3, #62	; 0x3e
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	e00b      	b.n	8011a28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011a10:	78fb      	ldrb	r3, [r7, #3]
 8011a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a16:	68f9      	ldr	r1, [r7, #12]
 8011a18:	4613      	mov	r3, r2
 8011a1a:	00db      	lsls	r3, r3, #3
 8011a1c:	1a9b      	subs	r3, r3, r2
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	440b      	add	r3, r1
 8011a22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011a26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3714      	adds	r7, #20
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr

08011a34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a40:	2300      	movs	r3, #0
 8011a42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a44:	2300      	movs	r3, #0
 8011a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011a4e:	78fa      	ldrb	r2, [r7, #3]
 8011a50:	4611      	mov	r1, r2
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7f6 fbf3 	bl	800823e <HAL_PCD_SetAddress>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a5c:	7bfb      	ldrb	r3, [r7, #15]
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f000 f874 	bl	8011b4c <USBD_Get_USB_Status>
 8011a64:	4603      	mov	r3, r0
 8011a66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}

08011a72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011a72:	b580      	push	{r7, lr}
 8011a74:	b086      	sub	sp, #24
 8011a76:	af00      	add	r7, sp, #0
 8011a78:	60f8      	str	r0, [r7, #12]
 8011a7a:	607a      	str	r2, [r7, #4]
 8011a7c:	603b      	str	r3, [r7, #0]
 8011a7e:	460b      	mov	r3, r1
 8011a80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a82:	2300      	movs	r3, #0
 8011a84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a86:	2300      	movs	r3, #0
 8011a88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011a90:	7af9      	ldrb	r1, [r7, #11]
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	687a      	ldr	r2, [r7, #4]
 8011a96:	f7f6 fd0c 	bl	80084b2 <HAL_PCD_EP_Transmit>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a9e:	7dfb      	ldrb	r3, [r7, #23]
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f000 f853 	bl	8011b4c <USBD_Get_USB_Status>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011aaa:	7dbb      	ldrb	r3, [r7, #22]
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	3718      	adds	r7, #24
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}

08011ab4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	607a      	str	r2, [r7, #4]
 8011abe:	603b      	str	r3, [r7, #0]
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ad2:	7af9      	ldrb	r1, [r7, #11]
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	687a      	ldr	r2, [r7, #4]
 8011ad8:	f7f6 fc88 	bl	80083ec <HAL_PCD_EP_Receive>
 8011adc:	4603      	mov	r3, r0
 8011ade:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ae0:	7dfb      	ldrb	r3, [r7, #23]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f000 f832 	bl	8011b4c <USBD_Get_USB_Status>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011aec:	7dbb      	ldrb	r3, [r7, #22]
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3718      	adds	r7, #24
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}

08011af6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011af6:	b580      	push	{r7, lr}
 8011af8:	b082      	sub	sp, #8
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	6078      	str	r0, [r7, #4]
 8011afe:	460b      	mov	r3, r1
 8011b00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b08:	78fa      	ldrb	r2, [r7, #3]
 8011b0a:	4611      	mov	r1, r2
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7f6 fcb8 	bl	8008482 <HAL_PCD_EP_GetRxCount>
 8011b12:	4603      	mov	r3, r0
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	3708      	adds	r7, #8
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}

08011b1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b083      	sub	sp, #12
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011b24:	4b03      	ldr	r3, [pc, #12]	; (8011b34 <USBD_static_malloc+0x18>)
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	370c      	adds	r7, #12
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop
 8011b34:	20007414 	.word	0x20007414

08011b38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]

}
 8011b40:	bf00      	nop
 8011b42:	370c      	adds	r7, #12
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr

08011b4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b085      	sub	sp, #20
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	4603      	mov	r3, r0
 8011b54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b56:	2300      	movs	r3, #0
 8011b58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011b5a:	79fb      	ldrb	r3, [r7, #7]
 8011b5c:	2b03      	cmp	r3, #3
 8011b5e:	d817      	bhi.n	8011b90 <USBD_Get_USB_Status+0x44>
 8011b60:	a201      	add	r2, pc, #4	; (adr r2, 8011b68 <USBD_Get_USB_Status+0x1c>)
 8011b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b66:	bf00      	nop
 8011b68:	08011b79 	.word	0x08011b79
 8011b6c:	08011b7f 	.word	0x08011b7f
 8011b70:	08011b85 	.word	0x08011b85
 8011b74:	08011b8b 	.word	0x08011b8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8011b7c:	e00b      	b.n	8011b96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011b7e:	2303      	movs	r3, #3
 8011b80:	73fb      	strb	r3, [r7, #15]
    break;
 8011b82:	e008      	b.n	8011b96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011b84:	2301      	movs	r3, #1
 8011b86:	73fb      	strb	r3, [r7, #15]
    break;
 8011b88:	e005      	b.n	8011b96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011b8a:	2303      	movs	r3, #3
 8011b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8011b8e:	e002      	b.n	8011b96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011b90:	2303      	movs	r3, #3
 8011b92:	73fb      	strb	r3, [r7, #15]
    break;
 8011b94:	bf00      	nop
  }
  return usb_status;
 8011b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3714      	adds	r7, #20
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba2:	4770      	bx	lr

08011ba4 <__errno>:
 8011ba4:	4b01      	ldr	r3, [pc, #4]	; (8011bac <__errno+0x8>)
 8011ba6:	6818      	ldr	r0, [r3, #0]
 8011ba8:	4770      	bx	lr
 8011baa:	bf00      	nop
 8011bac:	200001b0 	.word	0x200001b0

08011bb0 <std>:
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	b510      	push	{r4, lr}
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8011bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011bbe:	6083      	str	r3, [r0, #8]
 8011bc0:	8181      	strh	r1, [r0, #12]
 8011bc2:	6643      	str	r3, [r0, #100]	; 0x64
 8011bc4:	81c2      	strh	r2, [r0, #14]
 8011bc6:	6183      	str	r3, [r0, #24]
 8011bc8:	4619      	mov	r1, r3
 8011bca:	2208      	movs	r2, #8
 8011bcc:	305c      	adds	r0, #92	; 0x5c
 8011bce:	f000 f934 	bl	8011e3a <memset>
 8011bd2:	4b05      	ldr	r3, [pc, #20]	; (8011be8 <std+0x38>)
 8011bd4:	6263      	str	r3, [r4, #36]	; 0x24
 8011bd6:	4b05      	ldr	r3, [pc, #20]	; (8011bec <std+0x3c>)
 8011bd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8011bda:	4b05      	ldr	r3, [pc, #20]	; (8011bf0 <std+0x40>)
 8011bdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011bde:	4b05      	ldr	r3, [pc, #20]	; (8011bf4 <std+0x44>)
 8011be0:	6224      	str	r4, [r4, #32]
 8011be2:	6323      	str	r3, [r4, #48]	; 0x30
 8011be4:	bd10      	pop	{r4, pc}
 8011be6:	bf00      	nop
 8011be8:	08012909 	.word	0x08012909
 8011bec:	0801292b 	.word	0x0801292b
 8011bf0:	08012963 	.word	0x08012963
 8011bf4:	08012987 	.word	0x08012987

08011bf8 <_cleanup_r>:
 8011bf8:	4901      	ldr	r1, [pc, #4]	; (8011c00 <_cleanup_r+0x8>)
 8011bfa:	f000 b8af 	b.w	8011d5c <_fwalk_reent>
 8011bfe:	bf00      	nop
 8011c00:	08013885 	.word	0x08013885

08011c04 <__sfmoreglue>:
 8011c04:	b570      	push	{r4, r5, r6, lr}
 8011c06:	1e4a      	subs	r2, r1, #1
 8011c08:	2568      	movs	r5, #104	; 0x68
 8011c0a:	4355      	muls	r5, r2
 8011c0c:	460e      	mov	r6, r1
 8011c0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c12:	f000 f91b 	bl	8011e4c <_malloc_r>
 8011c16:	4604      	mov	r4, r0
 8011c18:	b140      	cbz	r0, 8011c2c <__sfmoreglue+0x28>
 8011c1a:	2100      	movs	r1, #0
 8011c1c:	e9c0 1600 	strd	r1, r6, [r0]
 8011c20:	300c      	adds	r0, #12
 8011c22:	60a0      	str	r0, [r4, #8]
 8011c24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011c28:	f000 f907 	bl	8011e3a <memset>
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	bd70      	pop	{r4, r5, r6, pc}

08011c30 <__sfp_lock_acquire>:
 8011c30:	4801      	ldr	r0, [pc, #4]	; (8011c38 <__sfp_lock_acquire+0x8>)
 8011c32:	f000 b8f2 	b.w	8011e1a <__retarget_lock_acquire_recursive>
 8011c36:	bf00      	nop
 8011c38:	2000f19c 	.word	0x2000f19c

08011c3c <__sfp_lock_release>:
 8011c3c:	4801      	ldr	r0, [pc, #4]	; (8011c44 <__sfp_lock_release+0x8>)
 8011c3e:	f000 b8ed 	b.w	8011e1c <__retarget_lock_release_recursive>
 8011c42:	bf00      	nop
 8011c44:	2000f19c 	.word	0x2000f19c

08011c48 <__sinit_lock_acquire>:
 8011c48:	4801      	ldr	r0, [pc, #4]	; (8011c50 <__sinit_lock_acquire+0x8>)
 8011c4a:	f000 b8e6 	b.w	8011e1a <__retarget_lock_acquire_recursive>
 8011c4e:	bf00      	nop
 8011c50:	2000f197 	.word	0x2000f197

08011c54 <__sinit_lock_release>:
 8011c54:	4801      	ldr	r0, [pc, #4]	; (8011c5c <__sinit_lock_release+0x8>)
 8011c56:	f000 b8e1 	b.w	8011e1c <__retarget_lock_release_recursive>
 8011c5a:	bf00      	nop
 8011c5c:	2000f197 	.word	0x2000f197

08011c60 <__sinit>:
 8011c60:	b510      	push	{r4, lr}
 8011c62:	4604      	mov	r4, r0
 8011c64:	f7ff fff0 	bl	8011c48 <__sinit_lock_acquire>
 8011c68:	69a3      	ldr	r3, [r4, #24]
 8011c6a:	b11b      	cbz	r3, 8011c74 <__sinit+0x14>
 8011c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c70:	f7ff bff0 	b.w	8011c54 <__sinit_lock_release>
 8011c74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c78:	6523      	str	r3, [r4, #80]	; 0x50
 8011c7a:	4b13      	ldr	r3, [pc, #76]	; (8011cc8 <__sinit+0x68>)
 8011c7c:	4a13      	ldr	r2, [pc, #76]	; (8011ccc <__sinit+0x6c>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c82:	42a3      	cmp	r3, r4
 8011c84:	bf04      	itt	eq
 8011c86:	2301      	moveq	r3, #1
 8011c88:	61a3      	streq	r3, [r4, #24]
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	f000 f820 	bl	8011cd0 <__sfp>
 8011c90:	6060      	str	r0, [r4, #4]
 8011c92:	4620      	mov	r0, r4
 8011c94:	f000 f81c 	bl	8011cd0 <__sfp>
 8011c98:	60a0      	str	r0, [r4, #8]
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f000 f818 	bl	8011cd0 <__sfp>
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	60e0      	str	r0, [r4, #12]
 8011ca4:	2104      	movs	r1, #4
 8011ca6:	6860      	ldr	r0, [r4, #4]
 8011ca8:	f7ff ff82 	bl	8011bb0 <std>
 8011cac:	68a0      	ldr	r0, [r4, #8]
 8011cae:	2201      	movs	r2, #1
 8011cb0:	2109      	movs	r1, #9
 8011cb2:	f7ff ff7d 	bl	8011bb0 <std>
 8011cb6:	68e0      	ldr	r0, [r4, #12]
 8011cb8:	2202      	movs	r2, #2
 8011cba:	2112      	movs	r1, #18
 8011cbc:	f7ff ff78 	bl	8011bb0 <std>
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	61a3      	str	r3, [r4, #24]
 8011cc4:	e7d2      	b.n	8011c6c <__sinit+0xc>
 8011cc6:	bf00      	nop
 8011cc8:	0801b0fc 	.word	0x0801b0fc
 8011ccc:	08011bf9 	.word	0x08011bf9

08011cd0 <__sfp>:
 8011cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd2:	4607      	mov	r7, r0
 8011cd4:	f7ff ffac 	bl	8011c30 <__sfp_lock_acquire>
 8011cd8:	4b1e      	ldr	r3, [pc, #120]	; (8011d54 <__sfp+0x84>)
 8011cda:	681e      	ldr	r6, [r3, #0]
 8011cdc:	69b3      	ldr	r3, [r6, #24]
 8011cde:	b913      	cbnz	r3, 8011ce6 <__sfp+0x16>
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f7ff ffbd 	bl	8011c60 <__sinit>
 8011ce6:	3648      	adds	r6, #72	; 0x48
 8011ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011cec:	3b01      	subs	r3, #1
 8011cee:	d503      	bpl.n	8011cf8 <__sfp+0x28>
 8011cf0:	6833      	ldr	r3, [r6, #0]
 8011cf2:	b30b      	cbz	r3, 8011d38 <__sfp+0x68>
 8011cf4:	6836      	ldr	r6, [r6, #0]
 8011cf6:	e7f7      	b.n	8011ce8 <__sfp+0x18>
 8011cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011cfc:	b9d5      	cbnz	r5, 8011d34 <__sfp+0x64>
 8011cfe:	4b16      	ldr	r3, [pc, #88]	; (8011d58 <__sfp+0x88>)
 8011d00:	60e3      	str	r3, [r4, #12]
 8011d02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d06:	6665      	str	r5, [r4, #100]	; 0x64
 8011d08:	f000 f886 	bl	8011e18 <__retarget_lock_init_recursive>
 8011d0c:	f7ff ff96 	bl	8011c3c <__sfp_lock_release>
 8011d10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011d14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011d18:	6025      	str	r5, [r4, #0]
 8011d1a:	61a5      	str	r5, [r4, #24]
 8011d1c:	2208      	movs	r2, #8
 8011d1e:	4629      	mov	r1, r5
 8011d20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011d24:	f000 f889 	bl	8011e3a <memset>
 8011d28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011d2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011d30:	4620      	mov	r0, r4
 8011d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d34:	3468      	adds	r4, #104	; 0x68
 8011d36:	e7d9      	b.n	8011cec <__sfp+0x1c>
 8011d38:	2104      	movs	r1, #4
 8011d3a:	4638      	mov	r0, r7
 8011d3c:	f7ff ff62 	bl	8011c04 <__sfmoreglue>
 8011d40:	4604      	mov	r4, r0
 8011d42:	6030      	str	r0, [r6, #0]
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d1d5      	bne.n	8011cf4 <__sfp+0x24>
 8011d48:	f7ff ff78 	bl	8011c3c <__sfp_lock_release>
 8011d4c:	230c      	movs	r3, #12
 8011d4e:	603b      	str	r3, [r7, #0]
 8011d50:	e7ee      	b.n	8011d30 <__sfp+0x60>
 8011d52:	bf00      	nop
 8011d54:	0801b0fc 	.word	0x0801b0fc
 8011d58:	ffff0001 	.word	0xffff0001

08011d5c <_fwalk_reent>:
 8011d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d60:	4606      	mov	r6, r0
 8011d62:	4688      	mov	r8, r1
 8011d64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d68:	2700      	movs	r7, #0
 8011d6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d6e:	f1b9 0901 	subs.w	r9, r9, #1
 8011d72:	d505      	bpl.n	8011d80 <_fwalk_reent+0x24>
 8011d74:	6824      	ldr	r4, [r4, #0]
 8011d76:	2c00      	cmp	r4, #0
 8011d78:	d1f7      	bne.n	8011d6a <_fwalk_reent+0xe>
 8011d7a:	4638      	mov	r0, r7
 8011d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d80:	89ab      	ldrh	r3, [r5, #12]
 8011d82:	2b01      	cmp	r3, #1
 8011d84:	d907      	bls.n	8011d96 <_fwalk_reent+0x3a>
 8011d86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	d003      	beq.n	8011d96 <_fwalk_reent+0x3a>
 8011d8e:	4629      	mov	r1, r5
 8011d90:	4630      	mov	r0, r6
 8011d92:	47c0      	blx	r8
 8011d94:	4307      	orrs	r7, r0
 8011d96:	3568      	adds	r5, #104	; 0x68
 8011d98:	e7e9      	b.n	8011d6e <_fwalk_reent+0x12>
	...

08011d9c <__libc_init_array>:
 8011d9c:	b570      	push	{r4, r5, r6, lr}
 8011d9e:	4d0d      	ldr	r5, [pc, #52]	; (8011dd4 <__libc_init_array+0x38>)
 8011da0:	4c0d      	ldr	r4, [pc, #52]	; (8011dd8 <__libc_init_array+0x3c>)
 8011da2:	1b64      	subs	r4, r4, r5
 8011da4:	10a4      	asrs	r4, r4, #2
 8011da6:	2600      	movs	r6, #0
 8011da8:	42a6      	cmp	r6, r4
 8011daa:	d109      	bne.n	8011dc0 <__libc_init_array+0x24>
 8011dac:	4d0b      	ldr	r5, [pc, #44]	; (8011ddc <__libc_init_array+0x40>)
 8011dae:	4c0c      	ldr	r4, [pc, #48]	; (8011de0 <__libc_init_array+0x44>)
 8011db0:	f002 fe9e 	bl	8014af0 <_init>
 8011db4:	1b64      	subs	r4, r4, r5
 8011db6:	10a4      	asrs	r4, r4, #2
 8011db8:	2600      	movs	r6, #0
 8011dba:	42a6      	cmp	r6, r4
 8011dbc:	d105      	bne.n	8011dca <__libc_init_array+0x2e>
 8011dbe:	bd70      	pop	{r4, r5, r6, pc}
 8011dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dc4:	4798      	blx	r3
 8011dc6:	3601      	adds	r6, #1
 8011dc8:	e7ee      	b.n	8011da8 <__libc_init_array+0xc>
 8011dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dce:	4798      	blx	r3
 8011dd0:	3601      	adds	r6, #1
 8011dd2:	e7f2      	b.n	8011dba <__libc_init_array+0x1e>
 8011dd4:	0801b4ac 	.word	0x0801b4ac
 8011dd8:	0801b4ac 	.word	0x0801b4ac
 8011ddc:	0801b4ac 	.word	0x0801b4ac
 8011de0:	0801b4b0 	.word	0x0801b4b0

08011de4 <__itoa>:
 8011de4:	1e93      	subs	r3, r2, #2
 8011de6:	2b22      	cmp	r3, #34	; 0x22
 8011de8:	b510      	push	{r4, lr}
 8011dea:	460c      	mov	r4, r1
 8011dec:	d904      	bls.n	8011df8 <__itoa+0x14>
 8011dee:	2300      	movs	r3, #0
 8011df0:	700b      	strb	r3, [r1, #0]
 8011df2:	461c      	mov	r4, r3
 8011df4:	4620      	mov	r0, r4
 8011df6:	bd10      	pop	{r4, pc}
 8011df8:	2a0a      	cmp	r2, #10
 8011dfa:	d109      	bne.n	8011e10 <__itoa+0x2c>
 8011dfc:	2800      	cmp	r0, #0
 8011dfe:	da07      	bge.n	8011e10 <__itoa+0x2c>
 8011e00:	232d      	movs	r3, #45	; 0x2d
 8011e02:	700b      	strb	r3, [r1, #0]
 8011e04:	4240      	negs	r0, r0
 8011e06:	2101      	movs	r1, #1
 8011e08:	4421      	add	r1, r4
 8011e0a:	f000 fdd7 	bl	80129bc <__utoa>
 8011e0e:	e7f1      	b.n	8011df4 <__itoa+0x10>
 8011e10:	2100      	movs	r1, #0
 8011e12:	e7f9      	b.n	8011e08 <__itoa+0x24>

08011e14 <itoa>:
 8011e14:	f7ff bfe6 	b.w	8011de4 <__itoa>

08011e18 <__retarget_lock_init_recursive>:
 8011e18:	4770      	bx	lr

08011e1a <__retarget_lock_acquire_recursive>:
 8011e1a:	4770      	bx	lr

08011e1c <__retarget_lock_release_recursive>:
 8011e1c:	4770      	bx	lr

08011e1e <memcpy>:
 8011e1e:	440a      	add	r2, r1
 8011e20:	4291      	cmp	r1, r2
 8011e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011e26:	d100      	bne.n	8011e2a <memcpy+0xc>
 8011e28:	4770      	bx	lr
 8011e2a:	b510      	push	{r4, lr}
 8011e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e34:	4291      	cmp	r1, r2
 8011e36:	d1f9      	bne.n	8011e2c <memcpy+0xe>
 8011e38:	bd10      	pop	{r4, pc}

08011e3a <memset>:
 8011e3a:	4402      	add	r2, r0
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d100      	bne.n	8011e44 <memset+0xa>
 8011e42:	4770      	bx	lr
 8011e44:	f803 1b01 	strb.w	r1, [r3], #1
 8011e48:	e7f9      	b.n	8011e3e <memset+0x4>
	...

08011e4c <_malloc_r>:
 8011e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e4e:	1ccd      	adds	r5, r1, #3
 8011e50:	f025 0503 	bic.w	r5, r5, #3
 8011e54:	3508      	adds	r5, #8
 8011e56:	2d0c      	cmp	r5, #12
 8011e58:	bf38      	it	cc
 8011e5a:	250c      	movcc	r5, #12
 8011e5c:	2d00      	cmp	r5, #0
 8011e5e:	4606      	mov	r6, r0
 8011e60:	db01      	blt.n	8011e66 <_malloc_r+0x1a>
 8011e62:	42a9      	cmp	r1, r5
 8011e64:	d903      	bls.n	8011e6e <_malloc_r+0x22>
 8011e66:	230c      	movs	r3, #12
 8011e68:	6033      	str	r3, [r6, #0]
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e6e:	f001 fd63 	bl	8013938 <__malloc_lock>
 8011e72:	4921      	ldr	r1, [pc, #132]	; (8011ef8 <_malloc_r+0xac>)
 8011e74:	680a      	ldr	r2, [r1, #0]
 8011e76:	4614      	mov	r4, r2
 8011e78:	b99c      	cbnz	r4, 8011ea2 <_malloc_r+0x56>
 8011e7a:	4f20      	ldr	r7, [pc, #128]	; (8011efc <_malloc_r+0xb0>)
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	b923      	cbnz	r3, 8011e8a <_malloc_r+0x3e>
 8011e80:	4621      	mov	r1, r4
 8011e82:	4630      	mov	r0, r6
 8011e84:	f000 fd10 	bl	80128a8 <_sbrk_r>
 8011e88:	6038      	str	r0, [r7, #0]
 8011e8a:	4629      	mov	r1, r5
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	f000 fd0b 	bl	80128a8 <_sbrk_r>
 8011e92:	1c43      	adds	r3, r0, #1
 8011e94:	d123      	bne.n	8011ede <_malloc_r+0x92>
 8011e96:	230c      	movs	r3, #12
 8011e98:	6033      	str	r3, [r6, #0]
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	f001 fd52 	bl	8013944 <__malloc_unlock>
 8011ea0:	e7e3      	b.n	8011e6a <_malloc_r+0x1e>
 8011ea2:	6823      	ldr	r3, [r4, #0]
 8011ea4:	1b5b      	subs	r3, r3, r5
 8011ea6:	d417      	bmi.n	8011ed8 <_malloc_r+0x8c>
 8011ea8:	2b0b      	cmp	r3, #11
 8011eaa:	d903      	bls.n	8011eb4 <_malloc_r+0x68>
 8011eac:	6023      	str	r3, [r4, #0]
 8011eae:	441c      	add	r4, r3
 8011eb0:	6025      	str	r5, [r4, #0]
 8011eb2:	e004      	b.n	8011ebe <_malloc_r+0x72>
 8011eb4:	6863      	ldr	r3, [r4, #4]
 8011eb6:	42a2      	cmp	r2, r4
 8011eb8:	bf0c      	ite	eq
 8011eba:	600b      	streq	r3, [r1, #0]
 8011ebc:	6053      	strne	r3, [r2, #4]
 8011ebe:	4630      	mov	r0, r6
 8011ec0:	f001 fd40 	bl	8013944 <__malloc_unlock>
 8011ec4:	f104 000b 	add.w	r0, r4, #11
 8011ec8:	1d23      	adds	r3, r4, #4
 8011eca:	f020 0007 	bic.w	r0, r0, #7
 8011ece:	1ac2      	subs	r2, r0, r3
 8011ed0:	d0cc      	beq.n	8011e6c <_malloc_r+0x20>
 8011ed2:	1a1b      	subs	r3, r3, r0
 8011ed4:	50a3      	str	r3, [r4, r2]
 8011ed6:	e7c9      	b.n	8011e6c <_malloc_r+0x20>
 8011ed8:	4622      	mov	r2, r4
 8011eda:	6864      	ldr	r4, [r4, #4]
 8011edc:	e7cc      	b.n	8011e78 <_malloc_r+0x2c>
 8011ede:	1cc4      	adds	r4, r0, #3
 8011ee0:	f024 0403 	bic.w	r4, r4, #3
 8011ee4:	42a0      	cmp	r0, r4
 8011ee6:	d0e3      	beq.n	8011eb0 <_malloc_r+0x64>
 8011ee8:	1a21      	subs	r1, r4, r0
 8011eea:	4630      	mov	r0, r6
 8011eec:	f000 fcdc 	bl	80128a8 <_sbrk_r>
 8011ef0:	3001      	adds	r0, #1
 8011ef2:	d1dd      	bne.n	8011eb0 <_malloc_r+0x64>
 8011ef4:	e7cf      	b.n	8011e96 <_malloc_r+0x4a>
 8011ef6:	bf00      	nop
 8011ef8:	20007634 	.word	0x20007634
 8011efc:	20007638 	.word	0x20007638

08011f00 <__cvt>:
 8011f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f04:	ec55 4b10 	vmov	r4, r5, d0
 8011f08:	2d00      	cmp	r5, #0
 8011f0a:	460e      	mov	r6, r1
 8011f0c:	4619      	mov	r1, r3
 8011f0e:	462b      	mov	r3, r5
 8011f10:	bfbb      	ittet	lt
 8011f12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011f16:	461d      	movlt	r5, r3
 8011f18:	2300      	movge	r3, #0
 8011f1a:	232d      	movlt	r3, #45	; 0x2d
 8011f1c:	700b      	strb	r3, [r1, #0]
 8011f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011f24:	4691      	mov	r9, r2
 8011f26:	f023 0820 	bic.w	r8, r3, #32
 8011f2a:	bfbc      	itt	lt
 8011f2c:	4622      	movlt	r2, r4
 8011f2e:	4614      	movlt	r4, r2
 8011f30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f34:	d005      	beq.n	8011f42 <__cvt+0x42>
 8011f36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011f3a:	d100      	bne.n	8011f3e <__cvt+0x3e>
 8011f3c:	3601      	adds	r6, #1
 8011f3e:	2102      	movs	r1, #2
 8011f40:	e000      	b.n	8011f44 <__cvt+0x44>
 8011f42:	2103      	movs	r1, #3
 8011f44:	ab03      	add	r3, sp, #12
 8011f46:	9301      	str	r3, [sp, #4]
 8011f48:	ab02      	add	r3, sp, #8
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	ec45 4b10 	vmov	d0, r4, r5
 8011f50:	4653      	mov	r3, sl
 8011f52:	4632      	mov	r2, r6
 8011f54:	f000 fe24 	bl	8012ba0 <_dtoa_r>
 8011f58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011f5c:	4607      	mov	r7, r0
 8011f5e:	d102      	bne.n	8011f66 <__cvt+0x66>
 8011f60:	f019 0f01 	tst.w	r9, #1
 8011f64:	d022      	beq.n	8011fac <__cvt+0xac>
 8011f66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f6a:	eb07 0906 	add.w	r9, r7, r6
 8011f6e:	d110      	bne.n	8011f92 <__cvt+0x92>
 8011f70:	783b      	ldrb	r3, [r7, #0]
 8011f72:	2b30      	cmp	r3, #48	; 0x30
 8011f74:	d10a      	bne.n	8011f8c <__cvt+0x8c>
 8011f76:	2200      	movs	r2, #0
 8011f78:	2300      	movs	r3, #0
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	4629      	mov	r1, r5
 8011f7e:	f7ee fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f82:	b918      	cbnz	r0, 8011f8c <__cvt+0x8c>
 8011f84:	f1c6 0601 	rsb	r6, r6, #1
 8011f88:	f8ca 6000 	str.w	r6, [sl]
 8011f8c:	f8da 3000 	ldr.w	r3, [sl]
 8011f90:	4499      	add	r9, r3
 8011f92:	2200      	movs	r2, #0
 8011f94:	2300      	movs	r3, #0
 8011f96:	4620      	mov	r0, r4
 8011f98:	4629      	mov	r1, r5
 8011f9a:	f7ee fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f9e:	b108      	cbz	r0, 8011fa4 <__cvt+0xa4>
 8011fa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8011fa4:	2230      	movs	r2, #48	; 0x30
 8011fa6:	9b03      	ldr	r3, [sp, #12]
 8011fa8:	454b      	cmp	r3, r9
 8011faa:	d307      	bcc.n	8011fbc <__cvt+0xbc>
 8011fac:	9b03      	ldr	r3, [sp, #12]
 8011fae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011fb0:	1bdb      	subs	r3, r3, r7
 8011fb2:	4638      	mov	r0, r7
 8011fb4:	6013      	str	r3, [r2, #0]
 8011fb6:	b004      	add	sp, #16
 8011fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fbc:	1c59      	adds	r1, r3, #1
 8011fbe:	9103      	str	r1, [sp, #12]
 8011fc0:	701a      	strb	r2, [r3, #0]
 8011fc2:	e7f0      	b.n	8011fa6 <__cvt+0xa6>

08011fc4 <__exponent>:
 8011fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2900      	cmp	r1, #0
 8011fca:	bfb8      	it	lt
 8011fcc:	4249      	neglt	r1, r1
 8011fce:	f803 2b02 	strb.w	r2, [r3], #2
 8011fd2:	bfb4      	ite	lt
 8011fd4:	222d      	movlt	r2, #45	; 0x2d
 8011fd6:	222b      	movge	r2, #43	; 0x2b
 8011fd8:	2909      	cmp	r1, #9
 8011fda:	7042      	strb	r2, [r0, #1]
 8011fdc:	dd2a      	ble.n	8012034 <__exponent+0x70>
 8011fde:	f10d 0407 	add.w	r4, sp, #7
 8011fe2:	46a4      	mov	ip, r4
 8011fe4:	270a      	movs	r7, #10
 8011fe6:	46a6      	mov	lr, r4
 8011fe8:	460a      	mov	r2, r1
 8011fea:	fb91 f6f7 	sdiv	r6, r1, r7
 8011fee:	fb07 1516 	mls	r5, r7, r6, r1
 8011ff2:	3530      	adds	r5, #48	; 0x30
 8011ff4:	2a63      	cmp	r2, #99	; 0x63
 8011ff6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011ffa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011ffe:	4631      	mov	r1, r6
 8012000:	dcf1      	bgt.n	8011fe6 <__exponent+0x22>
 8012002:	3130      	adds	r1, #48	; 0x30
 8012004:	f1ae 0502 	sub.w	r5, lr, #2
 8012008:	f804 1c01 	strb.w	r1, [r4, #-1]
 801200c:	1c44      	adds	r4, r0, #1
 801200e:	4629      	mov	r1, r5
 8012010:	4561      	cmp	r1, ip
 8012012:	d30a      	bcc.n	801202a <__exponent+0x66>
 8012014:	f10d 0209 	add.w	r2, sp, #9
 8012018:	eba2 020e 	sub.w	r2, r2, lr
 801201c:	4565      	cmp	r5, ip
 801201e:	bf88      	it	hi
 8012020:	2200      	movhi	r2, #0
 8012022:	4413      	add	r3, r2
 8012024:	1a18      	subs	r0, r3, r0
 8012026:	b003      	add	sp, #12
 8012028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801202a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801202e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012032:	e7ed      	b.n	8012010 <__exponent+0x4c>
 8012034:	2330      	movs	r3, #48	; 0x30
 8012036:	3130      	adds	r1, #48	; 0x30
 8012038:	7083      	strb	r3, [r0, #2]
 801203a:	70c1      	strb	r1, [r0, #3]
 801203c:	1d03      	adds	r3, r0, #4
 801203e:	e7f1      	b.n	8012024 <__exponent+0x60>

08012040 <_printf_float>:
 8012040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012044:	ed2d 8b02 	vpush	{d8}
 8012048:	b08d      	sub	sp, #52	; 0x34
 801204a:	460c      	mov	r4, r1
 801204c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012050:	4616      	mov	r6, r2
 8012052:	461f      	mov	r7, r3
 8012054:	4605      	mov	r5, r0
 8012056:	f001 fc51 	bl	80138fc <_localeconv_r>
 801205a:	f8d0 a000 	ldr.w	sl, [r0]
 801205e:	4650      	mov	r0, sl
 8012060:	f7ee f8b6 	bl	80001d0 <strlen>
 8012064:	2300      	movs	r3, #0
 8012066:	930a      	str	r3, [sp, #40]	; 0x28
 8012068:	6823      	ldr	r3, [r4, #0]
 801206a:	9305      	str	r3, [sp, #20]
 801206c:	f8d8 3000 	ldr.w	r3, [r8]
 8012070:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012074:	3307      	adds	r3, #7
 8012076:	f023 0307 	bic.w	r3, r3, #7
 801207a:	f103 0208 	add.w	r2, r3, #8
 801207e:	f8c8 2000 	str.w	r2, [r8]
 8012082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012086:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801208a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801208e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012092:	9307      	str	r3, [sp, #28]
 8012094:	f8cd 8018 	str.w	r8, [sp, #24]
 8012098:	ee08 0a10 	vmov	s16, r0
 801209c:	4b9f      	ldr	r3, [pc, #636]	; (801231c <_printf_float+0x2dc>)
 801209e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80120a6:	f7ee fd41 	bl	8000b2c <__aeabi_dcmpun>
 80120aa:	bb88      	cbnz	r0, 8012110 <_printf_float+0xd0>
 80120ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120b0:	4b9a      	ldr	r3, [pc, #616]	; (801231c <_printf_float+0x2dc>)
 80120b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80120b6:	f7ee fd1b 	bl	8000af0 <__aeabi_dcmple>
 80120ba:	bb48      	cbnz	r0, 8012110 <_printf_float+0xd0>
 80120bc:	2200      	movs	r2, #0
 80120be:	2300      	movs	r3, #0
 80120c0:	4640      	mov	r0, r8
 80120c2:	4649      	mov	r1, r9
 80120c4:	f7ee fd0a 	bl	8000adc <__aeabi_dcmplt>
 80120c8:	b110      	cbz	r0, 80120d0 <_printf_float+0x90>
 80120ca:	232d      	movs	r3, #45	; 0x2d
 80120cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120d0:	4b93      	ldr	r3, [pc, #588]	; (8012320 <_printf_float+0x2e0>)
 80120d2:	4894      	ldr	r0, [pc, #592]	; (8012324 <_printf_float+0x2e4>)
 80120d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80120d8:	bf94      	ite	ls
 80120da:	4698      	movls	r8, r3
 80120dc:	4680      	movhi	r8, r0
 80120de:	2303      	movs	r3, #3
 80120e0:	6123      	str	r3, [r4, #16]
 80120e2:	9b05      	ldr	r3, [sp, #20]
 80120e4:	f023 0204 	bic.w	r2, r3, #4
 80120e8:	6022      	str	r2, [r4, #0]
 80120ea:	f04f 0900 	mov.w	r9, #0
 80120ee:	9700      	str	r7, [sp, #0]
 80120f0:	4633      	mov	r3, r6
 80120f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80120f4:	4621      	mov	r1, r4
 80120f6:	4628      	mov	r0, r5
 80120f8:	f000 f9d8 	bl	80124ac <_printf_common>
 80120fc:	3001      	adds	r0, #1
 80120fe:	f040 8090 	bne.w	8012222 <_printf_float+0x1e2>
 8012102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012106:	b00d      	add	sp, #52	; 0x34
 8012108:	ecbd 8b02 	vpop	{d8}
 801210c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012110:	4642      	mov	r2, r8
 8012112:	464b      	mov	r3, r9
 8012114:	4640      	mov	r0, r8
 8012116:	4649      	mov	r1, r9
 8012118:	f7ee fd08 	bl	8000b2c <__aeabi_dcmpun>
 801211c:	b140      	cbz	r0, 8012130 <_printf_float+0xf0>
 801211e:	464b      	mov	r3, r9
 8012120:	2b00      	cmp	r3, #0
 8012122:	bfbc      	itt	lt
 8012124:	232d      	movlt	r3, #45	; 0x2d
 8012126:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801212a:	487f      	ldr	r0, [pc, #508]	; (8012328 <_printf_float+0x2e8>)
 801212c:	4b7f      	ldr	r3, [pc, #508]	; (801232c <_printf_float+0x2ec>)
 801212e:	e7d1      	b.n	80120d4 <_printf_float+0x94>
 8012130:	6863      	ldr	r3, [r4, #4]
 8012132:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012136:	9206      	str	r2, [sp, #24]
 8012138:	1c5a      	adds	r2, r3, #1
 801213a:	d13f      	bne.n	80121bc <_printf_float+0x17c>
 801213c:	2306      	movs	r3, #6
 801213e:	6063      	str	r3, [r4, #4]
 8012140:	9b05      	ldr	r3, [sp, #20]
 8012142:	6861      	ldr	r1, [r4, #4]
 8012144:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012148:	2300      	movs	r3, #0
 801214a:	9303      	str	r3, [sp, #12]
 801214c:	ab0a      	add	r3, sp, #40	; 0x28
 801214e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012152:	ab09      	add	r3, sp, #36	; 0x24
 8012154:	ec49 8b10 	vmov	d0, r8, r9
 8012158:	9300      	str	r3, [sp, #0]
 801215a:	6022      	str	r2, [r4, #0]
 801215c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012160:	4628      	mov	r0, r5
 8012162:	f7ff fecd 	bl	8011f00 <__cvt>
 8012166:	9b06      	ldr	r3, [sp, #24]
 8012168:	9909      	ldr	r1, [sp, #36]	; 0x24
 801216a:	2b47      	cmp	r3, #71	; 0x47
 801216c:	4680      	mov	r8, r0
 801216e:	d108      	bne.n	8012182 <_printf_float+0x142>
 8012170:	1cc8      	adds	r0, r1, #3
 8012172:	db02      	blt.n	801217a <_printf_float+0x13a>
 8012174:	6863      	ldr	r3, [r4, #4]
 8012176:	4299      	cmp	r1, r3
 8012178:	dd41      	ble.n	80121fe <_printf_float+0x1be>
 801217a:	f1ab 0b02 	sub.w	fp, fp, #2
 801217e:	fa5f fb8b 	uxtb.w	fp, fp
 8012182:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012186:	d820      	bhi.n	80121ca <_printf_float+0x18a>
 8012188:	3901      	subs	r1, #1
 801218a:	465a      	mov	r2, fp
 801218c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012190:	9109      	str	r1, [sp, #36]	; 0x24
 8012192:	f7ff ff17 	bl	8011fc4 <__exponent>
 8012196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012198:	1813      	adds	r3, r2, r0
 801219a:	2a01      	cmp	r2, #1
 801219c:	4681      	mov	r9, r0
 801219e:	6123      	str	r3, [r4, #16]
 80121a0:	dc02      	bgt.n	80121a8 <_printf_float+0x168>
 80121a2:	6822      	ldr	r2, [r4, #0]
 80121a4:	07d2      	lsls	r2, r2, #31
 80121a6:	d501      	bpl.n	80121ac <_printf_float+0x16c>
 80121a8:	3301      	adds	r3, #1
 80121aa:	6123      	str	r3, [r4, #16]
 80121ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d09c      	beq.n	80120ee <_printf_float+0xae>
 80121b4:	232d      	movs	r3, #45	; 0x2d
 80121b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121ba:	e798      	b.n	80120ee <_printf_float+0xae>
 80121bc:	9a06      	ldr	r2, [sp, #24]
 80121be:	2a47      	cmp	r2, #71	; 0x47
 80121c0:	d1be      	bne.n	8012140 <_printf_float+0x100>
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d1bc      	bne.n	8012140 <_printf_float+0x100>
 80121c6:	2301      	movs	r3, #1
 80121c8:	e7b9      	b.n	801213e <_printf_float+0xfe>
 80121ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80121ce:	d118      	bne.n	8012202 <_printf_float+0x1c2>
 80121d0:	2900      	cmp	r1, #0
 80121d2:	6863      	ldr	r3, [r4, #4]
 80121d4:	dd0b      	ble.n	80121ee <_printf_float+0x1ae>
 80121d6:	6121      	str	r1, [r4, #16]
 80121d8:	b913      	cbnz	r3, 80121e0 <_printf_float+0x1a0>
 80121da:	6822      	ldr	r2, [r4, #0]
 80121dc:	07d0      	lsls	r0, r2, #31
 80121de:	d502      	bpl.n	80121e6 <_printf_float+0x1a6>
 80121e0:	3301      	adds	r3, #1
 80121e2:	440b      	add	r3, r1
 80121e4:	6123      	str	r3, [r4, #16]
 80121e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80121e8:	f04f 0900 	mov.w	r9, #0
 80121ec:	e7de      	b.n	80121ac <_printf_float+0x16c>
 80121ee:	b913      	cbnz	r3, 80121f6 <_printf_float+0x1b6>
 80121f0:	6822      	ldr	r2, [r4, #0]
 80121f2:	07d2      	lsls	r2, r2, #31
 80121f4:	d501      	bpl.n	80121fa <_printf_float+0x1ba>
 80121f6:	3302      	adds	r3, #2
 80121f8:	e7f4      	b.n	80121e4 <_printf_float+0x1a4>
 80121fa:	2301      	movs	r3, #1
 80121fc:	e7f2      	b.n	80121e4 <_printf_float+0x1a4>
 80121fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012204:	4299      	cmp	r1, r3
 8012206:	db05      	blt.n	8012214 <_printf_float+0x1d4>
 8012208:	6823      	ldr	r3, [r4, #0]
 801220a:	6121      	str	r1, [r4, #16]
 801220c:	07d8      	lsls	r0, r3, #31
 801220e:	d5ea      	bpl.n	80121e6 <_printf_float+0x1a6>
 8012210:	1c4b      	adds	r3, r1, #1
 8012212:	e7e7      	b.n	80121e4 <_printf_float+0x1a4>
 8012214:	2900      	cmp	r1, #0
 8012216:	bfd4      	ite	le
 8012218:	f1c1 0202 	rsble	r2, r1, #2
 801221c:	2201      	movgt	r2, #1
 801221e:	4413      	add	r3, r2
 8012220:	e7e0      	b.n	80121e4 <_printf_float+0x1a4>
 8012222:	6823      	ldr	r3, [r4, #0]
 8012224:	055a      	lsls	r2, r3, #21
 8012226:	d407      	bmi.n	8012238 <_printf_float+0x1f8>
 8012228:	6923      	ldr	r3, [r4, #16]
 801222a:	4642      	mov	r2, r8
 801222c:	4631      	mov	r1, r6
 801222e:	4628      	mov	r0, r5
 8012230:	47b8      	blx	r7
 8012232:	3001      	adds	r0, #1
 8012234:	d12c      	bne.n	8012290 <_printf_float+0x250>
 8012236:	e764      	b.n	8012102 <_printf_float+0xc2>
 8012238:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801223c:	f240 80e0 	bls.w	8012400 <_printf_float+0x3c0>
 8012240:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012244:	2200      	movs	r2, #0
 8012246:	2300      	movs	r3, #0
 8012248:	f7ee fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 801224c:	2800      	cmp	r0, #0
 801224e:	d034      	beq.n	80122ba <_printf_float+0x27a>
 8012250:	4a37      	ldr	r2, [pc, #220]	; (8012330 <_printf_float+0x2f0>)
 8012252:	2301      	movs	r3, #1
 8012254:	4631      	mov	r1, r6
 8012256:	4628      	mov	r0, r5
 8012258:	47b8      	blx	r7
 801225a:	3001      	adds	r0, #1
 801225c:	f43f af51 	beq.w	8012102 <_printf_float+0xc2>
 8012260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012264:	429a      	cmp	r2, r3
 8012266:	db02      	blt.n	801226e <_printf_float+0x22e>
 8012268:	6823      	ldr	r3, [r4, #0]
 801226a:	07d8      	lsls	r0, r3, #31
 801226c:	d510      	bpl.n	8012290 <_printf_float+0x250>
 801226e:	ee18 3a10 	vmov	r3, s16
 8012272:	4652      	mov	r2, sl
 8012274:	4631      	mov	r1, r6
 8012276:	4628      	mov	r0, r5
 8012278:	47b8      	blx	r7
 801227a:	3001      	adds	r0, #1
 801227c:	f43f af41 	beq.w	8012102 <_printf_float+0xc2>
 8012280:	f04f 0800 	mov.w	r8, #0
 8012284:	f104 091a 	add.w	r9, r4, #26
 8012288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801228a:	3b01      	subs	r3, #1
 801228c:	4543      	cmp	r3, r8
 801228e:	dc09      	bgt.n	80122a4 <_printf_float+0x264>
 8012290:	6823      	ldr	r3, [r4, #0]
 8012292:	079b      	lsls	r3, r3, #30
 8012294:	f100 8105 	bmi.w	80124a2 <_printf_float+0x462>
 8012298:	68e0      	ldr	r0, [r4, #12]
 801229a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801229c:	4298      	cmp	r0, r3
 801229e:	bfb8      	it	lt
 80122a0:	4618      	movlt	r0, r3
 80122a2:	e730      	b.n	8012106 <_printf_float+0xc6>
 80122a4:	2301      	movs	r3, #1
 80122a6:	464a      	mov	r2, r9
 80122a8:	4631      	mov	r1, r6
 80122aa:	4628      	mov	r0, r5
 80122ac:	47b8      	blx	r7
 80122ae:	3001      	adds	r0, #1
 80122b0:	f43f af27 	beq.w	8012102 <_printf_float+0xc2>
 80122b4:	f108 0801 	add.w	r8, r8, #1
 80122b8:	e7e6      	b.n	8012288 <_printf_float+0x248>
 80122ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122bc:	2b00      	cmp	r3, #0
 80122be:	dc39      	bgt.n	8012334 <_printf_float+0x2f4>
 80122c0:	4a1b      	ldr	r2, [pc, #108]	; (8012330 <_printf_float+0x2f0>)
 80122c2:	2301      	movs	r3, #1
 80122c4:	4631      	mov	r1, r6
 80122c6:	4628      	mov	r0, r5
 80122c8:	47b8      	blx	r7
 80122ca:	3001      	adds	r0, #1
 80122cc:	f43f af19 	beq.w	8012102 <_printf_float+0xc2>
 80122d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80122d4:	4313      	orrs	r3, r2
 80122d6:	d102      	bne.n	80122de <_printf_float+0x29e>
 80122d8:	6823      	ldr	r3, [r4, #0]
 80122da:	07d9      	lsls	r1, r3, #31
 80122dc:	d5d8      	bpl.n	8012290 <_printf_float+0x250>
 80122de:	ee18 3a10 	vmov	r3, s16
 80122e2:	4652      	mov	r2, sl
 80122e4:	4631      	mov	r1, r6
 80122e6:	4628      	mov	r0, r5
 80122e8:	47b8      	blx	r7
 80122ea:	3001      	adds	r0, #1
 80122ec:	f43f af09 	beq.w	8012102 <_printf_float+0xc2>
 80122f0:	f04f 0900 	mov.w	r9, #0
 80122f4:	f104 0a1a 	add.w	sl, r4, #26
 80122f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122fa:	425b      	negs	r3, r3
 80122fc:	454b      	cmp	r3, r9
 80122fe:	dc01      	bgt.n	8012304 <_printf_float+0x2c4>
 8012300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012302:	e792      	b.n	801222a <_printf_float+0x1ea>
 8012304:	2301      	movs	r3, #1
 8012306:	4652      	mov	r2, sl
 8012308:	4631      	mov	r1, r6
 801230a:	4628      	mov	r0, r5
 801230c:	47b8      	blx	r7
 801230e:	3001      	adds	r0, #1
 8012310:	f43f aef7 	beq.w	8012102 <_printf_float+0xc2>
 8012314:	f109 0901 	add.w	r9, r9, #1
 8012318:	e7ee      	b.n	80122f8 <_printf_float+0x2b8>
 801231a:	bf00      	nop
 801231c:	7fefffff 	.word	0x7fefffff
 8012320:	0801b100 	.word	0x0801b100
 8012324:	0801b104 	.word	0x0801b104
 8012328:	0801b10c 	.word	0x0801b10c
 801232c:	0801b108 	.word	0x0801b108
 8012330:	0801b110 	.word	0x0801b110
 8012334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012338:	429a      	cmp	r2, r3
 801233a:	bfa8      	it	ge
 801233c:	461a      	movge	r2, r3
 801233e:	2a00      	cmp	r2, #0
 8012340:	4691      	mov	r9, r2
 8012342:	dc37      	bgt.n	80123b4 <_printf_float+0x374>
 8012344:	f04f 0b00 	mov.w	fp, #0
 8012348:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801234c:	f104 021a 	add.w	r2, r4, #26
 8012350:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012352:	9305      	str	r3, [sp, #20]
 8012354:	eba3 0309 	sub.w	r3, r3, r9
 8012358:	455b      	cmp	r3, fp
 801235a:	dc33      	bgt.n	80123c4 <_printf_float+0x384>
 801235c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012360:	429a      	cmp	r2, r3
 8012362:	db3b      	blt.n	80123dc <_printf_float+0x39c>
 8012364:	6823      	ldr	r3, [r4, #0]
 8012366:	07da      	lsls	r2, r3, #31
 8012368:	d438      	bmi.n	80123dc <_printf_float+0x39c>
 801236a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801236c:	9b05      	ldr	r3, [sp, #20]
 801236e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012370:	1ad3      	subs	r3, r2, r3
 8012372:	eba2 0901 	sub.w	r9, r2, r1
 8012376:	4599      	cmp	r9, r3
 8012378:	bfa8      	it	ge
 801237a:	4699      	movge	r9, r3
 801237c:	f1b9 0f00 	cmp.w	r9, #0
 8012380:	dc35      	bgt.n	80123ee <_printf_float+0x3ae>
 8012382:	f04f 0800 	mov.w	r8, #0
 8012386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801238a:	f104 0a1a 	add.w	sl, r4, #26
 801238e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012392:	1a9b      	subs	r3, r3, r2
 8012394:	eba3 0309 	sub.w	r3, r3, r9
 8012398:	4543      	cmp	r3, r8
 801239a:	f77f af79 	ble.w	8012290 <_printf_float+0x250>
 801239e:	2301      	movs	r3, #1
 80123a0:	4652      	mov	r2, sl
 80123a2:	4631      	mov	r1, r6
 80123a4:	4628      	mov	r0, r5
 80123a6:	47b8      	blx	r7
 80123a8:	3001      	adds	r0, #1
 80123aa:	f43f aeaa 	beq.w	8012102 <_printf_float+0xc2>
 80123ae:	f108 0801 	add.w	r8, r8, #1
 80123b2:	e7ec      	b.n	801238e <_printf_float+0x34e>
 80123b4:	4613      	mov	r3, r2
 80123b6:	4631      	mov	r1, r6
 80123b8:	4642      	mov	r2, r8
 80123ba:	4628      	mov	r0, r5
 80123bc:	47b8      	blx	r7
 80123be:	3001      	adds	r0, #1
 80123c0:	d1c0      	bne.n	8012344 <_printf_float+0x304>
 80123c2:	e69e      	b.n	8012102 <_printf_float+0xc2>
 80123c4:	2301      	movs	r3, #1
 80123c6:	4631      	mov	r1, r6
 80123c8:	4628      	mov	r0, r5
 80123ca:	9205      	str	r2, [sp, #20]
 80123cc:	47b8      	blx	r7
 80123ce:	3001      	adds	r0, #1
 80123d0:	f43f ae97 	beq.w	8012102 <_printf_float+0xc2>
 80123d4:	9a05      	ldr	r2, [sp, #20]
 80123d6:	f10b 0b01 	add.w	fp, fp, #1
 80123da:	e7b9      	b.n	8012350 <_printf_float+0x310>
 80123dc:	ee18 3a10 	vmov	r3, s16
 80123e0:	4652      	mov	r2, sl
 80123e2:	4631      	mov	r1, r6
 80123e4:	4628      	mov	r0, r5
 80123e6:	47b8      	blx	r7
 80123e8:	3001      	adds	r0, #1
 80123ea:	d1be      	bne.n	801236a <_printf_float+0x32a>
 80123ec:	e689      	b.n	8012102 <_printf_float+0xc2>
 80123ee:	9a05      	ldr	r2, [sp, #20]
 80123f0:	464b      	mov	r3, r9
 80123f2:	4442      	add	r2, r8
 80123f4:	4631      	mov	r1, r6
 80123f6:	4628      	mov	r0, r5
 80123f8:	47b8      	blx	r7
 80123fa:	3001      	adds	r0, #1
 80123fc:	d1c1      	bne.n	8012382 <_printf_float+0x342>
 80123fe:	e680      	b.n	8012102 <_printf_float+0xc2>
 8012400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012402:	2a01      	cmp	r2, #1
 8012404:	dc01      	bgt.n	801240a <_printf_float+0x3ca>
 8012406:	07db      	lsls	r3, r3, #31
 8012408:	d538      	bpl.n	801247c <_printf_float+0x43c>
 801240a:	2301      	movs	r3, #1
 801240c:	4642      	mov	r2, r8
 801240e:	4631      	mov	r1, r6
 8012410:	4628      	mov	r0, r5
 8012412:	47b8      	blx	r7
 8012414:	3001      	adds	r0, #1
 8012416:	f43f ae74 	beq.w	8012102 <_printf_float+0xc2>
 801241a:	ee18 3a10 	vmov	r3, s16
 801241e:	4652      	mov	r2, sl
 8012420:	4631      	mov	r1, r6
 8012422:	4628      	mov	r0, r5
 8012424:	47b8      	blx	r7
 8012426:	3001      	adds	r0, #1
 8012428:	f43f ae6b 	beq.w	8012102 <_printf_float+0xc2>
 801242c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012430:	2200      	movs	r2, #0
 8012432:	2300      	movs	r3, #0
 8012434:	f7ee fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 8012438:	b9d8      	cbnz	r0, 8012472 <_printf_float+0x432>
 801243a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801243c:	f108 0201 	add.w	r2, r8, #1
 8012440:	3b01      	subs	r3, #1
 8012442:	4631      	mov	r1, r6
 8012444:	4628      	mov	r0, r5
 8012446:	47b8      	blx	r7
 8012448:	3001      	adds	r0, #1
 801244a:	d10e      	bne.n	801246a <_printf_float+0x42a>
 801244c:	e659      	b.n	8012102 <_printf_float+0xc2>
 801244e:	2301      	movs	r3, #1
 8012450:	4652      	mov	r2, sl
 8012452:	4631      	mov	r1, r6
 8012454:	4628      	mov	r0, r5
 8012456:	47b8      	blx	r7
 8012458:	3001      	adds	r0, #1
 801245a:	f43f ae52 	beq.w	8012102 <_printf_float+0xc2>
 801245e:	f108 0801 	add.w	r8, r8, #1
 8012462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012464:	3b01      	subs	r3, #1
 8012466:	4543      	cmp	r3, r8
 8012468:	dcf1      	bgt.n	801244e <_printf_float+0x40e>
 801246a:	464b      	mov	r3, r9
 801246c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012470:	e6dc      	b.n	801222c <_printf_float+0x1ec>
 8012472:	f04f 0800 	mov.w	r8, #0
 8012476:	f104 0a1a 	add.w	sl, r4, #26
 801247a:	e7f2      	b.n	8012462 <_printf_float+0x422>
 801247c:	2301      	movs	r3, #1
 801247e:	4642      	mov	r2, r8
 8012480:	e7df      	b.n	8012442 <_printf_float+0x402>
 8012482:	2301      	movs	r3, #1
 8012484:	464a      	mov	r2, r9
 8012486:	4631      	mov	r1, r6
 8012488:	4628      	mov	r0, r5
 801248a:	47b8      	blx	r7
 801248c:	3001      	adds	r0, #1
 801248e:	f43f ae38 	beq.w	8012102 <_printf_float+0xc2>
 8012492:	f108 0801 	add.w	r8, r8, #1
 8012496:	68e3      	ldr	r3, [r4, #12]
 8012498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801249a:	1a5b      	subs	r3, r3, r1
 801249c:	4543      	cmp	r3, r8
 801249e:	dcf0      	bgt.n	8012482 <_printf_float+0x442>
 80124a0:	e6fa      	b.n	8012298 <_printf_float+0x258>
 80124a2:	f04f 0800 	mov.w	r8, #0
 80124a6:	f104 0919 	add.w	r9, r4, #25
 80124aa:	e7f4      	b.n	8012496 <_printf_float+0x456>

080124ac <_printf_common>:
 80124ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124b0:	4616      	mov	r6, r2
 80124b2:	4699      	mov	r9, r3
 80124b4:	688a      	ldr	r2, [r1, #8]
 80124b6:	690b      	ldr	r3, [r1, #16]
 80124b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124bc:	4293      	cmp	r3, r2
 80124be:	bfb8      	it	lt
 80124c0:	4613      	movlt	r3, r2
 80124c2:	6033      	str	r3, [r6, #0]
 80124c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80124c8:	4607      	mov	r7, r0
 80124ca:	460c      	mov	r4, r1
 80124cc:	b10a      	cbz	r2, 80124d2 <_printf_common+0x26>
 80124ce:	3301      	adds	r3, #1
 80124d0:	6033      	str	r3, [r6, #0]
 80124d2:	6823      	ldr	r3, [r4, #0]
 80124d4:	0699      	lsls	r1, r3, #26
 80124d6:	bf42      	ittt	mi
 80124d8:	6833      	ldrmi	r3, [r6, #0]
 80124da:	3302      	addmi	r3, #2
 80124dc:	6033      	strmi	r3, [r6, #0]
 80124de:	6825      	ldr	r5, [r4, #0]
 80124e0:	f015 0506 	ands.w	r5, r5, #6
 80124e4:	d106      	bne.n	80124f4 <_printf_common+0x48>
 80124e6:	f104 0a19 	add.w	sl, r4, #25
 80124ea:	68e3      	ldr	r3, [r4, #12]
 80124ec:	6832      	ldr	r2, [r6, #0]
 80124ee:	1a9b      	subs	r3, r3, r2
 80124f0:	42ab      	cmp	r3, r5
 80124f2:	dc26      	bgt.n	8012542 <_printf_common+0x96>
 80124f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80124f8:	1e13      	subs	r3, r2, #0
 80124fa:	6822      	ldr	r2, [r4, #0]
 80124fc:	bf18      	it	ne
 80124fe:	2301      	movne	r3, #1
 8012500:	0692      	lsls	r2, r2, #26
 8012502:	d42b      	bmi.n	801255c <_printf_common+0xb0>
 8012504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012508:	4649      	mov	r1, r9
 801250a:	4638      	mov	r0, r7
 801250c:	47c0      	blx	r8
 801250e:	3001      	adds	r0, #1
 8012510:	d01e      	beq.n	8012550 <_printf_common+0xa4>
 8012512:	6823      	ldr	r3, [r4, #0]
 8012514:	68e5      	ldr	r5, [r4, #12]
 8012516:	6832      	ldr	r2, [r6, #0]
 8012518:	f003 0306 	and.w	r3, r3, #6
 801251c:	2b04      	cmp	r3, #4
 801251e:	bf08      	it	eq
 8012520:	1aad      	subeq	r5, r5, r2
 8012522:	68a3      	ldr	r3, [r4, #8]
 8012524:	6922      	ldr	r2, [r4, #16]
 8012526:	bf0c      	ite	eq
 8012528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801252c:	2500      	movne	r5, #0
 801252e:	4293      	cmp	r3, r2
 8012530:	bfc4      	itt	gt
 8012532:	1a9b      	subgt	r3, r3, r2
 8012534:	18ed      	addgt	r5, r5, r3
 8012536:	2600      	movs	r6, #0
 8012538:	341a      	adds	r4, #26
 801253a:	42b5      	cmp	r5, r6
 801253c:	d11a      	bne.n	8012574 <_printf_common+0xc8>
 801253e:	2000      	movs	r0, #0
 8012540:	e008      	b.n	8012554 <_printf_common+0xa8>
 8012542:	2301      	movs	r3, #1
 8012544:	4652      	mov	r2, sl
 8012546:	4649      	mov	r1, r9
 8012548:	4638      	mov	r0, r7
 801254a:	47c0      	blx	r8
 801254c:	3001      	adds	r0, #1
 801254e:	d103      	bne.n	8012558 <_printf_common+0xac>
 8012550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012558:	3501      	adds	r5, #1
 801255a:	e7c6      	b.n	80124ea <_printf_common+0x3e>
 801255c:	18e1      	adds	r1, r4, r3
 801255e:	1c5a      	adds	r2, r3, #1
 8012560:	2030      	movs	r0, #48	; 0x30
 8012562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012566:	4422      	add	r2, r4
 8012568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801256c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012570:	3302      	adds	r3, #2
 8012572:	e7c7      	b.n	8012504 <_printf_common+0x58>
 8012574:	2301      	movs	r3, #1
 8012576:	4622      	mov	r2, r4
 8012578:	4649      	mov	r1, r9
 801257a:	4638      	mov	r0, r7
 801257c:	47c0      	blx	r8
 801257e:	3001      	adds	r0, #1
 8012580:	d0e6      	beq.n	8012550 <_printf_common+0xa4>
 8012582:	3601      	adds	r6, #1
 8012584:	e7d9      	b.n	801253a <_printf_common+0x8e>
	...

08012588 <_printf_i>:
 8012588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801258c:	460c      	mov	r4, r1
 801258e:	4691      	mov	r9, r2
 8012590:	7e27      	ldrb	r7, [r4, #24]
 8012592:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012594:	2f78      	cmp	r7, #120	; 0x78
 8012596:	4680      	mov	r8, r0
 8012598:	469a      	mov	sl, r3
 801259a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801259e:	d807      	bhi.n	80125b0 <_printf_i+0x28>
 80125a0:	2f62      	cmp	r7, #98	; 0x62
 80125a2:	d80a      	bhi.n	80125ba <_printf_i+0x32>
 80125a4:	2f00      	cmp	r7, #0
 80125a6:	f000 80d8 	beq.w	801275a <_printf_i+0x1d2>
 80125aa:	2f58      	cmp	r7, #88	; 0x58
 80125ac:	f000 80a3 	beq.w	80126f6 <_printf_i+0x16e>
 80125b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80125b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80125b8:	e03a      	b.n	8012630 <_printf_i+0xa8>
 80125ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80125be:	2b15      	cmp	r3, #21
 80125c0:	d8f6      	bhi.n	80125b0 <_printf_i+0x28>
 80125c2:	a001      	add	r0, pc, #4	; (adr r0, 80125c8 <_printf_i+0x40>)
 80125c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80125c8:	08012621 	.word	0x08012621
 80125cc:	08012635 	.word	0x08012635
 80125d0:	080125b1 	.word	0x080125b1
 80125d4:	080125b1 	.word	0x080125b1
 80125d8:	080125b1 	.word	0x080125b1
 80125dc:	080125b1 	.word	0x080125b1
 80125e0:	08012635 	.word	0x08012635
 80125e4:	080125b1 	.word	0x080125b1
 80125e8:	080125b1 	.word	0x080125b1
 80125ec:	080125b1 	.word	0x080125b1
 80125f0:	080125b1 	.word	0x080125b1
 80125f4:	08012741 	.word	0x08012741
 80125f8:	08012665 	.word	0x08012665
 80125fc:	08012723 	.word	0x08012723
 8012600:	080125b1 	.word	0x080125b1
 8012604:	080125b1 	.word	0x080125b1
 8012608:	08012763 	.word	0x08012763
 801260c:	080125b1 	.word	0x080125b1
 8012610:	08012665 	.word	0x08012665
 8012614:	080125b1 	.word	0x080125b1
 8012618:	080125b1 	.word	0x080125b1
 801261c:	0801272b 	.word	0x0801272b
 8012620:	680b      	ldr	r3, [r1, #0]
 8012622:	1d1a      	adds	r2, r3, #4
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	600a      	str	r2, [r1, #0]
 8012628:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801262c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012630:	2301      	movs	r3, #1
 8012632:	e0a3      	b.n	801277c <_printf_i+0x1f4>
 8012634:	6825      	ldr	r5, [r4, #0]
 8012636:	6808      	ldr	r0, [r1, #0]
 8012638:	062e      	lsls	r6, r5, #24
 801263a:	f100 0304 	add.w	r3, r0, #4
 801263e:	d50a      	bpl.n	8012656 <_printf_i+0xce>
 8012640:	6805      	ldr	r5, [r0, #0]
 8012642:	600b      	str	r3, [r1, #0]
 8012644:	2d00      	cmp	r5, #0
 8012646:	da03      	bge.n	8012650 <_printf_i+0xc8>
 8012648:	232d      	movs	r3, #45	; 0x2d
 801264a:	426d      	negs	r5, r5
 801264c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012650:	485e      	ldr	r0, [pc, #376]	; (80127cc <_printf_i+0x244>)
 8012652:	230a      	movs	r3, #10
 8012654:	e019      	b.n	801268a <_printf_i+0x102>
 8012656:	f015 0f40 	tst.w	r5, #64	; 0x40
 801265a:	6805      	ldr	r5, [r0, #0]
 801265c:	600b      	str	r3, [r1, #0]
 801265e:	bf18      	it	ne
 8012660:	b22d      	sxthne	r5, r5
 8012662:	e7ef      	b.n	8012644 <_printf_i+0xbc>
 8012664:	680b      	ldr	r3, [r1, #0]
 8012666:	6825      	ldr	r5, [r4, #0]
 8012668:	1d18      	adds	r0, r3, #4
 801266a:	6008      	str	r0, [r1, #0]
 801266c:	0628      	lsls	r0, r5, #24
 801266e:	d501      	bpl.n	8012674 <_printf_i+0xec>
 8012670:	681d      	ldr	r5, [r3, #0]
 8012672:	e002      	b.n	801267a <_printf_i+0xf2>
 8012674:	0669      	lsls	r1, r5, #25
 8012676:	d5fb      	bpl.n	8012670 <_printf_i+0xe8>
 8012678:	881d      	ldrh	r5, [r3, #0]
 801267a:	4854      	ldr	r0, [pc, #336]	; (80127cc <_printf_i+0x244>)
 801267c:	2f6f      	cmp	r7, #111	; 0x6f
 801267e:	bf0c      	ite	eq
 8012680:	2308      	moveq	r3, #8
 8012682:	230a      	movne	r3, #10
 8012684:	2100      	movs	r1, #0
 8012686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801268a:	6866      	ldr	r6, [r4, #4]
 801268c:	60a6      	str	r6, [r4, #8]
 801268e:	2e00      	cmp	r6, #0
 8012690:	bfa2      	ittt	ge
 8012692:	6821      	ldrge	r1, [r4, #0]
 8012694:	f021 0104 	bicge.w	r1, r1, #4
 8012698:	6021      	strge	r1, [r4, #0]
 801269a:	b90d      	cbnz	r5, 80126a0 <_printf_i+0x118>
 801269c:	2e00      	cmp	r6, #0
 801269e:	d04d      	beq.n	801273c <_printf_i+0x1b4>
 80126a0:	4616      	mov	r6, r2
 80126a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80126a6:	fb03 5711 	mls	r7, r3, r1, r5
 80126aa:	5dc7      	ldrb	r7, [r0, r7]
 80126ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80126b0:	462f      	mov	r7, r5
 80126b2:	42bb      	cmp	r3, r7
 80126b4:	460d      	mov	r5, r1
 80126b6:	d9f4      	bls.n	80126a2 <_printf_i+0x11a>
 80126b8:	2b08      	cmp	r3, #8
 80126ba:	d10b      	bne.n	80126d4 <_printf_i+0x14c>
 80126bc:	6823      	ldr	r3, [r4, #0]
 80126be:	07df      	lsls	r7, r3, #31
 80126c0:	d508      	bpl.n	80126d4 <_printf_i+0x14c>
 80126c2:	6923      	ldr	r3, [r4, #16]
 80126c4:	6861      	ldr	r1, [r4, #4]
 80126c6:	4299      	cmp	r1, r3
 80126c8:	bfde      	ittt	le
 80126ca:	2330      	movle	r3, #48	; 0x30
 80126cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80126d0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80126d4:	1b92      	subs	r2, r2, r6
 80126d6:	6122      	str	r2, [r4, #16]
 80126d8:	f8cd a000 	str.w	sl, [sp]
 80126dc:	464b      	mov	r3, r9
 80126de:	aa03      	add	r2, sp, #12
 80126e0:	4621      	mov	r1, r4
 80126e2:	4640      	mov	r0, r8
 80126e4:	f7ff fee2 	bl	80124ac <_printf_common>
 80126e8:	3001      	adds	r0, #1
 80126ea:	d14c      	bne.n	8012786 <_printf_i+0x1fe>
 80126ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126f0:	b004      	add	sp, #16
 80126f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126f6:	4835      	ldr	r0, [pc, #212]	; (80127cc <_printf_i+0x244>)
 80126f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80126fc:	6823      	ldr	r3, [r4, #0]
 80126fe:	680e      	ldr	r6, [r1, #0]
 8012700:	061f      	lsls	r7, r3, #24
 8012702:	f856 5b04 	ldr.w	r5, [r6], #4
 8012706:	600e      	str	r6, [r1, #0]
 8012708:	d514      	bpl.n	8012734 <_printf_i+0x1ac>
 801270a:	07d9      	lsls	r1, r3, #31
 801270c:	bf44      	itt	mi
 801270e:	f043 0320 	orrmi.w	r3, r3, #32
 8012712:	6023      	strmi	r3, [r4, #0]
 8012714:	b91d      	cbnz	r5, 801271e <_printf_i+0x196>
 8012716:	6823      	ldr	r3, [r4, #0]
 8012718:	f023 0320 	bic.w	r3, r3, #32
 801271c:	6023      	str	r3, [r4, #0]
 801271e:	2310      	movs	r3, #16
 8012720:	e7b0      	b.n	8012684 <_printf_i+0xfc>
 8012722:	6823      	ldr	r3, [r4, #0]
 8012724:	f043 0320 	orr.w	r3, r3, #32
 8012728:	6023      	str	r3, [r4, #0]
 801272a:	2378      	movs	r3, #120	; 0x78
 801272c:	4828      	ldr	r0, [pc, #160]	; (80127d0 <_printf_i+0x248>)
 801272e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012732:	e7e3      	b.n	80126fc <_printf_i+0x174>
 8012734:	065e      	lsls	r6, r3, #25
 8012736:	bf48      	it	mi
 8012738:	b2ad      	uxthmi	r5, r5
 801273a:	e7e6      	b.n	801270a <_printf_i+0x182>
 801273c:	4616      	mov	r6, r2
 801273e:	e7bb      	b.n	80126b8 <_printf_i+0x130>
 8012740:	680b      	ldr	r3, [r1, #0]
 8012742:	6826      	ldr	r6, [r4, #0]
 8012744:	6960      	ldr	r0, [r4, #20]
 8012746:	1d1d      	adds	r5, r3, #4
 8012748:	600d      	str	r5, [r1, #0]
 801274a:	0635      	lsls	r5, r6, #24
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	d501      	bpl.n	8012754 <_printf_i+0x1cc>
 8012750:	6018      	str	r0, [r3, #0]
 8012752:	e002      	b.n	801275a <_printf_i+0x1d2>
 8012754:	0671      	lsls	r1, r6, #25
 8012756:	d5fb      	bpl.n	8012750 <_printf_i+0x1c8>
 8012758:	8018      	strh	r0, [r3, #0]
 801275a:	2300      	movs	r3, #0
 801275c:	6123      	str	r3, [r4, #16]
 801275e:	4616      	mov	r6, r2
 8012760:	e7ba      	b.n	80126d8 <_printf_i+0x150>
 8012762:	680b      	ldr	r3, [r1, #0]
 8012764:	1d1a      	adds	r2, r3, #4
 8012766:	600a      	str	r2, [r1, #0]
 8012768:	681e      	ldr	r6, [r3, #0]
 801276a:	6862      	ldr	r2, [r4, #4]
 801276c:	2100      	movs	r1, #0
 801276e:	4630      	mov	r0, r6
 8012770:	f7ed fd36 	bl	80001e0 <memchr>
 8012774:	b108      	cbz	r0, 801277a <_printf_i+0x1f2>
 8012776:	1b80      	subs	r0, r0, r6
 8012778:	6060      	str	r0, [r4, #4]
 801277a:	6863      	ldr	r3, [r4, #4]
 801277c:	6123      	str	r3, [r4, #16]
 801277e:	2300      	movs	r3, #0
 8012780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012784:	e7a8      	b.n	80126d8 <_printf_i+0x150>
 8012786:	6923      	ldr	r3, [r4, #16]
 8012788:	4632      	mov	r2, r6
 801278a:	4649      	mov	r1, r9
 801278c:	4640      	mov	r0, r8
 801278e:	47d0      	blx	sl
 8012790:	3001      	adds	r0, #1
 8012792:	d0ab      	beq.n	80126ec <_printf_i+0x164>
 8012794:	6823      	ldr	r3, [r4, #0]
 8012796:	079b      	lsls	r3, r3, #30
 8012798:	d413      	bmi.n	80127c2 <_printf_i+0x23a>
 801279a:	68e0      	ldr	r0, [r4, #12]
 801279c:	9b03      	ldr	r3, [sp, #12]
 801279e:	4298      	cmp	r0, r3
 80127a0:	bfb8      	it	lt
 80127a2:	4618      	movlt	r0, r3
 80127a4:	e7a4      	b.n	80126f0 <_printf_i+0x168>
 80127a6:	2301      	movs	r3, #1
 80127a8:	4632      	mov	r2, r6
 80127aa:	4649      	mov	r1, r9
 80127ac:	4640      	mov	r0, r8
 80127ae:	47d0      	blx	sl
 80127b0:	3001      	adds	r0, #1
 80127b2:	d09b      	beq.n	80126ec <_printf_i+0x164>
 80127b4:	3501      	adds	r5, #1
 80127b6:	68e3      	ldr	r3, [r4, #12]
 80127b8:	9903      	ldr	r1, [sp, #12]
 80127ba:	1a5b      	subs	r3, r3, r1
 80127bc:	42ab      	cmp	r3, r5
 80127be:	dcf2      	bgt.n	80127a6 <_printf_i+0x21e>
 80127c0:	e7eb      	b.n	801279a <_printf_i+0x212>
 80127c2:	2500      	movs	r5, #0
 80127c4:	f104 0619 	add.w	r6, r4, #25
 80127c8:	e7f5      	b.n	80127b6 <_printf_i+0x22e>
 80127ca:	bf00      	nop
 80127cc:	0801b112 	.word	0x0801b112
 80127d0:	0801b123 	.word	0x0801b123

080127d4 <cleanup_glue>:
 80127d4:	b538      	push	{r3, r4, r5, lr}
 80127d6:	460c      	mov	r4, r1
 80127d8:	6809      	ldr	r1, [r1, #0]
 80127da:	4605      	mov	r5, r0
 80127dc:	b109      	cbz	r1, 80127e2 <cleanup_glue+0xe>
 80127de:	f7ff fff9 	bl	80127d4 <cleanup_glue>
 80127e2:	4621      	mov	r1, r4
 80127e4:	4628      	mov	r0, r5
 80127e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127ea:	f001 bc3f 	b.w	801406c <_free_r>
	...

080127f0 <_reclaim_reent>:
 80127f0:	4b2c      	ldr	r3, [pc, #176]	; (80128a4 <_reclaim_reent+0xb4>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4283      	cmp	r3, r0
 80127f6:	b570      	push	{r4, r5, r6, lr}
 80127f8:	4604      	mov	r4, r0
 80127fa:	d051      	beq.n	80128a0 <_reclaim_reent+0xb0>
 80127fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80127fe:	b143      	cbz	r3, 8012812 <_reclaim_reent+0x22>
 8012800:	68db      	ldr	r3, [r3, #12]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d14a      	bne.n	801289c <_reclaim_reent+0xac>
 8012806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012808:	6819      	ldr	r1, [r3, #0]
 801280a:	b111      	cbz	r1, 8012812 <_reclaim_reent+0x22>
 801280c:	4620      	mov	r0, r4
 801280e:	f001 fc2d 	bl	801406c <_free_r>
 8012812:	6961      	ldr	r1, [r4, #20]
 8012814:	b111      	cbz	r1, 801281c <_reclaim_reent+0x2c>
 8012816:	4620      	mov	r0, r4
 8012818:	f001 fc28 	bl	801406c <_free_r>
 801281c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801281e:	b111      	cbz	r1, 8012826 <_reclaim_reent+0x36>
 8012820:	4620      	mov	r0, r4
 8012822:	f001 fc23 	bl	801406c <_free_r>
 8012826:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012828:	b111      	cbz	r1, 8012830 <_reclaim_reent+0x40>
 801282a:	4620      	mov	r0, r4
 801282c:	f001 fc1e 	bl	801406c <_free_r>
 8012830:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012832:	b111      	cbz	r1, 801283a <_reclaim_reent+0x4a>
 8012834:	4620      	mov	r0, r4
 8012836:	f001 fc19 	bl	801406c <_free_r>
 801283a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801283c:	b111      	cbz	r1, 8012844 <_reclaim_reent+0x54>
 801283e:	4620      	mov	r0, r4
 8012840:	f001 fc14 	bl	801406c <_free_r>
 8012844:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012846:	b111      	cbz	r1, 801284e <_reclaim_reent+0x5e>
 8012848:	4620      	mov	r0, r4
 801284a:	f001 fc0f 	bl	801406c <_free_r>
 801284e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012850:	b111      	cbz	r1, 8012858 <_reclaim_reent+0x68>
 8012852:	4620      	mov	r0, r4
 8012854:	f001 fc0a 	bl	801406c <_free_r>
 8012858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801285a:	b111      	cbz	r1, 8012862 <_reclaim_reent+0x72>
 801285c:	4620      	mov	r0, r4
 801285e:	f001 fc05 	bl	801406c <_free_r>
 8012862:	69a3      	ldr	r3, [r4, #24]
 8012864:	b1e3      	cbz	r3, 80128a0 <_reclaim_reent+0xb0>
 8012866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012868:	4620      	mov	r0, r4
 801286a:	4798      	blx	r3
 801286c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801286e:	b1b9      	cbz	r1, 80128a0 <_reclaim_reent+0xb0>
 8012870:	4620      	mov	r0, r4
 8012872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012876:	f7ff bfad 	b.w	80127d4 <cleanup_glue>
 801287a:	5949      	ldr	r1, [r1, r5]
 801287c:	b941      	cbnz	r1, 8012890 <_reclaim_reent+0xa0>
 801287e:	3504      	adds	r5, #4
 8012880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012882:	2d80      	cmp	r5, #128	; 0x80
 8012884:	68d9      	ldr	r1, [r3, #12]
 8012886:	d1f8      	bne.n	801287a <_reclaim_reent+0x8a>
 8012888:	4620      	mov	r0, r4
 801288a:	f001 fbef 	bl	801406c <_free_r>
 801288e:	e7ba      	b.n	8012806 <_reclaim_reent+0x16>
 8012890:	680e      	ldr	r6, [r1, #0]
 8012892:	4620      	mov	r0, r4
 8012894:	f001 fbea 	bl	801406c <_free_r>
 8012898:	4631      	mov	r1, r6
 801289a:	e7ef      	b.n	801287c <_reclaim_reent+0x8c>
 801289c:	2500      	movs	r5, #0
 801289e:	e7ef      	b.n	8012880 <_reclaim_reent+0x90>
 80128a0:	bd70      	pop	{r4, r5, r6, pc}
 80128a2:	bf00      	nop
 80128a4:	200001b0 	.word	0x200001b0

080128a8 <_sbrk_r>:
 80128a8:	b538      	push	{r3, r4, r5, lr}
 80128aa:	4d06      	ldr	r5, [pc, #24]	; (80128c4 <_sbrk_r+0x1c>)
 80128ac:	2300      	movs	r3, #0
 80128ae:	4604      	mov	r4, r0
 80128b0:	4608      	mov	r0, r1
 80128b2:	602b      	str	r3, [r5, #0]
 80128b4:	f7f2 f81e 	bl	80048f4 <_sbrk>
 80128b8:	1c43      	adds	r3, r0, #1
 80128ba:	d102      	bne.n	80128c2 <_sbrk_r+0x1a>
 80128bc:	682b      	ldr	r3, [r5, #0]
 80128be:	b103      	cbz	r3, 80128c2 <_sbrk_r+0x1a>
 80128c0:	6023      	str	r3, [r4, #0]
 80128c2:	bd38      	pop	{r3, r4, r5, pc}
 80128c4:	2000f1a0 	.word	0x2000f1a0

080128c8 <siprintf>:
 80128c8:	b40e      	push	{r1, r2, r3}
 80128ca:	b500      	push	{lr}
 80128cc:	b09c      	sub	sp, #112	; 0x70
 80128ce:	ab1d      	add	r3, sp, #116	; 0x74
 80128d0:	9002      	str	r0, [sp, #8]
 80128d2:	9006      	str	r0, [sp, #24]
 80128d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80128d8:	4809      	ldr	r0, [pc, #36]	; (8012900 <siprintf+0x38>)
 80128da:	9107      	str	r1, [sp, #28]
 80128dc:	9104      	str	r1, [sp, #16]
 80128de:	4909      	ldr	r1, [pc, #36]	; (8012904 <siprintf+0x3c>)
 80128e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80128e4:	9105      	str	r1, [sp, #20]
 80128e6:	6800      	ldr	r0, [r0, #0]
 80128e8:	9301      	str	r3, [sp, #4]
 80128ea:	a902      	add	r1, sp, #8
 80128ec:	f001 fc6a 	bl	80141c4 <_svfiprintf_r>
 80128f0:	9b02      	ldr	r3, [sp, #8]
 80128f2:	2200      	movs	r2, #0
 80128f4:	701a      	strb	r2, [r3, #0]
 80128f6:	b01c      	add	sp, #112	; 0x70
 80128f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80128fc:	b003      	add	sp, #12
 80128fe:	4770      	bx	lr
 8012900:	200001b0 	.word	0x200001b0
 8012904:	ffff0208 	.word	0xffff0208

08012908 <__sread>:
 8012908:	b510      	push	{r4, lr}
 801290a:	460c      	mov	r4, r1
 801290c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012910:	f001 fd58 	bl	80143c4 <_read_r>
 8012914:	2800      	cmp	r0, #0
 8012916:	bfab      	itete	ge
 8012918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801291a:	89a3      	ldrhlt	r3, [r4, #12]
 801291c:	181b      	addge	r3, r3, r0
 801291e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012922:	bfac      	ite	ge
 8012924:	6563      	strge	r3, [r4, #84]	; 0x54
 8012926:	81a3      	strhlt	r3, [r4, #12]
 8012928:	bd10      	pop	{r4, pc}

0801292a <__swrite>:
 801292a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801292e:	461f      	mov	r7, r3
 8012930:	898b      	ldrh	r3, [r1, #12]
 8012932:	05db      	lsls	r3, r3, #23
 8012934:	4605      	mov	r5, r0
 8012936:	460c      	mov	r4, r1
 8012938:	4616      	mov	r6, r2
 801293a:	d505      	bpl.n	8012948 <__swrite+0x1e>
 801293c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012940:	2302      	movs	r3, #2
 8012942:	2200      	movs	r2, #0
 8012944:	f000 ffde 	bl	8013904 <_lseek_r>
 8012948:	89a3      	ldrh	r3, [r4, #12]
 801294a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801294e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012952:	81a3      	strh	r3, [r4, #12]
 8012954:	4632      	mov	r2, r6
 8012956:	463b      	mov	r3, r7
 8012958:	4628      	mov	r0, r5
 801295a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801295e:	f000 b86f 	b.w	8012a40 <_write_r>

08012962 <__sseek>:
 8012962:	b510      	push	{r4, lr}
 8012964:	460c      	mov	r4, r1
 8012966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801296a:	f000 ffcb 	bl	8013904 <_lseek_r>
 801296e:	1c43      	adds	r3, r0, #1
 8012970:	89a3      	ldrh	r3, [r4, #12]
 8012972:	bf15      	itete	ne
 8012974:	6560      	strne	r0, [r4, #84]	; 0x54
 8012976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801297a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801297e:	81a3      	strheq	r3, [r4, #12]
 8012980:	bf18      	it	ne
 8012982:	81a3      	strhne	r3, [r4, #12]
 8012984:	bd10      	pop	{r4, pc}

08012986 <__sclose>:
 8012986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801298a:	f000 b86b 	b.w	8012a64 <_close_r>

0801298e <strcat>:
 801298e:	b510      	push	{r4, lr}
 8012990:	4602      	mov	r2, r0
 8012992:	7814      	ldrb	r4, [r2, #0]
 8012994:	4613      	mov	r3, r2
 8012996:	3201      	adds	r2, #1
 8012998:	2c00      	cmp	r4, #0
 801299a:	d1fa      	bne.n	8012992 <strcat+0x4>
 801299c:	3b01      	subs	r3, #1
 801299e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129a6:	2a00      	cmp	r2, #0
 80129a8:	d1f9      	bne.n	801299e <strcat+0x10>
 80129aa:	bd10      	pop	{r4, pc}

080129ac <strcpy>:
 80129ac:	4603      	mov	r3, r0
 80129ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129b2:	f803 2b01 	strb.w	r2, [r3], #1
 80129b6:	2a00      	cmp	r2, #0
 80129b8:	d1f9      	bne.n	80129ae <strcpy+0x2>
 80129ba:	4770      	bx	lr

080129bc <__utoa>:
 80129bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129be:	4c1f      	ldr	r4, [pc, #124]	; (8012a3c <__utoa+0x80>)
 80129c0:	b08b      	sub	sp, #44	; 0x2c
 80129c2:	4605      	mov	r5, r0
 80129c4:	460b      	mov	r3, r1
 80129c6:	466e      	mov	r6, sp
 80129c8:	f104 0c20 	add.w	ip, r4, #32
 80129cc:	6820      	ldr	r0, [r4, #0]
 80129ce:	6861      	ldr	r1, [r4, #4]
 80129d0:	4637      	mov	r7, r6
 80129d2:	c703      	stmia	r7!, {r0, r1}
 80129d4:	3408      	adds	r4, #8
 80129d6:	4564      	cmp	r4, ip
 80129d8:	463e      	mov	r6, r7
 80129da:	d1f7      	bne.n	80129cc <__utoa+0x10>
 80129dc:	7921      	ldrb	r1, [r4, #4]
 80129de:	7139      	strb	r1, [r7, #4]
 80129e0:	1e91      	subs	r1, r2, #2
 80129e2:	6820      	ldr	r0, [r4, #0]
 80129e4:	6038      	str	r0, [r7, #0]
 80129e6:	2922      	cmp	r1, #34	; 0x22
 80129e8:	f04f 0100 	mov.w	r1, #0
 80129ec:	d904      	bls.n	80129f8 <__utoa+0x3c>
 80129ee:	7019      	strb	r1, [r3, #0]
 80129f0:	460b      	mov	r3, r1
 80129f2:	4618      	mov	r0, r3
 80129f4:	b00b      	add	sp, #44	; 0x2c
 80129f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129f8:	1e58      	subs	r0, r3, #1
 80129fa:	4684      	mov	ip, r0
 80129fc:	fbb5 f7f2 	udiv	r7, r5, r2
 8012a00:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8012a04:	fb02 5617 	mls	r6, r2, r7, r5
 8012a08:	4476      	add	r6, lr
 8012a0a:	460c      	mov	r4, r1
 8012a0c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8012a10:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8012a14:	462e      	mov	r6, r5
 8012a16:	42b2      	cmp	r2, r6
 8012a18:	f101 0101 	add.w	r1, r1, #1
 8012a1c:	463d      	mov	r5, r7
 8012a1e:	d9ed      	bls.n	80129fc <__utoa+0x40>
 8012a20:	2200      	movs	r2, #0
 8012a22:	545a      	strb	r2, [r3, r1]
 8012a24:	1919      	adds	r1, r3, r4
 8012a26:	1aa5      	subs	r5, r4, r2
 8012a28:	42aa      	cmp	r2, r5
 8012a2a:	dae2      	bge.n	80129f2 <__utoa+0x36>
 8012a2c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8012a30:	780e      	ldrb	r6, [r1, #0]
 8012a32:	7006      	strb	r6, [r0, #0]
 8012a34:	3201      	adds	r2, #1
 8012a36:	f801 5901 	strb.w	r5, [r1], #-1
 8012a3a:	e7f4      	b.n	8012a26 <__utoa+0x6a>
 8012a3c:	0801b134 	.word	0x0801b134

08012a40 <_write_r>:
 8012a40:	b538      	push	{r3, r4, r5, lr}
 8012a42:	4d07      	ldr	r5, [pc, #28]	; (8012a60 <_write_r+0x20>)
 8012a44:	4604      	mov	r4, r0
 8012a46:	4608      	mov	r0, r1
 8012a48:	4611      	mov	r1, r2
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	602a      	str	r2, [r5, #0]
 8012a4e:	461a      	mov	r2, r3
 8012a50:	f7f1 feff 	bl	8004852 <_write>
 8012a54:	1c43      	adds	r3, r0, #1
 8012a56:	d102      	bne.n	8012a5e <_write_r+0x1e>
 8012a58:	682b      	ldr	r3, [r5, #0]
 8012a5a:	b103      	cbz	r3, 8012a5e <_write_r+0x1e>
 8012a5c:	6023      	str	r3, [r4, #0]
 8012a5e:	bd38      	pop	{r3, r4, r5, pc}
 8012a60:	2000f1a0 	.word	0x2000f1a0

08012a64 <_close_r>:
 8012a64:	b538      	push	{r3, r4, r5, lr}
 8012a66:	4d06      	ldr	r5, [pc, #24]	; (8012a80 <_close_r+0x1c>)
 8012a68:	2300      	movs	r3, #0
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	4608      	mov	r0, r1
 8012a6e:	602b      	str	r3, [r5, #0]
 8012a70:	f7f1 ff0b 	bl	800488a <_close>
 8012a74:	1c43      	adds	r3, r0, #1
 8012a76:	d102      	bne.n	8012a7e <_close_r+0x1a>
 8012a78:	682b      	ldr	r3, [r5, #0]
 8012a7a:	b103      	cbz	r3, 8012a7e <_close_r+0x1a>
 8012a7c:	6023      	str	r3, [r4, #0]
 8012a7e:	bd38      	pop	{r3, r4, r5, pc}
 8012a80:	2000f1a0 	.word	0x2000f1a0

08012a84 <quorem>:
 8012a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a88:	6903      	ldr	r3, [r0, #16]
 8012a8a:	690c      	ldr	r4, [r1, #16]
 8012a8c:	42a3      	cmp	r3, r4
 8012a8e:	4607      	mov	r7, r0
 8012a90:	f2c0 8081 	blt.w	8012b96 <quorem+0x112>
 8012a94:	3c01      	subs	r4, #1
 8012a96:	f101 0814 	add.w	r8, r1, #20
 8012a9a:	f100 0514 	add.w	r5, r0, #20
 8012a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012aa2:	9301      	str	r3, [sp, #4]
 8012aa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012aa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012aac:	3301      	adds	r3, #1
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012ab4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012ab8:	fbb2 f6f3 	udiv	r6, r2, r3
 8012abc:	d331      	bcc.n	8012b22 <quorem+0x9e>
 8012abe:	f04f 0e00 	mov.w	lr, #0
 8012ac2:	4640      	mov	r0, r8
 8012ac4:	46ac      	mov	ip, r5
 8012ac6:	46f2      	mov	sl, lr
 8012ac8:	f850 2b04 	ldr.w	r2, [r0], #4
 8012acc:	b293      	uxth	r3, r2
 8012ace:	fb06 e303 	mla	r3, r6, r3, lr
 8012ad2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012ad6:	b29b      	uxth	r3, r3
 8012ad8:	ebaa 0303 	sub.w	r3, sl, r3
 8012adc:	0c12      	lsrs	r2, r2, #16
 8012ade:	f8dc a000 	ldr.w	sl, [ip]
 8012ae2:	fb06 e202 	mla	r2, r6, r2, lr
 8012ae6:	fa13 f38a 	uxtah	r3, r3, sl
 8012aea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012aee:	fa1f fa82 	uxth.w	sl, r2
 8012af2:	f8dc 2000 	ldr.w	r2, [ip]
 8012af6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012afa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012afe:	b29b      	uxth	r3, r3
 8012b00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b04:	4581      	cmp	r9, r0
 8012b06:	f84c 3b04 	str.w	r3, [ip], #4
 8012b0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012b0e:	d2db      	bcs.n	8012ac8 <quorem+0x44>
 8012b10:	f855 300b 	ldr.w	r3, [r5, fp]
 8012b14:	b92b      	cbnz	r3, 8012b22 <quorem+0x9e>
 8012b16:	9b01      	ldr	r3, [sp, #4]
 8012b18:	3b04      	subs	r3, #4
 8012b1a:	429d      	cmp	r5, r3
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	d32e      	bcc.n	8012b7e <quorem+0xfa>
 8012b20:	613c      	str	r4, [r7, #16]
 8012b22:	4638      	mov	r0, r7
 8012b24:	f001 f992 	bl	8013e4c <__mcmp>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	db24      	blt.n	8012b76 <quorem+0xf2>
 8012b2c:	3601      	adds	r6, #1
 8012b2e:	4628      	mov	r0, r5
 8012b30:	f04f 0c00 	mov.w	ip, #0
 8012b34:	f858 2b04 	ldr.w	r2, [r8], #4
 8012b38:	f8d0 e000 	ldr.w	lr, [r0]
 8012b3c:	b293      	uxth	r3, r2
 8012b3e:	ebac 0303 	sub.w	r3, ip, r3
 8012b42:	0c12      	lsrs	r2, r2, #16
 8012b44:	fa13 f38e 	uxtah	r3, r3, lr
 8012b48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012b4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b56:	45c1      	cmp	r9, r8
 8012b58:	f840 3b04 	str.w	r3, [r0], #4
 8012b5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012b60:	d2e8      	bcs.n	8012b34 <quorem+0xb0>
 8012b62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b6a:	b922      	cbnz	r2, 8012b76 <quorem+0xf2>
 8012b6c:	3b04      	subs	r3, #4
 8012b6e:	429d      	cmp	r5, r3
 8012b70:	461a      	mov	r2, r3
 8012b72:	d30a      	bcc.n	8012b8a <quorem+0x106>
 8012b74:	613c      	str	r4, [r7, #16]
 8012b76:	4630      	mov	r0, r6
 8012b78:	b003      	add	sp, #12
 8012b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b7e:	6812      	ldr	r2, [r2, #0]
 8012b80:	3b04      	subs	r3, #4
 8012b82:	2a00      	cmp	r2, #0
 8012b84:	d1cc      	bne.n	8012b20 <quorem+0x9c>
 8012b86:	3c01      	subs	r4, #1
 8012b88:	e7c7      	b.n	8012b1a <quorem+0x96>
 8012b8a:	6812      	ldr	r2, [r2, #0]
 8012b8c:	3b04      	subs	r3, #4
 8012b8e:	2a00      	cmp	r2, #0
 8012b90:	d1f0      	bne.n	8012b74 <quorem+0xf0>
 8012b92:	3c01      	subs	r4, #1
 8012b94:	e7eb      	b.n	8012b6e <quorem+0xea>
 8012b96:	2000      	movs	r0, #0
 8012b98:	e7ee      	b.n	8012b78 <quorem+0xf4>
 8012b9a:	0000      	movs	r0, r0
 8012b9c:	0000      	movs	r0, r0
	...

08012ba0 <_dtoa_r>:
 8012ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ba4:	ed2d 8b02 	vpush	{d8}
 8012ba8:	ec57 6b10 	vmov	r6, r7, d0
 8012bac:	b095      	sub	sp, #84	; 0x54
 8012bae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012bb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012bb4:	9105      	str	r1, [sp, #20]
 8012bb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012bba:	4604      	mov	r4, r0
 8012bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8012bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8012bc0:	b975      	cbnz	r5, 8012be0 <_dtoa_r+0x40>
 8012bc2:	2010      	movs	r0, #16
 8012bc4:	f000 feb0 	bl	8013928 <malloc>
 8012bc8:	4602      	mov	r2, r0
 8012bca:	6260      	str	r0, [r4, #36]	; 0x24
 8012bcc:	b920      	cbnz	r0, 8012bd8 <_dtoa_r+0x38>
 8012bce:	4bb2      	ldr	r3, [pc, #712]	; (8012e98 <_dtoa_r+0x2f8>)
 8012bd0:	21ea      	movs	r1, #234	; 0xea
 8012bd2:	48b2      	ldr	r0, [pc, #712]	; (8012e9c <_dtoa_r+0x2fc>)
 8012bd4:	f001 fc08 	bl	80143e8 <__assert_func>
 8012bd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012bdc:	6005      	str	r5, [r0, #0]
 8012bde:	60c5      	str	r5, [r0, #12]
 8012be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012be2:	6819      	ldr	r1, [r3, #0]
 8012be4:	b151      	cbz	r1, 8012bfc <_dtoa_r+0x5c>
 8012be6:	685a      	ldr	r2, [r3, #4]
 8012be8:	604a      	str	r2, [r1, #4]
 8012bea:	2301      	movs	r3, #1
 8012bec:	4093      	lsls	r3, r2
 8012bee:	608b      	str	r3, [r1, #8]
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	f000 feed 	bl	80139d0 <_Bfree>
 8012bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	601a      	str	r2, [r3, #0]
 8012bfc:	1e3b      	subs	r3, r7, #0
 8012bfe:	bfb9      	ittee	lt
 8012c00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012c04:	9303      	strlt	r3, [sp, #12]
 8012c06:	2300      	movge	r3, #0
 8012c08:	f8c8 3000 	strge.w	r3, [r8]
 8012c0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012c10:	4ba3      	ldr	r3, [pc, #652]	; (8012ea0 <_dtoa_r+0x300>)
 8012c12:	bfbc      	itt	lt
 8012c14:	2201      	movlt	r2, #1
 8012c16:	f8c8 2000 	strlt.w	r2, [r8]
 8012c1a:	ea33 0309 	bics.w	r3, r3, r9
 8012c1e:	d11b      	bne.n	8012c58 <_dtoa_r+0xb8>
 8012c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c22:	f242 730f 	movw	r3, #9999	; 0x270f
 8012c26:	6013      	str	r3, [r2, #0]
 8012c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012c2c:	4333      	orrs	r3, r6
 8012c2e:	f000 857a 	beq.w	8013726 <_dtoa_r+0xb86>
 8012c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c34:	b963      	cbnz	r3, 8012c50 <_dtoa_r+0xb0>
 8012c36:	4b9b      	ldr	r3, [pc, #620]	; (8012ea4 <_dtoa_r+0x304>)
 8012c38:	e024      	b.n	8012c84 <_dtoa_r+0xe4>
 8012c3a:	4b9b      	ldr	r3, [pc, #620]	; (8012ea8 <_dtoa_r+0x308>)
 8012c3c:	9300      	str	r3, [sp, #0]
 8012c3e:	3308      	adds	r3, #8
 8012c40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012c42:	6013      	str	r3, [r2, #0]
 8012c44:	9800      	ldr	r0, [sp, #0]
 8012c46:	b015      	add	sp, #84	; 0x54
 8012c48:	ecbd 8b02 	vpop	{d8}
 8012c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c50:	4b94      	ldr	r3, [pc, #592]	; (8012ea4 <_dtoa_r+0x304>)
 8012c52:	9300      	str	r3, [sp, #0]
 8012c54:	3303      	adds	r3, #3
 8012c56:	e7f3      	b.n	8012c40 <_dtoa_r+0xa0>
 8012c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	ec51 0b17 	vmov	r0, r1, d7
 8012c62:	2300      	movs	r3, #0
 8012c64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012c68:	f7ed ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c6c:	4680      	mov	r8, r0
 8012c6e:	b158      	cbz	r0, 8012c88 <_dtoa_r+0xe8>
 8012c70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c72:	2301      	movs	r3, #1
 8012c74:	6013      	str	r3, [r2, #0]
 8012c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	f000 8551 	beq.w	8013720 <_dtoa_r+0xb80>
 8012c7e:	488b      	ldr	r0, [pc, #556]	; (8012eac <_dtoa_r+0x30c>)
 8012c80:	6018      	str	r0, [r3, #0]
 8012c82:	1e43      	subs	r3, r0, #1
 8012c84:	9300      	str	r3, [sp, #0]
 8012c86:	e7dd      	b.n	8012c44 <_dtoa_r+0xa4>
 8012c88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012c8c:	aa12      	add	r2, sp, #72	; 0x48
 8012c8e:	a913      	add	r1, sp, #76	; 0x4c
 8012c90:	4620      	mov	r0, r4
 8012c92:	f001 f97f 	bl	8013f94 <__d2b>
 8012c96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012c9a:	4683      	mov	fp, r0
 8012c9c:	2d00      	cmp	r5, #0
 8012c9e:	d07c      	beq.n	8012d9a <_dtoa_r+0x1fa>
 8012ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ca2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012caa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012cae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012cb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012cba:	4b7d      	ldr	r3, [pc, #500]	; (8012eb0 <_dtoa_r+0x310>)
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	4639      	mov	r1, r7
 8012cc2:	f7ed fae1 	bl	8000288 <__aeabi_dsub>
 8012cc6:	a36e      	add	r3, pc, #440	; (adr r3, 8012e80 <_dtoa_r+0x2e0>)
 8012cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ccc:	f7ed fc94 	bl	80005f8 <__aeabi_dmul>
 8012cd0:	a36d      	add	r3, pc, #436	; (adr r3, 8012e88 <_dtoa_r+0x2e8>)
 8012cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd6:	f7ed fad9 	bl	800028c <__adddf3>
 8012cda:	4606      	mov	r6, r0
 8012cdc:	4628      	mov	r0, r5
 8012cde:	460f      	mov	r7, r1
 8012ce0:	f7ed fc20 	bl	8000524 <__aeabi_i2d>
 8012ce4:	a36a      	add	r3, pc, #424	; (adr r3, 8012e90 <_dtoa_r+0x2f0>)
 8012ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cea:	f7ed fc85 	bl	80005f8 <__aeabi_dmul>
 8012cee:	4602      	mov	r2, r0
 8012cf0:	460b      	mov	r3, r1
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	4639      	mov	r1, r7
 8012cf6:	f7ed fac9 	bl	800028c <__adddf3>
 8012cfa:	4606      	mov	r6, r0
 8012cfc:	460f      	mov	r7, r1
 8012cfe:	f7ed ff2b 	bl	8000b58 <__aeabi_d2iz>
 8012d02:	2200      	movs	r2, #0
 8012d04:	4682      	mov	sl, r0
 8012d06:	2300      	movs	r3, #0
 8012d08:	4630      	mov	r0, r6
 8012d0a:	4639      	mov	r1, r7
 8012d0c:	f7ed fee6 	bl	8000adc <__aeabi_dcmplt>
 8012d10:	b148      	cbz	r0, 8012d26 <_dtoa_r+0x186>
 8012d12:	4650      	mov	r0, sl
 8012d14:	f7ed fc06 	bl	8000524 <__aeabi_i2d>
 8012d18:	4632      	mov	r2, r6
 8012d1a:	463b      	mov	r3, r7
 8012d1c:	f7ed fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 8012d20:	b908      	cbnz	r0, 8012d26 <_dtoa_r+0x186>
 8012d22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012d26:	f1ba 0f16 	cmp.w	sl, #22
 8012d2a:	d854      	bhi.n	8012dd6 <_dtoa_r+0x236>
 8012d2c:	4b61      	ldr	r3, [pc, #388]	; (8012eb4 <_dtoa_r+0x314>)
 8012d2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012d3a:	f7ed fecf 	bl	8000adc <__aeabi_dcmplt>
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	d04b      	beq.n	8012dda <_dtoa_r+0x23a>
 8012d42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012d46:	2300      	movs	r3, #0
 8012d48:	930e      	str	r3, [sp, #56]	; 0x38
 8012d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012d4c:	1b5d      	subs	r5, r3, r5
 8012d4e:	1e6b      	subs	r3, r5, #1
 8012d50:	9304      	str	r3, [sp, #16]
 8012d52:	bf43      	ittte	mi
 8012d54:	2300      	movmi	r3, #0
 8012d56:	f1c5 0801 	rsbmi	r8, r5, #1
 8012d5a:	9304      	strmi	r3, [sp, #16]
 8012d5c:	f04f 0800 	movpl.w	r8, #0
 8012d60:	f1ba 0f00 	cmp.w	sl, #0
 8012d64:	db3b      	blt.n	8012dde <_dtoa_r+0x23e>
 8012d66:	9b04      	ldr	r3, [sp, #16]
 8012d68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012d6c:	4453      	add	r3, sl
 8012d6e:	9304      	str	r3, [sp, #16]
 8012d70:	2300      	movs	r3, #0
 8012d72:	9306      	str	r3, [sp, #24]
 8012d74:	9b05      	ldr	r3, [sp, #20]
 8012d76:	2b09      	cmp	r3, #9
 8012d78:	d869      	bhi.n	8012e4e <_dtoa_r+0x2ae>
 8012d7a:	2b05      	cmp	r3, #5
 8012d7c:	bfc4      	itt	gt
 8012d7e:	3b04      	subgt	r3, #4
 8012d80:	9305      	strgt	r3, [sp, #20]
 8012d82:	9b05      	ldr	r3, [sp, #20]
 8012d84:	f1a3 0302 	sub.w	r3, r3, #2
 8012d88:	bfcc      	ite	gt
 8012d8a:	2500      	movgt	r5, #0
 8012d8c:	2501      	movle	r5, #1
 8012d8e:	2b03      	cmp	r3, #3
 8012d90:	d869      	bhi.n	8012e66 <_dtoa_r+0x2c6>
 8012d92:	e8df f003 	tbb	[pc, r3]
 8012d96:	4e2c      	.short	0x4e2c
 8012d98:	5a4c      	.short	0x5a4c
 8012d9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012d9e:	441d      	add	r5, r3
 8012da0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012da4:	2b20      	cmp	r3, #32
 8012da6:	bfc1      	itttt	gt
 8012da8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012dac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012db0:	fa09 f303 	lslgt.w	r3, r9, r3
 8012db4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012db8:	bfda      	itte	le
 8012dba:	f1c3 0320 	rsble	r3, r3, #32
 8012dbe:	fa06 f003 	lslle.w	r0, r6, r3
 8012dc2:	4318      	orrgt	r0, r3
 8012dc4:	f7ed fb9e 	bl	8000504 <__aeabi_ui2d>
 8012dc8:	2301      	movs	r3, #1
 8012dca:	4606      	mov	r6, r0
 8012dcc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012dd0:	3d01      	subs	r5, #1
 8012dd2:	9310      	str	r3, [sp, #64]	; 0x40
 8012dd4:	e771      	b.n	8012cba <_dtoa_r+0x11a>
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	e7b6      	b.n	8012d48 <_dtoa_r+0x1a8>
 8012dda:	900e      	str	r0, [sp, #56]	; 0x38
 8012ddc:	e7b5      	b.n	8012d4a <_dtoa_r+0x1aa>
 8012dde:	f1ca 0300 	rsb	r3, sl, #0
 8012de2:	9306      	str	r3, [sp, #24]
 8012de4:	2300      	movs	r3, #0
 8012de6:	eba8 080a 	sub.w	r8, r8, sl
 8012dea:	930d      	str	r3, [sp, #52]	; 0x34
 8012dec:	e7c2      	b.n	8012d74 <_dtoa_r+0x1d4>
 8012dee:	2300      	movs	r3, #0
 8012df0:	9308      	str	r3, [sp, #32]
 8012df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	dc39      	bgt.n	8012e6c <_dtoa_r+0x2cc>
 8012df8:	f04f 0901 	mov.w	r9, #1
 8012dfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8012e00:	464b      	mov	r3, r9
 8012e02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012e06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012e08:	2200      	movs	r2, #0
 8012e0a:	6042      	str	r2, [r0, #4]
 8012e0c:	2204      	movs	r2, #4
 8012e0e:	f102 0614 	add.w	r6, r2, #20
 8012e12:	429e      	cmp	r6, r3
 8012e14:	6841      	ldr	r1, [r0, #4]
 8012e16:	d92f      	bls.n	8012e78 <_dtoa_r+0x2d8>
 8012e18:	4620      	mov	r0, r4
 8012e1a:	f000 fd99 	bl	8013950 <_Balloc>
 8012e1e:	9000      	str	r0, [sp, #0]
 8012e20:	2800      	cmp	r0, #0
 8012e22:	d14b      	bne.n	8012ebc <_dtoa_r+0x31c>
 8012e24:	4b24      	ldr	r3, [pc, #144]	; (8012eb8 <_dtoa_r+0x318>)
 8012e26:	4602      	mov	r2, r0
 8012e28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012e2c:	e6d1      	b.n	8012bd2 <_dtoa_r+0x32>
 8012e2e:	2301      	movs	r3, #1
 8012e30:	e7de      	b.n	8012df0 <_dtoa_r+0x250>
 8012e32:	2300      	movs	r3, #0
 8012e34:	9308      	str	r3, [sp, #32]
 8012e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e38:	eb0a 0903 	add.w	r9, sl, r3
 8012e3c:	f109 0301 	add.w	r3, r9, #1
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	9301      	str	r3, [sp, #4]
 8012e44:	bfb8      	it	lt
 8012e46:	2301      	movlt	r3, #1
 8012e48:	e7dd      	b.n	8012e06 <_dtoa_r+0x266>
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	e7f2      	b.n	8012e34 <_dtoa_r+0x294>
 8012e4e:	2501      	movs	r5, #1
 8012e50:	2300      	movs	r3, #0
 8012e52:	9305      	str	r3, [sp, #20]
 8012e54:	9508      	str	r5, [sp, #32]
 8012e56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012e60:	2312      	movs	r3, #18
 8012e62:	9209      	str	r2, [sp, #36]	; 0x24
 8012e64:	e7cf      	b.n	8012e06 <_dtoa_r+0x266>
 8012e66:	2301      	movs	r3, #1
 8012e68:	9308      	str	r3, [sp, #32]
 8012e6a:	e7f4      	b.n	8012e56 <_dtoa_r+0x2b6>
 8012e6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012e70:	f8cd 9004 	str.w	r9, [sp, #4]
 8012e74:	464b      	mov	r3, r9
 8012e76:	e7c6      	b.n	8012e06 <_dtoa_r+0x266>
 8012e78:	3101      	adds	r1, #1
 8012e7a:	6041      	str	r1, [r0, #4]
 8012e7c:	0052      	lsls	r2, r2, #1
 8012e7e:	e7c6      	b.n	8012e0e <_dtoa_r+0x26e>
 8012e80:	636f4361 	.word	0x636f4361
 8012e84:	3fd287a7 	.word	0x3fd287a7
 8012e88:	8b60c8b3 	.word	0x8b60c8b3
 8012e8c:	3fc68a28 	.word	0x3fc68a28
 8012e90:	509f79fb 	.word	0x509f79fb
 8012e94:	3fd34413 	.word	0x3fd34413
 8012e98:	0801b166 	.word	0x0801b166
 8012e9c:	0801b17d 	.word	0x0801b17d
 8012ea0:	7ff00000 	.word	0x7ff00000
 8012ea4:	0801b162 	.word	0x0801b162
 8012ea8:	0801b159 	.word	0x0801b159
 8012eac:	0801b111 	.word	0x0801b111
 8012eb0:	3ff80000 	.word	0x3ff80000
 8012eb4:	0801b278 	.word	0x0801b278
 8012eb8:	0801b1dc 	.word	0x0801b1dc
 8012ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ebe:	9a00      	ldr	r2, [sp, #0]
 8012ec0:	601a      	str	r2, [r3, #0]
 8012ec2:	9b01      	ldr	r3, [sp, #4]
 8012ec4:	2b0e      	cmp	r3, #14
 8012ec6:	f200 80ad 	bhi.w	8013024 <_dtoa_r+0x484>
 8012eca:	2d00      	cmp	r5, #0
 8012ecc:	f000 80aa 	beq.w	8013024 <_dtoa_r+0x484>
 8012ed0:	f1ba 0f00 	cmp.w	sl, #0
 8012ed4:	dd36      	ble.n	8012f44 <_dtoa_r+0x3a4>
 8012ed6:	4ac3      	ldr	r2, [pc, #780]	; (80131e4 <_dtoa_r+0x644>)
 8012ed8:	f00a 030f 	and.w	r3, sl, #15
 8012edc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012ee0:	ed93 7b00 	vldr	d7, [r3]
 8012ee4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012ee8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012eec:	eeb0 8a47 	vmov.f32	s16, s14
 8012ef0:	eef0 8a67 	vmov.f32	s17, s15
 8012ef4:	d016      	beq.n	8012f24 <_dtoa_r+0x384>
 8012ef6:	4bbc      	ldr	r3, [pc, #752]	; (80131e8 <_dtoa_r+0x648>)
 8012ef8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012efc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012f00:	f7ed fca4 	bl	800084c <__aeabi_ddiv>
 8012f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f08:	f007 070f 	and.w	r7, r7, #15
 8012f0c:	2503      	movs	r5, #3
 8012f0e:	4eb6      	ldr	r6, [pc, #728]	; (80131e8 <_dtoa_r+0x648>)
 8012f10:	b957      	cbnz	r7, 8012f28 <_dtoa_r+0x388>
 8012f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f16:	ec53 2b18 	vmov	r2, r3, d8
 8012f1a:	f7ed fc97 	bl	800084c <__aeabi_ddiv>
 8012f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f22:	e029      	b.n	8012f78 <_dtoa_r+0x3d8>
 8012f24:	2502      	movs	r5, #2
 8012f26:	e7f2      	b.n	8012f0e <_dtoa_r+0x36e>
 8012f28:	07f9      	lsls	r1, r7, #31
 8012f2a:	d508      	bpl.n	8012f3e <_dtoa_r+0x39e>
 8012f2c:	ec51 0b18 	vmov	r0, r1, d8
 8012f30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012f34:	f7ed fb60 	bl	80005f8 <__aeabi_dmul>
 8012f38:	ec41 0b18 	vmov	d8, r0, r1
 8012f3c:	3501      	adds	r5, #1
 8012f3e:	107f      	asrs	r7, r7, #1
 8012f40:	3608      	adds	r6, #8
 8012f42:	e7e5      	b.n	8012f10 <_dtoa_r+0x370>
 8012f44:	f000 80a6 	beq.w	8013094 <_dtoa_r+0x4f4>
 8012f48:	f1ca 0600 	rsb	r6, sl, #0
 8012f4c:	4ba5      	ldr	r3, [pc, #660]	; (80131e4 <_dtoa_r+0x644>)
 8012f4e:	4fa6      	ldr	r7, [pc, #664]	; (80131e8 <_dtoa_r+0x648>)
 8012f50:	f006 020f 	and.w	r2, r6, #15
 8012f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012f60:	f7ed fb4a 	bl	80005f8 <__aeabi_dmul>
 8012f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f68:	1136      	asrs	r6, r6, #4
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	2502      	movs	r5, #2
 8012f6e:	2e00      	cmp	r6, #0
 8012f70:	f040 8085 	bne.w	801307e <_dtoa_r+0x4de>
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d1d2      	bne.n	8012f1e <_dtoa_r+0x37e>
 8012f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	f000 808c 	beq.w	8013098 <_dtoa_r+0x4f8>
 8012f80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012f84:	4b99      	ldr	r3, [pc, #612]	; (80131ec <_dtoa_r+0x64c>)
 8012f86:	2200      	movs	r2, #0
 8012f88:	4630      	mov	r0, r6
 8012f8a:	4639      	mov	r1, r7
 8012f8c:	f7ed fda6 	bl	8000adc <__aeabi_dcmplt>
 8012f90:	2800      	cmp	r0, #0
 8012f92:	f000 8081 	beq.w	8013098 <_dtoa_r+0x4f8>
 8012f96:	9b01      	ldr	r3, [sp, #4]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d07d      	beq.n	8013098 <_dtoa_r+0x4f8>
 8012f9c:	f1b9 0f00 	cmp.w	r9, #0
 8012fa0:	dd3c      	ble.n	801301c <_dtoa_r+0x47c>
 8012fa2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8012fa6:	9307      	str	r3, [sp, #28]
 8012fa8:	2200      	movs	r2, #0
 8012faa:	4b91      	ldr	r3, [pc, #580]	; (80131f0 <_dtoa_r+0x650>)
 8012fac:	4630      	mov	r0, r6
 8012fae:	4639      	mov	r1, r7
 8012fb0:	f7ed fb22 	bl	80005f8 <__aeabi_dmul>
 8012fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fb8:	3501      	adds	r5, #1
 8012fba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012fbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	f7ed faae 	bl	8000524 <__aeabi_i2d>
 8012fc8:	4632      	mov	r2, r6
 8012fca:	463b      	mov	r3, r7
 8012fcc:	f7ed fb14 	bl	80005f8 <__aeabi_dmul>
 8012fd0:	4b88      	ldr	r3, [pc, #544]	; (80131f4 <_dtoa_r+0x654>)
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	f7ed f95a 	bl	800028c <__adddf3>
 8012fd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fe0:	9303      	str	r3, [sp, #12]
 8012fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d15c      	bne.n	80130a2 <_dtoa_r+0x502>
 8012fe8:	4b83      	ldr	r3, [pc, #524]	; (80131f8 <_dtoa_r+0x658>)
 8012fea:	2200      	movs	r2, #0
 8012fec:	4630      	mov	r0, r6
 8012fee:	4639      	mov	r1, r7
 8012ff0:	f7ed f94a 	bl	8000288 <__aeabi_dsub>
 8012ff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ff8:	4606      	mov	r6, r0
 8012ffa:	460f      	mov	r7, r1
 8012ffc:	f7ed fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 8013000:	2800      	cmp	r0, #0
 8013002:	f040 8296 	bne.w	8013532 <_dtoa_r+0x992>
 8013006:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801300a:	4630      	mov	r0, r6
 801300c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013010:	4639      	mov	r1, r7
 8013012:	f7ed fd63 	bl	8000adc <__aeabi_dcmplt>
 8013016:	2800      	cmp	r0, #0
 8013018:	f040 8288 	bne.w	801352c <_dtoa_r+0x98c>
 801301c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013020:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013024:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013026:	2b00      	cmp	r3, #0
 8013028:	f2c0 8158 	blt.w	80132dc <_dtoa_r+0x73c>
 801302c:	f1ba 0f0e 	cmp.w	sl, #14
 8013030:	f300 8154 	bgt.w	80132dc <_dtoa_r+0x73c>
 8013034:	4b6b      	ldr	r3, [pc, #428]	; (80131e4 <_dtoa_r+0x644>)
 8013036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801303a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801303e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013040:	2b00      	cmp	r3, #0
 8013042:	f280 80e3 	bge.w	801320c <_dtoa_r+0x66c>
 8013046:	9b01      	ldr	r3, [sp, #4]
 8013048:	2b00      	cmp	r3, #0
 801304a:	f300 80df 	bgt.w	801320c <_dtoa_r+0x66c>
 801304e:	f040 826d 	bne.w	801352c <_dtoa_r+0x98c>
 8013052:	4b69      	ldr	r3, [pc, #420]	; (80131f8 <_dtoa_r+0x658>)
 8013054:	2200      	movs	r2, #0
 8013056:	4640      	mov	r0, r8
 8013058:	4649      	mov	r1, r9
 801305a:	f7ed facd 	bl	80005f8 <__aeabi_dmul>
 801305e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013062:	f7ed fd4f 	bl	8000b04 <__aeabi_dcmpge>
 8013066:	9e01      	ldr	r6, [sp, #4]
 8013068:	4637      	mov	r7, r6
 801306a:	2800      	cmp	r0, #0
 801306c:	f040 8243 	bne.w	80134f6 <_dtoa_r+0x956>
 8013070:	9d00      	ldr	r5, [sp, #0]
 8013072:	2331      	movs	r3, #49	; 0x31
 8013074:	f805 3b01 	strb.w	r3, [r5], #1
 8013078:	f10a 0a01 	add.w	sl, sl, #1
 801307c:	e23f      	b.n	80134fe <_dtoa_r+0x95e>
 801307e:	07f2      	lsls	r2, r6, #31
 8013080:	d505      	bpl.n	801308e <_dtoa_r+0x4ee>
 8013082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013086:	f7ed fab7 	bl	80005f8 <__aeabi_dmul>
 801308a:	3501      	adds	r5, #1
 801308c:	2301      	movs	r3, #1
 801308e:	1076      	asrs	r6, r6, #1
 8013090:	3708      	adds	r7, #8
 8013092:	e76c      	b.n	8012f6e <_dtoa_r+0x3ce>
 8013094:	2502      	movs	r5, #2
 8013096:	e76f      	b.n	8012f78 <_dtoa_r+0x3d8>
 8013098:	9b01      	ldr	r3, [sp, #4]
 801309a:	f8cd a01c 	str.w	sl, [sp, #28]
 801309e:	930c      	str	r3, [sp, #48]	; 0x30
 80130a0:	e78d      	b.n	8012fbe <_dtoa_r+0x41e>
 80130a2:	9900      	ldr	r1, [sp, #0]
 80130a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80130a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130a8:	4b4e      	ldr	r3, [pc, #312]	; (80131e4 <_dtoa_r+0x644>)
 80130aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80130ae:	4401      	add	r1, r0
 80130b0:	9102      	str	r1, [sp, #8]
 80130b2:	9908      	ldr	r1, [sp, #32]
 80130b4:	eeb0 8a47 	vmov.f32	s16, s14
 80130b8:	eef0 8a67 	vmov.f32	s17, s15
 80130bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80130c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80130c4:	2900      	cmp	r1, #0
 80130c6:	d045      	beq.n	8013154 <_dtoa_r+0x5b4>
 80130c8:	494c      	ldr	r1, [pc, #304]	; (80131fc <_dtoa_r+0x65c>)
 80130ca:	2000      	movs	r0, #0
 80130cc:	f7ed fbbe 	bl	800084c <__aeabi_ddiv>
 80130d0:	ec53 2b18 	vmov	r2, r3, d8
 80130d4:	f7ed f8d8 	bl	8000288 <__aeabi_dsub>
 80130d8:	9d00      	ldr	r5, [sp, #0]
 80130da:	ec41 0b18 	vmov	d8, r0, r1
 80130de:	4639      	mov	r1, r7
 80130e0:	4630      	mov	r0, r6
 80130e2:	f7ed fd39 	bl	8000b58 <__aeabi_d2iz>
 80130e6:	900c      	str	r0, [sp, #48]	; 0x30
 80130e8:	f7ed fa1c 	bl	8000524 <__aeabi_i2d>
 80130ec:	4602      	mov	r2, r0
 80130ee:	460b      	mov	r3, r1
 80130f0:	4630      	mov	r0, r6
 80130f2:	4639      	mov	r1, r7
 80130f4:	f7ed f8c8 	bl	8000288 <__aeabi_dsub>
 80130f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80130fa:	3330      	adds	r3, #48	; 0x30
 80130fc:	f805 3b01 	strb.w	r3, [r5], #1
 8013100:	ec53 2b18 	vmov	r2, r3, d8
 8013104:	4606      	mov	r6, r0
 8013106:	460f      	mov	r7, r1
 8013108:	f7ed fce8 	bl	8000adc <__aeabi_dcmplt>
 801310c:	2800      	cmp	r0, #0
 801310e:	d165      	bne.n	80131dc <_dtoa_r+0x63c>
 8013110:	4632      	mov	r2, r6
 8013112:	463b      	mov	r3, r7
 8013114:	4935      	ldr	r1, [pc, #212]	; (80131ec <_dtoa_r+0x64c>)
 8013116:	2000      	movs	r0, #0
 8013118:	f7ed f8b6 	bl	8000288 <__aeabi_dsub>
 801311c:	ec53 2b18 	vmov	r2, r3, d8
 8013120:	f7ed fcdc 	bl	8000adc <__aeabi_dcmplt>
 8013124:	2800      	cmp	r0, #0
 8013126:	f040 80b9 	bne.w	801329c <_dtoa_r+0x6fc>
 801312a:	9b02      	ldr	r3, [sp, #8]
 801312c:	429d      	cmp	r5, r3
 801312e:	f43f af75 	beq.w	801301c <_dtoa_r+0x47c>
 8013132:	4b2f      	ldr	r3, [pc, #188]	; (80131f0 <_dtoa_r+0x650>)
 8013134:	ec51 0b18 	vmov	r0, r1, d8
 8013138:	2200      	movs	r2, #0
 801313a:	f7ed fa5d 	bl	80005f8 <__aeabi_dmul>
 801313e:	4b2c      	ldr	r3, [pc, #176]	; (80131f0 <_dtoa_r+0x650>)
 8013140:	ec41 0b18 	vmov	d8, r0, r1
 8013144:	2200      	movs	r2, #0
 8013146:	4630      	mov	r0, r6
 8013148:	4639      	mov	r1, r7
 801314a:	f7ed fa55 	bl	80005f8 <__aeabi_dmul>
 801314e:	4606      	mov	r6, r0
 8013150:	460f      	mov	r7, r1
 8013152:	e7c4      	b.n	80130de <_dtoa_r+0x53e>
 8013154:	ec51 0b17 	vmov	r0, r1, d7
 8013158:	f7ed fa4e 	bl	80005f8 <__aeabi_dmul>
 801315c:	9b02      	ldr	r3, [sp, #8]
 801315e:	9d00      	ldr	r5, [sp, #0]
 8013160:	930c      	str	r3, [sp, #48]	; 0x30
 8013162:	ec41 0b18 	vmov	d8, r0, r1
 8013166:	4639      	mov	r1, r7
 8013168:	4630      	mov	r0, r6
 801316a:	f7ed fcf5 	bl	8000b58 <__aeabi_d2iz>
 801316e:	9011      	str	r0, [sp, #68]	; 0x44
 8013170:	f7ed f9d8 	bl	8000524 <__aeabi_i2d>
 8013174:	4602      	mov	r2, r0
 8013176:	460b      	mov	r3, r1
 8013178:	4630      	mov	r0, r6
 801317a:	4639      	mov	r1, r7
 801317c:	f7ed f884 	bl	8000288 <__aeabi_dsub>
 8013180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013182:	3330      	adds	r3, #48	; 0x30
 8013184:	f805 3b01 	strb.w	r3, [r5], #1
 8013188:	9b02      	ldr	r3, [sp, #8]
 801318a:	429d      	cmp	r5, r3
 801318c:	4606      	mov	r6, r0
 801318e:	460f      	mov	r7, r1
 8013190:	f04f 0200 	mov.w	r2, #0
 8013194:	d134      	bne.n	8013200 <_dtoa_r+0x660>
 8013196:	4b19      	ldr	r3, [pc, #100]	; (80131fc <_dtoa_r+0x65c>)
 8013198:	ec51 0b18 	vmov	r0, r1, d8
 801319c:	f7ed f876 	bl	800028c <__adddf3>
 80131a0:	4602      	mov	r2, r0
 80131a2:	460b      	mov	r3, r1
 80131a4:	4630      	mov	r0, r6
 80131a6:	4639      	mov	r1, r7
 80131a8:	f7ed fcb6 	bl	8000b18 <__aeabi_dcmpgt>
 80131ac:	2800      	cmp	r0, #0
 80131ae:	d175      	bne.n	801329c <_dtoa_r+0x6fc>
 80131b0:	ec53 2b18 	vmov	r2, r3, d8
 80131b4:	4911      	ldr	r1, [pc, #68]	; (80131fc <_dtoa_r+0x65c>)
 80131b6:	2000      	movs	r0, #0
 80131b8:	f7ed f866 	bl	8000288 <__aeabi_dsub>
 80131bc:	4602      	mov	r2, r0
 80131be:	460b      	mov	r3, r1
 80131c0:	4630      	mov	r0, r6
 80131c2:	4639      	mov	r1, r7
 80131c4:	f7ed fc8a 	bl	8000adc <__aeabi_dcmplt>
 80131c8:	2800      	cmp	r0, #0
 80131ca:	f43f af27 	beq.w	801301c <_dtoa_r+0x47c>
 80131ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80131d0:	1e6b      	subs	r3, r5, #1
 80131d2:	930c      	str	r3, [sp, #48]	; 0x30
 80131d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80131d8:	2b30      	cmp	r3, #48	; 0x30
 80131da:	d0f8      	beq.n	80131ce <_dtoa_r+0x62e>
 80131dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80131e0:	e04a      	b.n	8013278 <_dtoa_r+0x6d8>
 80131e2:	bf00      	nop
 80131e4:	0801b278 	.word	0x0801b278
 80131e8:	0801b250 	.word	0x0801b250
 80131ec:	3ff00000 	.word	0x3ff00000
 80131f0:	40240000 	.word	0x40240000
 80131f4:	401c0000 	.word	0x401c0000
 80131f8:	40140000 	.word	0x40140000
 80131fc:	3fe00000 	.word	0x3fe00000
 8013200:	4baf      	ldr	r3, [pc, #700]	; (80134c0 <_dtoa_r+0x920>)
 8013202:	f7ed f9f9 	bl	80005f8 <__aeabi_dmul>
 8013206:	4606      	mov	r6, r0
 8013208:	460f      	mov	r7, r1
 801320a:	e7ac      	b.n	8013166 <_dtoa_r+0x5c6>
 801320c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013210:	9d00      	ldr	r5, [sp, #0]
 8013212:	4642      	mov	r2, r8
 8013214:	464b      	mov	r3, r9
 8013216:	4630      	mov	r0, r6
 8013218:	4639      	mov	r1, r7
 801321a:	f7ed fb17 	bl	800084c <__aeabi_ddiv>
 801321e:	f7ed fc9b 	bl	8000b58 <__aeabi_d2iz>
 8013222:	9002      	str	r0, [sp, #8]
 8013224:	f7ed f97e 	bl	8000524 <__aeabi_i2d>
 8013228:	4642      	mov	r2, r8
 801322a:	464b      	mov	r3, r9
 801322c:	f7ed f9e4 	bl	80005f8 <__aeabi_dmul>
 8013230:	4602      	mov	r2, r0
 8013232:	460b      	mov	r3, r1
 8013234:	4630      	mov	r0, r6
 8013236:	4639      	mov	r1, r7
 8013238:	f7ed f826 	bl	8000288 <__aeabi_dsub>
 801323c:	9e02      	ldr	r6, [sp, #8]
 801323e:	9f01      	ldr	r7, [sp, #4]
 8013240:	3630      	adds	r6, #48	; 0x30
 8013242:	f805 6b01 	strb.w	r6, [r5], #1
 8013246:	9e00      	ldr	r6, [sp, #0]
 8013248:	1bae      	subs	r6, r5, r6
 801324a:	42b7      	cmp	r7, r6
 801324c:	4602      	mov	r2, r0
 801324e:	460b      	mov	r3, r1
 8013250:	d137      	bne.n	80132c2 <_dtoa_r+0x722>
 8013252:	f7ed f81b 	bl	800028c <__adddf3>
 8013256:	4642      	mov	r2, r8
 8013258:	464b      	mov	r3, r9
 801325a:	4606      	mov	r6, r0
 801325c:	460f      	mov	r7, r1
 801325e:	f7ed fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 8013262:	b9c8      	cbnz	r0, 8013298 <_dtoa_r+0x6f8>
 8013264:	4642      	mov	r2, r8
 8013266:	464b      	mov	r3, r9
 8013268:	4630      	mov	r0, r6
 801326a:	4639      	mov	r1, r7
 801326c:	f7ed fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8013270:	b110      	cbz	r0, 8013278 <_dtoa_r+0x6d8>
 8013272:	9b02      	ldr	r3, [sp, #8]
 8013274:	07d9      	lsls	r1, r3, #31
 8013276:	d40f      	bmi.n	8013298 <_dtoa_r+0x6f8>
 8013278:	4620      	mov	r0, r4
 801327a:	4659      	mov	r1, fp
 801327c:	f000 fba8 	bl	80139d0 <_Bfree>
 8013280:	2300      	movs	r3, #0
 8013282:	702b      	strb	r3, [r5, #0]
 8013284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013286:	f10a 0001 	add.w	r0, sl, #1
 801328a:	6018      	str	r0, [r3, #0]
 801328c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801328e:	2b00      	cmp	r3, #0
 8013290:	f43f acd8 	beq.w	8012c44 <_dtoa_r+0xa4>
 8013294:	601d      	str	r5, [r3, #0]
 8013296:	e4d5      	b.n	8012c44 <_dtoa_r+0xa4>
 8013298:	f8cd a01c 	str.w	sl, [sp, #28]
 801329c:	462b      	mov	r3, r5
 801329e:	461d      	mov	r5, r3
 80132a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80132a4:	2a39      	cmp	r2, #57	; 0x39
 80132a6:	d108      	bne.n	80132ba <_dtoa_r+0x71a>
 80132a8:	9a00      	ldr	r2, [sp, #0]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d1f7      	bne.n	801329e <_dtoa_r+0x6fe>
 80132ae:	9a07      	ldr	r2, [sp, #28]
 80132b0:	9900      	ldr	r1, [sp, #0]
 80132b2:	3201      	adds	r2, #1
 80132b4:	9207      	str	r2, [sp, #28]
 80132b6:	2230      	movs	r2, #48	; 0x30
 80132b8:	700a      	strb	r2, [r1, #0]
 80132ba:	781a      	ldrb	r2, [r3, #0]
 80132bc:	3201      	adds	r2, #1
 80132be:	701a      	strb	r2, [r3, #0]
 80132c0:	e78c      	b.n	80131dc <_dtoa_r+0x63c>
 80132c2:	4b7f      	ldr	r3, [pc, #508]	; (80134c0 <_dtoa_r+0x920>)
 80132c4:	2200      	movs	r2, #0
 80132c6:	f7ed f997 	bl	80005f8 <__aeabi_dmul>
 80132ca:	2200      	movs	r2, #0
 80132cc:	2300      	movs	r3, #0
 80132ce:	4606      	mov	r6, r0
 80132d0:	460f      	mov	r7, r1
 80132d2:	f7ed fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80132d6:	2800      	cmp	r0, #0
 80132d8:	d09b      	beq.n	8013212 <_dtoa_r+0x672>
 80132da:	e7cd      	b.n	8013278 <_dtoa_r+0x6d8>
 80132dc:	9a08      	ldr	r2, [sp, #32]
 80132de:	2a00      	cmp	r2, #0
 80132e0:	f000 80c4 	beq.w	801346c <_dtoa_r+0x8cc>
 80132e4:	9a05      	ldr	r2, [sp, #20]
 80132e6:	2a01      	cmp	r2, #1
 80132e8:	f300 80a8 	bgt.w	801343c <_dtoa_r+0x89c>
 80132ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80132ee:	2a00      	cmp	r2, #0
 80132f0:	f000 80a0 	beq.w	8013434 <_dtoa_r+0x894>
 80132f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80132f8:	9e06      	ldr	r6, [sp, #24]
 80132fa:	4645      	mov	r5, r8
 80132fc:	9a04      	ldr	r2, [sp, #16]
 80132fe:	2101      	movs	r1, #1
 8013300:	441a      	add	r2, r3
 8013302:	4620      	mov	r0, r4
 8013304:	4498      	add	r8, r3
 8013306:	9204      	str	r2, [sp, #16]
 8013308:	f000 fc1e 	bl	8013b48 <__i2b>
 801330c:	4607      	mov	r7, r0
 801330e:	2d00      	cmp	r5, #0
 8013310:	dd0b      	ble.n	801332a <_dtoa_r+0x78a>
 8013312:	9b04      	ldr	r3, [sp, #16]
 8013314:	2b00      	cmp	r3, #0
 8013316:	dd08      	ble.n	801332a <_dtoa_r+0x78a>
 8013318:	42ab      	cmp	r3, r5
 801331a:	9a04      	ldr	r2, [sp, #16]
 801331c:	bfa8      	it	ge
 801331e:	462b      	movge	r3, r5
 8013320:	eba8 0803 	sub.w	r8, r8, r3
 8013324:	1aed      	subs	r5, r5, r3
 8013326:	1ad3      	subs	r3, r2, r3
 8013328:	9304      	str	r3, [sp, #16]
 801332a:	9b06      	ldr	r3, [sp, #24]
 801332c:	b1fb      	cbz	r3, 801336e <_dtoa_r+0x7ce>
 801332e:	9b08      	ldr	r3, [sp, #32]
 8013330:	2b00      	cmp	r3, #0
 8013332:	f000 809f 	beq.w	8013474 <_dtoa_r+0x8d4>
 8013336:	2e00      	cmp	r6, #0
 8013338:	dd11      	ble.n	801335e <_dtoa_r+0x7be>
 801333a:	4639      	mov	r1, r7
 801333c:	4632      	mov	r2, r6
 801333e:	4620      	mov	r0, r4
 8013340:	f000 fcbe 	bl	8013cc0 <__pow5mult>
 8013344:	465a      	mov	r2, fp
 8013346:	4601      	mov	r1, r0
 8013348:	4607      	mov	r7, r0
 801334a:	4620      	mov	r0, r4
 801334c:	f000 fc12 	bl	8013b74 <__multiply>
 8013350:	4659      	mov	r1, fp
 8013352:	9007      	str	r0, [sp, #28]
 8013354:	4620      	mov	r0, r4
 8013356:	f000 fb3b 	bl	80139d0 <_Bfree>
 801335a:	9b07      	ldr	r3, [sp, #28]
 801335c:	469b      	mov	fp, r3
 801335e:	9b06      	ldr	r3, [sp, #24]
 8013360:	1b9a      	subs	r2, r3, r6
 8013362:	d004      	beq.n	801336e <_dtoa_r+0x7ce>
 8013364:	4659      	mov	r1, fp
 8013366:	4620      	mov	r0, r4
 8013368:	f000 fcaa 	bl	8013cc0 <__pow5mult>
 801336c:	4683      	mov	fp, r0
 801336e:	2101      	movs	r1, #1
 8013370:	4620      	mov	r0, r4
 8013372:	f000 fbe9 	bl	8013b48 <__i2b>
 8013376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013378:	2b00      	cmp	r3, #0
 801337a:	4606      	mov	r6, r0
 801337c:	dd7c      	ble.n	8013478 <_dtoa_r+0x8d8>
 801337e:	461a      	mov	r2, r3
 8013380:	4601      	mov	r1, r0
 8013382:	4620      	mov	r0, r4
 8013384:	f000 fc9c 	bl	8013cc0 <__pow5mult>
 8013388:	9b05      	ldr	r3, [sp, #20]
 801338a:	2b01      	cmp	r3, #1
 801338c:	4606      	mov	r6, r0
 801338e:	dd76      	ble.n	801347e <_dtoa_r+0x8de>
 8013390:	2300      	movs	r3, #0
 8013392:	9306      	str	r3, [sp, #24]
 8013394:	6933      	ldr	r3, [r6, #16]
 8013396:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801339a:	6918      	ldr	r0, [r3, #16]
 801339c:	f000 fb84 	bl	8013aa8 <__hi0bits>
 80133a0:	f1c0 0020 	rsb	r0, r0, #32
 80133a4:	9b04      	ldr	r3, [sp, #16]
 80133a6:	4418      	add	r0, r3
 80133a8:	f010 001f 	ands.w	r0, r0, #31
 80133ac:	f000 8086 	beq.w	80134bc <_dtoa_r+0x91c>
 80133b0:	f1c0 0320 	rsb	r3, r0, #32
 80133b4:	2b04      	cmp	r3, #4
 80133b6:	dd7f      	ble.n	80134b8 <_dtoa_r+0x918>
 80133b8:	f1c0 001c 	rsb	r0, r0, #28
 80133bc:	9b04      	ldr	r3, [sp, #16]
 80133be:	4403      	add	r3, r0
 80133c0:	4480      	add	r8, r0
 80133c2:	4405      	add	r5, r0
 80133c4:	9304      	str	r3, [sp, #16]
 80133c6:	f1b8 0f00 	cmp.w	r8, #0
 80133ca:	dd05      	ble.n	80133d8 <_dtoa_r+0x838>
 80133cc:	4659      	mov	r1, fp
 80133ce:	4642      	mov	r2, r8
 80133d0:	4620      	mov	r0, r4
 80133d2:	f000 fccf 	bl	8013d74 <__lshift>
 80133d6:	4683      	mov	fp, r0
 80133d8:	9b04      	ldr	r3, [sp, #16]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	dd05      	ble.n	80133ea <_dtoa_r+0x84a>
 80133de:	4631      	mov	r1, r6
 80133e0:	461a      	mov	r2, r3
 80133e2:	4620      	mov	r0, r4
 80133e4:	f000 fcc6 	bl	8013d74 <__lshift>
 80133e8:	4606      	mov	r6, r0
 80133ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d069      	beq.n	80134c4 <_dtoa_r+0x924>
 80133f0:	4631      	mov	r1, r6
 80133f2:	4658      	mov	r0, fp
 80133f4:	f000 fd2a 	bl	8013e4c <__mcmp>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	da63      	bge.n	80134c4 <_dtoa_r+0x924>
 80133fc:	2300      	movs	r3, #0
 80133fe:	4659      	mov	r1, fp
 8013400:	220a      	movs	r2, #10
 8013402:	4620      	mov	r0, r4
 8013404:	f000 fb06 	bl	8013a14 <__multadd>
 8013408:	9b08      	ldr	r3, [sp, #32]
 801340a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801340e:	4683      	mov	fp, r0
 8013410:	2b00      	cmp	r3, #0
 8013412:	f000 818f 	beq.w	8013734 <_dtoa_r+0xb94>
 8013416:	4639      	mov	r1, r7
 8013418:	2300      	movs	r3, #0
 801341a:	220a      	movs	r2, #10
 801341c:	4620      	mov	r0, r4
 801341e:	f000 faf9 	bl	8013a14 <__multadd>
 8013422:	f1b9 0f00 	cmp.w	r9, #0
 8013426:	4607      	mov	r7, r0
 8013428:	f300 808e 	bgt.w	8013548 <_dtoa_r+0x9a8>
 801342c:	9b05      	ldr	r3, [sp, #20]
 801342e:	2b02      	cmp	r3, #2
 8013430:	dc50      	bgt.n	80134d4 <_dtoa_r+0x934>
 8013432:	e089      	b.n	8013548 <_dtoa_r+0x9a8>
 8013434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801343a:	e75d      	b.n	80132f8 <_dtoa_r+0x758>
 801343c:	9b01      	ldr	r3, [sp, #4]
 801343e:	1e5e      	subs	r6, r3, #1
 8013440:	9b06      	ldr	r3, [sp, #24]
 8013442:	42b3      	cmp	r3, r6
 8013444:	bfbf      	itttt	lt
 8013446:	9b06      	ldrlt	r3, [sp, #24]
 8013448:	9606      	strlt	r6, [sp, #24]
 801344a:	1af2      	sublt	r2, r6, r3
 801344c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801344e:	bfb6      	itet	lt
 8013450:	189b      	addlt	r3, r3, r2
 8013452:	1b9e      	subge	r6, r3, r6
 8013454:	930d      	strlt	r3, [sp, #52]	; 0x34
 8013456:	9b01      	ldr	r3, [sp, #4]
 8013458:	bfb8      	it	lt
 801345a:	2600      	movlt	r6, #0
 801345c:	2b00      	cmp	r3, #0
 801345e:	bfb5      	itete	lt
 8013460:	eba8 0503 	sublt.w	r5, r8, r3
 8013464:	9b01      	ldrge	r3, [sp, #4]
 8013466:	2300      	movlt	r3, #0
 8013468:	4645      	movge	r5, r8
 801346a:	e747      	b.n	80132fc <_dtoa_r+0x75c>
 801346c:	9e06      	ldr	r6, [sp, #24]
 801346e:	9f08      	ldr	r7, [sp, #32]
 8013470:	4645      	mov	r5, r8
 8013472:	e74c      	b.n	801330e <_dtoa_r+0x76e>
 8013474:	9a06      	ldr	r2, [sp, #24]
 8013476:	e775      	b.n	8013364 <_dtoa_r+0x7c4>
 8013478:	9b05      	ldr	r3, [sp, #20]
 801347a:	2b01      	cmp	r3, #1
 801347c:	dc18      	bgt.n	80134b0 <_dtoa_r+0x910>
 801347e:	9b02      	ldr	r3, [sp, #8]
 8013480:	b9b3      	cbnz	r3, 80134b0 <_dtoa_r+0x910>
 8013482:	9b03      	ldr	r3, [sp, #12]
 8013484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013488:	b9a3      	cbnz	r3, 80134b4 <_dtoa_r+0x914>
 801348a:	9b03      	ldr	r3, [sp, #12]
 801348c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013490:	0d1b      	lsrs	r3, r3, #20
 8013492:	051b      	lsls	r3, r3, #20
 8013494:	b12b      	cbz	r3, 80134a2 <_dtoa_r+0x902>
 8013496:	9b04      	ldr	r3, [sp, #16]
 8013498:	3301      	adds	r3, #1
 801349a:	9304      	str	r3, [sp, #16]
 801349c:	f108 0801 	add.w	r8, r8, #1
 80134a0:	2301      	movs	r3, #1
 80134a2:	9306      	str	r3, [sp, #24]
 80134a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	f47f af74 	bne.w	8013394 <_dtoa_r+0x7f4>
 80134ac:	2001      	movs	r0, #1
 80134ae:	e779      	b.n	80133a4 <_dtoa_r+0x804>
 80134b0:	2300      	movs	r3, #0
 80134b2:	e7f6      	b.n	80134a2 <_dtoa_r+0x902>
 80134b4:	9b02      	ldr	r3, [sp, #8]
 80134b6:	e7f4      	b.n	80134a2 <_dtoa_r+0x902>
 80134b8:	d085      	beq.n	80133c6 <_dtoa_r+0x826>
 80134ba:	4618      	mov	r0, r3
 80134bc:	301c      	adds	r0, #28
 80134be:	e77d      	b.n	80133bc <_dtoa_r+0x81c>
 80134c0:	40240000 	.word	0x40240000
 80134c4:	9b01      	ldr	r3, [sp, #4]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	dc38      	bgt.n	801353c <_dtoa_r+0x99c>
 80134ca:	9b05      	ldr	r3, [sp, #20]
 80134cc:	2b02      	cmp	r3, #2
 80134ce:	dd35      	ble.n	801353c <_dtoa_r+0x99c>
 80134d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80134d4:	f1b9 0f00 	cmp.w	r9, #0
 80134d8:	d10d      	bne.n	80134f6 <_dtoa_r+0x956>
 80134da:	4631      	mov	r1, r6
 80134dc:	464b      	mov	r3, r9
 80134de:	2205      	movs	r2, #5
 80134e0:	4620      	mov	r0, r4
 80134e2:	f000 fa97 	bl	8013a14 <__multadd>
 80134e6:	4601      	mov	r1, r0
 80134e8:	4606      	mov	r6, r0
 80134ea:	4658      	mov	r0, fp
 80134ec:	f000 fcae 	bl	8013e4c <__mcmp>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	f73f adbd 	bgt.w	8013070 <_dtoa_r+0x4d0>
 80134f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134f8:	9d00      	ldr	r5, [sp, #0]
 80134fa:	ea6f 0a03 	mvn.w	sl, r3
 80134fe:	f04f 0800 	mov.w	r8, #0
 8013502:	4631      	mov	r1, r6
 8013504:	4620      	mov	r0, r4
 8013506:	f000 fa63 	bl	80139d0 <_Bfree>
 801350a:	2f00      	cmp	r7, #0
 801350c:	f43f aeb4 	beq.w	8013278 <_dtoa_r+0x6d8>
 8013510:	f1b8 0f00 	cmp.w	r8, #0
 8013514:	d005      	beq.n	8013522 <_dtoa_r+0x982>
 8013516:	45b8      	cmp	r8, r7
 8013518:	d003      	beq.n	8013522 <_dtoa_r+0x982>
 801351a:	4641      	mov	r1, r8
 801351c:	4620      	mov	r0, r4
 801351e:	f000 fa57 	bl	80139d0 <_Bfree>
 8013522:	4639      	mov	r1, r7
 8013524:	4620      	mov	r0, r4
 8013526:	f000 fa53 	bl	80139d0 <_Bfree>
 801352a:	e6a5      	b.n	8013278 <_dtoa_r+0x6d8>
 801352c:	2600      	movs	r6, #0
 801352e:	4637      	mov	r7, r6
 8013530:	e7e1      	b.n	80134f6 <_dtoa_r+0x956>
 8013532:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013534:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013538:	4637      	mov	r7, r6
 801353a:	e599      	b.n	8013070 <_dtoa_r+0x4d0>
 801353c:	9b08      	ldr	r3, [sp, #32]
 801353e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013542:	2b00      	cmp	r3, #0
 8013544:	f000 80fd 	beq.w	8013742 <_dtoa_r+0xba2>
 8013548:	2d00      	cmp	r5, #0
 801354a:	dd05      	ble.n	8013558 <_dtoa_r+0x9b8>
 801354c:	4639      	mov	r1, r7
 801354e:	462a      	mov	r2, r5
 8013550:	4620      	mov	r0, r4
 8013552:	f000 fc0f 	bl	8013d74 <__lshift>
 8013556:	4607      	mov	r7, r0
 8013558:	9b06      	ldr	r3, [sp, #24]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d05c      	beq.n	8013618 <_dtoa_r+0xa78>
 801355e:	6879      	ldr	r1, [r7, #4]
 8013560:	4620      	mov	r0, r4
 8013562:	f000 f9f5 	bl	8013950 <_Balloc>
 8013566:	4605      	mov	r5, r0
 8013568:	b928      	cbnz	r0, 8013576 <_dtoa_r+0x9d6>
 801356a:	4b80      	ldr	r3, [pc, #512]	; (801376c <_dtoa_r+0xbcc>)
 801356c:	4602      	mov	r2, r0
 801356e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013572:	f7ff bb2e 	b.w	8012bd2 <_dtoa_r+0x32>
 8013576:	693a      	ldr	r2, [r7, #16]
 8013578:	3202      	adds	r2, #2
 801357a:	0092      	lsls	r2, r2, #2
 801357c:	f107 010c 	add.w	r1, r7, #12
 8013580:	300c      	adds	r0, #12
 8013582:	f7fe fc4c 	bl	8011e1e <memcpy>
 8013586:	2201      	movs	r2, #1
 8013588:	4629      	mov	r1, r5
 801358a:	4620      	mov	r0, r4
 801358c:	f000 fbf2 	bl	8013d74 <__lshift>
 8013590:	9b00      	ldr	r3, [sp, #0]
 8013592:	3301      	adds	r3, #1
 8013594:	9301      	str	r3, [sp, #4]
 8013596:	9b00      	ldr	r3, [sp, #0]
 8013598:	444b      	add	r3, r9
 801359a:	9307      	str	r3, [sp, #28]
 801359c:	9b02      	ldr	r3, [sp, #8]
 801359e:	f003 0301 	and.w	r3, r3, #1
 80135a2:	46b8      	mov	r8, r7
 80135a4:	9306      	str	r3, [sp, #24]
 80135a6:	4607      	mov	r7, r0
 80135a8:	9b01      	ldr	r3, [sp, #4]
 80135aa:	4631      	mov	r1, r6
 80135ac:	3b01      	subs	r3, #1
 80135ae:	4658      	mov	r0, fp
 80135b0:	9302      	str	r3, [sp, #8]
 80135b2:	f7ff fa67 	bl	8012a84 <quorem>
 80135b6:	4603      	mov	r3, r0
 80135b8:	3330      	adds	r3, #48	; 0x30
 80135ba:	9004      	str	r0, [sp, #16]
 80135bc:	4641      	mov	r1, r8
 80135be:	4658      	mov	r0, fp
 80135c0:	9308      	str	r3, [sp, #32]
 80135c2:	f000 fc43 	bl	8013e4c <__mcmp>
 80135c6:	463a      	mov	r2, r7
 80135c8:	4681      	mov	r9, r0
 80135ca:	4631      	mov	r1, r6
 80135cc:	4620      	mov	r0, r4
 80135ce:	f000 fc59 	bl	8013e84 <__mdiff>
 80135d2:	68c2      	ldr	r2, [r0, #12]
 80135d4:	9b08      	ldr	r3, [sp, #32]
 80135d6:	4605      	mov	r5, r0
 80135d8:	bb02      	cbnz	r2, 801361c <_dtoa_r+0xa7c>
 80135da:	4601      	mov	r1, r0
 80135dc:	4658      	mov	r0, fp
 80135de:	f000 fc35 	bl	8013e4c <__mcmp>
 80135e2:	9b08      	ldr	r3, [sp, #32]
 80135e4:	4602      	mov	r2, r0
 80135e6:	4629      	mov	r1, r5
 80135e8:	4620      	mov	r0, r4
 80135ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80135ee:	f000 f9ef 	bl	80139d0 <_Bfree>
 80135f2:	9b05      	ldr	r3, [sp, #20]
 80135f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135f6:	9d01      	ldr	r5, [sp, #4]
 80135f8:	ea43 0102 	orr.w	r1, r3, r2
 80135fc:	9b06      	ldr	r3, [sp, #24]
 80135fe:	430b      	orrs	r3, r1
 8013600:	9b08      	ldr	r3, [sp, #32]
 8013602:	d10d      	bne.n	8013620 <_dtoa_r+0xa80>
 8013604:	2b39      	cmp	r3, #57	; 0x39
 8013606:	d029      	beq.n	801365c <_dtoa_r+0xabc>
 8013608:	f1b9 0f00 	cmp.w	r9, #0
 801360c:	dd01      	ble.n	8013612 <_dtoa_r+0xa72>
 801360e:	9b04      	ldr	r3, [sp, #16]
 8013610:	3331      	adds	r3, #49	; 0x31
 8013612:	9a02      	ldr	r2, [sp, #8]
 8013614:	7013      	strb	r3, [r2, #0]
 8013616:	e774      	b.n	8013502 <_dtoa_r+0x962>
 8013618:	4638      	mov	r0, r7
 801361a:	e7b9      	b.n	8013590 <_dtoa_r+0x9f0>
 801361c:	2201      	movs	r2, #1
 801361e:	e7e2      	b.n	80135e6 <_dtoa_r+0xa46>
 8013620:	f1b9 0f00 	cmp.w	r9, #0
 8013624:	db06      	blt.n	8013634 <_dtoa_r+0xa94>
 8013626:	9905      	ldr	r1, [sp, #20]
 8013628:	ea41 0909 	orr.w	r9, r1, r9
 801362c:	9906      	ldr	r1, [sp, #24]
 801362e:	ea59 0101 	orrs.w	r1, r9, r1
 8013632:	d120      	bne.n	8013676 <_dtoa_r+0xad6>
 8013634:	2a00      	cmp	r2, #0
 8013636:	ddec      	ble.n	8013612 <_dtoa_r+0xa72>
 8013638:	4659      	mov	r1, fp
 801363a:	2201      	movs	r2, #1
 801363c:	4620      	mov	r0, r4
 801363e:	9301      	str	r3, [sp, #4]
 8013640:	f000 fb98 	bl	8013d74 <__lshift>
 8013644:	4631      	mov	r1, r6
 8013646:	4683      	mov	fp, r0
 8013648:	f000 fc00 	bl	8013e4c <__mcmp>
 801364c:	2800      	cmp	r0, #0
 801364e:	9b01      	ldr	r3, [sp, #4]
 8013650:	dc02      	bgt.n	8013658 <_dtoa_r+0xab8>
 8013652:	d1de      	bne.n	8013612 <_dtoa_r+0xa72>
 8013654:	07da      	lsls	r2, r3, #31
 8013656:	d5dc      	bpl.n	8013612 <_dtoa_r+0xa72>
 8013658:	2b39      	cmp	r3, #57	; 0x39
 801365a:	d1d8      	bne.n	801360e <_dtoa_r+0xa6e>
 801365c:	9a02      	ldr	r2, [sp, #8]
 801365e:	2339      	movs	r3, #57	; 0x39
 8013660:	7013      	strb	r3, [r2, #0]
 8013662:	462b      	mov	r3, r5
 8013664:	461d      	mov	r5, r3
 8013666:	3b01      	subs	r3, #1
 8013668:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801366c:	2a39      	cmp	r2, #57	; 0x39
 801366e:	d050      	beq.n	8013712 <_dtoa_r+0xb72>
 8013670:	3201      	adds	r2, #1
 8013672:	701a      	strb	r2, [r3, #0]
 8013674:	e745      	b.n	8013502 <_dtoa_r+0x962>
 8013676:	2a00      	cmp	r2, #0
 8013678:	dd03      	ble.n	8013682 <_dtoa_r+0xae2>
 801367a:	2b39      	cmp	r3, #57	; 0x39
 801367c:	d0ee      	beq.n	801365c <_dtoa_r+0xabc>
 801367e:	3301      	adds	r3, #1
 8013680:	e7c7      	b.n	8013612 <_dtoa_r+0xa72>
 8013682:	9a01      	ldr	r2, [sp, #4]
 8013684:	9907      	ldr	r1, [sp, #28]
 8013686:	f802 3c01 	strb.w	r3, [r2, #-1]
 801368a:	428a      	cmp	r2, r1
 801368c:	d02a      	beq.n	80136e4 <_dtoa_r+0xb44>
 801368e:	4659      	mov	r1, fp
 8013690:	2300      	movs	r3, #0
 8013692:	220a      	movs	r2, #10
 8013694:	4620      	mov	r0, r4
 8013696:	f000 f9bd 	bl	8013a14 <__multadd>
 801369a:	45b8      	cmp	r8, r7
 801369c:	4683      	mov	fp, r0
 801369e:	f04f 0300 	mov.w	r3, #0
 80136a2:	f04f 020a 	mov.w	r2, #10
 80136a6:	4641      	mov	r1, r8
 80136a8:	4620      	mov	r0, r4
 80136aa:	d107      	bne.n	80136bc <_dtoa_r+0xb1c>
 80136ac:	f000 f9b2 	bl	8013a14 <__multadd>
 80136b0:	4680      	mov	r8, r0
 80136b2:	4607      	mov	r7, r0
 80136b4:	9b01      	ldr	r3, [sp, #4]
 80136b6:	3301      	adds	r3, #1
 80136b8:	9301      	str	r3, [sp, #4]
 80136ba:	e775      	b.n	80135a8 <_dtoa_r+0xa08>
 80136bc:	f000 f9aa 	bl	8013a14 <__multadd>
 80136c0:	4639      	mov	r1, r7
 80136c2:	4680      	mov	r8, r0
 80136c4:	2300      	movs	r3, #0
 80136c6:	220a      	movs	r2, #10
 80136c8:	4620      	mov	r0, r4
 80136ca:	f000 f9a3 	bl	8013a14 <__multadd>
 80136ce:	4607      	mov	r7, r0
 80136d0:	e7f0      	b.n	80136b4 <_dtoa_r+0xb14>
 80136d2:	f1b9 0f00 	cmp.w	r9, #0
 80136d6:	9a00      	ldr	r2, [sp, #0]
 80136d8:	bfcc      	ite	gt
 80136da:	464d      	movgt	r5, r9
 80136dc:	2501      	movle	r5, #1
 80136de:	4415      	add	r5, r2
 80136e0:	f04f 0800 	mov.w	r8, #0
 80136e4:	4659      	mov	r1, fp
 80136e6:	2201      	movs	r2, #1
 80136e8:	4620      	mov	r0, r4
 80136ea:	9301      	str	r3, [sp, #4]
 80136ec:	f000 fb42 	bl	8013d74 <__lshift>
 80136f0:	4631      	mov	r1, r6
 80136f2:	4683      	mov	fp, r0
 80136f4:	f000 fbaa 	bl	8013e4c <__mcmp>
 80136f8:	2800      	cmp	r0, #0
 80136fa:	dcb2      	bgt.n	8013662 <_dtoa_r+0xac2>
 80136fc:	d102      	bne.n	8013704 <_dtoa_r+0xb64>
 80136fe:	9b01      	ldr	r3, [sp, #4]
 8013700:	07db      	lsls	r3, r3, #31
 8013702:	d4ae      	bmi.n	8013662 <_dtoa_r+0xac2>
 8013704:	462b      	mov	r3, r5
 8013706:	461d      	mov	r5, r3
 8013708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801370c:	2a30      	cmp	r2, #48	; 0x30
 801370e:	d0fa      	beq.n	8013706 <_dtoa_r+0xb66>
 8013710:	e6f7      	b.n	8013502 <_dtoa_r+0x962>
 8013712:	9a00      	ldr	r2, [sp, #0]
 8013714:	429a      	cmp	r2, r3
 8013716:	d1a5      	bne.n	8013664 <_dtoa_r+0xac4>
 8013718:	f10a 0a01 	add.w	sl, sl, #1
 801371c:	2331      	movs	r3, #49	; 0x31
 801371e:	e779      	b.n	8013614 <_dtoa_r+0xa74>
 8013720:	4b13      	ldr	r3, [pc, #76]	; (8013770 <_dtoa_r+0xbd0>)
 8013722:	f7ff baaf 	b.w	8012c84 <_dtoa_r+0xe4>
 8013726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013728:	2b00      	cmp	r3, #0
 801372a:	f47f aa86 	bne.w	8012c3a <_dtoa_r+0x9a>
 801372e:	4b11      	ldr	r3, [pc, #68]	; (8013774 <_dtoa_r+0xbd4>)
 8013730:	f7ff baa8 	b.w	8012c84 <_dtoa_r+0xe4>
 8013734:	f1b9 0f00 	cmp.w	r9, #0
 8013738:	dc03      	bgt.n	8013742 <_dtoa_r+0xba2>
 801373a:	9b05      	ldr	r3, [sp, #20]
 801373c:	2b02      	cmp	r3, #2
 801373e:	f73f aec9 	bgt.w	80134d4 <_dtoa_r+0x934>
 8013742:	9d00      	ldr	r5, [sp, #0]
 8013744:	4631      	mov	r1, r6
 8013746:	4658      	mov	r0, fp
 8013748:	f7ff f99c 	bl	8012a84 <quorem>
 801374c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013750:	f805 3b01 	strb.w	r3, [r5], #1
 8013754:	9a00      	ldr	r2, [sp, #0]
 8013756:	1aaa      	subs	r2, r5, r2
 8013758:	4591      	cmp	r9, r2
 801375a:	ddba      	ble.n	80136d2 <_dtoa_r+0xb32>
 801375c:	4659      	mov	r1, fp
 801375e:	2300      	movs	r3, #0
 8013760:	220a      	movs	r2, #10
 8013762:	4620      	mov	r0, r4
 8013764:	f000 f956 	bl	8013a14 <__multadd>
 8013768:	4683      	mov	fp, r0
 801376a:	e7eb      	b.n	8013744 <_dtoa_r+0xba4>
 801376c:	0801b1dc 	.word	0x0801b1dc
 8013770:	0801b110 	.word	0x0801b110
 8013774:	0801b159 	.word	0x0801b159

08013778 <__sflush_r>:
 8013778:	898a      	ldrh	r2, [r1, #12]
 801377a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801377e:	4605      	mov	r5, r0
 8013780:	0710      	lsls	r0, r2, #28
 8013782:	460c      	mov	r4, r1
 8013784:	d458      	bmi.n	8013838 <__sflush_r+0xc0>
 8013786:	684b      	ldr	r3, [r1, #4]
 8013788:	2b00      	cmp	r3, #0
 801378a:	dc05      	bgt.n	8013798 <__sflush_r+0x20>
 801378c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801378e:	2b00      	cmp	r3, #0
 8013790:	dc02      	bgt.n	8013798 <__sflush_r+0x20>
 8013792:	2000      	movs	r0, #0
 8013794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801379a:	2e00      	cmp	r6, #0
 801379c:	d0f9      	beq.n	8013792 <__sflush_r+0x1a>
 801379e:	2300      	movs	r3, #0
 80137a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80137a4:	682f      	ldr	r7, [r5, #0]
 80137a6:	602b      	str	r3, [r5, #0]
 80137a8:	d032      	beq.n	8013810 <__sflush_r+0x98>
 80137aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80137ac:	89a3      	ldrh	r3, [r4, #12]
 80137ae:	075a      	lsls	r2, r3, #29
 80137b0:	d505      	bpl.n	80137be <__sflush_r+0x46>
 80137b2:	6863      	ldr	r3, [r4, #4]
 80137b4:	1ac0      	subs	r0, r0, r3
 80137b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80137b8:	b10b      	cbz	r3, 80137be <__sflush_r+0x46>
 80137ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80137bc:	1ac0      	subs	r0, r0, r3
 80137be:	2300      	movs	r3, #0
 80137c0:	4602      	mov	r2, r0
 80137c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80137c4:	6a21      	ldr	r1, [r4, #32]
 80137c6:	4628      	mov	r0, r5
 80137c8:	47b0      	blx	r6
 80137ca:	1c43      	adds	r3, r0, #1
 80137cc:	89a3      	ldrh	r3, [r4, #12]
 80137ce:	d106      	bne.n	80137de <__sflush_r+0x66>
 80137d0:	6829      	ldr	r1, [r5, #0]
 80137d2:	291d      	cmp	r1, #29
 80137d4:	d82c      	bhi.n	8013830 <__sflush_r+0xb8>
 80137d6:	4a2a      	ldr	r2, [pc, #168]	; (8013880 <__sflush_r+0x108>)
 80137d8:	40ca      	lsrs	r2, r1
 80137da:	07d6      	lsls	r6, r2, #31
 80137dc:	d528      	bpl.n	8013830 <__sflush_r+0xb8>
 80137de:	2200      	movs	r2, #0
 80137e0:	6062      	str	r2, [r4, #4]
 80137e2:	04d9      	lsls	r1, r3, #19
 80137e4:	6922      	ldr	r2, [r4, #16]
 80137e6:	6022      	str	r2, [r4, #0]
 80137e8:	d504      	bpl.n	80137f4 <__sflush_r+0x7c>
 80137ea:	1c42      	adds	r2, r0, #1
 80137ec:	d101      	bne.n	80137f2 <__sflush_r+0x7a>
 80137ee:	682b      	ldr	r3, [r5, #0]
 80137f0:	b903      	cbnz	r3, 80137f4 <__sflush_r+0x7c>
 80137f2:	6560      	str	r0, [r4, #84]	; 0x54
 80137f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80137f6:	602f      	str	r7, [r5, #0]
 80137f8:	2900      	cmp	r1, #0
 80137fa:	d0ca      	beq.n	8013792 <__sflush_r+0x1a>
 80137fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013800:	4299      	cmp	r1, r3
 8013802:	d002      	beq.n	801380a <__sflush_r+0x92>
 8013804:	4628      	mov	r0, r5
 8013806:	f000 fc31 	bl	801406c <_free_r>
 801380a:	2000      	movs	r0, #0
 801380c:	6360      	str	r0, [r4, #52]	; 0x34
 801380e:	e7c1      	b.n	8013794 <__sflush_r+0x1c>
 8013810:	6a21      	ldr	r1, [r4, #32]
 8013812:	2301      	movs	r3, #1
 8013814:	4628      	mov	r0, r5
 8013816:	47b0      	blx	r6
 8013818:	1c41      	adds	r1, r0, #1
 801381a:	d1c7      	bne.n	80137ac <__sflush_r+0x34>
 801381c:	682b      	ldr	r3, [r5, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d0c4      	beq.n	80137ac <__sflush_r+0x34>
 8013822:	2b1d      	cmp	r3, #29
 8013824:	d001      	beq.n	801382a <__sflush_r+0xb2>
 8013826:	2b16      	cmp	r3, #22
 8013828:	d101      	bne.n	801382e <__sflush_r+0xb6>
 801382a:	602f      	str	r7, [r5, #0]
 801382c:	e7b1      	b.n	8013792 <__sflush_r+0x1a>
 801382e:	89a3      	ldrh	r3, [r4, #12]
 8013830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013834:	81a3      	strh	r3, [r4, #12]
 8013836:	e7ad      	b.n	8013794 <__sflush_r+0x1c>
 8013838:	690f      	ldr	r7, [r1, #16]
 801383a:	2f00      	cmp	r7, #0
 801383c:	d0a9      	beq.n	8013792 <__sflush_r+0x1a>
 801383e:	0793      	lsls	r3, r2, #30
 8013840:	680e      	ldr	r6, [r1, #0]
 8013842:	bf08      	it	eq
 8013844:	694b      	ldreq	r3, [r1, #20]
 8013846:	600f      	str	r7, [r1, #0]
 8013848:	bf18      	it	ne
 801384a:	2300      	movne	r3, #0
 801384c:	eba6 0807 	sub.w	r8, r6, r7
 8013850:	608b      	str	r3, [r1, #8]
 8013852:	f1b8 0f00 	cmp.w	r8, #0
 8013856:	dd9c      	ble.n	8013792 <__sflush_r+0x1a>
 8013858:	6a21      	ldr	r1, [r4, #32]
 801385a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801385c:	4643      	mov	r3, r8
 801385e:	463a      	mov	r2, r7
 8013860:	4628      	mov	r0, r5
 8013862:	47b0      	blx	r6
 8013864:	2800      	cmp	r0, #0
 8013866:	dc06      	bgt.n	8013876 <__sflush_r+0xfe>
 8013868:	89a3      	ldrh	r3, [r4, #12]
 801386a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801386e:	81a3      	strh	r3, [r4, #12]
 8013870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013874:	e78e      	b.n	8013794 <__sflush_r+0x1c>
 8013876:	4407      	add	r7, r0
 8013878:	eba8 0800 	sub.w	r8, r8, r0
 801387c:	e7e9      	b.n	8013852 <__sflush_r+0xda>
 801387e:	bf00      	nop
 8013880:	20400001 	.word	0x20400001

08013884 <_fflush_r>:
 8013884:	b538      	push	{r3, r4, r5, lr}
 8013886:	690b      	ldr	r3, [r1, #16]
 8013888:	4605      	mov	r5, r0
 801388a:	460c      	mov	r4, r1
 801388c:	b913      	cbnz	r3, 8013894 <_fflush_r+0x10>
 801388e:	2500      	movs	r5, #0
 8013890:	4628      	mov	r0, r5
 8013892:	bd38      	pop	{r3, r4, r5, pc}
 8013894:	b118      	cbz	r0, 801389e <_fflush_r+0x1a>
 8013896:	6983      	ldr	r3, [r0, #24]
 8013898:	b90b      	cbnz	r3, 801389e <_fflush_r+0x1a>
 801389a:	f7fe f9e1 	bl	8011c60 <__sinit>
 801389e:	4b14      	ldr	r3, [pc, #80]	; (80138f0 <_fflush_r+0x6c>)
 80138a0:	429c      	cmp	r4, r3
 80138a2:	d11b      	bne.n	80138dc <_fflush_r+0x58>
 80138a4:	686c      	ldr	r4, [r5, #4]
 80138a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d0ef      	beq.n	801388e <_fflush_r+0xa>
 80138ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80138b0:	07d0      	lsls	r0, r2, #31
 80138b2:	d404      	bmi.n	80138be <_fflush_r+0x3a>
 80138b4:	0599      	lsls	r1, r3, #22
 80138b6:	d402      	bmi.n	80138be <_fflush_r+0x3a>
 80138b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138ba:	f7fe faae 	bl	8011e1a <__retarget_lock_acquire_recursive>
 80138be:	4628      	mov	r0, r5
 80138c0:	4621      	mov	r1, r4
 80138c2:	f7ff ff59 	bl	8013778 <__sflush_r>
 80138c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80138c8:	07da      	lsls	r2, r3, #31
 80138ca:	4605      	mov	r5, r0
 80138cc:	d4e0      	bmi.n	8013890 <_fflush_r+0xc>
 80138ce:	89a3      	ldrh	r3, [r4, #12]
 80138d0:	059b      	lsls	r3, r3, #22
 80138d2:	d4dd      	bmi.n	8013890 <_fflush_r+0xc>
 80138d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138d6:	f7fe faa1 	bl	8011e1c <__retarget_lock_release_recursive>
 80138da:	e7d9      	b.n	8013890 <_fflush_r+0xc>
 80138dc:	4b05      	ldr	r3, [pc, #20]	; (80138f4 <_fflush_r+0x70>)
 80138de:	429c      	cmp	r4, r3
 80138e0:	d101      	bne.n	80138e6 <_fflush_r+0x62>
 80138e2:	68ac      	ldr	r4, [r5, #8]
 80138e4:	e7df      	b.n	80138a6 <_fflush_r+0x22>
 80138e6:	4b04      	ldr	r3, [pc, #16]	; (80138f8 <_fflush_r+0x74>)
 80138e8:	429c      	cmp	r4, r3
 80138ea:	bf08      	it	eq
 80138ec:	68ec      	ldreq	r4, [r5, #12]
 80138ee:	e7da      	b.n	80138a6 <_fflush_r+0x22>
 80138f0:	0801b0bc 	.word	0x0801b0bc
 80138f4:	0801b0dc 	.word	0x0801b0dc
 80138f8:	0801b09c 	.word	0x0801b09c

080138fc <_localeconv_r>:
 80138fc:	4800      	ldr	r0, [pc, #0]	; (8013900 <_localeconv_r+0x4>)
 80138fe:	4770      	bx	lr
 8013900:	20000304 	.word	0x20000304

08013904 <_lseek_r>:
 8013904:	b538      	push	{r3, r4, r5, lr}
 8013906:	4d07      	ldr	r5, [pc, #28]	; (8013924 <_lseek_r+0x20>)
 8013908:	4604      	mov	r4, r0
 801390a:	4608      	mov	r0, r1
 801390c:	4611      	mov	r1, r2
 801390e:	2200      	movs	r2, #0
 8013910:	602a      	str	r2, [r5, #0]
 8013912:	461a      	mov	r2, r3
 8013914:	f7f0 ffe0 	bl	80048d8 <_lseek>
 8013918:	1c43      	adds	r3, r0, #1
 801391a:	d102      	bne.n	8013922 <_lseek_r+0x1e>
 801391c:	682b      	ldr	r3, [r5, #0]
 801391e:	b103      	cbz	r3, 8013922 <_lseek_r+0x1e>
 8013920:	6023      	str	r3, [r4, #0]
 8013922:	bd38      	pop	{r3, r4, r5, pc}
 8013924:	2000f1a0 	.word	0x2000f1a0

08013928 <malloc>:
 8013928:	4b02      	ldr	r3, [pc, #8]	; (8013934 <malloc+0xc>)
 801392a:	4601      	mov	r1, r0
 801392c:	6818      	ldr	r0, [r3, #0]
 801392e:	f7fe ba8d 	b.w	8011e4c <_malloc_r>
 8013932:	bf00      	nop
 8013934:	200001b0 	.word	0x200001b0

08013938 <__malloc_lock>:
 8013938:	4801      	ldr	r0, [pc, #4]	; (8013940 <__malloc_lock+0x8>)
 801393a:	f7fe ba6e 	b.w	8011e1a <__retarget_lock_acquire_recursive>
 801393e:	bf00      	nop
 8013940:	2000f198 	.word	0x2000f198

08013944 <__malloc_unlock>:
 8013944:	4801      	ldr	r0, [pc, #4]	; (801394c <__malloc_unlock+0x8>)
 8013946:	f7fe ba69 	b.w	8011e1c <__retarget_lock_release_recursive>
 801394a:	bf00      	nop
 801394c:	2000f198 	.word	0x2000f198

08013950 <_Balloc>:
 8013950:	b570      	push	{r4, r5, r6, lr}
 8013952:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013954:	4604      	mov	r4, r0
 8013956:	460d      	mov	r5, r1
 8013958:	b976      	cbnz	r6, 8013978 <_Balloc+0x28>
 801395a:	2010      	movs	r0, #16
 801395c:	f7ff ffe4 	bl	8013928 <malloc>
 8013960:	4602      	mov	r2, r0
 8013962:	6260      	str	r0, [r4, #36]	; 0x24
 8013964:	b920      	cbnz	r0, 8013970 <_Balloc+0x20>
 8013966:	4b18      	ldr	r3, [pc, #96]	; (80139c8 <_Balloc+0x78>)
 8013968:	4818      	ldr	r0, [pc, #96]	; (80139cc <_Balloc+0x7c>)
 801396a:	2166      	movs	r1, #102	; 0x66
 801396c:	f000 fd3c 	bl	80143e8 <__assert_func>
 8013970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013974:	6006      	str	r6, [r0, #0]
 8013976:	60c6      	str	r6, [r0, #12]
 8013978:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801397a:	68f3      	ldr	r3, [r6, #12]
 801397c:	b183      	cbz	r3, 80139a0 <_Balloc+0x50>
 801397e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013986:	b9b8      	cbnz	r0, 80139b8 <_Balloc+0x68>
 8013988:	2101      	movs	r1, #1
 801398a:	fa01 f605 	lsl.w	r6, r1, r5
 801398e:	1d72      	adds	r2, r6, #5
 8013990:	0092      	lsls	r2, r2, #2
 8013992:	4620      	mov	r0, r4
 8013994:	f000 fb5a 	bl	801404c <_calloc_r>
 8013998:	b160      	cbz	r0, 80139b4 <_Balloc+0x64>
 801399a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801399e:	e00e      	b.n	80139be <_Balloc+0x6e>
 80139a0:	2221      	movs	r2, #33	; 0x21
 80139a2:	2104      	movs	r1, #4
 80139a4:	4620      	mov	r0, r4
 80139a6:	f000 fb51 	bl	801404c <_calloc_r>
 80139aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139ac:	60f0      	str	r0, [r6, #12]
 80139ae:	68db      	ldr	r3, [r3, #12]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d1e4      	bne.n	801397e <_Balloc+0x2e>
 80139b4:	2000      	movs	r0, #0
 80139b6:	bd70      	pop	{r4, r5, r6, pc}
 80139b8:	6802      	ldr	r2, [r0, #0]
 80139ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80139be:	2300      	movs	r3, #0
 80139c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80139c4:	e7f7      	b.n	80139b6 <_Balloc+0x66>
 80139c6:	bf00      	nop
 80139c8:	0801b166 	.word	0x0801b166
 80139cc:	0801b1ed 	.word	0x0801b1ed

080139d0 <_Bfree>:
 80139d0:	b570      	push	{r4, r5, r6, lr}
 80139d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80139d4:	4605      	mov	r5, r0
 80139d6:	460c      	mov	r4, r1
 80139d8:	b976      	cbnz	r6, 80139f8 <_Bfree+0x28>
 80139da:	2010      	movs	r0, #16
 80139dc:	f7ff ffa4 	bl	8013928 <malloc>
 80139e0:	4602      	mov	r2, r0
 80139e2:	6268      	str	r0, [r5, #36]	; 0x24
 80139e4:	b920      	cbnz	r0, 80139f0 <_Bfree+0x20>
 80139e6:	4b09      	ldr	r3, [pc, #36]	; (8013a0c <_Bfree+0x3c>)
 80139e8:	4809      	ldr	r0, [pc, #36]	; (8013a10 <_Bfree+0x40>)
 80139ea:	218a      	movs	r1, #138	; 0x8a
 80139ec:	f000 fcfc 	bl	80143e8 <__assert_func>
 80139f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80139f4:	6006      	str	r6, [r0, #0]
 80139f6:	60c6      	str	r6, [r0, #12]
 80139f8:	b13c      	cbz	r4, 8013a0a <_Bfree+0x3a>
 80139fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80139fc:	6862      	ldr	r2, [r4, #4]
 80139fe:	68db      	ldr	r3, [r3, #12]
 8013a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a04:	6021      	str	r1, [r4, #0]
 8013a06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013a0a:	bd70      	pop	{r4, r5, r6, pc}
 8013a0c:	0801b166 	.word	0x0801b166
 8013a10:	0801b1ed 	.word	0x0801b1ed

08013a14 <__multadd>:
 8013a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a18:	690e      	ldr	r6, [r1, #16]
 8013a1a:	4607      	mov	r7, r0
 8013a1c:	4698      	mov	r8, r3
 8013a1e:	460c      	mov	r4, r1
 8013a20:	f101 0014 	add.w	r0, r1, #20
 8013a24:	2300      	movs	r3, #0
 8013a26:	6805      	ldr	r5, [r0, #0]
 8013a28:	b2a9      	uxth	r1, r5
 8013a2a:	fb02 8101 	mla	r1, r2, r1, r8
 8013a2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013a32:	0c2d      	lsrs	r5, r5, #16
 8013a34:	fb02 c505 	mla	r5, r2, r5, ip
 8013a38:	b289      	uxth	r1, r1
 8013a3a:	3301      	adds	r3, #1
 8013a3c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013a40:	429e      	cmp	r6, r3
 8013a42:	f840 1b04 	str.w	r1, [r0], #4
 8013a46:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013a4a:	dcec      	bgt.n	8013a26 <__multadd+0x12>
 8013a4c:	f1b8 0f00 	cmp.w	r8, #0
 8013a50:	d022      	beq.n	8013a98 <__multadd+0x84>
 8013a52:	68a3      	ldr	r3, [r4, #8]
 8013a54:	42b3      	cmp	r3, r6
 8013a56:	dc19      	bgt.n	8013a8c <__multadd+0x78>
 8013a58:	6861      	ldr	r1, [r4, #4]
 8013a5a:	4638      	mov	r0, r7
 8013a5c:	3101      	adds	r1, #1
 8013a5e:	f7ff ff77 	bl	8013950 <_Balloc>
 8013a62:	4605      	mov	r5, r0
 8013a64:	b928      	cbnz	r0, 8013a72 <__multadd+0x5e>
 8013a66:	4602      	mov	r2, r0
 8013a68:	4b0d      	ldr	r3, [pc, #52]	; (8013aa0 <__multadd+0x8c>)
 8013a6a:	480e      	ldr	r0, [pc, #56]	; (8013aa4 <__multadd+0x90>)
 8013a6c:	21b5      	movs	r1, #181	; 0xb5
 8013a6e:	f000 fcbb 	bl	80143e8 <__assert_func>
 8013a72:	6922      	ldr	r2, [r4, #16]
 8013a74:	3202      	adds	r2, #2
 8013a76:	f104 010c 	add.w	r1, r4, #12
 8013a7a:	0092      	lsls	r2, r2, #2
 8013a7c:	300c      	adds	r0, #12
 8013a7e:	f7fe f9ce 	bl	8011e1e <memcpy>
 8013a82:	4621      	mov	r1, r4
 8013a84:	4638      	mov	r0, r7
 8013a86:	f7ff ffa3 	bl	80139d0 <_Bfree>
 8013a8a:	462c      	mov	r4, r5
 8013a8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013a90:	3601      	adds	r6, #1
 8013a92:	f8c3 8014 	str.w	r8, [r3, #20]
 8013a96:	6126      	str	r6, [r4, #16]
 8013a98:	4620      	mov	r0, r4
 8013a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a9e:	bf00      	nop
 8013aa0:	0801b1dc 	.word	0x0801b1dc
 8013aa4:	0801b1ed 	.word	0x0801b1ed

08013aa8 <__hi0bits>:
 8013aa8:	0c03      	lsrs	r3, r0, #16
 8013aaa:	041b      	lsls	r3, r3, #16
 8013aac:	b9d3      	cbnz	r3, 8013ae4 <__hi0bits+0x3c>
 8013aae:	0400      	lsls	r0, r0, #16
 8013ab0:	2310      	movs	r3, #16
 8013ab2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013ab6:	bf04      	itt	eq
 8013ab8:	0200      	lsleq	r0, r0, #8
 8013aba:	3308      	addeq	r3, #8
 8013abc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013ac0:	bf04      	itt	eq
 8013ac2:	0100      	lsleq	r0, r0, #4
 8013ac4:	3304      	addeq	r3, #4
 8013ac6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013aca:	bf04      	itt	eq
 8013acc:	0080      	lsleq	r0, r0, #2
 8013ace:	3302      	addeq	r3, #2
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	db05      	blt.n	8013ae0 <__hi0bits+0x38>
 8013ad4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013ad8:	f103 0301 	add.w	r3, r3, #1
 8013adc:	bf08      	it	eq
 8013ade:	2320      	moveq	r3, #32
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	4770      	bx	lr
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	e7e4      	b.n	8013ab2 <__hi0bits+0xa>

08013ae8 <__lo0bits>:
 8013ae8:	6803      	ldr	r3, [r0, #0]
 8013aea:	f013 0207 	ands.w	r2, r3, #7
 8013aee:	4601      	mov	r1, r0
 8013af0:	d00b      	beq.n	8013b0a <__lo0bits+0x22>
 8013af2:	07da      	lsls	r2, r3, #31
 8013af4:	d424      	bmi.n	8013b40 <__lo0bits+0x58>
 8013af6:	0798      	lsls	r0, r3, #30
 8013af8:	bf49      	itett	mi
 8013afa:	085b      	lsrmi	r3, r3, #1
 8013afc:	089b      	lsrpl	r3, r3, #2
 8013afe:	2001      	movmi	r0, #1
 8013b00:	600b      	strmi	r3, [r1, #0]
 8013b02:	bf5c      	itt	pl
 8013b04:	600b      	strpl	r3, [r1, #0]
 8013b06:	2002      	movpl	r0, #2
 8013b08:	4770      	bx	lr
 8013b0a:	b298      	uxth	r0, r3
 8013b0c:	b9b0      	cbnz	r0, 8013b3c <__lo0bits+0x54>
 8013b0e:	0c1b      	lsrs	r3, r3, #16
 8013b10:	2010      	movs	r0, #16
 8013b12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013b16:	bf04      	itt	eq
 8013b18:	0a1b      	lsreq	r3, r3, #8
 8013b1a:	3008      	addeq	r0, #8
 8013b1c:	071a      	lsls	r2, r3, #28
 8013b1e:	bf04      	itt	eq
 8013b20:	091b      	lsreq	r3, r3, #4
 8013b22:	3004      	addeq	r0, #4
 8013b24:	079a      	lsls	r2, r3, #30
 8013b26:	bf04      	itt	eq
 8013b28:	089b      	lsreq	r3, r3, #2
 8013b2a:	3002      	addeq	r0, #2
 8013b2c:	07da      	lsls	r2, r3, #31
 8013b2e:	d403      	bmi.n	8013b38 <__lo0bits+0x50>
 8013b30:	085b      	lsrs	r3, r3, #1
 8013b32:	f100 0001 	add.w	r0, r0, #1
 8013b36:	d005      	beq.n	8013b44 <__lo0bits+0x5c>
 8013b38:	600b      	str	r3, [r1, #0]
 8013b3a:	4770      	bx	lr
 8013b3c:	4610      	mov	r0, r2
 8013b3e:	e7e8      	b.n	8013b12 <__lo0bits+0x2a>
 8013b40:	2000      	movs	r0, #0
 8013b42:	4770      	bx	lr
 8013b44:	2020      	movs	r0, #32
 8013b46:	4770      	bx	lr

08013b48 <__i2b>:
 8013b48:	b510      	push	{r4, lr}
 8013b4a:	460c      	mov	r4, r1
 8013b4c:	2101      	movs	r1, #1
 8013b4e:	f7ff feff 	bl	8013950 <_Balloc>
 8013b52:	4602      	mov	r2, r0
 8013b54:	b928      	cbnz	r0, 8013b62 <__i2b+0x1a>
 8013b56:	4b05      	ldr	r3, [pc, #20]	; (8013b6c <__i2b+0x24>)
 8013b58:	4805      	ldr	r0, [pc, #20]	; (8013b70 <__i2b+0x28>)
 8013b5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013b5e:	f000 fc43 	bl	80143e8 <__assert_func>
 8013b62:	2301      	movs	r3, #1
 8013b64:	6144      	str	r4, [r0, #20]
 8013b66:	6103      	str	r3, [r0, #16]
 8013b68:	bd10      	pop	{r4, pc}
 8013b6a:	bf00      	nop
 8013b6c:	0801b1dc 	.word	0x0801b1dc
 8013b70:	0801b1ed 	.word	0x0801b1ed

08013b74 <__multiply>:
 8013b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b78:	4614      	mov	r4, r2
 8013b7a:	690a      	ldr	r2, [r1, #16]
 8013b7c:	6923      	ldr	r3, [r4, #16]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	bfb8      	it	lt
 8013b82:	460b      	movlt	r3, r1
 8013b84:	460d      	mov	r5, r1
 8013b86:	bfbc      	itt	lt
 8013b88:	4625      	movlt	r5, r4
 8013b8a:	461c      	movlt	r4, r3
 8013b8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013b90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013b94:	68ab      	ldr	r3, [r5, #8]
 8013b96:	6869      	ldr	r1, [r5, #4]
 8013b98:	eb0a 0709 	add.w	r7, sl, r9
 8013b9c:	42bb      	cmp	r3, r7
 8013b9e:	b085      	sub	sp, #20
 8013ba0:	bfb8      	it	lt
 8013ba2:	3101      	addlt	r1, #1
 8013ba4:	f7ff fed4 	bl	8013950 <_Balloc>
 8013ba8:	b930      	cbnz	r0, 8013bb8 <__multiply+0x44>
 8013baa:	4602      	mov	r2, r0
 8013bac:	4b42      	ldr	r3, [pc, #264]	; (8013cb8 <__multiply+0x144>)
 8013bae:	4843      	ldr	r0, [pc, #268]	; (8013cbc <__multiply+0x148>)
 8013bb0:	f240 115d 	movw	r1, #349	; 0x15d
 8013bb4:	f000 fc18 	bl	80143e8 <__assert_func>
 8013bb8:	f100 0614 	add.w	r6, r0, #20
 8013bbc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013bc0:	4633      	mov	r3, r6
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	4543      	cmp	r3, r8
 8013bc6:	d31e      	bcc.n	8013c06 <__multiply+0x92>
 8013bc8:	f105 0c14 	add.w	ip, r5, #20
 8013bcc:	f104 0314 	add.w	r3, r4, #20
 8013bd0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013bd4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013bd8:	9202      	str	r2, [sp, #8]
 8013bda:	ebac 0205 	sub.w	r2, ip, r5
 8013bde:	3a15      	subs	r2, #21
 8013be0:	f022 0203 	bic.w	r2, r2, #3
 8013be4:	3204      	adds	r2, #4
 8013be6:	f105 0115 	add.w	r1, r5, #21
 8013bea:	458c      	cmp	ip, r1
 8013bec:	bf38      	it	cc
 8013bee:	2204      	movcc	r2, #4
 8013bf0:	9201      	str	r2, [sp, #4]
 8013bf2:	9a02      	ldr	r2, [sp, #8]
 8013bf4:	9303      	str	r3, [sp, #12]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d808      	bhi.n	8013c0c <__multiply+0x98>
 8013bfa:	2f00      	cmp	r7, #0
 8013bfc:	dc55      	bgt.n	8013caa <__multiply+0x136>
 8013bfe:	6107      	str	r7, [r0, #16]
 8013c00:	b005      	add	sp, #20
 8013c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c06:	f843 2b04 	str.w	r2, [r3], #4
 8013c0a:	e7db      	b.n	8013bc4 <__multiply+0x50>
 8013c0c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013c10:	f1ba 0f00 	cmp.w	sl, #0
 8013c14:	d020      	beq.n	8013c58 <__multiply+0xe4>
 8013c16:	f105 0e14 	add.w	lr, r5, #20
 8013c1a:	46b1      	mov	r9, r6
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013c22:	f8d9 b000 	ldr.w	fp, [r9]
 8013c26:	b2a1      	uxth	r1, r4
 8013c28:	fa1f fb8b 	uxth.w	fp, fp
 8013c2c:	fb0a b101 	mla	r1, sl, r1, fp
 8013c30:	4411      	add	r1, r2
 8013c32:	f8d9 2000 	ldr.w	r2, [r9]
 8013c36:	0c24      	lsrs	r4, r4, #16
 8013c38:	0c12      	lsrs	r2, r2, #16
 8013c3a:	fb0a 2404 	mla	r4, sl, r4, r2
 8013c3e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013c42:	b289      	uxth	r1, r1
 8013c44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013c48:	45f4      	cmp	ip, lr
 8013c4a:	f849 1b04 	str.w	r1, [r9], #4
 8013c4e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013c52:	d8e4      	bhi.n	8013c1e <__multiply+0xaa>
 8013c54:	9901      	ldr	r1, [sp, #4]
 8013c56:	5072      	str	r2, [r6, r1]
 8013c58:	9a03      	ldr	r2, [sp, #12]
 8013c5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013c5e:	3304      	adds	r3, #4
 8013c60:	f1b9 0f00 	cmp.w	r9, #0
 8013c64:	d01f      	beq.n	8013ca6 <__multiply+0x132>
 8013c66:	6834      	ldr	r4, [r6, #0]
 8013c68:	f105 0114 	add.w	r1, r5, #20
 8013c6c:	46b6      	mov	lr, r6
 8013c6e:	f04f 0a00 	mov.w	sl, #0
 8013c72:	880a      	ldrh	r2, [r1, #0]
 8013c74:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013c78:	fb09 b202 	mla	r2, r9, r2, fp
 8013c7c:	4492      	add	sl, r2
 8013c7e:	b2a4      	uxth	r4, r4
 8013c80:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013c84:	f84e 4b04 	str.w	r4, [lr], #4
 8013c88:	f851 4b04 	ldr.w	r4, [r1], #4
 8013c8c:	f8be 2000 	ldrh.w	r2, [lr]
 8013c90:	0c24      	lsrs	r4, r4, #16
 8013c92:	fb09 2404 	mla	r4, r9, r4, r2
 8013c96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013c9a:	458c      	cmp	ip, r1
 8013c9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013ca0:	d8e7      	bhi.n	8013c72 <__multiply+0xfe>
 8013ca2:	9a01      	ldr	r2, [sp, #4]
 8013ca4:	50b4      	str	r4, [r6, r2]
 8013ca6:	3604      	adds	r6, #4
 8013ca8:	e7a3      	b.n	8013bf2 <__multiply+0x7e>
 8013caa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d1a5      	bne.n	8013bfe <__multiply+0x8a>
 8013cb2:	3f01      	subs	r7, #1
 8013cb4:	e7a1      	b.n	8013bfa <__multiply+0x86>
 8013cb6:	bf00      	nop
 8013cb8:	0801b1dc 	.word	0x0801b1dc
 8013cbc:	0801b1ed 	.word	0x0801b1ed

08013cc0 <__pow5mult>:
 8013cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cc4:	4615      	mov	r5, r2
 8013cc6:	f012 0203 	ands.w	r2, r2, #3
 8013cca:	4606      	mov	r6, r0
 8013ccc:	460f      	mov	r7, r1
 8013cce:	d007      	beq.n	8013ce0 <__pow5mult+0x20>
 8013cd0:	4c25      	ldr	r4, [pc, #148]	; (8013d68 <__pow5mult+0xa8>)
 8013cd2:	3a01      	subs	r2, #1
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013cda:	f7ff fe9b 	bl	8013a14 <__multadd>
 8013cde:	4607      	mov	r7, r0
 8013ce0:	10ad      	asrs	r5, r5, #2
 8013ce2:	d03d      	beq.n	8013d60 <__pow5mult+0xa0>
 8013ce4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013ce6:	b97c      	cbnz	r4, 8013d08 <__pow5mult+0x48>
 8013ce8:	2010      	movs	r0, #16
 8013cea:	f7ff fe1d 	bl	8013928 <malloc>
 8013cee:	4602      	mov	r2, r0
 8013cf0:	6270      	str	r0, [r6, #36]	; 0x24
 8013cf2:	b928      	cbnz	r0, 8013d00 <__pow5mult+0x40>
 8013cf4:	4b1d      	ldr	r3, [pc, #116]	; (8013d6c <__pow5mult+0xac>)
 8013cf6:	481e      	ldr	r0, [pc, #120]	; (8013d70 <__pow5mult+0xb0>)
 8013cf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013cfc:	f000 fb74 	bl	80143e8 <__assert_func>
 8013d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013d04:	6004      	str	r4, [r0, #0]
 8013d06:	60c4      	str	r4, [r0, #12]
 8013d08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013d10:	b94c      	cbnz	r4, 8013d26 <__pow5mult+0x66>
 8013d12:	f240 2171 	movw	r1, #625	; 0x271
 8013d16:	4630      	mov	r0, r6
 8013d18:	f7ff ff16 	bl	8013b48 <__i2b>
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013d22:	4604      	mov	r4, r0
 8013d24:	6003      	str	r3, [r0, #0]
 8013d26:	f04f 0900 	mov.w	r9, #0
 8013d2a:	07eb      	lsls	r3, r5, #31
 8013d2c:	d50a      	bpl.n	8013d44 <__pow5mult+0x84>
 8013d2e:	4639      	mov	r1, r7
 8013d30:	4622      	mov	r2, r4
 8013d32:	4630      	mov	r0, r6
 8013d34:	f7ff ff1e 	bl	8013b74 <__multiply>
 8013d38:	4639      	mov	r1, r7
 8013d3a:	4680      	mov	r8, r0
 8013d3c:	4630      	mov	r0, r6
 8013d3e:	f7ff fe47 	bl	80139d0 <_Bfree>
 8013d42:	4647      	mov	r7, r8
 8013d44:	106d      	asrs	r5, r5, #1
 8013d46:	d00b      	beq.n	8013d60 <__pow5mult+0xa0>
 8013d48:	6820      	ldr	r0, [r4, #0]
 8013d4a:	b938      	cbnz	r0, 8013d5c <__pow5mult+0x9c>
 8013d4c:	4622      	mov	r2, r4
 8013d4e:	4621      	mov	r1, r4
 8013d50:	4630      	mov	r0, r6
 8013d52:	f7ff ff0f 	bl	8013b74 <__multiply>
 8013d56:	6020      	str	r0, [r4, #0]
 8013d58:	f8c0 9000 	str.w	r9, [r0]
 8013d5c:	4604      	mov	r4, r0
 8013d5e:	e7e4      	b.n	8013d2a <__pow5mult+0x6a>
 8013d60:	4638      	mov	r0, r7
 8013d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d66:	bf00      	nop
 8013d68:	0801b340 	.word	0x0801b340
 8013d6c:	0801b166 	.word	0x0801b166
 8013d70:	0801b1ed 	.word	0x0801b1ed

08013d74 <__lshift>:
 8013d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d78:	460c      	mov	r4, r1
 8013d7a:	6849      	ldr	r1, [r1, #4]
 8013d7c:	6923      	ldr	r3, [r4, #16]
 8013d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013d82:	68a3      	ldr	r3, [r4, #8]
 8013d84:	4607      	mov	r7, r0
 8013d86:	4691      	mov	r9, r2
 8013d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d8c:	f108 0601 	add.w	r6, r8, #1
 8013d90:	42b3      	cmp	r3, r6
 8013d92:	db0b      	blt.n	8013dac <__lshift+0x38>
 8013d94:	4638      	mov	r0, r7
 8013d96:	f7ff fddb 	bl	8013950 <_Balloc>
 8013d9a:	4605      	mov	r5, r0
 8013d9c:	b948      	cbnz	r0, 8013db2 <__lshift+0x3e>
 8013d9e:	4602      	mov	r2, r0
 8013da0:	4b28      	ldr	r3, [pc, #160]	; (8013e44 <__lshift+0xd0>)
 8013da2:	4829      	ldr	r0, [pc, #164]	; (8013e48 <__lshift+0xd4>)
 8013da4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013da8:	f000 fb1e 	bl	80143e8 <__assert_func>
 8013dac:	3101      	adds	r1, #1
 8013dae:	005b      	lsls	r3, r3, #1
 8013db0:	e7ee      	b.n	8013d90 <__lshift+0x1c>
 8013db2:	2300      	movs	r3, #0
 8013db4:	f100 0114 	add.w	r1, r0, #20
 8013db8:	f100 0210 	add.w	r2, r0, #16
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	4553      	cmp	r3, sl
 8013dc0:	db33      	blt.n	8013e2a <__lshift+0xb6>
 8013dc2:	6920      	ldr	r0, [r4, #16]
 8013dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013dc8:	f104 0314 	add.w	r3, r4, #20
 8013dcc:	f019 091f 	ands.w	r9, r9, #31
 8013dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013dd8:	d02b      	beq.n	8013e32 <__lshift+0xbe>
 8013dda:	f1c9 0e20 	rsb	lr, r9, #32
 8013dde:	468a      	mov	sl, r1
 8013de0:	2200      	movs	r2, #0
 8013de2:	6818      	ldr	r0, [r3, #0]
 8013de4:	fa00 f009 	lsl.w	r0, r0, r9
 8013de8:	4302      	orrs	r2, r0
 8013dea:	f84a 2b04 	str.w	r2, [sl], #4
 8013dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8013df2:	459c      	cmp	ip, r3
 8013df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8013df8:	d8f3      	bhi.n	8013de2 <__lshift+0x6e>
 8013dfa:	ebac 0304 	sub.w	r3, ip, r4
 8013dfe:	3b15      	subs	r3, #21
 8013e00:	f023 0303 	bic.w	r3, r3, #3
 8013e04:	3304      	adds	r3, #4
 8013e06:	f104 0015 	add.w	r0, r4, #21
 8013e0a:	4584      	cmp	ip, r0
 8013e0c:	bf38      	it	cc
 8013e0e:	2304      	movcc	r3, #4
 8013e10:	50ca      	str	r2, [r1, r3]
 8013e12:	b10a      	cbz	r2, 8013e18 <__lshift+0xa4>
 8013e14:	f108 0602 	add.w	r6, r8, #2
 8013e18:	3e01      	subs	r6, #1
 8013e1a:	4638      	mov	r0, r7
 8013e1c:	612e      	str	r6, [r5, #16]
 8013e1e:	4621      	mov	r1, r4
 8013e20:	f7ff fdd6 	bl	80139d0 <_Bfree>
 8013e24:	4628      	mov	r0, r5
 8013e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013e2e:	3301      	adds	r3, #1
 8013e30:	e7c5      	b.n	8013dbe <__lshift+0x4a>
 8013e32:	3904      	subs	r1, #4
 8013e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8013e3c:	459c      	cmp	ip, r3
 8013e3e:	d8f9      	bhi.n	8013e34 <__lshift+0xc0>
 8013e40:	e7ea      	b.n	8013e18 <__lshift+0xa4>
 8013e42:	bf00      	nop
 8013e44:	0801b1dc 	.word	0x0801b1dc
 8013e48:	0801b1ed 	.word	0x0801b1ed

08013e4c <__mcmp>:
 8013e4c:	b530      	push	{r4, r5, lr}
 8013e4e:	6902      	ldr	r2, [r0, #16]
 8013e50:	690c      	ldr	r4, [r1, #16]
 8013e52:	1b12      	subs	r2, r2, r4
 8013e54:	d10e      	bne.n	8013e74 <__mcmp+0x28>
 8013e56:	f100 0314 	add.w	r3, r0, #20
 8013e5a:	3114      	adds	r1, #20
 8013e5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013e60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013e64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013e68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013e6c:	42a5      	cmp	r5, r4
 8013e6e:	d003      	beq.n	8013e78 <__mcmp+0x2c>
 8013e70:	d305      	bcc.n	8013e7e <__mcmp+0x32>
 8013e72:	2201      	movs	r2, #1
 8013e74:	4610      	mov	r0, r2
 8013e76:	bd30      	pop	{r4, r5, pc}
 8013e78:	4283      	cmp	r3, r0
 8013e7a:	d3f3      	bcc.n	8013e64 <__mcmp+0x18>
 8013e7c:	e7fa      	b.n	8013e74 <__mcmp+0x28>
 8013e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e82:	e7f7      	b.n	8013e74 <__mcmp+0x28>

08013e84 <__mdiff>:
 8013e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e88:	460c      	mov	r4, r1
 8013e8a:	4606      	mov	r6, r0
 8013e8c:	4611      	mov	r1, r2
 8013e8e:	4620      	mov	r0, r4
 8013e90:	4617      	mov	r7, r2
 8013e92:	f7ff ffdb 	bl	8013e4c <__mcmp>
 8013e96:	1e05      	subs	r5, r0, #0
 8013e98:	d110      	bne.n	8013ebc <__mdiff+0x38>
 8013e9a:	4629      	mov	r1, r5
 8013e9c:	4630      	mov	r0, r6
 8013e9e:	f7ff fd57 	bl	8013950 <_Balloc>
 8013ea2:	b930      	cbnz	r0, 8013eb2 <__mdiff+0x2e>
 8013ea4:	4b39      	ldr	r3, [pc, #228]	; (8013f8c <__mdiff+0x108>)
 8013ea6:	4602      	mov	r2, r0
 8013ea8:	f240 2132 	movw	r1, #562	; 0x232
 8013eac:	4838      	ldr	r0, [pc, #224]	; (8013f90 <__mdiff+0x10c>)
 8013eae:	f000 fa9b 	bl	80143e8 <__assert_func>
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013eb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ebc:	bfa4      	itt	ge
 8013ebe:	463b      	movge	r3, r7
 8013ec0:	4627      	movge	r7, r4
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	6879      	ldr	r1, [r7, #4]
 8013ec6:	bfa6      	itte	ge
 8013ec8:	461c      	movge	r4, r3
 8013eca:	2500      	movge	r5, #0
 8013ecc:	2501      	movlt	r5, #1
 8013ece:	f7ff fd3f 	bl	8013950 <_Balloc>
 8013ed2:	b920      	cbnz	r0, 8013ede <__mdiff+0x5a>
 8013ed4:	4b2d      	ldr	r3, [pc, #180]	; (8013f8c <__mdiff+0x108>)
 8013ed6:	4602      	mov	r2, r0
 8013ed8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013edc:	e7e6      	b.n	8013eac <__mdiff+0x28>
 8013ede:	693e      	ldr	r6, [r7, #16]
 8013ee0:	60c5      	str	r5, [r0, #12]
 8013ee2:	6925      	ldr	r5, [r4, #16]
 8013ee4:	f107 0114 	add.w	r1, r7, #20
 8013ee8:	f104 0914 	add.w	r9, r4, #20
 8013eec:	f100 0e14 	add.w	lr, r0, #20
 8013ef0:	f107 0210 	add.w	r2, r7, #16
 8013ef4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013ef8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013efc:	46f2      	mov	sl, lr
 8013efe:	2700      	movs	r7, #0
 8013f00:	f859 3b04 	ldr.w	r3, [r9], #4
 8013f04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013f08:	fa1f f883 	uxth.w	r8, r3
 8013f0c:	fa17 f78b 	uxtah	r7, r7, fp
 8013f10:	0c1b      	lsrs	r3, r3, #16
 8013f12:	eba7 0808 	sub.w	r8, r7, r8
 8013f16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013f1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013f1e:	fa1f f888 	uxth.w	r8, r8
 8013f22:	141f      	asrs	r7, r3, #16
 8013f24:	454d      	cmp	r5, r9
 8013f26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013f2a:	f84a 3b04 	str.w	r3, [sl], #4
 8013f2e:	d8e7      	bhi.n	8013f00 <__mdiff+0x7c>
 8013f30:	1b2b      	subs	r3, r5, r4
 8013f32:	3b15      	subs	r3, #21
 8013f34:	f023 0303 	bic.w	r3, r3, #3
 8013f38:	3304      	adds	r3, #4
 8013f3a:	3415      	adds	r4, #21
 8013f3c:	42a5      	cmp	r5, r4
 8013f3e:	bf38      	it	cc
 8013f40:	2304      	movcc	r3, #4
 8013f42:	4419      	add	r1, r3
 8013f44:	4473      	add	r3, lr
 8013f46:	469e      	mov	lr, r3
 8013f48:	460d      	mov	r5, r1
 8013f4a:	4565      	cmp	r5, ip
 8013f4c:	d30e      	bcc.n	8013f6c <__mdiff+0xe8>
 8013f4e:	f10c 0203 	add.w	r2, ip, #3
 8013f52:	1a52      	subs	r2, r2, r1
 8013f54:	f022 0203 	bic.w	r2, r2, #3
 8013f58:	3903      	subs	r1, #3
 8013f5a:	458c      	cmp	ip, r1
 8013f5c:	bf38      	it	cc
 8013f5e:	2200      	movcc	r2, #0
 8013f60:	441a      	add	r2, r3
 8013f62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013f66:	b17b      	cbz	r3, 8013f88 <__mdiff+0x104>
 8013f68:	6106      	str	r6, [r0, #16]
 8013f6a:	e7a5      	b.n	8013eb8 <__mdiff+0x34>
 8013f6c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013f70:	fa17 f488 	uxtah	r4, r7, r8
 8013f74:	1422      	asrs	r2, r4, #16
 8013f76:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013f7a:	b2a4      	uxth	r4, r4
 8013f7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013f80:	f84e 4b04 	str.w	r4, [lr], #4
 8013f84:	1417      	asrs	r7, r2, #16
 8013f86:	e7e0      	b.n	8013f4a <__mdiff+0xc6>
 8013f88:	3e01      	subs	r6, #1
 8013f8a:	e7ea      	b.n	8013f62 <__mdiff+0xde>
 8013f8c:	0801b1dc 	.word	0x0801b1dc
 8013f90:	0801b1ed 	.word	0x0801b1ed

08013f94 <__d2b>:
 8013f94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f98:	4689      	mov	r9, r1
 8013f9a:	2101      	movs	r1, #1
 8013f9c:	ec57 6b10 	vmov	r6, r7, d0
 8013fa0:	4690      	mov	r8, r2
 8013fa2:	f7ff fcd5 	bl	8013950 <_Balloc>
 8013fa6:	4604      	mov	r4, r0
 8013fa8:	b930      	cbnz	r0, 8013fb8 <__d2b+0x24>
 8013faa:	4602      	mov	r2, r0
 8013fac:	4b25      	ldr	r3, [pc, #148]	; (8014044 <__d2b+0xb0>)
 8013fae:	4826      	ldr	r0, [pc, #152]	; (8014048 <__d2b+0xb4>)
 8013fb0:	f240 310a 	movw	r1, #778	; 0x30a
 8013fb4:	f000 fa18 	bl	80143e8 <__assert_func>
 8013fb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013fbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013fc0:	bb35      	cbnz	r5, 8014010 <__d2b+0x7c>
 8013fc2:	2e00      	cmp	r6, #0
 8013fc4:	9301      	str	r3, [sp, #4]
 8013fc6:	d028      	beq.n	801401a <__d2b+0x86>
 8013fc8:	4668      	mov	r0, sp
 8013fca:	9600      	str	r6, [sp, #0]
 8013fcc:	f7ff fd8c 	bl	8013ae8 <__lo0bits>
 8013fd0:	9900      	ldr	r1, [sp, #0]
 8013fd2:	b300      	cbz	r0, 8014016 <__d2b+0x82>
 8013fd4:	9a01      	ldr	r2, [sp, #4]
 8013fd6:	f1c0 0320 	rsb	r3, r0, #32
 8013fda:	fa02 f303 	lsl.w	r3, r2, r3
 8013fde:	430b      	orrs	r3, r1
 8013fe0:	40c2      	lsrs	r2, r0
 8013fe2:	6163      	str	r3, [r4, #20]
 8013fe4:	9201      	str	r2, [sp, #4]
 8013fe6:	9b01      	ldr	r3, [sp, #4]
 8013fe8:	61a3      	str	r3, [r4, #24]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	bf14      	ite	ne
 8013fee:	2202      	movne	r2, #2
 8013ff0:	2201      	moveq	r2, #1
 8013ff2:	6122      	str	r2, [r4, #16]
 8013ff4:	b1d5      	cbz	r5, 801402c <__d2b+0x98>
 8013ff6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013ffa:	4405      	add	r5, r0
 8013ffc:	f8c9 5000 	str.w	r5, [r9]
 8014000:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014004:	f8c8 0000 	str.w	r0, [r8]
 8014008:	4620      	mov	r0, r4
 801400a:	b003      	add	sp, #12
 801400c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014014:	e7d5      	b.n	8013fc2 <__d2b+0x2e>
 8014016:	6161      	str	r1, [r4, #20]
 8014018:	e7e5      	b.n	8013fe6 <__d2b+0x52>
 801401a:	a801      	add	r0, sp, #4
 801401c:	f7ff fd64 	bl	8013ae8 <__lo0bits>
 8014020:	9b01      	ldr	r3, [sp, #4]
 8014022:	6163      	str	r3, [r4, #20]
 8014024:	2201      	movs	r2, #1
 8014026:	6122      	str	r2, [r4, #16]
 8014028:	3020      	adds	r0, #32
 801402a:	e7e3      	b.n	8013ff4 <__d2b+0x60>
 801402c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014030:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014034:	f8c9 0000 	str.w	r0, [r9]
 8014038:	6918      	ldr	r0, [r3, #16]
 801403a:	f7ff fd35 	bl	8013aa8 <__hi0bits>
 801403e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014042:	e7df      	b.n	8014004 <__d2b+0x70>
 8014044:	0801b1dc 	.word	0x0801b1dc
 8014048:	0801b1ed 	.word	0x0801b1ed

0801404c <_calloc_r>:
 801404c:	b513      	push	{r0, r1, r4, lr}
 801404e:	434a      	muls	r2, r1
 8014050:	4611      	mov	r1, r2
 8014052:	9201      	str	r2, [sp, #4]
 8014054:	f7fd fefa 	bl	8011e4c <_malloc_r>
 8014058:	4604      	mov	r4, r0
 801405a:	b118      	cbz	r0, 8014064 <_calloc_r+0x18>
 801405c:	9a01      	ldr	r2, [sp, #4]
 801405e:	2100      	movs	r1, #0
 8014060:	f7fd feeb 	bl	8011e3a <memset>
 8014064:	4620      	mov	r0, r4
 8014066:	b002      	add	sp, #8
 8014068:	bd10      	pop	{r4, pc}
	...

0801406c <_free_r>:
 801406c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801406e:	2900      	cmp	r1, #0
 8014070:	d048      	beq.n	8014104 <_free_r+0x98>
 8014072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014076:	9001      	str	r0, [sp, #4]
 8014078:	2b00      	cmp	r3, #0
 801407a:	f1a1 0404 	sub.w	r4, r1, #4
 801407e:	bfb8      	it	lt
 8014080:	18e4      	addlt	r4, r4, r3
 8014082:	f7ff fc59 	bl	8013938 <__malloc_lock>
 8014086:	4a20      	ldr	r2, [pc, #128]	; (8014108 <_free_r+0x9c>)
 8014088:	9801      	ldr	r0, [sp, #4]
 801408a:	6813      	ldr	r3, [r2, #0]
 801408c:	4615      	mov	r5, r2
 801408e:	b933      	cbnz	r3, 801409e <_free_r+0x32>
 8014090:	6063      	str	r3, [r4, #4]
 8014092:	6014      	str	r4, [r2, #0]
 8014094:	b003      	add	sp, #12
 8014096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801409a:	f7ff bc53 	b.w	8013944 <__malloc_unlock>
 801409e:	42a3      	cmp	r3, r4
 80140a0:	d90b      	bls.n	80140ba <_free_r+0x4e>
 80140a2:	6821      	ldr	r1, [r4, #0]
 80140a4:	1862      	adds	r2, r4, r1
 80140a6:	4293      	cmp	r3, r2
 80140a8:	bf04      	itt	eq
 80140aa:	681a      	ldreq	r2, [r3, #0]
 80140ac:	685b      	ldreq	r3, [r3, #4]
 80140ae:	6063      	str	r3, [r4, #4]
 80140b0:	bf04      	itt	eq
 80140b2:	1852      	addeq	r2, r2, r1
 80140b4:	6022      	streq	r2, [r4, #0]
 80140b6:	602c      	str	r4, [r5, #0]
 80140b8:	e7ec      	b.n	8014094 <_free_r+0x28>
 80140ba:	461a      	mov	r2, r3
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	b10b      	cbz	r3, 80140c4 <_free_r+0x58>
 80140c0:	42a3      	cmp	r3, r4
 80140c2:	d9fa      	bls.n	80140ba <_free_r+0x4e>
 80140c4:	6811      	ldr	r1, [r2, #0]
 80140c6:	1855      	adds	r5, r2, r1
 80140c8:	42a5      	cmp	r5, r4
 80140ca:	d10b      	bne.n	80140e4 <_free_r+0x78>
 80140cc:	6824      	ldr	r4, [r4, #0]
 80140ce:	4421      	add	r1, r4
 80140d0:	1854      	adds	r4, r2, r1
 80140d2:	42a3      	cmp	r3, r4
 80140d4:	6011      	str	r1, [r2, #0]
 80140d6:	d1dd      	bne.n	8014094 <_free_r+0x28>
 80140d8:	681c      	ldr	r4, [r3, #0]
 80140da:	685b      	ldr	r3, [r3, #4]
 80140dc:	6053      	str	r3, [r2, #4]
 80140de:	4421      	add	r1, r4
 80140e0:	6011      	str	r1, [r2, #0]
 80140e2:	e7d7      	b.n	8014094 <_free_r+0x28>
 80140e4:	d902      	bls.n	80140ec <_free_r+0x80>
 80140e6:	230c      	movs	r3, #12
 80140e8:	6003      	str	r3, [r0, #0]
 80140ea:	e7d3      	b.n	8014094 <_free_r+0x28>
 80140ec:	6825      	ldr	r5, [r4, #0]
 80140ee:	1961      	adds	r1, r4, r5
 80140f0:	428b      	cmp	r3, r1
 80140f2:	bf04      	itt	eq
 80140f4:	6819      	ldreq	r1, [r3, #0]
 80140f6:	685b      	ldreq	r3, [r3, #4]
 80140f8:	6063      	str	r3, [r4, #4]
 80140fa:	bf04      	itt	eq
 80140fc:	1949      	addeq	r1, r1, r5
 80140fe:	6021      	streq	r1, [r4, #0]
 8014100:	6054      	str	r4, [r2, #4]
 8014102:	e7c7      	b.n	8014094 <_free_r+0x28>
 8014104:	b003      	add	sp, #12
 8014106:	bd30      	pop	{r4, r5, pc}
 8014108:	20007634 	.word	0x20007634

0801410c <__ssputs_r>:
 801410c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014110:	688e      	ldr	r6, [r1, #8]
 8014112:	429e      	cmp	r6, r3
 8014114:	4682      	mov	sl, r0
 8014116:	460c      	mov	r4, r1
 8014118:	4690      	mov	r8, r2
 801411a:	461f      	mov	r7, r3
 801411c:	d838      	bhi.n	8014190 <__ssputs_r+0x84>
 801411e:	898a      	ldrh	r2, [r1, #12]
 8014120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014124:	d032      	beq.n	801418c <__ssputs_r+0x80>
 8014126:	6825      	ldr	r5, [r4, #0]
 8014128:	6909      	ldr	r1, [r1, #16]
 801412a:	eba5 0901 	sub.w	r9, r5, r1
 801412e:	6965      	ldr	r5, [r4, #20]
 8014130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014138:	3301      	adds	r3, #1
 801413a:	444b      	add	r3, r9
 801413c:	106d      	asrs	r5, r5, #1
 801413e:	429d      	cmp	r5, r3
 8014140:	bf38      	it	cc
 8014142:	461d      	movcc	r5, r3
 8014144:	0553      	lsls	r3, r2, #21
 8014146:	d531      	bpl.n	80141ac <__ssputs_r+0xa0>
 8014148:	4629      	mov	r1, r5
 801414a:	f7fd fe7f 	bl	8011e4c <_malloc_r>
 801414e:	4606      	mov	r6, r0
 8014150:	b950      	cbnz	r0, 8014168 <__ssputs_r+0x5c>
 8014152:	230c      	movs	r3, #12
 8014154:	f8ca 3000 	str.w	r3, [sl]
 8014158:	89a3      	ldrh	r3, [r4, #12]
 801415a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801415e:	81a3      	strh	r3, [r4, #12]
 8014160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014168:	6921      	ldr	r1, [r4, #16]
 801416a:	464a      	mov	r2, r9
 801416c:	f7fd fe57 	bl	8011e1e <memcpy>
 8014170:	89a3      	ldrh	r3, [r4, #12]
 8014172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801417a:	81a3      	strh	r3, [r4, #12]
 801417c:	6126      	str	r6, [r4, #16]
 801417e:	6165      	str	r5, [r4, #20]
 8014180:	444e      	add	r6, r9
 8014182:	eba5 0509 	sub.w	r5, r5, r9
 8014186:	6026      	str	r6, [r4, #0]
 8014188:	60a5      	str	r5, [r4, #8]
 801418a:	463e      	mov	r6, r7
 801418c:	42be      	cmp	r6, r7
 801418e:	d900      	bls.n	8014192 <__ssputs_r+0x86>
 8014190:	463e      	mov	r6, r7
 8014192:	4632      	mov	r2, r6
 8014194:	6820      	ldr	r0, [r4, #0]
 8014196:	4641      	mov	r1, r8
 8014198:	f000 f968 	bl	801446c <memmove>
 801419c:	68a3      	ldr	r3, [r4, #8]
 801419e:	6822      	ldr	r2, [r4, #0]
 80141a0:	1b9b      	subs	r3, r3, r6
 80141a2:	4432      	add	r2, r6
 80141a4:	60a3      	str	r3, [r4, #8]
 80141a6:	6022      	str	r2, [r4, #0]
 80141a8:	2000      	movs	r0, #0
 80141aa:	e7db      	b.n	8014164 <__ssputs_r+0x58>
 80141ac:	462a      	mov	r2, r5
 80141ae:	f000 f977 	bl	80144a0 <_realloc_r>
 80141b2:	4606      	mov	r6, r0
 80141b4:	2800      	cmp	r0, #0
 80141b6:	d1e1      	bne.n	801417c <__ssputs_r+0x70>
 80141b8:	6921      	ldr	r1, [r4, #16]
 80141ba:	4650      	mov	r0, sl
 80141bc:	f7ff ff56 	bl	801406c <_free_r>
 80141c0:	e7c7      	b.n	8014152 <__ssputs_r+0x46>
	...

080141c4 <_svfiprintf_r>:
 80141c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141c8:	4698      	mov	r8, r3
 80141ca:	898b      	ldrh	r3, [r1, #12]
 80141cc:	061b      	lsls	r3, r3, #24
 80141ce:	b09d      	sub	sp, #116	; 0x74
 80141d0:	4607      	mov	r7, r0
 80141d2:	460d      	mov	r5, r1
 80141d4:	4614      	mov	r4, r2
 80141d6:	d50e      	bpl.n	80141f6 <_svfiprintf_r+0x32>
 80141d8:	690b      	ldr	r3, [r1, #16]
 80141da:	b963      	cbnz	r3, 80141f6 <_svfiprintf_r+0x32>
 80141dc:	2140      	movs	r1, #64	; 0x40
 80141de:	f7fd fe35 	bl	8011e4c <_malloc_r>
 80141e2:	6028      	str	r0, [r5, #0]
 80141e4:	6128      	str	r0, [r5, #16]
 80141e6:	b920      	cbnz	r0, 80141f2 <_svfiprintf_r+0x2e>
 80141e8:	230c      	movs	r3, #12
 80141ea:	603b      	str	r3, [r7, #0]
 80141ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141f0:	e0d1      	b.n	8014396 <_svfiprintf_r+0x1d2>
 80141f2:	2340      	movs	r3, #64	; 0x40
 80141f4:	616b      	str	r3, [r5, #20]
 80141f6:	2300      	movs	r3, #0
 80141f8:	9309      	str	r3, [sp, #36]	; 0x24
 80141fa:	2320      	movs	r3, #32
 80141fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014200:	f8cd 800c 	str.w	r8, [sp, #12]
 8014204:	2330      	movs	r3, #48	; 0x30
 8014206:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80143b0 <_svfiprintf_r+0x1ec>
 801420a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801420e:	f04f 0901 	mov.w	r9, #1
 8014212:	4623      	mov	r3, r4
 8014214:	469a      	mov	sl, r3
 8014216:	f813 2b01 	ldrb.w	r2, [r3], #1
 801421a:	b10a      	cbz	r2, 8014220 <_svfiprintf_r+0x5c>
 801421c:	2a25      	cmp	r2, #37	; 0x25
 801421e:	d1f9      	bne.n	8014214 <_svfiprintf_r+0x50>
 8014220:	ebba 0b04 	subs.w	fp, sl, r4
 8014224:	d00b      	beq.n	801423e <_svfiprintf_r+0x7a>
 8014226:	465b      	mov	r3, fp
 8014228:	4622      	mov	r2, r4
 801422a:	4629      	mov	r1, r5
 801422c:	4638      	mov	r0, r7
 801422e:	f7ff ff6d 	bl	801410c <__ssputs_r>
 8014232:	3001      	adds	r0, #1
 8014234:	f000 80aa 	beq.w	801438c <_svfiprintf_r+0x1c8>
 8014238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801423a:	445a      	add	r2, fp
 801423c:	9209      	str	r2, [sp, #36]	; 0x24
 801423e:	f89a 3000 	ldrb.w	r3, [sl]
 8014242:	2b00      	cmp	r3, #0
 8014244:	f000 80a2 	beq.w	801438c <_svfiprintf_r+0x1c8>
 8014248:	2300      	movs	r3, #0
 801424a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801424e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014252:	f10a 0a01 	add.w	sl, sl, #1
 8014256:	9304      	str	r3, [sp, #16]
 8014258:	9307      	str	r3, [sp, #28]
 801425a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801425e:	931a      	str	r3, [sp, #104]	; 0x68
 8014260:	4654      	mov	r4, sl
 8014262:	2205      	movs	r2, #5
 8014264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014268:	4851      	ldr	r0, [pc, #324]	; (80143b0 <_svfiprintf_r+0x1ec>)
 801426a:	f7eb ffb9 	bl	80001e0 <memchr>
 801426e:	9a04      	ldr	r2, [sp, #16]
 8014270:	b9d8      	cbnz	r0, 80142aa <_svfiprintf_r+0xe6>
 8014272:	06d0      	lsls	r0, r2, #27
 8014274:	bf44      	itt	mi
 8014276:	2320      	movmi	r3, #32
 8014278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801427c:	0711      	lsls	r1, r2, #28
 801427e:	bf44      	itt	mi
 8014280:	232b      	movmi	r3, #43	; 0x2b
 8014282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014286:	f89a 3000 	ldrb.w	r3, [sl]
 801428a:	2b2a      	cmp	r3, #42	; 0x2a
 801428c:	d015      	beq.n	80142ba <_svfiprintf_r+0xf6>
 801428e:	9a07      	ldr	r2, [sp, #28]
 8014290:	4654      	mov	r4, sl
 8014292:	2000      	movs	r0, #0
 8014294:	f04f 0c0a 	mov.w	ip, #10
 8014298:	4621      	mov	r1, r4
 801429a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801429e:	3b30      	subs	r3, #48	; 0x30
 80142a0:	2b09      	cmp	r3, #9
 80142a2:	d94e      	bls.n	8014342 <_svfiprintf_r+0x17e>
 80142a4:	b1b0      	cbz	r0, 80142d4 <_svfiprintf_r+0x110>
 80142a6:	9207      	str	r2, [sp, #28]
 80142a8:	e014      	b.n	80142d4 <_svfiprintf_r+0x110>
 80142aa:	eba0 0308 	sub.w	r3, r0, r8
 80142ae:	fa09 f303 	lsl.w	r3, r9, r3
 80142b2:	4313      	orrs	r3, r2
 80142b4:	9304      	str	r3, [sp, #16]
 80142b6:	46a2      	mov	sl, r4
 80142b8:	e7d2      	b.n	8014260 <_svfiprintf_r+0x9c>
 80142ba:	9b03      	ldr	r3, [sp, #12]
 80142bc:	1d19      	adds	r1, r3, #4
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	9103      	str	r1, [sp, #12]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	bfbb      	ittet	lt
 80142c6:	425b      	neglt	r3, r3
 80142c8:	f042 0202 	orrlt.w	r2, r2, #2
 80142cc:	9307      	strge	r3, [sp, #28]
 80142ce:	9307      	strlt	r3, [sp, #28]
 80142d0:	bfb8      	it	lt
 80142d2:	9204      	strlt	r2, [sp, #16]
 80142d4:	7823      	ldrb	r3, [r4, #0]
 80142d6:	2b2e      	cmp	r3, #46	; 0x2e
 80142d8:	d10c      	bne.n	80142f4 <_svfiprintf_r+0x130>
 80142da:	7863      	ldrb	r3, [r4, #1]
 80142dc:	2b2a      	cmp	r3, #42	; 0x2a
 80142de:	d135      	bne.n	801434c <_svfiprintf_r+0x188>
 80142e0:	9b03      	ldr	r3, [sp, #12]
 80142e2:	1d1a      	adds	r2, r3, #4
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	9203      	str	r2, [sp, #12]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	bfb8      	it	lt
 80142ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80142f0:	3402      	adds	r4, #2
 80142f2:	9305      	str	r3, [sp, #20]
 80142f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80143c0 <_svfiprintf_r+0x1fc>
 80142f8:	7821      	ldrb	r1, [r4, #0]
 80142fa:	2203      	movs	r2, #3
 80142fc:	4650      	mov	r0, sl
 80142fe:	f7eb ff6f 	bl	80001e0 <memchr>
 8014302:	b140      	cbz	r0, 8014316 <_svfiprintf_r+0x152>
 8014304:	2340      	movs	r3, #64	; 0x40
 8014306:	eba0 000a 	sub.w	r0, r0, sl
 801430a:	fa03 f000 	lsl.w	r0, r3, r0
 801430e:	9b04      	ldr	r3, [sp, #16]
 8014310:	4303      	orrs	r3, r0
 8014312:	3401      	adds	r4, #1
 8014314:	9304      	str	r3, [sp, #16]
 8014316:	f814 1b01 	ldrb.w	r1, [r4], #1
 801431a:	4826      	ldr	r0, [pc, #152]	; (80143b4 <_svfiprintf_r+0x1f0>)
 801431c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014320:	2206      	movs	r2, #6
 8014322:	f7eb ff5d 	bl	80001e0 <memchr>
 8014326:	2800      	cmp	r0, #0
 8014328:	d038      	beq.n	801439c <_svfiprintf_r+0x1d8>
 801432a:	4b23      	ldr	r3, [pc, #140]	; (80143b8 <_svfiprintf_r+0x1f4>)
 801432c:	bb1b      	cbnz	r3, 8014376 <_svfiprintf_r+0x1b2>
 801432e:	9b03      	ldr	r3, [sp, #12]
 8014330:	3307      	adds	r3, #7
 8014332:	f023 0307 	bic.w	r3, r3, #7
 8014336:	3308      	adds	r3, #8
 8014338:	9303      	str	r3, [sp, #12]
 801433a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801433c:	4433      	add	r3, r6
 801433e:	9309      	str	r3, [sp, #36]	; 0x24
 8014340:	e767      	b.n	8014212 <_svfiprintf_r+0x4e>
 8014342:	fb0c 3202 	mla	r2, ip, r2, r3
 8014346:	460c      	mov	r4, r1
 8014348:	2001      	movs	r0, #1
 801434a:	e7a5      	b.n	8014298 <_svfiprintf_r+0xd4>
 801434c:	2300      	movs	r3, #0
 801434e:	3401      	adds	r4, #1
 8014350:	9305      	str	r3, [sp, #20]
 8014352:	4619      	mov	r1, r3
 8014354:	f04f 0c0a 	mov.w	ip, #10
 8014358:	4620      	mov	r0, r4
 801435a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801435e:	3a30      	subs	r2, #48	; 0x30
 8014360:	2a09      	cmp	r2, #9
 8014362:	d903      	bls.n	801436c <_svfiprintf_r+0x1a8>
 8014364:	2b00      	cmp	r3, #0
 8014366:	d0c5      	beq.n	80142f4 <_svfiprintf_r+0x130>
 8014368:	9105      	str	r1, [sp, #20]
 801436a:	e7c3      	b.n	80142f4 <_svfiprintf_r+0x130>
 801436c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014370:	4604      	mov	r4, r0
 8014372:	2301      	movs	r3, #1
 8014374:	e7f0      	b.n	8014358 <_svfiprintf_r+0x194>
 8014376:	ab03      	add	r3, sp, #12
 8014378:	9300      	str	r3, [sp, #0]
 801437a:	462a      	mov	r2, r5
 801437c:	4b0f      	ldr	r3, [pc, #60]	; (80143bc <_svfiprintf_r+0x1f8>)
 801437e:	a904      	add	r1, sp, #16
 8014380:	4638      	mov	r0, r7
 8014382:	f7fd fe5d 	bl	8012040 <_printf_float>
 8014386:	1c42      	adds	r2, r0, #1
 8014388:	4606      	mov	r6, r0
 801438a:	d1d6      	bne.n	801433a <_svfiprintf_r+0x176>
 801438c:	89ab      	ldrh	r3, [r5, #12]
 801438e:	065b      	lsls	r3, r3, #25
 8014390:	f53f af2c 	bmi.w	80141ec <_svfiprintf_r+0x28>
 8014394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014396:	b01d      	add	sp, #116	; 0x74
 8014398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801439c:	ab03      	add	r3, sp, #12
 801439e:	9300      	str	r3, [sp, #0]
 80143a0:	462a      	mov	r2, r5
 80143a2:	4b06      	ldr	r3, [pc, #24]	; (80143bc <_svfiprintf_r+0x1f8>)
 80143a4:	a904      	add	r1, sp, #16
 80143a6:	4638      	mov	r0, r7
 80143a8:	f7fe f8ee 	bl	8012588 <_printf_i>
 80143ac:	e7eb      	b.n	8014386 <_svfiprintf_r+0x1c2>
 80143ae:	bf00      	nop
 80143b0:	0801b34c 	.word	0x0801b34c
 80143b4:	0801b356 	.word	0x0801b356
 80143b8:	08012041 	.word	0x08012041
 80143bc:	0801410d 	.word	0x0801410d
 80143c0:	0801b352 	.word	0x0801b352

080143c4 <_read_r>:
 80143c4:	b538      	push	{r3, r4, r5, lr}
 80143c6:	4d07      	ldr	r5, [pc, #28]	; (80143e4 <_read_r+0x20>)
 80143c8:	4604      	mov	r4, r0
 80143ca:	4608      	mov	r0, r1
 80143cc:	4611      	mov	r1, r2
 80143ce:	2200      	movs	r2, #0
 80143d0:	602a      	str	r2, [r5, #0]
 80143d2:	461a      	mov	r2, r3
 80143d4:	f7f0 fa20 	bl	8004818 <_read>
 80143d8:	1c43      	adds	r3, r0, #1
 80143da:	d102      	bne.n	80143e2 <_read_r+0x1e>
 80143dc:	682b      	ldr	r3, [r5, #0]
 80143de:	b103      	cbz	r3, 80143e2 <_read_r+0x1e>
 80143e0:	6023      	str	r3, [r4, #0]
 80143e2:	bd38      	pop	{r3, r4, r5, pc}
 80143e4:	2000f1a0 	.word	0x2000f1a0

080143e8 <__assert_func>:
 80143e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80143ea:	4614      	mov	r4, r2
 80143ec:	461a      	mov	r2, r3
 80143ee:	4b09      	ldr	r3, [pc, #36]	; (8014414 <__assert_func+0x2c>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	4605      	mov	r5, r0
 80143f4:	68d8      	ldr	r0, [r3, #12]
 80143f6:	b14c      	cbz	r4, 801440c <__assert_func+0x24>
 80143f8:	4b07      	ldr	r3, [pc, #28]	; (8014418 <__assert_func+0x30>)
 80143fa:	9100      	str	r1, [sp, #0]
 80143fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014400:	4906      	ldr	r1, [pc, #24]	; (801441c <__assert_func+0x34>)
 8014402:	462b      	mov	r3, r5
 8014404:	f000 f80e 	bl	8014424 <fiprintf>
 8014408:	f000 fa98 	bl	801493c <abort>
 801440c:	4b04      	ldr	r3, [pc, #16]	; (8014420 <__assert_func+0x38>)
 801440e:	461c      	mov	r4, r3
 8014410:	e7f3      	b.n	80143fa <__assert_func+0x12>
 8014412:	bf00      	nop
 8014414:	200001b0 	.word	0x200001b0
 8014418:	0801b35d 	.word	0x0801b35d
 801441c:	0801b36a 	.word	0x0801b36a
 8014420:	0801b398 	.word	0x0801b398

08014424 <fiprintf>:
 8014424:	b40e      	push	{r1, r2, r3}
 8014426:	b503      	push	{r0, r1, lr}
 8014428:	4601      	mov	r1, r0
 801442a:	ab03      	add	r3, sp, #12
 801442c:	4805      	ldr	r0, [pc, #20]	; (8014444 <fiprintf+0x20>)
 801442e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014432:	6800      	ldr	r0, [r0, #0]
 8014434:	9301      	str	r3, [sp, #4]
 8014436:	f000 f883 	bl	8014540 <_vfiprintf_r>
 801443a:	b002      	add	sp, #8
 801443c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014440:	b003      	add	sp, #12
 8014442:	4770      	bx	lr
 8014444:	200001b0 	.word	0x200001b0

08014448 <__ascii_mbtowc>:
 8014448:	b082      	sub	sp, #8
 801444a:	b901      	cbnz	r1, 801444e <__ascii_mbtowc+0x6>
 801444c:	a901      	add	r1, sp, #4
 801444e:	b142      	cbz	r2, 8014462 <__ascii_mbtowc+0x1a>
 8014450:	b14b      	cbz	r3, 8014466 <__ascii_mbtowc+0x1e>
 8014452:	7813      	ldrb	r3, [r2, #0]
 8014454:	600b      	str	r3, [r1, #0]
 8014456:	7812      	ldrb	r2, [r2, #0]
 8014458:	1e10      	subs	r0, r2, #0
 801445a:	bf18      	it	ne
 801445c:	2001      	movne	r0, #1
 801445e:	b002      	add	sp, #8
 8014460:	4770      	bx	lr
 8014462:	4610      	mov	r0, r2
 8014464:	e7fb      	b.n	801445e <__ascii_mbtowc+0x16>
 8014466:	f06f 0001 	mvn.w	r0, #1
 801446a:	e7f8      	b.n	801445e <__ascii_mbtowc+0x16>

0801446c <memmove>:
 801446c:	4288      	cmp	r0, r1
 801446e:	b510      	push	{r4, lr}
 8014470:	eb01 0402 	add.w	r4, r1, r2
 8014474:	d902      	bls.n	801447c <memmove+0x10>
 8014476:	4284      	cmp	r4, r0
 8014478:	4623      	mov	r3, r4
 801447a:	d807      	bhi.n	801448c <memmove+0x20>
 801447c:	1e43      	subs	r3, r0, #1
 801447e:	42a1      	cmp	r1, r4
 8014480:	d008      	beq.n	8014494 <memmove+0x28>
 8014482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014486:	f803 2f01 	strb.w	r2, [r3, #1]!
 801448a:	e7f8      	b.n	801447e <memmove+0x12>
 801448c:	4402      	add	r2, r0
 801448e:	4601      	mov	r1, r0
 8014490:	428a      	cmp	r2, r1
 8014492:	d100      	bne.n	8014496 <memmove+0x2a>
 8014494:	bd10      	pop	{r4, pc}
 8014496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801449a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801449e:	e7f7      	b.n	8014490 <memmove+0x24>

080144a0 <_realloc_r>:
 80144a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144a2:	4607      	mov	r7, r0
 80144a4:	4614      	mov	r4, r2
 80144a6:	460e      	mov	r6, r1
 80144a8:	b921      	cbnz	r1, 80144b4 <_realloc_r+0x14>
 80144aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80144ae:	4611      	mov	r1, r2
 80144b0:	f7fd bccc 	b.w	8011e4c <_malloc_r>
 80144b4:	b922      	cbnz	r2, 80144c0 <_realloc_r+0x20>
 80144b6:	f7ff fdd9 	bl	801406c <_free_r>
 80144ba:	4625      	mov	r5, r4
 80144bc:	4628      	mov	r0, r5
 80144be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144c0:	f000 faa8 	bl	8014a14 <_malloc_usable_size_r>
 80144c4:	42a0      	cmp	r0, r4
 80144c6:	d20f      	bcs.n	80144e8 <_realloc_r+0x48>
 80144c8:	4621      	mov	r1, r4
 80144ca:	4638      	mov	r0, r7
 80144cc:	f7fd fcbe 	bl	8011e4c <_malloc_r>
 80144d0:	4605      	mov	r5, r0
 80144d2:	2800      	cmp	r0, #0
 80144d4:	d0f2      	beq.n	80144bc <_realloc_r+0x1c>
 80144d6:	4631      	mov	r1, r6
 80144d8:	4622      	mov	r2, r4
 80144da:	f7fd fca0 	bl	8011e1e <memcpy>
 80144de:	4631      	mov	r1, r6
 80144e0:	4638      	mov	r0, r7
 80144e2:	f7ff fdc3 	bl	801406c <_free_r>
 80144e6:	e7e9      	b.n	80144bc <_realloc_r+0x1c>
 80144e8:	4635      	mov	r5, r6
 80144ea:	e7e7      	b.n	80144bc <_realloc_r+0x1c>

080144ec <__sfputc_r>:
 80144ec:	6893      	ldr	r3, [r2, #8]
 80144ee:	3b01      	subs	r3, #1
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	b410      	push	{r4}
 80144f4:	6093      	str	r3, [r2, #8]
 80144f6:	da08      	bge.n	801450a <__sfputc_r+0x1e>
 80144f8:	6994      	ldr	r4, [r2, #24]
 80144fa:	42a3      	cmp	r3, r4
 80144fc:	db01      	blt.n	8014502 <__sfputc_r+0x16>
 80144fe:	290a      	cmp	r1, #10
 8014500:	d103      	bne.n	801450a <__sfputc_r+0x1e>
 8014502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014506:	f000 b94b 	b.w	80147a0 <__swbuf_r>
 801450a:	6813      	ldr	r3, [r2, #0]
 801450c:	1c58      	adds	r0, r3, #1
 801450e:	6010      	str	r0, [r2, #0]
 8014510:	7019      	strb	r1, [r3, #0]
 8014512:	4608      	mov	r0, r1
 8014514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014518:	4770      	bx	lr

0801451a <__sfputs_r>:
 801451a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801451c:	4606      	mov	r6, r0
 801451e:	460f      	mov	r7, r1
 8014520:	4614      	mov	r4, r2
 8014522:	18d5      	adds	r5, r2, r3
 8014524:	42ac      	cmp	r4, r5
 8014526:	d101      	bne.n	801452c <__sfputs_r+0x12>
 8014528:	2000      	movs	r0, #0
 801452a:	e007      	b.n	801453c <__sfputs_r+0x22>
 801452c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014530:	463a      	mov	r2, r7
 8014532:	4630      	mov	r0, r6
 8014534:	f7ff ffda 	bl	80144ec <__sfputc_r>
 8014538:	1c43      	adds	r3, r0, #1
 801453a:	d1f3      	bne.n	8014524 <__sfputs_r+0xa>
 801453c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014540 <_vfiprintf_r>:
 8014540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014544:	460d      	mov	r5, r1
 8014546:	b09d      	sub	sp, #116	; 0x74
 8014548:	4614      	mov	r4, r2
 801454a:	4698      	mov	r8, r3
 801454c:	4606      	mov	r6, r0
 801454e:	b118      	cbz	r0, 8014558 <_vfiprintf_r+0x18>
 8014550:	6983      	ldr	r3, [r0, #24]
 8014552:	b90b      	cbnz	r3, 8014558 <_vfiprintf_r+0x18>
 8014554:	f7fd fb84 	bl	8011c60 <__sinit>
 8014558:	4b89      	ldr	r3, [pc, #548]	; (8014780 <_vfiprintf_r+0x240>)
 801455a:	429d      	cmp	r5, r3
 801455c:	d11b      	bne.n	8014596 <_vfiprintf_r+0x56>
 801455e:	6875      	ldr	r5, [r6, #4]
 8014560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014562:	07d9      	lsls	r1, r3, #31
 8014564:	d405      	bmi.n	8014572 <_vfiprintf_r+0x32>
 8014566:	89ab      	ldrh	r3, [r5, #12]
 8014568:	059a      	lsls	r2, r3, #22
 801456a:	d402      	bmi.n	8014572 <_vfiprintf_r+0x32>
 801456c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801456e:	f7fd fc54 	bl	8011e1a <__retarget_lock_acquire_recursive>
 8014572:	89ab      	ldrh	r3, [r5, #12]
 8014574:	071b      	lsls	r3, r3, #28
 8014576:	d501      	bpl.n	801457c <_vfiprintf_r+0x3c>
 8014578:	692b      	ldr	r3, [r5, #16]
 801457a:	b9eb      	cbnz	r3, 80145b8 <_vfiprintf_r+0x78>
 801457c:	4629      	mov	r1, r5
 801457e:	4630      	mov	r0, r6
 8014580:	f000 f96e 	bl	8014860 <__swsetup_r>
 8014584:	b1c0      	cbz	r0, 80145b8 <_vfiprintf_r+0x78>
 8014586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014588:	07dc      	lsls	r4, r3, #31
 801458a:	d50e      	bpl.n	80145aa <_vfiprintf_r+0x6a>
 801458c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014590:	b01d      	add	sp, #116	; 0x74
 8014592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014596:	4b7b      	ldr	r3, [pc, #492]	; (8014784 <_vfiprintf_r+0x244>)
 8014598:	429d      	cmp	r5, r3
 801459a:	d101      	bne.n	80145a0 <_vfiprintf_r+0x60>
 801459c:	68b5      	ldr	r5, [r6, #8]
 801459e:	e7df      	b.n	8014560 <_vfiprintf_r+0x20>
 80145a0:	4b79      	ldr	r3, [pc, #484]	; (8014788 <_vfiprintf_r+0x248>)
 80145a2:	429d      	cmp	r5, r3
 80145a4:	bf08      	it	eq
 80145a6:	68f5      	ldreq	r5, [r6, #12]
 80145a8:	e7da      	b.n	8014560 <_vfiprintf_r+0x20>
 80145aa:	89ab      	ldrh	r3, [r5, #12]
 80145ac:	0598      	lsls	r0, r3, #22
 80145ae:	d4ed      	bmi.n	801458c <_vfiprintf_r+0x4c>
 80145b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80145b2:	f7fd fc33 	bl	8011e1c <__retarget_lock_release_recursive>
 80145b6:	e7e9      	b.n	801458c <_vfiprintf_r+0x4c>
 80145b8:	2300      	movs	r3, #0
 80145ba:	9309      	str	r3, [sp, #36]	; 0x24
 80145bc:	2320      	movs	r3, #32
 80145be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80145c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80145c6:	2330      	movs	r3, #48	; 0x30
 80145c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801478c <_vfiprintf_r+0x24c>
 80145cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80145d0:	f04f 0901 	mov.w	r9, #1
 80145d4:	4623      	mov	r3, r4
 80145d6:	469a      	mov	sl, r3
 80145d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145dc:	b10a      	cbz	r2, 80145e2 <_vfiprintf_r+0xa2>
 80145de:	2a25      	cmp	r2, #37	; 0x25
 80145e0:	d1f9      	bne.n	80145d6 <_vfiprintf_r+0x96>
 80145e2:	ebba 0b04 	subs.w	fp, sl, r4
 80145e6:	d00b      	beq.n	8014600 <_vfiprintf_r+0xc0>
 80145e8:	465b      	mov	r3, fp
 80145ea:	4622      	mov	r2, r4
 80145ec:	4629      	mov	r1, r5
 80145ee:	4630      	mov	r0, r6
 80145f0:	f7ff ff93 	bl	801451a <__sfputs_r>
 80145f4:	3001      	adds	r0, #1
 80145f6:	f000 80aa 	beq.w	801474e <_vfiprintf_r+0x20e>
 80145fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145fc:	445a      	add	r2, fp
 80145fe:	9209      	str	r2, [sp, #36]	; 0x24
 8014600:	f89a 3000 	ldrb.w	r3, [sl]
 8014604:	2b00      	cmp	r3, #0
 8014606:	f000 80a2 	beq.w	801474e <_vfiprintf_r+0x20e>
 801460a:	2300      	movs	r3, #0
 801460c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014614:	f10a 0a01 	add.w	sl, sl, #1
 8014618:	9304      	str	r3, [sp, #16]
 801461a:	9307      	str	r3, [sp, #28]
 801461c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014620:	931a      	str	r3, [sp, #104]	; 0x68
 8014622:	4654      	mov	r4, sl
 8014624:	2205      	movs	r2, #5
 8014626:	f814 1b01 	ldrb.w	r1, [r4], #1
 801462a:	4858      	ldr	r0, [pc, #352]	; (801478c <_vfiprintf_r+0x24c>)
 801462c:	f7eb fdd8 	bl	80001e0 <memchr>
 8014630:	9a04      	ldr	r2, [sp, #16]
 8014632:	b9d8      	cbnz	r0, 801466c <_vfiprintf_r+0x12c>
 8014634:	06d1      	lsls	r1, r2, #27
 8014636:	bf44      	itt	mi
 8014638:	2320      	movmi	r3, #32
 801463a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801463e:	0713      	lsls	r3, r2, #28
 8014640:	bf44      	itt	mi
 8014642:	232b      	movmi	r3, #43	; 0x2b
 8014644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014648:	f89a 3000 	ldrb.w	r3, [sl]
 801464c:	2b2a      	cmp	r3, #42	; 0x2a
 801464e:	d015      	beq.n	801467c <_vfiprintf_r+0x13c>
 8014650:	9a07      	ldr	r2, [sp, #28]
 8014652:	4654      	mov	r4, sl
 8014654:	2000      	movs	r0, #0
 8014656:	f04f 0c0a 	mov.w	ip, #10
 801465a:	4621      	mov	r1, r4
 801465c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014660:	3b30      	subs	r3, #48	; 0x30
 8014662:	2b09      	cmp	r3, #9
 8014664:	d94e      	bls.n	8014704 <_vfiprintf_r+0x1c4>
 8014666:	b1b0      	cbz	r0, 8014696 <_vfiprintf_r+0x156>
 8014668:	9207      	str	r2, [sp, #28]
 801466a:	e014      	b.n	8014696 <_vfiprintf_r+0x156>
 801466c:	eba0 0308 	sub.w	r3, r0, r8
 8014670:	fa09 f303 	lsl.w	r3, r9, r3
 8014674:	4313      	orrs	r3, r2
 8014676:	9304      	str	r3, [sp, #16]
 8014678:	46a2      	mov	sl, r4
 801467a:	e7d2      	b.n	8014622 <_vfiprintf_r+0xe2>
 801467c:	9b03      	ldr	r3, [sp, #12]
 801467e:	1d19      	adds	r1, r3, #4
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	9103      	str	r1, [sp, #12]
 8014684:	2b00      	cmp	r3, #0
 8014686:	bfbb      	ittet	lt
 8014688:	425b      	neglt	r3, r3
 801468a:	f042 0202 	orrlt.w	r2, r2, #2
 801468e:	9307      	strge	r3, [sp, #28]
 8014690:	9307      	strlt	r3, [sp, #28]
 8014692:	bfb8      	it	lt
 8014694:	9204      	strlt	r2, [sp, #16]
 8014696:	7823      	ldrb	r3, [r4, #0]
 8014698:	2b2e      	cmp	r3, #46	; 0x2e
 801469a:	d10c      	bne.n	80146b6 <_vfiprintf_r+0x176>
 801469c:	7863      	ldrb	r3, [r4, #1]
 801469e:	2b2a      	cmp	r3, #42	; 0x2a
 80146a0:	d135      	bne.n	801470e <_vfiprintf_r+0x1ce>
 80146a2:	9b03      	ldr	r3, [sp, #12]
 80146a4:	1d1a      	adds	r2, r3, #4
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	9203      	str	r2, [sp, #12]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	bfb8      	it	lt
 80146ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80146b2:	3402      	adds	r4, #2
 80146b4:	9305      	str	r3, [sp, #20]
 80146b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801479c <_vfiprintf_r+0x25c>
 80146ba:	7821      	ldrb	r1, [r4, #0]
 80146bc:	2203      	movs	r2, #3
 80146be:	4650      	mov	r0, sl
 80146c0:	f7eb fd8e 	bl	80001e0 <memchr>
 80146c4:	b140      	cbz	r0, 80146d8 <_vfiprintf_r+0x198>
 80146c6:	2340      	movs	r3, #64	; 0x40
 80146c8:	eba0 000a 	sub.w	r0, r0, sl
 80146cc:	fa03 f000 	lsl.w	r0, r3, r0
 80146d0:	9b04      	ldr	r3, [sp, #16]
 80146d2:	4303      	orrs	r3, r0
 80146d4:	3401      	adds	r4, #1
 80146d6:	9304      	str	r3, [sp, #16]
 80146d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146dc:	482c      	ldr	r0, [pc, #176]	; (8014790 <_vfiprintf_r+0x250>)
 80146de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80146e2:	2206      	movs	r2, #6
 80146e4:	f7eb fd7c 	bl	80001e0 <memchr>
 80146e8:	2800      	cmp	r0, #0
 80146ea:	d03f      	beq.n	801476c <_vfiprintf_r+0x22c>
 80146ec:	4b29      	ldr	r3, [pc, #164]	; (8014794 <_vfiprintf_r+0x254>)
 80146ee:	bb1b      	cbnz	r3, 8014738 <_vfiprintf_r+0x1f8>
 80146f0:	9b03      	ldr	r3, [sp, #12]
 80146f2:	3307      	adds	r3, #7
 80146f4:	f023 0307 	bic.w	r3, r3, #7
 80146f8:	3308      	adds	r3, #8
 80146fa:	9303      	str	r3, [sp, #12]
 80146fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146fe:	443b      	add	r3, r7
 8014700:	9309      	str	r3, [sp, #36]	; 0x24
 8014702:	e767      	b.n	80145d4 <_vfiprintf_r+0x94>
 8014704:	fb0c 3202 	mla	r2, ip, r2, r3
 8014708:	460c      	mov	r4, r1
 801470a:	2001      	movs	r0, #1
 801470c:	e7a5      	b.n	801465a <_vfiprintf_r+0x11a>
 801470e:	2300      	movs	r3, #0
 8014710:	3401      	adds	r4, #1
 8014712:	9305      	str	r3, [sp, #20]
 8014714:	4619      	mov	r1, r3
 8014716:	f04f 0c0a 	mov.w	ip, #10
 801471a:	4620      	mov	r0, r4
 801471c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014720:	3a30      	subs	r2, #48	; 0x30
 8014722:	2a09      	cmp	r2, #9
 8014724:	d903      	bls.n	801472e <_vfiprintf_r+0x1ee>
 8014726:	2b00      	cmp	r3, #0
 8014728:	d0c5      	beq.n	80146b6 <_vfiprintf_r+0x176>
 801472a:	9105      	str	r1, [sp, #20]
 801472c:	e7c3      	b.n	80146b6 <_vfiprintf_r+0x176>
 801472e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014732:	4604      	mov	r4, r0
 8014734:	2301      	movs	r3, #1
 8014736:	e7f0      	b.n	801471a <_vfiprintf_r+0x1da>
 8014738:	ab03      	add	r3, sp, #12
 801473a:	9300      	str	r3, [sp, #0]
 801473c:	462a      	mov	r2, r5
 801473e:	4b16      	ldr	r3, [pc, #88]	; (8014798 <_vfiprintf_r+0x258>)
 8014740:	a904      	add	r1, sp, #16
 8014742:	4630      	mov	r0, r6
 8014744:	f7fd fc7c 	bl	8012040 <_printf_float>
 8014748:	4607      	mov	r7, r0
 801474a:	1c78      	adds	r0, r7, #1
 801474c:	d1d6      	bne.n	80146fc <_vfiprintf_r+0x1bc>
 801474e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014750:	07d9      	lsls	r1, r3, #31
 8014752:	d405      	bmi.n	8014760 <_vfiprintf_r+0x220>
 8014754:	89ab      	ldrh	r3, [r5, #12]
 8014756:	059a      	lsls	r2, r3, #22
 8014758:	d402      	bmi.n	8014760 <_vfiprintf_r+0x220>
 801475a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801475c:	f7fd fb5e 	bl	8011e1c <__retarget_lock_release_recursive>
 8014760:	89ab      	ldrh	r3, [r5, #12]
 8014762:	065b      	lsls	r3, r3, #25
 8014764:	f53f af12 	bmi.w	801458c <_vfiprintf_r+0x4c>
 8014768:	9809      	ldr	r0, [sp, #36]	; 0x24
 801476a:	e711      	b.n	8014590 <_vfiprintf_r+0x50>
 801476c:	ab03      	add	r3, sp, #12
 801476e:	9300      	str	r3, [sp, #0]
 8014770:	462a      	mov	r2, r5
 8014772:	4b09      	ldr	r3, [pc, #36]	; (8014798 <_vfiprintf_r+0x258>)
 8014774:	a904      	add	r1, sp, #16
 8014776:	4630      	mov	r0, r6
 8014778:	f7fd ff06 	bl	8012588 <_printf_i>
 801477c:	e7e4      	b.n	8014748 <_vfiprintf_r+0x208>
 801477e:	bf00      	nop
 8014780:	0801b0bc 	.word	0x0801b0bc
 8014784:	0801b0dc 	.word	0x0801b0dc
 8014788:	0801b09c 	.word	0x0801b09c
 801478c:	0801b34c 	.word	0x0801b34c
 8014790:	0801b356 	.word	0x0801b356
 8014794:	08012041 	.word	0x08012041
 8014798:	0801451b 	.word	0x0801451b
 801479c:	0801b352 	.word	0x0801b352

080147a0 <__swbuf_r>:
 80147a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147a2:	460e      	mov	r6, r1
 80147a4:	4614      	mov	r4, r2
 80147a6:	4605      	mov	r5, r0
 80147a8:	b118      	cbz	r0, 80147b2 <__swbuf_r+0x12>
 80147aa:	6983      	ldr	r3, [r0, #24]
 80147ac:	b90b      	cbnz	r3, 80147b2 <__swbuf_r+0x12>
 80147ae:	f7fd fa57 	bl	8011c60 <__sinit>
 80147b2:	4b21      	ldr	r3, [pc, #132]	; (8014838 <__swbuf_r+0x98>)
 80147b4:	429c      	cmp	r4, r3
 80147b6:	d12b      	bne.n	8014810 <__swbuf_r+0x70>
 80147b8:	686c      	ldr	r4, [r5, #4]
 80147ba:	69a3      	ldr	r3, [r4, #24]
 80147bc:	60a3      	str	r3, [r4, #8]
 80147be:	89a3      	ldrh	r3, [r4, #12]
 80147c0:	071a      	lsls	r2, r3, #28
 80147c2:	d52f      	bpl.n	8014824 <__swbuf_r+0x84>
 80147c4:	6923      	ldr	r3, [r4, #16]
 80147c6:	b36b      	cbz	r3, 8014824 <__swbuf_r+0x84>
 80147c8:	6923      	ldr	r3, [r4, #16]
 80147ca:	6820      	ldr	r0, [r4, #0]
 80147cc:	1ac0      	subs	r0, r0, r3
 80147ce:	6963      	ldr	r3, [r4, #20]
 80147d0:	b2f6      	uxtb	r6, r6
 80147d2:	4283      	cmp	r3, r0
 80147d4:	4637      	mov	r7, r6
 80147d6:	dc04      	bgt.n	80147e2 <__swbuf_r+0x42>
 80147d8:	4621      	mov	r1, r4
 80147da:	4628      	mov	r0, r5
 80147dc:	f7ff f852 	bl	8013884 <_fflush_r>
 80147e0:	bb30      	cbnz	r0, 8014830 <__swbuf_r+0x90>
 80147e2:	68a3      	ldr	r3, [r4, #8]
 80147e4:	3b01      	subs	r3, #1
 80147e6:	60a3      	str	r3, [r4, #8]
 80147e8:	6823      	ldr	r3, [r4, #0]
 80147ea:	1c5a      	adds	r2, r3, #1
 80147ec:	6022      	str	r2, [r4, #0]
 80147ee:	701e      	strb	r6, [r3, #0]
 80147f0:	6963      	ldr	r3, [r4, #20]
 80147f2:	3001      	adds	r0, #1
 80147f4:	4283      	cmp	r3, r0
 80147f6:	d004      	beq.n	8014802 <__swbuf_r+0x62>
 80147f8:	89a3      	ldrh	r3, [r4, #12]
 80147fa:	07db      	lsls	r3, r3, #31
 80147fc:	d506      	bpl.n	801480c <__swbuf_r+0x6c>
 80147fe:	2e0a      	cmp	r6, #10
 8014800:	d104      	bne.n	801480c <__swbuf_r+0x6c>
 8014802:	4621      	mov	r1, r4
 8014804:	4628      	mov	r0, r5
 8014806:	f7ff f83d 	bl	8013884 <_fflush_r>
 801480a:	b988      	cbnz	r0, 8014830 <__swbuf_r+0x90>
 801480c:	4638      	mov	r0, r7
 801480e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014810:	4b0a      	ldr	r3, [pc, #40]	; (801483c <__swbuf_r+0x9c>)
 8014812:	429c      	cmp	r4, r3
 8014814:	d101      	bne.n	801481a <__swbuf_r+0x7a>
 8014816:	68ac      	ldr	r4, [r5, #8]
 8014818:	e7cf      	b.n	80147ba <__swbuf_r+0x1a>
 801481a:	4b09      	ldr	r3, [pc, #36]	; (8014840 <__swbuf_r+0xa0>)
 801481c:	429c      	cmp	r4, r3
 801481e:	bf08      	it	eq
 8014820:	68ec      	ldreq	r4, [r5, #12]
 8014822:	e7ca      	b.n	80147ba <__swbuf_r+0x1a>
 8014824:	4621      	mov	r1, r4
 8014826:	4628      	mov	r0, r5
 8014828:	f000 f81a 	bl	8014860 <__swsetup_r>
 801482c:	2800      	cmp	r0, #0
 801482e:	d0cb      	beq.n	80147c8 <__swbuf_r+0x28>
 8014830:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014834:	e7ea      	b.n	801480c <__swbuf_r+0x6c>
 8014836:	bf00      	nop
 8014838:	0801b0bc 	.word	0x0801b0bc
 801483c:	0801b0dc 	.word	0x0801b0dc
 8014840:	0801b09c 	.word	0x0801b09c

08014844 <__ascii_wctomb>:
 8014844:	b149      	cbz	r1, 801485a <__ascii_wctomb+0x16>
 8014846:	2aff      	cmp	r2, #255	; 0xff
 8014848:	bf85      	ittet	hi
 801484a:	238a      	movhi	r3, #138	; 0x8a
 801484c:	6003      	strhi	r3, [r0, #0]
 801484e:	700a      	strbls	r2, [r1, #0]
 8014850:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014854:	bf98      	it	ls
 8014856:	2001      	movls	r0, #1
 8014858:	4770      	bx	lr
 801485a:	4608      	mov	r0, r1
 801485c:	4770      	bx	lr
	...

08014860 <__swsetup_r>:
 8014860:	4b32      	ldr	r3, [pc, #200]	; (801492c <__swsetup_r+0xcc>)
 8014862:	b570      	push	{r4, r5, r6, lr}
 8014864:	681d      	ldr	r5, [r3, #0]
 8014866:	4606      	mov	r6, r0
 8014868:	460c      	mov	r4, r1
 801486a:	b125      	cbz	r5, 8014876 <__swsetup_r+0x16>
 801486c:	69ab      	ldr	r3, [r5, #24]
 801486e:	b913      	cbnz	r3, 8014876 <__swsetup_r+0x16>
 8014870:	4628      	mov	r0, r5
 8014872:	f7fd f9f5 	bl	8011c60 <__sinit>
 8014876:	4b2e      	ldr	r3, [pc, #184]	; (8014930 <__swsetup_r+0xd0>)
 8014878:	429c      	cmp	r4, r3
 801487a:	d10f      	bne.n	801489c <__swsetup_r+0x3c>
 801487c:	686c      	ldr	r4, [r5, #4]
 801487e:	89a3      	ldrh	r3, [r4, #12]
 8014880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014884:	0719      	lsls	r1, r3, #28
 8014886:	d42c      	bmi.n	80148e2 <__swsetup_r+0x82>
 8014888:	06dd      	lsls	r5, r3, #27
 801488a:	d411      	bmi.n	80148b0 <__swsetup_r+0x50>
 801488c:	2309      	movs	r3, #9
 801488e:	6033      	str	r3, [r6, #0]
 8014890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014894:	81a3      	strh	r3, [r4, #12]
 8014896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801489a:	e03e      	b.n	801491a <__swsetup_r+0xba>
 801489c:	4b25      	ldr	r3, [pc, #148]	; (8014934 <__swsetup_r+0xd4>)
 801489e:	429c      	cmp	r4, r3
 80148a0:	d101      	bne.n	80148a6 <__swsetup_r+0x46>
 80148a2:	68ac      	ldr	r4, [r5, #8]
 80148a4:	e7eb      	b.n	801487e <__swsetup_r+0x1e>
 80148a6:	4b24      	ldr	r3, [pc, #144]	; (8014938 <__swsetup_r+0xd8>)
 80148a8:	429c      	cmp	r4, r3
 80148aa:	bf08      	it	eq
 80148ac:	68ec      	ldreq	r4, [r5, #12]
 80148ae:	e7e6      	b.n	801487e <__swsetup_r+0x1e>
 80148b0:	0758      	lsls	r0, r3, #29
 80148b2:	d512      	bpl.n	80148da <__swsetup_r+0x7a>
 80148b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148b6:	b141      	cbz	r1, 80148ca <__swsetup_r+0x6a>
 80148b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148bc:	4299      	cmp	r1, r3
 80148be:	d002      	beq.n	80148c6 <__swsetup_r+0x66>
 80148c0:	4630      	mov	r0, r6
 80148c2:	f7ff fbd3 	bl	801406c <_free_r>
 80148c6:	2300      	movs	r3, #0
 80148c8:	6363      	str	r3, [r4, #52]	; 0x34
 80148ca:	89a3      	ldrh	r3, [r4, #12]
 80148cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80148d0:	81a3      	strh	r3, [r4, #12]
 80148d2:	2300      	movs	r3, #0
 80148d4:	6063      	str	r3, [r4, #4]
 80148d6:	6923      	ldr	r3, [r4, #16]
 80148d8:	6023      	str	r3, [r4, #0]
 80148da:	89a3      	ldrh	r3, [r4, #12]
 80148dc:	f043 0308 	orr.w	r3, r3, #8
 80148e0:	81a3      	strh	r3, [r4, #12]
 80148e2:	6923      	ldr	r3, [r4, #16]
 80148e4:	b94b      	cbnz	r3, 80148fa <__swsetup_r+0x9a>
 80148e6:	89a3      	ldrh	r3, [r4, #12]
 80148e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80148ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80148f0:	d003      	beq.n	80148fa <__swsetup_r+0x9a>
 80148f2:	4621      	mov	r1, r4
 80148f4:	4630      	mov	r0, r6
 80148f6:	f000 f84d 	bl	8014994 <__smakebuf_r>
 80148fa:	89a0      	ldrh	r0, [r4, #12]
 80148fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014900:	f010 0301 	ands.w	r3, r0, #1
 8014904:	d00a      	beq.n	801491c <__swsetup_r+0xbc>
 8014906:	2300      	movs	r3, #0
 8014908:	60a3      	str	r3, [r4, #8]
 801490a:	6963      	ldr	r3, [r4, #20]
 801490c:	425b      	negs	r3, r3
 801490e:	61a3      	str	r3, [r4, #24]
 8014910:	6923      	ldr	r3, [r4, #16]
 8014912:	b943      	cbnz	r3, 8014926 <__swsetup_r+0xc6>
 8014914:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014918:	d1ba      	bne.n	8014890 <__swsetup_r+0x30>
 801491a:	bd70      	pop	{r4, r5, r6, pc}
 801491c:	0781      	lsls	r1, r0, #30
 801491e:	bf58      	it	pl
 8014920:	6963      	ldrpl	r3, [r4, #20]
 8014922:	60a3      	str	r3, [r4, #8]
 8014924:	e7f4      	b.n	8014910 <__swsetup_r+0xb0>
 8014926:	2000      	movs	r0, #0
 8014928:	e7f7      	b.n	801491a <__swsetup_r+0xba>
 801492a:	bf00      	nop
 801492c:	200001b0 	.word	0x200001b0
 8014930:	0801b0bc 	.word	0x0801b0bc
 8014934:	0801b0dc 	.word	0x0801b0dc
 8014938:	0801b09c 	.word	0x0801b09c

0801493c <abort>:
 801493c:	b508      	push	{r3, lr}
 801493e:	2006      	movs	r0, #6
 8014940:	f000 f898 	bl	8014a74 <raise>
 8014944:	2001      	movs	r0, #1
 8014946:	f7ef ff5d 	bl	8004804 <_exit>

0801494a <__swhatbuf_r>:
 801494a:	b570      	push	{r4, r5, r6, lr}
 801494c:	460e      	mov	r6, r1
 801494e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014952:	2900      	cmp	r1, #0
 8014954:	b096      	sub	sp, #88	; 0x58
 8014956:	4614      	mov	r4, r2
 8014958:	461d      	mov	r5, r3
 801495a:	da07      	bge.n	801496c <__swhatbuf_r+0x22>
 801495c:	2300      	movs	r3, #0
 801495e:	602b      	str	r3, [r5, #0]
 8014960:	89b3      	ldrh	r3, [r6, #12]
 8014962:	061a      	lsls	r2, r3, #24
 8014964:	d410      	bmi.n	8014988 <__swhatbuf_r+0x3e>
 8014966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801496a:	e00e      	b.n	801498a <__swhatbuf_r+0x40>
 801496c:	466a      	mov	r2, sp
 801496e:	f000 f89d 	bl	8014aac <_fstat_r>
 8014972:	2800      	cmp	r0, #0
 8014974:	dbf2      	blt.n	801495c <__swhatbuf_r+0x12>
 8014976:	9a01      	ldr	r2, [sp, #4]
 8014978:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801497c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014980:	425a      	negs	r2, r3
 8014982:	415a      	adcs	r2, r3
 8014984:	602a      	str	r2, [r5, #0]
 8014986:	e7ee      	b.n	8014966 <__swhatbuf_r+0x1c>
 8014988:	2340      	movs	r3, #64	; 0x40
 801498a:	2000      	movs	r0, #0
 801498c:	6023      	str	r3, [r4, #0]
 801498e:	b016      	add	sp, #88	; 0x58
 8014990:	bd70      	pop	{r4, r5, r6, pc}
	...

08014994 <__smakebuf_r>:
 8014994:	898b      	ldrh	r3, [r1, #12]
 8014996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014998:	079d      	lsls	r5, r3, #30
 801499a:	4606      	mov	r6, r0
 801499c:	460c      	mov	r4, r1
 801499e:	d507      	bpl.n	80149b0 <__smakebuf_r+0x1c>
 80149a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80149a4:	6023      	str	r3, [r4, #0]
 80149a6:	6123      	str	r3, [r4, #16]
 80149a8:	2301      	movs	r3, #1
 80149aa:	6163      	str	r3, [r4, #20]
 80149ac:	b002      	add	sp, #8
 80149ae:	bd70      	pop	{r4, r5, r6, pc}
 80149b0:	ab01      	add	r3, sp, #4
 80149b2:	466a      	mov	r2, sp
 80149b4:	f7ff ffc9 	bl	801494a <__swhatbuf_r>
 80149b8:	9900      	ldr	r1, [sp, #0]
 80149ba:	4605      	mov	r5, r0
 80149bc:	4630      	mov	r0, r6
 80149be:	f7fd fa45 	bl	8011e4c <_malloc_r>
 80149c2:	b948      	cbnz	r0, 80149d8 <__smakebuf_r+0x44>
 80149c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149c8:	059a      	lsls	r2, r3, #22
 80149ca:	d4ef      	bmi.n	80149ac <__smakebuf_r+0x18>
 80149cc:	f023 0303 	bic.w	r3, r3, #3
 80149d0:	f043 0302 	orr.w	r3, r3, #2
 80149d4:	81a3      	strh	r3, [r4, #12]
 80149d6:	e7e3      	b.n	80149a0 <__smakebuf_r+0xc>
 80149d8:	4b0d      	ldr	r3, [pc, #52]	; (8014a10 <__smakebuf_r+0x7c>)
 80149da:	62b3      	str	r3, [r6, #40]	; 0x28
 80149dc:	89a3      	ldrh	r3, [r4, #12]
 80149de:	6020      	str	r0, [r4, #0]
 80149e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149e4:	81a3      	strh	r3, [r4, #12]
 80149e6:	9b00      	ldr	r3, [sp, #0]
 80149e8:	6163      	str	r3, [r4, #20]
 80149ea:	9b01      	ldr	r3, [sp, #4]
 80149ec:	6120      	str	r0, [r4, #16]
 80149ee:	b15b      	cbz	r3, 8014a08 <__smakebuf_r+0x74>
 80149f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149f4:	4630      	mov	r0, r6
 80149f6:	f000 f86b 	bl	8014ad0 <_isatty_r>
 80149fa:	b128      	cbz	r0, 8014a08 <__smakebuf_r+0x74>
 80149fc:	89a3      	ldrh	r3, [r4, #12]
 80149fe:	f023 0303 	bic.w	r3, r3, #3
 8014a02:	f043 0301 	orr.w	r3, r3, #1
 8014a06:	81a3      	strh	r3, [r4, #12]
 8014a08:	89a0      	ldrh	r0, [r4, #12]
 8014a0a:	4305      	orrs	r5, r0
 8014a0c:	81a5      	strh	r5, [r4, #12]
 8014a0e:	e7cd      	b.n	80149ac <__smakebuf_r+0x18>
 8014a10:	08011bf9 	.word	0x08011bf9

08014a14 <_malloc_usable_size_r>:
 8014a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a18:	1f18      	subs	r0, r3, #4
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	bfbc      	itt	lt
 8014a1e:	580b      	ldrlt	r3, [r1, r0]
 8014a20:	18c0      	addlt	r0, r0, r3
 8014a22:	4770      	bx	lr

08014a24 <_raise_r>:
 8014a24:	291f      	cmp	r1, #31
 8014a26:	b538      	push	{r3, r4, r5, lr}
 8014a28:	4604      	mov	r4, r0
 8014a2a:	460d      	mov	r5, r1
 8014a2c:	d904      	bls.n	8014a38 <_raise_r+0x14>
 8014a2e:	2316      	movs	r3, #22
 8014a30:	6003      	str	r3, [r0, #0]
 8014a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a36:	bd38      	pop	{r3, r4, r5, pc}
 8014a38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014a3a:	b112      	cbz	r2, 8014a42 <_raise_r+0x1e>
 8014a3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014a40:	b94b      	cbnz	r3, 8014a56 <_raise_r+0x32>
 8014a42:	4620      	mov	r0, r4
 8014a44:	f000 f830 	bl	8014aa8 <_getpid_r>
 8014a48:	462a      	mov	r2, r5
 8014a4a:	4601      	mov	r1, r0
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a52:	f000 b817 	b.w	8014a84 <_kill_r>
 8014a56:	2b01      	cmp	r3, #1
 8014a58:	d00a      	beq.n	8014a70 <_raise_r+0x4c>
 8014a5a:	1c59      	adds	r1, r3, #1
 8014a5c:	d103      	bne.n	8014a66 <_raise_r+0x42>
 8014a5e:	2316      	movs	r3, #22
 8014a60:	6003      	str	r3, [r0, #0]
 8014a62:	2001      	movs	r0, #1
 8014a64:	e7e7      	b.n	8014a36 <_raise_r+0x12>
 8014a66:	2400      	movs	r4, #0
 8014a68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014a6c:	4628      	mov	r0, r5
 8014a6e:	4798      	blx	r3
 8014a70:	2000      	movs	r0, #0
 8014a72:	e7e0      	b.n	8014a36 <_raise_r+0x12>

08014a74 <raise>:
 8014a74:	4b02      	ldr	r3, [pc, #8]	; (8014a80 <raise+0xc>)
 8014a76:	4601      	mov	r1, r0
 8014a78:	6818      	ldr	r0, [r3, #0]
 8014a7a:	f7ff bfd3 	b.w	8014a24 <_raise_r>
 8014a7e:	bf00      	nop
 8014a80:	200001b0 	.word	0x200001b0

08014a84 <_kill_r>:
 8014a84:	b538      	push	{r3, r4, r5, lr}
 8014a86:	4d07      	ldr	r5, [pc, #28]	; (8014aa4 <_kill_r+0x20>)
 8014a88:	2300      	movs	r3, #0
 8014a8a:	4604      	mov	r4, r0
 8014a8c:	4608      	mov	r0, r1
 8014a8e:	4611      	mov	r1, r2
 8014a90:	602b      	str	r3, [r5, #0]
 8014a92:	f7ef fea7 	bl	80047e4 <_kill>
 8014a96:	1c43      	adds	r3, r0, #1
 8014a98:	d102      	bne.n	8014aa0 <_kill_r+0x1c>
 8014a9a:	682b      	ldr	r3, [r5, #0]
 8014a9c:	b103      	cbz	r3, 8014aa0 <_kill_r+0x1c>
 8014a9e:	6023      	str	r3, [r4, #0]
 8014aa0:	bd38      	pop	{r3, r4, r5, pc}
 8014aa2:	bf00      	nop
 8014aa4:	2000f1a0 	.word	0x2000f1a0

08014aa8 <_getpid_r>:
 8014aa8:	f7ef be94 	b.w	80047d4 <_getpid>

08014aac <_fstat_r>:
 8014aac:	b538      	push	{r3, r4, r5, lr}
 8014aae:	4d07      	ldr	r5, [pc, #28]	; (8014acc <_fstat_r+0x20>)
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	4604      	mov	r4, r0
 8014ab4:	4608      	mov	r0, r1
 8014ab6:	4611      	mov	r1, r2
 8014ab8:	602b      	str	r3, [r5, #0]
 8014aba:	f7ef fef2 	bl	80048a2 <_fstat>
 8014abe:	1c43      	adds	r3, r0, #1
 8014ac0:	d102      	bne.n	8014ac8 <_fstat_r+0x1c>
 8014ac2:	682b      	ldr	r3, [r5, #0]
 8014ac4:	b103      	cbz	r3, 8014ac8 <_fstat_r+0x1c>
 8014ac6:	6023      	str	r3, [r4, #0]
 8014ac8:	bd38      	pop	{r3, r4, r5, pc}
 8014aca:	bf00      	nop
 8014acc:	2000f1a0 	.word	0x2000f1a0

08014ad0 <_isatty_r>:
 8014ad0:	b538      	push	{r3, r4, r5, lr}
 8014ad2:	4d06      	ldr	r5, [pc, #24]	; (8014aec <_isatty_r+0x1c>)
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	4604      	mov	r4, r0
 8014ad8:	4608      	mov	r0, r1
 8014ada:	602b      	str	r3, [r5, #0]
 8014adc:	f7ef fef1 	bl	80048c2 <_isatty>
 8014ae0:	1c43      	adds	r3, r0, #1
 8014ae2:	d102      	bne.n	8014aea <_isatty_r+0x1a>
 8014ae4:	682b      	ldr	r3, [r5, #0]
 8014ae6:	b103      	cbz	r3, 8014aea <_isatty_r+0x1a>
 8014ae8:	6023      	str	r3, [r4, #0]
 8014aea:	bd38      	pop	{r3, r4, r5, pc}
 8014aec:	2000f1a0 	.word	0x2000f1a0

08014af0 <_init>:
 8014af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014af2:	bf00      	nop
 8014af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014af6:	bc08      	pop	{r3}
 8014af8:	469e      	mov	lr, r3
 8014afa:	4770      	bx	lr

08014afc <_fini>:
 8014afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014afe:	bf00      	nop
 8014b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b02:	bc08      	pop	{r3}
 8014b04:	469e      	mov	lr, r3
 8014b06:	4770      	bx	lr
