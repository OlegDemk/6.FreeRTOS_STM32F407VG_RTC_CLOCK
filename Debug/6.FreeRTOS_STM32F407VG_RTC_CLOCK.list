
6.FreeRTOS_STM32F407VG_RTC_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ce8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000068ac  08013e78  08013e78  00023e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a724  0801a724  00030380  2**0
                  CONTENTS
  4 .ARM          00000008  0801a724  0801a724  0002a724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a72c  0801a72c  00030380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a72c  0801a72c  0002a72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a730  0801a730  0002a730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  0801a734  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030380  2**0
                  CONTENTS
 10 .bss          0000ebd0  20000380  20000380  00030380  2**2
                  ALLOC
 11 ._user_heap_stack 00001100  2000ef50  2000ef50  00030380  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034dce  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006da3  00000000  00000000  0006517e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023f8  00000000  00000000  0006bf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002118  00000000  00000000  0006e320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b10  00000000  00000000  00070438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c39e  00000000  00000000  00099f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec226  00000000  00000000  000c62e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b250c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a758  00000000  00000000  001b2560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000380 	.word	0x20000380
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013e60 	.word	0x08013e60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000384 	.word	0x20000384
 80001cc:	08013e60 	.word	0x08013e60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <TP_Read>:
#include "stm32f4xx_hal.h"


//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8000ee6:	2310      	movs	r3, #16
 8000ee8:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8000eee:	e019      	b.n	8000f24 <TP_Read+0x44>
    {
        value <<= 1;
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <TP_Read+0x54>)
 8000efc:	f004 fd26 	bl	800594c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <TP_Read+0x54>)
 8000f06:	f004 fd21 	bl	800594c <HAL_GPIO_WritePin>

        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <TP_Read+0x58>)
 8000f0e:	f004 fd05 	bl	800591c <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <TP_Read+0x3e>
        {
            value++;
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1e2      	bne.n	8000ef0 <TP_Read+0x10>
    };

    return value;
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40021000 	.word	0x40021000

08000f3c <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8000f46:	2308      	movs	r3, #8
 8000f48:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <TP_Write+0x68>)
 8000f50:	f004 fcfc 	bl	800594c <HAL_GPIO_WritePin>

    while(i > 0)
 8000f54:	e01e      	b.n	8000f94 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da05      	bge.n	8000f6a <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2104      	movs	r1, #4
 8000f62:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <TP_Write+0x6c>)
 8000f64:	f004 fcf2 	bl	800594c <HAL_GPIO_WritePin>
 8000f68:	e004      	b.n	8000f74 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <TP_Write+0x6c>)
 8000f70:	f004 fcec 	bl	800594c <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <TP_Write+0x68>)
 8000f80:	f004 fce4 	bl	800594c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <TP_Write+0x68>)
 8000f8a:	f004 fcdf 	bl	800594c <HAL_GPIO_WritePin>
        i--;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1dd      	bne.n	8000f56 <TP_Write+0x1a>
    };
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	00000000 	.word	0x00000000

08000fb0 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b08b      	sub	sp, #44	; 0x2c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	4862      	ldr	r0, [pc, #392]	; (8001148 <TP_Read_Coordinates+0x198>)
 8000fbe:	f004 fcc5 	bl	800594c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4861      	ldr	r0, [pc, #388]	; (800114c <TP_Read_Coordinates+0x19c>)
 8000fc8:	f004 fcc0 	bl	800594c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd2:	485d      	ldr	r0, [pc, #372]	; (8001148 <TP_Read_Coordinates+0x198>)
 8000fd4:	f004 fcba 	bl	800594c <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
	uint16_t rawx = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	81fb      	strh	r3, [r7, #14]
	uint16_t rawy = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	81bb      	strh	r3, [r7, #12]
	uint32_t calculating_x =0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
	uint32_t calculating_y = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]

    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8000ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff4:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001000:	4851      	ldr	r0, [pc, #324]	; (8001148 <TP_Read_Coordinates+0x198>)
 8001002:	f004 fca3 	bl	800594c <HAL_GPIO_WritePin>


    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001006:	e023      	b.n	8001050 <TP_Read_Coordinates+0xa0>
    {
        TP_Write(CMD_RDY);
 8001008:	2090      	movs	r0, #144	; 0x90
 800100a:	f7ff ff97 	bl	8000f3c <TP_Write>

		rawy = TP_Read();
 800100e:	f7ff ff67 	bl	8000ee0 <TP_Read>
 8001012:	4603      	mov	r3, r0
 8001014:	81bb      	strh	r3, [r7, #12]
		avg_y += rawy;
 8001016:	89bb      	ldrh	r3, [r7, #12]
 8001018:	6a3a      	ldr	r2, [r7, #32]
 800101a:	4413      	add	r3, r2
 800101c:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 800101e:	89bb      	ldrh	r3, [r7, #12]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4413      	add	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]


        TP_Write(CMD_RDX);
 8001026:	20d0      	movs	r0, #208	; 0xd0
 8001028:	f7ff ff88 	bl	8000f3c <TP_Write>
        rawx = TP_Read();
 800102c:	f7ff ff58 	bl	8000ee0 <TP_Read>
 8001030:	4603      	mov	r3, r0
 8001032:	81fb      	strh	r3, [r7, #14]
		avg_x += rawx;
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001038:	4413      	add	r3, r2
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 800103c:	89fb      	ldrh	r3, [r7, #14]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	4413      	add	r3, r2
 8001042:	61fb      	str	r3, [r7, #28]
        samples--;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3b01      	subs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
		counted_samples++;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <TP_Read_Coordinates+0xb6>
 8001056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105a:	483d      	ldr	r0, [pc, #244]	; (8001150 <TP_Read_Coordinates+0x1a0>)
 800105c:	f004 fc5e 	bl	800591c <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0d0      	beq.n	8001008 <TP_Read_Coordinates+0x58>
    };

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106c:	4836      	ldr	r0, [pc, #216]	; (8001148 <TP_Read_Coordinates+0x198>)
 800106e:	f004 fc6d 	bl	800594c <HAL_GPIO_WritePin>


		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001078:	d154      	bne.n	8001124 <TP_Read_Coordinates+0x174>
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	4834      	ldr	r0, [pc, #208]	; (8001150 <TP_Read_Coordinates+0x1a0>)
 8001080:	f004 fc4c 	bl	800591c <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d14c      	bne.n	8001124 <TP_Read_Coordinates+0x174>
		{

		calculating_x /= counted_samples;
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fbb2 f3f3 	udiv	r3, r2, r3
 800109c:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	81fb      	strh	r3, [r7, #14]
		rawy = calculating_y;
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	81bb      	strh	r3, [r7, #12]

		rawx *= -1;
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	425b      	negs	r3, r3
 80010aa:	81fb      	strh	r3, [r7, #14]
		rawy *= -1;
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	425b      	negs	r3, r3
 80010b0:	81bb      	strh	r3, [r7, #12]

		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
        Coordinates[1] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 80010b2:	89fa      	ldrh	r2, [r7, #14]
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <TP_Read_Coordinates+0x1a4>)
 80010b6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	0852      	lsrs	r2, r2, #1
 80010be:	4413      	add	r3, r2
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa2b 	bl	8000524 <__aeabi_i2d>
 80010ce:	a31c      	add	r3, pc, #112	; (adr r3, 8001140 <TP_Read_Coordinates+0x190>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fa90 	bl	80005f8 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1c9c      	adds	r4, r3, #2
 80010e4:	f7ff fd60 	bl	8000ba8 <__aeabi_d2uiz>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	8023      	strh	r3, [r4, #0]
		Coordinates[0] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 80010ee:	89bb      	ldrh	r3, [r7, #12]
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <TP_Read_Coordinates+0x1a8>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	09db      	lsrs	r3, r3, #7
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	3b0f      	subs	r3, #15
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa11 	bl	8000524 <__aeabi_i2d>
 8001102:	a30f      	add	r3, pc, #60	; (adr r3, 8001140 <TP_Read_Coordinates+0x190>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fa76 	bl	80005f8 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fd48 	bl	8000ba8 <__aeabi_d2uiz>
 8001118:	4603      	mov	r3, r0
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 8001120:	2301      	movs	r3, #1
 8001122:	e007      	b.n	8001134 <TP_Read_Coordinates+0x184>
		}
		else
		{
			Coordinates[0] = 0;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3302      	adds	r3, #2
 800112e:	2200      	movs	r2, #0
 8001130:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8001132:	2300      	movs	r3, #0
		}
}
 8001134:	4618      	mov	r0, r3
 8001136:	372c      	adds	r7, #44	; 0x2c
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	f3af 8000 	nop.w
 8001140:	28f5c28f 	.word	0x28f5c28f
 8001144:	3ff28f5c 	.word	0x3ff28f5c
 8001148:	40020400 	.word	0x40020400
 800114c:	40021000 	.word	0x40021000
 8001150:	40020800 	.word	0x40020800
 8001154:	e01e01e1 	.word	0xe01e01e1
 8001158:	a0a0a0a1 	.word	0xa0a0a0a1

0800115c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <TP_Touchpad_Pressed+0x20>)
 8001166:	f004 fbd9 	bl	800591c <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <TP_Touchpad_Pressed+0x18>
	{
		return TOUCHPAD_PRESSED;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <TP_Touchpad_Pressed+0x1a>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001174:	2300      	movs	r3, #0
	}
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020800 	.word	0x40020800

08001180 <TFT9341_FontsIni>:

static void TFT9341_WriteData(uint8_t* buff, size_t buff_size);

// ---------------------------------------------------------------------------------
void TFT9341_FontsIni(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  Font8.Height = 8;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <TFT9341_FontsIni+0x60>)
 8001186:	2208      	movs	r2, #8
 8001188:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <TFT9341_FontsIni+0x60>)
 800118c:	2205      	movs	r2, #5
 800118e:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <TFT9341_FontsIni+0x64>)
 8001192:	220c      	movs	r2, #12
 8001194:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <TFT9341_FontsIni+0x64>)
 8001198:	2207      	movs	r2, #7
 800119a:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <TFT9341_FontsIni+0x68>)
 800119e:	2210      	movs	r2, #16
 80011a0:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <TFT9341_FontsIni+0x68>)
 80011a4:	220b      	movs	r2, #11
 80011a6:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <TFT9341_FontsIni+0x6c>)
 80011aa:	2214      	movs	r2, #20
 80011ac:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <TFT9341_FontsIni+0x6c>)
 80011b0:	220e      	movs	r2, #14
 80011b2:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <TFT9341_FontsIni+0x70>)
 80011b6:	2218      	movs	r2, #24
 80011b8:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <TFT9341_FontsIni+0x70>)
 80011bc:	2211      	movs	r2, #17
 80011be:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT9341_BLACK;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT9341_GREEN;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011c8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011cc:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <TFT9341_FontsIni+0x74>)
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <TFT9341_FontsIni+0x68>)
 80011d2:	605a      	str	r2, [r3, #4]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000020 	.word	0x20000020
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000010 	.word	0x20000010
 80011f0:	20000018 	.word	0x20000018
 80011f4:	20007634 	.word	0x20007634

080011f8 <TFT9341_SendData>:
// ---------------------------------------------------------------------------------
void TFT9341_SendData(uint8_t dt)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	DC_DATA();
 8001202:	2201      	movs	r2, #1
 8001204:	2140      	movs	r1, #64	; 0x40
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <TFT9341_SendData+0x2c>)
 8001208:	f004 fba0 	bl	800594c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi2, &dt, 1, 5000);
 800120c:	1df9      	adds	r1, r7, #7
 800120e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001212:	2201      	movs	r2, #1
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <TFT9341_SendData+0x30>)
 8001216:	f007 fbe2 	bl	80089de <HAL_SPI_Transmit>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	200076e4 	.word	0x200076e4

0800122c <TFT9341_SendCommand>:
// ---------------------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <TFT9341_SendCommand+0x2c>)
 800123c:	f004 fb86 	bl	800594c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi2, &cmd, 1, 5000);
 8001240:	1df9      	adds	r1, r7, #7
 8001242:	f241 3388 	movw	r3, #5000	; 0x1388
 8001246:	2201      	movs	r2, #1
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <TFT9341_SendCommand+0x30>)
 800124a:	f007 fbc8 	bl	80089de <HAL_SPI_Transmit>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	200076e4 	.word	0x200076e4

08001260 <TFT9341_reset>:
// ---------------------------------------------------------------------------------
void TFT9341_reset(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8001264:	2200      	movs	r2, #0
 8001266:	2120      	movs	r1, #32
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <TFT9341_reset+0x24>)
 800126a:	f004 fb6f 	bl	800594c <HAL_GPIO_WritePin>
	osDelay(5);
 800126e:	2005      	movs	r0, #5
 8001270:	f00b ff62 	bl	800d138 <osDelay>
	RESET_IDLE();
 8001274:	2201      	movs	r2, #1
 8001276:	2120      	movs	r1, #32
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TFT9341_reset+0x24>)
 800127a:	f004 fb67 	bl	800594c <HAL_GPIO_WritePin>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <TFT9341_ini>:
// ---------------------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	4613      	mov	r3, r2
 8001296:	80bb      	strh	r3, [r7, #4]
  uint8_t data[15];
  CS_ACTIVE();
 8001298:	2200      	movs	r2, #0
 800129a:	2110      	movs	r1, #16
 800129c:	48a3      	ldr	r0, [pc, #652]	; (800152c <TFT9341_ini+0x2a4>)
 800129e:	f004 fb55 	bl	800594c <HAL_GPIO_WritePin>
  TFT9341_reset();
 80012a2:	f7ff ffdd 	bl	8001260 <TFT9341_reset>

  //Software Reset
  TFT9341_SendCommand(0x01);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff ffc0 	bl	800122c <TFT9341_SendCommand>
  osDelay(1000);
 80012ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b0:	f00b ff42 	bl	800d138 <osDelay>

  //Power Control A
    data[0] = 0x39;
 80012b4:	2339      	movs	r3, #57	; 0x39
 80012b6:	723b      	strb	r3, [r7, #8]
    data[1] = 0x2C;
 80012b8:	232c      	movs	r3, #44	; 0x2c
 80012ba:	727b      	strb	r3, [r7, #9]
    data[2] = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x34;
 80012c0:	2334      	movs	r3, #52	; 0x34
 80012c2:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x02;
 80012c4:	2302      	movs	r3, #2
 80012c6:	733b      	strb	r3, [r7, #12]
    TFT9341_SendCommand(0xCB);
 80012c8:	20cb      	movs	r0, #203	; 0xcb
 80012ca:	f7ff ffaf 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 5);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2105      	movs	r1, #5
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f92f 	bl	8001538 <TFT9341_WriteData>
    //Power Control B
    data[0] = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	723b      	strb	r3, [r7, #8]
    data[1] = 0xC1;
 80012de:	23c1      	movs	r3, #193	; 0xc1
 80012e0:	727b      	strb	r3, [r7, #9]
    data[2] = 0x30;
 80012e2:	2330      	movs	r3, #48	; 0x30
 80012e4:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xCF);
 80012e6:	20cf      	movs	r0, #207	; 0xcf
 80012e8:	f7ff ffa0 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2103      	movs	r1, #3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f920 	bl	8001538 <TFT9341_WriteData>
    //Driver timing control A
    data[0] = 0x85;
 80012f8:	2385      	movs	r3, #133	; 0x85
 80012fa:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	727b      	strb	r3, [r7, #9]
    data[2] = 0x78;
 8001300:	2378      	movs	r3, #120	; 0x78
 8001302:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xE8);
 8001304:	20e8      	movs	r0, #232	; 0xe8
 8001306:	f7ff ff91 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	2103      	movs	r1, #3
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f911 	bl	8001538 <TFT9341_WriteData>
    //Driver timing control B
    data[0] = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 800131a:	2300      	movs	r3, #0
 800131c:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xEA);
 800131e:	20ea      	movs	r0, #234	; 0xea
 8001320:	f7ff ff84 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f904 	bl	8001538 <TFT9341_WriteData>
    //Power on Sequence control
    data[0] = 0x64;
 8001330:	2364      	movs	r3, #100	; 0x64
 8001332:	723b      	strb	r3, [r7, #8]
    data[1] = 0x03;
 8001334:	2303      	movs	r3, #3
 8001336:	727b      	strb	r3, [r7, #9]
    data[2] = 0x12;
 8001338:	2312      	movs	r3, #18
 800133a:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x81;
 800133c:	2381      	movs	r3, #129	; 0x81
 800133e:	72fb      	strb	r3, [r7, #11]
    TFT9341_SendCommand(0xED);
 8001340:	20ed      	movs	r0, #237	; 0xed
 8001342:	f7ff ff73 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 4);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2104      	movs	r1, #4
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f8f3 	bl	8001538 <TFT9341_WriteData>
    //Pump ratio control
    data[0] = 0x20;
 8001352:	2320      	movs	r3, #32
 8001354:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF7);
 8001356:	20f7      	movs	r0, #247	; 0xf7
 8001358:	f7ff ff68 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f8e8 	bl	8001538 <TFT9341_WriteData>
    //Power Control,VRH[5:0]
    data[0] = 0x10;
 8001368:	2310      	movs	r3, #16
 800136a:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC0);
 800136c:	20c0      	movs	r0, #192	; 0xc0
 800136e:	f7ff ff5d 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f8dd 	bl	8001538 <TFT9341_WriteData>
    //Power Control,SAP[2:0];BT[3:0]
    data[0] = 0x10;
 800137e:	2310      	movs	r3, #16
 8001380:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC1);
 8001382:	20c1      	movs	r0, #193	; 0xc1
 8001384:	f7ff ff52 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	2101      	movs	r1, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f8d2 	bl	8001538 <TFT9341_WriteData>
    //VCOM Control 1
    data[0] = 0x3E;
 8001394:	233e      	movs	r3, #62	; 0x3e
 8001396:	723b      	strb	r3, [r7, #8]
    data[1] = 0x28;
 8001398:	2328      	movs	r3, #40	; 0x28
 800139a:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xC5);
 800139c:	20c5      	movs	r0, #197	; 0xc5
 800139e:	f7ff ff45 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2102      	movs	r1, #2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f8c5 	bl	8001538 <TFT9341_WriteData>
    //VCOM Control 2
    data[0] = 0x86;
 80013ae:	2386      	movs	r3, #134	; 0x86
 80013b0:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC7);
 80013b2:	20c7      	movs	r0, #199	; 0xc7
 80013b4:	f7ff ff3a 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f8ba 	bl	8001538 <TFT9341_WriteData>
    //Memory Acsess Control
    data[0] = 0x48;
 80013c4:	2348      	movs	r3, #72	; 0x48
 80013c6:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x36);
 80013c8:	2036      	movs	r0, #54	; 0x36
 80013ca:	f7ff ff2f 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f8af 	bl	8001538 <TFT9341_WriteData>
    //Pixel Format Set
    data[0] = 0x55;//16bit
 80013da:	2355      	movs	r3, #85	; 0x55
 80013dc:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x3A);
 80013de:	203a      	movs	r0, #58	; 0x3a
 80013e0:	f7ff ff24 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2101      	movs	r1, #1
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f8a4 	bl	8001538 <TFT9341_WriteData>
    //Frame Rratio Control, Standard RGB Color
    data[0] = 0x00;
 80013f0:	2300      	movs	r3, #0
 80013f2:	723b      	strb	r3, [r7, #8]
    data[1] = 0x18;
 80013f4:	2318      	movs	r3, #24
 80013f6:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xB1);
 80013f8:	20b1      	movs	r0, #177	; 0xb1
 80013fa:	f7ff ff17 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	2102      	movs	r1, #2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f897 	bl	8001538 <TFT9341_WriteData>
    //Display Function Control
    data[0] = 0x08;
 800140a:	2308      	movs	r3, #8
 800140c:	723b      	strb	r3, [r7, #8]
    data[1] = 0x82;
 800140e:	2382      	movs	r3, #130	; 0x82
 8001410:	727b      	strb	r3, [r7, #9]
    data[2] = 0x27;//320 строк
 8001412:	2327      	movs	r3, #39	; 0x27
 8001414:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xB6);
 8001416:	20b6      	movs	r0, #182	; 0xb6
 8001418:	f7ff ff08 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	2103      	movs	r1, #3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f888 	bl	8001538 <TFT9341_WriteData>
    //Enable 3G (пока не знаю что это за режим)
    data[0] = 0x00;//не включаем
 8001428:	2300      	movs	r3, #0
 800142a:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF2);
 800142c:	20f2      	movs	r0, #242	; 0xf2
 800142e:	f7ff fefd 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2101      	movs	r1, #1
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f87d 	bl	8001538 <TFT9341_WriteData>
    //Gamma set
    data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 800143e:	2301      	movs	r3, #1
 8001440:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x26);
 8001442:	2026      	movs	r0, #38	; 0x26
 8001444:	f7ff fef2 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f872 	bl	8001538 <TFT9341_WriteData>
    //Positive Gamma  Correction
    data[0] = 0x0F;
 8001454:	230f      	movs	r3, #15
 8001456:	723b      	strb	r3, [r7, #8]
    data[1] = 0x31;
 8001458:	2331      	movs	r3, #49	; 0x31
 800145a:	727b      	strb	r3, [r7, #9]
    data[2] = 0x2B;
 800145c:	232b      	movs	r3, #43	; 0x2b
 800145e:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x0C;
 8001460:	230c      	movs	r3, #12
 8001462:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x0E;
 8001464:	230e      	movs	r3, #14
 8001466:	733b      	strb	r3, [r7, #12]
    data[5] = 0x08;
 8001468:	2308      	movs	r3, #8
 800146a:	737b      	strb	r3, [r7, #13]
    data[6] = 0x4E;
 800146c:	234e      	movs	r3, #78	; 0x4e
 800146e:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xF1;
 8001470:	23f1      	movs	r3, #241	; 0xf1
 8001472:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x37;
 8001474:	2337      	movs	r3, #55	; 0x37
 8001476:	743b      	strb	r3, [r7, #16]
    data[9] = 0x07;
 8001478:	2307      	movs	r3, #7
 800147a:	747b      	strb	r3, [r7, #17]
    data[10] = 0x10;
 800147c:	2310      	movs	r3, #16
 800147e:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x03;
 8001480:	2303      	movs	r3, #3
 8001482:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x0E;
 8001484:	230e      	movs	r3, #14
 8001486:	753b      	strb	r3, [r7, #20]
    data[13] = 0x09;
 8001488:	2309      	movs	r3, #9
 800148a:	757b      	strb	r3, [r7, #21]
    data[14] = 0x00;
 800148c:	2300      	movs	r3, #0
 800148e:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE0);
 8001490:	20e0      	movs	r0, #224	; 0xe0
 8001492:	f7ff fecb 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	210f      	movs	r1, #15
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f84b 	bl	8001538 <TFT9341_WriteData>
    //Negative Gamma  Correction
    data[0] = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	723b      	strb	r3, [r7, #8]
    data[1] = 0x0E;
 80014a6:	230e      	movs	r3, #14
 80014a8:	727b      	strb	r3, [r7, #9]
    data[2] = 0x14;
 80014aa:	2314      	movs	r3, #20
 80014ac:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x03;
 80014ae:	2303      	movs	r3, #3
 80014b0:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x11;
 80014b2:	2311      	movs	r3, #17
 80014b4:	733b      	strb	r3, [r7, #12]
    data[5] = 0x07;
 80014b6:	2307      	movs	r3, #7
 80014b8:	737b      	strb	r3, [r7, #13]
    data[6] = 0x31;
 80014ba:	2331      	movs	r3, #49	; 0x31
 80014bc:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xC1;
 80014be:	23c1      	movs	r3, #193	; 0xc1
 80014c0:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x48;
 80014c2:	2348      	movs	r3, #72	; 0x48
 80014c4:	743b      	strb	r3, [r7, #16]
    data[9] = 0x08;
 80014c6:	2308      	movs	r3, #8
 80014c8:	747b      	strb	r3, [r7, #17]
    data[10] = 0x0F;
 80014ca:	230f      	movs	r3, #15
 80014cc:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x0C;
 80014ce:	230c      	movs	r3, #12
 80014d0:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x31;
 80014d2:	2331      	movs	r3, #49	; 0x31
 80014d4:	753b      	strb	r3, [r7, #20]
    data[13] = 0x36;
 80014d6:	2336      	movs	r3, #54	; 0x36
 80014d8:	757b      	strb	r3, [r7, #21]
    data[14] = 0x0F;
 80014da:	230f      	movs	r3, #15
 80014dc:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE1);
 80014de:	20e1      	movs	r0, #225	; 0xe1
 80014e0:	f7ff fea4 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	210f      	movs	r1, #15
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f824 	bl	8001538 <TFT9341_WriteData>
    TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 80014f0:	2011      	movs	r0, #17
 80014f2:	f7ff fe9b 	bl	800122c <TFT9341_SendCommand>

    osDelay(120);
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f00b fe1e 	bl	800d138 <osDelay>

    //Display ON
    data[0] = TFT9341_ROTATION;
 80014fc:	2348      	movs	r3, #72	; 0x48
 80014fe:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x29);
 8001500:	2029      	movs	r0, #41	; 0x29
 8001502:	f7ff fe93 	bl	800122c <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f000 f813 	bl	8001538 <TFT9341_WriteData>

    TFT9341_WIDTH = w_size;
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <TFT9341_ini+0x2a8>)
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	8013      	strh	r3, [r2, #0]
    TFT9341_HEIGHT = h_size;
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <TFT9341_ini+0x2ac>)
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	8013      	strh	r3, [r2, #0]

    TFT9341_FontsIni();
 800151e:	f7ff fe2f 	bl	8001180 <TFT9341_FontsIni>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	20007632 	.word	0x20007632
 8001534:	20007630 	.word	0x20007630

08001538 <TFT9341_WriteData>:
// ---------------------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8001542:	2201      	movs	r2, #1
 8001544:	2140      	movs	r1, #64	; 0x40
 8001546:	4811      	ldr	r0, [pc, #68]	; (800158c <TFT9341_WriteData+0x54>)
 8001548:	f004 fa00 	bl	800594c <HAL_GPIO_WritePin>
	while(buff_size > 0)
 800154c:	e015      	b.n	800157a <TFT9341_WriteData+0x42>
	{
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001554:	bf28      	it	cs
 8001556:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800155a:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 800155c:	89fa      	ldrh	r2, [r7, #14]
 800155e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <TFT9341_WriteData+0x58>)
 8001566:	f007 fa3a 	bl	80089de <HAL_SPI_Transmit>
		buff += chunk_size;
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	603b      	str	r3, [r7, #0]
	while(buff_size > 0)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e6      	bne.n	800154e <TFT9341_WriteData+0x16>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	200076e4 	.word	0x200076e4

08001594 <TFT9341_SetAddrWindow>:
// ---------------------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	80fb      	strh	r3, [r7, #6]
 80015a6:	4603      	mov	r3, r0
 80015a8:	80bb      	strh	r3, [r7, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	807b      	strh	r3, [r7, #2]
 80015ae:	4613      	mov	r3, r2
 80015b0:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 80015b2:	202a      	movs	r0, #42	; 0x2a
 80015b4:	f7ff fe3a 	bl	800122c <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	733b      	strb	r3, [r7, #12]
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	737b      	strb	r3, [r7, #13]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	73bb      	strb	r3, [r7, #14]
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2104      	movs	r1, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ffaa 	bl	8001538 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 80015e4:	202b      	movs	r0, #43	; 0x2b
 80015e6:	f7ff fe21 	bl	800122c <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80015ea:	88bb      	ldrh	r3, [r7, #4]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	723b      	strb	r3, [r7, #8]
 80015f4:	88bb      	ldrh	r3, [r7, #4]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	727b      	strb	r3, [r7, #9]
 80015fa:	883b      	ldrh	r3, [r7, #0]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	b29b      	uxth	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	72bb      	strb	r3, [r7, #10]
 8001604:	883b      	ldrh	r3, [r7, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2104      	movs	r1, #4
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff91 	bl	8001538 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 8001616:	202c      	movs	r0, #44	; 0x2c
 8001618:	f7ff fe08 	bl	800122c <TFT9341_SendCommand>
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}

08001624 <TFT9341_FillScreen>:
//      HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
//  }
}
// ---------------------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
	// With DMA
	uint32_t i, n;
	  TFT9341_SetAddrWindow(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1);
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <TFT9341_FillScreen+0x90>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	3b01      	subs	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <TFT9341_FillScreen+0x94>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	3b01      	subs	r3, #1
 800163c:	b29b      	uxth	r3, r3
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff ffa7 	bl	8001594 <TFT9341_SetAddrWindow>
	  for(i=0;i<3200;i++)
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e011      	b.n	8001670 <TFT9341_FillScreen+0x4c>
	  {
	    frm_buf[i*2] = color >> 8;
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b2d1      	uxtb	r1, r2
 8001658:	4a18      	ldr	r2, [pc, #96]	; (80016bc <TFT9341_FillScreen+0x98>)
 800165a:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	3301      	adds	r3, #1
 8001662:	88fa      	ldrh	r2, [r7, #6]
 8001664:	b2d1      	uxtb	r1, r2
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <TFT9341_FillScreen+0x98>)
 8001668:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<3200;i++)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3301      	adds	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001676:	d3e9      	bcc.n	800164c <TFT9341_FillScreen+0x28>
	  }
	  n = 6400;
 8001678:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800167c:	60bb      	str	r3, [r7, #8]
	  DC_DATA();
 800167e:	2201      	movs	r2, #1
 8001680:	2140      	movs	r1, #64	; 0x40
 8001682:	480f      	ldr	r0, [pc, #60]	; (80016c0 <TFT9341_FillScreen+0x9c>)
 8001684:	f004 f962 	bl	800594c <HAL_GPIO_WritePin>
	  dma_spi_cnt = 24;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <TFT9341_FillScreen+0xa0>)
 800168a:	2218      	movs	r2, #24
 800168c:	601a      	str	r2, [r3, #0]
	  HAL_SPI_Transmit_DMA(&hspi2, frm_buf, n);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	b29b      	uxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	4909      	ldr	r1, [pc, #36]	; (80016bc <TFT9341_FillScreen+0x98>)
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <TFT9341_FillScreen+0xa4>)
 8001698:	f007 fade 	bl	8008c58 <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 800169c:	bf00      	nop
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <TFT9341_FillScreen+0xa8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0fb      	beq.n	800169e <TFT9341_FillScreen+0x7a>
	  dma_spi_fl=0;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <TFT9341_FillScreen+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]

	///////////////////////////////////////////////////////////////////////////
	//   Without DMA
//  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20007632 	.word	0x20007632
 80016b8:	20007630 	.word	0x20007630
 80016bc:	2000039c 	.word	0x2000039c
 80016c0:	40021000 	.word	0x40021000
 80016c4:	20000028 	.word	0x20000028
 80016c8:	200076e4 	.word	0x200076e4
 80016cc:	2000279c 	.word	0x2000279c

080016d0 <TFT9341_SetTextColor>:
		TFT9341_DrawPixel(x0-y,y0-x,color);
	}
}
// ---------------------------------------------------------------------------------
void TFT9341_SetTextColor(uint16_t color)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
  lcdprop.TextColor=color;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <TFT9341_SetTextColor+0x1c>)
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	8013      	strh	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20007634 	.word	0x20007634

080016f0 <TFT9341_SetBackColor>:
// ---------------------------------------------------------------------------------
void TFT9341_SetBackColor(uint16_t color)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
  lcdprop.BackColor=color;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <TFT9341_SetBackColor+0x1c>)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	8053      	strh	r3, [r2, #2]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	20007634 	.word	0x20007634

08001710 <TFT9341_DrawChar_DMA>:
    y++;
  }
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawChar_DMA(uint16_t x, uint16_t y, uint8_t c)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b08b      	sub	sp, #44	; 0x2c
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
 800171a:	460b      	mov	r3, r1
 800171c:	80bb      	strh	r3, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	70fb      	strb	r3, [r7, #3]

	uint32_t i = 0, j = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *c_t;
	uint8_t *pchar;
	uint32_t line=0;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]


	height = lcdprop.pFont->Height;
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	88db      	ldrh	r3, [r3, #6]
 8001734:	837b      	strh	r3, [r7, #26]
	width = lcdprop.pFont->Width;
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	889b      	ldrh	r3, [r3, #4]
 800173c:	833b      	strh	r3, [r7, #24]
	offset = 8 *((width + 7)/8) - width ;
 800173e:	8b3b      	ldrh	r3, [r7, #24]
 8001740:	3307      	adds	r3, #7
 8001742:	2b00      	cmp	r3, #0
 8001744:	da00      	bge.n	8001748 <TFT9341_DrawChar_DMA+0x38>
 8001746:	3307      	adds	r3, #7
 8001748:	10db      	asrs	r3, r3, #3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	8b3b      	ldrh	r3, [r7, #24]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	75fb      	strb	r3, [r7, #23]
	c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
 8001758:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	3b20      	subs	r3, #32
 8001762:	4965      	ldr	r1, [pc, #404]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001764:	6849      	ldr	r1, [r1, #4]
 8001766:	88c9      	ldrh	r1, [r1, #6]
 8001768:	fb01 f103 	mul.w	r1, r1, r3
 800176c:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	3307      	adds	r3, #7
 8001774:	2b00      	cmp	r3, #0
 8001776:	da00      	bge.n	800177a <TFT9341_DrawChar_DMA+0x6a>
 8001778:	3307      	adds	r3, #7
 800177a:	10db      	asrs	r3, r3, #3
 800177c:	fb03 f301 	mul.w	r3, r3, r1
 8001780:	4413      	add	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

	y = y - height;											// Because BUG inside function
 8001784:	88ba      	ldrh	r2, [r7, #4]
 8001786:	8b7b      	ldrh	r3, [r7, #26]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	80bb      	strh	r3, [r7, #4]

	for(i = 0; i < height; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
 8001790:	e07c      	b.n	800188c <TFT9341_DrawChar_DMA+0x17c>
	{
		pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 8001792:	8b3b      	ldrh	r3, [r7, #24]
 8001794:	3307      	adds	r3, #7
 8001796:	2b00      	cmp	r3, #0
 8001798:	da00      	bge.n	800179c <TFT9341_DrawChar_DMA+0x8c>
 800179a:	3307      	adds	r3, #7
 800179c:	10db      	asrs	r3, r3, #3
 800179e:	461a      	mov	r2, r3
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	fb03 f302 	mul.w	r3, r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4413      	add	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
		switch(((width + 7)/8))
 80017ac:	8b3b      	ldrh	r3, [r7, #24]
 80017ae:	3307      	adds	r3, #7
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da00      	bge.n	80017b6 <TFT9341_DrawChar_DMA+0xa6>
 80017b4:	3307      	adds	r3, #7
 80017b6:	10db      	asrs	r3, r3, #3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d002      	beq.n	80017c2 <TFT9341_DrawChar_DMA+0xb2>
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d004      	beq.n	80017ca <TFT9341_DrawChar_DMA+0xba>
 80017c0:	e00c      	b.n	80017dc <TFT9341_DrawChar_DMA+0xcc>
		{
			case 1:
				line = pchar[0];
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	61fb      	str	r3, [r7, #28]
				break;
 80017c8:	e016      	b.n	80017f8 <TFT9341_DrawChar_DMA+0xe8>
			case 2:
				line = (pchar[0]<< 8) | pchar[1];
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	3201      	adds	r2, #1
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61fb      	str	r3, [r7, #28]
				break;
 80017da:	e00d      	b.n	80017f8 <TFT9341_DrawChar_DMA+0xe8>
			case 3:
			default:
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	3202      	adds	r2, #2
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61fb      	str	r3, [r7, #28]
				break;
 80017f6:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	e03c      	b.n	8001878 <TFT9341_DrawChar_DMA+0x168>
		{
			int buf_index = j + i*(width+1);
 80017fe:	8b3b      	ldrh	r3, [r7, #24]
 8001800:	3301      	adds	r3, #1
 8001802:	461a      	mov	r2, r3
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	fb03 f202 	mul.w	r2, r3, r2
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	4413      	add	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
			if(line & (1 << (width- j + offset- 1)))
 8001810:	8b3a      	ldrh	r2, [r7, #24]
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	1ad2      	subs	r2, r2, r3
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	4413      	add	r3, r2
 800181a:	3b01      	subs	r3, #1
 800181c:	2201      	movs	r2, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	461a      	mov	r2, r3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d011      	beq.n	8001850 <TFT9341_DrawChar_DMA+0x140>
			{
				frm_buf[buf_index*2] = lcdprop.TextColor >> 8;
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29a      	uxth	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	b2d1      	uxtb	r1, r2
 800183a:	4a30      	ldr	r2, [pc, #192]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 800183c:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.TextColor & 0xFF;
 800183e:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	3301      	adds	r3, #1
 8001848:	b2d1      	uxtb	r1, r2
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 800184c:	54d1      	strb	r1, [r2, r3]
 800184e:	e010      	b.n	8001872 <TFT9341_DrawChar_DMA+0x162>
			}
			else
			{
				frm_buf[buf_index*2] = lcdprop.BackColor >> 8;
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001852:	885b      	ldrh	r3, [r3, #2]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b29a      	uxth	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	b2d1      	uxtb	r1, r2
 800185e:	4a27      	ldr	r2, [pc, #156]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 8001860:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.BackColor & 0xFF;
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <TFT9341_DrawChar_DMA+0x1e8>)
 8001864:	885a      	ldrh	r2, [r3, #2]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	3301      	adds	r3, #1
 800186c:	b2d1      	uxtb	r1, r2
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 8001870:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < width; j++)
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	3301      	adds	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	8b3b      	ldrh	r3, [r7, #24]
 800187a:	6a3a      	ldr	r2, [r7, #32]
 800187c:	429a      	cmp	r2, r3
 800187e:	d3be      	bcc.n	80017fe <TFT9341_DrawChar_DMA+0xee>
			}
		}
		y++;
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	3301      	adds	r3, #1
 8001884:	80bb      	strh	r3, [r7, #4]
	for(i = 0; i < height; i++)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	8b7b      	ldrh	r3, [r7, #26]
 800188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001890:	429a      	cmp	r2, r3
 8001892:	f4ff af7e 	bcc.w	8001792 <TFT9341_DrawChar_DMA+0x82>
	}

	TFT9341_SetAddrWindow(x, y, x+width, y+height);
 8001896:	88fa      	ldrh	r2, [r7, #6]
 8001898:	8b3b      	ldrh	r3, [r7, #24]
 800189a:	4413      	add	r3, r2
 800189c:	b29c      	uxth	r4, r3
 800189e:	88ba      	ldrh	r2, [r7, #4]
 80018a0:	8b7b      	ldrh	r3, [r7, #26]
 80018a2:	4413      	add	r3, r2
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	88b9      	ldrh	r1, [r7, #4]
 80018a8:	88f8      	ldrh	r0, [r7, #6]
 80018aa:	4622      	mov	r2, r4
 80018ac:	f7ff fe72 	bl	8001594 <TFT9341_SetAddrWindow>
	DC_DATA();
 80018b0:	2201      	movs	r2, #1
 80018b2:	2140      	movs	r1, #64	; 0x40
 80018b4:	4812      	ldr	r0, [pc, #72]	; (8001900 <TFT9341_DrawChar_DMA+0x1f0>)
 80018b6:	f004 f849 	bl	800594c <HAL_GPIO_WritePin>
	dma_spi_cnt = 1;
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <TFT9341_DrawChar_DMA+0x1f4>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi2, frm_buf, (width+1)*(height+1)*2);
 80018c0:	8b3b      	ldrh	r3, [r7, #24]
 80018c2:	3301      	adds	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	8b7b      	ldrh	r3, [r7, #26]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	fb12 f303 	smulbb	r3, r2, r3
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4908      	ldr	r1, [pc, #32]	; (80018fc <TFT9341_DrawChar_DMA+0x1ec>)
 80018da:	480b      	ldr	r0, [pc, #44]	; (8001908 <TFT9341_DrawChar_DMA+0x1f8>)
 80018dc:	f007 f9bc 	bl	8008c58 <HAL_SPI_Transmit_DMA>
	while(!dma_spi_fl) {}
 80018e0:	bf00      	nop
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <TFT9341_DrawChar_DMA+0x1fc>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0fb      	beq.n	80018e2 <TFT9341_DrawChar_DMA+0x1d2>
	dma_spi_fl=0;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <TFT9341_DrawChar_DMA+0x1fc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	372c      	adds	r7, #44	; 0x2c
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	20007634 	.word	0x20007634
 80018fc:	2000039c 	.word	0x2000039c
 8001900:	40021000 	.word	0x40021000
 8001904:	20000028 	.word	0x20000028
 8001908:	200076e4 	.word	0x200076e4
 800190c:	2000279c 	.word	0x2000279c

08001910 <TFT9341_String_DMA>:
    (void)*str++;
  }
}
// ---------------------------------------------------------------------------------
void TFT9341_String_DMA(uint16_t x,uint16_t y, char *str)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	603a      	str	r2, [r7, #0]
 800191a:	80fb      	strh	r3, [r7, #6]
 800191c:	460b      	mov	r3, r1
 800191e:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8001920:	e00f      	b.n	8001942 <TFT9341_String_DMA+0x32>
  {
	TFT9341_DrawChar_DMA(x,y,str[0]);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	88b9      	ldrh	r1, [r7, #4]
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fef0 	bl	8001710 <TFT9341_DrawChar_DMA>
    x+=lcdprop.pFont->Width;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <TFT9341_String_DMA+0x44>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	889a      	ldrh	r2, [r3, #4]
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4413      	add	r3, r2
 800193a:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	603b      	str	r3, [r7, #0]
  while(*str)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1eb      	bne.n	8001922 <TFT9341_String_DMA+0x12>
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20007634 	.word	0x20007634

08001958 <TFT9341_SetRotation>:
// ---------------------------------------------------------------------------------
void TFT9341_SetRotation(uint8_t r)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  TFT9341_SendCommand(0x36);
 8001962:	2036      	movs	r0, #54	; 0x36
 8001964:	f7ff fc62 	bl	800122c <TFT9341_SendCommand>
  switch(r)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d836      	bhi.n	80019dc <TFT9341_SetRotation+0x84>
 800196e:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <TFT9341_SetRotation+0x1c>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	08001985 	.word	0x08001985
 8001978:	0800199b 	.word	0x0800199b
 800197c:	080019b1 	.word	0x080019b1
 8001980:	080019c7 	.word	0x080019c7
  {
    case 0:
      TFT9341_SendData(0x48);
 8001984:	2048      	movs	r0, #72	; 0x48
 8001986:	f7ff fc37 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 800198c:	22f0      	movs	r2, #240	; 0xf0
 800198e:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <TFT9341_SetRotation+0x90>)
 8001992:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001996:	801a      	strh	r2, [r3, #0]
      break;
 8001998:	e020      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 1:
      TFT9341_SendData(0x28);
 800199a:	2028      	movs	r0, #40	; 0x28
 800199c:	f7ff fc2c 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019a6:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019aa:	22f0      	movs	r2, #240	; 0xf0
 80019ac:	801a      	strh	r2, [r3, #0]
      break;
 80019ae:	e015      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 2:
      TFT9341_SendData(0x88);
 80019b0:	2088      	movs	r0, #136	; 0x88
 80019b2:	f7ff fc21 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019b8:	22f0      	movs	r2, #240	; 0xf0
 80019ba:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019c2:	801a      	strh	r2, [r3, #0]
      break;
 80019c4:	e00a      	b.n	80019dc <TFT9341_SetRotation+0x84>
    case 3:
      TFT9341_SendData(0xE8);
 80019c6:	20e8      	movs	r0, #232	; 0xe8
 80019c8:	f7ff fc16 	bl	80011f8 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <TFT9341_SetRotation+0x8c>)
 80019ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019d2:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <TFT9341_SetRotation+0x90>)
 80019d6:	22f0      	movs	r2, #240	; 0xf0
 80019d8:	801a      	strh	r2, [r3, #0]
      break;
 80019da:	bf00      	nop
  }
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20007632 	.word	0x20007632
 80019e8:	20007630 	.word	0x20007630

080019ec <time_i2c_write_single>:



/*function to transmit one byte of data to register_address on ds3231 (device_address: 0X68)*/
void time_i2c_write_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	4603      	mov	r3, r0
 80019f4:	603a      	str	r2, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	460b      	mov	r3, r1
 80019fa:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Write(&hi2c3, DS3231_I2C_ADDRESS<<1, DS3231_REGISTER_SECONDS_DEFAULT, 1, &seco, 1, 1000);
	//HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	HAL_I2C_Mem_Write(&hi2c3, (uint16_t)device_address<<1, register_address, 1, data_byte, 1, 1000);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	b299      	uxth	r1, r3
 8001a04:	79bb      	ldrb	r3, [r7, #6]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	4803      	ldr	r0, [pc, #12]	; (8001a28 <time_i2c_write_single+0x3c>)
 8001a1a:	f004 f9f3 	bl	8005e04 <HAL_I2C_Mem_Write>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20007640 	.word	0x20007640

08001a2c <time_i2c_write_multi>:

/*function to transmit an array of data to device_address, starting from start_register_address*/
void time_i2c_write_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af04      	add	r7, sp, #16
 8001a32:	603a      	str	r2, [r7, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	71bb      	strb	r3, [r7, #6]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, device_address<<1, start_register_address, 1, data_array, data_length, 1000);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	797b      	ldrb	r3, [r7, #5]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a56:	9002      	str	r0, [sp, #8]
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <time_i2c_write_multi+0x44>)
 8001a62:	f004 f9cf 	bl	8005e04 <HAL_I2C_Mem_Write>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20007640 	.word	0x20007640

08001a74 <time_i2c_read_single>:

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	603a      	str	r2, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	460b      	mov	r3, r1
 8001a82:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c3, device_address<<1,register_address, 1, data_byte, 1, 1000);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	b299      	uxth	r1, r3
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a94:	9302      	str	r3, [sp, #8]
 8001a96:	2301      	movs	r3, #1
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <time_i2c_read_single+0x3c>)
 8001aa2:	f004 faa9 	bl	8005ff8 <HAL_I2C_Mem_Read>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20007640 	.word	0x20007640

08001ab4 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	603a      	str	r2, [r7, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	71bb      	strb	r3, [r7, #6]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	797b      	ldrb	r3, [r7, #5]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ade:	9002      	str	r0, [sp, #8]
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <time_i2c_read_multi+0x44>)
 8001aea:	f004 fa85 	bl	8005ff8 <HAL_I2C_Mem_Read>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20007640 	.word	0x20007640

08001afc <ds3231_I2C_init>:

/*function to initialize I2C peripheral in 100khz or 400khz*/
void ds3231_I2C_init()
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b0e      	cmp	r3, #14
 8001b1c:	f200 80ac 	bhi.w	8001c78 <ds3231_read+0x16c>
 8001b20:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <ds3231_read+0x1c>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b65 	.word	0x08001b65
 8001b2c:	08001b81 	.word	0x08001b81
 8001b30:	08001b9d 	.word	0x08001b9d
 8001b34:	08001bb9 	.word	0x08001bb9
 8001b38:	08001bd5 	.word	0x08001bd5
 8001b3c:	08001bf1 	.word	0x08001bf1
 8001b40:	08001c0d 	.word	0x08001c0d
 8001b44:	08001c29 	.word	0x08001c29
 8001b48:	08001c3d 	.word	0x08001c3d
 8001b4c:	08001c51 	.word	0x08001c51
 8001b50:	08001c79 	.word	0x08001c79
 8001b54:	08001c79 	.word	0x08001c79
 8001b58:	08001c79 	.word	0x08001c79
 8001b5c:	08001c79 	.word	0x08001c79
 8001b60:	08001c63 	.word	0x08001c63
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8001b64:	4a48      	ldr	r2, [pc, #288]	; (8001c88 <ds3231_read+0x17c>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	2068      	movs	r0, #104	; 0x68
 8001b6a:	f7ff ff83 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <ds3231_read+0x17c>)
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b76:	2101      	movs	r1, #1
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	f000 f9cf 	bl	8001f1c <BCD_to_HEX>
      break;
 8001b7e:	e07d      	b.n	8001c7c <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 8001b80:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <ds3231_read+0x17c>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	2068      	movs	r0, #104	; 0x68
 8001b86:	f7ff ff75 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <ds3231_read+0x17c>)
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001b92:	2101      	movs	r1, #1
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f000 f9c1 	bl	8001f1c <BCD_to_HEX>
      break;
 8001b9a:	e06f      	b.n	8001c7c <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 8001b9c:	4a3a      	ldr	r2, [pc, #232]	; (8001c88 <ds3231_read+0x17c>)
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	2068      	movs	r0, #104	; 0x68
 8001ba2:	f7ff ff67 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <ds3231_read+0x17c>)
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001bae:	2101      	movs	r1, #1
 8001bb0:	6838      	ldr	r0, [r7, #0]
 8001bb2:	f000 f9b3 	bl	8001f1c <BCD_to_HEX>
      break;
 8001bb6:	e061      	b.n	8001c7c <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 8001bb8:	4a33      	ldr	r2, [pc, #204]	; (8001c88 <ds3231_read+0x17c>)
 8001bba:	2103      	movs	r1, #3
 8001bbc:	2068      	movs	r0, #104	; 0x68
 8001bbe:	f7ff ff59 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <ds3231_read+0x17c>)
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	6838      	ldr	r0, [r7, #0]
 8001bce:	f000 f9a5 	bl	8001f1c <BCD_to_HEX>
      break;
 8001bd2:	e053      	b.n	8001c7c <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <ds3231_read+0x17c>)
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	2068      	movs	r0, #104	; 0x68
 8001bda:	f7ff ff4b 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001bde:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <ds3231_read+0x17c>)
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001be6:	2101      	movs	r1, #1
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	f000 f997 	bl	8001f1c <BCD_to_HEX>
      break;
 8001bee:	e045      	b.n	8001c7c <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 8001bf0:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <ds3231_read+0x17c>)
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	2068      	movs	r0, #104	; 0x68
 8001bf6:	f7ff ff3d 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <ds3231_read+0x17c>)
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001c02:	2101      	movs	r1, #1
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	f000 f989 	bl	8001f1c <BCD_to_HEX>
      break;
 8001c0a:	e037      	b.n	8001c7c <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 8001c0c:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <ds3231_read+0x17c>)
 8001c0e:	2106      	movs	r1, #6
 8001c10:	2068      	movs	r0, #104	; 0x68
 8001c12:	f7ff ff2f 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <ds3231_read+0x17c>)
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001c1e:	2101      	movs	r1, #1
 8001c20:	6838      	ldr	r0, [r7, #0]
 8001c22:	f000 f97b 	bl	8001f1c <BCD_to_HEX>
      break;
 8001c26:	e029      	b.n	8001c7c <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <ds3231_read+0x17c>)
 8001c2a:	210e      	movs	r1, #14
 8001c2c:	2068      	movs	r0, #104	; 0x68
 8001c2e:	f7ff ff21 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <ds3231_read+0x17c>)
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	701a      	strb	r2, [r3, #0]
      break;
 8001c3a:	e01f      	b.n	8001c7c <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8001c3c:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <ds3231_read+0x17c>)
 8001c3e:	210f      	movs	r1, #15
 8001c40:	2068      	movs	r0, #104	; 0x68
 8001c42:	f7ff ff17 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <ds3231_read+0x17c>)
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	701a      	strb	r2, [r3, #0]
      break;
 8001c4e:	e015      	b.n	8001c7c <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <ds3231_read+0x17c>)
 8001c52:	2110      	movs	r1, #16
 8001c54:	2068      	movs	r0, #104	; 0x68
 8001c56:	f7ff ff0d 	bl	8001a74 <time_i2c_read_single>
      *data_array = register_current_value;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <ds3231_read+0x17c>)
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 8001c62:	2307      	movs	r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	2100      	movs	r1, #0
 8001c68:	2068      	movs	r0, #104	; 0x68
 8001c6a:	f7ff ff23 	bl	8001ab4 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 8001c6e:	2107      	movs	r1, #7
 8001c70:	6838      	ldr	r0, [r7, #0]
 8001c72:	f000 f953 	bl	8001f1c <BCD_to_HEX>
      break;
 8001c76:	e001      	b.n	8001c7c <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e000      	b.n	8001c7e <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8001c7c:	2301      	movs	r3, #1
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000239c 	.word	0x2000239c

08001c8c <ds3231_set>:

/*function to set internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_set(uint8_t option, uint8_t *data_array)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b0e      	cmp	r3, #14
 8001c9c:	f200 80d5 	bhi.w	8001e4a <ds3231_set+0x1be>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <ds3231_set+0x1c>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001ce5 	.word	0x08001ce5
 8001cac:	08001d01 	.word	0x08001d01
 8001cb0:	08001d1d 	.word	0x08001d1d
 8001cb4:	08001d39 	.word	0x08001d39
 8001cb8:	08001d55 	.word	0x08001d55
 8001cbc:	08001d71 	.word	0x08001d71
 8001cc0:	08001d8d 	.word	0x08001d8d
 8001cc4:	08001da9 	.word	0x08001da9
 8001cc8:	08001de1 	.word	0x08001de1
 8001ccc:	08001e37 	.word	0x08001e37
 8001cd0:	08001e4b 	.word	0x08001e4b
 8001cd4:	08001e4b 	.word	0x08001e4b
 8001cd8:	08001e4b 	.word	0x08001e4b
 8001cdc:	08001e4b 	.word	0x08001e4b
 8001ce0:	08001e19 	.word	0x08001e19
  {
    case SECOND:
      time_registers_clone[0] = *data_array;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	4b5b      	ldr	r3, [pc, #364]	; (8001e58 <ds3231_set+0x1cc>)
 8001cea:	701a      	strb	r2, [r3, #0]
      HEX_to_BCD(&time_registers_clone[0], 1);
 8001cec:	2101      	movs	r1, #1
 8001cee:	485a      	ldr	r0, [pc, #360]	; (8001e58 <ds3231_set+0x1cc>)
 8001cf0:	f000 f953 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 8001cf4:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <ds3231_set+0x1cc>)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2068      	movs	r0, #104	; 0x68
 8001cfa:	f7ff fe77 	bl	80019ec <time_i2c_write_single>
      break;
 8001cfe:	e0a6      	b.n	8001e4e <ds3231_set+0x1c2>
    case MINUTE:
      time_registers_clone[1] = *data_array;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	4b54      	ldr	r3, [pc, #336]	; (8001e58 <ds3231_set+0x1cc>)
 8001d06:	705a      	strb	r2, [r3, #1]
      HEX_to_BCD(&time_registers_clone[1], 1);
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4854      	ldr	r0, [pc, #336]	; (8001e5c <ds3231_set+0x1d0>)
 8001d0c:	f000 f945 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 8001d10:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <ds3231_set+0x1d0>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	2068      	movs	r0, #104	; 0x68
 8001d16:	f7ff fe69 	bl	80019ec <time_i2c_write_single>
      break;
 8001d1a:	e098      	b.n	8001e4e <ds3231_set+0x1c2>
    case HOUR:
      time_registers_clone[2] = *data_array;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <ds3231_set+0x1cc>)
 8001d22:	709a      	strb	r2, [r3, #2]
      HEX_to_BCD(&time_registers_clone[2], 1);
 8001d24:	2101      	movs	r1, #1
 8001d26:	484e      	ldr	r0, [pc, #312]	; (8001e60 <ds3231_set+0x1d4>)
 8001d28:	f000 f937 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <ds3231_set+0x1d4>)
 8001d2e:	2102      	movs	r1, #2
 8001d30:	2068      	movs	r0, #104	; 0x68
 8001d32:	f7ff fe5b 	bl	80019ec <time_i2c_write_single>
      break;
 8001d36:	e08a      	b.n	8001e4e <ds3231_set+0x1c2>
    case DAY_OF_WEEK:
      time_registers_clone[3] = *data_array;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <ds3231_set+0x1cc>)
 8001d3e:	70da      	strb	r2, [r3, #3]
      HEX_to_BCD(&time_registers_clone[3], 1);
 8001d40:	2101      	movs	r1, #1
 8001d42:	4848      	ldr	r0, [pc, #288]	; (8001e64 <ds3231_set+0x1d8>)
 8001d44:	f000 f929 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 8001d48:	4a46      	ldr	r2, [pc, #280]	; (8001e64 <ds3231_set+0x1d8>)
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	2068      	movs	r0, #104	; 0x68
 8001d4e:	f7ff fe4d 	bl	80019ec <time_i2c_write_single>
      break;
 8001d52:	e07c      	b.n	8001e4e <ds3231_set+0x1c2>
    case DATE:
      time_registers_clone[4] = *data_array;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <ds3231_set+0x1cc>)
 8001d5a:	711a      	strb	r2, [r3, #4]
      HEX_to_BCD(&time_registers_clone[4], 1);
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	4842      	ldr	r0, [pc, #264]	; (8001e68 <ds3231_set+0x1dc>)
 8001d60:	f000 f91b 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 8001d64:	4a40      	ldr	r2, [pc, #256]	; (8001e68 <ds3231_set+0x1dc>)
 8001d66:	2104      	movs	r1, #4
 8001d68:	2068      	movs	r0, #104	; 0x68
 8001d6a:	f7ff fe3f 	bl	80019ec <time_i2c_write_single>
      break;
 8001d6e:	e06e      	b.n	8001e4e <ds3231_set+0x1c2>
    case MONTH:
      time_registers_clone[5] = *data_array;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <ds3231_set+0x1cc>)
 8001d76:	715a      	strb	r2, [r3, #5]
      HEX_to_BCD(&time_registers_clone[5], 1);
 8001d78:	2101      	movs	r1, #1
 8001d7a:	483c      	ldr	r0, [pc, #240]	; (8001e6c <ds3231_set+0x1e0>)
 8001d7c:	f000 f90d 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 8001d80:	4a3a      	ldr	r2, [pc, #232]	; (8001e6c <ds3231_set+0x1e0>)
 8001d82:	2105      	movs	r1, #5
 8001d84:	2068      	movs	r0, #104	; 0x68
 8001d86:	f7ff fe31 	bl	80019ec <time_i2c_write_single>
      break;
 8001d8a:	e060      	b.n	8001e4e <ds3231_set+0x1c2>
    case YEAR:
      time_registers_clone[6] = *data_array;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <ds3231_set+0x1cc>)
 8001d92:	719a      	strb	r2, [r3, #6]
      HEX_to_BCD(&time_registers_clone[6], 1);
 8001d94:	2101      	movs	r1, #1
 8001d96:	4836      	ldr	r0, [pc, #216]	; (8001e70 <ds3231_set+0x1e4>)
 8001d98:	f000 f8ff 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8001d9c:	4a34      	ldr	r2, [pc, #208]	; (8001e70 <ds3231_set+0x1e4>)
 8001d9e:	2106      	movs	r1, #6
 8001da0:	2068      	movs	r0, #104	; 0x68
 8001da2:	f7ff fe23 	bl	80019ec <time_i2c_write_single>
      break;
 8001da6:	e052      	b.n	8001e4e <ds3231_set+0x1c2>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8001da8:	4a32      	ldr	r2, [pc, #200]	; (8001e74 <ds3231_set+0x1e8>)
 8001daa:	210e      	movs	r1, #14
 8001dac:	2068      	movs	r0, #104	; 0x68
 8001dae:	f7ff fe61 	bl	8001a74 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (*data_array & (~(1 << DS3231_BIT_EOSC)));
 8001db2:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <ds3231_set+0x1e8>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001dbc:	b25a      	sxtb	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b25b      	sxtb	r3, r3
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <ds3231_set+0x1ec>)
 8001dd2:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8001dd4:	4a28      	ldr	r2, [pc, #160]	; (8001e78 <ds3231_set+0x1ec>)
 8001dd6:	210e      	movs	r1, #14
 8001dd8:	2068      	movs	r0, #104	; 0x68
 8001dda:	f7ff fe07 	bl	80019ec <time_i2c_write_single>
      break;
 8001dde:	e036      	b.n	8001e4e <ds3231_set+0x1c2>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <ds3231_set+0x1e8>)
 8001de2:	210f      	movs	r1, #15
 8001de4:	2068      	movs	r0, #104	; 0x68
 8001de6:	f7ff fe45 	bl	8001a74 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (*data_array & (~(1 << DS3231_BIT_OSF)));
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <ds3231_set+0x1e8>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001df4:	b25a      	sxtb	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	4313      	orrs	r3, r2
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <ds3231_set+0x1ec>)
 8001e0a:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <ds3231_set+0x1ec>)
 8001e0e:	210f      	movs	r1, #15
 8001e10:	2068      	movs	r0, #104	; 0x68
 8001e12:	f7ff fdeb 	bl	80019ec <time_i2c_write_single>
      break;
 8001e16:	e01a      	b.n	8001e4e <ds3231_set+0x1c2>
    case TIME:
      ds3231_data_clone(TIME, data_array);
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	200e      	movs	r0, #14
 8001e1c:	f000 f82e 	bl	8001e7c <ds3231_data_clone>
      HEX_to_BCD(&time_registers_clone[0], 7);
 8001e20:	2107      	movs	r1, #7
 8001e22:	480d      	ldr	r0, [pc, #52]	; (8001e58 <ds3231_set+0x1cc>)
 8001e24:	f000 f8b9 	bl	8001f9a <HEX_to_BCD>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 8001e28:	2307      	movs	r3, #7
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <ds3231_set+0x1cc>)
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2068      	movs	r0, #104	; 0x68
 8001e30:	f7ff fdfc 	bl	8001a2c <time_i2c_write_multi>
      break;
 8001e34:	e00b      	b.n	8001e4e <ds3231_set+0x1c2>
    case AGING_OFFSET:
      register_new_value = *data_array;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <ds3231_set+0x1ec>)
 8001e3c:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 8001e3e:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <ds3231_set+0x1ec>)
 8001e40:	2110      	movs	r1, #16
 8001e42:	2068      	movs	r0, #104	; 0x68
 8001e44:	f7ff fdd2 	bl	80019ec <time_i2c_write_single>
      break;
 8001e48:	e001      	b.n	8001e4e <ds3231_set+0x1c2>
    default:
      return OPERATION_FAILED;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <ds3231_set+0x1c4>
  }
  return OPERATION_DONE;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200023a0 	.word	0x200023a0
 8001e5c:	200023a1 	.word	0x200023a1
 8001e60:	200023a2 	.word	0x200023a2
 8001e64:	200023a3 	.word	0x200023a3
 8001e68:	200023a4 	.word	0x200023a4
 8001e6c:	200023a5 	.word	0x200023a5
 8001e70:	200023a6 	.word	0x200023a6
 8001e74:	2000239c 	.word	0x2000239c
 8001e78:	2000239d 	.word	0x2000239d

08001e7c <ds3231_data_clone>:

/*to clone the desired data and prevent reconversion of BCD to HEX*/
static void ds3231_data_clone(uint8_t option, uint8_t *input_array)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2b0e      	cmp	r3, #14
 8001e8c:	d006      	beq.n	8001e9c <ds3231_data_clone+0x20>
 8001e8e:	2b0e      	cmp	r3, #14
 8001e90:	dc37      	bgt.n	8001f02 <ds3231_data_clone+0x86>
 8001e92:	2b0a      	cmp	r3, #10
 8001e94:	d013      	beq.n	8001ebe <ds3231_data_clone+0x42>
 8001e96:	2b0b      	cmp	r3, #11
 8001e98:	d022      	beq.n	8001ee0 <ds3231_data_clone+0x64>
      {
        alarm2_registers_clone[counter] = input_array[counter];
      }
      break;
    default:
      break;
 8001e9a:	e032      	b.n	8001f02 <ds3231_data_clone+0x86>
      for (uint8_t counter = 0; counter < 7; counter++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e009      	b.n	8001eb6 <ds3231_data_clone+0x3a>
        time_registers_clone[counter] = input_array[counter];
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	441a      	add	r2, r3
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	7811      	ldrb	r1, [r2, #0]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <ds3231_data_clone+0x94>)
 8001eae:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 7; counter++)
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d9f2      	bls.n	8001ea2 <ds3231_data_clone+0x26>
      break;
 8001ebc:	e022      	b.n	8001f04 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 4; counter++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73bb      	strb	r3, [r7, #14]
 8001ec2:	e009      	b.n	8001ed8 <ds3231_data_clone+0x5c>
        alarm1_registers_clone[counter] = input_array[counter];
 8001ec4:	7bbb      	ldrb	r3, [r7, #14]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	441a      	add	r2, r3
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	7811      	ldrb	r1, [r2, #0]
 8001ece:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <ds3231_data_clone+0x98>)
 8001ed0:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 4; counter++)
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73bb      	strb	r3, [r7, #14]
 8001ed8:	7bbb      	ldrb	r3, [r7, #14]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d9f2      	bls.n	8001ec4 <ds3231_data_clone+0x48>
      break;
 8001ede:	e011      	b.n	8001f04 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 3; counter++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	737b      	strb	r3, [r7, #13]
 8001ee4:	e009      	b.n	8001efa <ds3231_data_clone+0x7e>
        alarm2_registers_clone[counter] = input_array[counter];
 8001ee6:	7b7b      	ldrb	r3, [r7, #13]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	441a      	add	r2, r3
 8001eec:	7b7b      	ldrb	r3, [r7, #13]
 8001eee:	7811      	ldrb	r1, [r2, #0]
 8001ef0:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <ds3231_data_clone+0x9c>)
 8001ef2:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 3; counter++)
 8001ef4:	7b7b      	ldrb	r3, [r7, #13]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	737b      	strb	r3, [r7, #13]
 8001efa:	7b7b      	ldrb	r3, [r7, #13]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d9f2      	bls.n	8001ee6 <ds3231_data_clone+0x6a>
      break;
 8001f00:	e000      	b.n	8001f04 <ds3231_data_clone+0x88>
      break;
 8001f02:	bf00      	nop
  }
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	200023a0 	.word	0x200023a0
 8001f14:	200023a8 	.word	0x200023a8
 8001f18:	200023ac 	.word	0x200023ac

08001f1c <BCD_to_HEX>:

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e028      	b.n	8001f84 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	b2d9      	uxtb	r1, r3
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	4403      	add	r3, r0
 8001f72:	440a      	add	r2, r1
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	dad2      	bge.n	8001f32 <BCD_to_HEX+0x16>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HEX_to_BCD>:

/*internal function related to this file and not accessible from outside*/
static void HEX_to_BCD(uint8_t *data_array, uint8_t array_length)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	70fb      	strb	r3, [r7, #3]
  uint8_t temporary_value;
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	73bb      	strb	r3, [r7, #14]
 8001fae:	e02d      	b.n	800200c <HEX_to_BCD+0x72>
  {
    temporary_value = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8001fb4:	e00e      	b.n	8001fd4 <HEX_to_BCD+0x3a>
    {
      temporary_value += 0X10;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	3310      	adds	r3, #16
 8001fba:	73fb      	strb	r3, [r7, #15]
      data_array[index] -= 0X0A;
 8001fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	440b      	add	r3, r1
 8001fce:	3a0a      	subs	r2, #10
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8001fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	2b09      	cmp	r3, #9
 8001fe2:	dce8      	bgt.n	8001fb6 <HEX_to_BCD+0x1c>
    }
    temporary_value += data_array[index];
 8001fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	73fb      	strb	r3, [r7, #15]
    data_array[index] = temporary_value;
 8001ff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8002000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	73bb      	strb	r3, [r7, #14]
 800200c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002010:	2b00      	cmp	r3, #0
 8002012:	dacd      	bge.n	8001fb0 <HEX_to_BCD+0x16>
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_SPI_TxCpltCallback>:


//--------------------------------------------------------------------------------
// For DMA SPI2 (LCD)
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <HAL_SPI_TxCpltCallback+0x3c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d111      	bne.n	8002058 <HAL_SPI_TxCpltCallback+0x34>
	{
	    dma_spi_cnt--;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3b01      	subs	r3, #1
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 800203c:	6013      	str	r3, [r2, #0]
	    if(dma_spi_cnt==0)
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d108      	bne.n	8002058 <HAL_SPI_TxCpltCallback+0x34>
	    {
	    	HAL_SPI_DMAStop(&hspi2);
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <HAL_SPI_TxCpltCallback+0x3c>)
 8002048:	f006 febc 	bl	8008dc4 <HAL_SPI_DMAStop>
	    	dma_spi_cnt=1;
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_SPI_TxCpltCallback+0x40>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]
	    	dma_spi_fl=1;
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_SPI_TxCpltCallback+0x44>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200076e4 	.word	0x200076e4
 8002064:	20000028 	.word	0x20000028
 8002068:	2000279c 	.word	0x2000279c

0800206c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002070:	f002 f980 	bl	8004374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002074:	f000 f89c 	bl	80021b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002078:	f000 fb1a 	bl	80026b0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800207c:	f000 fa88 	bl	8002590 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002080:	f000 f980 	bl	8002384 <MX_I2C3_Init>
  MX_TIM10_Init();
 8002084:	f000 fad2 	bl	800262c <MX_TIM10_Init>
  MX_SPI1_Init();
 8002088:	f000 f9be 	bl	8002408 <MX_SPI1_Init>
  MX_SPI2_Init();
 800208c:	f000 f9f2 	bl	8002474 <MX_SPI2_Init>
  MX_DMA_Init();
 8002090:	f000 faee 	bl	8002670 <MX_DMA_Init>
  MX_RNG_Init();
 8002094:	f000 f9a4 	bl	80023e0 <MX_RNG_Init>
  MX_I2C2_Init();
 8002098:	f000 f946 	bl	8002328 <MX_I2C2_Init>
  MX_ADC1_Init();
 800209c:	f000 f8f2 	bl	8002284 <MX_ADC1_Init>
  MX_TIM1_Init();
 80020a0:	f000 fa1e 	bl	80024e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 80020a4:	4829      	ldr	r0, [pc, #164]	; (800214c <main+0xe0>)
 80020a6:	f007 f991 	bl	80093cc <HAL_TIM_Base_Start_IT>
  /* IF LCD DOESN'T WORK !
  RIGHT IN RIGHT ORDER SPI2 AND DMA !!!!
  MX_DMA_Init();
  MX_SPI2_Init();
  */
  HAL_DMA_DeInit(&hdma_spi2_tx);
 80020aa:	4829      	ldr	r0, [pc, #164]	; (8002150 <main+0xe4>)
 80020ac:	f002 fdec 	bl	8004c88 <HAL_DMA_DeInit>
  HAL_SPI_DeInit(&hspi2);
 80020b0:	4828      	ldr	r0, [pc, #160]	; (8002154 <main+0xe8>)
 80020b2:	f006 fc6c 	bl	800898e <HAL_SPI_DeInit>
  MX_DMA_Init();
 80020b6:	f000 fadb 	bl	8002670 <MX_DMA_Init>
  MX_SPI2_Init();
 80020ba:	f000 f9db 	bl	8002474 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020be:	f00a ff5f 	bl	800cf80 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 80020c2:	4a25      	ldr	r2, [pc, #148]	; (8002158 <main+0xec>)
 80020c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020c8:	200a      	movs	r0, #10
 80020ca:	f00b f850 	bl	800d16e <osMessageQueueNew>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <main+0xf0>)
 80020d2:	6013      	str	r3, [r2, #0]

  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (1, sizeof(LCDQUEUE), &LCDQueue_attributes);
 80020d4:	4a22      	ldr	r2, [pc, #136]	; (8002160 <main+0xf4>)
 80020d6:	2164      	movs	r1, #100	; 0x64
 80020d8:	2001      	movs	r0, #1
 80020da:	f00b f848 	bl	800d16e <osMessageQueueNew>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <main+0xf8>)
 80020e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <main+0xfc>)
 80020e6:	2100      	movs	r1, #0
 80020e8:	4820      	ldr	r0, [pc, #128]	; (800216c <main+0x100>)
 80020ea:	f00a ff93 	bl	800d014 <osThreadNew>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <main+0x104>)
 80020f2:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 80020f4:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <main+0x108>)
 80020f6:	2100      	movs	r1, #0
 80020f8:	481f      	ldr	r0, [pc, #124]	; (8002178 <main+0x10c>)
 80020fa:	f00a ff8b 	bl	800d014 <osThreadNew>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a1e      	ldr	r2, [pc, #120]	; (800217c <main+0x110>)
 8002102:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <main+0x114>)
 8002106:	2100      	movs	r1, #0
 8002108:	481e      	ldr	r0, [pc, #120]	; (8002184 <main+0x118>)
 800210a:	f00a ff83 	bl	800d014 <osThreadNew>
 800210e:	4603      	mov	r3, r0
 8002110:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <main+0x11c>)
 8002112:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Start_LCD, NULL, &LCD_attributes);
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <main+0x120>)
 8002116:	2100      	movs	r1, #0
 8002118:	481d      	ldr	r0, [pc, #116]	; (8002190 <main+0x124>)
 800211a:	f00a ff7b 	bl	800d014 <osThreadNew>
 800211e:	4603      	mov	r3, r0
 8002120:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <main+0x128>)
 8002122:	6013      	str	r3, [r2, #0]

  /* creation of LCD_touchscreen */
  LCD_touchscreenHandle = osThreadNew(Start_LCD_touchscreen, NULL, &LCD_touchscreen_attributes);
 8002124:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <main+0x12c>)
 8002126:	2100      	movs	r1, #0
 8002128:	481c      	ldr	r0, [pc, #112]	; (800219c <main+0x130>)
 800212a:	f00a ff73 	bl	800d014 <osThreadNew>
 800212e:	4603      	mov	r3, r0
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <main+0x134>)
 8002132:	6013      	str	r3, [r2, #0]

  /* creation of RTC */
  RTCHandle = osThreadNew(Start_RTC, NULL, &RTC_attributes);
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <main+0x138>)
 8002136:	2100      	movs	r1, #0
 8002138:	481b      	ldr	r0, [pc, #108]	; (80021a8 <main+0x13c>)
 800213a:	f00a ff6b 	bl	800d014 <osThreadNew>
 800213e:	4603      	mov	r3, r0
 8002140:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <main+0x140>)
 8002142:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002144:	f00a ff40 	bl	800cfc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002148:	e7fe      	b.n	8002148 <main+0xdc>
 800214a:	bf00      	nop
 800214c:	2000aaa0 	.word	0x2000aaa0
 8002150:	2000d0b8 	.word	0x2000d0b8
 8002154:	200076e4 	.word	0x200076e4
 8002158:	08017e64 	.word	0x08017e64
 800215c:	200081dc 	.word	0x200081dc
 8002160:	08017e7c 	.word	0x08017e7c
 8002164:	2000c364 	.word	0x2000c364
 8002168:	08017d8c 	.word	0x08017d8c
 800216c:	080029a5 	.word	0x080029a5
 8002170:	2000763c 	.word	0x2000763c
 8002174:	08017db0 	.word	0x08017db0
 8002178:	080029b9 	.word	0x080029b9
 800217c:	2000cd9c 	.word	0x2000cd9c
 8002180:	08017dd4 	.word	0x08017dd4
 8002184:	08002c35 	.word	0x08002c35
 8002188:	2000ab30 	.word	0x2000ab30
 800218c:	08017df8 	.word	0x08017df8
 8002190:	08002c91 	.word	0x08002c91
 8002194:	2000c36c 	.word	0x2000c36c
 8002198:	08017e1c 	.word	0x08017e1c
 800219c:	08002cd5 	.word	0x08002cd5
 80021a0:	2000c368 	.word	0x2000c368
 80021a4:	08017e40 	.word	0x08017e40
 80021a8:	08002ebd 	.word	0x08002ebd
 80021ac:	2000d1d8 	.word	0x2000d1d8

080021b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b094      	sub	sp, #80	; 0x50
 80021b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021b6:	f107 0320 	add.w	r3, r7, #32
 80021ba:	2230      	movs	r2, #48	; 0x30
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f00e fff3 	bl	80111aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <SystemClock_Config+0xcc>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <SystemClock_Config+0xcc>)
 80021de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6413      	str	r3, [r2, #64]	; 0x40
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <SystemClock_Config+0xcc>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <SystemClock_Config+0xd0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <SystemClock_Config+0xd0>)
 80021fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <SystemClock_Config+0xd0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800220c:	2301      	movs	r3, #1
 800220e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002216:	2302      	movs	r3, #2
 8002218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002220:	2308      	movs	r3, #8
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002224:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002228:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800222a:	2302      	movs	r3, #2
 800222c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800222e:	2307      	movs	r3, #7
 8002230:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002232:	f107 0320 	add.w	r3, r7, #32
 8002236:	4618      	mov	r0, r3
 8002238:	f005 fe64 	bl	8007f04 <HAL_RCC_OscConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002242:	f001 f99d 	bl	8003580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002246:	230f      	movs	r3, #15
 8002248:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224a:	2302      	movs	r3, #2
 800224c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002252:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002256:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	2105      	movs	r1, #5
 8002264:	4618      	mov	r0, r3
 8002266:	f006 f8c5 	bl	80083f4 <HAL_RCC_ClockConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002270:	f001 f986 	bl	8003580 <Error_Handler>
  }
}
 8002274:	bf00      	nop
 8002276:	3750      	adds	r7, #80	; 0x50
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000

08002284 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800228a:	463b      	mov	r3, r7
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <MX_ADC1_Init+0x98>)
 8002298:	4a21      	ldr	r2, [pc, #132]	; (8002320 <MX_ADC1_Init+0x9c>)
 800229a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <MX_ADC1_Init+0x98>)
 800229e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <MX_ADC1_Init+0x98>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <MX_ADC1_Init+0x98>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_ADC1_Init+0x98>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <MX_ADC1_Init+0x98>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_ADC1_Init+0x98>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_ADC1_Init+0x98>)
 80022c6:	4a17      	ldr	r2, [pc, #92]	; (8002324 <MX_ADC1_Init+0xa0>)
 80022c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_ADC1_Init+0x98>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <MX_ADC1_Init+0x98>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_ADC1_Init+0x98>)
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_ADC1_Init+0x98>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022e4:	480d      	ldr	r0, [pc, #52]	; (800231c <MX_ADC1_Init+0x98>)
 80022e6:	f002 f8ab 	bl	8004440 <HAL_ADC_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022f0:	f001 f946 	bl	8003580 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022f4:	2309      	movs	r3, #9
 80022f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002300:	463b      	mov	r3, r7
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_ADC1_Init+0x98>)
 8002306:	f002 f8df 	bl	80044c8 <HAL_ADC_ConfigChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002310:	f001 f936 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000aae8 	.word	0x2000aae8
 8002320:	40012000 	.word	0x40012000
 8002324:	0f000001 	.word	0x0f000001

08002328 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <MX_I2C2_Init+0x50>)
 800232e:	4a13      	ldr	r2, [pc, #76]	; (800237c <MX_I2C2_Init+0x54>)
 8002330:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_I2C2_Init+0x50>)
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <MX_I2C2_Init+0x58>)
 8002336:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_I2C2_Init+0x50>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_I2C2_Init+0x50>)
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_I2C2_Init+0x50>)
 8002346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800234a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <MX_I2C2_Init+0x50>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_I2C2_Init+0x50>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <MX_I2C2_Init+0x50>)
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_I2C2_Init+0x50>)
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <MX_I2C2_Init+0x50>)
 8002366:	f003 fb0b 	bl	8005980 <HAL_I2C_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002370:	f001 f906 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200077d4 	.word	0x200077d4
 800237c:	40005800 	.word	0x40005800
 8002380:	000186a0 	.word	0x000186a0

08002384 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <MX_I2C3_Init+0x50>)
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <MX_I2C3_Init+0x54>)
 800238c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_I2C3_Init+0x50>)
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <MX_I2C3_Init+0x58>)
 8002392:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <MX_I2C3_Init+0x50>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_I2C3_Init+0x50>)
 800239c:	2200      	movs	r2, #0
 800239e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023bc:	2200      	movs	r2, #0
 80023be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023c0:	4804      	ldr	r0, [pc, #16]	; (80023d4 <MX_I2C3_Init+0x50>)
 80023c2:	f003 fadd 	bl	8005980 <HAL_I2C_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80023cc:	f001 f8d8 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20007640 	.word	0x20007640
 80023d8:	40005c00 	.word	0x40005c00
 80023dc:	000186a0 	.word	0x000186a0

080023e0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <MX_RNG_Init+0x20>)
 80023e6:	4a07      	ldr	r2, [pc, #28]	; (8002404 <MX_RNG_Init+0x24>)
 80023e8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023ea:	4805      	ldr	r0, [pc, #20]	; (8002400 <MX_RNG_Init+0x20>)
 80023ec:	f006 fa1c 	bl	8008828 <HAL_RNG_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023f6:	f001 f8c3 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	2000cd8c 	.word	0x2000cd8c
 8002404:	50060800 	.word	0x50060800

08002408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <MX_SPI1_Init+0x64>)
 800240e:	4a18      	ldr	r2, [pc, #96]	; (8002470 <MX_SPI1_Init+0x68>)
 8002410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <MX_SPI1_Init+0x64>)
 8002414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <MX_SPI1_Init+0x64>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <MX_SPI1_Init+0x64>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_SPI1_Init+0x64>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <MX_SPI1_Init+0x64>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_SPI1_Init+0x64>)
 8002434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002438:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <MX_SPI1_Init+0x64>)
 800243c:	2220      	movs	r2, #32
 800243e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <MX_SPI1_Init+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <MX_SPI1_Init+0x64>)
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <MX_SPI1_Init+0x64>)
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <MX_SPI1_Init+0x64>)
 8002454:	220a      	movs	r2, #10
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002458:	4804      	ldr	r0, [pc, #16]	; (800246c <MX_SPI1_Init+0x64>)
 800245a:	f006 fa0f 	bl	800887c <HAL_SPI_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002464:	f001 f88c 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}
 800246c:	2000cda0 	.word	0x2000cda0
 8002470:	40013000 	.word	0x40013000

08002474 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <MX_SPI2_Init+0x64>)
 800247a:	4a18      	ldr	r2, [pc, #96]	; (80024dc <MX_SPI2_Init+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <MX_SPI2_Init+0x64>)
 8002480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <MX_SPI2_Init+0x64>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <MX_SPI2_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <MX_SPI2_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <MX_SPI2_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024c0:	220a      	movs	r2, #10
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024c6:	f006 f9d9 	bl	800887c <HAL_SPI_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024d0:	f001 f856 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	200076e4 	.word	0x200076e4
 80024dc:	40003800 	.word	0x40003800

080024e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	; 0x30
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f00e fe5b 	bl	80111aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024fc:	4b22      	ldr	r3, [pc, #136]	; (8002588 <MX_TIM1_Init+0xa8>)
 80024fe:	4a23      	ldr	r2, [pc, #140]	; (800258c <MX_TIM1_Init+0xac>)
 8002500:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002502:	4b21      	ldr	r3, [pc, #132]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002504:	2200      	movs	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <MX_TIM1_Init+0xa8>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002514:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <MX_TIM1_Init+0xa8>)
 800251e:	2200      	movs	r2, #0
 8002520:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002528:	2301      	movs	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002530:	2301      	movs	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002540:	2301      	movs	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	4619      	mov	r1, r3
 8002552:	480d      	ldr	r0, [pc, #52]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002554:	f006 ffaa 	bl	80094ac <HAL_TIM_Encoder_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800255e:	f001 f80f 	bl	8003580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4806      	ldr	r0, [pc, #24]	; (8002588 <MX_TIM1_Init+0xa8>)
 8002570:	f007 fc28 	bl	8009dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800257a:	f001 f801 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	3730      	adds	r7, #48	; 0x30
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000cb40 	.word	0x2000cb40
 800258c:	40010000 	.word	0x40010000

08002590 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	463b      	mov	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <MX_TIM3_Init+0x94>)
 80025ae:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <MX_TIM3_Init+0x98>)
 80025b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 80025b2:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <MX_TIM3_Init+0x94>)
 80025b4:	f240 3247 	movw	r2, #839	; 0x347
 80025b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <MX_TIM3_Init+0x94>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80025c0:	4b18      	ldr	r3, [pc, #96]	; (8002624 <MX_TIM3_Init+0x94>)
 80025c2:	220a      	movs	r2, #10
 80025c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <MX_TIM3_Init+0x94>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <MX_TIM3_Init+0x94>)
 80025ce:	2280      	movs	r2, #128	; 0x80
 80025d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025d2:	4814      	ldr	r0, [pc, #80]	; (8002624 <MX_TIM3_Init+0x94>)
 80025d4:	f006 feaa 	bl	800932c <HAL_TIM_Base_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025de:	f000 ffcf 	bl	8003580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	4619      	mov	r1, r3
 80025ee:	480d      	ldr	r0, [pc, #52]	; (8002624 <MX_TIM3_Init+0x94>)
 80025f0:	f007 f998 	bl	8009924 <HAL_TIM_ConfigClockSource>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80025fa:	f000 ffc1 	bl	8003580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002606:	463b      	mov	r3, r7
 8002608:	4619      	mov	r1, r3
 800260a:	4806      	ldr	r0, [pc, #24]	; (8002624 <MX_TIM3_Init+0x94>)
 800260c:	f007 fbda 	bl	8009dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002616:	f000 ffb3 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000aaa0 	.word	0x2000aaa0
 8002628:	40000400 	.word	0x40000400

0800262c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <MX_TIM10_Init+0x3c>)
 8002632:	4a0e      	ldr	r2, [pc, #56]	; (800266c <MX_TIM10_Init+0x40>)
 8002634:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <MX_TIM10_Init+0x3c>)
 8002638:	22a7      	movs	r2, #167	; 0xa7
 800263a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <MX_TIM10_Init+0x3c>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <MX_TIM10_Init+0x3c>)
 8002644:	2209      	movs	r2, #9
 8002646:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <MX_TIM10_Init+0x3c>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_TIM10_Init+0x3c>)
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002654:	4804      	ldr	r0, [pc, #16]	; (8002668 <MX_TIM10_Init+0x3c>)
 8002656:	f006 fe69 	bl	800932c <HAL_TIM_Base_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002660:	f000 ff8e 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	2000778c 	.word	0x2000778c
 800266c:	40014400 	.word	0x40014400

08002670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <MX_DMA_Init+0x3c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <MX_DMA_Init+0x3c>)
 8002680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <MX_DMA_Init+0x3c>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2105      	movs	r1, #5
 8002696:	200f      	movs	r0, #15
 8002698:	f002 fa10 	bl	8004abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800269c:	200f      	movs	r0, #15
 800269e:	f002 fa29 	bl	8004af4 <HAL_NVIC_EnableIRQ>

}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800

080026b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	; 0x30
 80026b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]
 80026c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	4bb0      	ldr	r3, [pc, #704]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4aaf      	ldr	r2, [pc, #700]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026d0:	f043 0310 	orr.w	r3, r3, #16
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4bad      	ldr	r3, [pc, #692]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	4ba9      	ldr	r3, [pc, #676]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4aa8      	ldr	r2, [pc, #672]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4ba6      	ldr	r3, [pc, #664]	; (800298c <MX_GPIO_Init+0x2dc>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4ba2      	ldr	r3, [pc, #648]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4aa1      	ldr	r2, [pc, #644]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b9f      	ldr	r3, [pc, #636]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b9b      	ldr	r3, [pc, #620]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a9a      	ldr	r2, [pc, #616]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b98      	ldr	r3, [pc, #608]	; (800298c <MX_GPIO_Init+0x2dc>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	4b94      	ldr	r3, [pc, #592]	; (800298c <MX_GPIO_Init+0x2dc>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a93      	ldr	r2, [pc, #588]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b91      	ldr	r3, [pc, #580]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	4b8d      	ldr	r3, [pc, #564]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a8c      	ldr	r2, [pc, #560]	; (800298c <MX_GPIO_Init+0x2dc>)
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b8a      	ldr	r3, [pc, #552]	; (800298c <MX_GPIO_Init+0x2dc>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 800276e:	2200      	movs	r2, #0
 8002770:	217c      	movs	r1, #124	; 0x7c
 8002772:	4887      	ldr	r0, [pc, #540]	; (8002990 <MX_GPIO_Init+0x2e0>)
 8002774:	f003 f8ea 	bl	800594c <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002778:	2201      	movs	r2, #1
 800277a:	2101      	movs	r1, #1
 800277c:	4885      	ldr	r0, [pc, #532]	; (8002994 <MX_GPIO_Init+0x2e4>)
 800277e:	f003 f8e5 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 8002782:	2200      	movs	r2, #0
 8002784:	2142      	movs	r1, #66	; 0x42
 8002786:	4883      	ldr	r0, [pc, #524]	; (8002994 <MX_GPIO_Init+0x2e4>)
 8002788:	f003 f8e0 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800278c:	2200      	movs	r2, #0
 800278e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002792:	4881      	ldr	r0, [pc, #516]	; (8002998 <MX_GPIO_Init+0x2e8>)
 8002794:	f003 f8da 	bl	800594c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800279e:	487f      	ldr	r0, [pc, #508]	; (800299c <MX_GPIO_Init+0x2ec>)
 80027a0:	f003 f8d4 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 80027a4:	231c      	movs	r3, #28
 80027a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	4619      	mov	r1, r3
 80027ba:	4875      	ldr	r0, [pc, #468]	; (8002990 <MX_GPIO_Init+0x2e0>)
 80027bc:	f002 fe16 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 80027c0:	2360      	movs	r3, #96	; 0x60
 80027c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c4:	2301      	movs	r3, #1
 80027c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	4619      	mov	r1, r3
 80027d6:	486e      	ldr	r0, [pc, #440]	; (8002990 <MX_GPIO_Init+0x2e0>)
 80027d8:	f002 fe08 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80027dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	4868      	ldr	r0, [pc, #416]	; (8002994 <MX_GPIO_Init+0x2e4>)
 80027f2:	f002 fdfb 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 80027f6:	2303      	movs	r3, #3
 80027f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fa:	2301      	movs	r3, #1
 80027fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	4861      	ldr	r0, [pc, #388]	; (8002994 <MX_GPIO_Init+0x2e4>)
 800280e:	f002 fded 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002812:	2308      	movs	r3, #8
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002822:	2305      	movs	r3, #5
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	4619      	mov	r1, r3
 800282c:	4859      	ldr	r0, [pc, #356]	; (8002994 <MX_GPIO_Init+0x2e4>)
 800282e:	f002 fddd 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002832:	2301      	movs	r3, #1
 8002834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002836:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800283a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4619      	mov	r1, r3
 8002846:	4856      	ldr	r0, [pc, #344]	; (80029a0 <MX_GPIO_Init+0x2f0>)
 8002848:	f002 fdd0 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800284c:	2310      	movs	r3, #16
 800284e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800285c:	2306      	movs	r3, #6
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	4619      	mov	r1, r3
 8002866:	484e      	ldr	r0, [pc, #312]	; (80029a0 <MX_GPIO_Init+0x2f0>)
 8002868:	f002 fdc0 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800286c:	2304      	movs	r3, #4
 800286e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	4847      	ldr	r0, [pc, #284]	; (800299c <MX_GPIO_Init+0x2ec>)
 8002880:	f002 fdb4 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8002884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800288e:	2301      	movs	r3, #1
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8002892:	f107 031c 	add.w	r3, r7, #28
 8002896:	4619      	mov	r1, r3
 8002898:	483d      	ldr	r0, [pc, #244]	; (8002990 <MX_GPIO_Init+0x2e0>)
 800289a:	f002 fda7 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800289e:	f24f 0310 	movw	r3, #61456	; 0xf010
 80028a2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	4838      	ldr	r0, [pc, #224]	; (8002998 <MX_GPIO_Init+0x2e8>)
 80028b8:	f002 fd98 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 80028bc:	2340      	movs	r3, #64	; 0x40
 80028be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c0:	2301      	movs	r3, #1
 80028c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c8:	2302      	movs	r3, #2
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 80028cc:	f107 031c 	add.w	r3, r7, #28
 80028d0:	4619      	mov	r1, r3
 80028d2:	4830      	ldr	r0, [pc, #192]	; (8002994 <MX_GPIO_Init+0x2e4>)
 80028d4:	f002 fd8a 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80028d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80028dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028ea:	2306      	movs	r3, #6
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	4619      	mov	r1, r3
 80028f4:	4827      	ldr	r0, [pc, #156]	; (8002994 <MX_GPIO_Init+0x2e4>)
 80028f6:	f002 fd79 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80028fa:	2320      	movs	r3, #32
 80028fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	4619      	mov	r1, r3
 800290c:	4822      	ldr	r0, [pc, #136]	; (8002998 <MX_GPIO_Init+0x2e8>)
 800290e:	f002 fd6d 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002912:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002918:	2312      	movs	r3, #18
 800291a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800291c:	2301      	movs	r3, #1
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002924:	2304      	movs	r3, #4
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	4619      	mov	r1, r3
 800292e:	481b      	ldr	r0, [pc, #108]	; (800299c <MX_GPIO_Init+0x2ec>)
 8002930:	f002 fd5c 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8002934:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293a:	2301      	movs	r3, #1
 800293c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	f107 031c 	add.w	r3, r7, #28
 800294a:	4619      	mov	r1, r3
 800294c:	4813      	ldr	r0, [pc, #76]	; (800299c <MX_GPIO_Init+0x2ec>)
 800294e:	f002 fd4d 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8002952:	2301      	movs	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	4619      	mov	r1, r3
 8002964:	480a      	ldr	r0, [pc, #40]	; (8002990 <MX_GPIO_Init+0x2e0>)
 8002966:	f002 fd41 	bl	80053ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800296a:	2302      	movs	r3, #2
 800296c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800296e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	4619      	mov	r1, r3
 800297e:	4804      	ldr	r0, [pc, #16]	; (8002990 <MX_GPIO_Init+0x2e0>)
 8002980:	f002 fd34 	bl	80053ec <HAL_GPIO_Init>

}
 8002984:	bf00      	nop
 8002986:	3730      	adds	r7, #48	; 0x30
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	40021000 	.word	0x40021000
 8002994:	40020800 	.word	0x40020800
 8002998:	40020c00 	.word	0x40020c00
 800299c:	40020400 	.word	0x40020400
 80029a0:	40020000 	.word	0x40020000

080029a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80029ac:	f00d fd8a 	bl	80104c4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 80029b0:	200a      	movs	r0, #10
 80029b2:	f00a fbc1 	bl	800d138 <osDelay>
 80029b6:	e7fb      	b.n	80029b0 <StartDefaultTask+0xc>

080029b8 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80029be:	af00      	add	r7, sp, #0
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 80029c4:	f241 3088 	movw	r0, #5000	; 0x1388
 80029c8:	f00a fbb6 	bl	800d138 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 80029cc:	4a90      	ldr	r2, [pc, #576]	; (8002c10 <Start_Show_Resources+0x258>)
 80029ce:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	4611      	mov	r1, r2
 80029d6:	8019      	strh	r1, [r3, #0]
 80029d8:	3302      	adds	r3, #2
 80029da:	0c12      	lsrs	r2, r2, #16
 80029dc:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 80029de:	232d      	movs	r3, #45	; 0x2d
 80029e0:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  char buff[10] = {0};
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 80029ea:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 80029f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f00e fbd3 	bl	80111aa <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8002a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fbe1 	bl	80001d0 <strlen>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a16:	4413      	add	r3, r2
 8002a18:	4a7e      	ldr	r2, [pc, #504]	; (8002c14 <Start_Show_Resources+0x25c>)
 8002a1a:	461d      	mov	r5, r3
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a20:	6028      	str	r0, [r5, #0]
 8002a22:	6069      	str	r1, [r5, #4]
 8002a24:	60aa      	str	r2, [r5, #8]
 8002a26:	60eb      	str	r3, [r5, #12]
 8002a28:	cc03      	ldmia	r4!, {r0, r1}
 8002a2a:	6128      	str	r0, [r5, #16]
 8002a2c:	6169      	str	r1, [r5, #20]
 8002a2e:	7823      	ldrb	r3, [r4, #0]
 8002a30:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8002a32:	f00d fc7f 	bl	8010334 <xPortGetFreeHeapSize>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b77      	ldr	r3, [pc, #476]	; (8002c18 <Start_Show_Resources+0x260>)
 8002a3c:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8002a3e:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <Start_Show_Resources+0x260>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002a46:	220a      	movs	r2, #10
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f00e fb9b 	bl	8011184 <itoa>
	  strcat(msg.Buf, buff);
 8002a4e:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8002a52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f00f f950 	bl	8011cfe <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8002a5e:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8002a62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00f f948 	bl	8011cfe <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 8002a6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fbac 	bl	80001d0 <strlen>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a80:	4413      	add	r3, r2
 8002a82:	4a66      	ldr	r2, [pc, #408]	; (8002c1c <Start_Show_Resources+0x264>)
 8002a84:	4614      	mov	r4, r2
 8002a86:	469c      	mov	ip, r3
 8002a88:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002a8c:	4665      	mov	r5, ip
 8002a8e:	4626      	mov	r6, r4
 8002a90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a92:	6028      	str	r0, [r5, #0]
 8002a94:	6069      	str	r1, [r5, #4]
 8002a96:	60aa      	str	r2, [r5, #8]
 8002a98:	60eb      	str	r3, [r5, #12]
 8002a9a:	3410      	adds	r4, #16
 8002a9c:	f10c 0c10 	add.w	ip, ip, #16
 8002aa0:	4574      	cmp	r4, lr
 8002aa2:	d1f3      	bne.n	8002a8c <Start_Show_Resources+0xd4>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8002aa4:	485e      	ldr	r0, [pc, #376]	; (8002c20 <Start_Show_Resources+0x268>)
 8002aa6:	f00c fc0b 	bl	800f2c0 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8002ab0:	e004      	b.n	8002abc <Start_Show_Resources+0x104>
	  {
	  	buffer_size ++;
 8002ab2:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8002abc:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002ac0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f3      	bne.n	8002ab2 <Start_Show_Resources+0xfa>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002ad6:	e011      	b.n	8002afc <Start_Show_Resources+0x144>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002ad8:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002adc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002ae0:	4413      	add	r3, r2
 8002ae2:	494f      	ldr	r1, [pc, #316]	; (8002c20 <Start_Show_Resources+0x268>)
 8002ae4:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8002ae8:	440a      	add	r2, r1
 8002aea:	7811      	ldrb	r1, [r2, #0]
 8002aec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002af0:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002af2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002af6:	3301      	adds	r3, #1
 8002af8:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002afc:	4a48      	ldr	r2, [pc, #288]	; (8002c20 <Start_Show_Resources+0x268>)
 8002afe:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002b02:	4413      	add	r3, r2
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e6      	bne.n	8002ad8 <Start_Show_Resources+0x120>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8002b0a:	4b46      	ldr	r3, [pc, #280]	; (8002c24 <Start_Show_Resources+0x26c>)
 8002b0c:	f207 4434 	addw	r4, r7, #1076	; 0x434
 8002b10:	461d      	mov	r5, r3
 8002b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b1a:	c403      	stmia	r4!, {r0, r1}
 8002b1c:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	4a41      	ldr	r2, [pc, #260]	; (8002c28 <Start_Show_Resources+0x270>)
 8002b24:	461c      	mov	r4, r3
 8002b26:	4615      	mov	r5, r2
 8002b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b34:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 8002b38:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8002b3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f00f f8db 	bl	8011cfe <strcat>
	  strcat(msg.Buf, str_head_2);
 8002b48:	f107 020c 	add.w	r2, r7, #12
 8002b4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f00f f8d3 	bl	8011cfe <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8002b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4830      	ldr	r0, [pc, #192]	; (8002c20 <Start_Show_Resources+0x268>)
 8002b60:	f00e fb23 	bl	80111aa <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8002b64:	482e      	ldr	r0, [pc, #184]	; (8002c20 <Start_Show_Resources+0x268>)
 8002b66:	f00c fc41 	bl	800f3ec <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 8002b6a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002b74:	4413      	add	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3340      	adds	r3, #64	; 0x40
 8002b7a:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002b84:	e011      	b.n	8002baa <Start_Show_Resources+0x1f2>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002b86:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002b8a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002b8e:	4413      	add	r3, r2
 8002b90:	4923      	ldr	r1, [pc, #140]	; (8002c20 <Start_Show_Resources+0x268>)
 8002b92:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8002b96:	440a      	add	r2, r1
 8002b98:	7811      	ldrb	r1, [r2, #0]
 8002b9a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b9e:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002ba0:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002baa:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <Start_Show_Resources+0x268>)
 8002bac:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002bb0:	4413      	add	r3, r2
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e6      	bne.n	8002b86 <Start_Show_Resources+0x1ce>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8002bb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fb07 	bl	80001d0 <strlen>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <Start_Show_Resources+0x274>)
 8002bce:	4614      	mov	r4, r2
 8002bd0:	469c      	mov	ip, r3
 8002bd2:	f104 0e20 	add.w	lr, r4, #32
 8002bd6:	4665      	mov	r5, ip
 8002bd8:	4626      	mov	r6, r4
 8002bda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002bdc:	6028      	str	r0, [r5, #0]
 8002bde:	6069      	str	r1, [r5, #4]
 8002be0:	60aa      	str	r2, [r5, #8]
 8002be2:	60eb      	str	r3, [r5, #12]
 8002be4:	3410      	adds	r4, #16
 8002be6:	f10c 0c10 	add.w	ip, ip, #16
 8002bea:	4574      	cmp	r4, lr
 8002bec:	d1f3      	bne.n	8002bd6 <Start_Show_Resources+0x21e>
 8002bee:	4665      	mov	r5, ip
 8002bf0:	4623      	mov	r3, r4
 8002bf2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002bf4:	6028      	str	r0, [r5, #0]
 8002bf6:	6069      	str	r1, [r5, #4]
 8002bf8:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <Start_Show_Resources+0x278>)
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c06:	2200      	movs	r2, #0
 8002c08:	f00a fb24 	bl	800d254 <osMessageQueuePut>
  {
 8002c0c:	e6da      	b.n	80029c4 <Start_Show_Resources+0xc>
 8002c0e:	bf00      	nop
 8002c10:	08013f4c 	.word	0x08013f4c
 8002c14:	08013ed0 	.word	0x08013ed0
 8002c18:	20002798 	.word	0x20002798
 8002c1c:	08013eec 	.word	0x08013eec
 8002c20:	200023b0 	.word	0x200023b0
 8002c24:	08013f50 	.word	0x08013f50
 8002c28:	08013f6c 	.word	0x08013f6c
 8002c2c:	08013f20 	.word	0x08013f20
 8002c30:	200081dc 	.word	0x200081dc

08002c34 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <Start_UART_Task+0x58>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	f107 010c 	add.w	r1, r7, #12
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f00a fb61 	bl	800d314 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002c58:	e004      	b.n	8002c64 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8002c5a:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002c64:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002c68:	f107 020c 	add.w	r2, r7, #12
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f3      	bne.n	8002c5a <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8002c72:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8002c76:	f107 030c 	add.w	r3, r7, #12
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f00d fcdf 	bl	8010640 <CDC_Transmit_FS>
    osDelay(1);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f00a fa58 	bl	800d138 <osDelay>
  {
 8002c88:	e7da      	b.n	8002c40 <Start_UART_Task+0xc>
 8002c8a:	bf00      	nop
 8002c8c:	200081dc 	.word	0x200081dc

08002c90 <Start_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD */
void Start_LCD(void *argument)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD */
  /* Infinite loop */

	// Init LCD
	TFT9341_ini(240, 320);
 8002c98:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002c9c:	20f0      	movs	r0, #240	; 0xf0
 8002c9e:	f7fe faf3 	bl	8001288 <TFT9341_ini>
	TFT9341_SetRotation(3);
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	f7fe fe58 	bl	8001958 <TFT9341_SetRotation>
	TFT9341_SetTextColor(TFT9341_WHITE);
 8002ca8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cac:	f7fe fd10 	bl	80016d0 <TFT9341_SetTextColor>
	TFT9341_SetBackColor(TFT9341_BLUE);
 8002cb0:	201f      	movs	r0, #31
 8002cb2:	f7fe fd1d 	bl	80016f0 <TFT9341_SetBackColor>
	TFT9341_FillScreen(TFT9341_BLUE);
 8002cb6:	201f      	movs	r0, #31
 8002cb8:	f7fe fcb4 	bl	8001624 <TFT9341_FillScreen>

	// Init names sensors
	TFT9341_String_DMA(2,30, "TEST ");
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <Start_LCD+0x40>)
 8002cbe:	211e      	movs	r1, #30
 8002cc0:	2002      	movs	r0, #2
 8002cc2:	f7fe fe25 	bl	8001910 <TFT9341_String_DMA>
	{




		osDelay(1000);
 8002cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cca:	f00a fa35 	bl	800d138 <osDelay>
 8002cce:	e7fa      	b.n	8002cc6 <Start_LCD+0x36>
 8002cd0:	08013f94 	.word	0x08013f94

08002cd4 <Start_LCD_touchscreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD_touchscreen */
void Start_LCD_touchscreen(void *argument)
{
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b0b2      	sub	sp, #200	; 0xc8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD_touchscreen */
  /* Infinite loop */
	LCDQUEUE msg;												// Make QUEUE
	memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002cdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002ce0:	2264      	movs	r2, #100	; 0x64
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f00e fa60 	bl	80111aa <memset>
	char buffer[50] = {0};
 8002cea:	2300      	movs	r3, #0
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cf2:	222e      	movs	r2, #46	; 0x2e
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f00e fa57 	bl	80111aa <memset>

	for(;;)
  	 {
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002cfc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d00:	2264      	movs	r2, #100	; 0x64
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f00e fa50 	bl	80111aa <memset>
	  //СЕНСОР ЕКРАНУ
	  if(TP_Touchpad_Pressed() == TOUCHPAD_PRESSED)
 8002d0a:	f7fe fa27 	bl	800115c <TP_Touchpad_Pressed>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 8091 	bne.w	8002e38 <Start_LCD_touchscreen+0x164>
	  {
		  strcat(buffer, "PRESED ");
 8002d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fa58 	bl	80001d0 <strlen>
 8002d20:	4603      	mov	r3, r0
 8002d22:	461a      	mov	r2, r3
 8002d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d28:	4413      	add	r3, r2
 8002d2a:	495e      	ldr	r1, [pc, #376]	; (8002ea4 <Start_LCD_touchscreen+0x1d0>)
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	460b      	mov	r3, r1
 8002d30:	cb03      	ldmia	r3!, {r0, r1}
 8002d32:	6010      	str	r0, [r2, #0]
 8002d34:	6051      	str	r1, [r2, #4]

		  uint16_t x_and_y[2] = {0};
 8002d36:	2300      	movs	r3, #0
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
		  uint8_t status_ts = TP_Read_Coordinates(x_and_y);
 8002d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe f936 	bl	8000fb0 <TP_Read_Coordinates>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		  if(status_ts == TOUCHPAD_DATA_OK)
 8002d4a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	f040 808c 	bne.w	8002e6c <Start_LCD_touchscreen+0x198>
		  {
			  // Convert coordinate from uint16_t format in string format
			  // And save it in main buffer
			  char buff_x_coordinates[6] = {0};
 8002d54:	2300      	movs	r3, #0
 8002d56:	623b      	str	r3, [r7, #32]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	84bb      	strh	r3, [r7, #36]	; 0x24
			  char buff_y_coordinates[6] = {0};
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	2300      	movs	r3, #0
 8002d62:	83bb      	strh	r3, [r7, #28]
			  char buff_coordinates[15] = {0};
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	f8c3 2007 	str.w	r2, [r3, #7]

			  strcat(buff_x_coordinates, "x: ");
 8002d76:	f107 0320 	add.w	r3, r7, #32
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd fa28 	bl	80001d0 <strlen>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	f107 0320 	add.w	r3, r7, #32
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a47      	ldr	r2, [pc, #284]	; (8002ea8 <Start_LCD_touchscreen+0x1d4>)
 8002d8c:	6810      	ldr	r0, [r2, #0]
 8002d8e:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[0], buff_x_coordinates, 10);
 8002d90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d92:	4618      	mov	r0, r3
 8002d94:	f107 0320 	add.w	r3, r7, #32
 8002d98:	220a      	movs	r2, #10
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f00e f9f2 	bl	8011184 <itoa>
			  strcat(buff_x_coordinates, " ");
 8002da0:	f107 0320 	add.w	r3, r7, #32
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fa13 	bl	80001d0 <strlen>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461a      	mov	r2, r3
 8002dae:	f107 0320 	add.w	r3, r7, #32
 8002db2:	4413      	add	r3, r2
 8002db4:	493d      	ldr	r1, [pc, #244]	; (8002eac <Start_LCD_touchscreen+0x1d8>)
 8002db6:	461a      	mov	r2, r3
 8002db8:	460b      	mov	r3, r1
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	8013      	strh	r3, [r2, #0]

			  strcat(buff_y_coordinates, "y: ");
 8002dbe:	f107 0318 	add.w	r3, r7, #24
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fa04 	bl	80001d0 <strlen>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f107 0318 	add.w	r3, r7, #24
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a37      	ldr	r2, [pc, #220]	; (8002eb0 <Start_LCD_touchscreen+0x1dc>)
 8002dd4:	6810      	ldr	r0, [r2, #0]
 8002dd6:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[1], buff_y_coordinates, 10);
 8002dd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f107 0318 	add.w	r3, r7, #24
 8002de0:	220a      	movs	r2, #10
 8002de2:	4619      	mov	r1, r3
 8002de4:	f00e f9ce 	bl	8011184 <itoa>
			  strcat(buff_y_coordinates, " ");
 8002de8:	f107 0318 	add.w	r3, r7, #24
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd f9ef 	bl	80001d0 <strlen>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	f107 0318 	add.w	r3, r7, #24
 8002dfa:	4413      	add	r3, r2
 8002dfc:	492b      	ldr	r1, [pc, #172]	; (8002eac <Start_LCD_touchscreen+0x1d8>)
 8002dfe:	461a      	mov	r2, r3
 8002e00:	460b      	mov	r3, r1
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	8013      	strh	r3, [r2, #0]

			  strcat(buff_coordinates, buff_x_coordinates);
 8002e06:	f107 0220 	add.w	r2, r7, #32
 8002e0a:	f107 0308 	add.w	r3, r7, #8
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f00e ff74 	bl	8011cfe <strcat>
			  strcat(buff_coordinates, buff_y_coordinates);
 8002e16:	f107 0218 	add.w	r2, r7, #24
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f00e ff6c 	bl	8011cfe <strcat>
			  strcat(buffer, buff_coordinates);
 8002e26:	f107 0208 	add.w	r2, r7, #8
 8002e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f00e ff64 	bl	8011cfe <strcat>
 8002e36:	e019      	b.n	8002e6c <Start_LCD_touchscreen+0x198>
		  }
	  }
	  else
	  {
		  strcat(buffer, "NO PRESS                  ");
 8002e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd f9c7 	bl	80001d0 <strlen>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <Start_LCD_touchscreen+0x1e0>)
 8002e4e:	461d      	mov	r5, r3
 8002e50:	4614      	mov	r4, r2
 8002e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e54:	6028      	str	r0, [r5, #0]
 8002e56:	6069      	str	r1, [r5, #4]
 8002e58:	60aa      	str	r2, [r5, #8]
 8002e5a:	60eb      	str	r3, [r5, #12]
 8002e5c:	cc03      	ldmia	r4!, {r0, r1}
 8002e5e:	6128      	str	r0, [r5, #16]
 8002e60:	6169      	str	r1, [r5, #20]
 8002e62:	8823      	ldrh	r3, [r4, #0]
 8002e64:	78a2      	ldrb	r2, [r4, #2]
 8002e66:	832b      	strh	r3, [r5, #24]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	76ab      	strb	r3, [r5, #26]
	  }

	  strcat(msg.buff, buffer);
 8002e6c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002e70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f00e ff41 	bl	8011cfe <strcat>
	  osMessageQueuePut(LCDQueueHandle, &msg, 0, osWaitForever);  	// Write data on queue (In will print on StartUART_Task task)
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <Start_LCD_touchscreen+0x1e4>)
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f00a f9e3 	bl	800d254 <osMessageQueuePut>
	  memset(buffer, 0, sizeof(buffer));
 8002e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e92:	2232      	movs	r2, #50	; 0x32
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f00e f987 	bl	80111aa <memset>

	  osDelay(200);
 8002e9c:	20c8      	movs	r0, #200	; 0xc8
 8002e9e:	f00a f94b 	bl	800d138 <osDelay>
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8002ea2:	e72b      	b.n	8002cfc <Start_LCD_touchscreen+0x28>
 8002ea4:	08013f9c 	.word	0x08013f9c
 8002ea8:	08013fa4 	.word	0x08013fa4
 8002eac:	08013fa8 	.word	0x08013fa8
 8002eb0:	08013fac 	.word	0x08013fac
 8002eb4:	08013fb0 	.word	0x08013fb0
 8002eb8:	2000c364 	.word	0x2000c364

08002ebc <Start_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RTC */
void Start_RTC(void *argument)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b0a2      	sub	sp, #136	; 0x88
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RTC */
  /* Infinite loop */
	osDelay(1000);
 8002ec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ec8:	f00a f936 	bl	800d138 <osDelay>
	oled_init();
 8002ecc:	f001 f9b6 	bl	800423c <oled_init>
	oled_update();
 8002ed0:	f001 f960 	bl	8004194 <oled_update>

	#define DEVICE_FOUND 0

	ds3231_I2C_init();
 8002ed4:	f7fe fe12 	bl	8001afc <ds3231_I2C_init>

	  // Encoder /////////////////////////////////////////
	  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002ed8:	213c      	movs	r1, #60	; 0x3c
 8002eda:	48bd      	ldr	r0, [pc, #756]	; (80031d0 <Start_RTC+0x314>)
 8002edc:	f006 fb8c 	bl	80095f8 <HAL_TIM_Encoder_Start>
	  int32_t prevCounter = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  ////////////////////////////////////////////////////

	for(;;)
	{
		// 1. Set time
		bool set_time = false;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
//			  osDelay(1);


		//if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)

		uint8_t clik = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		char klik_buf[3] = {0};
 8002ef2:	4bb8      	ldr	r3, [pc, #736]	; (80031d4 <Start_RTC+0x318>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)	// If button pressed
 8002f00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f04:	48b4      	ldr	r0, [pc, #720]	; (80031d8 <Start_RTC+0x31c>)
 8002f06:	f002 fd09 	bl	800591c <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d157      	bne.n	8002fc0 <Start_RTC+0x104>
		{
			uint8_t test_seconds = 11;					// Write test seconds
 8002f10:	230b      	movs	r3, #11
 8002f12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			uint8_t status = 99;
 8002f16:	2363      	movs	r3, #99	; 0x63
 8002f18:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			uint8_t day_of_week = 1;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
			// Write data on RTC
			//ds3231_set(DS3231_REGISTER_SECONDS_DEFAULT, &seco);													// Doesn't work
			//HAL_I2C_Mem_Write(&hi2c3, DS3231_I2C_ADDRESS<<1, DS3231_REGISTER_SECONDS_DEFAULT, 1, &test_seconds, 1, 1000); 	//   work !!!!

			//time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS_DEFAULT, &test_seconds);
			ds3231_set(DS3231_REGISTER_SECONDS_DEFAULT, &test_seconds);
 8002f22:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8002f26:	4619      	mov	r1, r3
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f7fe feaf 	bl	8001c8c <ds3231_set>
			ds3231_set(DS3231_REGISTER_MINUTES_DEFAULT, &test_seconds);
 8002f2e:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8002f32:	4619      	mov	r1, r3
 8002f34:	2001      	movs	r0, #1
 8002f36:	f7fe fea9 	bl	8001c8c <ds3231_set>
			ds3231_set(DS3231_REGISTER_HOURS_DEFAULT, &test_seconds);
 8002f3a:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8002f3e:	4619      	mov	r1, r3
 8002f40:	2002      	movs	r0, #2
 8002f42:	f7fe fea3 	bl	8001c8c <ds3231_set>

			ds3231_set(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &day_of_week);
 8002f46:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	2003      	movs	r0, #3
 8002f4e:	f7fe fe9d 	bl	8001c8c <ds3231_set>
			ds3231_set(DS3231_REGISTER_DATE_DEFAULT, &test_seconds);
 8002f52:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8002f56:	4619      	mov	r1, r3
 8002f58:	2004      	movs	r0, #4
 8002f5a:	f7fe fe97 	bl	8001c8c <ds3231_set>
			ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &test_seconds);
 8002f5e:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8002f62:	4619      	mov	r1, r3
 8002f64:	2005      	movs	r0, #5
 8002f66:	f7fe fe91 	bl	8001c8c <ds3231_set>
			ds3231_set(DS3231_REGISTER_YEAR_DEFAULT, &test_seconds);
 8002f6a:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8002f6e:	4619      	mov	r1, r3
 8002f70:	2006      	movs	r0, #6
 8002f72:	f7fe fe8b 	bl	8001c8c <ds3231_set>


			// Read data from RTC
			osDelay(100);
 8002f76:	2064      	movs	r0, #100	; 0x64
 8002f78:	f00a f8de 	bl	800d138 <osDelay>
			uint8_t seconds_t = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
			uint8_t minutes_t = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
			uint8_t hours_t = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

			ds3231_read(DS3231_REGISTER_SECONDS_DEFAULT, &seconds_t);
 8002f8e:	f107 036d 	add.w	r3, r7, #109	; 0x6d
 8002f92:	4619      	mov	r1, r3
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7fe fdb9 	bl	8001b0c <ds3231_read>
			ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &minutes_t);
 8002f9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	f7fe fdb3 	bl	8001b0c <ds3231_read>
			ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &hours_t);
 8002fa6:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8002faa:	4619      	mov	r1, r3
 8002fac:	2001      	movs	r0, #1
 8002fae:	f7fe fdad 	bl	8001b0c <ds3231_read>

			///////////////////////////////////////
			int seco = 44;
 8002fb2:	232c      	movs	r3, #44	; 0x2c
 8002fb4:	677b      	str	r3, [r7, #116]	; 0x74
//			status = ds3231_set(DS3231_REGISTER_HOURS_DEFAULT, &seco);
//			if(HAL_OK != status)
//			{
//				int hh = 0;
//			}
			osDelay(500);
 8002fb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fba:	f00a f8bd 	bl	800d138 <osDelay>
 8002fbe:	e2a4      	b.n	800350a <Start_RTC+0x64e>

		}
		else		// Print current time
		{
			// 1. Read time from RTS
			char time[20] = {0};
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
			char date[40] = {0};
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	2224      	movs	r2, #36	; 0x24
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f00e f8e3 	bl	80111aa <memset>
			char time_buf[10] = {0};
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fe8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	809a      	strh	r2, [r3, #4]
			char time_buf_2[10] = {0};
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	809a      	strh	r2, [r3, #4]

			uint8_t seconds = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			uint8_t minutes = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			uint8_t hours = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			uint8_t day = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			uint8_t date_day = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			uint8_t mounth = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			uint8_t year = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			uint8_t status = 99;
 800302a:	2363      	movs	r3, #99	; 0x63
 800302c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

			status = ds3231_read(DS3231_REGISTER_SECONDS_DEFAULT, &seconds);
 8003030:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8003034:	4619      	mov	r1, r3
 8003036:	2000      	movs	r0, #0
 8003038:	f7fe fd68 	bl	8001b0c <ds3231_read>
 800303c:	4603      	mov	r3, r0
 800303e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
			if(HAL_OK != status)
 8003042:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <Start_RTC+0x192>
			{
				int ff = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	67fb      	str	r3, [r7, #124]	; 0x7c
			}
			ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &minutes);
 800304e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8003052:	4619      	mov	r1, r3
 8003054:	2001      	movs	r0, #1
 8003056:	f7fe fd59 	bl	8001b0c <ds3231_read>
			ds3231_read(DS3231_REGISTER_HOURS_DEFAULT, &hours);
 800305a:	f107 0339 	add.w	r3, r7, #57	; 0x39
 800305e:	4619      	mov	r1, r3
 8003060:	2002      	movs	r0, #2
 8003062:	f7fe fd53 	bl	8001b0c <ds3231_read>

			ds3231_read(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &day);
 8003066:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800306a:	4619      	mov	r1, r3
 800306c:	2003      	movs	r0, #3
 800306e:	f7fe fd4d 	bl	8001b0c <ds3231_read>
			ds3231_read(DS3231_REGISTER_DATE_DEFAULT, &date_day);
 8003072:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8003076:	4619      	mov	r1, r3
 8003078:	2004      	movs	r0, #4
 800307a:	f7fe fd47 	bl	8001b0c <ds3231_read>
			ds3231_read(DS3231_REGISTER_MONTH_DEFAULT, &mounth);
 800307e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003082:	4619      	mov	r1, r3
 8003084:	2005      	movs	r0, #5
 8003086:	f7fe fd41 	bl	8001b0c <ds3231_read>
			ds3231_read(DS3231_REGISTER_YEAR_DEFAULT, &year);
 800308a:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800308e:	4619      	mov	r1, r3
 8003090:	2006      	movs	r0, #6
 8003092:	f7fe fd3b 	bl	8001b0c <ds3231_read>

			// Convert in string
			// Print minutes on OLED
			if(hours < 10)
 8003096:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800309a:	2b09      	cmp	r3, #9
 800309c:	d836      	bhi.n	800310c <Start_RTC+0x250>
			{
				memset(time_buf, 0, sizeof(time_buf));
 800309e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030a2:	220a      	movs	r2, #10
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f00e f87f 	bl	80111aa <memset>
				sprintf(time_buf, "%c", '0');
 80030ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030b0:	2230      	movs	r2, #48	; 0x30
 80030b2:	494a      	ldr	r1, [pc, #296]	; (80031dc <Start_RTC+0x320>)
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00e fdbf 	bl	8011c38 <siprintf>
				sprintf(time_buf_2, "%d", hours);
 80030ba:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80030be:	461a      	mov	r2, r3
 80030c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030c4:	4946      	ldr	r1, [pc, #280]	; (80031e0 <Start_RTC+0x324>)
 80030c6:	4618      	mov	r0, r3
 80030c8:	f00e fdb6 	bl	8011c38 <siprintf>
				strcat(time_buf, time_buf_2);
 80030cc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80030d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f00e fe11 	bl	8011cfe <strcat>
				strcat(time, time_buf);
 80030dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80030e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f00e fe09 	bl	8011cfe <strcat>
				strcat(time, ":");
 80030ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd f86d 	bl	80001d0 <strlen>
 80030f6:	4603      	mov	r3, r0
 80030f8:	461a      	mov	r2, r3
 80030fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030fe:	4413      	add	r3, r2
 8003100:	4938      	ldr	r1, [pc, #224]	; (80031e4 <Start_RTC+0x328>)
 8003102:	461a      	mov	r2, r3
 8003104:	460b      	mov	r3, r1
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	8013      	strh	r3, [r2, #0]
 800310a:	e026      	b.n	800315a <Start_RTC+0x29e>
			}
			else
			{
				sprintf(time_buf, "%d", hours);
 800310c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003110:	461a      	mov	r2, r3
 8003112:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003116:	4932      	ldr	r1, [pc, #200]	; (80031e0 <Start_RTC+0x324>)
 8003118:	4618      	mov	r0, r3
 800311a:	f00e fd8d 	bl	8011c38 <siprintf>
				strcat(time, time_buf);
 800311e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003122:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f00e fde8 	bl	8011cfe <strcat>
				strcat(time, ":");
 800312e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd f84c 	bl	80001d0 <strlen>
 8003138:	4603      	mov	r3, r0
 800313a:	461a      	mov	r2, r3
 800313c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003140:	4413      	add	r3, r2
 8003142:	4928      	ldr	r1, [pc, #160]	; (80031e4 <Start_RTC+0x328>)
 8003144:	461a      	mov	r2, r3
 8003146:	460b      	mov	r3, r1
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	8013      	strh	r3, [r2, #0]
				memset(time_buf, 0, sizeof(time_buf));
 800314c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003150:	220a      	movs	r2, #10
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f00e f828 	bl	80111aa <memset>
//			strcat(time, time_buf);
//			strcat(time, ":");
//			memset(time_buf, 0, sizeof(time_buf));

			// Print minutes on OLED
			if(minutes < 10)
 800315a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800315e:	2b09      	cmp	r3, #9
 8003160:	d842      	bhi.n	80031e8 <Start_RTC+0x32c>
			{
				memset(time_buf, 0, sizeof(time_buf));
 8003162:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003166:	220a      	movs	r2, #10
 8003168:	2100      	movs	r1, #0
 800316a:	4618      	mov	r0, r3
 800316c:	f00e f81d 	bl	80111aa <memset>
				sprintf(time_buf, "%c", '0');
 8003170:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003174:	2230      	movs	r2, #48	; 0x30
 8003176:	4919      	ldr	r1, [pc, #100]	; (80031dc <Start_RTC+0x320>)
 8003178:	4618      	mov	r0, r3
 800317a:	f00e fd5d 	bl	8011c38 <siprintf>
				sprintf(time_buf_2, "%d", minutes);
 800317e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003182:	461a      	mov	r2, r3
 8003184:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003188:	4915      	ldr	r1, [pc, #84]	; (80031e0 <Start_RTC+0x324>)
 800318a:	4618      	mov	r0, r3
 800318c:	f00e fd54 	bl	8011c38 <siprintf>
				strcat(time_buf, time_buf_2);
 8003190:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003194:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f00e fdaf 	bl	8011cfe <strcat>
				strcat(time, time_buf);
 80031a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f00e fda7 	bl	8011cfe <strcat>
				strcat(time, ":");
 80031b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f80b 	bl	80001d0 <strlen>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031c2:	4413      	add	r3, r2
 80031c4:	4907      	ldr	r1, [pc, #28]	; (80031e4 <Start_RTC+0x328>)
 80031c6:	461a      	mov	r2, r3
 80031c8:	460b      	mov	r3, r1
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	8013      	strh	r3, [r2, #0]
 80031ce:	e032      	b.n	8003236 <Start_RTC+0x37a>
 80031d0:	2000cb40 	.word	0x2000cb40
 80031d4:	08014024 	.word	0x08014024
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08013fcc 	.word	0x08013fcc
 80031e0:	08013fd0 	.word	0x08013fd0
 80031e4:	08013fd4 	.word	0x08013fd4
			}
			else
			{
				sprintf(time_buf, "%d", minutes);
 80031e8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80031ec:	461a      	mov	r2, r3
 80031ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031f2:	49c8      	ldr	r1, [pc, #800]	; (8003514 <Start_RTC+0x658>)
 80031f4:	4618      	mov	r0, r3
 80031f6:	f00e fd1f 	bl	8011c38 <siprintf>
				strcat(time, time_buf);
 80031fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f00e fd7a 	bl	8011cfe <strcat>
				strcat(time, ":");
 800320a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800320e:	4618      	mov	r0, r3
 8003210:	f7fc ffde 	bl	80001d0 <strlen>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800321c:	4413      	add	r3, r2
 800321e:	49be      	ldr	r1, [pc, #760]	; (8003518 <Start_RTC+0x65c>)
 8003220:	461a      	mov	r2, r3
 8003222:	460b      	mov	r3, r1
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	8013      	strh	r3, [r2, #0]
				memset(time_buf, 0, sizeof(time_buf));
 8003228:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800322c:	220a      	movs	r2, #10
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f00d ffba 	bl	80111aa <memset>
//			strcat(time, time_buf);
//			strcat(time, ":");
//			memset(time_buf, 0, sizeof(time_buf));

			// Print seconds on OLED
			if(seconds == 0)
 8003236:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <Start_RTC+0x38a>
			{
				clear();
 800323e:	f000 fe61 	bl	8003f04 <clear>
				oled_update();
 8003242:	f000 ffa7 	bl	8004194 <oled_update>
			}
			if(seconds < 10)
 8003246:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800324a:	2b09      	cmp	r3, #9
 800324c:	d827      	bhi.n	800329e <Start_RTC+0x3e2>
			{
				memset(time_buf, 0, sizeof(time_buf));
 800324e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003252:	220a      	movs	r2, #10
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f00d ffa7 	bl	80111aa <memset>
				sprintf(time_buf, "%c", '0');
 800325c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003260:	2230      	movs	r2, #48	; 0x30
 8003262:	49ae      	ldr	r1, [pc, #696]	; (800351c <Start_RTC+0x660>)
 8003264:	4618      	mov	r0, r3
 8003266:	f00e fce7 	bl	8011c38 <siprintf>
				sprintf(time_buf_2, "%d", seconds);
 800326a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800326e:	461a      	mov	r2, r3
 8003270:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003274:	49a7      	ldr	r1, [pc, #668]	; (8003514 <Start_RTC+0x658>)
 8003276:	4618      	mov	r0, r3
 8003278:	f00e fcde 	bl	8011c38 <siprintf>
				strcat(time_buf, time_buf_2);
 800327c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003280:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f00e fd39 	bl	8011cfe <strcat>
				strcat(time, time_buf);
 800328c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003290:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f00e fd31 	bl	8011cfe <strcat>
 800329c:	e017      	b.n	80032ce <Start_RTC+0x412>
			}
			else
			{
				sprintf(time_buf, "%d", seconds);
 800329e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80032a2:	461a      	mov	r2, r3
 80032a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032a8:	499a      	ldr	r1, [pc, #616]	; (8003514 <Start_RTC+0x658>)
 80032aa:	4618      	mov	r0, r3
 80032ac:	f00e fcc4 	bl	8011c38 <siprintf>
				strcat(time, time_buf);
 80032b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80032b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f00e fd1f 	bl	8011cfe <strcat>
				memset(time_buf, 0, sizeof(time_buf));
 80032c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032c4:	220a      	movs	r2, #10
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f00d ff6e 	bl	80111aa <memset>
			}


			// Print date
			sprintf(time_buf, "%d", date_day);
 80032ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032d2:	461a      	mov	r2, r3
 80032d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032d8:	498e      	ldr	r1, [pc, #568]	; (8003514 <Start_RTC+0x658>)
 80032da:	4618      	mov	r0, r3
 80032dc:	f00e fcac 	bl	8011c38 <siprintf>
			strcat(date, time_buf);
 80032e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80032e4:	f107 030c 	add.w	r3, r7, #12
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f00e fd07 	bl	8011cfe <strcat>
			strcat(date, ":");
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fc ff6b 	bl	80001d0 <strlen>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	f107 030c 	add.w	r3, r7, #12
 8003302:	4413      	add	r3, r2
 8003304:	4984      	ldr	r1, [pc, #528]	; (8003518 <Start_RTC+0x65c>)
 8003306:	461a      	mov	r2, r3
 8003308:	460b      	mov	r3, r1
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	8013      	strh	r3, [r2, #0]
			memset(time_buf, 0, sizeof(time_buf));
 800330e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003312:	220a      	movs	r2, #10
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f00d ff47 	bl	80111aa <memset>

			sprintf(time_buf, "%d", mounth);
 800331c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003320:	461a      	mov	r2, r3
 8003322:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003326:	497b      	ldr	r1, [pc, #492]	; (8003514 <Start_RTC+0x658>)
 8003328:	4618      	mov	r0, r3
 800332a:	f00e fc85 	bl	8011c38 <siprintf>
			strcat(date, time_buf);
 800332e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f00e fce0 	bl	8011cfe <strcat>
			strcat(date, ":");
 800333e:	f107 030c 	add.w	r3, r7, #12
 8003342:	4618      	mov	r0, r3
 8003344:	f7fc ff44 	bl	80001d0 <strlen>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	f107 030c 	add.w	r3, r7, #12
 8003350:	4413      	add	r3, r2
 8003352:	4971      	ldr	r1, [pc, #452]	; (8003518 <Start_RTC+0x65c>)
 8003354:	461a      	mov	r2, r3
 8003356:	460b      	mov	r3, r1
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	8013      	strh	r3, [r2, #0]
			memset(time_buf, 0, sizeof(time_buf));
 800335c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003360:	220a      	movs	r2, #10
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f00d ff20 	bl	80111aa <memset>

			sprintf(time_buf, "%d", year);
 800336a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800336e:	461a      	mov	r2, r3
 8003370:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003374:	4967      	ldr	r1, [pc, #412]	; (8003514 <Start_RTC+0x658>)
 8003376:	4618      	mov	r0, r3
 8003378:	f00e fc5e 	bl	8011c38 <siprintf>
			strcat(date, "20");
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	4618      	mov	r0, r3
 8003382:	f7fc ff25 	bl	80001d0 <strlen>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	4413      	add	r3, r2
 8003390:	4a63      	ldr	r2, [pc, #396]	; (8003520 <Start_RTC+0x664>)
 8003392:	8811      	ldrh	r1, [r2, #0]
 8003394:	7892      	ldrb	r2, [r2, #2]
 8003396:	8019      	strh	r1, [r3, #0]
 8003398:	709a      	strb	r2, [r3, #2]
			strcat(date, time_buf);
 800339a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f00e fcaa 	bl	8011cfe <strcat>
			memset(time_buf, 0, sizeof(time_buf));
 80033aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033ae:	220a      	movs	r2, #10
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f00d fef9 	bl	80111aa <memset>

			// day
			switch (day)
 80033b8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80033bc:	3b01      	subs	r3, #1
 80033be:	2b06      	cmp	r3, #6
 80033c0:	f200 8093 	bhi.w	80034ea <Start_RTC+0x62e>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <Start_RTC+0x510>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033e9 	.word	0x080033e9
 80033d0:	0800340b 	.word	0x0800340b
 80033d4:	08003431 	.word	0x08003431
 80033d8:	0800345b 	.word	0x0800345b
 80033dc:	08003481 	.word	0x08003481
 80033e0:	080034a3 	.word	0x080034a3
 80033e4:	080034c9 	.word	0x080034c9
			{
				case 1:
					strcat(date, " Monday");
 80033e8:	f107 030c 	add.w	r3, r7, #12
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fc feef 	bl	80001d0 <strlen>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	f107 030c 	add.w	r3, r7, #12
 80033fa:	4413      	add	r3, r2
 80033fc:	4949      	ldr	r1, [pc, #292]	; (8003524 <Start_RTC+0x668>)
 80033fe:	461a      	mov	r2, r3
 8003400:	460b      	mov	r3, r1
 8003402:	cb03      	ldmia	r3!, {r0, r1}
 8003404:	6010      	str	r0, [r2, #0]
 8003406:	6051      	str	r1, [r2, #4]
					break;
 8003408:	e06f      	b.n	80034ea <Start_RTC+0x62e>
				case 2:
					strcat(date, " Tuesday");
 800340a:	f107 030c 	add.w	r3, r7, #12
 800340e:	4618      	mov	r0, r3
 8003410:	f7fc fede 	bl	80001d0 <strlen>
 8003414:	4603      	mov	r3, r0
 8003416:	461a      	mov	r2, r3
 8003418:	f107 030c 	add.w	r3, r7, #12
 800341c:	4413      	add	r3, r2
 800341e:	4942      	ldr	r1, [pc, #264]	; (8003528 <Start_RTC+0x66c>)
 8003420:	461a      	mov	r2, r3
 8003422:	460b      	mov	r3, r1
 8003424:	cb03      	ldmia	r3!, {r0, r1}
 8003426:	6010      	str	r0, [r2, #0]
 8003428:	6051      	str	r1, [r2, #4]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	7213      	strb	r3, [r2, #8]
					break;
 800342e:	e05c      	b.n	80034ea <Start_RTC+0x62e>
				case 3:
					strcat(date, " Wednesday");
 8003430:	f107 030c 	add.w	r3, r7, #12
 8003434:	4618      	mov	r0, r3
 8003436:	f7fc fecb 	bl	80001d0 <strlen>
 800343a:	4603      	mov	r3, r0
 800343c:	461a      	mov	r2, r3
 800343e:	f107 030c 	add.w	r3, r7, #12
 8003442:	4413      	add	r3, r2
 8003444:	4939      	ldr	r1, [pc, #228]	; (800352c <Start_RTC+0x670>)
 8003446:	461a      	mov	r2, r3
 8003448:	460b      	mov	r3, r1
 800344a:	cb03      	ldmia	r3!, {r0, r1}
 800344c:	6010      	str	r0, [r2, #0]
 800344e:	6051      	str	r1, [r2, #4]
 8003450:	8819      	ldrh	r1, [r3, #0]
 8003452:	789b      	ldrb	r3, [r3, #2]
 8003454:	8111      	strh	r1, [r2, #8]
 8003456:	7293      	strb	r3, [r2, #10]
					break;
 8003458:	e047      	b.n	80034ea <Start_RTC+0x62e>
				case 4:
					strcat(date, " Thursday");
 800345a:	f107 030c 	add.w	r3, r7, #12
 800345e:	4618      	mov	r0, r3
 8003460:	f7fc feb6 	bl	80001d0 <strlen>
 8003464:	4603      	mov	r3, r0
 8003466:	461a      	mov	r2, r3
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	4413      	add	r3, r2
 800346e:	4930      	ldr	r1, [pc, #192]	; (8003530 <Start_RTC+0x674>)
 8003470:	461a      	mov	r2, r3
 8003472:	460b      	mov	r3, r1
 8003474:	cb03      	ldmia	r3!, {r0, r1}
 8003476:	6010      	str	r0, [r2, #0]
 8003478:	6051      	str	r1, [r2, #4]
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	8113      	strh	r3, [r2, #8]
					break;
 800347e:	e034      	b.n	80034ea <Start_RTC+0x62e>
				case 5:
					strcat(date, " Friday");
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	4618      	mov	r0, r3
 8003486:	f7fc fea3 	bl	80001d0 <strlen>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	4413      	add	r3, r2
 8003494:	4927      	ldr	r1, [pc, #156]	; (8003534 <Start_RTC+0x678>)
 8003496:	461a      	mov	r2, r3
 8003498:	460b      	mov	r3, r1
 800349a:	cb03      	ldmia	r3!, {r0, r1}
 800349c:	6010      	str	r0, [r2, #0]
 800349e:	6051      	str	r1, [r2, #4]
					break;
 80034a0:	e023      	b.n	80034ea <Start_RTC+0x62e>
				case 6:
					strcat(date, " Saturday");
 80034a2:	f107 030c 	add.w	r3, r7, #12
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fc fe92 	bl	80001d0 <strlen>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	f107 030c 	add.w	r3, r7, #12
 80034b4:	4413      	add	r3, r2
 80034b6:	4920      	ldr	r1, [pc, #128]	; (8003538 <Start_RTC+0x67c>)
 80034b8:	461a      	mov	r2, r3
 80034ba:	460b      	mov	r3, r1
 80034bc:	cb03      	ldmia	r3!, {r0, r1}
 80034be:	6010      	str	r0, [r2, #0]
 80034c0:	6051      	str	r1, [r2, #4]
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	8113      	strh	r3, [r2, #8]
					break;
 80034c6:	e010      	b.n	80034ea <Start_RTC+0x62e>
				case 7:
					strcat(date, " Sunday");
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fc fe7f 	bl	80001d0 <strlen>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	4413      	add	r3, r2
 80034dc:	4917      	ldr	r1, [pc, #92]	; (800353c <Start_RTC+0x680>)
 80034de:	461a      	mov	r2, r3
 80034e0:	460b      	mov	r3, r1
 80034e2:	cb03      	ldmia	r3!, {r0, r1}
 80034e4:	6010      	str	r0, [r2, #0]
 80034e6:	6051      	str	r1, [r2, #4]
					break;
 80034e8:	bf00      	nop
			}

			graphics_text(40, 0, 3, time);
 80034ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034ee:	2203      	movs	r2, #3
 80034f0:	2100      	movs	r1, #0
 80034f2:	2028      	movs	r0, #40	; 0x28
 80034f4:	f000 fd9a 	bl	800402c <graphics_text>
			graphics_text(0, 22, 2, date);
 80034f8:	f107 030c 	add.w	r3, r7, #12
 80034fc:	2202      	movs	r2, #2
 80034fe:	2116      	movs	r1, #22
 8003500:	2000      	movs	r0, #0
 8003502:	f000 fd93 	bl	800402c <graphics_text>
			oled_update();
 8003506:	f000 fe45 	bl	8004194 <oled_update>
		}

		osDelay(1000);
 800350a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800350e:	f009 fe13 	bl	800d138 <osDelay>
	{
 8003512:	e4e8      	b.n	8002ee6 <Start_RTC+0x2a>
 8003514:	08013fd0 	.word	0x08013fd0
 8003518:	08013fd4 	.word	0x08013fd4
 800351c:	08013fcc 	.word	0x08013fcc
 8003520:	08013fd8 	.word	0x08013fd8
 8003524:	08013fdc 	.word	0x08013fdc
 8003528:	08013fe4 	.word	0x08013fe4
 800352c:	08013ff0 	.word	0x08013ff0
 8003530:	08013ffc 	.word	0x08013ffc
 8003534:	08014008 	.word	0x08014008
 8003538:	08014010 	.word	0x08014010
 800353c:	0801401c 	.word	0x0801401c

08003540 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]




	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a09      	ldr	r2, [pc, #36]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d104      	bne.n	800355c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	4a07      	ldr	r2, [pc, #28]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800355a:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a06      	ldr	r2, [pc, #24]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8003566:	f000 ff27 	bl	80043b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40000400 	.word	0x40000400
 8003578:	2000cd88 	.word	0x2000cd88
 800357c:	40002000 	.word	0x40002000

08003580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003584:	b672      	cpsid	i
}
 8003586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003588:	e7fe      	b.n	8003588 <Error_Handler+0x8>
	...

0800358c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <HAL_MspInit+0x54>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	4a11      	ldr	r2, [pc, #68]	; (80035e0 <HAL_MspInit+0x54>)
 800359c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a0:	6453      	str	r3, [r2, #68]	; 0x44
 80035a2:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <HAL_MspInit+0x54>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_MspInit+0x54>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <HAL_MspInit+0x54>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_MspInit+0x54>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035ca:	2200      	movs	r2, #0
 80035cc:	210f      	movs	r1, #15
 80035ce:	f06f 0001 	mvn.w	r0, #1
 80035d2:	f001 fa73 	bl	8004abc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800

080035e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	60da      	str	r2, [r3, #12]
 80035fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a17      	ldr	r2, [pc, #92]	; (8003660 <HAL_ADC_MspInit+0x7c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d127      	bne.n	8003656 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <HAL_ADC_MspInit+0x80>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	4a15      	ldr	r2, [pc, #84]	; (8003664 <HAL_ADC_MspInit+0x80>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003614:	6453      	str	r3, [r2, #68]	; 0x44
 8003616:	4b13      	ldr	r3, [pc, #76]	; (8003664 <HAL_ADC_MspInit+0x80>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_ADC_MspInit+0x80>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <HAL_ADC_MspInit+0x80>)
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_ADC_MspInit+0x80>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800363e:	2302      	movs	r3, #2
 8003640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003642:	2303      	movs	r3, #3
 8003644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4619      	mov	r1, r3
 8003650:	4805      	ldr	r0, [pc, #20]	; (8003668 <HAL_ADC_MspInit+0x84>)
 8003652:	f001 fecb 	bl	80053ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003656:	bf00      	nop
 8003658:	3728      	adds	r7, #40	; 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40012000 	.word	0x40012000
 8003664:	40023800 	.word	0x40023800
 8003668:	40020400 	.word	0x40020400

0800366c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08c      	sub	sp, #48	; 0x30
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 031c 	add.w	r3, r7, #28
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a42      	ldr	r2, [pc, #264]	; (8003794 <HAL_I2C_MspInit+0x128>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d12d      	bne.n	80036ea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	4b41      	ldr	r3, [pc, #260]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	4a40      	ldr	r2, [pc, #256]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 8003698:	f043 0302 	orr.w	r3, r3, #2
 800369c:	6313      	str	r3, [r2, #48]	; 0x30
 800369e:	4b3e      	ldr	r3, [pc, #248]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036b0:	2312      	movs	r3, #18
 80036b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b8:	2303      	movs	r3, #3
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80036bc:	2304      	movs	r3, #4
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c0:	f107 031c 	add.w	r3, r7, #28
 80036c4:	4619      	mov	r1, r3
 80036c6:	4835      	ldr	r0, [pc, #212]	; (800379c <HAL_I2C_MspInit+0x130>)
 80036c8:	f001 fe90 	bl	80053ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	4a30      	ldr	r2, [pc, #192]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 80036d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036da:	6413      	str	r3, [r2, #64]	; 0x40
 80036dc:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80036e8:	e050      	b.n	800378c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a2c      	ldr	r2, [pc, #176]	; (80037a0 <HAL_I2C_MspInit+0x134>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d14b      	bne.n	800378c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	6313      	str	r3, [r2, #48]	; 0x30
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6313      	str	r3, [r2, #48]	; 0x30
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800372c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003732:	2312      	movs	r3, #18
 8003734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373a:	2303      	movs	r3, #3
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800373e:	2304      	movs	r3, #4
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003742:	f107 031c 	add.w	r3, r7, #28
 8003746:	4619      	mov	r1, r3
 8003748:	4816      	ldr	r0, [pc, #88]	; (80037a4 <HAL_I2C_MspInit+0x138>)
 800374a:	f001 fe4f 	bl	80053ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800374e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003754:	2312      	movs	r3, #18
 8003756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800375c:	2303      	movs	r3, #3
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003760:	2304      	movs	r3, #4
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003764:	f107 031c 	add.w	r3, r7, #28
 8003768:	4619      	mov	r1, r3
 800376a:	480f      	ldr	r0, [pc, #60]	; (80037a8 <HAL_I2C_MspInit+0x13c>)
 800376c:	f001 fe3e 	bl	80053ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	4b08      	ldr	r3, [pc, #32]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	4a07      	ldr	r2, [pc, #28]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 800377a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800377e:	6413      	str	r3, [r2, #64]	; 0x40
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_I2C_MspInit+0x12c>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]
}
 800378c:	bf00      	nop
 800378e:	3730      	adds	r7, #48	; 0x30
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40005800 	.word	0x40005800
 8003798:	40023800 	.word	0x40023800
 800379c:	40020400 	.word	0x40020400
 80037a0:	40005c00 	.word	0x40005c00
 80037a4:	40020800 	.word	0x40020800
 80037a8:	40020000 	.word	0x40020000

080037ac <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0b      	ldr	r2, [pc, #44]	; (80037e8 <HAL_RNG_MspInit+0x3c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d10d      	bne.n	80037da <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_RNG_MspInit+0x40>)
 80037c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <HAL_RNG_MspInit+0x40>)
 80037c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037cc:	6353      	str	r3, [r2, #52]	; 0x34
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <HAL_RNG_MspInit+0x40>)
 80037d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	50060800 	.word	0x50060800
 80037ec:	40023800 	.word	0x40023800

080037f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 031c 	add.w	r3, r7, #28
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a5d      	ldr	r2, [pc, #372]	; (8003984 <HAL_SPI_MspInit+0x194>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d12c      	bne.n	800386c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	4b5c      	ldr	r3, [pc, #368]	; (8003988 <HAL_SPI_MspInit+0x198>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	4a5b      	ldr	r2, [pc, #364]	; (8003988 <HAL_SPI_MspInit+0x198>)
 800381c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003820:	6453      	str	r3, [r2, #68]	; 0x44
 8003822:	4b59      	ldr	r3, [pc, #356]	; (8003988 <HAL_SPI_MspInit+0x198>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	4b55      	ldr	r3, [pc, #340]	; (8003988 <HAL_SPI_MspInit+0x198>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4a54      	ldr	r2, [pc, #336]	; (8003988 <HAL_SPI_MspInit+0x198>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6313      	str	r3, [r2, #48]	; 0x30
 800383e:	4b52      	ldr	r3, [pc, #328]	; (8003988 <HAL_SPI_MspInit+0x198>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800384a:	23e0      	movs	r3, #224	; 0xe0
 800384c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003856:	2302      	movs	r3, #2
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800385a:	2305      	movs	r3, #5
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385e:	f107 031c 	add.w	r3, r7, #28
 8003862:	4619      	mov	r1, r3
 8003864:	4849      	ldr	r0, [pc, #292]	; (800398c <HAL_SPI_MspInit+0x19c>)
 8003866:	f001 fdc1 	bl	80053ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800386a:	e086      	b.n	800397a <HAL_SPI_MspInit+0x18a>
  else if(hspi->Instance==SPI2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a47      	ldr	r2, [pc, #284]	; (8003990 <HAL_SPI_MspInit+0x1a0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	f040 8081 	bne.w	800397a <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	4b42      	ldr	r3, [pc, #264]	; (8003988 <HAL_SPI_MspInit+0x198>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4a41      	ldr	r2, [pc, #260]	; (8003988 <HAL_SPI_MspInit+0x198>)
 8003882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003886:	6413      	str	r3, [r2, #64]	; 0x40
 8003888:	4b3f      	ldr	r3, [pc, #252]	; (8003988 <HAL_SPI_MspInit+0x198>)
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <HAL_SPI_MspInit+0x198>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	4a3a      	ldr	r2, [pc, #232]	; (8003988 <HAL_SPI_MspInit+0x198>)
 800389e:	f043 0304 	orr.w	r3, r3, #4
 80038a2:	6313      	str	r3, [r2, #48]	; 0x30
 80038a4:	4b38      	ldr	r3, [pc, #224]	; (8003988 <HAL_SPI_MspInit+0x198>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_SPI_MspInit+0x198>)
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	4a33      	ldr	r2, [pc, #204]	; (8003988 <HAL_SPI_MspInit+0x198>)
 80038ba:	f043 0302 	orr.w	r3, r3, #2
 80038be:	6313      	str	r3, [r2, #48]	; 0x30
 80038c0:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_SPI_MspInit+0x198>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038cc:	2304      	movs	r3, #4
 80038ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d0:	2302      	movs	r3, #2
 80038d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d8:	2303      	movs	r3, #3
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038dc:	2305      	movs	r3, #5
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038e0:	f107 031c 	add.w	r3, r7, #28
 80038e4:	4619      	mov	r1, r3
 80038e6:	482b      	ldr	r0, [pc, #172]	; (8003994 <HAL_SPI_MspInit+0x1a4>)
 80038e8:	f001 fd80 	bl	80053ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80038ec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80038f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f2:	2302      	movs	r3, #2
 80038f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fa:	2303      	movs	r3, #3
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038fe:	2305      	movs	r3, #5
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003902:	f107 031c 	add.w	r3, r7, #28
 8003906:	4619      	mov	r1, r3
 8003908:	4823      	ldr	r0, [pc, #140]	; (8003998 <HAL_SPI_MspInit+0x1a8>)
 800390a:	f001 fd6f 	bl	80053ec <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800390e:	4b23      	ldr	r3, [pc, #140]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 8003910:	4a23      	ldr	r2, [pc, #140]	; (80039a0 <HAL_SPI_MspInit+0x1b0>)
 8003912:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003914:	4b21      	ldr	r3, [pc, #132]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 8003916:	2200      	movs	r2, #0
 8003918:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 800391c:	2240      	movs	r2, #64	; 0x40
 800391e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003920:	4b1e      	ldr	r3, [pc, #120]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003926:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 8003928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800392c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 8003930:	2200      	movs	r2, #0
 8003932:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 8003936:	2200      	movs	r2, #0
 8003938:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 800393c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003940:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003942:	4b16      	ldr	r3, [pc, #88]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 8003944:	2200      	movs	r2, #0
 8003946:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 800394a:	2200      	movs	r2, #0
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800394e:	4813      	ldr	r0, [pc, #76]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 8003950:	f001 f8ec 	bl	8004b2c <HAL_DMA_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_SPI_MspInit+0x16e>
      Error_Handler();
 800395a:	f7ff fe11 	bl	8003580 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a0e      	ldr	r2, [pc, #56]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 8003962:	649a      	str	r2, [r3, #72]	; 0x48
 8003964:	4a0d      	ldr	r2, [pc, #52]	; (800399c <HAL_SPI_MspInit+0x1ac>)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	2105      	movs	r1, #5
 800396e:	2024      	movs	r0, #36	; 0x24
 8003970:	f001 f8a4 	bl	8004abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003974:	2024      	movs	r0, #36	; 0x24
 8003976:	f001 f8bd 	bl	8004af4 <HAL_NVIC_EnableIRQ>
}
 800397a:	bf00      	nop
 800397c:	3730      	adds	r7, #48	; 0x30
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40013000 	.word	0x40013000
 8003988:	40023800 	.word	0x40023800
 800398c:	40020000 	.word	0x40020000
 8003990:	40003800 	.word	0x40003800
 8003994:	40020800 	.word	0x40020800
 8003998:	40020400 	.word	0x40020400
 800399c:	2000d0b8 	.word	0x2000d0b8
 80039a0:	40026070 	.word	0x40026070

080039a4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <HAL_SPI_MspDeInit+0x68>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10a      	bne.n	80039cc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80039b6:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <HAL_SPI_MspDeInit+0x6c>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4a15      	ldr	r2, [pc, #84]	; (8003a10 <HAL_SPI_MspDeInit+0x6c>)
 80039bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039c0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 80039c2:	21e0      	movs	r1, #224	; 0xe0
 80039c4:	4813      	ldr	r0, [pc, #76]	; (8003a14 <HAL_SPI_MspDeInit+0x70>)
 80039c6:	f001 fead 	bl	8005724 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80039ca:	e01b      	b.n	8003a04 <HAL_SPI_MspDeInit+0x60>
  else if(hspi->Instance==SPI2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <HAL_SPI_MspDeInit+0x74>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d116      	bne.n	8003a04 <HAL_SPI_MspDeInit+0x60>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <HAL_SPI_MspDeInit+0x6c>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <HAL_SPI_MspDeInit+0x6c>)
 80039dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039e0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 80039e2:	2104      	movs	r1, #4
 80039e4:	480d      	ldr	r0, [pc, #52]	; (8003a1c <HAL_SPI_MspDeInit+0x78>)
 80039e6:	f001 fe9d 	bl	8005724 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 80039ea:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80039ee:	480c      	ldr	r0, [pc, #48]	; (8003a20 <HAL_SPI_MspDeInit+0x7c>)
 80039f0:	f001 fe98 	bl	8005724 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 f945 	bl	8004c88 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 80039fe:	2024      	movs	r0, #36	; 0x24
 8003a00:	f001 f886 	bl	8004b10 <HAL_NVIC_DisableIRQ>
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40013000 	.word	0x40013000
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40020000 	.word	0x40020000
 8003a18:	40003800 	.word	0x40003800
 8003a1c:	40020800 	.word	0x40020800
 8003a20:	40020400 	.word	0x40020400

08003a24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d134      	bne.n	8003ab0 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <HAL_TIM_Encoder_MspInit+0x98>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <HAL_TIM_Encoder_MspInit+0x98>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	6453      	str	r3, [r2, #68]	; 0x44
 8003a56:	4b19      	ldr	r3, [pc, #100]	; (8003abc <HAL_TIM_Encoder_MspInit+0x98>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_TIM_Encoder_MspInit+0x98>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	4a14      	ldr	r2, [pc, #80]	; (8003abc <HAL_TIM_Encoder_MspInit+0x98>)
 8003a6c:	f043 0310 	orr.w	r3, r3, #16
 8003a70:	6313      	str	r3, [r2, #48]	; 0x30
 8003a72:	4b12      	ldr	r3, [pc, #72]	; (8003abc <HAL_TIM_Encoder_MspInit+0x98>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003a7e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a84:	2302      	movs	r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a90:	2301      	movs	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003a9c:	f001 fca6 	bl	80053ec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2105      	movs	r1, #5
 8003aa4:	2019      	movs	r0, #25
 8003aa6:	f001 f809 	bl	8004abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003aaa:	2019      	movs	r0, #25
 8003aac:	f001 f822 	bl	8004af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ab0:	bf00      	nop
 8003ab2:	3728      	adds	r7, #40	; 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40021000 	.word	0x40021000

08003ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <HAL_TIM_Base_MspInit+0x80>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d116      	bne.n	8003b04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_TIM_Base_MspInit+0x84>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_TIM_Base_MspInit+0x84>)
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <HAL_TIM_Base_MspInit+0x84>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2105      	movs	r1, #5
 8003af6:	201d      	movs	r0, #29
 8003af8:	f000 ffe0 	bl	8004abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003afc:	201d      	movs	r0, #29
 8003afe:	f000 fff9 	bl	8004af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003b02:	e01a      	b.n	8003b3a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a10      	ldr	r2, [pc, #64]	; (8003b4c <HAL_TIM_Base_MspInit+0x88>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d115      	bne.n	8003b3a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <HAL_TIM_Base_MspInit+0x84>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <HAL_TIM_Base_MspInit+0x84>)
 8003b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_TIM_Base_MspInit+0x84>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2105      	movs	r1, #5
 8003b2e:	2019      	movs	r0, #25
 8003b30:	f000 ffc4 	bl	8004abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b34:	2019      	movs	r0, #25
 8003b36:	f000 ffdd 	bl	8004af4 <HAL_NVIC_EnableIRQ>
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40014400 	.word	0x40014400

08003b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08c      	sub	sp, #48	; 0x30
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8003b60:	2200      	movs	r2, #0
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	202d      	movs	r0, #45	; 0x2d
 8003b66:	f000 ffa9 	bl	8004abc <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003b6a:	202d      	movs	r0, #45	; 0x2d
 8003b6c:	f000 ffc2 	bl	8004af4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	4b1f      	ldr	r3, [pc, #124]	; (8003bf4 <HAL_InitTick+0xa4>)
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <HAL_InitTick+0xa4>)
 8003b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b80:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <HAL_InitTick+0xa4>)
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b8c:	f107 0210 	add.w	r2, r7, #16
 8003b90:	f107 0314 	add.w	r3, r7, #20
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f004 fe14 	bl	80087c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003b9c:	f004 fdfe 	bl	800879c <HAL_RCC_GetPCLK1Freq>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <HAL_InitTick+0xa8>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	0c9b      	lsrs	r3, r3, #18
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_InitTick+0xac>)
 8003bb6:	4a12      	ldr	r2, [pc, #72]	; (8003c00 <HAL_InitTick+0xb0>)
 8003bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <HAL_InitTick+0xac>)
 8003bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bc0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003bc2:	4a0e      	ldr	r2, [pc, #56]	; (8003bfc <HAL_InitTick+0xac>)
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <HAL_InitTick+0xac>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_InitTick+0xac>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8003bd4:	4809      	ldr	r0, [pc, #36]	; (8003bfc <HAL_InitTick+0xac>)
 8003bd6:	f005 fba9 	bl	800932c <HAL_TIM_Base_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d104      	bne.n	8003bea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8003be0:	4806      	ldr	r0, [pc, #24]	; (8003bfc <HAL_InitTick+0xac>)
 8003be2:	f005 fbf3 	bl	80093cc <HAL_TIM_Base_Start_IT>
 8003be6:	4603      	mov	r3, r0
 8003be8:	e000      	b.n	8003bec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3730      	adds	r7, #48	; 0x30
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	431bde83 	.word	0x431bde83
 8003bfc:	2000d3dc 	.word	0x2000d3dc
 8003c00:	40002000 	.word	0x40002000

08003c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c08:	e7fe      	b.n	8003c08 <NMI_Handler+0x4>

08003c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c0e:	e7fe      	b.n	8003c0e <HardFault_Handler+0x4>

08003c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c14:	e7fe      	b.n	8003c14 <MemManage_Handler+0x4>

08003c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c1a:	e7fe      	b.n	8003c1a <BusFault_Handler+0x4>

08003c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c20:	e7fe      	b.n	8003c20 <UsageFault_Handler+0x4>

08003c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <DMA1_Stream4_IRQHandler+0x10>)
 8003c36:	f001 f96f 	bl	8004f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000d0b8 	.word	0x2000d0b8

08003c44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c48:	4803      	ldr	r0, [pc, #12]	; (8003c58 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003c4a:	f005 fd63 	bl	8009714 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003c4e:	4803      	ldr	r0, [pc, #12]	; (8003c5c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003c50:	f005 fd60 	bl	8009714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c54:	bf00      	nop
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	2000cb40 	.word	0x2000cb40
 8003c5c:	2000778c 	.word	0x2000778c

08003c60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <TIM3_IRQHandler+0x10>)
 8003c66:	f005 fd55 	bl	8009714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000aaa0 	.word	0x2000aaa0

08003c74 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <SPI2_IRQHandler+0x10>)
 8003c7a:	f005 f8e3 	bl	8008e44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	200076e4 	.word	0x200076e4

08003c88 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003c8e:	f005 fd41 	bl	8009714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	2000d3dc 	.word	0x2000d3dc

08003c9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <OTG_FS_IRQHandler+0x10>)
 8003ca2:	f003 f8fc 	bl	8006e9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	2000eb38 	.word	0x2000eb38

08003cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
	return 1;
 8003cb4:	2301      	movs	r3, #1
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <_kill>:

int _kill(int pid, int sig)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003cca:	f00d f923 	bl	8010f14 <__errno>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2216      	movs	r2, #22
 8003cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <_exit>:

void _exit (int status)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ffe7 	bl	8003cc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cf2:	e7fe      	b.n	8003cf2 <_exit+0x12>

08003cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e00a      	b.n	8003d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d06:	f3af 8000 	nop.w
 8003d0a:	4601      	mov	r1, r0
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	60ba      	str	r2, [r7, #8]
 8003d12:	b2ca      	uxtb	r2, r1
 8003d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	dbf0      	blt.n	8003d06 <_read+0x12>
	}

return len;
 8003d24:	687b      	ldr	r3, [r7, #4]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b086      	sub	sp, #24
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	e009      	b.n	8003d54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	60ba      	str	r2, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	3301      	adds	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	dbf1      	blt.n	8003d40 <_write+0x12>
	}
	return len;
 8003d5c:	687b      	ldr	r3, [r7, #4]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <_close>:

int _close(int file)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <_isatty>:

int _isatty(int file)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
	return 1;
 8003da6:	2301      	movs	r3, #1
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dd8:	4a14      	ldr	r2, [pc, #80]	; (8003e2c <_sbrk+0x5c>)
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <_sbrk+0x60>)
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003de4:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <_sbrk+0x64>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dec:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <_sbrk+0x64>)
 8003dee:	4a12      	ldr	r2, [pc, #72]	; (8003e38 <_sbrk+0x68>)
 8003df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <_sbrk+0x64>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d207      	bcs.n	8003e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e00:	f00d f888 	bl	8010f14 <__errno>
 8003e04:	4603      	mov	r3, r0
 8003e06:	220c      	movs	r2, #12
 8003e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e0e:	e009      	b.n	8003e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <_sbrk+0x64>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <_sbrk+0x64>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <_sbrk+0x64>)
 8003e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20020000 	.word	0x20020000
 8003e30:	00000900 	.word	0x00000900
 8003e34:	200027a0 	.word	0x200027a0
 8003e38:	2000ef50 	.word	0x2000ef50

08003e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <SystemInit+0x20>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <SystemInit+0x20>)
 8003e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	71bb      	strb	r3, [r7, #6]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	db3b      	blt.n	8003ef2 <draw_pixel+0x92>
 8003e7a:	79bb      	ldrb	r3, [r7, #6]
 8003e7c:	2b1f      	cmp	r3, #31
 8003e7e:	d838      	bhi.n	8003ef2 <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 8003e84:	79bb      	ldrb	r3, [r7, #6]
 8003e86:	08db      	lsrs	r3, r3, #3
 8003e88:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	79bb      	ldrb	r3, [r7, #6]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	737b      	strb	r3, [r7, #13]
		if(color)
 8003e98:	797b      	ldrb	r3, [r7, #5]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d012      	beq.n	8003ec4 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8003e9e:	7bba      	ldrb	r2, [r7, #14]
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	4917      	ldr	r1, [pc, #92]	; (8003f00 <draw_pixel+0xa0>)
 8003ea4:	01d2      	lsls	r2, r2, #7
 8003ea6:	440a      	add	r2, r1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	7818      	ldrb	r0, [r3, #0]
 8003eac:	7bba      	ldrb	r2, [r7, #14]
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	7b79      	ldrb	r1, [r7, #13]
 8003eb2:	4301      	orrs	r1, r0
 8003eb4:	b2c8      	uxtb	r0, r1
 8003eb6:	4912      	ldr	r1, [pc, #72]	; (8003f00 <draw_pixel+0xa0>)
 8003eb8:	01d2      	lsls	r2, r2, #7
 8003eba:	440a      	add	r2, r1
 8003ebc:	4413      	add	r3, r2
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 8003ec2:	e016      	b.n	8003ef2 <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 8003ec4:	7bba      	ldrb	r2, [r7, #14]
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	490d      	ldr	r1, [pc, #52]	; (8003f00 <draw_pixel+0xa0>)
 8003eca:	01d2      	lsls	r2, r2, #7
 8003ecc:	440a      	add	r2, r1
 8003ece:	4413      	add	r3, r2
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b25a      	sxtb	r2, r3
 8003ed4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	4013      	ands	r3, r2
 8003ede:	b259      	sxtb	r1, r3
 8003ee0:	7bba      	ldrb	r2, [r7, #14]
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	b2c8      	uxtb	r0, r1
 8003ee6:	4906      	ldr	r1, [pc, #24]	; (8003f00 <draw_pixel+0xa0>)
 8003ee8:	01d2      	lsls	r2, r2, #7
 8003eea:	440a      	add	r2, r1
 8003eec:	4413      	add	r3, r2
 8003eee:	4602      	mov	r2, r0
 8003ef0:	701a      	strb	r2, [r3, #0]
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	2000d424 	.word	0x2000d424

08003f04 <clear>:
		for(j=y0;j<y1;j++)
			invert_pixel(i,j);
}

void clear(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i=0;i<4;i++)
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	71fb      	strb	r3, [r7, #7]
 8003f0e:	e014      	b.n	8003f3a <clear+0x36>
		for(j=0;j<128;j++)
 8003f10:	2300      	movs	r3, #0
 8003f12:	71bb      	strb	r3, [r7, #6]
 8003f14:	e00a      	b.n	8003f2c <clear+0x28>
			gddram[i][j]=0x00;
 8003f16:	79fa      	ldrb	r2, [r7, #7]
 8003f18:	79bb      	ldrb	r3, [r7, #6]
 8003f1a:	490d      	ldr	r1, [pc, #52]	; (8003f50 <clear+0x4c>)
 8003f1c:	01d2      	lsls	r2, r2, #7
 8003f1e:	440a      	add	r2, r1
 8003f20:	4413      	add	r3, r2
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
		for(j=0;j<128;j++)
 8003f26:	79bb      	ldrb	r3, [r7, #6]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	71bb      	strb	r3, [r7, #6]
 8003f2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	daf0      	bge.n	8003f16 <clear+0x12>
	for(i=0;i<4;i++)
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	3301      	adds	r3, #1
 8003f38:	71fb      	strb	r3, [r7, #7]
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d9e7      	bls.n	8003f10 <clear+0xc>
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	2000d424 	.word	0x2000d424

08003f54 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	4623      	mov	r3, r4
 8003f64:	71fb      	strb	r3, [r7, #7]
 8003f66:	4603      	mov	r3, r0
 8003f68:	71bb      	strb	r3, [r7, #6]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	717b      	strb	r3, [r7, #5]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	75fb      	strb	r3, [r7, #23]
 8003f7a:	e04d      	b.n	8004018 <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	75bb      	strb	r3, [r7, #22]
 8003f80:	e042      	b.n	8004008 <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
 8003f84:	08db      	lsrs	r3, r3, #3
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	7dbb      	ldrb	r3, [r7, #22]
 8003f8a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003f8e:	fb11 f303 	smulbb	r3, r1, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	2201      	movs	r2, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 8003fb2:	7bba      	ldrb	r2, [r7, #14]
 8003fb4:	7b7b      	ldrb	r3, [r7, #13]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00f      	beq.n	8003fde <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 8003fbe:	79fa      	ldrb	r2, [r7, #7]
 8003fc0:	797b      	ldrb	r3, [r7, #5]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	4413      	add	r3, r2
 8003fca:	b2d8      	uxtb	r0, r3
 8003fcc:	7dba      	ldrb	r2, [r7, #22]
 8003fce:	79bb      	ldrb	r3, [r7, #6]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f7ff ff42 	bl	8003e60 <draw_pixel>
 8003fdc:	e00e      	b.n	8003ffc <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8003fde:	79fa      	ldrb	r2, [r7, #7]
 8003fe0:	797b      	ldrb	r3, [r7, #5]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
 8003fe8:	4413      	add	r3, r2
 8003fea:	b2d8      	uxtb	r0, r3
 8003fec:	7dba      	ldrb	r2, [r7, #22]
 8003fee:	79bb      	ldrb	r3, [r7, #6]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f7ff ff32 	bl	8003e60 <draw_pixel>
		for (y=0; y<height; y++)
 8003ffc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	3301      	adds	r3, #1
 8004004:	b2db      	uxtb	r3, r3
 8004006:	75bb      	strb	r3, [r7, #22]
 8004008:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800400c:	793b      	ldrb	r3, [r7, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	dbb7      	blt.n	8003f82 <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	3301      	adds	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
 8004018:	7dfa      	ldrb	r2, [r7, #23]
 800401a:	797b      	ldrb	r3, [r7, #5]
 800401c:	429a      	cmp	r2, r3
 800401e:	d3ad      	bcc.n	8003f7c <graphics_Glyph+0x28>
		}
	}
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	bd90      	pop	{r4, r7, pc}
	...

0800402c <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 800402c:	b590      	push	{r4, r7, lr}
 800402e:	b089      	sub	sp, #36	; 0x24
 8004030:	af02      	add	r7, sp, #8
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4603      	mov	r3, r0
 8004036:	71fb      	strb	r3, [r7, #7]
 8004038:	460b      	mov	r3, r1
 800403a:	71bb      	strb	r3, [r7, #6]
 800403c:	4613      	mov	r3, r2
 800403e:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 8004044:	e081      	b.n	800414a <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 800404c:	797a      	ldrb	r2, [r7, #5]
 800404e:	4944      	ldr	r1, [pc, #272]	; (8004160 <graphics_text+0x134>)
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	3310      	adds	r3, #16
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	7dba      	ldrb	r2, [r7, #22]
 8004060:	429a      	cmp	r2, r3
 8004062:	d30b      	bcc.n	800407c <graphics_text+0x50>
 8004064:	797a      	ldrb	r2, [r7, #5]
 8004066:	493e      	ldr	r1, [pc, #248]	; (8004160 <graphics_text+0x134>)
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	3311      	adds	r3, #17
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	7dba      	ldrb	r2, [r7, #22]
 8004078:	429a      	cmp	r2, r3
 800407a:	d909      	bls.n	8004090 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 800407c:	797a      	ldrb	r2, [r7, #5]
 800407e:	4938      	ldr	r1, [pc, #224]	; (8004160 <graphics_text+0x134>)
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	3312      	adds	r3, #18
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 8004090:	797a      	ldrb	r2, [r7, #5]
 8004092:	4933      	ldr	r1, [pc, #204]	; (8004160 <graphics_text+0x134>)
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	3310      	adds	r3, #16
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	7dba      	ldrb	r2, [r7, #22]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 80040a8:	797a      	ldrb	r2, [r7, #5]
 80040aa:	492d      	ldr	r1, [pc, #180]	; (8004160 <graphics_text+0x134>)
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3308      	adds	r3, #8
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 80040bc:	7d7b      	ldrb	r3, [r7, #21]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10c      	bne.n	80040dc <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 80040c2:	797a      	ldrb	r2, [r7, #5]
 80040c4:	4926      	ldr	r1, [pc, #152]	; (8004160 <graphics_text+0x134>)
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	330c      	adds	r3, #12
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	7dbb      	ldrb	r3, [r7, #22]
 80040d6:	4413      	add	r3, r2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 80040dc:	797a      	ldrb	r2, [r7, #5]
 80040de:	4920      	ldr	r1, [pc, #128]	; (8004160 <graphics_text+0x134>)
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	3301      	adds	r3, #1
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 80040f0:	797a      	ldrb	r2, [r7, #5]
 80040f2:	491b      	ldr	r1, [pc, #108]	; (8004160 <graphics_text+0x134>)
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 8004102:	797a      	ldrb	r2, [r7, #5]
 8004104:	4916      	ldr	r1, [pc, #88]	; (8004160 <graphics_text+0x134>)
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	3304      	adds	r3, #4
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	7dbb      	ldrb	r3, [r7, #22]
 8004116:	7cf9      	ldrb	r1, [r7, #19]
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	7d39      	ldrb	r1, [r7, #20]
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]


		x+=width;
 8004126:	7dfa      	ldrb	r2, [r7, #23]
 8004128:	7d7b      	ldrb	r3, [r7, #21]
 800412a:	4413      	add	r3, r2
 800412c:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 800412e:	7d3c      	ldrb	r4, [r7, #20]
 8004130:	7d7a      	ldrb	r2, [r7, #21]
 8004132:	79b9      	ldrb	r1, [r7, #6]
 8004134:	7df8      	ldrb	r0, [r7, #23]
 8004136:	7cfb      	ldrb	r3, [r7, #19]
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	4623      	mov	r3, r4
 8004140:	f7ff ff08 	bl	8003f54 <graphics_Glyph>
		str++;								/* point to next character in string */
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	3301      	adds	r3, #1
 8004148:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f47f af79 	bne.w	8004046 <graphics_text+0x1a>
	}

}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd90      	pop	{r4, r7, pc}
 800415e:	bf00      	nop
 8004160:	08017eac 	.word	0x08017eac

08004164 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af02      	add	r7, sp, #8
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 800416e:	2300      	movs	r3, #0
 8004170:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 8004176:	f107 020c 	add.w	r2, r7, #12
 800417a:	2332      	movs	r3, #50	; 0x32
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2302      	movs	r3, #2
 8004180:	2178      	movs	r1, #120	; 0x78
 8004182:	4803      	ldr	r0, [pc, #12]	; (8004190 <ssd1306_command+0x2c>)
 8004184:	f001 fd40 	bl	8005c08 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20007640 	.word	0x20007640

08004194 <oled_update>:

void oled_update(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 800419a:	2021      	movs	r0, #33	; 0x21
 800419c:	f7ff ffe2 	bl	8004164 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 80041a0:	2000      	movs	r0, #0
 80041a2:	f7ff ffdf 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 80041a6:	207f      	movs	r0, #127	; 0x7f
 80041a8:	f7ff ffdc 	bl	8004164 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 80041ac:	2022      	movs	r0, #34	; 0x22
 80041ae:	f7ff ffd9 	bl	8004164 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 80041b2:	2000      	movs	r0, #0
 80041b4:	f7ff ffd6 	bl	8004164 <ssd1306_command>
  ssd1306_command(3); // Page end address
 80041b8:	2003      	movs	r0, #3
 80041ba:	f7ff ffd3 	bl	8004164 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 80041be:	2340      	movs	r3, #64	; 0x40
 80041c0:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	82fb      	strh	r3, [r7, #22]
 80041c6:	e02d      	b.n	8004224 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 80041c8:	2300      	movs	r3, #0
 80041ca:	757b      	strb	r3, [r7, #21]
 80041cc:	e024      	b.n	8004218 <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 80041ce:	2301      	movs	r3, #1
 80041d0:	753b      	strb	r3, [r7, #20]
 80041d2:	e012      	b.n	80041fa <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 80041d4:	8af9      	ldrh	r1, [r7, #22]
 80041d6:	7d7a      	ldrb	r2, [r7, #21]
 80041d8:	7d3b      	ldrb	r3, [r7, #20]
 80041da:	4413      	add	r3, r2
 80041dc:	1e5a      	subs	r2, r3, #1
 80041de:	7d3b      	ldrb	r3, [r7, #20]
 80041e0:	4814      	ldr	r0, [pc, #80]	; (8004234 <oled_update+0xa0>)
 80041e2:	01c9      	lsls	r1, r1, #7
 80041e4:	4401      	add	r1, r0
 80041e6:	440a      	add	r2, r1
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	f107 0118 	add.w	r1, r7, #24
 80041ee:	440b      	add	r3, r1
 80041f0:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 80041f4:	7d3b      	ldrb	r3, [r7, #20]
 80041f6:	3301      	adds	r3, #1
 80041f8:	753b      	strb	r3, [r7, #20]
 80041fa:	7d3b      	ldrb	r3, [r7, #20]
 80041fc:	2b10      	cmp	r3, #16
 80041fe:	d9e9      	bls.n	80041d4 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 8004200:	463a      	mov	r2, r7
 8004202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2311      	movs	r3, #17
 800420a:	2178      	movs	r1, #120	; 0x78
 800420c:	480a      	ldr	r0, [pc, #40]	; (8004238 <oled_update+0xa4>)
 800420e:	f001 fcfb 	bl	8005c08 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 8004212:	7d7b      	ldrb	r3, [r7, #21]
 8004214:	3310      	adds	r3, #16
 8004216:	757b      	strb	r3, [r7, #21]
 8004218:	7d7b      	ldrb	r3, [r7, #21]
 800421a:	2b7e      	cmp	r3, #126	; 0x7e
 800421c:	d9d7      	bls.n	80041ce <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 800421e:	8afb      	ldrh	r3, [r7, #22]
 8004220:	3301      	adds	r3, #1
 8004222:	82fb      	strh	r3, [r7, #22]
 8004224:	8afb      	ldrh	r3, [r7, #22]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d9ce      	bls.n	80041c8 <oled_update+0x34>
		}
	}

}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	2000d424 	.word	0x2000d424
 8004238:	20007640 	.word	0x20007640

0800423c <oled_init>:

void oled_init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8004242:	20ae      	movs	r0, #174	; 0xae
 8004244:	f7ff ff8e 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8004248:	20d5      	movs	r0, #213	; 0xd5
 800424a:	f7ff ff8b 	bl	8004164 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 800424e:	2080      	movs	r0, #128	; 0x80
 8004250:	f7ff ff88 	bl	8004164 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8004254:	20a8      	movs	r0, #168	; 0xa8
 8004256:	f7ff ff85 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 800425a:	201f      	movs	r0, #31
 800425c:	f7ff ff82 	bl	8004164 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8004260:	20d3      	movs	r0, #211	; 0xd3
 8004262:	f7ff ff7f 	bl	8004164 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 8004266:	2000      	movs	r0, #0
 8004268:	f7ff ff7c 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 800426c:	2040      	movs	r0, #64	; 0x40
 800426e:	f7ff ff79 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8004272:	208d      	movs	r0, #141	; 0x8d
 8004274:	f7ff ff76 	bl	8004164 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 8004278:	2014      	movs	r0, #20
 800427a:	f7ff ff73 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 800427e:	2020      	movs	r0, #32
 8004280:	f7ff ff70 	bl	8004164 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8004284:	2000      	movs	r0, #0
 8004286:	f7ff ff6d 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 800428a:	20a1      	movs	r0, #161	; 0xa1
 800428c:	f7ff ff6a 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 8004290:	20c8      	movs	r0, #200	; 0xc8
 8004292:	f7ff ff67 	bl	8004164 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 8004296:	20da      	movs	r0, #218	; 0xda
 8004298:	f7ff ff64 	bl	8004164 <ssd1306_command>
  ssd1306_command(0x02);
 800429c:	2002      	movs	r0, #2
 800429e:	f7ff ff61 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 80042a2:	2081      	movs	r0, #129	; 0x81
 80042a4:	f7ff ff5e 	bl	8004164 <ssd1306_command>
  ssd1306_command(0x8F);
 80042a8:	208f      	movs	r0, #143	; 0x8f
 80042aa:	f7ff ff5b 	bl	8004164 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 80042ae:	20d9      	movs	r0, #217	; 0xd9
 80042b0:	f7ff ff58 	bl	8004164 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 80042b4:	20f1      	movs	r0, #241	; 0xf1
 80042b6:	f7ff ff55 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 80042ba:	20db      	movs	r0, #219	; 0xdb
 80042bc:	f7ff ff52 	bl	8004164 <ssd1306_command>
  ssd1306_command(0x40);
 80042c0:	2040      	movs	r0, #64	; 0x40
 80042c2:	f7ff ff4f 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 80042c6:	20a4      	movs	r0, #164	; 0xa4
 80042c8:	f7ff ff4c 	bl	8004164 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 80042cc:	20a6      	movs	r0, #166	; 0xa6
 80042ce:	f7ff ff49 	bl	8004164 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 80042d2:	202e      	movs	r0, #46	; 0x2e
 80042d4:	f7ff ff46 	bl	8004164 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 80042d8:	20af      	movs	r0, #175	; 0xaf
 80042da:	f7ff ff43 	bl	8004164 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	e013      	b.n	800430c <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 80042e4:	2300      	movs	r3, #0
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	e00a      	b.n	8004300 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 80042ea:	4a0c      	ldr	r2, [pc, #48]	; (800431c <oled_init+0xe0>)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	01db      	lsls	r3, r3, #7
 80042f0:	441a      	add	r2, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b7f      	cmp	r3, #127	; 0x7f
 8004304:	ddf1      	ble.n	80042ea <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3301      	adds	r3, #1
 800430a:	607b      	str	r3, [r7, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b03      	cmp	r3, #3
 8004310:	dde8      	ble.n	80042e4 <oled_init+0xa8>
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	2000d424 	.word	0x2000d424

08004320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004358 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004324:	480d      	ldr	r0, [pc, #52]	; (800435c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004326:	490e      	ldr	r1, [pc, #56]	; (8004360 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004328:	4a0e      	ldr	r2, [pc, #56]	; (8004364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800432a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800432c:	e002      	b.n	8004334 <LoopCopyDataInit>

0800432e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800432e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004332:	3304      	adds	r3, #4

08004334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004338:	d3f9      	bcc.n	800432e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800433a:	4a0b      	ldr	r2, [pc, #44]	; (8004368 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800433c:	4c0b      	ldr	r4, [pc, #44]	; (800436c <LoopFillZerobss+0x26>)
  movs r3, #0
 800433e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004340:	e001      	b.n	8004346 <LoopFillZerobss>

08004342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004344:	3204      	adds	r2, #4

08004346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004348:	d3fb      	bcc.n	8004342 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800434a:	f7ff fd77 	bl	8003e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800434e:	f00c fedd 	bl	801110c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004352:	f7fd fe8b 	bl	800206c <main>
  bx  lr    
 8004356:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800435c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004360:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 8004364:	0801a734 	.word	0x0801a734
  ldr r2, =_sbss
 8004368:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 800436c:	2000ef50 	.word	0x2000ef50

08004370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004370:	e7fe      	b.n	8004370 <ADC_IRQHandler>
	...

08004374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004378:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <HAL_Init+0x40>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a0d      	ldr	r2, [pc, #52]	; (80043b4 <HAL_Init+0x40>)
 800437e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_Init+0x40>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <HAL_Init+0x40>)
 800438a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800438e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004390:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <HAL_Init+0x40>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a07      	ldr	r2, [pc, #28]	; (80043b4 <HAL_Init+0x40>)
 8004396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800439c:	2003      	movs	r0, #3
 800439e:	f000 fb82 	bl	8004aa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043a2:	200f      	movs	r0, #15
 80043a4:	f7ff fbd4 	bl	8003b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043a8:	f7ff f8f0 	bl	800358c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40023c00 	.word	0x40023c00

080043b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_IncTick+0x20>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_IncTick+0x24>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	4a04      	ldr	r2, [pc, #16]	; (80043dc <HAL_IncTick+0x24>)
 80043ca:	6013      	str	r3, [r2, #0]
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000034 	.word	0x20000034
 80043dc:	2000d624 	.word	0x2000d624

080043e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return uwTick;
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_GetTick+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	2000d624 	.word	0x2000d624

080043f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004400:	f7ff ffee 	bl	80043e0 <HAL_GetTick>
 8004404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004410:	d005      	beq.n	800441e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_Delay+0x44>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800441e:	bf00      	nop
 8004420:	f7ff ffde 	bl	80043e0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	429a      	cmp	r2, r3
 800442e:	d8f7      	bhi.n	8004420 <HAL_Delay+0x28>
  {
  }
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000034 	.word	0x20000034

08004440 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e033      	b.n	80044be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff f8c0 	bl	80035e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	d118      	bne.n	80044b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004486:	f023 0302 	bic.w	r3, r3, #2
 800448a:	f043 0202 	orr.w	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f93a 	bl	800470c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	f043 0201 	orr.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40
 80044ae:	e001      	b.n	80044b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x1c>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e105      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x228>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b09      	cmp	r3, #9
 80044f2:	d925      	bls.n	8004540 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68d9      	ldr	r1, [r3, #12]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	4613      	mov	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4413      	add	r3, r2
 8004508:	3b1e      	subs	r3, #30
 800450a:	2207      	movs	r2, #7
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43da      	mvns	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	400a      	ands	r2, r1
 8004518:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68d9      	ldr	r1, [r3, #12]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	b29b      	uxth	r3, r3
 800452a:	4618      	mov	r0, r3
 800452c:	4603      	mov	r3, r0
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4403      	add	r3, r0
 8004532:	3b1e      	subs	r3, #30
 8004534:	409a      	lsls	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	e022      	b.n	8004586 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6919      	ldr	r1, [r3, #16]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	2207      	movs	r2, #7
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43da      	mvns	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	400a      	ands	r2, r1
 8004562:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6919      	ldr	r1, [r3, #16]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	4618      	mov	r0, r3
 8004576:	4603      	mov	r3, r0
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4403      	add	r3, r0
 800457c:	409a      	lsls	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b06      	cmp	r3, #6
 800458c:	d824      	bhi.n	80045d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	3b05      	subs	r3, #5
 80045a0:	221f      	movs	r2, #31
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43da      	mvns	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	400a      	ands	r2, r1
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	4618      	mov	r0, r3
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	3b05      	subs	r3, #5
 80045ca:	fa00 f203 	lsl.w	r2, r0, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	635a      	str	r2, [r3, #52]	; 0x34
 80045d6:	e04c      	b.n	8004672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	d824      	bhi.n	800462a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	3b23      	subs	r3, #35	; 0x23
 80045f2:	221f      	movs	r2, #31
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43da      	mvns	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	400a      	ands	r2, r1
 8004600:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	4618      	mov	r0, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	3b23      	subs	r3, #35	; 0x23
 800461c:	fa00 f203 	lsl.w	r2, r0, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
 8004628:	e023      	b.n	8004672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	3b41      	subs	r3, #65	; 0x41
 800463c:	221f      	movs	r2, #31
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43da      	mvns	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	400a      	ands	r2, r1
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	4618      	mov	r0, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	3b41      	subs	r3, #65	; 0x41
 8004666:	fa00 f203 	lsl.w	r2, r0, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004672:	4b22      	ldr	r3, [pc, #136]	; (80046fc <HAL_ADC_ConfigChannel+0x234>)
 8004674:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a21      	ldr	r2, [pc, #132]	; (8004700 <HAL_ADC_ConfigChannel+0x238>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d109      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x1cc>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b12      	cmp	r3, #18
 8004686:	d105      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a19      	ldr	r2, [pc, #100]	; (8004700 <HAL_ADC_ConfigChannel+0x238>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d123      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x21e>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b10      	cmp	r3, #16
 80046a4:	d003      	beq.n	80046ae <HAL_ADC_ConfigChannel+0x1e6>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b11      	cmp	r3, #17
 80046ac:	d11b      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d111      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_ADC_ConfigChannel+0x23c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a10      	ldr	r2, [pc, #64]	; (8004708 <HAL_ADC_ConfigChannel+0x240>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	0c9a      	lsrs	r2, r3, #18
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046d8:	e002      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	3b01      	subs	r3, #1
 80046de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f9      	bne.n	80046da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40012300 	.word	0x40012300
 8004700:	40012000 	.word	0x40012000
 8004704:	2000002c 	.word	0x2000002c
 8004708:	431bde83 	.word	0x431bde83

0800470c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004714:	4b79      	ldr	r3, [pc, #484]	; (80048fc <ADC_Init+0x1f0>)
 8004716:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	431a      	orrs	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6859      	ldr	r1, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	021a      	lsls	r2, r3, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6859      	ldr	r1, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6899      	ldr	r1, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	4a58      	ldr	r2, [pc, #352]	; (8004900 <ADC_Init+0x1f4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d022      	beq.n	80047ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6899      	ldr	r1, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6899      	ldr	r1, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	e00f      	b.n	800480a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004808:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0202 	bic.w	r2, r2, #2
 8004818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6899      	ldr	r1, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	7e1b      	ldrb	r3, [r3, #24]
 8004824:	005a      	lsls	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01b      	beq.n	8004870 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004846:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004856:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6859      	ldr	r1, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	3b01      	subs	r3, #1
 8004864:	035a      	lsls	r2, r3, #13
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	e007      	b.n	8004880 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800487e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	3b01      	subs	r3, #1
 800489c:	051a      	lsls	r2, r3, #20
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6899      	ldr	r1, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048c2:	025a      	lsls	r2, r3, #9
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6899      	ldr	r1, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	029a      	lsls	r2, r3, #10
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40012300 	.word	0x40012300
 8004900:	0f000001 	.word	0x0f000001

08004904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <__NVIC_SetPriorityGrouping+0x44>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004920:	4013      	ands	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800492c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004936:	4a04      	ldr	r2, [pc, #16]	; (8004948 <__NVIC_SetPriorityGrouping+0x44>)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	60d3      	str	r3, [r2, #12]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	e000ed00 	.word	0xe000ed00

0800494c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <__NVIC_GetPriorityGrouping+0x18>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	0a1b      	lsrs	r3, r3, #8
 8004956:	f003 0307 	and.w	r3, r3, #7
}
 800495a:	4618      	mov	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000ed00 	.word	0xe000ed00

08004968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004976:	2b00      	cmp	r3, #0
 8004978:	db0b      	blt.n	8004992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	f003 021f 	and.w	r2, r3, #31
 8004980:	4907      	ldr	r1, [pc, #28]	; (80049a0 <__NVIC_EnableIRQ+0x38>)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	2001      	movs	r0, #1
 800498a:	fa00 f202 	lsl.w	r2, r0, r2
 800498e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000e100 	.word	0xe000e100

080049a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	db12      	blt.n	80049dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	f003 021f 	and.w	r2, r3, #31
 80049bc:	490a      	ldr	r1, [pc, #40]	; (80049e8 <__NVIC_DisableIRQ+0x44>)
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	2001      	movs	r0, #1
 80049c6:	fa00 f202 	lsl.w	r2, r0, r2
 80049ca:	3320      	adds	r3, #32
 80049cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80049d0:	f3bf 8f4f 	dsb	sy
}
 80049d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049d6:	f3bf 8f6f 	isb	sy
}
 80049da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000e100 	.word	0xe000e100

080049ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	6039      	str	r1, [r7, #0]
 80049f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	db0a      	blt.n	8004a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	490c      	ldr	r1, [pc, #48]	; (8004a38 <__NVIC_SetPriority+0x4c>)
 8004a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0a:	0112      	lsls	r2, r2, #4
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	440b      	add	r3, r1
 8004a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a14:	e00a      	b.n	8004a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4908      	ldr	r1, [pc, #32]	; (8004a3c <__NVIC_SetPriority+0x50>)
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	3b04      	subs	r3, #4
 8004a24:	0112      	lsls	r2, r2, #4
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	440b      	add	r3, r1
 8004a2a:	761a      	strb	r2, [r3, #24]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	e000e100 	.word	0xe000e100
 8004a3c:	e000ed00 	.word	0xe000ed00

08004a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b089      	sub	sp, #36	; 0x24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f1c3 0307 	rsb	r3, r3, #7
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	bf28      	it	cs
 8004a5e:	2304      	movcs	r3, #4
 8004a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3304      	adds	r3, #4
 8004a66:	2b06      	cmp	r3, #6
 8004a68:	d902      	bls.n	8004a70 <NVIC_EncodePriority+0x30>
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	3b03      	subs	r3, #3
 8004a6e:	e000      	b.n	8004a72 <NVIC_EncodePriority+0x32>
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	401a      	ands	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	43d9      	mvns	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a98:	4313      	orrs	r3, r2
         );
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3724      	adds	r7, #36	; 0x24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff ff28 	bl	8004904 <__NVIC_SetPriorityGrouping>
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ace:	f7ff ff3d 	bl	800494c <__NVIC_GetPriorityGrouping>
 8004ad2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	f7ff ffb1 	bl	8004a40 <NVIC_EncodePriority>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff ff80 	bl	80049ec <__NVIC_SetPriority>
}
 8004aec:	bf00      	nop
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ff30 	bl	8004968 <__NVIC_EnableIRQ>
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ff40 	bl	80049a4 <__NVIC_DisableIRQ>
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b38:	f7ff fc52 	bl	80043e0 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e099      	b.n	8004c7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b68:	e00f      	b.n	8004b8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b6a:	f7ff fc39 	bl	80043e0 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b05      	cmp	r3, #5
 8004b76:	d908      	bls.n	8004b8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2203      	movs	r2, #3
 8004b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e078      	b.n	8004c7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e8      	bne.n	8004b6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <HAL_DMA_Init+0x158>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d107      	bne.n	8004bf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	4313      	orrs	r3, r2
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0307 	bic.w	r3, r3, #7
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d117      	bne.n	8004c4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00e      	beq.n	8004c4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fb5f 	bl	80052f4 <DMA_CheckFifoParam>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2240      	movs	r2, #64	; 0x40
 8004c40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e016      	b.n	8004c7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fb16 	bl	8005288 <DMA_CalcBaseAndBitshift>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c64:	223f      	movs	r2, #63	; 0x3f
 8004c66:	409a      	lsls	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	f010803f 	.word	0xf010803f

08004c88 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e050      	b.n	8004d3c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d101      	bne.n	8004caa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e048      	b.n	8004d3c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2221      	movs	r2, #33	; 0x21
 8004ce8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 facc 	bl	8005288 <DMA_CalcBaseAndBitshift>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1c:	223f      	movs	r2, #63	; 0x3f
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_DMA_Start_IT+0x26>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e040      	b.n	8004dec <HAL_DMA_Start_IT+0xa8>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d12f      	bne.n	8004dde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2202      	movs	r2, #2
 8004d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fa4a 	bl	800522c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	223f      	movs	r2, #63	; 0x3f
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0216 	orr.w	r2, r2, #22
 8004db2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d007      	beq.n	8004dcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0208 	orr.w	r2, r2, #8
 8004dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e005      	b.n	8004dea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
 8004de8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e02:	f7ff faed 	bl	80043e0 <HAL_GetTick>
 8004e06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d008      	beq.n	8004e26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2280      	movs	r2, #128	; 0x80
 8004e18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e052      	b.n	8004ecc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0216 	bic.w	r2, r2, #22
 8004e34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <HAL_DMA_Abort+0x62>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0208 	bic.w	r2, r2, #8
 8004e64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0201 	bic.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e76:	e013      	b.n	8004ea0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e78:	f7ff fab2 	bl	80043e0 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b05      	cmp	r3, #5
 8004e84:	d90c      	bls.n	8004ea0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2203      	movs	r2, #3
 8004e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e015      	b.n	8004ecc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e4      	bne.n	8004e78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb2:	223f      	movs	r2, #63	; 0x3f
 8004eb4:	409a      	lsls	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d004      	beq.n	8004ef2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2280      	movs	r2, #128	; 0x80
 8004eec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e00c      	b.n	8004f0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2205      	movs	r2, #5
 8004ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f24:	4b92      	ldr	r3, [pc, #584]	; (8005170 <HAL_DMA_IRQHandler+0x258>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a92      	ldr	r2, [pc, #584]	; (8005174 <HAL_DMA_IRQHandler+0x25c>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	0a9b      	lsrs	r3, r3, #10
 8004f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	2208      	movs	r2, #8
 8004f44:	409a      	lsls	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01a      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d013      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0204 	bic.w	r2, r2, #4
 8004f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f70:	2208      	movs	r2, #8
 8004f72:	409a      	lsls	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	f043 0201 	orr.w	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f88:	2201      	movs	r2, #1
 8004f8a:	409a      	lsls	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d012      	beq.n	8004fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	409a      	lsls	r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	f043 0202 	orr.w	r2, r3, #2
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d012      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fdc:	2204      	movs	r2, #4
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	f043 0204 	orr.w	r2, r3, #4
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d043      	beq.n	8005088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d03c      	beq.n	8005088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005012:	2210      	movs	r2, #16
 8005014:	409a      	lsls	r2, r3
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d018      	beq.n	800505a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d108      	bne.n	8005048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d024      	beq.n	8005088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
 8005046:	e01f      	b.n	8005088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01b      	beq.n	8005088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
 8005058:	e016      	b.n	8005088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d107      	bne.n	8005078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0208 	bic.w	r2, r2, #8
 8005076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508c:	2220      	movs	r2, #32
 800508e:	409a      	lsls	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 808e 	beq.w	80051b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 8086 	beq.w	80051b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ae:	2220      	movs	r2, #32
 80050b0:	409a      	lsls	r2, r3
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b05      	cmp	r3, #5
 80050c0:	d136      	bne.n	8005130 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0216 	bic.w	r2, r2, #22
 80050d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d103      	bne.n	80050f2 <HAL_DMA_IRQHandler+0x1da>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0208 	bic.w	r2, r2, #8
 8005100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005106:	223f      	movs	r2, #63	; 0x3f
 8005108:	409a      	lsls	r2, r3
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005122:	2b00      	cmp	r3, #0
 8005124:	d07d      	beq.n	8005222 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	4798      	blx	r3
        }
        return;
 800512e:	e078      	b.n	8005222 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01c      	beq.n	8005178 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d108      	bne.n	800515e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	2b00      	cmp	r3, #0
 8005152:	d030      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
 800515c:	e02b      	b.n	80051b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d027      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
 800516e:	e022      	b.n	80051b6 <HAL_DMA_IRQHandler+0x29e>
 8005170:	2000002c 	.word	0x2000002c
 8005174:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0210 	bic.w	r2, r2, #16
 8005194:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d032      	beq.n	8005224 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d022      	beq.n	8005210 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2205      	movs	r2, #5
 80051ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60bb      	str	r3, [r7, #8]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d307      	bcc.n	80051fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1f2      	bne.n	80051e2 <HAL_DMA_IRQHandler+0x2ca>
 80051fc:	e000      	b.n	8005200 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80051fe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4798      	blx	r3
 8005220:	e000      	b.n	8005224 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005222:	bf00      	nop
    }
  }
}
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop

0800522c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005248:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d108      	bne.n	800526c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800526a:	e007      	b.n	800527c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	60da      	str	r2, [r3, #12]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	3b10      	subs	r3, #16
 8005298:	4a14      	ldr	r2, [pc, #80]	; (80052ec <DMA_CalcBaseAndBitshift+0x64>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052a2:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <DMA_CalcBaseAndBitshift+0x68>)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d909      	bls.n	80052ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052be:	f023 0303 	bic.w	r3, r3, #3
 80052c2:	1d1a      	adds	r2, r3, #4
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	659a      	str	r2, [r3, #88]	; 0x58
 80052c8:	e007      	b.n	80052da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	aaaaaaab 	.word	0xaaaaaaab
 80052f0:	0801a314 	.word	0x0801a314

080052f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d11f      	bne.n	800534e <DMA_CheckFifoParam+0x5a>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b03      	cmp	r3, #3
 8005312:	d856      	bhi.n	80053c2 <DMA_CheckFifoParam+0xce>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <DMA_CheckFifoParam+0x28>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	0800532d 	.word	0x0800532d
 8005320:	0800533f 	.word	0x0800533f
 8005324:	0800532d 	.word	0x0800532d
 8005328:	080053c3 	.word	0x080053c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d046      	beq.n	80053c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800533c:	e043      	b.n	80053c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005346:	d140      	bne.n	80053ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800534c:	e03d      	b.n	80053ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005356:	d121      	bne.n	800539c <DMA_CheckFifoParam+0xa8>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d837      	bhi.n	80053ce <DMA_CheckFifoParam+0xda>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <DMA_CheckFifoParam+0x70>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005375 	.word	0x08005375
 8005368:	0800537b 	.word	0x0800537b
 800536c:	08005375 	.word	0x08005375
 8005370:	0800538d 	.word	0x0800538d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
      break;
 8005378:	e030      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d025      	beq.n	80053d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800538a:	e022      	b.n	80053d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005394:	d11f      	bne.n	80053d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800539a:	e01c      	b.n	80053d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d903      	bls.n	80053aa <DMA_CheckFifoParam+0xb6>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d003      	beq.n	80053b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053a8:	e018      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	73fb      	strb	r3, [r7, #15]
      break;
 80053ae:	e015      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00e      	beq.n	80053da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
      break;
 80053c0:	e00b      	b.n	80053da <DMA_CheckFifoParam+0xe6>
      break;
 80053c2:	bf00      	nop
 80053c4:	e00a      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
      break;
 80053c6:	bf00      	nop
 80053c8:	e008      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
      break;
 80053ca:	bf00      	nop
 80053cc:	e006      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
      break;
 80053ce:	bf00      	nop
 80053d0:	e004      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
      break;
 80053d2:	bf00      	nop
 80053d4:	e002      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
      break;   
 80053d6:	bf00      	nop
 80053d8:	e000      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
      break;
 80053da:	bf00      	nop
    }
  } 
  
  return status; 
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop

080053ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b089      	sub	sp, #36	; 0x24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053fe:	2300      	movs	r3, #0
 8005400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	e16b      	b.n	80056e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005408:	2201      	movs	r2, #1
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4013      	ands	r3, r2
 800541a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	429a      	cmp	r2, r3
 8005422:	f040 815a 	bne.w	80056da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b01      	cmp	r3, #1
 8005430:	d005      	beq.n	800543e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800543a:	2b02      	cmp	r3, #2
 800543c:	d130      	bne.n	80054a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	2203      	movs	r2, #3
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4013      	ands	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4313      	orrs	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005474:	2201      	movs	r2, #1
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	43db      	mvns	r3, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4013      	ands	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 0201 	and.w	r2, r3, #1
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4313      	orrs	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d017      	beq.n	80054dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	2203      	movs	r2, #3
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	43db      	mvns	r3, r3
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	4013      	ands	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d123      	bne.n	8005530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	08da      	lsrs	r2, r3, #3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3208      	adds	r2, #8
 80054f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	220f      	movs	r2, #15
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4013      	ands	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4313      	orrs	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	08da      	lsrs	r2, r3, #3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3208      	adds	r2, #8
 800552a:	69b9      	ldr	r1, [r7, #24]
 800552c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	2203      	movs	r2, #3
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 0203 	and.w	r2, r3, #3
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4313      	orrs	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80b4 	beq.w	80056da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	4b60      	ldr	r3, [pc, #384]	; (80056f8 <HAL_GPIO_Init+0x30c>)
 8005578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557a:	4a5f      	ldr	r2, [pc, #380]	; (80056f8 <HAL_GPIO_Init+0x30c>)
 800557c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005580:	6453      	str	r3, [r2, #68]	; 0x44
 8005582:	4b5d      	ldr	r3, [pc, #372]	; (80056f8 <HAL_GPIO_Init+0x30c>)
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800558e:	4a5b      	ldr	r2, [pc, #364]	; (80056fc <HAL_GPIO_Init+0x310>)
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	089b      	lsrs	r3, r3, #2
 8005594:	3302      	adds	r3, #2
 8005596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	220f      	movs	r2, #15
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	43db      	mvns	r3, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4013      	ands	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a52      	ldr	r2, [pc, #328]	; (8005700 <HAL_GPIO_Init+0x314>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d02b      	beq.n	8005612 <HAL_GPIO_Init+0x226>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a51      	ldr	r2, [pc, #324]	; (8005704 <HAL_GPIO_Init+0x318>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d025      	beq.n	800560e <HAL_GPIO_Init+0x222>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a50      	ldr	r2, [pc, #320]	; (8005708 <HAL_GPIO_Init+0x31c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01f      	beq.n	800560a <HAL_GPIO_Init+0x21e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a4f      	ldr	r2, [pc, #316]	; (800570c <HAL_GPIO_Init+0x320>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d019      	beq.n	8005606 <HAL_GPIO_Init+0x21a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a4e      	ldr	r2, [pc, #312]	; (8005710 <HAL_GPIO_Init+0x324>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <HAL_GPIO_Init+0x216>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a4d      	ldr	r2, [pc, #308]	; (8005714 <HAL_GPIO_Init+0x328>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00d      	beq.n	80055fe <HAL_GPIO_Init+0x212>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a4c      	ldr	r2, [pc, #304]	; (8005718 <HAL_GPIO_Init+0x32c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d007      	beq.n	80055fa <HAL_GPIO_Init+0x20e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a4b      	ldr	r2, [pc, #300]	; (800571c <HAL_GPIO_Init+0x330>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d101      	bne.n	80055f6 <HAL_GPIO_Init+0x20a>
 80055f2:	2307      	movs	r3, #7
 80055f4:	e00e      	b.n	8005614 <HAL_GPIO_Init+0x228>
 80055f6:	2308      	movs	r3, #8
 80055f8:	e00c      	b.n	8005614 <HAL_GPIO_Init+0x228>
 80055fa:	2306      	movs	r3, #6
 80055fc:	e00a      	b.n	8005614 <HAL_GPIO_Init+0x228>
 80055fe:	2305      	movs	r3, #5
 8005600:	e008      	b.n	8005614 <HAL_GPIO_Init+0x228>
 8005602:	2304      	movs	r3, #4
 8005604:	e006      	b.n	8005614 <HAL_GPIO_Init+0x228>
 8005606:	2303      	movs	r3, #3
 8005608:	e004      	b.n	8005614 <HAL_GPIO_Init+0x228>
 800560a:	2302      	movs	r3, #2
 800560c:	e002      	b.n	8005614 <HAL_GPIO_Init+0x228>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <HAL_GPIO_Init+0x228>
 8005612:	2300      	movs	r3, #0
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	f002 0203 	and.w	r2, r2, #3
 800561a:	0092      	lsls	r2, r2, #2
 800561c:	4093      	lsls	r3, r2
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005624:	4935      	ldr	r1, [pc, #212]	; (80056fc <HAL_GPIO_Init+0x310>)
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	089b      	lsrs	r3, r3, #2
 800562a:	3302      	adds	r3, #2
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005632:	4b3b      	ldr	r3, [pc, #236]	; (8005720 <HAL_GPIO_Init+0x334>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	43db      	mvns	r3, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4013      	ands	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005656:	4a32      	ldr	r2, [pc, #200]	; (8005720 <HAL_GPIO_Init+0x334>)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800565c:	4b30      	ldr	r3, [pc, #192]	; (8005720 <HAL_GPIO_Init+0x334>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	43db      	mvns	r3, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4013      	ands	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005680:	4a27      	ldr	r2, [pc, #156]	; (8005720 <HAL_GPIO_Init+0x334>)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005686:	4b26      	ldr	r3, [pc, #152]	; (8005720 <HAL_GPIO_Init+0x334>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056aa:	4a1d      	ldr	r2, [pc, #116]	; (8005720 <HAL_GPIO_Init+0x334>)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056b0:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <HAL_GPIO_Init+0x334>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	43db      	mvns	r3, r3
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4013      	ands	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056d4:	4a12      	ldr	r2, [pc, #72]	; (8005720 <HAL_GPIO_Init+0x334>)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	3301      	adds	r3, #1
 80056de:	61fb      	str	r3, [r7, #28]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b0f      	cmp	r3, #15
 80056e4:	f67f ae90 	bls.w	8005408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	3724      	adds	r7, #36	; 0x24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40023800 	.word	0x40023800
 80056fc:	40013800 	.word	0x40013800
 8005700:	40020000 	.word	0x40020000
 8005704:	40020400 	.word	0x40020400
 8005708:	40020800 	.word	0x40020800
 800570c:	40020c00 	.word	0x40020c00
 8005710:	40021000 	.word	0x40021000
 8005714:	40021400 	.word	0x40021400
 8005718:	40021800 	.word	0x40021800
 800571c:	40021c00 	.word	0x40021c00
 8005720:	40013c00 	.word	0x40013c00

08005724 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e0cd      	b.n	80058dc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005740:	2201      	movs	r2, #1
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4013      	ands	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	429a      	cmp	r2, r3
 8005758:	f040 80bd 	bne.w	80058d6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800575c:	4a65      	ldr	r2, [pc, #404]	; (80058f4 <HAL_GPIO_DeInit+0x1d0>)
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	089b      	lsrs	r3, r3, #2
 8005762:	3302      	adds	r3, #2
 8005764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005768:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	220f      	movs	r2, #15
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a5d      	ldr	r2, [pc, #372]	; (80058f8 <HAL_GPIO_DeInit+0x1d4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d02b      	beq.n	80057de <HAL_GPIO_DeInit+0xba>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a5c      	ldr	r2, [pc, #368]	; (80058fc <HAL_GPIO_DeInit+0x1d8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d025      	beq.n	80057da <HAL_GPIO_DeInit+0xb6>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a5b      	ldr	r2, [pc, #364]	; (8005900 <HAL_GPIO_DeInit+0x1dc>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01f      	beq.n	80057d6 <HAL_GPIO_DeInit+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a5a      	ldr	r2, [pc, #360]	; (8005904 <HAL_GPIO_DeInit+0x1e0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d019      	beq.n	80057d2 <HAL_GPIO_DeInit+0xae>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a59      	ldr	r2, [pc, #356]	; (8005908 <HAL_GPIO_DeInit+0x1e4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <HAL_GPIO_DeInit+0xaa>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a58      	ldr	r2, [pc, #352]	; (800590c <HAL_GPIO_DeInit+0x1e8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00d      	beq.n	80057ca <HAL_GPIO_DeInit+0xa6>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a57      	ldr	r2, [pc, #348]	; (8005910 <HAL_GPIO_DeInit+0x1ec>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d007      	beq.n	80057c6 <HAL_GPIO_DeInit+0xa2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a56      	ldr	r2, [pc, #344]	; (8005914 <HAL_GPIO_DeInit+0x1f0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d101      	bne.n	80057c2 <HAL_GPIO_DeInit+0x9e>
 80057be:	2307      	movs	r3, #7
 80057c0:	e00e      	b.n	80057e0 <HAL_GPIO_DeInit+0xbc>
 80057c2:	2308      	movs	r3, #8
 80057c4:	e00c      	b.n	80057e0 <HAL_GPIO_DeInit+0xbc>
 80057c6:	2306      	movs	r3, #6
 80057c8:	e00a      	b.n	80057e0 <HAL_GPIO_DeInit+0xbc>
 80057ca:	2305      	movs	r3, #5
 80057cc:	e008      	b.n	80057e0 <HAL_GPIO_DeInit+0xbc>
 80057ce:	2304      	movs	r3, #4
 80057d0:	e006      	b.n	80057e0 <HAL_GPIO_DeInit+0xbc>
 80057d2:	2303      	movs	r3, #3
 80057d4:	e004      	b.n	80057e0 <HAL_GPIO_DeInit+0xbc>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e002      	b.n	80057e0 <HAL_GPIO_DeInit+0xbc>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <HAL_GPIO_DeInit+0xbc>
 80057de:	2300      	movs	r3, #0
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	f002 0203 	and.w	r2, r2, #3
 80057e6:	0092      	lsls	r2, r2, #2
 80057e8:	4093      	lsls	r3, r2
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d132      	bne.n	8005856 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80057f0:	4b49      	ldr	r3, [pc, #292]	; (8005918 <HAL_GPIO_DeInit+0x1f4>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	43db      	mvns	r3, r3
 80057f8:	4947      	ldr	r1, [pc, #284]	; (8005918 <HAL_GPIO_DeInit+0x1f4>)
 80057fa:	4013      	ands	r3, r2
 80057fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80057fe:	4b46      	ldr	r3, [pc, #280]	; (8005918 <HAL_GPIO_DeInit+0x1f4>)
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	43db      	mvns	r3, r3
 8005806:	4944      	ldr	r1, [pc, #272]	; (8005918 <HAL_GPIO_DeInit+0x1f4>)
 8005808:	4013      	ands	r3, r2
 800580a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800580c:	4b42      	ldr	r3, [pc, #264]	; (8005918 <HAL_GPIO_DeInit+0x1f4>)
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	43db      	mvns	r3, r3
 8005814:	4940      	ldr	r1, [pc, #256]	; (8005918 <HAL_GPIO_DeInit+0x1f4>)
 8005816:	4013      	ands	r3, r2
 8005818:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800581a:	4b3f      	ldr	r3, [pc, #252]	; (8005918 <HAL_GPIO_DeInit+0x1f4>)
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	43db      	mvns	r3, r3
 8005822:	493d      	ldr	r1, [pc, #244]	; (8005918 <HAL_GPIO_DeInit+0x1f4>)
 8005824:	4013      	ands	r3, r2
 8005826:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	220f      	movs	r2, #15
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005838:	4a2e      	ldr	r2, [pc, #184]	; (80058f4 <HAL_GPIO_DeInit+0x1d0>)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	089b      	lsrs	r3, r3, #2
 800583e:	3302      	adds	r3, #2
 8005840:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	43da      	mvns	r2, r3
 8005848:	482a      	ldr	r0, [pc, #168]	; (80058f4 <HAL_GPIO_DeInit+0x1d0>)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	089b      	lsrs	r3, r3, #2
 800584e:	400a      	ands	r2, r1
 8005850:	3302      	adds	r3, #2
 8005852:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	2103      	movs	r1, #3
 8005860:	fa01 f303 	lsl.w	r3, r1, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	401a      	ands	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	08da      	lsrs	r2, r3, #3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3208      	adds	r2, #8
 8005874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	220f      	movs	r2, #15
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	43db      	mvns	r3, r3
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	08d2      	lsrs	r2, r2, #3
 800588c:	4019      	ands	r1, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3208      	adds	r2, #8
 8005892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	2103      	movs	r1, #3
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	43db      	mvns	r3, r3
 80058a6:	401a      	ands	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	2101      	movs	r1, #1
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	401a      	ands	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	2103      	movs	r1, #3
 80058ca:	fa01 f303 	lsl.w	r3, r1, r3
 80058ce:	43db      	mvns	r3, r3
 80058d0:	401a      	ands	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	3301      	adds	r3, #1
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b0f      	cmp	r3, #15
 80058e0:	f67f af2e 	bls.w	8005740 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40013800 	.word	0x40013800
 80058f8:	40020000 	.word	0x40020000
 80058fc:	40020400 	.word	0x40020400
 8005900:	40020800 	.word	0x40020800
 8005904:	40020c00 	.word	0x40020c00
 8005908:	40021000 	.word	0x40021000
 800590c:	40021400 	.word	0x40021400
 8005910:	40021800 	.word	0x40021800
 8005914:	40021c00 	.word	0x40021c00
 8005918:	40013c00 	.word	0x40013c00

0800591c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	887b      	ldrh	r3, [r7, #2]
 800592e:	4013      	ands	r3, r2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
 8005938:	e001      	b.n	800593e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800593e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	807b      	strh	r3, [r7, #2]
 8005958:	4613      	mov	r3, r2
 800595a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800595c:	787b      	ldrb	r3, [r7, #1]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005962:	887a      	ldrh	r2, [r7, #2]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005968:	e003      	b.n	8005972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800596a:	887b      	ldrh	r3, [r7, #2]
 800596c:	041a      	lsls	r2, r3, #16
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	619a      	str	r2, [r3, #24]
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e12b      	b.n	8005bea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fd fe60 	bl	800366c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2224      	movs	r2, #36	; 0x24
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059e4:	f002 feda 	bl	800879c <HAL_RCC_GetPCLK1Freq>
 80059e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4a81      	ldr	r2, [pc, #516]	; (8005bf4 <HAL_I2C_Init+0x274>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d807      	bhi.n	8005a04 <HAL_I2C_Init+0x84>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4a80      	ldr	r2, [pc, #512]	; (8005bf8 <HAL_I2C_Init+0x278>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	bf94      	ite	ls
 80059fc:	2301      	movls	r3, #1
 80059fe:	2300      	movhi	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	e006      	b.n	8005a12 <HAL_I2C_Init+0x92>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a7d      	ldr	r2, [pc, #500]	; (8005bfc <HAL_I2C_Init+0x27c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	bf94      	ite	ls
 8005a0c:	2301      	movls	r3, #1
 8005a0e:	2300      	movhi	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e0e7      	b.n	8005bea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a78      	ldr	r2, [pc, #480]	; (8005c00 <HAL_I2C_Init+0x280>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	0c9b      	lsrs	r3, r3, #18
 8005a24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	4a6a      	ldr	r2, [pc, #424]	; (8005bf4 <HAL_I2C_Init+0x274>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d802      	bhi.n	8005a54 <HAL_I2C_Init+0xd4>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	3301      	adds	r3, #1
 8005a52:	e009      	b.n	8005a68 <HAL_I2C_Init+0xe8>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
 8005a5e:	4a69      	ldr	r2, [pc, #420]	; (8005c04 <HAL_I2C_Init+0x284>)
 8005a60:	fba2 2303 	umull	r2, r3, r2, r3
 8005a64:	099b      	lsrs	r3, r3, #6
 8005a66:	3301      	adds	r3, #1
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	495c      	ldr	r1, [pc, #368]	; (8005bf4 <HAL_I2C_Init+0x274>)
 8005a84:	428b      	cmp	r3, r1
 8005a86:	d819      	bhi.n	8005abc <HAL_I2C_Init+0x13c>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1e59      	subs	r1, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a96:	1c59      	adds	r1, r3, #1
 8005a98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a9c:	400b      	ands	r3, r1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_I2C_Init+0x138>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	1e59      	subs	r1, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab6:	e051      	b.n	8005b5c <HAL_I2C_Init+0x1dc>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	e04f      	b.n	8005b5c <HAL_I2C_Init+0x1dc>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d111      	bne.n	8005ae8 <HAL_I2C_Init+0x168>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1e58      	subs	r0, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6859      	ldr	r1, [r3, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	440b      	add	r3, r1
 8005ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	bf0c      	ite	eq
 8005ae0:	2301      	moveq	r3, #1
 8005ae2:	2300      	movne	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	e012      	b.n	8005b0e <HAL_I2C_Init+0x18e>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	1e58      	subs	r0, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6859      	ldr	r1, [r3, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	0099      	lsls	r1, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005afe:	3301      	adds	r3, #1
 8005b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	bf0c      	ite	eq
 8005b08:	2301      	moveq	r3, #1
 8005b0a:	2300      	movne	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_I2C_Init+0x196>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e022      	b.n	8005b5c <HAL_I2C_Init+0x1dc>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10e      	bne.n	8005b3c <HAL_I2C_Init+0x1bc>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1e58      	subs	r0, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6859      	ldr	r1, [r3, #4]
 8005b26:	460b      	mov	r3, r1
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	440b      	add	r3, r1
 8005b2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b30:	3301      	adds	r3, #1
 8005b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3a:	e00f      	b.n	8005b5c <HAL_I2C_Init+0x1dc>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	1e58      	subs	r0, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6859      	ldr	r1, [r3, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	0099      	lsls	r1, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b52:	3301      	adds	r3, #1
 8005b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	6809      	ldr	r1, [r1, #0]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69da      	ldr	r2, [r3, #28]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6911      	ldr	r1, [r2, #16]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	68d2      	ldr	r2, [r2, #12]
 8005b96:	4311      	orrs	r1, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695a      	ldr	r2, [r3, #20]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	000186a0 	.word	0x000186a0
 8005bf8:	001e847f 	.word	0x001e847f
 8005bfc:	003d08ff 	.word	0x003d08ff
 8005c00:	431bde83 	.word	0x431bde83
 8005c04:	10624dd3 	.word	0x10624dd3

08005c08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	461a      	mov	r2, r3
 8005c14:	460b      	mov	r3, r1
 8005c16:	817b      	strh	r3, [r7, #10]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c1c:	f7fe fbe0 	bl	80043e0 <HAL_GetTick>
 8005c20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	f040 80e0 	bne.w	8005df0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	2319      	movs	r3, #25
 8005c36:	2201      	movs	r2, #1
 8005c38:	4970      	ldr	r1, [pc, #448]	; (8005dfc <HAL_I2C_Master_Transmit+0x1f4>)
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fe02 	bl	8006844 <I2C_WaitOnFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005c46:	2302      	movs	r3, #2
 8005c48:	e0d3      	b.n	8005df2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_I2C_Master_Transmit+0x50>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e0cc      	b.n	8005df2 <HAL_I2C_Master_Transmit+0x1ea>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d007      	beq.n	8005c7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0201 	orr.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2221      	movs	r2, #33	; 0x21
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2210      	movs	r2, #16
 8005c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	893a      	ldrh	r2, [r7, #8]
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4a50      	ldr	r2, [pc, #320]	; (8005e00 <HAL_I2C_Master_Transmit+0x1f8>)
 8005cbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005cc0:	8979      	ldrh	r1, [r7, #10]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fbbc 	bl	8006444 <I2C_MasterRequestWrite>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e08d      	b.n	8005df2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005cec:	e066      	b.n	8005dbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	6a39      	ldr	r1, [r7, #32]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fe7c 	bl	80069f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00d      	beq.n	8005d1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d107      	bne.n	8005d16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e06b      	b.n	8005df2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d11b      	bne.n	8005d90 <HAL_I2C_Master_Transmit+0x188>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d017      	beq.n	8005d90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	781a      	ldrb	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	6a39      	ldr	r1, [r7, #32]
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 fe6c 	bl	8006a72 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00d      	beq.n	8005dbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d107      	bne.n	8005db8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e01a      	b.n	8005df2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d194      	bne.n	8005cee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	e000      	b.n	8005df2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
  }
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	00100002 	.word	0x00100002
 8005e00:	ffff0000 	.word	0xffff0000

08005e04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	4611      	mov	r1, r2
 8005e10:	461a      	mov	r2, r3
 8005e12:	4603      	mov	r3, r0
 8005e14:	817b      	strh	r3, [r7, #10]
 8005e16:	460b      	mov	r3, r1
 8005e18:	813b      	strh	r3, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e1e:	f7fe fadf 	bl	80043e0 <HAL_GetTick>
 8005e22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	f040 80d9 	bne.w	8005fe4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	2319      	movs	r3, #25
 8005e38:	2201      	movs	r2, #1
 8005e3a:	496d      	ldr	r1, [pc, #436]	; (8005ff0 <HAL_I2C_Mem_Write+0x1ec>)
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fd01 	bl	8006844 <I2C_WaitOnFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e0cc      	b.n	8005fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_I2C_Mem_Write+0x56>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e0c5      	b.n	8005fe6 <HAL_I2C_Mem_Write+0x1e2>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d007      	beq.n	8005e80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2221      	movs	r2, #33	; 0x21
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2240      	movs	r2, #64	; 0x40
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a3a      	ldr	r2, [r7, #32]
 8005eaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4a4d      	ldr	r2, [pc, #308]	; (8005ff4 <HAL_I2C_Mem_Write+0x1f0>)
 8005ec0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ec2:	88f8      	ldrh	r0, [r7, #6]
 8005ec4:	893a      	ldrh	r2, [r7, #8]
 8005ec6:	8979      	ldrh	r1, [r7, #10]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	9301      	str	r3, [sp, #4]
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 fb38 	bl	8006548 <I2C_RequestMemoryWrite>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d052      	beq.n	8005f84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e081      	b.n	8005fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fd82 	bl	80069f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00d      	beq.n	8005f0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d107      	bne.n	8005f0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e06b      	b.n	8005fe6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d11b      	bne.n	8005f84 <HAL_I2C_Mem_Write+0x180>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d017      	beq.n	8005f84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	781a      	ldrb	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1aa      	bne.n	8005ee2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fd6e 	bl	8006a72 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00d      	beq.n	8005fb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d107      	bne.n	8005fb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e016      	b.n	8005fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e000      	b.n	8005fe6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005fe4:	2302      	movs	r3, #2
  }
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	00100002 	.word	0x00100002
 8005ff4:	ffff0000 	.word	0xffff0000

08005ff8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08c      	sub	sp, #48	; 0x30
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	4608      	mov	r0, r1
 8006002:	4611      	mov	r1, r2
 8006004:	461a      	mov	r2, r3
 8006006:	4603      	mov	r3, r0
 8006008:	817b      	strh	r3, [r7, #10]
 800600a:	460b      	mov	r3, r1
 800600c:	813b      	strh	r3, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006012:	f7fe f9e5 	bl	80043e0 <HAL_GetTick>
 8006016:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b20      	cmp	r3, #32
 8006022:	f040 8208 	bne.w	8006436 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	2319      	movs	r3, #25
 800602c:	2201      	movs	r2, #1
 800602e:	497b      	ldr	r1, [pc, #492]	; (800621c <HAL_I2C_Mem_Read+0x224>)
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fc07 	bl	8006844 <I2C_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800603c:	2302      	movs	r3, #2
 800603e:	e1fb      	b.n	8006438 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_I2C_Mem_Read+0x56>
 800604a:	2302      	movs	r3, #2
 800604c:	e1f4      	b.n	8006438 <HAL_I2C_Mem_Read+0x440>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d007      	beq.n	8006074 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006082:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2222      	movs	r2, #34	; 0x22
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2240      	movs	r2, #64	; 0x40
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80060a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a5b      	ldr	r2, [pc, #364]	; (8006220 <HAL_I2C_Mem_Read+0x228>)
 80060b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060b6:	88f8      	ldrh	r0, [r7, #6]
 80060b8:	893a      	ldrh	r2, [r7, #8]
 80060ba:	8979      	ldrh	r1, [r7, #10]
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	4603      	mov	r3, r0
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fad4 	bl	8006674 <I2C_RequestMemoryRead>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e1b0      	b.n	8006438 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d113      	bne.n	8006106 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060de:	2300      	movs	r3, #0
 80060e0:	623b      	str	r3, [r7, #32]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	623b      	str	r3, [r7, #32]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	623b      	str	r3, [r7, #32]
 80060f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	e184      	b.n	8006410 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610a:	2b01      	cmp	r3, #1
 800610c:	d11b      	bne.n	8006146 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800611c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800611e:	2300      	movs	r3, #0
 8006120:	61fb      	str	r3, [r7, #28]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	61fb      	str	r3, [r7, #28]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e164      	b.n	8006410 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614a:	2b02      	cmp	r3, #2
 800614c:	d11b      	bne.n	8006186 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800616e:	2300      	movs	r3, #0
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	e144      	b.n	8006410 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800619c:	e138      	b.n	8006410 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	f200 80f1 	bhi.w	800638a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d123      	bne.n	80061f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fc9d 	bl	8006af4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e139      	b.n	8006438 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061f6:	e10b      	b.n	8006410 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d14e      	bne.n	800629e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	2200      	movs	r2, #0
 8006208:	4906      	ldr	r1, [pc, #24]	; (8006224 <HAL_I2C_Mem_Read+0x22c>)
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fb1a 	bl	8006844 <I2C_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e10e      	b.n	8006438 <HAL_I2C_Mem_Read+0x440>
 800621a:	bf00      	nop
 800621c:	00100002 	.word	0x00100002
 8006220:	ffff0000 	.word	0xffff0000
 8006224:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006260:	b29b      	uxth	r3, r3
 8006262:	3b01      	subs	r3, #1
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006286:	3b01      	subs	r3, #1
 8006288:	b29a      	uxth	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006292:	b29b      	uxth	r3, r3
 8006294:	3b01      	subs	r3, #1
 8006296:	b29a      	uxth	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800629c:	e0b8      	b.n	8006410 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	2200      	movs	r2, #0
 80062a6:	4966      	ldr	r1, [pc, #408]	; (8006440 <HAL_I2C_Mem_Read+0x448>)
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 facb 	bl	8006844 <I2C_WaitOnFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e0bf      	b.n	8006438 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	2200      	movs	r2, #0
 8006302:	494f      	ldr	r1, [pc, #316]	; (8006440 <HAL_I2C_Mem_Read+0x448>)
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 fa9d 	bl	8006844 <I2C_WaitOnFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e091      	b.n	8006438 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006372:	3b01      	subs	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006388:	e042      	b.n	8006410 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800638a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 fbb0 	bl	8006af4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e04c      	b.n	8006438 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691a      	ldr	r2, [r3, #16]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	3b01      	subs	r3, #1
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d118      	bne.n	8006410 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006414:	2b00      	cmp	r3, #0
 8006416:	f47f aec2 	bne.w	800619e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	e000      	b.n	8006438 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006436:	2302      	movs	r3, #2
  }
}
 8006438:	4618      	mov	r0, r3
 800643a:	3728      	adds	r7, #40	; 0x28
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	00010004 	.word	0x00010004

08006444 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	607a      	str	r2, [r7, #4]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	460b      	mov	r3, r1
 8006452:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d006      	beq.n	800646e <I2C_MasterRequestWrite+0x2a>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d003      	beq.n	800646e <I2C_MasterRequestWrite+0x2a>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800646c:	d108      	bne.n	8006480 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	e00b      	b.n	8006498 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	2b12      	cmp	r3, #18
 8006486:	d107      	bne.n	8006498 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006496:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f9cd 	bl	8006844 <I2C_WaitOnFlagUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00d      	beq.n	80064cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064be:	d103      	bne.n	80064c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e035      	b.n	8006538 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d4:	d108      	bne.n	80064e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064d6:	897b      	ldrh	r3, [r7, #10]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	461a      	mov	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064e4:	611a      	str	r2, [r3, #16]
 80064e6:	e01b      	b.n	8006520 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064e8:	897b      	ldrh	r3, [r7, #10]
 80064ea:	11db      	asrs	r3, r3, #7
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	f003 0306 	and.w	r3, r3, #6
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f063 030f 	orn	r3, r3, #15
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	490e      	ldr	r1, [pc, #56]	; (8006540 <I2C_MasterRequestWrite+0xfc>)
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f9f3 	bl	80068f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e010      	b.n	8006538 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006516:	897b      	ldrh	r3, [r7, #10]
 8006518:	b2da      	uxtb	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	4907      	ldr	r1, [pc, #28]	; (8006544 <I2C_MasterRequestWrite+0x100>)
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 f9e3 	bl	80068f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	00010008 	.word	0x00010008
 8006544:	00010002 	.word	0x00010002

08006548 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af02      	add	r7, sp, #8
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	4608      	mov	r0, r1
 8006552:	4611      	mov	r1, r2
 8006554:	461a      	mov	r2, r3
 8006556:	4603      	mov	r3, r0
 8006558:	817b      	strh	r3, [r7, #10]
 800655a:	460b      	mov	r3, r1
 800655c:	813b      	strh	r3, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006570:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	2200      	movs	r2, #0
 800657a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f960 	bl	8006844 <I2C_WaitOnFlagUntilTimeout>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00d      	beq.n	80065a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006598:	d103      	bne.n	80065a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e05f      	b.n	8006666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065a6:	897b      	ldrh	r3, [r7, #10]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	6a3a      	ldr	r2, [r7, #32]
 80065ba:	492d      	ldr	r1, [pc, #180]	; (8006670 <I2C_RequestMemoryWrite+0x128>)
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f998 	bl	80068f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e04c      	b.n	8006666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065cc:	2300      	movs	r3, #0
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e4:	6a39      	ldr	r1, [r7, #32]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fa02 	bl	80069f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d107      	bne.n	800660a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006608:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e02b      	b.n	8006666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d105      	bne.n	8006620 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006614:	893b      	ldrh	r3, [r7, #8]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	611a      	str	r2, [r3, #16]
 800661e:	e021      	b.n	8006664 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006620:	893b      	ldrh	r3, [r7, #8]
 8006622:	0a1b      	lsrs	r3, r3, #8
 8006624:	b29b      	uxth	r3, r3
 8006626:	b2da      	uxtb	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800662e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006630:	6a39      	ldr	r1, [r7, #32]
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f9dc 	bl	80069f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00d      	beq.n	800665a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	2b04      	cmp	r3, #4
 8006644:	d107      	bne.n	8006656 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006654:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e005      	b.n	8006666 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800665a:	893b      	ldrh	r3, [r7, #8]
 800665c:	b2da      	uxtb	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	00010002 	.word	0x00010002

08006674 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	4608      	mov	r0, r1
 800667e:	4611      	mov	r1, r2
 8006680:	461a      	mov	r2, r3
 8006682:	4603      	mov	r3, r0
 8006684:	817b      	strh	r3, [r7, #10]
 8006686:	460b      	mov	r3, r1
 8006688:	813b      	strh	r3, [r7, #8]
 800668a:	4613      	mov	r3, r2
 800668c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800669c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f8c2 	bl	8006844 <I2C_WaitOnFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00d      	beq.n	80066e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d4:	d103      	bne.n	80066de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e0aa      	b.n	8006838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066e2:	897b      	ldrh	r3, [r7, #10]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	6a3a      	ldr	r2, [r7, #32]
 80066f6:	4952      	ldr	r1, [pc, #328]	; (8006840 <I2C_RequestMemoryRead+0x1cc>)
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 f8fa 	bl	80068f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e097      	b.n	8006838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800671e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006720:	6a39      	ldr	r1, [r7, #32]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f964 	bl	80069f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00d      	beq.n	800674a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	2b04      	cmp	r3, #4
 8006734:	d107      	bne.n	8006746 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006744:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e076      	b.n	8006838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d105      	bne.n	800675c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006750:	893b      	ldrh	r3, [r7, #8]
 8006752:	b2da      	uxtb	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	611a      	str	r2, [r3, #16]
 800675a:	e021      	b.n	80067a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800675c:	893b      	ldrh	r3, [r7, #8]
 800675e:	0a1b      	lsrs	r3, r3, #8
 8006760:	b29b      	uxth	r3, r3
 8006762:	b2da      	uxtb	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800676a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676c:	6a39      	ldr	r1, [r7, #32]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f93e 	bl	80069f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00d      	beq.n	8006796 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	2b04      	cmp	r3, #4
 8006780:	d107      	bne.n	8006792 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006790:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e050      	b.n	8006838 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006796:	893b      	ldrh	r3, [r7, #8]
 8006798:	b2da      	uxtb	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a2:	6a39      	ldr	r1, [r7, #32]
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 f923 	bl	80069f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00d      	beq.n	80067cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d107      	bne.n	80067c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e035      	b.n	8006838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f82b 	bl	8006844 <I2C_WaitOnFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00d      	beq.n	8006810 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006802:	d103      	bne.n	800680c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800680a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e013      	b.n	8006838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006810:	897b      	ldrh	r3, [r7, #10]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	b2da      	uxtb	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	4906      	ldr	r1, [pc, #24]	; (8006840 <I2C_RequestMemoryRead+0x1cc>)
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f863 	bl	80068f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	00010002 	.word	0x00010002

08006844 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	4613      	mov	r3, r2
 8006852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006854:	e025      	b.n	80068a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800685c:	d021      	beq.n	80068a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685e:	f7fd fdbf 	bl	80043e0 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d302      	bcc.n	8006874 <I2C_WaitOnFlagUntilTimeout+0x30>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d116      	bne.n	80068a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	f043 0220 	orr.w	r2, r3, #32
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e023      	b.n	80068ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	0c1b      	lsrs	r3, r3, #16
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d10d      	bne.n	80068c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	43da      	mvns	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	bf0c      	ite	eq
 80068be:	2301      	moveq	r3, #1
 80068c0:	2300      	movne	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	e00c      	b.n	80068e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	43da      	mvns	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4013      	ands	r3, r2
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bf0c      	ite	eq
 80068da:	2301      	moveq	r3, #1
 80068dc:	2300      	movne	r3, #0
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d0b6      	beq.n	8006856 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
 80068fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006900:	e051      	b.n	80069a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006910:	d123      	bne.n	800695a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006920:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800692a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f043 0204 	orr.w	r2, r3, #4
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e046      	b.n	80069e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006960:	d021      	beq.n	80069a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fd fd3d 	bl	80043e0 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d116      	bne.n	80069a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	f043 0220 	orr.w	r2, r3, #32
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e020      	b.n	80069e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	0c1b      	lsrs	r3, r3, #16
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d10c      	bne.n	80069ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	43da      	mvns	r2, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4013      	ands	r3, r2
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bf14      	ite	ne
 80069c2:	2301      	movne	r3, #1
 80069c4:	2300      	moveq	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	e00b      	b.n	80069e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	43da      	mvns	r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	4013      	ands	r3, r2
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bf14      	ite	ne
 80069dc:	2301      	movne	r3, #1
 80069de:	2300      	moveq	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d18d      	bne.n	8006902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069fc:	e02d      	b.n	8006a5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f8ce 	bl	8006ba0 <I2C_IsAcknowledgeFailed>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e02d      	b.n	8006a6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a14:	d021      	beq.n	8006a5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a16:	f7fd fce3 	bl	80043e0 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d302      	bcc.n	8006a2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d116      	bne.n	8006a5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	f043 0220 	orr.w	r2, r3, #32
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e007      	b.n	8006a6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a64:	2b80      	cmp	r3, #128	; 0x80
 8006a66:	d1ca      	bne.n	80069fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a7e:	e02d      	b.n	8006adc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f88d 	bl	8006ba0 <I2C_IsAcknowledgeFailed>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e02d      	b.n	8006aec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a96:	d021      	beq.n	8006adc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a98:	f7fd fca2 	bl	80043e0 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d302      	bcc.n	8006aae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d116      	bne.n	8006adc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac8:	f043 0220 	orr.w	r2, r3, #32
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e007      	b.n	8006aec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d1ca      	bne.n	8006a80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b00:	e042      	b.n	8006b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b10      	cmp	r3, #16
 8006b0e:	d119      	bne.n	8006b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0210 	mvn.w	r2, #16
 8006b18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e029      	b.n	8006b98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b44:	f7fd fc4c 	bl	80043e0 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d302      	bcc.n	8006b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d116      	bne.n	8006b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	f043 0220 	orr.w	r2, r3, #32
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e007      	b.n	8006b98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d1b5      	bne.n	8006b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb6:	d11b      	bne.n	8006bf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	f043 0204 	orr.w	r2, r3, #4
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c00:	b08f      	sub	sp, #60	; 0x3c
 8006c02:	af0a      	add	r7, sp, #40	; 0x28
 8006c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e10f      	b.n	8006e30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f009 fe50 	bl	80108d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2203      	movs	r2, #3
 8006c34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f003 fa5d 	bl	800a10e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	603b      	str	r3, [r7, #0]
 8006c5a:	687e      	ldr	r6, [r7, #4]
 8006c5c:	466d      	mov	r5, sp
 8006c5e:	f106 0410 	add.w	r4, r6, #16
 8006c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c72:	1d33      	adds	r3, r6, #4
 8006c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c76:	6838      	ldr	r0, [r7, #0]
 8006c78:	f003 f934 	bl	8009ee4 <USB_CoreInit>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e0d0      	b.n	8006e30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2100      	movs	r1, #0
 8006c94:	4618      	mov	r0, r3
 8006c96:	f003 fa4b 	bl	800a130 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	73fb      	strb	r3, [r7, #15]
 8006c9e:	e04a      	b.n	8006d36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ca0:	7bfa      	ldrb	r2, [r7, #15]
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	333d      	adds	r3, #61	; 0x3d
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006cb4:	7bfa      	ldrb	r2, [r7, #15]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	333c      	adds	r3, #60	; 0x3c
 8006cc4:	7bfa      	ldrb	r2, [r7, #15]
 8006cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006cc8:	7bfa      	ldrb	r2, [r7, #15]
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	b298      	uxth	r0, r3
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	440b      	add	r3, r1
 8006cda:	3342      	adds	r3, #66	; 0x42
 8006cdc:	4602      	mov	r2, r0
 8006cde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006ce0:	7bfa      	ldrb	r2, [r7, #15]
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	1a9b      	subs	r3, r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	333f      	adds	r3, #63	; 0x3f
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006cf4:	7bfa      	ldrb	r2, [r7, #15]
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	1a9b      	subs	r3, r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	440b      	add	r3, r1
 8006d02:	3344      	adds	r3, #68	; 0x44
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d08:	7bfa      	ldrb	r2, [r7, #15]
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	3348      	adds	r3, #72	; 0x48
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d1c:	7bfa      	ldrb	r2, [r7, #15]
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	4613      	mov	r3, r2
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	3350      	adds	r3, #80	; 0x50
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	3301      	adds	r3, #1
 8006d34:	73fb      	strb	r3, [r7, #15]
 8006d36:	7bfa      	ldrb	r2, [r7, #15]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d3af      	bcc.n	8006ca0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]
 8006d44:	e044      	b.n	8006dd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d46:	7bfa      	ldrb	r2, [r7, #15]
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006d58:	2200      	movs	r2, #0
 8006d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d5c:	7bfa      	ldrb	r2, [r7, #15]
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	4613      	mov	r3, r2
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006d6e:	7bfa      	ldrb	r2, [r7, #15]
 8006d70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d72:	7bfa      	ldrb	r2, [r7, #15]
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	4613      	mov	r3, r2
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	1a9b      	subs	r3, r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	440b      	add	r3, r1
 8006d80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d88:	7bfa      	ldrb	r2, [r7, #15]
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	1a9b      	subs	r3, r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d9e:	7bfa      	ldrb	r2, [r7, #15]
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	1a9b      	subs	r3, r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006db4:	7bfa      	ldrb	r2, [r7, #15]
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	4613      	mov	r3, r2
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	7bfa      	ldrb	r2, [r7, #15]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d3b5      	bcc.n	8006d46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	687e      	ldr	r6, [r7, #4]
 8006de2:	466d      	mov	r5, sp
 8006de4:	f106 0410 	add.w	r4, r6, #16
 8006de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006df0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006df4:	e885 0003 	stmia.w	r5, {r0, r1}
 8006df8:	1d33      	adds	r3, r6, #4
 8006dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006dfc:	6838      	ldr	r0, [r7, #0]
 8006dfe:	f003 f9e3 	bl	800a1c8 <USB_DevInit>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e00d      	b.n	8006e30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f004 fa5f 	bl	800b2ec <USB_DevDisconnect>

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_PCD_Start+0x1c>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e020      	b.n	8006e96 <HAL_PCD_Start+0x5e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d109      	bne.n	8006e78 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d005      	beq.n	8006e78 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f003 f935 	bl	800a0ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f004 fa0f 	bl	800b2aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e9e:	b590      	push	{r4, r7, lr}
 8006ea0:	b08d      	sub	sp, #52	; 0x34
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f004 facd 	bl	800b454 <USB_GetMode>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f040 839d 	bne.w	80075fc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f004 fa31 	bl	800b32e <USB_ReadInterrupts>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 8393 	beq.w	80075fa <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f004 fa28 	bl	800b32e <USB_ReadInterrupts>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d107      	bne.n	8006ef8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695a      	ldr	r2, [r3, #20]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f002 0202 	and.w	r2, r2, #2
 8006ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f004 fa16 	bl	800b32e <USB_ReadInterrupts>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f003 0310 	and.w	r3, r3, #16
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d161      	bne.n	8006fd0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699a      	ldr	r2, [r3, #24]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0210 	bic.w	r2, r2, #16
 8006f1a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f003 020f 	and.w	r2, r3, #15
 8006f28:	4613      	mov	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	1a9b      	subs	r3, r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	4413      	add	r3, r2
 8006f38:	3304      	adds	r3, #4
 8006f3a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	0c5b      	lsrs	r3, r3, #17
 8006f40:	f003 030f 	and.w	r3, r3, #15
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d124      	bne.n	8006f92 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006f4e:	4013      	ands	r3, r2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d035      	beq.n	8006fc0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	091b      	lsrs	r3, r3, #4
 8006f5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	6a38      	ldr	r0, [r7, #32]
 8006f68:	f004 f84d 	bl	800b006 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	091b      	lsrs	r3, r3, #4
 8006f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f78:	441a      	add	r2, r3
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	091b      	lsrs	r3, r3, #4
 8006f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f8a:	441a      	add	r2, r3
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	619a      	str	r2, [r3, #24]
 8006f90:	e016      	b.n	8006fc0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	0c5b      	lsrs	r3, r3, #17
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	2b06      	cmp	r3, #6
 8006f9c:	d110      	bne.n	8006fc0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6a38      	ldr	r0, [r7, #32]
 8006faa:	f004 f82c 	bl	800b006 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	699a      	ldr	r2, [r3, #24]
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fba:	441a      	add	r2, r3
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699a      	ldr	r2, [r3, #24]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0210 	orr.w	r2, r2, #16
 8006fce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f004 f9aa 	bl	800b32e <USB_ReadInterrupts>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fe0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fe4:	d16e      	bne.n	80070c4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f004 f9b0 	bl	800b354 <USB_ReadDevAllOutEpInterrupt>
 8006ff4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006ff6:	e062      	b.n	80070be <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d057      	beq.n	80070b2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007008:	b2d2      	uxtb	r2, r2
 800700a:	4611      	mov	r1, r2
 800700c:	4618      	mov	r0, r3
 800700e:	f004 f9d5 	bl	800b3bc <USB_ReadDevOutEPInterrupt>
 8007012:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00c      	beq.n	8007038 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702a:	461a      	mov	r2, r3
 800702c:	2301      	movs	r3, #1
 800702e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fdb0 	bl	8007b98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f003 0308 	and.w	r3, r3, #8
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00c      	beq.n	800705c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704e:	461a      	mov	r2, r3
 8007050:	2308      	movs	r3, #8
 8007052:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 feaa 	bl	8007db0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	2b00      	cmp	r3, #0
 8007064:	d008      	beq.n	8007078 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	461a      	mov	r2, r3
 8007074:	2310      	movs	r3, #16
 8007076:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d008      	beq.n	8007094 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708e:	461a      	mov	r2, r3
 8007090:	2320      	movs	r3, #32
 8007092:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070aa:	461a      	mov	r2, r3
 80070ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	3301      	adds	r3, #1
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d199      	bne.n	8006ff8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f004 f930 	bl	800b32e <USB_ReadInterrupts>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070d8:	f040 80c0 	bne.w	800725c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f004 f951 	bl	800b388 <USB_ReadDevAllInEpInterrupt>
 80070e6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80070ec:	e0b2      	b.n	8007254 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 80a7 	beq.w	8007248 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	4611      	mov	r1, r2
 8007104:	4618      	mov	r0, r3
 8007106:	f004 f977 	bl	800b3f8 <USB_ReadDevInEPInterrupt>
 800710a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d057      	beq.n	80071c6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	2201      	movs	r2, #1
 800711e:	fa02 f303 	lsl.w	r3, r2, r3
 8007122:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	43db      	mvns	r3, r3
 8007130:	69f9      	ldr	r1, [r7, #28]
 8007132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007136:	4013      	ands	r3, r2
 8007138:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007146:	461a      	mov	r2, r3
 8007148:	2301      	movs	r3, #1
 800714a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d132      	bne.n	80071ba <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007158:	4613      	mov	r3, r2
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	3348      	adds	r3, #72	; 0x48
 8007164:	6819      	ldr	r1, [r3, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800716a:	4613      	mov	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	1a9b      	subs	r3, r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4403      	add	r3, r0
 8007174:	3344      	adds	r3, #68	; 0x44
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4419      	add	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717e:	4613      	mov	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4403      	add	r3, r0
 8007188:	3348      	adds	r3, #72	; 0x48
 800718a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	2b00      	cmp	r3, #0
 8007190:	d113      	bne.n	80071ba <HAL_PCD_IRQHandler+0x31c>
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007196:	4613      	mov	r3, r2
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	440b      	add	r3, r1
 80071a0:	3350      	adds	r3, #80	; 0x50
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d108      	bne.n	80071ba <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80071b2:	461a      	mov	r2, r3
 80071b4:	2101      	movs	r1, #1
 80071b6:	f004 f97f 	bl	800b4b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f009 fc14 	bl	80109ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d008      	beq.n	80071e2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071dc:	461a      	mov	r2, r3
 80071de:	2308      	movs	r3, #8
 80071e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d008      	beq.n	80071fe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f8:	461a      	mov	r2, r3
 80071fa:	2310      	movs	r3, #16
 80071fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d008      	beq.n	800721a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007214:	461a      	mov	r2, r3
 8007216:	2340      	movs	r3, #64	; 0x40
 8007218:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d008      	beq.n	8007236 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	461a      	mov	r2, r3
 8007232:	2302      	movs	r3, #2
 8007234:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fc1b 	bl	8007a7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	3301      	adds	r3, #1
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	085b      	lsrs	r3, r3, #1
 8007252:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	f47f af49 	bne.w	80070ee <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f004 f864 	bl	800b32e <USB_ReadInterrupts>
 8007266:	4603      	mov	r3, r0
 8007268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800726c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007270:	d122      	bne.n	80072b8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007280:	f023 0301 	bic.w	r3, r3, #1
 8007284:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800728c:	2b01      	cmp	r3, #1
 800728e:	d108      	bne.n	80072a2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007298:	2100      	movs	r1, #0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fe26 	bl	8007eec <HAL_PCDEx_LPM_Callback>
 80072a0:	e002      	b.n	80072a8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f009 fc1a 	bl	8010adc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695a      	ldr	r2, [r3, #20]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80072b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4618      	mov	r0, r3
 80072be:	f004 f836 	bl	800b32e <USB_ReadInterrupts>
 80072c2:	4603      	mov	r3, r0
 80072c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072cc:	d112      	bne.n	80072f4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d102      	bne.n	80072e4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f009 fbd6 	bl	8010a90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695a      	ldr	r2, [r3, #20]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80072f2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f004 f818 	bl	800b32e <USB_ReadInterrupts>
 80072fe:	4603      	mov	r3, r0
 8007300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007308:	f040 80c7 	bne.w	800749a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800731a:	f023 0301 	bic.w	r3, r3, #1
 800731e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2110      	movs	r1, #16
 8007326:	4618      	mov	r0, r3
 8007328:	f003 f8b2 	bl	800a490 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800732c:	2300      	movs	r3, #0
 800732e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007330:	e056      	b.n	80073e0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733e:	461a      	mov	r2, r3
 8007340:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007344:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007356:	0151      	lsls	r1, r2, #5
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	440a      	add	r2, r1
 800735c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007360:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007364:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007380:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007384:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007392:	461a      	mov	r2, r3
 8007394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007398:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073aa:	0151      	lsls	r1, r2, #5
 80073ac:	69fa      	ldr	r2, [r7, #28]
 80073ae:	440a      	add	r2, r1
 80073b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ca:	0151      	lsls	r1, r2, #5
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	440a      	add	r2, r1
 80073d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	3301      	adds	r3, #1
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d3a3      	bcc.n	8007332 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	69fa      	ldr	r2, [r7, #28]
 80073f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80073fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007416:	f043 030b 	orr.w	r3, r3, #11
 800741a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800742c:	f043 030b 	orr.w	r3, r3, #11
 8007430:	6453      	str	r3, [r2, #68]	; 0x44
 8007432:	e015      	b.n	8007460 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007442:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007446:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800744a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800745a:	f043 030b 	orr.w	r3, r3, #11
 800745e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	69fa      	ldr	r2, [r7, #28]
 800746a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800746e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007472:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007484:	461a      	mov	r2, r3
 8007486:	f004 f817 	bl	800b4b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f003 ff45 	bl	800b32e <USB_ReadInterrupts>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ae:	d124      	bne.n	80074fa <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f003 ffdb 	bl	800b470 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f003 f843 	bl	800a54a <USB_GetDevSpeed>
 80074c4:	4603      	mov	r3, r0
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681c      	ldr	r4, [r3, #0]
 80074d0:	f001 f958 	bl	8008784 <HAL_RCC_GetHCLKFreq>
 80074d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	4620      	mov	r0, r4
 80074e0:	f002 fd62 	bl	8009fa8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f009 faaa 	bl	8010a3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	695a      	ldr	r2, [r3, #20]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80074f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f003 ff15 	bl	800b32e <USB_ReadInterrupts>
 8007504:	4603      	mov	r3, r0
 8007506:	f003 0308 	and.w	r3, r3, #8
 800750a:	2b08      	cmp	r3, #8
 800750c:	d10a      	bne.n	8007524 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f009 fa87 	bl	8010a22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695a      	ldr	r2, [r3, #20]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f002 0208 	and.w	r2, r2, #8
 8007522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f003 ff00 	bl	800b32e <USB_ReadInterrupts>
 800752e:	4603      	mov	r3, r0
 8007530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007538:	d10f      	bne.n	800755a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	b2db      	uxtb	r3, r3
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f009 fae9 	bl	8010b1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695a      	ldr	r2, [r3, #20]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f003 fee5 	bl	800b32e <USB_ReadInterrupts>
 8007564:	4603      	mov	r3, r0
 8007566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800756a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800756e:	d10f      	bne.n	8007590 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	b2db      	uxtb	r3, r3
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f009 fabc 	bl	8010af8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	695a      	ldr	r2, [r3, #20]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800758e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4618      	mov	r0, r3
 8007596:	f003 feca 	bl	800b32e <USB_ReadInterrupts>
 800759a:	4603      	mov	r3, r0
 800759c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a4:	d10a      	bne.n	80075bc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f009 faca 	bl	8010b40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695a      	ldr	r2, [r3, #20]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80075ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f003 feb4 	bl	800b32e <USB_ReadInterrupts>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d115      	bne.n	80075fc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	f003 0304 	and.w	r3, r3, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f009 faba 	bl	8010b5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6859      	ldr	r1, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	605a      	str	r2, [r3, #4]
 80075f8:	e000      	b.n	80075fc <HAL_PCD_IRQHandler+0x75e>
      return;
 80075fa:	bf00      	nop
    }
  }
}
 80075fc:	3734      	adds	r7, #52	; 0x34
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd90      	pop	{r4, r7, pc}

08007602 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_PCD_SetAddress+0x1a>
 8007618:	2302      	movs	r3, #2
 800761a:	e013      	b.n	8007644 <HAL_PCD_SetAddress+0x42>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	78fa      	ldrb	r2, [r7, #3]
 8007628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	78fa      	ldrb	r2, [r7, #3]
 8007632:	4611      	mov	r1, r2
 8007634:	4618      	mov	r0, r3
 8007636:	f003 fe12 	bl	800b25e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	4608      	mov	r0, r1
 8007656:	4611      	mov	r1, r2
 8007658:	461a      	mov	r2, r3
 800765a:	4603      	mov	r3, r0
 800765c:	70fb      	strb	r3, [r7, #3]
 800765e:	460b      	mov	r3, r1
 8007660:	803b      	strh	r3, [r7, #0]
 8007662:	4613      	mov	r3, r2
 8007664:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800766a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800766e:	2b00      	cmp	r3, #0
 8007670:	da0f      	bge.n	8007692 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007672:	78fb      	ldrb	r3, [r7, #3]
 8007674:	f003 020f 	and.w	r2, r3, #15
 8007678:	4613      	mov	r3, r2
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	1a9b      	subs	r3, r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	3338      	adds	r3, #56	; 0x38
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	4413      	add	r3, r2
 8007686:	3304      	adds	r3, #4
 8007688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	705a      	strb	r2, [r3, #1]
 8007690:	e00f      	b.n	80076b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	f003 020f 	and.w	r2, r3, #15
 8007698:	4613      	mov	r3, r2
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	1a9b      	subs	r3, r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	4413      	add	r3, r2
 80076a8:	3304      	adds	r3, #4
 80076aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80076b2:	78fb      	ldrb	r3, [r7, #3]
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80076be:	883a      	ldrh	r2, [r7, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	78ba      	ldrb	r2, [r7, #2]
 80076c8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	785b      	ldrb	r3, [r3, #1]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80076dc:	78bb      	ldrb	r3, [r7, #2]
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d102      	bne.n	80076e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <HAL_PCD_EP_Open+0xaa>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e00e      	b.n	8007714 <HAL_PCD_EP_Open+0xc8>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	4618      	mov	r0, r3
 8007706:	f002 ff45 	bl	800a594 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007712:	7afb      	ldrb	r3, [r7, #11]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800772c:	2b00      	cmp	r3, #0
 800772e:	da0f      	bge.n	8007750 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	f003 020f 	and.w	r2, r3, #15
 8007736:	4613      	mov	r3, r2
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	1a9b      	subs	r3, r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	3338      	adds	r3, #56	; 0x38
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	4413      	add	r3, r2
 8007744:	3304      	adds	r3, #4
 8007746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	705a      	strb	r2, [r3, #1]
 800774e:	e00f      	b.n	8007770 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	f003 020f 	and.w	r2, r3, #15
 8007756:	4613      	mov	r3, r2
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	4413      	add	r3, r2
 8007766:	3304      	adds	r3, #4
 8007768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	b2da      	uxtb	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_PCD_EP_Close+0x6e>
 8007786:	2302      	movs	r3, #2
 8007788:	e00e      	b.n	80077a8 <HAL_PCD_EP_Close+0x8c>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68f9      	ldr	r1, [r7, #12]
 8007798:	4618      	mov	r0, r3
 800779a:	f002 ff83 	bl	800a6a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	607a      	str	r2, [r7, #4]
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	460b      	mov	r3, r1
 80077be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077c0:	7afb      	ldrb	r3, [r7, #11]
 80077c2:	f003 020f 	and.w	r2, r3, #15
 80077c6:	4613      	mov	r3, r2
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4413      	add	r3, r2
 80077d6:	3304      	adds	r3, #4
 80077d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2200      	movs	r2, #0
 80077ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2200      	movs	r2, #0
 80077f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077f2:	7afb      	ldrb	r3, [r7, #11]
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d102      	bne.n	800780c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800780c:	7afb      	ldrb	r3, [r7, #11]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	6979      	ldr	r1, [r7, #20]
 8007824:	f003 fa5e 	bl	800ace4 <USB_EP0StartXfer>
 8007828:	e008      	b.n	800783c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	6979      	ldr	r1, [r7, #20]
 8007838:	f003 f810 	bl	800a85c <USB_EPStartXfer>
  }

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	460b      	mov	r3, r1
 8007850:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	f003 020f 	and.w	r2, r3, #15
 8007858:	6879      	ldr	r1, [r7, #4]
 800785a:	4613      	mov	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	1a9b      	subs	r3, r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	440b      	add	r3, r1
 8007864:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007868:	681b      	ldr	r3, [r3, #0]
}
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b086      	sub	sp, #24
 800787a:	af00      	add	r7, sp, #0
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
 8007882:	460b      	mov	r3, r1
 8007884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007886:	7afb      	ldrb	r3, [r7, #11]
 8007888:	f003 020f 	and.w	r2, r3, #15
 800788c:	4613      	mov	r3, r2
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	1a9b      	subs	r3, r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	3338      	adds	r3, #56	; 0x38
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	3304      	adds	r3, #4
 800789c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2200      	movs	r2, #0
 80078ae:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2201      	movs	r2, #1
 80078b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078b6:	7afb      	ldrb	r3, [r7, #11]
 80078b8:	f003 030f 	and.w	r3, r3, #15
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d102      	bne.n	80078d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	f003 030f 	and.w	r3, r3, #15
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6818      	ldr	r0, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	461a      	mov	r2, r3
 80078e6:	6979      	ldr	r1, [r7, #20]
 80078e8:	f003 f9fc 	bl	800ace4 <USB_EP0StartXfer>
 80078ec:	e008      	b.n	8007900 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	6979      	ldr	r1, [r7, #20]
 80078fc:	f002 ffae 	bl	800a85c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	f003 020f 	and.w	r2, r3, #15
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d901      	bls.n	8007928 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e050      	b.n	80079ca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800792c:	2b00      	cmp	r3, #0
 800792e:	da0f      	bge.n	8007950 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	f003 020f 	and.w	r2, r3, #15
 8007936:	4613      	mov	r3, r2
 8007938:	00db      	lsls	r3, r3, #3
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	3338      	adds	r3, #56	; 0x38
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	4413      	add	r3, r2
 8007944:	3304      	adds	r3, #4
 8007946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2201      	movs	r2, #1
 800794c:	705a      	strb	r2, [r3, #1]
 800794e:	e00d      	b.n	800796c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007950:	78fa      	ldrb	r2, [r7, #3]
 8007952:	4613      	mov	r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	4413      	add	r3, r2
 8007962:	3304      	adds	r3, #4
 8007964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2201      	movs	r2, #1
 8007970:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	b2da      	uxtb	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_PCD_EP_SetStall+0x82>
 8007988:	2302      	movs	r3, #2
 800798a:	e01e      	b.n	80079ca <HAL_PCD_EP_SetStall+0xc0>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68f9      	ldr	r1, [r7, #12]
 800799a:	4618      	mov	r0, r3
 800799c:	f003 fb8b 	bl	800b0b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10a      	bne.n	80079c0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	b2d9      	uxtb	r1, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079ba:	461a      	mov	r2, r3
 80079bc:	f003 fd7c 	bl	800b4b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	f003 020f 	and.w	r2, r3, #15
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d901      	bls.n	80079f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e042      	b.n	8007a76 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da0f      	bge.n	8007a18 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	f003 020f 	and.w	r2, r3, #15
 80079fe:	4613      	mov	r3, r2
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	1a9b      	subs	r3, r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	3338      	adds	r3, #56	; 0x38
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	705a      	strb	r2, [r3, #1]
 8007a16:	e00f      	b.n	8007a38 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	f003 020f 	and.w	r2, r3, #15
 8007a1e:	4613      	mov	r3, r2
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	1a9b      	subs	r3, r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	3304      	adds	r3, #4
 8007a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	f003 030f 	and.w	r3, r3, #15
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_PCD_EP_ClrStall+0x86>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e00e      	b.n	8007a76 <HAL_PCD_EP_ClrStall+0xa4>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68f9      	ldr	r1, [r7, #12]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f003 fb93 	bl	800b192 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b08a      	sub	sp, #40	; 0x28
 8007a82:	af02      	add	r7, sp, #8
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	4613      	mov	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	1a9b      	subs	r3, r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	3338      	adds	r3, #56	; 0x38
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d901      	bls.n	8007ab6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e06c      	b.n	8007b90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	695a      	ldr	r2, [r3, #20]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d902      	bls.n	8007ad2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	3303      	adds	r3, #3
 8007ad6:	089b      	lsrs	r3, r3, #2
 8007ad8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ada:	e02b      	b.n	8007b34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	695a      	ldr	r2, [r3, #20]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d902      	bls.n	8007af8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	3303      	adds	r3, #3
 8007afc:	089b      	lsrs	r3, r3, #2
 8007afe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	68d9      	ldr	r1, [r3, #12]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	4603      	mov	r3, r0
 8007b16:	6978      	ldr	r0, [r7, #20]
 8007b18:	f003 fa37 	bl	800af8a <USB_WritePacket>

    ep->xfer_buff  += len;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	441a      	add	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	699a      	ldr	r2, [r3, #24]
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	441a      	add	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d809      	bhi.n	8007b5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d203      	bcs.n	8007b5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1be      	bne.n	8007adc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	695a      	ldr	r2, [r3, #20]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d811      	bhi.n	8007b8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	f003 030f 	and.w	r3, r3, #15
 8007b70:	2201      	movs	r2, #1
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	43db      	mvns	r3, r3
 8007b84:	6939      	ldr	r1, [r7, #16]
 8007b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3720      	adds	r7, #32
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	333c      	adds	r3, #60	; 0x3c
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	f040 80a0 	bne.w	8007d10 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d015      	beq.n	8007c06 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a72      	ldr	r2, [pc, #456]	; (8007da8 <PCD_EP_OutXfrComplete_int+0x210>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	f240 80dd 	bls.w	8007d9e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 80d7 	beq.w	8007d9e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c02:	6093      	str	r3, [r2, #8]
 8007c04:	e0cb      	b.n	8007d9e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f003 0320 	and.w	r3, r3, #32
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d009      	beq.n	8007c24 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	2320      	movs	r3, #32
 8007c20:	6093      	str	r3, [r2, #8]
 8007c22:	e0bc      	b.n	8007d9e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f040 80b7 	bne.w	8007d9e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4a5d      	ldr	r2, [pc, #372]	; (8007da8 <PCD_EP_OutXfrComplete_int+0x210>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d90f      	bls.n	8007c58 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c54:	6093      	str	r3, [r2, #8]
 8007c56:	e0a2      	b.n	8007d9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007c6a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	0159      	lsls	r1, r3, #5
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	440b      	add	r3, r1
 8007c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007c7e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	4613      	mov	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4403      	add	r3, r0
 8007c8e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007c92:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ca6:	6819      	ldr	r1, [r3, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	4613      	mov	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	1a9b      	subs	r3, r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4403      	add	r3, r0
 8007cb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4419      	add	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	1a9b      	subs	r3, r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4403      	add	r3, r0
 8007ccc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007cd0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d114      	bne.n	8007d02 <PCD_EP_OutXfrComplete_int+0x16a>
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	1a9b      	subs	r3, r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d108      	bne.n	8007d02 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	f003 fbdb 	bl	800b4b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f008 fe55 	bl	80109b8 <HAL_PCD_DataOutStageCallback>
 8007d0e:	e046      	b.n	8007d9e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4a26      	ldr	r2, [pc, #152]	; (8007dac <PCD_EP_OutXfrComplete_int+0x214>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d124      	bne.n	8007d62 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00a      	beq.n	8007d38 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d34:	6093      	str	r3, [r2, #8]
 8007d36:	e032      	b.n	8007d9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f003 0320 	and.w	r3, r3, #32
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d008      	beq.n	8007d54 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4e:	461a      	mov	r2, r3
 8007d50:	2320      	movs	r3, #32
 8007d52:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f008 fe2c 	bl	80109b8 <HAL_PCD_DataOutStageCallback>
 8007d60:	e01d      	b.n	8007d9e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d114      	bne.n	8007d92 <PCD_EP_OutXfrComplete_int+0x1fa>
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d108      	bne.n	8007d92 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6818      	ldr	r0, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	f003 fb93 	bl	800b4b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f008 fe0d 	bl	80109b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	4f54300a 	.word	0x4f54300a
 8007dac:	4f54310a 	.word	0x4f54310a

08007db0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	333c      	adds	r3, #60	; 0x3c
 8007dc8:	3304      	adds	r3, #4
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	4a15      	ldr	r2, [pc, #84]	; (8007e38 <PCD_EP_OutSetupPacket_int+0x88>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d90e      	bls.n	8007e04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f008 fdc5 	bl	8010994 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4a0a      	ldr	r2, [pc, #40]	; (8007e38 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d90c      	bls.n	8007e2c <PCD_EP_OutSetupPacket_int+0x7c>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d108      	bne.n	8007e2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e24:	461a      	mov	r2, r3
 8007e26:	2101      	movs	r1, #1
 8007e28:	f003 fb46 	bl	800b4b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	4f54300a 	.word	0x4f54300a

08007e3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d107      	bne.n	8007e6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007e5a:	883b      	ldrh	r3, [r7, #0]
 8007e5c:	0419      	lsls	r1, r3, #16
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	629a      	str	r2, [r3, #40]	; 0x28
 8007e68:	e028      	b.n	8007ebc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e70:	0c1b      	lsrs	r3, r3, #16
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	4413      	add	r3, r2
 8007e76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]
 8007e7c:	e00d      	b.n	8007e9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	3340      	adds	r3, #64	; 0x40
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	0c1b      	lsrs	r3, r3, #16
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	4413      	add	r3, r2
 8007e92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	3301      	adds	r3, #1
 8007e98:	73fb      	strb	r3, [r7, #15]
 8007e9a:	7bfa      	ldrb	r2, [r7, #15]
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d3ec      	bcc.n	8007e7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007ea4:	883b      	ldrh	r3, [r7, #0]
 8007ea6:	0418      	lsls	r0, r3, #16
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6819      	ldr	r1, [r3, #0]
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	4302      	orrs	r2, r0
 8007eb4:	3340      	adds	r3, #64	; 0x40
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	440b      	add	r3, r1
 8007eba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	887a      	ldrh	r2, [r7, #2]
 8007edc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e264      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d075      	beq.n	800800e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f22:	4ba3      	ldr	r3, [pc, #652]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f003 030c 	and.w	r3, r3, #12
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d00c      	beq.n	8007f48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f2e:	4ba0      	ldr	r3, [pc, #640]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d112      	bne.n	8007f60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f3a:	4b9d      	ldr	r3, [pc, #628]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f46:	d10b      	bne.n	8007f60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f48:	4b99      	ldr	r3, [pc, #612]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d05b      	beq.n	800800c <HAL_RCC_OscConfig+0x108>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d157      	bne.n	800800c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e23f      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d106      	bne.n	8007f78 <HAL_RCC_OscConfig+0x74>
 8007f6a:	4b91      	ldr	r3, [pc, #580]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a90      	ldr	r2, [pc, #576]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	e01d      	b.n	8007fb4 <HAL_RCC_OscConfig+0xb0>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f80:	d10c      	bne.n	8007f9c <HAL_RCC_OscConfig+0x98>
 8007f82:	4b8b      	ldr	r3, [pc, #556]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a8a      	ldr	r2, [pc, #552]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	4b88      	ldr	r3, [pc, #544]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a87      	ldr	r2, [pc, #540]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f98:	6013      	str	r3, [r2, #0]
 8007f9a:	e00b      	b.n	8007fb4 <HAL_RCC_OscConfig+0xb0>
 8007f9c:	4b84      	ldr	r3, [pc, #528]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a83      	ldr	r2, [pc, #524]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fa6:	6013      	str	r3, [r2, #0]
 8007fa8:	4b81      	ldr	r3, [pc, #516]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a80      	ldr	r2, [pc, #512]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d013      	beq.n	8007fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fbc:	f7fc fa10 	bl	80043e0 <HAL_GetTick>
 8007fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fc4:	f7fc fa0c 	bl	80043e0 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b64      	cmp	r3, #100	; 0x64
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e204      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fd6:	4b76      	ldr	r3, [pc, #472]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0f0      	beq.n	8007fc4 <HAL_RCC_OscConfig+0xc0>
 8007fe2:	e014      	b.n	800800e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fe4:	f7fc f9fc 	bl	80043e0 <HAL_GetTick>
 8007fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fec:	f7fc f9f8 	bl	80043e0 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b64      	cmp	r3, #100	; 0x64
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e1f0      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ffe:	4b6c      	ldr	r3, [pc, #432]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f0      	bne.n	8007fec <HAL_RCC_OscConfig+0xe8>
 800800a:	e000      	b.n	800800e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800800c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d063      	beq.n	80080e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800801a:	4b65      	ldr	r3, [pc, #404]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 030c 	and.w	r3, r3, #12
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00b      	beq.n	800803e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008026:	4b62      	ldr	r3, [pc, #392]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800802e:	2b08      	cmp	r3, #8
 8008030:	d11c      	bne.n	800806c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008032:	4b5f      	ldr	r3, [pc, #380]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d116      	bne.n	800806c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800803e:	4b5c      	ldr	r3, [pc, #368]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <HAL_RCC_OscConfig+0x152>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d001      	beq.n	8008056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e1c4      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008056:	4b56      	ldr	r3, [pc, #344]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	4952      	ldr	r1, [pc, #328]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008066:	4313      	orrs	r3, r2
 8008068:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800806a:	e03a      	b.n	80080e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d020      	beq.n	80080b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008074:	4b4f      	ldr	r3, [pc, #316]	; (80081b4 <HAL_RCC_OscConfig+0x2b0>)
 8008076:	2201      	movs	r2, #1
 8008078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807a:	f7fc f9b1 	bl	80043e0 <HAL_GetTick>
 800807e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008080:	e008      	b.n	8008094 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008082:	f7fc f9ad 	bl	80043e0 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d901      	bls.n	8008094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e1a5      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008094:	4b46      	ldr	r3, [pc, #280]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0f0      	beq.n	8008082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080a0:	4b43      	ldr	r3, [pc, #268]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	4940      	ldr	r1, [pc, #256]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	600b      	str	r3, [r1, #0]
 80080b4:	e015      	b.n	80080e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080b6:	4b3f      	ldr	r3, [pc, #252]	; (80081b4 <HAL_RCC_OscConfig+0x2b0>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080bc:	f7fc f990 	bl	80043e0 <HAL_GetTick>
 80080c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080c4:	f7fc f98c 	bl	80043e0 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e184      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080d6:	4b36      	ldr	r3, [pc, #216]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1f0      	bne.n	80080c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0308 	and.w	r3, r3, #8
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d030      	beq.n	8008150 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d016      	beq.n	8008124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080f6:	4b30      	ldr	r3, [pc, #192]	; (80081b8 <HAL_RCC_OscConfig+0x2b4>)
 80080f8:	2201      	movs	r2, #1
 80080fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080fc:	f7fc f970 	bl	80043e0 <HAL_GetTick>
 8008100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008102:	e008      	b.n	8008116 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008104:	f7fc f96c 	bl	80043e0 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d901      	bls.n	8008116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e164      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008116:	4b26      	ldr	r3, [pc, #152]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0f0      	beq.n	8008104 <HAL_RCC_OscConfig+0x200>
 8008122:	e015      	b.n	8008150 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008124:	4b24      	ldr	r3, [pc, #144]	; (80081b8 <HAL_RCC_OscConfig+0x2b4>)
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800812a:	f7fc f959 	bl	80043e0 <HAL_GetTick>
 800812e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008130:	e008      	b.n	8008144 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008132:	f7fc f955 	bl	80043e0 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e14d      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008144:	4b1a      	ldr	r3, [pc, #104]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f0      	bne.n	8008132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 80a0 	beq.w	800829e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800815e:	2300      	movs	r3, #0
 8008160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008162:	4b13      	ldr	r3, [pc, #76]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10f      	bne.n	800818e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800816e:	2300      	movs	r3, #0
 8008170:	60bb      	str	r3, [r7, #8]
 8008172:	4b0f      	ldr	r3, [pc, #60]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	4a0e      	ldr	r2, [pc, #56]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817c:	6413      	str	r3, [r2, #64]	; 0x40
 800817e:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <HAL_RCC_OscConfig+0x2ac>)
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008186:	60bb      	str	r3, [r7, #8]
 8008188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800818a:	2301      	movs	r3, #1
 800818c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800818e:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <HAL_RCC_OscConfig+0x2b8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008196:	2b00      	cmp	r3, #0
 8008198:	d121      	bne.n	80081de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800819a:	4b08      	ldr	r3, [pc, #32]	; (80081bc <HAL_RCC_OscConfig+0x2b8>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a07      	ldr	r2, [pc, #28]	; (80081bc <HAL_RCC_OscConfig+0x2b8>)
 80081a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081a6:	f7fc f91b 	bl	80043e0 <HAL_GetTick>
 80081aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ac:	e011      	b.n	80081d2 <HAL_RCC_OscConfig+0x2ce>
 80081ae:	bf00      	nop
 80081b0:	40023800 	.word	0x40023800
 80081b4:	42470000 	.word	0x42470000
 80081b8:	42470e80 	.word	0x42470e80
 80081bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081c0:	f7fc f90e 	bl	80043e0 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e106      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081d2:	4b85      	ldr	r3, [pc, #532]	; (80083e8 <HAL_RCC_OscConfig+0x4e4>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f0      	beq.n	80081c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d106      	bne.n	80081f4 <HAL_RCC_OscConfig+0x2f0>
 80081e6:	4b81      	ldr	r3, [pc, #516]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 80081e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ea:	4a80      	ldr	r2, [pc, #512]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 80081ec:	f043 0301 	orr.w	r3, r3, #1
 80081f0:	6713      	str	r3, [r2, #112]	; 0x70
 80081f2:	e01c      	b.n	800822e <HAL_RCC_OscConfig+0x32a>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	2b05      	cmp	r3, #5
 80081fa:	d10c      	bne.n	8008216 <HAL_RCC_OscConfig+0x312>
 80081fc:	4b7b      	ldr	r3, [pc, #492]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 80081fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008200:	4a7a      	ldr	r2, [pc, #488]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 8008202:	f043 0304 	orr.w	r3, r3, #4
 8008206:	6713      	str	r3, [r2, #112]	; 0x70
 8008208:	4b78      	ldr	r3, [pc, #480]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 800820a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820c:	4a77      	ldr	r2, [pc, #476]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 800820e:	f043 0301 	orr.w	r3, r3, #1
 8008212:	6713      	str	r3, [r2, #112]	; 0x70
 8008214:	e00b      	b.n	800822e <HAL_RCC_OscConfig+0x32a>
 8008216:	4b75      	ldr	r3, [pc, #468]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	4a74      	ldr	r2, [pc, #464]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 800821c:	f023 0301 	bic.w	r3, r3, #1
 8008220:	6713      	str	r3, [r2, #112]	; 0x70
 8008222:	4b72      	ldr	r3, [pc, #456]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 8008224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008226:	4a71      	ldr	r2, [pc, #452]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 8008228:	f023 0304 	bic.w	r3, r3, #4
 800822c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d015      	beq.n	8008262 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008236:	f7fc f8d3 	bl	80043e0 <HAL_GetTick>
 800823a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800823c:	e00a      	b.n	8008254 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800823e:	f7fc f8cf 	bl	80043e0 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	f241 3288 	movw	r2, #5000	; 0x1388
 800824c:	4293      	cmp	r3, r2
 800824e:	d901      	bls.n	8008254 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e0c5      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008254:	4b65      	ldr	r3, [pc, #404]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 8008256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0ee      	beq.n	800823e <HAL_RCC_OscConfig+0x33a>
 8008260:	e014      	b.n	800828c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008262:	f7fc f8bd 	bl	80043e0 <HAL_GetTick>
 8008266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008268:	e00a      	b.n	8008280 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800826a:	f7fc f8b9 	bl	80043e0 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	f241 3288 	movw	r2, #5000	; 0x1388
 8008278:	4293      	cmp	r3, r2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e0af      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008280:	4b5a      	ldr	r3, [pc, #360]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 8008282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1ee      	bne.n	800826a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d105      	bne.n	800829e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008292:	4b56      	ldr	r3, [pc, #344]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	4a55      	ldr	r2, [pc, #340]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 8008298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800829c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 809b 	beq.w	80083de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082a8:	4b50      	ldr	r3, [pc, #320]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 030c 	and.w	r3, r3, #12
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d05c      	beq.n	800836e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d141      	bne.n	8008340 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082bc:	4b4c      	ldr	r3, [pc, #304]	; (80083f0 <HAL_RCC_OscConfig+0x4ec>)
 80082be:	2200      	movs	r2, #0
 80082c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082c2:	f7fc f88d 	bl	80043e0 <HAL_GetTick>
 80082c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082c8:	e008      	b.n	80082dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ca:	f7fc f889 	bl	80043e0 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d901      	bls.n	80082dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e081      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082dc:	4b43      	ldr	r3, [pc, #268]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1f0      	bne.n	80082ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	69da      	ldr	r2, [r3, #28]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f6:	019b      	lsls	r3, r3, #6
 80082f8:	431a      	orrs	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fe:	085b      	lsrs	r3, r3, #1
 8008300:	3b01      	subs	r3, #1
 8008302:	041b      	lsls	r3, r3, #16
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	061b      	lsls	r3, r3, #24
 800830c:	4937      	ldr	r1, [pc, #220]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 800830e:	4313      	orrs	r3, r2
 8008310:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008312:	4b37      	ldr	r3, [pc, #220]	; (80083f0 <HAL_RCC_OscConfig+0x4ec>)
 8008314:	2201      	movs	r2, #1
 8008316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008318:	f7fc f862 	bl	80043e0 <HAL_GetTick>
 800831c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800831e:	e008      	b.n	8008332 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008320:	f7fc f85e 	bl	80043e0 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b02      	cmp	r3, #2
 800832c:	d901      	bls.n	8008332 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e056      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008332:	4b2e      	ldr	r3, [pc, #184]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0f0      	beq.n	8008320 <HAL_RCC_OscConfig+0x41c>
 800833e:	e04e      	b.n	80083de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008340:	4b2b      	ldr	r3, [pc, #172]	; (80083f0 <HAL_RCC_OscConfig+0x4ec>)
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008346:	f7fc f84b 	bl	80043e0 <HAL_GetTick>
 800834a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800834c:	e008      	b.n	8008360 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800834e:	f7fc f847 	bl	80043e0 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	2b02      	cmp	r3, #2
 800835a:	d901      	bls.n	8008360 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e03f      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008360:	4b22      	ldr	r3, [pc, #136]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1f0      	bne.n	800834e <HAL_RCC_OscConfig+0x44a>
 800836c:	e037      	b.n	80083de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d101      	bne.n	800837a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e032      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800837a:	4b1c      	ldr	r3, [pc, #112]	; (80083ec <HAL_RCC_OscConfig+0x4e8>)
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d028      	beq.n	80083da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008392:	429a      	cmp	r2, r3
 8008394:	d121      	bne.n	80083da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d11a      	bne.n	80083da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80083aa:	4013      	ands	r3, r2
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d111      	bne.n	80083da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	085b      	lsrs	r3, r3, #1
 80083c2:	3b01      	subs	r3, #1
 80083c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d107      	bne.n	80083da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d001      	beq.n	80083de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e000      	b.n	80083e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3718      	adds	r7, #24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	40007000 	.word	0x40007000
 80083ec:	40023800 	.word	0x40023800
 80083f0:	42470060 	.word	0x42470060

080083f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e0cc      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008408:	4b68      	ldr	r3, [pc, #416]	; (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0307 	and.w	r3, r3, #7
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d90c      	bls.n	8008430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008416:	4b65      	ldr	r3, [pc, #404]	; (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800841e:	4b63      	ldr	r3, [pc, #396]	; (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d001      	beq.n	8008430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e0b8      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d020      	beq.n	800847e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008448:	4b59      	ldr	r3, [pc, #356]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	4a58      	ldr	r2, [pc, #352]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 800844e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0308 	and.w	r3, r3, #8
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008460:	4b53      	ldr	r3, [pc, #332]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	4a52      	ldr	r2, [pc, #328]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800846a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800846c:	4b50      	ldr	r3, [pc, #320]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	494d      	ldr	r1, [pc, #308]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 800847a:	4313      	orrs	r3, r2
 800847c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d044      	beq.n	8008514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d107      	bne.n	80084a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008492:	4b47      	ldr	r3, [pc, #284]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d119      	bne.n	80084d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e07f      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d003      	beq.n	80084b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d107      	bne.n	80084c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084b2:	4b3f      	ldr	r3, [pc, #252]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e06f      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084c2:	4b3b      	ldr	r3, [pc, #236]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e067      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084d2:	4b37      	ldr	r3, [pc, #220]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f023 0203 	bic.w	r2, r3, #3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	4934      	ldr	r1, [pc, #208]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084e4:	f7fb ff7c 	bl	80043e0 <HAL_GetTick>
 80084e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ea:	e00a      	b.n	8008502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084ec:	f7fb ff78 	bl	80043e0 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e04f      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008502:	4b2b      	ldr	r3, [pc, #172]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 020c 	and.w	r2, r3, #12
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	429a      	cmp	r2, r3
 8008512:	d1eb      	bne.n	80084ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008514:	4b25      	ldr	r3, [pc, #148]	; (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d20c      	bcs.n	800853c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008522:	4b22      	ldr	r3, [pc, #136]	; (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	b2d2      	uxtb	r2, r2
 8008528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800852a:	4b20      	ldr	r3, [pc, #128]	; (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	429a      	cmp	r2, r3
 8008536:	d001      	beq.n	800853c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e032      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b00      	cmp	r3, #0
 8008546:	d008      	beq.n	800855a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008548:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	4916      	ldr	r1, [pc, #88]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008556:	4313      	orrs	r3, r2
 8008558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d009      	beq.n	800857a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008566:	4b12      	ldr	r3, [pc, #72]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	490e      	ldr	r1, [pc, #56]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008576:	4313      	orrs	r3, r2
 8008578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800857a:	f000 f821 	bl	80085c0 <HAL_RCC_GetSysClockFreq>
 800857e:	4602      	mov	r2, r0
 8008580:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	091b      	lsrs	r3, r3, #4
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	490a      	ldr	r1, [pc, #40]	; (80085b4 <HAL_RCC_ClockConfig+0x1c0>)
 800858c:	5ccb      	ldrb	r3, [r1, r3]
 800858e:	fa22 f303 	lsr.w	r3, r2, r3
 8008592:	4a09      	ldr	r2, [pc, #36]	; (80085b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008596:	4b09      	ldr	r3, [pc, #36]	; (80085bc <HAL_RCC_ClockConfig+0x1c8>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f7fb fad8 	bl	8003b50 <HAL_InitTick>

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	40023c00 	.word	0x40023c00
 80085b0:	40023800 	.word	0x40023800
 80085b4:	08017e94 	.word	0x08017e94
 80085b8:	2000002c 	.word	0x2000002c
 80085bc:	20000030 	.word	0x20000030

080085c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	607b      	str	r3, [r7, #4]
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	2300      	movs	r3, #0
 80085d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085d8:	4b67      	ldr	r3, [pc, #412]	; (8008778 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f003 030c 	and.w	r3, r3, #12
 80085e0:	2b08      	cmp	r3, #8
 80085e2:	d00d      	beq.n	8008600 <HAL_RCC_GetSysClockFreq+0x40>
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	f200 80bd 	bhi.w	8008764 <HAL_RCC_GetSysClockFreq+0x1a4>
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <HAL_RCC_GetSysClockFreq+0x34>
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d003      	beq.n	80085fa <HAL_RCC_GetSysClockFreq+0x3a>
 80085f2:	e0b7      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085f4:	4b61      	ldr	r3, [pc, #388]	; (800877c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80085f6:	60bb      	str	r3, [r7, #8]
       break;
 80085f8:	e0b7      	b.n	800876a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085fa:	4b61      	ldr	r3, [pc, #388]	; (8008780 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80085fc:	60bb      	str	r3, [r7, #8]
      break;
 80085fe:	e0b4      	b.n	800876a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008600:	4b5d      	ldr	r3, [pc, #372]	; (8008778 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008608:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800860a:	4b5b      	ldr	r3, [pc, #364]	; (8008778 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d04d      	beq.n	80086b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008616:	4b58      	ldr	r3, [pc, #352]	; (8008778 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	099b      	lsrs	r3, r3, #6
 800861c:	461a      	mov	r2, r3
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008626:	f04f 0100 	mov.w	r1, #0
 800862a:	ea02 0800 	and.w	r8, r2, r0
 800862e:	ea03 0901 	and.w	r9, r3, r1
 8008632:	4640      	mov	r0, r8
 8008634:	4649      	mov	r1, r9
 8008636:	f04f 0200 	mov.w	r2, #0
 800863a:	f04f 0300 	mov.w	r3, #0
 800863e:	014b      	lsls	r3, r1, #5
 8008640:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008644:	0142      	lsls	r2, r0, #5
 8008646:	4610      	mov	r0, r2
 8008648:	4619      	mov	r1, r3
 800864a:	ebb0 0008 	subs.w	r0, r0, r8
 800864e:	eb61 0109 	sbc.w	r1, r1, r9
 8008652:	f04f 0200 	mov.w	r2, #0
 8008656:	f04f 0300 	mov.w	r3, #0
 800865a:	018b      	lsls	r3, r1, #6
 800865c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008660:	0182      	lsls	r2, r0, #6
 8008662:	1a12      	subs	r2, r2, r0
 8008664:	eb63 0301 	sbc.w	r3, r3, r1
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	f04f 0100 	mov.w	r1, #0
 8008670:	00d9      	lsls	r1, r3, #3
 8008672:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008676:	00d0      	lsls	r0, r2, #3
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	eb12 0208 	adds.w	r2, r2, r8
 8008680:	eb43 0309 	adc.w	r3, r3, r9
 8008684:	f04f 0000 	mov.w	r0, #0
 8008688:	f04f 0100 	mov.w	r1, #0
 800868c:	0259      	lsls	r1, r3, #9
 800868e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008692:	0250      	lsls	r0, r2, #9
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	4610      	mov	r0, r2
 800869a:	4619      	mov	r1, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	461a      	mov	r2, r3
 80086a0:	f04f 0300 	mov.w	r3, #0
 80086a4:	f7f8 faa0 	bl	8000be8 <__aeabi_uldivmod>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4613      	mov	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	e04a      	b.n	8008748 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086b2:	4b31      	ldr	r3, [pc, #196]	; (8008778 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	099b      	lsrs	r3, r3, #6
 80086b8:	461a      	mov	r2, r3
 80086ba:	f04f 0300 	mov.w	r3, #0
 80086be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80086c2:	f04f 0100 	mov.w	r1, #0
 80086c6:	ea02 0400 	and.w	r4, r2, r0
 80086ca:	ea03 0501 	and.w	r5, r3, r1
 80086ce:	4620      	mov	r0, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	f04f 0200 	mov.w	r2, #0
 80086d6:	f04f 0300 	mov.w	r3, #0
 80086da:	014b      	lsls	r3, r1, #5
 80086dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80086e0:	0142      	lsls	r2, r0, #5
 80086e2:	4610      	mov	r0, r2
 80086e4:	4619      	mov	r1, r3
 80086e6:	1b00      	subs	r0, r0, r4
 80086e8:	eb61 0105 	sbc.w	r1, r1, r5
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	018b      	lsls	r3, r1, #6
 80086f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80086fa:	0182      	lsls	r2, r0, #6
 80086fc:	1a12      	subs	r2, r2, r0
 80086fe:	eb63 0301 	sbc.w	r3, r3, r1
 8008702:	f04f 0000 	mov.w	r0, #0
 8008706:	f04f 0100 	mov.w	r1, #0
 800870a:	00d9      	lsls	r1, r3, #3
 800870c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008710:	00d0      	lsls	r0, r2, #3
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	1912      	adds	r2, r2, r4
 8008718:	eb45 0303 	adc.w	r3, r5, r3
 800871c:	f04f 0000 	mov.w	r0, #0
 8008720:	f04f 0100 	mov.w	r1, #0
 8008724:	0299      	lsls	r1, r3, #10
 8008726:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800872a:	0290      	lsls	r0, r2, #10
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4610      	mov	r0, r2
 8008732:	4619      	mov	r1, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	461a      	mov	r2, r3
 8008738:	f04f 0300 	mov.w	r3, #0
 800873c:	f7f8 fa54 	bl	8000be8 <__aeabi_uldivmod>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	4613      	mov	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008748:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	0c1b      	lsrs	r3, r3, #16
 800874e:	f003 0303 	and.w	r3, r3, #3
 8008752:	3301      	adds	r3, #1
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008760:	60bb      	str	r3, [r7, #8]
      break;
 8008762:	e002      	b.n	800876a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008764:	4b05      	ldr	r3, [pc, #20]	; (800877c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008766:	60bb      	str	r3, [r7, #8]
      break;
 8008768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800876a:	68bb      	ldr	r3, [r7, #8]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008776:	bf00      	nop
 8008778:	40023800 	.word	0x40023800
 800877c:	00f42400 	.word	0x00f42400
 8008780:	007a1200 	.word	0x007a1200

08008784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008788:	4b03      	ldr	r3, [pc, #12]	; (8008798 <HAL_RCC_GetHCLKFreq+0x14>)
 800878a:	681b      	ldr	r3, [r3, #0]
}
 800878c:	4618      	mov	r0, r3
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	2000002c 	.word	0x2000002c

0800879c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087a0:	f7ff fff0 	bl	8008784 <HAL_RCC_GetHCLKFreq>
 80087a4:	4602      	mov	r2, r0
 80087a6:	4b05      	ldr	r3, [pc, #20]	; (80087bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	0a9b      	lsrs	r3, r3, #10
 80087ac:	f003 0307 	and.w	r3, r3, #7
 80087b0:	4903      	ldr	r1, [pc, #12]	; (80087c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087b2:	5ccb      	ldrb	r3, [r1, r3]
 80087b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	40023800 	.word	0x40023800
 80087c0:	08017ea4 	.word	0x08017ea4

080087c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	220f      	movs	r2, #15
 80087d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80087d4:	4b12      	ldr	r3, [pc, #72]	; (8008820 <HAL_RCC_GetClockConfig+0x5c>)
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f003 0203 	and.w	r2, r3, #3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80087e0:	4b0f      	ldr	r3, [pc, #60]	; (8008820 <HAL_RCC_GetClockConfig+0x5c>)
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80087ec:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <HAL_RCC_GetClockConfig+0x5c>)
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80087f8:	4b09      	ldr	r3, [pc, #36]	; (8008820 <HAL_RCC_GetClockConfig+0x5c>)
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	08db      	lsrs	r3, r3, #3
 80087fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008806:	4b07      	ldr	r3, [pc, #28]	; (8008824 <HAL_RCC_GetClockConfig+0x60>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0207 	and.w	r2, r3, #7
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	601a      	str	r2, [r3, #0]
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	40023800 	.word	0x40023800
 8008824:	40023c00 	.word	0x40023c00

08008828 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e01c      	b.n	8008874 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	795b      	ldrb	r3, [r3, #5]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d105      	bne.n	8008850 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fa ffae 	bl	80037ac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f042 0204 	orr.w	r2, r2, #4
 8008864:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e07b      	b.n	8008986 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	2b00      	cmp	r3, #0
 8008894:	d108      	bne.n	80088a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800889e:	d009      	beq.n	80088b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	61da      	str	r2, [r3, #28]
 80088a6:	e005      	b.n	80088b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d106      	bne.n	80088d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fa ff8e 	bl	80037f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2202      	movs	r2, #2
 80088d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	431a      	orrs	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	431a      	orrs	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008938:	ea42 0103 	orr.w	r1, r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	0c1b      	lsrs	r3, r3, #16
 8008952:	f003 0104 	and.w	r1, r3, #4
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	f003 0210 	and.w	r2, r3, #16
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69da      	ldr	r2, [r3, #28]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008974:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e01a      	b.n	80089d6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089b6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7fa fff3 	bl	80039a4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b088      	sub	sp, #32
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	603b      	str	r3, [r7, #0]
 80089ea:	4613      	mov	r3, r2
 80089ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d101      	bne.n	8008a00 <HAL_SPI_Transmit+0x22>
 80089fc:	2302      	movs	r3, #2
 80089fe:	e126      	b.n	8008c4e <HAL_SPI_Transmit+0x270>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a08:	f7fb fcea 	bl	80043e0 <HAL_GetTick>
 8008a0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d002      	beq.n	8008a24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a1e:	2302      	movs	r3, #2
 8008a20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a22:	e10b      	b.n	8008c3c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <HAL_SPI_Transmit+0x52>
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d102      	bne.n	8008a36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a34:	e102      	b.n	8008c3c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2203      	movs	r2, #3
 8008a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	88fa      	ldrh	r2, [r7, #6]
 8008a4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	88fa      	ldrh	r2, [r7, #6]
 8008a54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a7c:	d10f      	bne.n	8008a9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa8:	2b40      	cmp	r3, #64	; 0x40
 8008aaa:	d007      	beq.n	8008abc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ac4:	d14b      	bne.n	8008b5e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <HAL_SPI_Transmit+0xf6>
 8008ace:	8afb      	ldrh	r3, [r7, #22]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d13e      	bne.n	8008b52 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad8:	881a      	ldrh	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae4:	1c9a      	adds	r2, r3, #2
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	3b01      	subs	r3, #1
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008af8:	e02b      	b.n	8008b52 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d112      	bne.n	8008b2e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0c:	881a      	ldrh	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b18:	1c9a      	adds	r2, r3, #2
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b2c:	e011      	b.n	8008b52 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b2e:	f7fb fc57 	bl	80043e0 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d803      	bhi.n	8008b46 <HAL_SPI_Transmit+0x168>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b44:	d102      	bne.n	8008b4c <HAL_SPI_Transmit+0x16e>
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d102      	bne.n	8008b52 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b50:	e074      	b.n	8008c3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1ce      	bne.n	8008afa <HAL_SPI_Transmit+0x11c>
 8008b5c:	e04c      	b.n	8008bf8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <HAL_SPI_Transmit+0x18e>
 8008b66:	8afb      	ldrh	r3, [r7, #22]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d140      	bne.n	8008bee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	330c      	adds	r3, #12
 8008b76:	7812      	ldrb	r2, [r2, #0]
 8008b78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008b92:	e02c      	b.n	8008bee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d113      	bne.n	8008bca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	330c      	adds	r3, #12
 8008bac:	7812      	ldrb	r2, [r2, #0]
 8008bae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8008bc8:	e011      	b.n	8008bee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bca:	f7fb fc09 	bl	80043e0 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d803      	bhi.n	8008be2 <HAL_SPI_Transmit+0x204>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008be0:	d102      	bne.n	8008be8 <HAL_SPI_Transmit+0x20a>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d102      	bne.n	8008bee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008bec:	e026      	b.n	8008c3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1cd      	bne.n	8008b94 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fb53 	bl	80092a8 <SPI_EndRxTxTransaction>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10a      	bne.n	8008c2c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c16:	2300      	movs	r3, #0
 8008c18:	613b      	str	r3, [r7, #16]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	613b      	str	r3, [r7, #16]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	77fb      	strb	r3, [r7, #31]
 8008c38:	e000      	b.n	8008c3c <HAL_SPI_Transmit+0x25e>
  }

error:
 8008c3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3720      	adds	r7, #32
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	4613      	mov	r3, r2
 8008c64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <HAL_SPI_Transmit_DMA+0x20>
 8008c74:	2302      	movs	r3, #2
 8008c76:	e09b      	b.n	8008db0 <HAL_SPI_Transmit_DMA+0x158>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d002      	beq.n	8008c92 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c90:	e089      	b.n	8008da6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <HAL_SPI_Transmit_DMA+0x46>
 8008c98:	88fb      	ldrh	r3, [r7, #6]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d102      	bne.n	8008ca4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ca2:	e080      	b.n	8008da6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	88fa      	ldrh	r2, [r7, #6]
 8008cbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	88fa      	ldrh	r2, [r7, #6]
 8008cc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cea:	d10f      	bne.n	8008d0c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cfa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d10:	4a29      	ldr	r2, [pc, #164]	; (8008db8 <HAL_SPI_Transmit_DMA+0x160>)
 8008d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d18:	4a28      	ldr	r2, [pc, #160]	; (8008dbc <HAL_SPI_Transmit_DMA+0x164>)
 8008d1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d20:	4a27      	ldr	r2, [pc, #156]	; (8008dc0 <HAL_SPI_Transmit_DMA+0x168>)
 8008d22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d28:	2200      	movs	r2, #0
 8008d2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d34:	4619      	mov	r1, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	330c      	adds	r3, #12
 8008d3c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d42:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d44:	f7fb fffe 	bl	8004d44 <HAL_DMA_Start_IT>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00c      	beq.n	8008d68 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d52:	f043 0210 	orr.w	r2, r3, #16
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8008d66:	e01e      	b.n	8008da6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d72:	2b40      	cmp	r3, #64	; 0x40
 8008d74:	d007      	beq.n	8008d86 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d84:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f042 0220 	orr.w	r2, r2, #32
 8008d94:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f042 0202 	orr.w	r2, r2, #2
 8008da4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3718      	adds	r7, #24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	08009115 	.word	0x08009115
 8008dbc:	0800906d 	.word	0x0800906d
 8008dc0:	08009131 	.word	0x08009131

08008dc4 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00f      	beq.n	8008df8 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fc f809 	bl	8004df4 <HAL_DMA_Abort>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d007      	beq.n	8008df8 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dec:	f043 0210 	orr.w	r2, r3, #16
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00f      	beq.n	8008e20 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fb fff5 	bl	8004df4 <HAL_DMA_Abort>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d007      	beq.n	8008e20 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e14:	f043 0210 	orr.w	r2, r3, #16
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f022 0203 	bic.w	r2, r2, #3
 8008e2e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
	...

08008e44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	099b      	lsrs	r3, r3, #6
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10f      	bne.n	8008e88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	099b      	lsrs	r3, r3, #6
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d004      	beq.n	8008e88 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	4798      	blx	r3
    return;
 8008e86:	e0d7      	b.n	8009038 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	085b      	lsrs	r3, r3, #1
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00a      	beq.n	8008eaa <HAL_SPI_IRQHandler+0x66>
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	09db      	lsrs	r3, r3, #7
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d004      	beq.n	8008eaa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4798      	blx	r3
    return;
 8008ea8:	e0c6      	b.n	8009038 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	095b      	lsrs	r3, r3, #5
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10c      	bne.n	8008ed0 <HAL_SPI_IRQHandler+0x8c>
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	099b      	lsrs	r3, r3, #6
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d106      	bne.n	8008ed0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	0a1b      	lsrs	r3, r3, #8
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 80b4 	beq.w	8009038 <HAL_SPI_IRQHandler+0x1f4>
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80ad 	beq.w	8009038 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	099b      	lsrs	r3, r3, #6
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d023      	beq.n	8008f32 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d011      	beq.n	8008f1a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efa:	f043 0204 	orr.w	r2, r3, #4
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	617b      	str	r3, [r7, #20]
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	e00b      	b.n	8008f32 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	613b      	str	r3, [r7, #16]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	613b      	str	r3, [r7, #16]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	613b      	str	r3, [r7, #16]
 8008f2e:	693b      	ldr	r3, [r7, #16]
        return;
 8008f30:	e082      	b.n	8009038 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d014      	beq.n	8008f68 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f42:	f043 0201 	orr.w	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	0a1b      	lsrs	r3, r3, #8
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00c      	beq.n	8008f8e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f78:	f043 0208 	orr.w	r2, r3, #8
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f80:	2300      	movs	r3, #0
 8008f82:	60bb      	str	r3, [r7, #8]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	60bb      	str	r3, [r7, #8]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d04f      	beq.n	8009036 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fa4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d104      	bne.n	8008fc2 <HAL_SPI_IRQHandler+0x17e>
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d034      	beq.n	800902c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 0203 	bic.w	r2, r2, #3
 8008fd0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d011      	beq.n	8008ffe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fde:	4a18      	ldr	r2, [pc, #96]	; (8009040 <HAL_SPI_IRQHandler+0x1fc>)
 8008fe0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fb ff74 	bl	8004ed4 <HAL_DMA_Abort_IT>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009002:	2b00      	cmp	r3, #0
 8009004:	d016      	beq.n	8009034 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800900a:	4a0d      	ldr	r2, [pc, #52]	; (8009040 <HAL_SPI_IRQHandler+0x1fc>)
 800900c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009012:	4618      	mov	r0, r3
 8009014:	f7fb ff5e 	bl	8004ed4 <HAL_DMA_Abort_IT>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00a      	beq.n	8009034 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009022:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800902a:	e003      	b.n	8009034 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f813 	bl	8009058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009032:	e000      	b.n	8009036 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009034:	bf00      	nop
    return;
 8009036:	bf00      	nop
  }
}
 8009038:	3720      	adds	r7, #32
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	08009171 	.word	0x08009171

08009044 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800907a:	f7fb f9b1 	bl	80043e0 <HAL_GetTick>
 800907e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800908e:	d03b      	beq.n	8009108 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0220 	bic.w	r2, r2, #32
 800909e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0202 	bic.w	r2, r2, #2
 80090ae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	2164      	movs	r1, #100	; 0x64
 80090b4:	6978      	ldr	r0, [r7, #20]
 80090b6:	f000 f8f7 	bl	80092a8 <SPI_EndRxTxTransaction>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c4:	f043 0220 	orr.w	r2, r3, #32
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10a      	bne.n	80090ea <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090d4:	2300      	movs	r3, #0
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2200      	movs	r2, #0
 80090ee:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d003      	beq.n	8009108 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009100:	6978      	ldr	r0, [r7, #20]
 8009102:	f7ff ffa9 	bl	8009058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009106:	e002      	b.n	800910e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009108:	6978      	ldr	r0, [r7, #20]
 800910a:	f7f8 ff8b 	bl	8002024 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009120:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f7ff ff8e 	bl	8009044 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009128:	bf00      	nop
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0203 	bic.w	r2, r2, #3
 800914c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009152:	f043 0210 	orr.w	r2, r3, #16
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7ff ff78 	bl	8009058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009168:	bf00      	nop
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f7ff ff64 	bl	8009058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009190:	bf00      	nop
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	4613      	mov	r3, r2
 80091a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80091a8:	f7fb f91a 	bl	80043e0 <HAL_GetTick>
 80091ac:	4602      	mov	r2, r0
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b0:	1a9b      	subs	r3, r3, r2
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	4413      	add	r3, r2
 80091b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80091b8:	f7fb f912 	bl	80043e0 <HAL_GetTick>
 80091bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80091be:	4b39      	ldr	r3, [pc, #228]	; (80092a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	015b      	lsls	r3, r3, #5
 80091c4:	0d1b      	lsrs	r3, r3, #20
 80091c6:	69fa      	ldr	r2, [r7, #28]
 80091c8:	fb02 f303 	mul.w	r3, r2, r3
 80091cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091ce:	e054      	b.n	800927a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091d6:	d050      	beq.n	800927a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091d8:	f7fb f902 	bl	80043e0 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d902      	bls.n	80091ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d13d      	bne.n	800926a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80091fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009206:	d111      	bne.n	800922c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009210:	d004      	beq.n	800921c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800921a:	d107      	bne.n	800922c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800922a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009234:	d10f      	bne.n	8009256 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009254:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e017      	b.n	800929a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	3b01      	subs	r3, #1
 8009278:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689a      	ldr	r2, [r3, #8]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	4013      	ands	r3, r2
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	429a      	cmp	r2, r3
 8009288:	bf0c      	ite	eq
 800928a:	2301      	moveq	r3, #1
 800928c:	2300      	movne	r3, #0
 800928e:	b2db      	uxtb	r3, r3
 8009290:	461a      	mov	r2, r3
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	429a      	cmp	r2, r3
 8009296:	d19b      	bne.n	80091d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	2000002c 	.word	0x2000002c

080092a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af02      	add	r7, sp, #8
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80092b4:	4b1b      	ldr	r3, [pc, #108]	; (8009324 <SPI_EndRxTxTransaction+0x7c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a1b      	ldr	r2, [pc, #108]	; (8009328 <SPI_EndRxTxTransaction+0x80>)
 80092ba:	fba2 2303 	umull	r2, r3, r2, r3
 80092be:	0d5b      	lsrs	r3, r3, #21
 80092c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092c4:	fb02 f303 	mul.w	r3, r2, r3
 80092c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092d2:	d112      	bne.n	80092fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2200      	movs	r2, #0
 80092dc:	2180      	movs	r1, #128	; 0x80
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7ff ff5a 	bl	8009198 <SPI_WaitFlagStateUntilTimeout>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d016      	beq.n	8009318 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ee:	f043 0220 	orr.w	r2, r3, #32
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e00f      	b.n	800931a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00a      	beq.n	8009316 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	3b01      	subs	r3, #1
 8009304:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009310:	2b80      	cmp	r3, #128	; 0x80
 8009312:	d0f2      	beq.n	80092fa <SPI_EndRxTxTransaction+0x52>
 8009314:	e000      	b.n	8009318 <SPI_EndRxTxTransaction+0x70>
        break;
 8009316:	bf00      	nop
  }

  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	2000002c 	.word	0x2000002c
 8009328:	165e9f81 	.word	0x165e9f81

0800932c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e041      	b.n	80093c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d106      	bne.n	8009358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7fa fbb6 	bl	8003ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	3304      	adds	r3, #4
 8009368:	4619      	mov	r1, r3
 800936a:	4610      	mov	r0, r2
 800936c:	f000 fbca 	bl	8009b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
	...

080093cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d001      	beq.n	80093e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e04e      	b.n	8009482 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0201 	orr.w	r2, r2, #1
 80093fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a23      	ldr	r2, [pc, #140]	; (8009490 <HAL_TIM_Base_Start_IT+0xc4>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d022      	beq.n	800944c <HAL_TIM_Base_Start_IT+0x80>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800940e:	d01d      	beq.n	800944c <HAL_TIM_Base_Start_IT+0x80>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a1f      	ldr	r2, [pc, #124]	; (8009494 <HAL_TIM_Base_Start_IT+0xc8>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d018      	beq.n	800944c <HAL_TIM_Base_Start_IT+0x80>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a1e      	ldr	r2, [pc, #120]	; (8009498 <HAL_TIM_Base_Start_IT+0xcc>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d013      	beq.n	800944c <HAL_TIM_Base_Start_IT+0x80>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a1c      	ldr	r2, [pc, #112]	; (800949c <HAL_TIM_Base_Start_IT+0xd0>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d00e      	beq.n	800944c <HAL_TIM_Base_Start_IT+0x80>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a1b      	ldr	r2, [pc, #108]	; (80094a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d009      	beq.n	800944c <HAL_TIM_Base_Start_IT+0x80>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a19      	ldr	r2, [pc, #100]	; (80094a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d004      	beq.n	800944c <HAL_TIM_Base_Start_IT+0x80>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a18      	ldr	r2, [pc, #96]	; (80094a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d111      	bne.n	8009470 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f003 0307 	and.w	r3, r3, #7
 8009456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2b06      	cmp	r3, #6
 800945c:	d010      	beq.n	8009480 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f042 0201 	orr.w	r2, r2, #1
 800946c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800946e:	e007      	b.n	8009480 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f042 0201 	orr.w	r2, r2, #1
 800947e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	40010000 	.word	0x40010000
 8009494:	40000400 	.word	0x40000400
 8009498:	40000800 	.word	0x40000800
 800949c:	40000c00 	.word	0x40000c00
 80094a0:	40010400 	.word	0x40010400
 80094a4:	40014000 	.word	0x40014000
 80094a8:	40001800 	.word	0x40001800

080094ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d101      	bne.n	80094c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e097      	b.n	80095f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d106      	bne.n	80094da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7fa faa5 	bl	8003a24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2202      	movs	r2, #2
 80094de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	6812      	ldr	r2, [r2, #0]
 80094ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094f0:	f023 0307 	bic.w	r3, r3, #7
 80094f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3304      	adds	r3, #4
 80094fe:	4619      	mov	r1, r3
 8009500:	4610      	mov	r0, r2
 8009502:	f000 faff 	bl	8009b04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	4313      	orrs	r3, r2
 8009526:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	689a      	ldr	r2, [r3, #8]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	4313      	orrs	r3, r2
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	4313      	orrs	r3, r2
 8009544:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800954c:	f023 030c 	bic.w	r3, r3, #12
 8009550:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009558:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800955c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	4313      	orrs	r3, r2
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	4313      	orrs	r3, r2
 800956e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	011a      	lsls	r2, r3, #4
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	031b      	lsls	r3, r3, #12
 800957c:	4313      	orrs	r3, r2
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	4313      	orrs	r3, r2
 8009582:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800958a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009592:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	011b      	lsls	r3, r3, #4
 800959e:	4313      	orrs	r3, r2
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009608:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009610:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009618:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009620:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d110      	bne.n	800964a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d102      	bne.n	8009634 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800962e:	7b7b      	ldrb	r3, [r7, #13]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d001      	beq.n	8009638 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e069      	b.n	800970c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2202      	movs	r2, #2
 8009644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009648:	e031      	b.n	80096ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b04      	cmp	r3, #4
 800964e:	d110      	bne.n	8009672 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d102      	bne.n	800965c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009656:	7b3b      	ldrb	r3, [r7, #12]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d001      	beq.n	8009660 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e055      	b.n	800970c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009670:	e01d      	b.n	80096ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d108      	bne.n	800968a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d105      	bne.n	800968a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800967e:	7b7b      	ldrb	r3, [r7, #13]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d102      	bne.n	800968a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009684:	7b3b      	ldrb	r3, [r7, #12]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d001      	beq.n	800968e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e03e      	b.n	800970c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2202      	movs	r2, #2
 8009692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2202      	movs	r2, #2
 800969a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2202      	movs	r2, #2
 80096a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2202      	movs	r2, #2
 80096aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <HAL_TIM_Encoder_Start+0xc4>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	2b04      	cmp	r3, #4
 80096b8:	d008      	beq.n	80096cc <HAL_TIM_Encoder_Start+0xd4>
 80096ba:	e00f      	b.n	80096dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2201      	movs	r2, #1
 80096c2:	2100      	movs	r1, #0
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 fb57 	bl	8009d78 <TIM_CCxChannelCmd>
      break;
 80096ca:	e016      	b.n	80096fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2201      	movs	r2, #1
 80096d2:	2104      	movs	r1, #4
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 fb4f 	bl	8009d78 <TIM_CCxChannelCmd>
      break;
 80096da:	e00e      	b.n	80096fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2201      	movs	r2, #1
 80096e2:	2100      	movs	r1, #0
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 fb47 	bl	8009d78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2201      	movs	r2, #1
 80096f0:	2104      	movs	r1, #4
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fb40 	bl	8009d78 <TIM_CCxChannelCmd>
      break;
 80096f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f042 0201 	orr.w	r2, r2, #1
 8009708:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b02      	cmp	r3, #2
 8009728:	d122      	bne.n	8009770 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b02      	cmp	r3, #2
 8009736:	d11b      	bne.n	8009770 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f06f 0202 	mvn.w	r2, #2
 8009740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	f003 0303 	and.w	r3, r3, #3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f9b5 	bl	8009ac6 <HAL_TIM_IC_CaptureCallback>
 800975c:	e005      	b.n	800976a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f9a7 	bl	8009ab2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f9b8 	bl	8009ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	f003 0304 	and.w	r3, r3, #4
 800977a:	2b04      	cmp	r3, #4
 800977c:	d122      	bne.n	80097c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	f003 0304 	and.w	r3, r3, #4
 8009788:	2b04      	cmp	r3, #4
 800978a:	d11b      	bne.n	80097c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f06f 0204 	mvn.w	r2, #4
 8009794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2202      	movs	r2, #2
 800979a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f98b 	bl	8009ac6 <HAL_TIM_IC_CaptureCallback>
 80097b0:	e005      	b.n	80097be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f97d 	bl	8009ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f98e 	bl	8009ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	f003 0308 	and.w	r3, r3, #8
 80097ce:	2b08      	cmp	r3, #8
 80097d0:	d122      	bne.n	8009818 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	f003 0308 	and.w	r3, r3, #8
 80097dc:	2b08      	cmp	r3, #8
 80097de:	d11b      	bne.n	8009818 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f06f 0208 	mvn.w	r2, #8
 80097e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2204      	movs	r2, #4
 80097ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	f003 0303 	and.w	r3, r3, #3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f961 	bl	8009ac6 <HAL_TIM_IC_CaptureCallback>
 8009804:	e005      	b.n	8009812 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f953 	bl	8009ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f964 	bl	8009ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	f003 0310 	and.w	r3, r3, #16
 8009822:	2b10      	cmp	r3, #16
 8009824:	d122      	bne.n	800986c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b10      	cmp	r3, #16
 8009832:	d11b      	bne.n	800986c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f06f 0210 	mvn.w	r2, #16
 800983c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2208      	movs	r2, #8
 8009842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f937 	bl	8009ac6 <HAL_TIM_IC_CaptureCallback>
 8009858:	e005      	b.n	8009866 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f929 	bl	8009ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f93a 	bl	8009ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b01      	cmp	r3, #1
 8009878:	d10e      	bne.n	8009898 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b01      	cmp	r3, #1
 8009886:	d107      	bne.n	8009898 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f06f 0201 	mvn.w	r2, #1
 8009890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7f9 fe54 	bl	8003540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a2:	2b80      	cmp	r3, #128	; 0x80
 80098a4:	d10e      	bne.n	80098c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b0:	2b80      	cmp	r3, #128	; 0x80
 80098b2:	d107      	bne.n	80098c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fb06 	bl	8009ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ce:	2b40      	cmp	r3, #64	; 0x40
 80098d0:	d10e      	bne.n	80098f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098dc:	2b40      	cmp	r3, #64	; 0x40
 80098de:	d107      	bne.n	80098f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f8ff 	bl	8009aee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	f003 0320 	and.w	r3, r3, #32
 80098fa:	2b20      	cmp	r3, #32
 80098fc:	d10e      	bne.n	800991c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f003 0320 	and.w	r3, r3, #32
 8009908:	2b20      	cmp	r3, #32
 800990a:	d107      	bne.n	800991c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f06f 0220 	mvn.w	r2, #32
 8009914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fad0 	bl	8009ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_TIM_ConfigClockSource+0x1c>
 800993c:	2302      	movs	r3, #2
 800993e:	e0b4      	b.n	8009aaa <HAL_TIM_ConfigClockSource+0x186>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800995e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009978:	d03e      	beq.n	80099f8 <HAL_TIM_ConfigClockSource+0xd4>
 800997a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800997e:	f200 8087 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 8009982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009986:	f000 8086 	beq.w	8009a96 <HAL_TIM_ConfigClockSource+0x172>
 800998a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800998e:	d87f      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 8009990:	2b70      	cmp	r3, #112	; 0x70
 8009992:	d01a      	beq.n	80099ca <HAL_TIM_ConfigClockSource+0xa6>
 8009994:	2b70      	cmp	r3, #112	; 0x70
 8009996:	d87b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 8009998:	2b60      	cmp	r3, #96	; 0x60
 800999a:	d050      	beq.n	8009a3e <HAL_TIM_ConfigClockSource+0x11a>
 800999c:	2b60      	cmp	r3, #96	; 0x60
 800999e:	d877      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099a0:	2b50      	cmp	r3, #80	; 0x50
 80099a2:	d03c      	beq.n	8009a1e <HAL_TIM_ConfigClockSource+0xfa>
 80099a4:	2b50      	cmp	r3, #80	; 0x50
 80099a6:	d873      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099a8:	2b40      	cmp	r3, #64	; 0x40
 80099aa:	d058      	beq.n	8009a5e <HAL_TIM_ConfigClockSource+0x13a>
 80099ac:	2b40      	cmp	r3, #64	; 0x40
 80099ae:	d86f      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099b0:	2b30      	cmp	r3, #48	; 0x30
 80099b2:	d064      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099b4:	2b30      	cmp	r3, #48	; 0x30
 80099b6:	d86b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d060      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099bc:	2b20      	cmp	r3, #32
 80099be:	d867      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d05c      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099c4:	2b10      	cmp	r3, #16
 80099c6:	d05a      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099c8:	e062      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6899      	ldr	r1, [r3, #8]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f000 f9ad 	bl	8009d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80099ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	609a      	str	r2, [r3, #8]
      break;
 80099f6:	e04f      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	6899      	ldr	r1, [r3, #8]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f000 f996 	bl	8009d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689a      	ldr	r2, [r3, #8]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a1a:	609a      	str	r2, [r3, #8]
      break;
 8009a1c:	e03c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	6859      	ldr	r1, [r3, #4]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f000 f90a 	bl	8009c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2150      	movs	r1, #80	; 0x50
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 f963 	bl	8009d02 <TIM_ITRx_SetConfig>
      break;
 8009a3c:	e02c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	6859      	ldr	r1, [r3, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f000 f929 	bl	8009ca2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2160      	movs	r1, #96	; 0x60
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 f953 	bl	8009d02 <TIM_ITRx_SetConfig>
      break;
 8009a5c:	e01c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	6859      	ldr	r1, [r3, #4]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f000 f8ea 	bl	8009c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2140      	movs	r1, #64	; 0x40
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 f943 	bl	8009d02 <TIM_ITRx_SetConfig>
      break;
 8009a7c:	e00c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4619      	mov	r1, r3
 8009a88:	4610      	mov	r0, r2
 8009a8a:	f000 f93a 	bl	8009d02 <TIM_ITRx_SetConfig>
      break;
 8009a8e:	e003      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	73fb      	strb	r3, [r7, #15]
      break;
 8009a94:	e000      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b083      	sub	sp, #12
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009aba:	bf00      	nop
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ace:	bf00      	nop
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b083      	sub	sp, #12
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ae2:	bf00      	nop
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b083      	sub	sp, #12
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009af6:	bf00      	nop
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
	...

08009b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a40      	ldr	r2, [pc, #256]	; (8009c18 <TIM_Base_SetConfig+0x114>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d013      	beq.n	8009b44 <TIM_Base_SetConfig+0x40>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b22:	d00f      	beq.n	8009b44 <TIM_Base_SetConfig+0x40>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a3d      	ldr	r2, [pc, #244]	; (8009c1c <TIM_Base_SetConfig+0x118>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d00b      	beq.n	8009b44 <TIM_Base_SetConfig+0x40>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a3c      	ldr	r2, [pc, #240]	; (8009c20 <TIM_Base_SetConfig+0x11c>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d007      	beq.n	8009b44 <TIM_Base_SetConfig+0x40>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a3b      	ldr	r2, [pc, #236]	; (8009c24 <TIM_Base_SetConfig+0x120>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d003      	beq.n	8009b44 <TIM_Base_SetConfig+0x40>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a3a      	ldr	r2, [pc, #232]	; (8009c28 <TIM_Base_SetConfig+0x124>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d108      	bne.n	8009b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a2f      	ldr	r2, [pc, #188]	; (8009c18 <TIM_Base_SetConfig+0x114>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d02b      	beq.n	8009bb6 <TIM_Base_SetConfig+0xb2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b64:	d027      	beq.n	8009bb6 <TIM_Base_SetConfig+0xb2>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a2c      	ldr	r2, [pc, #176]	; (8009c1c <TIM_Base_SetConfig+0x118>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d023      	beq.n	8009bb6 <TIM_Base_SetConfig+0xb2>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a2b      	ldr	r2, [pc, #172]	; (8009c20 <TIM_Base_SetConfig+0x11c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d01f      	beq.n	8009bb6 <TIM_Base_SetConfig+0xb2>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a2a      	ldr	r2, [pc, #168]	; (8009c24 <TIM_Base_SetConfig+0x120>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d01b      	beq.n	8009bb6 <TIM_Base_SetConfig+0xb2>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a29      	ldr	r2, [pc, #164]	; (8009c28 <TIM_Base_SetConfig+0x124>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d017      	beq.n	8009bb6 <TIM_Base_SetConfig+0xb2>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a28      	ldr	r2, [pc, #160]	; (8009c2c <TIM_Base_SetConfig+0x128>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d013      	beq.n	8009bb6 <TIM_Base_SetConfig+0xb2>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a27      	ldr	r2, [pc, #156]	; (8009c30 <TIM_Base_SetConfig+0x12c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d00f      	beq.n	8009bb6 <TIM_Base_SetConfig+0xb2>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a26      	ldr	r2, [pc, #152]	; (8009c34 <TIM_Base_SetConfig+0x130>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d00b      	beq.n	8009bb6 <TIM_Base_SetConfig+0xb2>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a25      	ldr	r2, [pc, #148]	; (8009c38 <TIM_Base_SetConfig+0x134>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d007      	beq.n	8009bb6 <TIM_Base_SetConfig+0xb2>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a24      	ldr	r2, [pc, #144]	; (8009c3c <TIM_Base_SetConfig+0x138>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d003      	beq.n	8009bb6 <TIM_Base_SetConfig+0xb2>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a23      	ldr	r2, [pc, #140]	; (8009c40 <TIM_Base_SetConfig+0x13c>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d108      	bne.n	8009bc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	689a      	ldr	r2, [r3, #8]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a0a      	ldr	r2, [pc, #40]	; (8009c18 <TIM_Base_SetConfig+0x114>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d003      	beq.n	8009bfc <TIM_Base_SetConfig+0xf8>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a0c      	ldr	r2, [pc, #48]	; (8009c28 <TIM_Base_SetConfig+0x124>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d103      	bne.n	8009c04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	691a      	ldr	r2, [r3, #16]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	615a      	str	r2, [r3, #20]
}
 8009c0a:	bf00      	nop
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	40010000 	.word	0x40010000
 8009c1c:	40000400 	.word	0x40000400
 8009c20:	40000800 	.word	0x40000800
 8009c24:	40000c00 	.word	0x40000c00
 8009c28:	40010400 	.word	0x40010400
 8009c2c:	40014000 	.word	0x40014000
 8009c30:	40014400 	.word	0x40014400
 8009c34:	40014800 	.word	0x40014800
 8009c38:	40001800 	.word	0x40001800
 8009c3c:	40001c00 	.word	0x40001c00
 8009c40:	40002000 	.word	0x40002000

08009c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	f023 0201 	bic.w	r2, r3, #1
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f023 030a 	bic.w	r3, r3, #10
 8009c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	621a      	str	r2, [r3, #32]
}
 8009c96:	bf00      	nop
 8009c98:	371c      	adds	r7, #28
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b087      	sub	sp, #28
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	f023 0210 	bic.w	r2, r3, #16
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	031b      	lsls	r3, r3, #12
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	011b      	lsls	r3, r3, #4
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	621a      	str	r2, [r3, #32]
}
 8009cf6:	bf00      	nop
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b085      	sub	sp, #20
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	f043 0307 	orr.w	r3, r3, #7
 8009d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	609a      	str	r2, [r3, #8]
}
 8009d2c:	bf00      	nop
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b087      	sub	sp, #28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	021a      	lsls	r2, r3, #8
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	609a      	str	r2, [r3, #8]
}
 8009d6c:	bf00      	nop
 8009d6e:	371c      	adds	r7, #28
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f003 031f 	and.w	r3, r3, #31
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6a1a      	ldr	r2, [r3, #32]
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	43db      	mvns	r3, r3
 8009d9a:	401a      	ands	r2, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6a1a      	ldr	r2, [r3, #32]
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f003 031f 	and.w	r3, r3, #31
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	fa01 f303 	lsl.w	r3, r1, r3
 8009db0:	431a      	orrs	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	621a      	str	r2, [r3, #32]
}
 8009db6:	bf00      	nop
 8009db8:	371c      	adds	r7, #28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
	...

08009dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e05a      	b.n	8009e92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2202      	movs	r2, #2
 8009de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a21      	ldr	r2, [pc, #132]	; (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d022      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e28:	d01d      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a1d      	ldr	r2, [pc, #116]	; (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d018      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a1b      	ldr	r2, [pc, #108]	; (8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d013      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a1a      	ldr	r2, [pc, #104]	; (8009eac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d00e      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a18      	ldr	r2, [pc, #96]	; (8009eb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d009      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a17      	ldr	r2, [pc, #92]	; (8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d004      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a15      	ldr	r2, [pc, #84]	; (8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d10c      	bne.n	8009e80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	40010000 	.word	0x40010000
 8009ea4:	40000400 	.word	0x40000400
 8009ea8:	40000800 	.word	0x40000800
 8009eac:	40000c00 	.word	0x40000c00
 8009eb0:	40010400 	.word	0x40010400
 8009eb4:	40014000 	.word	0x40014000
 8009eb8:	40001800 	.word	0x40001800

08009ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	f107 001c 	add.w	r0, r7, #28
 8009ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d122      	bne.n	8009f42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d105      	bne.n	8009f36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 fb1c 	bl	800b574 <USB_CoreReset>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]
 8009f40:	e01a      	b.n	8009f78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 fb10 	bl	800b574 <USB_CoreReset>
 8009f54:	4603      	mov	r3, r0
 8009f56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d106      	bne.n	8009f6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	639a      	str	r2, [r3, #56]	; 0x38
 8009f6a:	e005      	b.n	8009f78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d10b      	bne.n	8009f96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f043 0206 	orr.w	r2, r3, #6
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f043 0220 	orr.w	r2, r3, #32
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fa2:	b004      	add	sp, #16
 8009fa4:	4770      	bx	lr
	...

08009fa8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b087      	sub	sp, #28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d165      	bne.n	800a088 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	4a41      	ldr	r2, [pc, #260]	; (800a0c4 <USB_SetTurnaroundTime+0x11c>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d906      	bls.n	8009fd2 <USB_SetTurnaroundTime+0x2a>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4a40      	ldr	r2, [pc, #256]	; (800a0c8 <USB_SetTurnaroundTime+0x120>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d202      	bcs.n	8009fd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009fcc:	230f      	movs	r3, #15
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	e062      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	4a3c      	ldr	r2, [pc, #240]	; (800a0c8 <USB_SetTurnaroundTime+0x120>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d306      	bcc.n	8009fe8 <USB_SetTurnaroundTime+0x40>
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	4a3b      	ldr	r2, [pc, #236]	; (800a0cc <USB_SetTurnaroundTime+0x124>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d202      	bcs.n	8009fe8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009fe2:	230e      	movs	r3, #14
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	e057      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	4a38      	ldr	r2, [pc, #224]	; (800a0cc <USB_SetTurnaroundTime+0x124>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d306      	bcc.n	8009ffe <USB_SetTurnaroundTime+0x56>
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	4a37      	ldr	r2, [pc, #220]	; (800a0d0 <USB_SetTurnaroundTime+0x128>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d202      	bcs.n	8009ffe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009ff8:	230d      	movs	r3, #13
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	e04c      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	4a33      	ldr	r2, [pc, #204]	; (800a0d0 <USB_SetTurnaroundTime+0x128>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d306      	bcc.n	800a014 <USB_SetTurnaroundTime+0x6c>
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	4a32      	ldr	r2, [pc, #200]	; (800a0d4 <USB_SetTurnaroundTime+0x12c>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d802      	bhi.n	800a014 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a00e:	230c      	movs	r3, #12
 800a010:	617b      	str	r3, [r7, #20]
 800a012:	e041      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4a2f      	ldr	r2, [pc, #188]	; (800a0d4 <USB_SetTurnaroundTime+0x12c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d906      	bls.n	800a02a <USB_SetTurnaroundTime+0x82>
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	4a2e      	ldr	r2, [pc, #184]	; (800a0d8 <USB_SetTurnaroundTime+0x130>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d802      	bhi.n	800a02a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a024:	230b      	movs	r3, #11
 800a026:	617b      	str	r3, [r7, #20]
 800a028:	e036      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	4a2a      	ldr	r2, [pc, #168]	; (800a0d8 <USB_SetTurnaroundTime+0x130>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d906      	bls.n	800a040 <USB_SetTurnaroundTime+0x98>
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	4a29      	ldr	r2, [pc, #164]	; (800a0dc <USB_SetTurnaroundTime+0x134>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d802      	bhi.n	800a040 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a03a:	230a      	movs	r3, #10
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	e02b      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	4a26      	ldr	r2, [pc, #152]	; (800a0dc <USB_SetTurnaroundTime+0x134>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d906      	bls.n	800a056 <USB_SetTurnaroundTime+0xae>
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	4a25      	ldr	r2, [pc, #148]	; (800a0e0 <USB_SetTurnaroundTime+0x138>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d202      	bcs.n	800a056 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a050:	2309      	movs	r3, #9
 800a052:	617b      	str	r3, [r7, #20]
 800a054:	e020      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	4a21      	ldr	r2, [pc, #132]	; (800a0e0 <USB_SetTurnaroundTime+0x138>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d306      	bcc.n	800a06c <USB_SetTurnaroundTime+0xc4>
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	4a20      	ldr	r2, [pc, #128]	; (800a0e4 <USB_SetTurnaroundTime+0x13c>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d802      	bhi.n	800a06c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a066:	2308      	movs	r3, #8
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	e015      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	4a1d      	ldr	r2, [pc, #116]	; (800a0e4 <USB_SetTurnaroundTime+0x13c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d906      	bls.n	800a082 <USB_SetTurnaroundTime+0xda>
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4a1c      	ldr	r2, [pc, #112]	; (800a0e8 <USB_SetTurnaroundTime+0x140>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d202      	bcs.n	800a082 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a07c:	2307      	movs	r3, #7
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	e00a      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a082:	2306      	movs	r3, #6
 800a084:	617b      	str	r3, [r7, #20]
 800a086:	e007      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a08e:	2309      	movs	r3, #9
 800a090:	617b      	str	r3, [r7, #20]
 800a092:	e001      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a094:	2309      	movs	r3, #9
 800a096:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	68da      	ldr	r2, [r3, #12]
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	029b      	lsls	r3, r3, #10
 800a0ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	371c      	adds	r7, #28
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	00d8acbf 	.word	0x00d8acbf
 800a0c8:	00e4e1c0 	.word	0x00e4e1c0
 800a0cc:	00f42400 	.word	0x00f42400
 800a0d0:	01067380 	.word	0x01067380
 800a0d4:	011a499f 	.word	0x011a499f
 800a0d8:	01312cff 	.word	0x01312cff
 800a0dc:	014ca43f 	.word	0x014ca43f
 800a0e0:	016e3600 	.word	0x016e3600
 800a0e4:	01a6ab1f 	.word	0x01a6ab1f
 800a0e8:	01e84800 	.word	0x01e84800

0800a0ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f043 0201 	orr.w	r2, r3, #1
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a10e:	b480      	push	{r7}
 800a110:	b083      	sub	sp, #12
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f023 0201 	bic.w	r2, r3, #1
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a14c:	78fb      	ldrb	r3, [r7, #3]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d115      	bne.n	800a17e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a15e:	2001      	movs	r0, #1
 800a160:	f7fa f94a 	bl	80043f8 <HAL_Delay>
      ms++;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3301      	adds	r3, #1
 800a168:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f001 f972 	bl	800b454 <USB_GetMode>
 800a170:	4603      	mov	r3, r0
 800a172:	2b01      	cmp	r3, #1
 800a174:	d01e      	beq.n	800a1b4 <USB_SetCurrentMode+0x84>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2b31      	cmp	r3, #49	; 0x31
 800a17a:	d9f0      	bls.n	800a15e <USB_SetCurrentMode+0x2e>
 800a17c:	e01a      	b.n	800a1b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a17e:	78fb      	ldrb	r3, [r7, #3]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d115      	bne.n	800a1b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a190:	2001      	movs	r0, #1
 800a192:	f7fa f931 	bl	80043f8 <HAL_Delay>
      ms++;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	3301      	adds	r3, #1
 800a19a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f001 f959 	bl	800b454 <USB_GetMode>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <USB_SetCurrentMode+0x84>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b31      	cmp	r3, #49	; 0x31
 800a1ac:	d9f0      	bls.n	800a190 <USB_SetCurrentMode+0x60>
 800a1ae:	e001      	b.n	800a1b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e005      	b.n	800a1c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b32      	cmp	r3, #50	; 0x32
 800a1b8:	d101      	bne.n	800a1be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e000      	b.n	800a1c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b086      	sub	sp, #24
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a1d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	613b      	str	r3, [r7, #16]
 800a1e6:	e009      	b.n	800a1fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	3340      	adds	r3, #64	; 0x40
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	613b      	str	r3, [r7, #16]
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	2b0e      	cmp	r3, #14
 800a200:	d9f2      	bls.n	800a1e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a204:	2b00      	cmp	r3, #0
 800a206:	d11c      	bne.n	800a242 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a216:	f043 0302 	orr.w	r3, r3, #2
 800a21a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a220:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a238:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	639a      	str	r2, [r3, #56]	; 0x38
 800a240:	e00b      	b.n	800a25a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a246:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a252:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a260:	461a      	mov	r2, r3
 800a262:	2300      	movs	r3, #0
 800a264:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a26c:	4619      	mov	r1, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a274:	461a      	mov	r2, r3
 800a276:	680b      	ldr	r3, [r1, #0]
 800a278:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d10c      	bne.n	800a29a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	2b00      	cmp	r3, #0
 800a284:	d104      	bne.n	800a290 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a286:	2100      	movs	r1, #0
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f945 	bl	800a518 <USB_SetDevSpeed>
 800a28e:	e008      	b.n	800a2a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a290:	2101      	movs	r1, #1
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f940 	bl	800a518 <USB_SetDevSpeed>
 800a298:	e003      	b.n	800a2a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a29a:	2103      	movs	r1, #3
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f93b 	bl	800a518 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a2a2:	2110      	movs	r1, #16
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f8f3 	bl	800a490 <USB_FlushTxFifo>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f90f 	bl	800a4d8 <USB_FlushRxFifo>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	2300      	movs	r3, #0
 800a2da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	613b      	str	r3, [r7, #16]
 800a2ec:	e043      	b.n	800a376 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a304:	d118      	bne.n	800a338 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	4413      	add	r3, r2
 800a314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a318:	461a      	mov	r2, r3
 800a31a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	e013      	b.n	800a34a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a32e:	461a      	mov	r2, r3
 800a330:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a334:	6013      	str	r3, [r2, #0]
 800a336:	e008      	b.n	800a34a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	015a      	lsls	r2, r3, #5
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4413      	add	r3, r2
 800a340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a344:	461a      	mov	r2, r3
 800a346:	2300      	movs	r3, #0
 800a348:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	4413      	add	r3, r2
 800a352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a356:	461a      	mov	r2, r3
 800a358:	2300      	movs	r3, #0
 800a35a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	015a      	lsls	r2, r3, #5
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	4413      	add	r3, r2
 800a364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a368:	461a      	mov	r2, r3
 800a36a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a36e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	3301      	adds	r3, #1
 800a374:	613b      	str	r3, [r7, #16]
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d3b7      	bcc.n	800a2ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a37e:	2300      	movs	r3, #0
 800a380:	613b      	str	r3, [r7, #16]
 800a382:	e043      	b.n	800a40c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a39a:	d118      	bne.n	800a3ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10a      	bne.n	800a3b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	e013      	b.n	800a3e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	015a      	lsls	r2, r3, #5
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	4413      	add	r3, r2
 800a3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	e008      	b.n	800a3e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3da:	461a      	mov	r2, r3
 800a3dc:	2300      	movs	r3, #0
 800a3de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	015a      	lsls	r2, r3, #5
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	015a      	lsls	r2, r3, #5
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3fe:	461a      	mov	r2, r3
 800a400:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a404:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	3301      	adds	r3, #1
 800a40a:	613b      	str	r3, [r7, #16]
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	429a      	cmp	r2, r3
 800a412:	d3b7      	bcc.n	800a384 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a426:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a434:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d105      	bne.n	800a448 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	f043 0210 	orr.w	r2, r3, #16
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	699a      	ldr	r2, [r3, #24]
 800a44c:	4b0f      	ldr	r3, [pc, #60]	; (800a48c <USB_DevInit+0x2c4>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a456:	2b00      	cmp	r3, #0
 800a458:	d005      	beq.n	800a466 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	f043 0208 	orr.w	r2, r3, #8
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d107      	bne.n	800a47c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a474:	f043 0304 	orr.w	r3, r3, #4
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3718      	adds	r7, #24
 800a482:	46bd      	mov	sp, r7
 800a484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a488:	b004      	add	sp, #16
 800a48a:	4770      	bx	lr
 800a48c:	803c3800 	.word	0x803c3800

0800a490 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	019b      	lsls	r3, r3, #6
 800a4a2:	f043 0220 	orr.w	r2, r3, #32
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	60fb      	str	r3, [r7, #12]
 800a4b0:	4a08      	ldr	r2, [pc, #32]	; (800a4d4 <USB_FlushTxFifo+0x44>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d901      	bls.n	800a4ba <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e006      	b.n	800a4c8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	d0f1      	beq.n	800a4aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	00030d40 	.word	0x00030d40

0800a4d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2210      	movs	r2, #16
 800a4e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	4a08      	ldr	r2, [pc, #32]	; (800a514 <USB_FlushRxFifo+0x3c>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d901      	bls.n	800a4fa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e006      	b.n	800a508 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	2b10      	cmp	r3, #16
 800a504:	d0f1      	beq.n	800a4ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3714      	adds	r7, #20
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	00030d40 	.word	0x00030d40

0800a518 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	78fb      	ldrb	r3, [r7, #3]
 800a532:	68f9      	ldr	r1, [r7, #12]
 800a534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a538:	4313      	orrs	r3, r2
 800a53a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b087      	sub	sp, #28
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f003 0306 	and.w	r3, r3, #6
 800a562:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d102      	bne.n	800a570 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a56a:	2300      	movs	r3, #0
 800a56c:	75fb      	strb	r3, [r7, #23]
 800a56e:	e00a      	b.n	800a586 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2b02      	cmp	r3, #2
 800a574:	d002      	beq.n	800a57c <USB_GetDevSpeed+0x32>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2b06      	cmp	r3, #6
 800a57a:	d102      	bne.n	800a582 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a57c:	2302      	movs	r3, #2
 800a57e:	75fb      	strb	r3, [r7, #23]
 800a580:	e001      	b.n	800a586 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a582:	230f      	movs	r3, #15
 800a584:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a586:	7dfb      	ldrb	r3, [r7, #23]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	371c      	adds	r7, #28
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	785b      	ldrb	r3, [r3, #1]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d13a      	bne.n	800a626 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b6:	69da      	ldr	r2, [r3, #28]
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	f003 030f 	and.w	r3, r3, #15
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	68f9      	ldr	r1, [r7, #12]
 800a5ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d155      	bne.n	800a694 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	78db      	ldrb	r3, [r3, #3]
 800a602:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a604:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	059b      	lsls	r3, r3, #22
 800a60a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a60c:	4313      	orrs	r3, r2
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	0151      	lsls	r1, r2, #5
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	440a      	add	r2, r1
 800a616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a61a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a61e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a622:	6013      	str	r3, [r2, #0]
 800a624:	e036      	b.n	800a694 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a62c:	69da      	ldr	r2, [r3, #28]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	f003 030f 	and.w	r3, r3, #15
 800a636:	2101      	movs	r1, #1
 800a638:	fa01 f303 	lsl.w	r3, r1, r3
 800a63c:	041b      	lsls	r3, r3, #16
 800a63e:	68f9      	ldr	r1, [r7, #12]
 800a640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a644:	4313      	orrs	r3, r2
 800a646:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	015a      	lsls	r2, r3, #5
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	4413      	add	r3, r2
 800a650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d11a      	bne.n	800a694 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	015a      	lsls	r2, r3, #5
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4413      	add	r3, r2
 800a666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	78db      	ldrb	r3, [r3, #3]
 800a678:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a67a:	430b      	orrs	r3, r1
 800a67c:	4313      	orrs	r3, r2
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	0151      	lsls	r1, r2, #5
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	440a      	add	r2, r1
 800a686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a68a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a68e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a692:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
	...

0800a6a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	785b      	ldrb	r3, [r3, #1]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d161      	bne.n	800a784 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	015a      	lsls	r2, r3, #5
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6d6:	d11f      	bne.n	800a718 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	0151      	lsls	r1, r2, #5
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	440a      	add	r2, r1
 800a6ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a6f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	0151      	lsls	r1, r2, #5
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	440a      	add	r2, r1
 800a70e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a716:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a71e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	f003 030f 	and.w	r3, r3, #15
 800a728:	2101      	movs	r1, #1
 800a72a:	fa01 f303 	lsl.w	r3, r1, r3
 800a72e:	b29b      	uxth	r3, r3
 800a730:	43db      	mvns	r3, r3
 800a732:	68f9      	ldr	r1, [r7, #12]
 800a734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a738:	4013      	ands	r3, r2
 800a73a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a742:	69da      	ldr	r2, [r3, #28]
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	f003 030f 	and.w	r3, r3, #15
 800a74c:	2101      	movs	r1, #1
 800a74e:	fa01 f303 	lsl.w	r3, r1, r3
 800a752:	b29b      	uxth	r3, r3
 800a754:	43db      	mvns	r3, r3
 800a756:	68f9      	ldr	r1, [r7, #12]
 800a758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a75c:	4013      	ands	r3, r2
 800a75e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4413      	add	r3, r2
 800a768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	0159      	lsls	r1, r3, #5
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	440b      	add	r3, r1
 800a776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77a:	4619      	mov	r1, r3
 800a77c:	4b35      	ldr	r3, [pc, #212]	; (800a854 <USB_DeactivateEndpoint+0x1b0>)
 800a77e:	4013      	ands	r3, r2
 800a780:	600b      	str	r3, [r1, #0]
 800a782:	e060      	b.n	800a846 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a79a:	d11f      	bne.n	800a7dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	0151      	lsls	r1, r2, #5
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	440a      	add	r2, r1
 800a7b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	0151      	lsls	r1, r2, #5
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	440a      	add	r2, r1
 800a7d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	f003 030f 	and.w	r3, r3, #15
 800a7ec:	2101      	movs	r1, #1
 800a7ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f2:	041b      	lsls	r3, r3, #16
 800a7f4:	43db      	mvns	r3, r3
 800a7f6:	68f9      	ldr	r1, [r7, #12]
 800a7f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a806:	69da      	ldr	r2, [r3, #28]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	f003 030f 	and.w	r3, r3, #15
 800a810:	2101      	movs	r1, #1
 800a812:	fa01 f303 	lsl.w	r3, r1, r3
 800a816:	041b      	lsls	r3, r3, #16
 800a818:	43db      	mvns	r3, r3
 800a81a:	68f9      	ldr	r1, [r7, #12]
 800a81c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a820:	4013      	ands	r3, r2
 800a822:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	015a      	lsls	r2, r3, #5
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	4413      	add	r3, r2
 800a82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	0159      	lsls	r1, r3, #5
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	440b      	add	r3, r1
 800a83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a83e:	4619      	mov	r1, r3
 800a840:	4b05      	ldr	r3, [pc, #20]	; (800a858 <USB_DeactivateEndpoint+0x1b4>)
 800a842:	4013      	ands	r3, r2
 800a844:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	ec337800 	.word	0xec337800
 800a858:	eff37800 	.word	0xeff37800

0800a85c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	; 0x28
 800a860:	af02      	add	r7, sp, #8
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	4613      	mov	r3, r2
 800a868:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	785b      	ldrb	r3, [r3, #1]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	f040 815c 	bne.w	800ab36 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d132      	bne.n	800a8ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	69ba      	ldr	r2, [r7, #24]
 800a896:	0151      	lsls	r1, r2, #5
 800a898:	69fa      	ldr	r2, [r7, #28]
 800a89a:	440a      	add	r2, r1
 800a89c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a8a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	69ba      	ldr	r2, [r7, #24]
 800a8ba:	0151      	lsls	r1, r2, #5
 800a8bc:	69fa      	ldr	r2, [r7, #28]
 800a8be:	440a      	add	r2, r1
 800a8c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	015a      	lsls	r2, r3, #5
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	69ba      	ldr	r2, [r7, #24]
 800a8da:	0151      	lsls	r1, r2, #5
 800a8dc:	69fa      	ldr	r2, [r7, #28]
 800a8de:	440a      	add	r2, r1
 800a8e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8e4:	0cdb      	lsrs	r3, r3, #19
 800a8e6:	04db      	lsls	r3, r3, #19
 800a8e8:	6113      	str	r3, [r2, #16]
 800a8ea:	e074      	b.n	800a9d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	015a      	lsls	r2, r3, #5
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	69ba      	ldr	r2, [r7, #24]
 800a8fc:	0151      	lsls	r1, r2, #5
 800a8fe:	69fa      	ldr	r2, [r7, #28]
 800a900:	440a      	add	r2, r1
 800a902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a906:	0cdb      	lsrs	r3, r3, #19
 800a908:	04db      	lsls	r3, r3, #19
 800a90a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	69ba      	ldr	r2, [r7, #24]
 800a91c:	0151      	lsls	r1, r2, #5
 800a91e:	69fa      	ldr	r2, [r7, #28]
 800a920:	440a      	add	r2, r1
 800a922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a926:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a92a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a92e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	015a      	lsls	r2, r3, #5
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	4413      	add	r3, r2
 800a938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a93c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	6959      	ldr	r1, [r3, #20]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	440b      	add	r3, r1
 800a948:	1e59      	subs	r1, r3, #1
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a952:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a954:	4b9d      	ldr	r3, [pc, #628]	; (800abcc <USB_EPStartXfer+0x370>)
 800a956:	400b      	ands	r3, r1
 800a958:	69b9      	ldr	r1, [r7, #24]
 800a95a:	0148      	lsls	r0, r1, #5
 800a95c:	69f9      	ldr	r1, [r7, #28]
 800a95e:	4401      	add	r1, r0
 800a960:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a964:	4313      	orrs	r3, r2
 800a966:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a974:	691a      	ldr	r2, [r3, #16]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a97e:	69b9      	ldr	r1, [r7, #24]
 800a980:	0148      	lsls	r0, r1, #5
 800a982:	69f9      	ldr	r1, [r7, #28]
 800a984:	4401      	add	r1, r0
 800a986:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a98a:	4313      	orrs	r3, r2
 800a98c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	78db      	ldrb	r3, [r3, #3]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d11f      	bne.n	800a9d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	0151      	lsls	r1, r2, #5
 800a9a8:	69fa      	ldr	r2, [r7, #28]
 800a9aa:	440a      	add	r2, r1
 800a9ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a9b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	015a      	lsls	r2, r3, #5
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	4413      	add	r3, r2
 800a9be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	0151      	lsls	r1, r2, #5
 800a9c8:	69fa      	ldr	r2, [r7, #28]
 800a9ca:	440a      	add	r2, r1
 800a9cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a9d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d14b      	bne.n	800aa74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d009      	beq.n	800a9f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	78db      	ldrb	r3, [r3, #3]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d128      	bne.n	800aa52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d110      	bne.n	800aa32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	69ba      	ldr	r2, [r7, #24]
 800aa20:	0151      	lsls	r1, r2, #5
 800aa22:	69fa      	ldr	r2, [r7, #28]
 800aa24:	440a      	add	r2, r1
 800aa26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	e00f      	b.n	800aa52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	69ba      	ldr	r2, [r7, #24]
 800aa42:	0151      	lsls	r1, r2, #5
 800aa44:	69fa      	ldr	r2, [r7, #28]
 800aa46:	440a      	add	r2, r1
 800aa48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	015a      	lsls	r2, r3, #5
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	4413      	add	r3, r2
 800aa5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	69ba      	ldr	r2, [r7, #24]
 800aa62:	0151      	lsls	r1, r2, #5
 800aa64:	69fa      	ldr	r2, [r7, #28]
 800aa66:	440a      	add	r2, r1
 800aa68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa70:	6013      	str	r3, [r2, #0]
 800aa72:	e12f      	b.n	800acd4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	69ba      	ldr	r2, [r7, #24]
 800aa84:	0151      	lsls	r1, r2, #5
 800aa86:	69fa      	ldr	r2, [r7, #28]
 800aa88:	440a      	add	r2, r1
 800aa8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	78db      	ldrb	r3, [r3, #3]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d015      	beq.n	800aac8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 8117 	beq.w	800acd4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	f003 030f 	and.w	r3, r3, #15
 800aab6:	2101      	movs	r1, #1
 800aab8:	fa01 f303 	lsl.w	r3, r1, r3
 800aabc:	69f9      	ldr	r1, [r7, #28]
 800aabe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aac2:	4313      	orrs	r3, r2
 800aac4:	634b      	str	r3, [r1, #52]	; 0x34
 800aac6:	e105      	b.n	800acd4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d110      	bne.n	800aafa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	69ba      	ldr	r2, [r7, #24]
 800aae8:	0151      	lsls	r1, r2, #5
 800aaea:	69fa      	ldr	r2, [r7, #28]
 800aaec:	440a      	add	r2, r1
 800aaee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaf6:	6013      	str	r3, [r2, #0]
 800aaf8:	e00f      	b.n	800ab1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	015a      	lsls	r2, r3, #5
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	4413      	add	r3, r2
 800ab02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	69ba      	ldr	r2, [r7, #24]
 800ab0a:	0151      	lsls	r1, r2, #5
 800ab0c:	69fa      	ldr	r2, [r7, #28]
 800ab0e:	440a      	add	r2, r1
 800ab10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	68d9      	ldr	r1, [r3, #12]
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	781a      	ldrb	r2, [r3, #0]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	b298      	uxth	r0, r3
 800ab28:	79fb      	ldrb	r3, [r7, #7]
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f000 fa2b 	bl	800af8a <USB_WritePacket>
 800ab34:	e0ce      	b.n	800acd4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	0151      	lsls	r1, r2, #5
 800ab48:	69fa      	ldr	r2, [r7, #28]
 800ab4a:	440a      	add	r2, r1
 800ab4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab50:	0cdb      	lsrs	r3, r3, #19
 800ab52:	04db      	lsls	r3, r3, #19
 800ab54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	015a      	lsls	r2, r3, #5
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	69ba      	ldr	r2, [r7, #24]
 800ab66:	0151      	lsls	r1, r2, #5
 800ab68:	69fa      	ldr	r2, [r7, #28]
 800ab6a:	440a      	add	r2, r1
 800ab6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d126      	bne.n	800abd0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab8e:	691a      	ldr	r2, [r3, #16]
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab98:	69b9      	ldr	r1, [r7, #24]
 800ab9a:	0148      	lsls	r0, r1, #5
 800ab9c:	69f9      	ldr	r1, [r7, #28]
 800ab9e:	4401      	add	r1, r0
 800aba0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aba4:	4313      	orrs	r3, r2
 800aba6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	015a      	lsls	r2, r3, #5
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	4413      	add	r3, r2
 800abb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	0151      	lsls	r1, r2, #5
 800abba:	69fa      	ldr	r2, [r7, #28]
 800abbc:	440a      	add	r2, r1
 800abbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abc6:	6113      	str	r3, [r2, #16]
 800abc8:	e036      	b.n	800ac38 <USB_EPStartXfer+0x3dc>
 800abca:	bf00      	nop
 800abcc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	695a      	ldr	r2, [r3, #20]
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	4413      	add	r3, r2
 800abda:	1e5a      	subs	r2, r3, #1
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	015a      	lsls	r2, r3, #5
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	4413      	add	r3, r2
 800abee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf2:	691a      	ldr	r2, [r3, #16]
 800abf4:	8afb      	ldrh	r3, [r7, #22]
 800abf6:	04d9      	lsls	r1, r3, #19
 800abf8:	4b39      	ldr	r3, [pc, #228]	; (800ace0 <USB_EPStartXfer+0x484>)
 800abfa:	400b      	ands	r3, r1
 800abfc:	69b9      	ldr	r1, [r7, #24]
 800abfe:	0148      	lsls	r0, r1, #5
 800ac00:	69f9      	ldr	r1, [r7, #28]
 800ac02:	4401      	add	r1, r0
 800ac04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	015a      	lsls	r2, r3, #5
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	4413      	add	r3, r2
 800ac14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac18:	691a      	ldr	r2, [r3, #16]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	8af9      	ldrh	r1, [r7, #22]
 800ac20:	fb01 f303 	mul.w	r3, r1, r3
 800ac24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac28:	69b9      	ldr	r1, [r7, #24]
 800ac2a:	0148      	lsls	r0, r1, #5
 800ac2c:	69f9      	ldr	r1, [r7, #28]
 800ac2e:	4401      	add	r1, r0
 800ac30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac34:	4313      	orrs	r3, r2
 800ac36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d10d      	bne.n	800ac5a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d009      	beq.n	800ac5a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	68d9      	ldr	r1, [r3, #12]
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac56:	460a      	mov	r2, r1
 800ac58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	78db      	ldrb	r3, [r3, #3]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d128      	bne.n	800acb4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d110      	bne.n	800ac94 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	015a      	lsls	r2, r3, #5
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	4413      	add	r3, r2
 800ac7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	0151      	lsls	r1, r2, #5
 800ac84:	69fa      	ldr	r2, [r7, #28]
 800ac86:	440a      	add	r2, r1
 800ac88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac90:	6013      	str	r3, [r2, #0]
 800ac92:	e00f      	b.n	800acb4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	015a      	lsls	r2, r3, #5
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	69ba      	ldr	r2, [r7, #24]
 800aca4:	0151      	lsls	r1, r2, #5
 800aca6:	69fa      	ldr	r2, [r7, #28]
 800aca8:	440a      	add	r2, r1
 800acaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	015a      	lsls	r2, r3, #5
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	4413      	add	r3, r2
 800acbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	0151      	lsls	r1, r2, #5
 800acc6:	69fa      	ldr	r2, [r7, #28]
 800acc8:	440a      	add	r2, r1
 800acca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3720      	adds	r7, #32
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	1ff80000 	.word	0x1ff80000

0800ace4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	4613      	mov	r3, r2
 800acf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	785b      	ldrb	r3, [r3, #1]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	f040 80cd 	bne.w	800aea0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d132      	bne.n	800ad74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	0151      	lsls	r1, r2, #5
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	440a      	add	r2, r1
 800ad24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	0151      	lsls	r1, r2, #5
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	440a      	add	r2, r1
 800ad48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	0151      	lsls	r1, r2, #5
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	440a      	add	r2, r1
 800ad68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad6c:	0cdb      	lsrs	r3, r3, #19
 800ad6e:	04db      	lsls	r3, r3, #19
 800ad70:	6113      	str	r3, [r2, #16]
 800ad72:	e04e      	b.n	800ae12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	0151      	lsls	r1, r2, #5
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	440a      	add	r2, r1
 800ad8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad8e:	0cdb      	lsrs	r3, r3, #19
 800ad90:	04db      	lsls	r3, r3, #19
 800ad92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	015a      	lsls	r2, r3, #5
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	0151      	lsls	r1, r2, #5
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	440a      	add	r2, r1
 800adaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800adb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800adb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	695a      	ldr	r2, [r3, #20]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d903      	bls.n	800adcc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	689a      	ldr	r2, [r3, #8]
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	015a      	lsls	r2, r3, #5
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	4413      	add	r3, r2
 800add4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	693a      	ldr	r2, [r7, #16]
 800addc:	0151      	lsls	r1, r2, #5
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	440a      	add	r2, r1
 800ade2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ade6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf8:	691a      	ldr	r2, [r3, #16]
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae02:	6939      	ldr	r1, [r7, #16]
 800ae04:	0148      	lsls	r0, r1, #5
 800ae06:	6979      	ldr	r1, [r7, #20]
 800ae08:	4401      	add	r1, r0
 800ae0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ae12:	79fb      	ldrb	r3, [r7, #7]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d11e      	bne.n	800ae56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d009      	beq.n	800ae34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	015a      	lsls	r2, r3, #5
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	693a      	ldr	r2, [r7, #16]
 800ae44:	0151      	lsls	r1, r2, #5
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	440a      	add	r2, r1
 800ae4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	e092      	b.n	800af7c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	015a      	lsls	r2, r3, #5
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	0151      	lsls	r1, r2, #5
 800ae68:	697a      	ldr	r2, [r7, #20]
 800ae6a:	440a      	add	r2, r1
 800ae6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d07e      	beq.n	800af7c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	f003 030f 	and.w	r3, r3, #15
 800ae8e:	2101      	movs	r1, #1
 800ae90:	fa01 f303 	lsl.w	r3, r1, r3
 800ae94:	6979      	ldr	r1, [r7, #20]
 800ae96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	634b      	str	r3, [r1, #52]	; 0x34
 800ae9e:	e06d      	b.n	800af7c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	0151      	lsls	r1, r2, #5
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	440a      	add	r2, r1
 800aeb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeba:	0cdb      	lsrs	r3, r3, #19
 800aebc:	04db      	lsls	r3, r3, #19
 800aebe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	0151      	lsls	r1, r2, #5
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	440a      	add	r2, r1
 800aed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aede:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aee2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	689a      	ldr	r2, [r3, #8]
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	015a      	lsls	r2, r3, #5
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	4413      	add	r3, r2
 800aefc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	0151      	lsls	r1, r2, #5
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	440a      	add	r2, r1
 800af0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af20:	691a      	ldr	r2, [r3, #16]
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af2a:	6939      	ldr	r1, [r7, #16]
 800af2c:	0148      	lsls	r0, r1, #5
 800af2e:	6979      	ldr	r1, [r7, #20]
 800af30:	4401      	add	r1, r0
 800af32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af36:	4313      	orrs	r3, r2
 800af38:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d10d      	bne.n	800af5c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d009      	beq.n	800af5c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	68d9      	ldr	r1, [r3, #12]
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	015a      	lsls	r2, r3, #5
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	4413      	add	r3, r2
 800af54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af58:	460a      	mov	r2, r1
 800af5a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	015a      	lsls	r2, r3, #5
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	4413      	add	r3, r2
 800af64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	0151      	lsls	r1, r2, #5
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	440a      	add	r2, r1
 800af72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	371c      	adds	r7, #28
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b089      	sub	sp, #36	; 0x24
 800af8e:	af00      	add	r7, sp, #0
 800af90:	60f8      	str	r0, [r7, #12]
 800af92:	60b9      	str	r1, [r7, #8]
 800af94:	4611      	mov	r1, r2
 800af96:	461a      	mov	r2, r3
 800af98:	460b      	mov	r3, r1
 800af9a:	71fb      	strb	r3, [r7, #7]
 800af9c:	4613      	mov	r3, r2
 800af9e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800afa8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800afac:	2b00      	cmp	r3, #0
 800afae:	d123      	bne.n	800aff8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800afb0:	88bb      	ldrh	r3, [r7, #4]
 800afb2:	3303      	adds	r3, #3
 800afb4:	089b      	lsrs	r3, r3, #2
 800afb6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800afb8:	2300      	movs	r3, #0
 800afba:	61bb      	str	r3, [r7, #24]
 800afbc:	e018      	b.n	800aff0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800afbe:	79fb      	ldrb	r3, [r7, #7]
 800afc0:	031a      	lsls	r2, r3, #12
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afca:	461a      	mov	r2, r3
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	3301      	adds	r3, #1
 800afd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	3301      	adds	r3, #1
 800afdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	3301      	adds	r3, #1
 800afe2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	3301      	adds	r3, #1
 800afe8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	3301      	adds	r3, #1
 800afee:	61bb      	str	r3, [r7, #24]
 800aff0:	69ba      	ldr	r2, [r7, #24]
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d3e2      	bcc.n	800afbe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3724      	adds	r7, #36	; 0x24
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b006:	b480      	push	{r7}
 800b008:	b08b      	sub	sp, #44	; 0x2c
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	60f8      	str	r0, [r7, #12]
 800b00e:	60b9      	str	r1, [r7, #8]
 800b010:	4613      	mov	r3, r2
 800b012:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b01c:	88fb      	ldrh	r3, [r7, #6]
 800b01e:	089b      	lsrs	r3, r3, #2
 800b020:	b29b      	uxth	r3, r3
 800b022:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b024:	88fb      	ldrh	r3, [r7, #6]
 800b026:	f003 0303 	and.w	r3, r3, #3
 800b02a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b02c:	2300      	movs	r3, #0
 800b02e:	623b      	str	r3, [r7, #32]
 800b030:	e014      	b.n	800b05c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	601a      	str	r2, [r3, #0]
    pDest++;
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	3301      	adds	r3, #1
 800b042:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	3301      	adds	r3, #1
 800b048:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04c:	3301      	adds	r3, #1
 800b04e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	3301      	adds	r3, #1
 800b054:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	3301      	adds	r3, #1
 800b05a:	623b      	str	r3, [r7, #32]
 800b05c:	6a3a      	ldr	r2, [r7, #32]
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	429a      	cmp	r2, r3
 800b062:	d3e6      	bcc.n	800b032 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b064:	8bfb      	ldrh	r3, [r7, #30]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d01e      	beq.n	800b0a8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b074:	461a      	mov	r2, r3
 800b076:	f107 0310 	add.w	r3, r7, #16
 800b07a:	6812      	ldr	r2, [r2, #0]
 800b07c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	b2db      	uxtb	r3, r3
 800b084:	00db      	lsls	r3, r3, #3
 800b086:	fa22 f303 	lsr.w	r3, r2, r3
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	701a      	strb	r2, [r3, #0]
      i++;
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	3301      	adds	r3, #1
 800b094:	623b      	str	r3, [r7, #32]
      pDest++;
 800b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b098:	3301      	adds	r3, #1
 800b09a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b09c:	8bfb      	ldrh	r3, [r7, #30]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b0a2:	8bfb      	ldrh	r3, [r7, #30]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1ea      	bne.n	800b07e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	372c      	adds	r7, #44	; 0x2c
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b085      	sub	sp, #20
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	785b      	ldrb	r3, [r3, #1]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d12c      	bne.n	800b12c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	db12      	blt.n	800b10a <USB_EPSetStall+0x54>
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00f      	beq.n	800b10a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	015a      	lsls	r2, r3, #5
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	0151      	lsls	r1, r2, #5
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	440a      	add	r2, r1
 800b100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b104:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b108:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	015a      	lsls	r2, r3, #5
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	4413      	add	r3, r2
 800b112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	0151      	lsls	r1, r2, #5
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	440a      	add	r2, r1
 800b120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b128:	6013      	str	r3, [r2, #0]
 800b12a:	e02b      	b.n	800b184 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	015a      	lsls	r2, r3, #5
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	4413      	add	r3, r2
 800b134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	db12      	blt.n	800b164 <USB_EPSetStall+0xae>
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00f      	beq.n	800b164 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	015a      	lsls	r2, r3, #5
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	4413      	add	r3, r2
 800b14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	0151      	lsls	r1, r2, #5
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	440a      	add	r2, r1
 800b15a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b15e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b162:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	015a      	lsls	r2, r3, #5
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	4413      	add	r3, r2
 800b16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	0151      	lsls	r1, r2, #5
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	440a      	add	r2, r1
 800b17a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b17e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b182:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b192:	b480      	push	{r7}
 800b194:	b085      	sub	sp, #20
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	785b      	ldrb	r3, [r3, #1]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d128      	bne.n	800b200 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	015a      	lsls	r2, r3, #5
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	0151      	lsls	r1, r2, #5
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	440a      	add	r2, r1
 800b1c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	78db      	ldrb	r3, [r3, #3]
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d003      	beq.n	800b1de <USB_EPClearStall+0x4c>
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	78db      	ldrb	r3, [r3, #3]
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d138      	bne.n	800b250 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	0151      	lsls	r1, r2, #5
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	440a      	add	r2, r1
 800b1f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	e027      	b.n	800b250 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	0151      	lsls	r1, r2, #5
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	440a      	add	r2, r1
 800b216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b21a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b21e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	78db      	ldrb	r3, [r3, #3]
 800b224:	2b03      	cmp	r3, #3
 800b226:	d003      	beq.n	800b230 <USB_EPClearStall+0x9e>
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	78db      	ldrb	r3, [r3, #3]
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d10f      	bne.n	800b250 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	015a      	lsls	r2, r3, #5
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	4413      	add	r3, r2
 800b238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	0151      	lsls	r1, r2, #5
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	440a      	add	r2, r1
 800b246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b24a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b24e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b25e:	b480      	push	{r7}
 800b260:	b085      	sub	sp, #20
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
 800b266:	460b      	mov	r3, r1
 800b268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b27c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b280:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	78fb      	ldrb	r3, [r7, #3]
 800b28c:	011b      	lsls	r3, r3, #4
 800b28e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b292:	68f9      	ldr	r1, [r7, #12]
 800b294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b298:	4313      	orrs	r3, r2
 800b29a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b085      	sub	sp, #20
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b2c4:	f023 0303 	bic.w	r3, r3, #3
 800b2c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2d8:	f023 0302 	bic.w	r3, r3, #2
 800b2dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3714      	adds	r7, #20
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b306:	f023 0303 	bic.w	r3, r3, #3
 800b30a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b31a:	f043 0302 	orr.w	r3, r3, #2
 800b31e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b32e:	b480      	push	{r7}
 800b330:	b085      	sub	sp, #20
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	4013      	ands	r3, r2
 800b344:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b346:	68fb      	ldr	r3, [r7, #12]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b370:	69db      	ldr	r3, [r3, #28]
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	4013      	ands	r3, r2
 800b376:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	0c1b      	lsrs	r3, r3, #16
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3a4:	69db      	ldr	r3, [r3, #28]
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	b29b      	uxth	r3, r3
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3714      	adds	r7, #20
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b3cc:	78fb      	ldrb	r3, [r7, #3]
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3714      	adds	r7, #20
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	460b      	mov	r3, r1
 800b402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b41a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b41c:	78fb      	ldrb	r3, [r7, #3]
 800b41e:	f003 030f 	and.w	r3, r3, #15
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	fa22 f303 	lsr.w	r3, r2, r3
 800b428:	01db      	lsls	r3, r3, #7
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	4313      	orrs	r3, r2
 800b430:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b432:	78fb      	ldrb	r3, [r7, #3]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	4013      	ands	r3, r2
 800b444:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b446:	68bb      	ldr	r3, [r7, #8]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	371c      	adds	r7, #28
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	f003 0301 	and.w	r3, r3, #1
}
 800b464:	4618      	mov	r0, r3
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b48a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b48e:	f023 0307 	bic.w	r3, r3, #7
 800b492:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
	...

0800b4b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	607a      	str	r2, [r7, #4]
 800b4c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	333c      	adds	r3, #60	; 0x3c
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	4a26      	ldr	r2, [pc, #152]	; (800b570 <USB_EP0_OutStart+0xb8>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d90a      	bls.n	800b4f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4ec:	d101      	bne.n	800b4f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e037      	b.n	800b562 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b50c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b520:	f043 0318 	orr.w	r3, r3, #24
 800b524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b534:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b538:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b53a:	7afb      	ldrb	r3, [r7, #11]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d10f      	bne.n	800b560 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b546:	461a      	mov	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b55a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b55e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	371c      	adds	r7, #28
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	4f54300a 	.word	0x4f54300a

0800b574 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b57c:	2300      	movs	r3, #0
 800b57e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	3301      	adds	r3, #1
 800b584:	60fb      	str	r3, [r7, #12]
 800b586:	4a13      	ldr	r2, [pc, #76]	; (800b5d4 <USB_CoreReset+0x60>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d901      	bls.n	800b590 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b58c:	2303      	movs	r3, #3
 800b58e:	e01a      	b.n	800b5c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	2b00      	cmp	r3, #0
 800b596:	daf3      	bge.n	800b580 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b598:	2300      	movs	r3, #0
 800b59a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	f043 0201 	orr.w	r2, r3, #1
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]
 800b5ae:	4a09      	ldr	r2, [pc, #36]	; (800b5d4 <USB_CoreReset+0x60>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d901      	bls.n	800b5b8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e006      	b.n	800b5c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	f003 0301 	and.w	r3, r3, #1
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d0f1      	beq.n	800b5a8 <USB_CoreReset+0x34>

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	00030d40 	.word	0x00030d40

0800b5d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b5e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b5e8:	f005 fc50 	bl	8010e8c <USBD_static_malloc>
 800b5ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d105      	bne.n	800b600 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	e066      	b.n	800b6ce <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	7c1b      	ldrb	r3, [r3, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d119      	bne.n	800b644 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b610:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b614:	2202      	movs	r2, #2
 800b616:	2181      	movs	r1, #129	; 0x81
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f005 fb14 	bl	8010c46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b624:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b628:	2202      	movs	r2, #2
 800b62a:	2101      	movs	r1, #1
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f005 fb0a 	bl	8010c46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2210      	movs	r2, #16
 800b63e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b642:	e016      	b.n	800b672 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b644:	2340      	movs	r3, #64	; 0x40
 800b646:	2202      	movs	r2, #2
 800b648:	2181      	movs	r1, #129	; 0x81
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f005 fafb 	bl	8010c46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b656:	2340      	movs	r3, #64	; 0x40
 800b658:	2202      	movs	r2, #2
 800b65a:	2101      	movs	r1, #1
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f005 faf2 	bl	8010c46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2210      	movs	r2, #16
 800b66e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b672:	2308      	movs	r3, #8
 800b674:	2203      	movs	r2, #3
 800b676:	2182      	movs	r1, #130	; 0x82
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f005 fae4 	bl	8010c46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	7c1b      	ldrb	r3, [r3, #16]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d109      	bne.n	800b6bc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f005 fbb5 	bl	8010e24 <USBD_LL_PrepareReceive>
 800b6ba:	e007      	b.n	800b6cc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6c2:	2340      	movs	r3, #64	; 0x40
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f005 fbac 	bl	8010e24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b6e2:	2181      	movs	r1, #129	; 0x81
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f005 fad4 	bl	8010c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f005 facd 	bl	8010c92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b700:	2182      	movs	r1, #130	; 0x82
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f005 fac5 	bl	8010c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00e      	beq.n	800b740 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b732:	4618      	mov	r0, r3
 800b734:	f005 fbb8 	bl	8010ea8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b75c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b75e:	2300      	movs	r3, #0
 800b760:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b762:	2300      	movs	r3, #0
 800b764:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b766:	2300      	movs	r3, #0
 800b768:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b770:	2303      	movs	r3, #3
 800b772:	e0af      	b.n	800b8d4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d03f      	beq.n	800b800 <USBD_CDC_Setup+0xb4>
 800b780:	2b20      	cmp	r3, #32
 800b782:	f040 809f 	bne.w	800b8c4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	88db      	ldrh	r3, [r3, #6]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d02e      	beq.n	800b7ec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	b25b      	sxtb	r3, r3
 800b794:	2b00      	cmp	r3, #0
 800b796:	da16      	bge.n	800b7c6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b7a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	88d2      	ldrh	r2, [r2, #6]
 800b7aa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	88db      	ldrh	r3, [r3, #6]
 800b7b0:	2b07      	cmp	r3, #7
 800b7b2:	bf28      	it	cs
 800b7b4:	2307      	movcs	r3, #7
 800b7b6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	89fa      	ldrh	r2, [r7, #14]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f001 fb19 	bl	800cdf6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b7c4:	e085      	b.n	800b8d2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	785a      	ldrb	r2, [r3, #1]
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	88db      	ldrh	r3, [r3, #6]
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b7dc:	6939      	ldr	r1, [r7, #16]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	88db      	ldrh	r3, [r3, #6]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f001 fb32 	bl	800ce4e <USBD_CtlPrepareRx>
      break;
 800b7ea:	e072      	b.n	800b8d2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	683a      	ldr	r2, [r7, #0]
 800b7f6:	7850      	ldrb	r0, [r2, #1]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	6839      	ldr	r1, [r7, #0]
 800b7fc:	4798      	blx	r3
      break;
 800b7fe:	e068      	b.n	800b8d2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	785b      	ldrb	r3, [r3, #1]
 800b804:	2b0b      	cmp	r3, #11
 800b806:	d852      	bhi.n	800b8ae <USBD_CDC_Setup+0x162>
 800b808:	a201      	add	r2, pc, #4	; (adr r2, 800b810 <USBD_CDC_Setup+0xc4>)
 800b80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80e:	bf00      	nop
 800b810:	0800b841 	.word	0x0800b841
 800b814:	0800b8bd 	.word	0x0800b8bd
 800b818:	0800b8af 	.word	0x0800b8af
 800b81c:	0800b8af 	.word	0x0800b8af
 800b820:	0800b8af 	.word	0x0800b8af
 800b824:	0800b8af 	.word	0x0800b8af
 800b828:	0800b8af 	.word	0x0800b8af
 800b82c:	0800b8af 	.word	0x0800b8af
 800b830:	0800b8af 	.word	0x0800b8af
 800b834:	0800b8af 	.word	0x0800b8af
 800b838:	0800b86b 	.word	0x0800b86b
 800b83c:	0800b895 	.word	0x0800b895
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d107      	bne.n	800b85c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b84c:	f107 030a 	add.w	r3, r7, #10
 800b850:	2202      	movs	r2, #2
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f001 face 	bl	800cdf6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b85a:	e032      	b.n	800b8c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f001 fa58 	bl	800cd14 <USBD_CtlError>
            ret = USBD_FAIL;
 800b864:	2303      	movs	r3, #3
 800b866:	75fb      	strb	r3, [r7, #23]
          break;
 800b868:	e02b      	b.n	800b8c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b03      	cmp	r3, #3
 800b874:	d107      	bne.n	800b886 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b876:	f107 030d 	add.w	r3, r7, #13
 800b87a:	2201      	movs	r2, #1
 800b87c:	4619      	mov	r1, r3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f001 fab9 	bl	800cdf6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b884:	e01d      	b.n	800b8c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f001 fa43 	bl	800cd14 <USBD_CtlError>
            ret = USBD_FAIL;
 800b88e:	2303      	movs	r3, #3
 800b890:	75fb      	strb	r3, [r7, #23]
          break;
 800b892:	e016      	b.n	800b8c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b03      	cmp	r3, #3
 800b89e:	d00f      	beq.n	800b8c0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b8a0:	6839      	ldr	r1, [r7, #0]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f001 fa36 	bl	800cd14 <USBD_CtlError>
            ret = USBD_FAIL;
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b8ac:	e008      	b.n	800b8c0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f001 fa2f 	bl	800cd14 <USBD_CtlError>
          ret = USBD_FAIL;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	75fb      	strb	r3, [r7, #23]
          break;
 800b8ba:	e002      	b.n	800b8c2 <USBD_CDC_Setup+0x176>
          break;
 800b8bc:	bf00      	nop
 800b8be:	e008      	b.n	800b8d2 <USBD_CDC_Setup+0x186>
          break;
 800b8c0:	bf00      	nop
      }
      break;
 800b8c2:	e006      	b.n	800b8d2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 fa24 	bl	800cd14 <USBD_CtlError>
      ret = USBD_FAIL;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b8d0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e04f      	b.n	800b99e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b904:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b906:	78fa      	ldrb	r2, [r7, #3]
 800b908:	6879      	ldr	r1, [r7, #4]
 800b90a:	4613      	mov	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	440b      	add	r3, r1
 800b914:	3318      	adds	r3, #24
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d029      	beq.n	800b970 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b91c:	78fa      	ldrb	r2, [r7, #3]
 800b91e:	6879      	ldr	r1, [r7, #4]
 800b920:	4613      	mov	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	440b      	add	r3, r1
 800b92a:	3318      	adds	r3, #24
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	78f9      	ldrb	r1, [r7, #3]
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	460b      	mov	r3, r1
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	1a5b      	subs	r3, r3, r1
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4403      	add	r3, r0
 800b93c:	3344      	adds	r3, #68	; 0x44
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	fbb2 f1f3 	udiv	r1, r2, r3
 800b944:	fb03 f301 	mul.w	r3, r3, r1
 800b948:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d110      	bne.n	800b970 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b94e:	78fa      	ldrb	r2, [r7, #3]
 800b950:	6879      	ldr	r1, [r7, #4]
 800b952:	4613      	mov	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4413      	add	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	440b      	add	r3, r1
 800b95c:	3318      	adds	r3, #24
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b962:	78f9      	ldrb	r1, [r7, #3]
 800b964:	2300      	movs	r3, #0
 800b966:	2200      	movs	r2, #0
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f005 fa3a 	bl	8010de2 <USBD_LL_Transmit>
 800b96e:	e015      	b.n	800b99c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2200      	movs	r2, #0
 800b974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00b      	beq.n	800b99c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b998:	78fa      	ldrb	r2, [r7, #3]
 800b99a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b084      	sub	sp, #16
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e015      	b.n	800b9f4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f005 fa4a 	bl	8010e66 <USBD_LL_GetRxDataSize>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d101      	bne.n	800ba16 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ba12:	2303      	movs	r3, #3
 800ba14:	e01b      	b.n	800ba4e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d015      	beq.n	800ba4c <USBD_CDC_EP0_RxReady+0x50>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ba26:	2bff      	cmp	r3, #255	; 0xff
 800ba28:	d010      	beq.n	800ba4c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ba38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba40:	b292      	uxth	r2, r2
 800ba42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	22ff      	movs	r2, #255	; 0xff
 800ba48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
	...

0800ba58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2243      	movs	r2, #67	; 0x43
 800ba64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ba66:	4b03      	ldr	r3, [pc, #12]	; (800ba74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	200000c0 	.word	0x200000c0

0800ba78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2243      	movs	r2, #67	; 0x43
 800ba84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ba86:	4b03      	ldr	r3, [pc, #12]	; (800ba94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	2000007c 	.word	0x2000007c

0800ba98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2243      	movs	r2, #67	; 0x43
 800baa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800baa6:	4b03      	ldr	r3, [pc, #12]	; (800bab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	20000104 	.word	0x20000104

0800bab8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	220a      	movs	r2, #10
 800bac4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bac6:	4b03      	ldr	r3, [pc, #12]	; (800bad4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	20000038 	.word	0x20000038

0800bad8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bae8:	2303      	movs	r3, #3
 800baea:	e004      	b.n	800baf6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b087      	sub	sp, #28
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb14:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d101      	bne.n	800bb20 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e008      	b.n	800bb32 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	371c      	adds	r7, #28
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b085      	sub	sp, #20
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d101      	bne.n	800bb5a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bb56:	2303      	movs	r3, #3
 800bb58:	e004      	b.n	800bb64 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	683a      	ldr	r2, [r7, #0]
 800bb5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb7e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bb80:	2301      	movs	r3, #1
 800bb82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e01a      	b.n	800bbc8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d114      	bne.n	800bbc6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bbba:	2181      	movs	r1, #129	; 0x81
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f005 f910 	bl	8010de2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d101      	bne.n	800bbee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bbea:	2303      	movs	r3, #3
 800bbec:	e016      	b.n	800bc1c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	7c1b      	ldrb	r3, [r3, #16]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d109      	bne.n	800bc0a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bbfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc00:	2101      	movs	r1, #1
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f005 f90e 	bl	8010e24 <USBD_LL_PrepareReceive>
 800bc08:	e007      	b.n	800bc1a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc10:	2340      	movs	r3, #64	; 0x40
 800bc12:	2101      	movs	r1, #1
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f005 f905 	bl	8010e24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e01f      	b.n	800bc7c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d003      	beq.n	800bc62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	68ba      	ldr	r2, [r7, #8]
 800bc5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	79fa      	ldrb	r2, [r7, #7]
 800bc6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f004 ff81 	bl	8010b78 <USBD_LL_Init>
 800bc76:	4603      	mov	r3, r0
 800bc78:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3718      	adds	r7, #24
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d101      	bne.n	800bc9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	e016      	b.n	800bcca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb8:	f107 020e 	add.w	r2, r7, #14
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	4798      	blx	r3
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f004 ff98 	bl	8010c10 <USBD_LL_Start>
 800bce0:	4603      	mov	r3, r0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b083      	sub	sp, #12
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d009      	beq.n	800bd2e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	78fa      	ldrb	r2, [r7, #3]
 800bd24:	4611      	mov	r1, r2
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	4798      	blx	r3
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d007      	beq.n	800bd5e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	78fa      	ldrb	r2, [r7, #3]
 800bd58:	4611      	mov	r1, r2
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	4798      	blx	r3
  }

  return USBD_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd78:	6839      	ldr	r1, [r7, #0]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 ff90 	bl	800cca0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bd8e:	461a      	mov	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bd9c:	f003 031f 	and.w	r3, r3, #31
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d01a      	beq.n	800bdda <USBD_LL_SetupStage+0x72>
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d822      	bhi.n	800bdee <USBD_LL_SetupStage+0x86>
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d002      	beq.n	800bdb2 <USBD_LL_SetupStage+0x4a>
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d00a      	beq.n	800bdc6 <USBD_LL_SetupStage+0x5e>
 800bdb0:	e01d      	b.n	800bdee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bdb8:	4619      	mov	r1, r3
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fa62 	bl	800c284 <USBD_StdDevReq>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc4:	e020      	b.n	800be08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fac6 	bl	800c360 <USBD_StdItfReq>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73fb      	strb	r3, [r7, #15]
      break;
 800bdd8:	e016      	b.n	800be08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bde0:	4619      	mov	r1, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fb05 	bl	800c3f2 <USBD_StdEPReq>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73fb      	strb	r3, [r7, #15]
      break;
 800bdec:	e00c      	b.n	800be08 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bdf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f004 ff67 	bl	8010cd0 <USBD_LL_StallEP>
 800be02:	4603      	mov	r3, r0
 800be04:	73fb      	strb	r3, [r7, #15]
      break;
 800be06:	bf00      	nop
  }

  return ret;
 800be08:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b086      	sub	sp, #24
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	460b      	mov	r3, r1
 800be1c:	607a      	str	r2, [r7, #4]
 800be1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800be20:	7afb      	ldrb	r3, [r7, #11]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d138      	bne.n	800be98 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800be2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be34:	2b03      	cmp	r3, #3
 800be36:	d14a      	bne.n	800bece <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	689a      	ldr	r2, [r3, #8]
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	429a      	cmp	r2, r3
 800be42:	d913      	bls.n	800be6c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	689a      	ldr	r2, [r3, #8]
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	1ad2      	subs	r2, r2, r3
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	68da      	ldr	r2, [r3, #12]
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	4293      	cmp	r3, r2
 800be5c:	bf28      	it	cs
 800be5e:	4613      	movcs	r3, r2
 800be60:	461a      	mov	r2, r3
 800be62:	6879      	ldr	r1, [r7, #4]
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f001 f80f 	bl	800ce88 <USBD_CtlContinueRx>
 800be6a:	e030      	b.n	800bece <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be72:	b2db      	uxtb	r3, r3
 800be74:	2b03      	cmp	r3, #3
 800be76:	d10b      	bne.n	800be90 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d005      	beq.n	800be90 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f001 f80a 	bl	800ceaa <USBD_CtlSendStatus>
 800be96:	e01a      	b.n	800bece <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	d114      	bne.n	800bece <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00e      	beq.n	800bece <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb6:	699b      	ldr	r3, [r3, #24]
 800beb8:	7afa      	ldrb	r2, [r7, #11]
 800beba:	4611      	mov	r1, r2
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	4798      	blx	r3
 800bec0:	4603      	mov	r3, r0
 800bec2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800beca:	7dfb      	ldrb	r3, [r7, #23]
 800becc:	e000      	b.n	800bed0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3718      	adds	r7, #24
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b086      	sub	sp, #24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	460b      	mov	r3, r1
 800bee2:	607a      	str	r2, [r7, #4]
 800bee4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bee6:	7afb      	ldrb	r3, [r7, #11]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d16b      	bne.n	800bfc4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	3314      	adds	r3, #20
 800bef0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d156      	bne.n	800bfaa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	689a      	ldr	r2, [r3, #8]
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d914      	bls.n	800bf32 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	689a      	ldr	r2, [r3, #8]
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	1ad2      	subs	r2, r2, r3
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	6879      	ldr	r1, [r7, #4]
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f000 ff84 	bl	800ce2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf24:	2300      	movs	r3, #0
 800bf26:	2200      	movs	r2, #0
 800bf28:	2100      	movs	r1, #0
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f004 ff7a 	bl	8010e24 <USBD_LL_PrepareReceive>
 800bf30:	e03b      	b.n	800bfaa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	68da      	ldr	r2, [r3, #12]
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d11c      	bne.n	800bf78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	685a      	ldr	r2, [r3, #4]
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d316      	bcc.n	800bf78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d20f      	bcs.n	800bf78 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bf58:	2200      	movs	r2, #0
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 ff65 	bl	800ce2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2100      	movs	r1, #0
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f004 ff57 	bl	8010e24 <USBD_LL_PrepareReceive>
 800bf76:	e018      	b.n	800bfaa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	2b03      	cmp	r3, #3
 800bf82:	d10b      	bne.n	800bf9c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d005      	beq.n	800bf9c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf9c:	2180      	movs	r1, #128	; 0x80
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f004 fe96 	bl	8010cd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f000 ff93 	bl	800ced0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d122      	bne.n	800bffa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f7ff fe98 	bl	800bcea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bfc2:	e01a      	b.n	800bffa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	2b03      	cmp	r3, #3
 800bfce:	d114      	bne.n	800bffa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00e      	beq.n	800bffa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfe2:	695b      	ldr	r3, [r3, #20]
 800bfe4:	7afa      	ldrb	r2, [r7, #11]
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	4798      	blx	r3
 800bfec:	4603      	mov	r3, r0
 800bfee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bff0:	7dfb      	ldrb	r3, [r7, #23]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bff6:	7dfb      	ldrb	r3, [r7, #23]
 800bff8:	e000      	b.n	800bffc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c034:	2303      	movs	r3, #3
 800c036:	e02f      	b.n	800c098 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00f      	beq.n	800c062 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d009      	beq.n	800c062 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	6852      	ldr	r2, [r2, #4]
 800c05a:	b2d2      	uxtb	r2, r2
 800c05c:	4611      	mov	r1, r2
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c062:	2340      	movs	r3, #64	; 0x40
 800c064:	2200      	movs	r2, #0
 800c066:	2100      	movs	r1, #0
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f004 fdec 	bl	8010c46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2201      	movs	r2, #1
 800c072:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2240      	movs	r2, #64	; 0x40
 800c07a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c07e:	2340      	movs	r3, #64	; 0x40
 800c080:	2200      	movs	r2, #0
 800c082:	2180      	movs	r1, #128	; 0x80
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f004 fdde 	bl	8010c46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2240      	movs	r2, #64	; 0x40
 800c094:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	78fa      	ldrb	r2, [r7, #3]
 800c0b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2204      	movs	r2, #4
 800c0da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	d106      	bne.n	800c10e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c106:	b2da      	uxtb	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d101      	bne.n	800c132 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c12e:	2303      	movs	r3, #3
 800c130:	e012      	b.n	800c158 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d10b      	bne.n	800c156 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c144:	69db      	ldr	r3, [r3, #28]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d005      	beq.n	800c156 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c150:	69db      	ldr	r3, [r3, #28]
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c156:	2300      	movs	r3, #0
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c176:	2303      	movs	r3, #3
 800c178:	e014      	b.n	800c1a4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b03      	cmp	r3, #3
 800c184:	d10d      	bne.n	800c1a2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c18c:	6a1b      	ldr	r3, [r3, #32]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d007      	beq.n	800c1a2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	78fa      	ldrb	r2, [r7, #3]
 800c19c:	4611      	mov	r1, r2
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	e014      	b.n	800c1f0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d10d      	bne.n	800c1ee <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d007      	beq.n	800c1ee <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e6:	78fa      	ldrb	r2, [r7, #3]
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b082      	sub	sp, #8
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c224:	2b00      	cmp	r3, #0
 800c226:	d009      	beq.n	800c23c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	6852      	ldr	r2, [r2, #4]
 800c234:	b2d2      	uxtb	r2, r2
 800c236:	4611      	mov	r1, r2
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	4798      	blx	r3
  }

  return USBD_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3708      	adds	r7, #8
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c246:	b480      	push	{r7}
 800c248:	b087      	sub	sp, #28
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	3301      	adds	r3, #1
 800c25c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c264:	8a3b      	ldrh	r3, [r7, #16]
 800c266:	021b      	lsls	r3, r3, #8
 800c268:	b21a      	sxth	r2, r3
 800c26a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c26e:	4313      	orrs	r3, r2
 800c270:	b21b      	sxth	r3, r3
 800c272:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c274:	89fb      	ldrh	r3, [r7, #14]
}
 800c276:	4618      	mov	r0, r3
 800c278:	371c      	adds	r7, #28
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
	...

0800c284 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c29a:	2b40      	cmp	r3, #64	; 0x40
 800c29c:	d005      	beq.n	800c2aa <USBD_StdDevReq+0x26>
 800c29e:	2b40      	cmp	r3, #64	; 0x40
 800c2a0:	d853      	bhi.n	800c34a <USBD_StdDevReq+0xc6>
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00b      	beq.n	800c2be <USBD_StdDevReq+0x3a>
 800c2a6:	2b20      	cmp	r3, #32
 800c2a8:	d14f      	bne.n	800c34a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	4798      	blx	r3
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c2bc:	e04a      	b.n	800c354 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	785b      	ldrb	r3, [r3, #1]
 800c2c2:	2b09      	cmp	r3, #9
 800c2c4:	d83b      	bhi.n	800c33e <USBD_StdDevReq+0xba>
 800c2c6:	a201      	add	r2, pc, #4	; (adr r2, 800c2cc <USBD_StdDevReq+0x48>)
 800c2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2cc:	0800c321 	.word	0x0800c321
 800c2d0:	0800c335 	.word	0x0800c335
 800c2d4:	0800c33f 	.word	0x0800c33f
 800c2d8:	0800c32b 	.word	0x0800c32b
 800c2dc:	0800c33f 	.word	0x0800c33f
 800c2e0:	0800c2ff 	.word	0x0800c2ff
 800c2e4:	0800c2f5 	.word	0x0800c2f5
 800c2e8:	0800c33f 	.word	0x0800c33f
 800c2ec:	0800c317 	.word	0x0800c317
 800c2f0:	0800c309 	.word	0x0800c309
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f9de 	bl	800c6b8 <USBD_GetDescriptor>
          break;
 800c2fc:	e024      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fb43 	bl	800c98c <USBD_SetAddress>
          break;
 800c306:	e01f      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fb82 	bl	800ca14 <USBD_SetConfig>
 800c310:	4603      	mov	r3, r0
 800c312:	73fb      	strb	r3, [r7, #15]
          break;
 800c314:	e018      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fc21 	bl	800cb60 <USBD_GetConfig>
          break;
 800c31e:	e013      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fc52 	bl	800cbcc <USBD_GetStatus>
          break;
 800c328:	e00e      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 fc81 	bl	800cc34 <USBD_SetFeature>
          break;
 800c332:	e009      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fc90 	bl	800cc5c <USBD_ClrFeature>
          break;
 800c33c:	e004      	b.n	800c348 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fce7 	bl	800cd14 <USBD_CtlError>
          break;
 800c346:	bf00      	nop
      }
      break;
 800c348:	e004      	b.n	800c354 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fce1 	bl	800cd14 <USBD_CtlError>
      break;
 800c352:	bf00      	nop
  }

  return ret;
 800c354:	7bfb      	ldrb	r3, [r7, #15]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop

0800c360 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c376:	2b40      	cmp	r3, #64	; 0x40
 800c378:	d005      	beq.n	800c386 <USBD_StdItfReq+0x26>
 800c37a:	2b40      	cmp	r3, #64	; 0x40
 800c37c:	d82f      	bhi.n	800c3de <USBD_StdItfReq+0x7e>
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <USBD_StdItfReq+0x26>
 800c382:	2b20      	cmp	r3, #32
 800c384:	d12b      	bne.n	800c3de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	3b01      	subs	r3, #1
 800c390:	2b02      	cmp	r3, #2
 800c392:	d81d      	bhi.n	800c3d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	889b      	ldrh	r3, [r3, #4]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d813      	bhi.n	800c3c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	6839      	ldr	r1, [r7, #0]
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	4798      	blx	r3
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	88db      	ldrh	r3, [r3, #6]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d110      	bne.n	800c3da <USBD_StdItfReq+0x7a>
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10d      	bne.n	800c3da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fd73 	bl	800ceaa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3c4:	e009      	b.n	800c3da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fca3 	bl	800cd14 <USBD_CtlError>
          break;
 800c3ce:	e004      	b.n	800c3da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 fc9e 	bl	800cd14 <USBD_CtlError>
          break;
 800c3d8:	e000      	b.n	800c3dc <USBD_StdItfReq+0x7c>
          break;
 800c3da:	bf00      	nop
      }
      break;
 800c3dc:	e004      	b.n	800c3e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 fc97 	bl	800cd14 <USBD_CtlError>
      break;
 800c3e6:	bf00      	nop
  }

  return ret;
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	889b      	ldrh	r3, [r3, #4]
 800c404:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c40e:	2b40      	cmp	r3, #64	; 0x40
 800c410:	d007      	beq.n	800c422 <USBD_StdEPReq+0x30>
 800c412:	2b40      	cmp	r3, #64	; 0x40
 800c414:	f200 8145 	bhi.w	800c6a2 <USBD_StdEPReq+0x2b0>
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00c      	beq.n	800c436 <USBD_StdEPReq+0x44>
 800c41c:	2b20      	cmp	r3, #32
 800c41e:	f040 8140 	bne.w	800c6a2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	6839      	ldr	r1, [r7, #0]
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	4798      	blx	r3
 800c430:	4603      	mov	r3, r0
 800c432:	73fb      	strb	r3, [r7, #15]
      break;
 800c434:	e13a      	b.n	800c6ac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	785b      	ldrb	r3, [r3, #1]
 800c43a:	2b03      	cmp	r3, #3
 800c43c:	d007      	beq.n	800c44e <USBD_StdEPReq+0x5c>
 800c43e:	2b03      	cmp	r3, #3
 800c440:	f300 8129 	bgt.w	800c696 <USBD_StdEPReq+0x2a4>
 800c444:	2b00      	cmp	r3, #0
 800c446:	d07f      	beq.n	800c548 <USBD_StdEPReq+0x156>
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d03c      	beq.n	800c4c6 <USBD_StdEPReq+0xd4>
 800c44c:	e123      	b.n	800c696 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b02      	cmp	r3, #2
 800c458:	d002      	beq.n	800c460 <USBD_StdEPReq+0x6e>
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d016      	beq.n	800c48c <USBD_StdEPReq+0x9a>
 800c45e:	e02c      	b.n	800c4ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c460:	7bbb      	ldrb	r3, [r7, #14]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00d      	beq.n	800c482 <USBD_StdEPReq+0x90>
 800c466:	7bbb      	ldrb	r3, [r7, #14]
 800c468:	2b80      	cmp	r3, #128	; 0x80
 800c46a:	d00a      	beq.n	800c482 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c46c:	7bbb      	ldrb	r3, [r7, #14]
 800c46e:	4619      	mov	r1, r3
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f004 fc2d 	bl	8010cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c476:	2180      	movs	r1, #128	; 0x80
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f004 fc29 	bl	8010cd0 <USBD_LL_StallEP>
 800c47e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c480:	e020      	b.n	800c4c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fc45 	bl	800cd14 <USBD_CtlError>
              break;
 800c48a:	e01b      	b.n	800c4c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	885b      	ldrh	r3, [r3, #2]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10e      	bne.n	800c4b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c494:	7bbb      	ldrb	r3, [r7, #14]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00b      	beq.n	800c4b2 <USBD_StdEPReq+0xc0>
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	2b80      	cmp	r3, #128	; 0x80
 800c49e:	d008      	beq.n	800c4b2 <USBD_StdEPReq+0xc0>
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	88db      	ldrh	r3, [r3, #6]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d104      	bne.n	800c4b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4a8:	7bbb      	ldrb	r3, [r7, #14]
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f004 fc0f 	bl	8010cd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fcf9 	bl	800ceaa <USBD_CtlSendStatus>

              break;
 800c4b8:	e004      	b.n	800c4c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fc29 	bl	800cd14 <USBD_CtlError>
              break;
 800c4c2:	bf00      	nop
          }
          break;
 800c4c4:	e0ec      	b.n	800c6a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d002      	beq.n	800c4d8 <USBD_StdEPReq+0xe6>
 800c4d2:	2b03      	cmp	r3, #3
 800c4d4:	d016      	beq.n	800c504 <USBD_StdEPReq+0x112>
 800c4d6:	e030      	b.n	800c53a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00d      	beq.n	800c4fa <USBD_StdEPReq+0x108>
 800c4de:	7bbb      	ldrb	r3, [r7, #14]
 800c4e0:	2b80      	cmp	r3, #128	; 0x80
 800c4e2:	d00a      	beq.n	800c4fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f004 fbf1 	bl	8010cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4ee:	2180      	movs	r1, #128	; 0x80
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f004 fbed 	bl	8010cd0 <USBD_LL_StallEP>
 800c4f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4f8:	e025      	b.n	800c546 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fc09 	bl	800cd14 <USBD_CtlError>
              break;
 800c502:	e020      	b.n	800c546 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	885b      	ldrh	r3, [r3, #2]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d11b      	bne.n	800c544 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c512:	2b00      	cmp	r3, #0
 800c514:	d004      	beq.n	800c520 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c516:	7bbb      	ldrb	r3, [r7, #14]
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f004 fbf7 	bl	8010d0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fcc2 	bl	800ceaa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	4798      	blx	r3
 800c534:	4603      	mov	r3, r0
 800c536:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c538:	e004      	b.n	800c544 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c53a:	6839      	ldr	r1, [r7, #0]
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fbe9 	bl	800cd14 <USBD_CtlError>
              break;
 800c542:	e000      	b.n	800c546 <USBD_StdEPReq+0x154>
              break;
 800c544:	bf00      	nop
          }
          break;
 800c546:	e0ab      	b.n	800c6a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	2b02      	cmp	r3, #2
 800c552:	d002      	beq.n	800c55a <USBD_StdEPReq+0x168>
 800c554:	2b03      	cmp	r3, #3
 800c556:	d032      	beq.n	800c5be <USBD_StdEPReq+0x1cc>
 800c558:	e097      	b.n	800c68a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d007      	beq.n	800c570 <USBD_StdEPReq+0x17e>
 800c560:	7bbb      	ldrb	r3, [r7, #14]
 800c562:	2b80      	cmp	r3, #128	; 0x80
 800c564:	d004      	beq.n	800c570 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fbd3 	bl	800cd14 <USBD_CtlError>
                break;
 800c56e:	e091      	b.n	800c694 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c574:	2b00      	cmp	r3, #0
 800c576:	da0b      	bge.n	800c590 <USBD_StdEPReq+0x19e>
 800c578:	7bbb      	ldrb	r3, [r7, #14]
 800c57a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c57e:	4613      	mov	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	3310      	adds	r3, #16
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	4413      	add	r3, r2
 800c58c:	3304      	adds	r3, #4
 800c58e:	e00b      	b.n	800c5a8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c590:	7bbb      	ldrb	r3, [r7, #14]
 800c592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c596:	4613      	mov	r3, r2
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	4413      	add	r3, r2
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fc1d 	bl	800cdf6 <USBD_CtlSendData>
              break;
 800c5bc:	e06a      	b.n	800c694 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c5be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	da11      	bge.n	800c5ea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5c6:	7bbb      	ldrb	r3, [r7, #14]
 800c5c8:	f003 020f 	and.w	r2, r3, #15
 800c5cc:	6879      	ldr	r1, [r7, #4]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	440b      	add	r3, r1
 800c5d8:	3324      	adds	r3, #36	; 0x24
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d117      	bne.n	800c610 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fb96 	bl	800cd14 <USBD_CtlError>
                  break;
 800c5e8:	e054      	b.n	800c694 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5ea:	7bbb      	ldrb	r3, [r7, #14]
 800c5ec:	f003 020f 	and.w	r2, r3, #15
 800c5f0:	6879      	ldr	r1, [r7, #4]
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	440b      	add	r3, r1
 800c5fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d104      	bne.n	800c610 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fb83 	bl	800cd14 <USBD_CtlError>
                  break;
 800c60e:	e041      	b.n	800c694 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c614:	2b00      	cmp	r3, #0
 800c616:	da0b      	bge.n	800c630 <USBD_StdEPReq+0x23e>
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	3310      	adds	r3, #16
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	4413      	add	r3, r2
 800c62c:	3304      	adds	r3, #4
 800c62e:	e00b      	b.n	800c648 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c630:	7bbb      	ldrb	r3, [r7, #14]
 800c632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c636:	4613      	mov	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4413      	add	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	4413      	add	r3, r2
 800c646:	3304      	adds	r3, #4
 800c648:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c64a:	7bbb      	ldrb	r3, [r7, #14]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <USBD_StdEPReq+0x264>
 800c650:	7bbb      	ldrb	r3, [r7, #14]
 800c652:	2b80      	cmp	r3, #128	; 0x80
 800c654:	d103      	bne.n	800c65e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	e00e      	b.n	800c67c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c65e:	7bbb      	ldrb	r3, [r7, #14]
 800c660:	4619      	mov	r1, r3
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f004 fb72 	bl	8010d4c <USBD_LL_IsStallEP>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	2201      	movs	r2, #1
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	e002      	b.n	800c67c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2202      	movs	r2, #2
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fbb7 	bl	800cdf6 <USBD_CtlSendData>
              break;
 800c688:	e004      	b.n	800c694 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fb41 	bl	800cd14 <USBD_CtlError>
              break;
 800c692:	bf00      	nop
          }
          break;
 800c694:	e004      	b.n	800c6a0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c696:	6839      	ldr	r1, [r7, #0]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 fb3b 	bl	800cd14 <USBD_CtlError>
          break;
 800c69e:	bf00      	nop
      }
      break;
 800c6a0:	e004      	b.n	800c6ac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fb35 	bl	800cd14 <USBD_CtlError>
      break;
 800c6aa:	bf00      	nop
  }

  return ret;
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
	...

0800c6b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	885b      	ldrh	r3, [r3, #2]
 800c6d2:	0a1b      	lsrs	r3, r3, #8
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	2b06      	cmp	r3, #6
 800c6da:	f200 8128 	bhi.w	800c92e <USBD_GetDescriptor+0x276>
 800c6de:	a201      	add	r2, pc, #4	; (adr r2, 800c6e4 <USBD_GetDescriptor+0x2c>)
 800c6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e4:	0800c701 	.word	0x0800c701
 800c6e8:	0800c719 	.word	0x0800c719
 800c6ec:	0800c759 	.word	0x0800c759
 800c6f0:	0800c92f 	.word	0x0800c92f
 800c6f4:	0800c92f 	.word	0x0800c92f
 800c6f8:	0800c8cf 	.word	0x0800c8cf
 800c6fc:	0800c8fb 	.word	0x0800c8fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	7c12      	ldrb	r2, [r2, #16]
 800c70c:	f107 0108 	add.w	r1, r7, #8
 800c710:	4610      	mov	r0, r2
 800c712:	4798      	blx	r3
 800c714:	60f8      	str	r0, [r7, #12]
      break;
 800c716:	e112      	b.n	800c93e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	7c1b      	ldrb	r3, [r3, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10d      	bne.n	800c73c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c728:	f107 0208 	add.w	r2, r7, #8
 800c72c:	4610      	mov	r0, r2
 800c72e:	4798      	blx	r3
 800c730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3301      	adds	r3, #1
 800c736:	2202      	movs	r2, #2
 800c738:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c73a:	e100      	b.n	800c93e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c744:	f107 0208 	add.w	r2, r7, #8
 800c748:	4610      	mov	r0, r2
 800c74a:	4798      	blx	r3
 800c74c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	3301      	adds	r3, #1
 800c752:	2202      	movs	r2, #2
 800c754:	701a      	strb	r2, [r3, #0]
      break;
 800c756:	e0f2      	b.n	800c93e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	885b      	ldrh	r3, [r3, #2]
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b05      	cmp	r3, #5
 800c760:	f200 80ac 	bhi.w	800c8bc <USBD_GetDescriptor+0x204>
 800c764:	a201      	add	r2, pc, #4	; (adr r2, 800c76c <USBD_GetDescriptor+0xb4>)
 800c766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c76a:	bf00      	nop
 800c76c:	0800c785 	.word	0x0800c785
 800c770:	0800c7b9 	.word	0x0800c7b9
 800c774:	0800c7ed 	.word	0x0800c7ed
 800c778:	0800c821 	.word	0x0800c821
 800c77c:	0800c855 	.word	0x0800c855
 800c780:	0800c889 	.word	0x0800c889
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00b      	beq.n	800c7a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	7c12      	ldrb	r2, [r2, #16]
 800c79c:	f107 0108 	add.w	r1, r7, #8
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	4798      	blx	r3
 800c7a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7a6:	e091      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fab2 	bl	800cd14 <USBD_CtlError>
            err++;
 800c7b0:	7afb      	ldrb	r3, [r7, #11]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7b6:	e089      	b.n	800c8cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00b      	beq.n	800c7dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	7c12      	ldrb	r2, [r2, #16]
 800c7d0:	f107 0108 	add.w	r1, r7, #8
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	4798      	blx	r3
 800c7d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7da:	e077      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7dc:	6839      	ldr	r1, [r7, #0]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 fa98 	bl	800cd14 <USBD_CtlError>
            err++;
 800c7e4:	7afb      	ldrb	r3, [r7, #11]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ea:	e06f      	b.n	800c8cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00b      	beq.n	800c810 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	7c12      	ldrb	r2, [r2, #16]
 800c804:	f107 0108 	add.w	r1, r7, #8
 800c808:	4610      	mov	r0, r2
 800c80a:	4798      	blx	r3
 800c80c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c80e:	e05d      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fa7e 	bl	800cd14 <USBD_CtlError>
            err++;
 800c818:	7afb      	ldrb	r3, [r7, #11]
 800c81a:	3301      	adds	r3, #1
 800c81c:	72fb      	strb	r3, [r7, #11]
          break;
 800c81e:	e055      	b.n	800c8cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00b      	beq.n	800c844 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	7c12      	ldrb	r2, [r2, #16]
 800c838:	f107 0108 	add.w	r1, r7, #8
 800c83c:	4610      	mov	r0, r2
 800c83e:	4798      	blx	r3
 800c840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c842:	e043      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c844:	6839      	ldr	r1, [r7, #0]
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fa64 	bl	800cd14 <USBD_CtlError>
            err++;
 800c84c:	7afb      	ldrb	r3, [r7, #11]
 800c84e:	3301      	adds	r3, #1
 800c850:	72fb      	strb	r3, [r7, #11]
          break;
 800c852:	e03b      	b.n	800c8cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00b      	beq.n	800c878 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	7c12      	ldrb	r2, [r2, #16]
 800c86c:	f107 0108 	add.w	r1, r7, #8
 800c870:	4610      	mov	r0, r2
 800c872:	4798      	blx	r3
 800c874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c876:	e029      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c878:	6839      	ldr	r1, [r7, #0]
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fa4a 	bl	800cd14 <USBD_CtlError>
            err++;
 800c880:	7afb      	ldrb	r3, [r7, #11]
 800c882:	3301      	adds	r3, #1
 800c884:	72fb      	strb	r3, [r7, #11]
          break;
 800c886:	e021      	b.n	800c8cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00b      	beq.n	800c8ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c89a:	699b      	ldr	r3, [r3, #24]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	7c12      	ldrb	r2, [r2, #16]
 800c8a0:	f107 0108 	add.w	r1, r7, #8
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	4798      	blx	r3
 800c8a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8aa:	e00f      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fa30 	bl	800cd14 <USBD_CtlError>
            err++;
 800c8b4:	7afb      	ldrb	r3, [r7, #11]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ba:	e007      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fa28 	bl	800cd14 <USBD_CtlError>
          err++;
 800c8c4:	7afb      	ldrb	r3, [r7, #11]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c8ca:	bf00      	nop
      }
      break;
 800c8cc:	e037      	b.n	800c93e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	7c1b      	ldrb	r3, [r3, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d109      	bne.n	800c8ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8de:	f107 0208 	add.w	r2, r7, #8
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	4798      	blx	r3
 800c8e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8e8:	e029      	b.n	800c93e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fa11 	bl	800cd14 <USBD_CtlError>
        err++;
 800c8f2:	7afb      	ldrb	r3, [r7, #11]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	72fb      	strb	r3, [r7, #11]
      break;
 800c8f8:	e021      	b.n	800c93e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	7c1b      	ldrb	r3, [r3, #16]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10d      	bne.n	800c91e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90a:	f107 0208 	add.w	r2, r7, #8
 800c90e:	4610      	mov	r0, r2
 800c910:	4798      	blx	r3
 800c912:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	3301      	adds	r3, #1
 800c918:	2207      	movs	r2, #7
 800c91a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c91c:	e00f      	b.n	800c93e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f9f7 	bl	800cd14 <USBD_CtlError>
        err++;
 800c926:	7afb      	ldrb	r3, [r7, #11]
 800c928:	3301      	adds	r3, #1
 800c92a:	72fb      	strb	r3, [r7, #11]
      break;
 800c92c:	e007      	b.n	800c93e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f9ef 	bl	800cd14 <USBD_CtlError>
      err++;
 800c936:	7afb      	ldrb	r3, [r7, #11]
 800c938:	3301      	adds	r3, #1
 800c93a:	72fb      	strb	r3, [r7, #11]
      break;
 800c93c:	bf00      	nop
  }

  if (err != 0U)
 800c93e:	7afb      	ldrb	r3, [r7, #11]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d11e      	bne.n	800c982 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	88db      	ldrh	r3, [r3, #6]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d016      	beq.n	800c97a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c94c:	893b      	ldrh	r3, [r7, #8]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00e      	beq.n	800c970 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	88da      	ldrh	r2, [r3, #6]
 800c956:	893b      	ldrh	r3, [r7, #8]
 800c958:	4293      	cmp	r3, r2
 800c95a:	bf28      	it	cs
 800c95c:	4613      	movcs	r3, r2
 800c95e:	b29b      	uxth	r3, r3
 800c960:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c962:	893b      	ldrh	r3, [r7, #8]
 800c964:	461a      	mov	r2, r3
 800c966:	68f9      	ldr	r1, [r7, #12]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fa44 	bl	800cdf6 <USBD_CtlSendData>
 800c96e:	e009      	b.n	800c984 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c970:	6839      	ldr	r1, [r7, #0]
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 f9ce 	bl	800cd14 <USBD_CtlError>
 800c978:	e004      	b.n	800c984 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 fa95 	bl	800ceaa <USBD_CtlSendStatus>
 800c980:	e000      	b.n	800c984 <USBD_GetDescriptor+0x2cc>
    return;
 800c982:	bf00      	nop
  }
}
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop

0800c98c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	889b      	ldrh	r3, [r3, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d131      	bne.n	800ca02 <USBD_SetAddress+0x76>
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	88db      	ldrh	r3, [r3, #6]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d12d      	bne.n	800ca02 <USBD_SetAddress+0x76>
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	885b      	ldrh	r3, [r3, #2]
 800c9aa:	2b7f      	cmp	r3, #127	; 0x7f
 800c9ac:	d829      	bhi.n	800ca02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	885b      	ldrh	r3, [r3, #2]
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d104      	bne.n	800c9d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c9c6:	6839      	ldr	r1, [r7, #0]
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 f9a3 	bl	800cd14 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9ce:	e01d      	b.n	800ca0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	7bfa      	ldrb	r2, [r7, #15]
 800c9d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
 800c9da:	4619      	mov	r1, r3
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f004 f9e1 	bl	8010da4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fa61 	bl	800ceaa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d004      	beq.n	800c9f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2202      	movs	r2, #2
 800c9f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9f6:	e009      	b.n	800ca0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca00:	e004      	b.n	800ca0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca02:	6839      	ldr	r1, [r7, #0]
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 f985 	bl	800cd14 <USBD_CtlError>
  }
}
 800ca0a:	bf00      	nop
 800ca0c:	bf00      	nop
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	885b      	ldrh	r3, [r3, #2]
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	4b4c      	ldr	r3, [pc, #304]	; (800cb5c <USBD_SetConfig+0x148>)
 800ca2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca2c:	4b4b      	ldr	r3, [pc, #300]	; (800cb5c <USBD_SetConfig+0x148>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d905      	bls.n	800ca40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca34:	6839      	ldr	r1, [r7, #0]
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 f96c 	bl	800cd14 <USBD_CtlError>
    return USBD_FAIL;
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	e088      	b.n	800cb52 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	d002      	beq.n	800ca52 <USBD_SetConfig+0x3e>
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	d025      	beq.n	800ca9c <USBD_SetConfig+0x88>
 800ca50:	e071      	b.n	800cb36 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ca52:	4b42      	ldr	r3, [pc, #264]	; (800cb5c <USBD_SetConfig+0x148>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d01c      	beq.n	800ca94 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ca5a:	4b40      	ldr	r3, [pc, #256]	; (800cb5c <USBD_SetConfig+0x148>)
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca64:	4b3d      	ldr	r3, [pc, #244]	; (800cb5c <USBD_SetConfig+0x148>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	4619      	mov	r1, r3
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7ff f948 	bl	800bd00 <USBD_SetClassConfig>
 800ca70:	4603      	mov	r3, r0
 800ca72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d004      	beq.n	800ca84 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f949 	bl	800cd14 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca82:	e065      	b.n	800cb50 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fa10 	bl	800ceaa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2203      	movs	r2, #3
 800ca8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ca92:	e05d      	b.n	800cb50 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 fa08 	bl	800ceaa <USBD_CtlSendStatus>
      break;
 800ca9a:	e059      	b.n	800cb50 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ca9c:	4b2f      	ldr	r3, [pc, #188]	; (800cb5c <USBD_SetConfig+0x148>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d112      	bne.n	800caca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2202      	movs	r2, #2
 800caa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800caac:	4b2b      	ldr	r3, [pc, #172]	; (800cb5c <USBD_SetConfig+0x148>)
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	461a      	mov	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cab6:	4b29      	ldr	r3, [pc, #164]	; (800cb5c <USBD_SetConfig+0x148>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	4619      	mov	r1, r3
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f7ff f93b 	bl	800bd38 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f9f1 	bl	800ceaa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cac8:	e042      	b.n	800cb50 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800caca:	4b24      	ldr	r3, [pc, #144]	; (800cb5c <USBD_SetConfig+0x148>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	461a      	mov	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d02a      	beq.n	800cb2e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f7ff f929 	bl	800bd38 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cae6:	4b1d      	ldr	r3, [pc, #116]	; (800cb5c <USBD_SetConfig+0x148>)
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	461a      	mov	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800caf0:	4b1a      	ldr	r3, [pc, #104]	; (800cb5c <USBD_SetConfig+0x148>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7ff f902 	bl	800bd00 <USBD_SetClassConfig>
 800cafc:	4603      	mov	r3, r0
 800cafe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00f      	beq.n	800cb26 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 f903 	bl	800cd14 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	4619      	mov	r1, r3
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f7ff f90e 	bl	800bd38 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2202      	movs	r2, #2
 800cb20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb24:	e014      	b.n	800cb50 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 f9bf 	bl	800ceaa <USBD_CtlSendStatus>
      break;
 800cb2c:	e010      	b.n	800cb50 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 f9bb 	bl	800ceaa <USBD_CtlSendStatus>
      break;
 800cb34:	e00c      	b.n	800cb50 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cb36:	6839      	ldr	r1, [r7, #0]
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f8eb 	bl	800cd14 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb3e:	4b07      	ldr	r3, [pc, #28]	; (800cb5c <USBD_SetConfig+0x148>)
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	4619      	mov	r1, r3
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7ff f8f7 	bl	800bd38 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cb4a:	2303      	movs	r3, #3
 800cb4c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb4e:	bf00      	nop
  }

  return ret;
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	200027a4 	.word	0x200027a4

0800cb60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	88db      	ldrh	r3, [r3, #6]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d004      	beq.n	800cb7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 f8cd 	bl	800cd14 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb7a:	e023      	b.n	800cbc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	dc02      	bgt.n	800cb8e <USBD_GetConfig+0x2e>
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	dc03      	bgt.n	800cb94 <USBD_GetConfig+0x34>
 800cb8c:	e015      	b.n	800cbba <USBD_GetConfig+0x5a>
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d00b      	beq.n	800cbaa <USBD_GetConfig+0x4a>
 800cb92:	e012      	b.n	800cbba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	2201      	movs	r2, #1
 800cba0:	4619      	mov	r1, r3
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f927 	bl	800cdf6 <USBD_CtlSendData>
        break;
 800cba8:	e00c      	b.n	800cbc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	3304      	adds	r3, #4
 800cbae:	2201      	movs	r2, #1
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f91f 	bl	800cdf6 <USBD_CtlSendData>
        break;
 800cbb8:	e004      	b.n	800cbc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f8a9 	bl	800cd14 <USBD_CtlError>
        break;
 800cbc2:	bf00      	nop
}
 800cbc4:	bf00      	nop
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	d81e      	bhi.n	800cc22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	88db      	ldrh	r3, [r3, #6]
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d004      	beq.n	800cbf6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f890 	bl	800cd14 <USBD_CtlError>
        break;
 800cbf4:	e01a      	b.n	800cc2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d005      	beq.n	800cc12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	f043 0202 	orr.w	r2, r3, #2
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	330c      	adds	r3, #12
 800cc16:	2202      	movs	r2, #2
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 f8eb 	bl	800cdf6 <USBD_CtlSendData>
      break;
 800cc20:	e004      	b.n	800cc2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc22:	6839      	ldr	r1, [r7, #0]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 f875 	bl	800cd14 <USBD_CtlError>
      break;
 800cc2a:	bf00      	nop
  }
}
 800cc2c:	bf00      	nop
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	885b      	ldrh	r3, [r3, #2]
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d106      	bne.n	800cc54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f92b 	bl	800ceaa <USBD_CtlSendStatus>
  }
}
 800cc54:	bf00      	nop
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	3b01      	subs	r3, #1
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d80b      	bhi.n	800cc8c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	885b      	ldrh	r3, [r3, #2]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d10c      	bne.n	800cc96 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 f910 	bl	800ceaa <USBD_CtlSendStatus>
      }
      break;
 800cc8a:	e004      	b.n	800cc96 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f840 	bl	800cd14 <USBD_CtlError>
      break;
 800cc94:	e000      	b.n	800cc98 <USBD_ClrFeature+0x3c>
      break;
 800cc96:	bf00      	nop
  }
}
 800cc98:	bf00      	nop
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	781a      	ldrb	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	781a      	ldrb	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f7ff fabb 	bl	800c246 <SWAPBYTE>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3301      	adds	r3, #1
 800cce2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f7ff faae 	bl	800c246 <SWAPBYTE>
 800ccea:	4603      	mov	r3, r0
 800ccec:	461a      	mov	r2, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	f7ff faa1 	bl	800c246 <SWAPBYTE>
 800cd04:	4603      	mov	r3, r0
 800cd06:	461a      	mov	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	80da      	strh	r2, [r3, #6]
}
 800cd0c:	bf00      	nop
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd1e:	2180      	movs	r1, #128	; 0x80
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f003 ffd5 	bl	8010cd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd26:	2100      	movs	r1, #0
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f003 ffd1 	bl	8010cd0 <USBD_LL_StallEP>
}
 800cd2e:	bf00      	nop
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}

0800cd36 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b086      	sub	sp, #24
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	60f8      	str	r0, [r7, #12]
 800cd3e:	60b9      	str	r1, [r7, #8]
 800cd40:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd42:	2300      	movs	r3, #0
 800cd44:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d036      	beq.n	800cdba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cd50:	6938      	ldr	r0, [r7, #16]
 800cd52:	f000 f836 	bl	800cdc2 <USBD_GetLen>
 800cd56:	4603      	mov	r3, r0
 800cd58:	3301      	adds	r3, #1
 800cd5a:	b29b      	uxth	r3, r3
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cd64:	7dfb      	ldrb	r3, [r7, #23]
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	4413      	add	r3, r2
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	7812      	ldrb	r2, [r2, #0]
 800cd6e:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd70:	7dfb      	ldrb	r3, [r7, #23]
 800cd72:	3301      	adds	r3, #1
 800cd74:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cd76:	7dfb      	ldrb	r3, [r7, #23]
 800cd78:	68ba      	ldr	r2, [r7, #8]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	2203      	movs	r2, #3
 800cd7e:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
 800cd82:	3301      	adds	r3, #1
 800cd84:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cd86:	e013      	b.n	800cdb0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cd88:	7dfb      	ldrb	r3, [r7, #23]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	693a      	ldr	r2, [r7, #16]
 800cd90:	7812      	ldrb	r2, [r2, #0]
 800cd92:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	3301      	adds	r3, #1
 800cd98:	613b      	str	r3, [r7, #16]
    idx++;
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cda0:	7dfb      	ldrb	r3, [r7, #23]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	4413      	add	r3, r2
 800cda6:	2200      	movs	r2, #0
 800cda8:	701a      	strb	r2, [r3, #0]
    idx++;
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	3301      	adds	r3, #1
 800cdae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1e7      	bne.n	800cd88 <USBD_GetString+0x52>
 800cdb8:	e000      	b.n	800cdbc <USBD_GetString+0x86>
    return;
 800cdba:	bf00      	nop
  }
}
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cdc2:	b480      	push	{r7}
 800cdc4:	b085      	sub	sp, #20
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cdd2:	e005      	b.n	800cde0 <USBD_GetLen+0x1e>
  {
    len++;
 800cdd4:	7bfb      	ldrb	r3, [r7, #15]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	3301      	adds	r3, #1
 800cdde:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1f5      	bne.n	800cdd4 <USBD_GetLen+0x12>
  }

  return len;
 800cde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3714      	adds	r7, #20
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr

0800cdf6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b084      	sub	sp, #16
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	60f8      	str	r0, [r7, #12]
 800cdfe:	60b9      	str	r1, [r7, #8]
 800ce00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2202      	movs	r2, #2
 800ce06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f003 ffe0 	bl	8010de2 <USBD_LL_Transmit>

  return USBD_OK;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3710      	adds	r7, #16
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f003 ffcf 	bl	8010de2 <USBD_LL_Transmit>

  return USBD_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b084      	sub	sp, #16
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	60f8      	str	r0, [r7, #12]
 800ce56:	60b9      	str	r1, [r7, #8]
 800ce58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2203      	movs	r2, #3
 800ce5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	2100      	movs	r1, #0
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f003 ffd3 	bl	8010e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3710      	adds	r7, #16
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68ba      	ldr	r2, [r7, #8]
 800ce98:	2100      	movs	r1, #0
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f003 ffc2 	bl	8010e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b082      	sub	sp, #8
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2204      	movs	r2, #4
 800ceb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ceba:	2300      	movs	r3, #0
 800cebc:	2200      	movs	r2, #0
 800cebe:	2100      	movs	r1, #0
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f003 ff8e 	bl	8010de2 <USBD_LL_Transmit>

  return USBD_OK;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3708      	adds	r7, #8
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2205      	movs	r2, #5
 800cedc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cee0:	2300      	movs	r3, #0
 800cee2:	2200      	movs	r2, #0
 800cee4:	2100      	movs	r1, #0
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f003 ff9c 	bl	8010e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
	...

0800cef8 <__NVIC_SetPriority>:
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	4603      	mov	r3, r0
 800cf00:	6039      	str	r1, [r7, #0]
 800cf02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cf04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	db0a      	blt.n	800cf22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	490c      	ldr	r1, [pc, #48]	; (800cf44 <__NVIC_SetPriority+0x4c>)
 800cf12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf16:	0112      	lsls	r2, r2, #4
 800cf18:	b2d2      	uxtb	r2, r2
 800cf1a:	440b      	add	r3, r1
 800cf1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cf20:	e00a      	b.n	800cf38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	4908      	ldr	r1, [pc, #32]	; (800cf48 <__NVIC_SetPriority+0x50>)
 800cf28:	79fb      	ldrb	r3, [r7, #7]
 800cf2a:	f003 030f 	and.w	r3, r3, #15
 800cf2e:	3b04      	subs	r3, #4
 800cf30:	0112      	lsls	r2, r2, #4
 800cf32:	b2d2      	uxtb	r2, r2
 800cf34:	440b      	add	r3, r1
 800cf36:	761a      	strb	r2, [r3, #24]
}
 800cf38:	bf00      	nop
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr
 800cf44:	e000e100 	.word	0xe000e100
 800cf48:	e000ed00 	.word	0xe000ed00

0800cf4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cf50:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <SysTick_Handler+0x1c>)
 800cf52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cf54:	f002 f902 	bl	800f15c <xTaskGetSchedulerState>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d001      	beq.n	800cf62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cf5e:	f003 f82b 	bl	800ffb8 <xPortSysTickHandler>
  }
}
 800cf62:	bf00      	nop
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	e000e010 	.word	0xe000e010

0800cf6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cf70:	2100      	movs	r1, #0
 800cf72:	f06f 0004 	mvn.w	r0, #4
 800cf76:	f7ff ffbf 	bl	800cef8 <__NVIC_SetPriority>
#endif
}
 800cf7a:	bf00      	nop
 800cf7c:	bd80      	pop	{r7, pc}
	...

0800cf80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf86:	f3ef 8305 	mrs	r3, IPSR
 800cf8a:	603b      	str	r3, [r7, #0]
  return(result);
 800cf8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d003      	beq.n	800cf9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cf92:	f06f 0305 	mvn.w	r3, #5
 800cf96:	607b      	str	r3, [r7, #4]
 800cf98:	e00c      	b.n	800cfb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cf9a:	4b0a      	ldr	r3, [pc, #40]	; (800cfc4 <osKernelInitialize+0x44>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d105      	bne.n	800cfae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cfa2:	4b08      	ldr	r3, [pc, #32]	; (800cfc4 <osKernelInitialize+0x44>)
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	607b      	str	r3, [r7, #4]
 800cfac:	e002      	b.n	800cfb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cfae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cfb4:	687b      	ldr	r3, [r7, #4]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	200027a8 	.word	0x200027a8

0800cfc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfce:	f3ef 8305 	mrs	r3, IPSR
 800cfd2:	603b      	str	r3, [r7, #0]
  return(result);
 800cfd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d003      	beq.n	800cfe2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cfda:	f06f 0305 	mvn.w	r3, #5
 800cfde:	607b      	str	r3, [r7, #4]
 800cfe0:	e010      	b.n	800d004 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cfe2:	4b0b      	ldr	r3, [pc, #44]	; (800d010 <osKernelStart+0x48>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d109      	bne.n	800cffe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cfea:	f7ff ffbf 	bl	800cf6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cfee:	4b08      	ldr	r3, [pc, #32]	; (800d010 <osKernelStart+0x48>)
 800cff0:	2202      	movs	r2, #2
 800cff2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cff4:	f001 fad0 	bl	800e598 <vTaskStartScheduler>
      stat = osOK;
 800cff8:	2300      	movs	r3, #0
 800cffa:	607b      	str	r3, [r7, #4]
 800cffc:	e002      	b.n	800d004 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d002:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d004:	687b      	ldr	r3, [r7, #4]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	200027a8 	.word	0x200027a8

0800d014 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d014:	b580      	push	{r7, lr}
 800d016:	b08e      	sub	sp, #56	; 0x38
 800d018:	af04      	add	r7, sp, #16
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d020:	2300      	movs	r3, #0
 800d022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d024:	f3ef 8305 	mrs	r3, IPSR
 800d028:	617b      	str	r3, [r7, #20]
  return(result);
 800d02a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d17e      	bne.n	800d12e <osThreadNew+0x11a>
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d07b      	beq.n	800d12e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d036:	2380      	movs	r3, #128	; 0x80
 800d038:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d03a:	2318      	movs	r3, #24
 800d03c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d03e:	2300      	movs	r3, #0
 800d040:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d046:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d045      	beq.n	800d0da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d002      	beq.n	800d05c <osThreadNew+0x48>
        name = attr->name;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	699b      	ldr	r3, [r3, #24]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	699b      	ldr	r3, [r3, #24]
 800d068:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d008      	beq.n	800d082 <osThreadNew+0x6e>
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	2b38      	cmp	r3, #56	; 0x38
 800d074:	d805      	bhi.n	800d082 <osThreadNew+0x6e>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	f003 0301 	and.w	r3, r3, #1
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <osThreadNew+0x72>
        return (NULL);
 800d082:	2300      	movs	r3, #0
 800d084:	e054      	b.n	800d130 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	695b      	ldr	r3, [r3, #20]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d003      	beq.n	800d096 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	695b      	ldr	r3, [r3, #20]
 800d092:	089b      	lsrs	r3, r3, #2
 800d094:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00e      	beq.n	800d0bc <osThreadNew+0xa8>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	2bbf      	cmp	r3, #191	; 0xbf
 800d0a4:	d90a      	bls.n	800d0bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d006      	beq.n	800d0bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	695b      	ldr	r3, [r3, #20]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d002      	beq.n	800d0bc <osThreadNew+0xa8>
        mem = 1;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	61bb      	str	r3, [r7, #24]
 800d0ba:	e010      	b.n	800d0de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10c      	bne.n	800d0de <osThreadNew+0xca>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d108      	bne.n	800d0de <osThreadNew+0xca>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	691b      	ldr	r3, [r3, #16]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d104      	bne.n	800d0de <osThreadNew+0xca>
          mem = 0;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	61bb      	str	r3, [r7, #24]
 800d0d8:	e001      	b.n	800d0de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d110      	bne.n	800d106 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d0ec:	9202      	str	r2, [sp, #8]
 800d0ee:	9301      	str	r3, [sp, #4]
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	6a3a      	ldr	r2, [r7, #32]
 800d0f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f000 fff6 	bl	800e0ec <xTaskCreateStatic>
 800d100:	4603      	mov	r3, r0
 800d102:	613b      	str	r3, [r7, #16]
 800d104:	e013      	b.n	800d12e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d110      	bne.n	800d12e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	b29a      	uxth	r2, r3
 800d110:	f107 0310 	add.w	r3, r7, #16
 800d114:	9301      	str	r3, [sp, #4]
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d11e:	68f8      	ldr	r0, [r7, #12]
 800d120:	f001 f841 	bl	800e1a6 <xTaskCreate>
 800d124:	4603      	mov	r3, r0
 800d126:	2b01      	cmp	r3, #1
 800d128:	d001      	beq.n	800d12e <osThreadNew+0x11a>
            hTask = NULL;
 800d12a:	2300      	movs	r3, #0
 800d12c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d12e:	693b      	ldr	r3, [r7, #16]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3728      	adds	r7, #40	; 0x28
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d140:	f3ef 8305 	mrs	r3, IPSR
 800d144:	60bb      	str	r3, [r7, #8]
  return(result);
 800d146:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d003      	beq.n	800d154 <osDelay+0x1c>
    stat = osErrorISR;
 800d14c:	f06f 0305 	mvn.w	r3, #5
 800d150:	60fb      	str	r3, [r7, #12]
 800d152:	e007      	b.n	800d164 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d154:	2300      	movs	r3, #0
 800d156:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d002      	beq.n	800d164 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f001 f980 	bl	800e464 <vTaskDelay>
    }
  }

  return (stat);
 800d164:	68fb      	ldr	r3, [r7, #12]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d16e:	b580      	push	{r7, lr}
 800d170:	b08a      	sub	sp, #40	; 0x28
 800d172:	af02      	add	r7, sp, #8
 800d174:	60f8      	str	r0, [r7, #12]
 800d176:	60b9      	str	r1, [r7, #8]
 800d178:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d17e:	f3ef 8305 	mrs	r3, IPSR
 800d182:	613b      	str	r3, [r7, #16]
  return(result);
 800d184:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d186:	2b00      	cmp	r3, #0
 800d188:	d15f      	bne.n	800d24a <osMessageQueueNew+0xdc>
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d05c      	beq.n	800d24a <osMessageQueueNew+0xdc>
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d059      	beq.n	800d24a <osMessageQueueNew+0xdc>
    mem = -1;
 800d196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d19a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d029      	beq.n	800d1f6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d012      	beq.n	800d1d0 <osMessageQueueNew+0x62>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	2b4f      	cmp	r3, #79	; 0x4f
 800d1b0:	d90e      	bls.n	800d1d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00a      	beq.n	800d1d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	695a      	ldr	r2, [r3, #20]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	68b9      	ldr	r1, [r7, #8]
 800d1c2:	fb01 f303 	mul.w	r3, r1, r3
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d302      	bcc.n	800d1d0 <osMessageQueueNew+0x62>
        mem = 1;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	61bb      	str	r3, [r7, #24]
 800d1ce:	e014      	b.n	800d1fa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d110      	bne.n	800d1fa <osMessageQueueNew+0x8c>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d10c      	bne.n	800d1fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d108      	bne.n	800d1fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	695b      	ldr	r3, [r3, #20]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d104      	bne.n	800d1fa <osMessageQueueNew+0x8c>
          mem = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	61bb      	str	r3, [r7, #24]
 800d1f4:	e001      	b.n	800d1fa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d1fa:	69bb      	ldr	r3, [r7, #24]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d10b      	bne.n	800d218 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	691a      	ldr	r2, [r3, #16]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	2100      	movs	r1, #0
 800d20a:	9100      	str	r1, [sp, #0]
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	f000 fa2e 	bl	800d670 <xQueueGenericCreateStatic>
 800d214:	61f8      	str	r0, [r7, #28]
 800d216:	e008      	b.n	800d22a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d105      	bne.n	800d22a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d21e:	2200      	movs	r2, #0
 800d220:	68b9      	ldr	r1, [r7, #8]
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f000 fa9c 	bl	800d760 <xQueueGenericCreate>
 800d228:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00c      	beq.n	800d24a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d003      	beq.n	800d23e <osMessageQueueNew+0xd0>
        name = attr->name;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	617b      	str	r3, [r7, #20]
 800d23c:	e001      	b.n	800d242 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d23e:	2300      	movs	r3, #0
 800d240:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d242:	6979      	ldr	r1, [r7, #20]
 800d244:	69f8      	ldr	r0, [r7, #28]
 800d246:	f000 fef3 	bl	800e030 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d24a:	69fb      	ldr	r3, [r7, #28]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3720      	adds	r7, #32
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d254:	b580      	push	{r7, lr}
 800d256:	b088      	sub	sp, #32
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	603b      	str	r3, [r7, #0]
 800d260:	4613      	mov	r3, r2
 800d262:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d268:	2300      	movs	r3, #0
 800d26a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d26c:	f3ef 8305 	mrs	r3, IPSR
 800d270:	617b      	str	r3, [r7, #20]
  return(result);
 800d272:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d274:	2b00      	cmp	r3, #0
 800d276:	d028      	beq.n	800d2ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d005      	beq.n	800d28a <osMessageQueuePut+0x36>
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d002      	beq.n	800d28a <osMessageQueuePut+0x36>
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d003      	beq.n	800d292 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d28a:	f06f 0303 	mvn.w	r3, #3
 800d28e:	61fb      	str	r3, [r7, #28]
 800d290:	e038      	b.n	800d304 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d292:	2300      	movs	r3, #0
 800d294:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d296:	f107 0210 	add.w	r2, r7, #16
 800d29a:	2300      	movs	r3, #0
 800d29c:	68b9      	ldr	r1, [r7, #8]
 800d29e:	69b8      	ldr	r0, [r7, #24]
 800d2a0:	f000 fbba 	bl	800da18 <xQueueGenericSendFromISR>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d003      	beq.n	800d2b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d2aa:	f06f 0302 	mvn.w	r3, #2
 800d2ae:	61fb      	str	r3, [r7, #28]
 800d2b0:	e028      	b.n	800d304 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d025      	beq.n	800d304 <osMessageQueuePut+0xb0>
 800d2b8:	4b15      	ldr	r3, [pc, #84]	; (800d310 <osMessageQueuePut+0xbc>)
 800d2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2be:	601a      	str	r2, [r3, #0]
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	e01c      	b.n	800d304 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d002      	beq.n	800d2d6 <osMessageQueuePut+0x82>
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d103      	bne.n	800d2de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d2d6:	f06f 0303 	mvn.w	r3, #3
 800d2da:	61fb      	str	r3, [r7, #28]
 800d2dc:	e012      	b.n	800d304 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d2de:	2300      	movs	r3, #0
 800d2e0:	683a      	ldr	r2, [r7, #0]
 800d2e2:	68b9      	ldr	r1, [r7, #8]
 800d2e4:	69b8      	ldr	r0, [r7, #24]
 800d2e6:	f000 fa99 	bl	800d81c <xQueueGenericSend>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d009      	beq.n	800d304 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d003      	beq.n	800d2fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d2f6:	f06f 0301 	mvn.w	r3, #1
 800d2fa:	61fb      	str	r3, [r7, #28]
 800d2fc:	e002      	b.n	800d304 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d2fe:	f06f 0302 	mvn.w	r3, #2
 800d302:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d304:	69fb      	ldr	r3, [r7, #28]
}
 800d306:	4618      	mov	r0, r3
 800d308:	3720      	adds	r7, #32
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	e000ed04 	.word	0xe000ed04

0800d314 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d314:	b580      	push	{r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d326:	2300      	movs	r3, #0
 800d328:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d32a:	f3ef 8305 	mrs	r3, IPSR
 800d32e:	617b      	str	r3, [r7, #20]
  return(result);
 800d330:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d332:	2b00      	cmp	r3, #0
 800d334:	d028      	beq.n	800d388 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d005      	beq.n	800d348 <osMessageQueueGet+0x34>
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <osMessageQueueGet+0x34>
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d003      	beq.n	800d350 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d348:	f06f 0303 	mvn.w	r3, #3
 800d34c:	61fb      	str	r3, [r7, #28]
 800d34e:	e037      	b.n	800d3c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d350:	2300      	movs	r3, #0
 800d352:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d354:	f107 0310 	add.w	r3, r7, #16
 800d358:	461a      	mov	r2, r3
 800d35a:	68b9      	ldr	r1, [r7, #8]
 800d35c:	69b8      	ldr	r0, [r7, #24]
 800d35e:	f000 fcd7 	bl	800dd10 <xQueueReceiveFromISR>
 800d362:	4603      	mov	r3, r0
 800d364:	2b01      	cmp	r3, #1
 800d366:	d003      	beq.n	800d370 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d368:	f06f 0302 	mvn.w	r3, #2
 800d36c:	61fb      	str	r3, [r7, #28]
 800d36e:	e027      	b.n	800d3c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d024      	beq.n	800d3c0 <osMessageQueueGet+0xac>
 800d376:	4b15      	ldr	r3, [pc, #84]	; (800d3cc <osMessageQueueGet+0xb8>)
 800d378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d37c:	601a      	str	r2, [r3, #0]
 800d37e:	f3bf 8f4f 	dsb	sy
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	e01b      	b.n	800d3c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d002      	beq.n	800d394 <osMessageQueueGet+0x80>
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d103      	bne.n	800d39c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d394:	f06f 0303 	mvn.w	r3, #3
 800d398:	61fb      	str	r3, [r7, #28]
 800d39a:	e011      	b.n	800d3c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d39c:	683a      	ldr	r2, [r7, #0]
 800d39e:	68b9      	ldr	r1, [r7, #8]
 800d3a0:	69b8      	ldr	r0, [r7, #24]
 800d3a2:	f000 fbd5 	bl	800db50 <xQueueReceive>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d009      	beq.n	800d3c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d003      	beq.n	800d3ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d3b2:	f06f 0301 	mvn.w	r3, #1
 800d3b6:	61fb      	str	r3, [r7, #28]
 800d3b8:	e002      	b.n	800d3c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d3ba:	f06f 0302 	mvn.w	r3, #2
 800d3be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d3c0:	69fb      	ldr	r3, [r7, #28]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3720      	adds	r7, #32
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	e000ed04 	.word	0xe000ed04

0800d3d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	4a07      	ldr	r2, [pc, #28]	; (800d3fc <vApplicationGetIdleTaskMemory+0x2c>)
 800d3e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	4a06      	ldr	r2, [pc, #24]	; (800d400 <vApplicationGetIdleTaskMemory+0x30>)
 800d3e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2280      	movs	r2, #128	; 0x80
 800d3ec:	601a      	str	r2, [r3, #0]
}
 800d3ee:	bf00      	nop
 800d3f0:	3714      	adds	r7, #20
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	200027ac 	.word	0x200027ac
 800d400:	2000286c 	.word	0x2000286c

0800d404 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d404:	b480      	push	{r7}
 800d406:	b085      	sub	sp, #20
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	4a07      	ldr	r2, [pc, #28]	; (800d430 <vApplicationGetTimerTaskMemory+0x2c>)
 800d414:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	4a06      	ldr	r2, [pc, #24]	; (800d434 <vApplicationGetTimerTaskMemory+0x30>)
 800d41a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d422:	601a      	str	r2, [r3, #0]
}
 800d424:	bf00      	nop
 800d426:	3714      	adds	r7, #20
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr
 800d430:	20002a6c 	.word	0x20002a6c
 800d434:	20002b2c 	.word	0x20002b2c

0800d438 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f103 0208 	add.w	r2, r3, #8
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d450:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f103 0208 	add.w	r2, r3, #8
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f103 0208 	add.w	r2, r3, #8
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d46c:	bf00      	nop
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d486:	bf00      	nop
 800d488:	370c      	adds	r7, #12
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr

0800d492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d492:	b480      	push	{r7}
 800d494:	b085      	sub	sp, #20
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	689a      	ldr	r2, [r3, #8]
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	1c5a      	adds	r2, r3, #1
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	601a      	str	r2, [r3, #0]
}
 800d4ce:	bf00      	nop
 800d4d0:	3714      	adds	r7, #20
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr

0800d4da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4da:	b480      	push	{r7}
 800d4dc:	b085      	sub	sp, #20
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4f0:	d103      	bne.n	800d4fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	691b      	ldr	r3, [r3, #16]
 800d4f6:	60fb      	str	r3, [r7, #12]
 800d4f8:	e00c      	b.n	800d514 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	60fb      	str	r3, [r7, #12]
 800d500:	e002      	b.n	800d508 <vListInsert+0x2e>
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	60fb      	str	r3, [r7, #12]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	429a      	cmp	r2, r3
 800d512:	d2f6      	bcs.n	800d502 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	685a      	ldr	r2, [r3, #4]
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	683a      	ldr	r2, [r7, #0]
 800d52e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	1c5a      	adds	r2, r3, #1
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	601a      	str	r2, [r3, #0]
}
 800d540:	bf00      	nop
 800d542:	3714      	adds	r7, #20
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d54c:	b480      	push	{r7}
 800d54e:	b085      	sub	sp, #20
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	691b      	ldr	r3, [r3, #16]
 800d558:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	6892      	ldr	r2, [r2, #8]
 800d562:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	6852      	ldr	r2, [r2, #4]
 800d56c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	429a      	cmp	r2, r3
 800d576:	d103      	bne.n	800d580 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	689a      	ldr	r2, [r3, #8]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2200      	movs	r2, #0
 800d584:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	1e5a      	subs	r2, r3, #1
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10a      	bne.n	800d5ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d5c6:	bf00      	nop
 800d5c8:	e7fe      	b.n	800d5c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d5ca:	f002 fc63 	bl	800fe94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d6:	68f9      	ldr	r1, [r7, #12]
 800d5d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d5da:	fb01 f303 	mul.w	r3, r1, r3
 800d5de:	441a      	add	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	68f9      	ldr	r1, [r7, #12]
 800d5fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d600:	fb01 f303 	mul.w	r3, r1, r3
 800d604:	441a      	add	r2, r3
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	22ff      	movs	r2, #255	; 0xff
 800d60e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	22ff      	movs	r2, #255	; 0xff
 800d616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d114      	bne.n	800d64a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d01a      	beq.n	800d65e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	3310      	adds	r3, #16
 800d62c:	4618      	mov	r0, r3
 800d62e:	f001 faff 	bl	800ec30 <xTaskRemoveFromEventList>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d012      	beq.n	800d65e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d638:	4b0c      	ldr	r3, [pc, #48]	; (800d66c <xQueueGenericReset+0xcc>)
 800d63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d63e:	601a      	str	r2, [r3, #0]
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	e009      	b.n	800d65e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3310      	adds	r3, #16
 800d64e:	4618      	mov	r0, r3
 800d650:	f7ff fef2 	bl	800d438 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	3324      	adds	r3, #36	; 0x24
 800d658:	4618      	mov	r0, r3
 800d65a:	f7ff feed 	bl	800d438 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d65e:	f002 fc49 	bl	800fef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d662:	2301      	movs	r3, #1
}
 800d664:	4618      	mov	r0, r3
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	e000ed04 	.word	0xe000ed04

0800d670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d670:	b580      	push	{r7, lr}
 800d672:	b08e      	sub	sp, #56	; 0x38
 800d674:	af02      	add	r7, sp, #8
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
 800d67c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10a      	bne.n	800d69a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d696:	bf00      	nop
 800d698:	e7fe      	b.n	800d698 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10a      	bne.n	800d6b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d6b2:	bf00      	nop
 800d6b4:	e7fe      	b.n	800d6b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d002      	beq.n	800d6c2 <xQueueGenericCreateStatic+0x52>
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d001      	beq.n	800d6c6 <xQueueGenericCreateStatic+0x56>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e000      	b.n	800d6c8 <xQueueGenericCreateStatic+0x58>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10a      	bne.n	800d6e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	623b      	str	r3, [r7, #32]
}
 800d6de:	bf00      	nop
 800d6e0:	e7fe      	b.n	800d6e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d102      	bne.n	800d6ee <xQueueGenericCreateStatic+0x7e>
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d101      	bne.n	800d6f2 <xQueueGenericCreateStatic+0x82>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e000      	b.n	800d6f4 <xQueueGenericCreateStatic+0x84>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d10a      	bne.n	800d70e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fc:	f383 8811 	msr	BASEPRI, r3
 800d700:	f3bf 8f6f 	isb	sy
 800d704:	f3bf 8f4f 	dsb	sy
 800d708:	61fb      	str	r3, [r7, #28]
}
 800d70a:	bf00      	nop
 800d70c:	e7fe      	b.n	800d70c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d70e:	2350      	movs	r3, #80	; 0x50
 800d710:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	2b50      	cmp	r3, #80	; 0x50
 800d716:	d00a      	beq.n	800d72e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	61bb      	str	r3, [r7, #24]
}
 800d72a:	bf00      	nop
 800d72c:	e7fe      	b.n	800d72c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d72e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00d      	beq.n	800d756 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73c:	2201      	movs	r2, #1
 800d73e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d742:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	4613      	mov	r3, r2
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	68b9      	ldr	r1, [r7, #8]
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f000 f83f 	bl	800d7d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d758:	4618      	mov	r0, r3
 800d75a:	3730      	adds	r7, #48	; 0x30
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d760:	b580      	push	{r7, lr}
 800d762:	b08a      	sub	sp, #40	; 0x28
 800d764:	af02      	add	r7, sp, #8
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	4613      	mov	r3, r2
 800d76c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10a      	bne.n	800d78a <xQueueGenericCreate+0x2a>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	613b      	str	r3, [r7, #16]
}
 800d786:	bf00      	nop
 800d788:	e7fe      	b.n	800d788 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	68ba      	ldr	r2, [r7, #8]
 800d78e:	fb02 f303 	mul.w	r3, r2, r3
 800d792:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	3350      	adds	r3, #80	; 0x50
 800d798:	4618      	mov	r0, r3
 800d79a:	f002 fc9d 	bl	80100d8 <pvPortMalloc>
 800d79e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d011      	beq.n	800d7ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	3350      	adds	r3, #80	; 0x50
 800d7ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d7b8:	79fa      	ldrb	r2, [r7, #7]
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	697a      	ldr	r2, [r7, #20]
 800d7c2:	68b9      	ldr	r1, [r7, #8]
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f000 f805 	bl	800d7d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d7ca:	69bb      	ldr	r3, [r7, #24]
	}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3720      	adds	r7, #32
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d103      	bne.n	800d7f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	69ba      	ldr	r2, [r7, #24]
 800d7ec:	601a      	str	r2, [r3, #0]
 800d7ee:	e002      	b.n	800d7f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d802:	2101      	movs	r1, #1
 800d804:	69b8      	ldr	r0, [r7, #24]
 800d806:	f7ff fecb 	bl	800d5a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d80a:	69bb      	ldr	r3, [r7, #24]
 800d80c:	78fa      	ldrb	r2, [r7, #3]
 800d80e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d812:	bf00      	nop
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
	...

0800d81c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b08e      	sub	sp, #56	; 0x38
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	607a      	str	r2, [r7, #4]
 800d828:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d82a:	2300      	movs	r3, #0
 800d82c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	2b00      	cmp	r3, #0
 800d836:	d10a      	bne.n	800d84e <xQueueGenericSend+0x32>
	__asm volatile
 800d838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83c:	f383 8811 	msr	BASEPRI, r3
 800d840:	f3bf 8f6f 	isb	sy
 800d844:	f3bf 8f4f 	dsb	sy
 800d848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d84a:	bf00      	nop
 800d84c:	e7fe      	b.n	800d84c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d103      	bne.n	800d85c <xQueueGenericSend+0x40>
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d101      	bne.n	800d860 <xQueueGenericSend+0x44>
 800d85c:	2301      	movs	r3, #1
 800d85e:	e000      	b.n	800d862 <xQueueGenericSend+0x46>
 800d860:	2300      	movs	r3, #0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10a      	bne.n	800d87c <xQueueGenericSend+0x60>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d878:	bf00      	nop
 800d87a:	e7fe      	b.n	800d87a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d103      	bne.n	800d88a <xQueueGenericSend+0x6e>
 800d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d886:	2b01      	cmp	r3, #1
 800d888:	d101      	bne.n	800d88e <xQueueGenericSend+0x72>
 800d88a:	2301      	movs	r3, #1
 800d88c:	e000      	b.n	800d890 <xQueueGenericSend+0x74>
 800d88e:	2300      	movs	r3, #0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10a      	bne.n	800d8aa <xQueueGenericSend+0x8e>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	623b      	str	r3, [r7, #32]
}
 800d8a6:	bf00      	nop
 800d8a8:	e7fe      	b.n	800d8a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8aa:	f001 fc57 	bl	800f15c <xTaskGetSchedulerState>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d102      	bne.n	800d8ba <xQueueGenericSend+0x9e>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d101      	bne.n	800d8be <xQueueGenericSend+0xa2>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e000      	b.n	800d8c0 <xQueueGenericSend+0xa4>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10a      	bne.n	800d8da <xQueueGenericSend+0xbe>
	__asm volatile
 800d8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c8:	f383 8811 	msr	BASEPRI, r3
 800d8cc:	f3bf 8f6f 	isb	sy
 800d8d0:	f3bf 8f4f 	dsb	sy
 800d8d4:	61fb      	str	r3, [r7, #28]
}
 800d8d6:	bf00      	nop
 800d8d8:	e7fe      	b.n	800d8d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8da:	f002 fadb 	bl	800fe94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d302      	bcc.n	800d8f0 <xQueueGenericSend+0xd4>
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	2b02      	cmp	r3, #2
 800d8ee:	d129      	bne.n	800d944 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8f0:	683a      	ldr	r2, [r7, #0]
 800d8f2:	68b9      	ldr	r1, [r7, #8]
 800d8f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8f6:	f000 fa8b 	bl	800de10 <prvCopyDataToQueue>
 800d8fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d900:	2b00      	cmp	r3, #0
 800d902:	d010      	beq.n	800d926 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d906:	3324      	adds	r3, #36	; 0x24
 800d908:	4618      	mov	r0, r3
 800d90a:	f001 f991 	bl	800ec30 <xTaskRemoveFromEventList>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d013      	beq.n	800d93c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d914:	4b3f      	ldr	r3, [pc, #252]	; (800da14 <xQueueGenericSend+0x1f8>)
 800d916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	f3bf 8f6f 	isb	sy
 800d924:	e00a      	b.n	800d93c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d007      	beq.n	800d93c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d92c:	4b39      	ldr	r3, [pc, #228]	; (800da14 <xQueueGenericSend+0x1f8>)
 800d92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d93c:	f002 fada 	bl	800fef4 <vPortExitCritical>
				return pdPASS;
 800d940:	2301      	movs	r3, #1
 800d942:	e063      	b.n	800da0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d103      	bne.n	800d952 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d94a:	f002 fad3 	bl	800fef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d94e:	2300      	movs	r3, #0
 800d950:	e05c      	b.n	800da0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d954:	2b00      	cmp	r3, #0
 800d956:	d106      	bne.n	800d966 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d958:	f107 0314 	add.w	r3, r7, #20
 800d95c:	4618      	mov	r0, r3
 800d95e:	f001 f9cb 	bl	800ecf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d962:	2301      	movs	r3, #1
 800d964:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d966:	f002 fac5 	bl	800fef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d96a:	f000 fe89 	bl	800e680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d96e:	f002 fa91 	bl	800fe94 <vPortEnterCritical>
 800d972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d978:	b25b      	sxtb	r3, r3
 800d97a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d97e:	d103      	bne.n	800d988 <xQueueGenericSend+0x16c>
 800d980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d982:	2200      	movs	r2, #0
 800d984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d98e:	b25b      	sxtb	r3, r3
 800d990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d994:	d103      	bne.n	800d99e <xQueueGenericSend+0x182>
 800d996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d99e:	f002 faa9 	bl	800fef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9a2:	1d3a      	adds	r2, r7, #4
 800d9a4:	f107 0314 	add.w	r3, r7, #20
 800d9a8:	4611      	mov	r1, r2
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f001 f9ba 	bl	800ed24 <xTaskCheckForTimeOut>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d124      	bne.n	800da00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d9b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9b8:	f000 fb22 	bl	800e000 <prvIsQueueFull>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d018      	beq.n	800d9f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	3310      	adds	r3, #16
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	4611      	mov	r1, r2
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f001 f8e0 	bl	800eb90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d9d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9d2:	f000 faad 	bl	800df30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d9d6:	f000 fe61 	bl	800e69c <xTaskResumeAll>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f47f af7c 	bne.w	800d8da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d9e2:	4b0c      	ldr	r3, [pc, #48]	; (800da14 <xQueueGenericSend+0x1f8>)
 800d9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9e8:	601a      	str	r2, [r3, #0]
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	e772      	b.n	800d8da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d9f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9f6:	f000 fa9b 	bl	800df30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9fa:	f000 fe4f 	bl	800e69c <xTaskResumeAll>
 800d9fe:	e76c      	b.n	800d8da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da02:	f000 fa95 	bl	800df30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da06:	f000 fe49 	bl	800e69c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3738      	adds	r7, #56	; 0x38
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	e000ed04 	.word	0xe000ed04

0800da18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b090      	sub	sp, #64	; 0x40
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
 800da24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800da2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d10a      	bne.n	800da46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800da30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da34:	f383 8811 	msr	BASEPRI, r3
 800da38:	f3bf 8f6f 	isb	sy
 800da3c:	f3bf 8f4f 	dsb	sy
 800da40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800da42:	bf00      	nop
 800da44:	e7fe      	b.n	800da44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d103      	bne.n	800da54 <xQueueGenericSendFromISR+0x3c>
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da50:	2b00      	cmp	r3, #0
 800da52:	d101      	bne.n	800da58 <xQueueGenericSendFromISR+0x40>
 800da54:	2301      	movs	r3, #1
 800da56:	e000      	b.n	800da5a <xQueueGenericSendFromISR+0x42>
 800da58:	2300      	movs	r3, #0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d10a      	bne.n	800da74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800da5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da62:	f383 8811 	msr	BASEPRI, r3
 800da66:	f3bf 8f6f 	isb	sy
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800da70:	bf00      	nop
 800da72:	e7fe      	b.n	800da72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	2b02      	cmp	r3, #2
 800da78:	d103      	bne.n	800da82 <xQueueGenericSendFromISR+0x6a>
 800da7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da7e:	2b01      	cmp	r3, #1
 800da80:	d101      	bne.n	800da86 <xQueueGenericSendFromISR+0x6e>
 800da82:	2301      	movs	r3, #1
 800da84:	e000      	b.n	800da88 <xQueueGenericSendFromISR+0x70>
 800da86:	2300      	movs	r3, #0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10a      	bne.n	800daa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800da8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da90:	f383 8811 	msr	BASEPRI, r3
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	623b      	str	r3, [r7, #32]
}
 800da9e:	bf00      	nop
 800daa0:	e7fe      	b.n	800daa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800daa2:	f002 fad9 	bl	8010058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800daa6:	f3ef 8211 	mrs	r2, BASEPRI
 800daaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daae:	f383 8811 	msr	BASEPRI, r3
 800dab2:	f3bf 8f6f 	isb	sy
 800dab6:	f3bf 8f4f 	dsb	sy
 800daba:	61fa      	str	r2, [r7, #28]
 800dabc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dabe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dac0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daca:	429a      	cmp	r2, r3
 800dacc:	d302      	bcc.n	800dad4 <xQueueGenericSendFromISR+0xbc>
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	2b02      	cmp	r3, #2
 800dad2:	d12f      	bne.n	800db34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dae4:	683a      	ldr	r2, [r7, #0]
 800dae6:	68b9      	ldr	r1, [r7, #8]
 800dae8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800daea:	f000 f991 	bl	800de10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800daee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800daf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800daf6:	d112      	bne.n	800db1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800daf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d016      	beq.n	800db2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db02:	3324      	adds	r3, #36	; 0x24
 800db04:	4618      	mov	r0, r3
 800db06:	f001 f893 	bl	800ec30 <xTaskRemoveFromEventList>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d00e      	beq.n	800db2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00b      	beq.n	800db2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2201      	movs	r2, #1
 800db1a:	601a      	str	r2, [r3, #0]
 800db1c:	e007      	b.n	800db2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db22:	3301      	adds	r3, #1
 800db24:	b2db      	uxtb	r3, r3
 800db26:	b25a      	sxtb	r2, r3
 800db28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800db2e:	2301      	movs	r3, #1
 800db30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800db32:	e001      	b.n	800db38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db34:	2300      	movs	r3, #0
 800db36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800db42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800db46:	4618      	mov	r0, r3
 800db48:	3740      	adds	r7, #64	; 0x40
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
	...

0800db50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b08c      	sub	sp, #48	; 0x30
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db5c:	2300      	movs	r3, #0
 800db5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db66:	2b00      	cmp	r3, #0
 800db68:	d10a      	bne.n	800db80 <xQueueReceive+0x30>
	__asm volatile
 800db6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6e:	f383 8811 	msr	BASEPRI, r3
 800db72:	f3bf 8f6f 	isb	sy
 800db76:	f3bf 8f4f 	dsb	sy
 800db7a:	623b      	str	r3, [r7, #32]
}
 800db7c:	bf00      	nop
 800db7e:	e7fe      	b.n	800db7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d103      	bne.n	800db8e <xQueueReceive+0x3e>
 800db86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d101      	bne.n	800db92 <xQueueReceive+0x42>
 800db8e:	2301      	movs	r3, #1
 800db90:	e000      	b.n	800db94 <xQueueReceive+0x44>
 800db92:	2300      	movs	r3, #0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d10a      	bne.n	800dbae <xQueueReceive+0x5e>
	__asm volatile
 800db98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9c:	f383 8811 	msr	BASEPRI, r3
 800dba0:	f3bf 8f6f 	isb	sy
 800dba4:	f3bf 8f4f 	dsb	sy
 800dba8:	61fb      	str	r3, [r7, #28]
}
 800dbaa:	bf00      	nop
 800dbac:	e7fe      	b.n	800dbac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbae:	f001 fad5 	bl	800f15c <xTaskGetSchedulerState>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d102      	bne.n	800dbbe <xQueueReceive+0x6e>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d101      	bne.n	800dbc2 <xQueueReceive+0x72>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e000      	b.n	800dbc4 <xQueueReceive+0x74>
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d10a      	bne.n	800dbde <xQueueReceive+0x8e>
	__asm volatile
 800dbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbcc:	f383 8811 	msr	BASEPRI, r3
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	f3bf 8f4f 	dsb	sy
 800dbd8:	61bb      	str	r3, [r7, #24]
}
 800dbda:	bf00      	nop
 800dbdc:	e7fe      	b.n	800dbdc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbde:	f002 f959 	bl	800fe94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d01f      	beq.n	800dc2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbee:	68b9      	ldr	r1, [r7, #8]
 800dbf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbf2:	f000 f977 	bl	800dee4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf8:	1e5a      	subs	r2, r3, #1
 800dbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00f      	beq.n	800dc26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc08:	3310      	adds	r3, #16
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f001 f810 	bl	800ec30 <xTaskRemoveFromEventList>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d007      	beq.n	800dc26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc16:	4b3d      	ldr	r3, [pc, #244]	; (800dd0c <xQueueReceive+0x1bc>)
 800dc18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc1c:	601a      	str	r2, [r3, #0]
 800dc1e:	f3bf 8f4f 	dsb	sy
 800dc22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc26:	f002 f965 	bl	800fef4 <vPortExitCritical>
				return pdPASS;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e069      	b.n	800dd02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d103      	bne.n	800dc3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc34:	f002 f95e 	bl	800fef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	e062      	b.n	800dd02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d106      	bne.n	800dc50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc42:	f107 0310 	add.w	r3, r7, #16
 800dc46:	4618      	mov	r0, r3
 800dc48:	f001 f856 	bl	800ecf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc50:	f002 f950 	bl	800fef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc54:	f000 fd14 	bl	800e680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc58:	f002 f91c 	bl	800fe94 <vPortEnterCritical>
 800dc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc62:	b25b      	sxtb	r3, r3
 800dc64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc68:	d103      	bne.n	800dc72 <xQueueReceive+0x122>
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc78:	b25b      	sxtb	r3, r3
 800dc7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc7e:	d103      	bne.n	800dc88 <xQueueReceive+0x138>
 800dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc82:	2200      	movs	r2, #0
 800dc84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc88:	f002 f934 	bl	800fef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc8c:	1d3a      	adds	r2, r7, #4
 800dc8e:	f107 0310 	add.w	r3, r7, #16
 800dc92:	4611      	mov	r1, r2
 800dc94:	4618      	mov	r0, r3
 800dc96:	f001 f845 	bl	800ed24 <xTaskCheckForTimeOut>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d123      	bne.n	800dce8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dca2:	f000 f997 	bl	800dfd4 <prvIsQueueEmpty>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d017      	beq.n	800dcdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcae:	3324      	adds	r3, #36	; 0x24
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	4611      	mov	r1, r2
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f000 ff6b 	bl	800eb90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dcba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcbc:	f000 f938 	bl	800df30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dcc0:	f000 fcec 	bl	800e69c <xTaskResumeAll>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d189      	bne.n	800dbde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dcca:	4b10      	ldr	r3, [pc, #64]	; (800dd0c <xQueueReceive+0x1bc>)
 800dccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd0:	601a      	str	r2, [r3, #0]
 800dcd2:	f3bf 8f4f 	dsb	sy
 800dcd6:	f3bf 8f6f 	isb	sy
 800dcda:	e780      	b.n	800dbde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dcdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcde:	f000 f927 	bl	800df30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dce2:	f000 fcdb 	bl	800e69c <xTaskResumeAll>
 800dce6:	e77a      	b.n	800dbde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcea:	f000 f921 	bl	800df30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcee:	f000 fcd5 	bl	800e69c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcf4:	f000 f96e 	bl	800dfd4 <prvIsQueueEmpty>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f43f af6f 	beq.w	800dbde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3730      	adds	r7, #48	; 0x30
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	e000ed04 	.word	0xe000ed04

0800dd10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b08e      	sub	sp, #56	; 0x38
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d10a      	bne.n	800dd3c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800dd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2a:	f383 8811 	msr	BASEPRI, r3
 800dd2e:	f3bf 8f6f 	isb	sy
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	623b      	str	r3, [r7, #32]
}
 800dd38:	bf00      	nop
 800dd3a:	e7fe      	b.n	800dd3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d103      	bne.n	800dd4a <xQueueReceiveFromISR+0x3a>
 800dd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d101      	bne.n	800dd4e <xQueueReceiveFromISR+0x3e>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	e000      	b.n	800dd50 <xQueueReceiveFromISR+0x40>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10a      	bne.n	800dd6a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800dd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd58:	f383 8811 	msr	BASEPRI, r3
 800dd5c:	f3bf 8f6f 	isb	sy
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	61fb      	str	r3, [r7, #28]
}
 800dd66:	bf00      	nop
 800dd68:	e7fe      	b.n	800dd68 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd6a:	f002 f975 	bl	8010058 <vPortValidateInterruptPriority>
	__asm volatile
 800dd6e:	f3ef 8211 	mrs	r2, BASEPRI
 800dd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd76:	f383 8811 	msr	BASEPRI, r3
 800dd7a:	f3bf 8f6f 	isb	sy
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	61ba      	str	r2, [r7, #24]
 800dd84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dd86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d02f      	beq.n	800ddf6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dda0:	68b9      	ldr	r1, [r7, #8]
 800dda2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dda4:	f000 f89e 	bl	800dee4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	1e5a      	subs	r2, r3, #1
 800ddac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ddb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ddb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddb8:	d112      	bne.n	800dde0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbc:	691b      	ldr	r3, [r3, #16]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d016      	beq.n	800ddf0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc4:	3310      	adds	r3, #16
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f000 ff32 	bl	800ec30 <xTaskRemoveFromEventList>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00e      	beq.n	800ddf0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00b      	beq.n	800ddf0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	601a      	str	r2, [r3, #0]
 800ddde:	e007      	b.n	800ddf0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dde0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dde4:	3301      	adds	r3, #1
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	b25a      	sxtb	r2, r3
 800ddea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	637b      	str	r3, [r7, #52]	; 0x34
 800ddf4:	e001      	b.n	800ddfa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	637b      	str	r3, [r7, #52]	; 0x34
 800ddfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	f383 8811 	msr	BASEPRI, r3
}
 800de04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800de06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3738      	adds	r7, #56	; 0x38
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de1c:	2300      	movs	r3, #0
 800de1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d10d      	bne.n	800de4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d14d      	bne.n	800ded2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	4618      	mov	r0, r3
 800de3c:	f001 f9ac 	bl	800f198 <xTaskPriorityDisinherit>
 800de40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2200      	movs	r2, #0
 800de46:	609a      	str	r2, [r3, #8]
 800de48:	e043      	b.n	800ded2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d119      	bne.n	800de84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6858      	ldr	r0, [r3, #4]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de58:	461a      	mov	r2, r3
 800de5a:	68b9      	ldr	r1, [r7, #8]
 800de5c:	f003 f997 	bl	801118e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	685a      	ldr	r2, [r3, #4]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de68:	441a      	add	r2, r3
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	685a      	ldr	r2, [r3, #4]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	429a      	cmp	r2, r3
 800de78:	d32b      	bcc.n	800ded2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	605a      	str	r2, [r3, #4]
 800de82:	e026      	b.n	800ded2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	68d8      	ldr	r0, [r3, #12]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de8c:	461a      	mov	r2, r3
 800de8e:	68b9      	ldr	r1, [r7, #8]
 800de90:	f003 f97d 	bl	801118e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	68da      	ldr	r2, [r3, #12]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de9c:	425b      	negs	r3, r3
 800de9e:	441a      	add	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	68da      	ldr	r2, [r3, #12]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	429a      	cmp	r2, r3
 800deae:	d207      	bcs.n	800dec0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	689a      	ldr	r2, [r3, #8]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb8:	425b      	negs	r3, r3
 800deba:	441a      	add	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2b02      	cmp	r3, #2
 800dec4:	d105      	bne.n	800ded2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d002      	beq.n	800ded2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	3b01      	subs	r3, #1
 800ded0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	1c5a      	adds	r2, r3, #1
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800deda:	697b      	ldr	r3, [r7, #20]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800def2:	2b00      	cmp	r3, #0
 800def4:	d018      	beq.n	800df28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	68da      	ldr	r2, [r3, #12]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defe:	441a      	add	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68da      	ldr	r2, [r3, #12]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d303      	bcc.n	800df18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	68d9      	ldr	r1, [r3, #12]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df20:	461a      	mov	r2, r3
 800df22:	6838      	ldr	r0, [r7, #0]
 800df24:	f003 f933 	bl	801118e <memcpy>
	}
}
 800df28:	bf00      	nop
 800df2a:	3708      	adds	r7, #8
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}

0800df30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df38:	f001 ffac 	bl	800fe94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df44:	e011      	b.n	800df6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d012      	beq.n	800df74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	3324      	adds	r3, #36	; 0x24
 800df52:	4618      	mov	r0, r3
 800df54:	f000 fe6c 	bl	800ec30 <xTaskRemoveFromEventList>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d001      	beq.n	800df62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800df5e:	f000 ff43 	bl	800ede8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800df62:	7bfb      	ldrb	r3, [r7, #15]
 800df64:	3b01      	subs	r3, #1
 800df66:	b2db      	uxtb	r3, r3
 800df68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	dce9      	bgt.n	800df46 <prvUnlockQueue+0x16>
 800df72:	e000      	b.n	800df76 <prvUnlockQueue+0x46>
					break;
 800df74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	22ff      	movs	r2, #255	; 0xff
 800df7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800df7e:	f001 ffb9 	bl	800fef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800df82:	f001 ff87 	bl	800fe94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df8e:	e011      	b.n	800dfb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	691b      	ldr	r3, [r3, #16]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d012      	beq.n	800dfbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	3310      	adds	r3, #16
 800df9c:	4618      	mov	r0, r3
 800df9e:	f000 fe47 	bl	800ec30 <xTaskRemoveFromEventList>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d001      	beq.n	800dfac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dfa8:	f000 ff1e 	bl	800ede8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dfac:	7bbb      	ldrb	r3, [r7, #14]
 800dfae:	3b01      	subs	r3, #1
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	dce9      	bgt.n	800df90 <prvUnlockQueue+0x60>
 800dfbc:	e000      	b.n	800dfc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dfbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	22ff      	movs	r2, #255	; 0xff
 800dfc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dfc8:	f001 ff94 	bl	800fef4 <vPortExitCritical>
}
 800dfcc:	bf00      	nop
 800dfce:	3710      	adds	r7, #16
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dfdc:	f001 ff5a 	bl	800fe94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d102      	bne.n	800dfee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	60fb      	str	r3, [r7, #12]
 800dfec:	e001      	b.n	800dff2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dfee:	2300      	movs	r3, #0
 800dff0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dff2:	f001 ff7f 	bl	800fef4 <vPortExitCritical>

	return xReturn;
 800dff6:	68fb      	ldr	r3, [r7, #12]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3710      	adds	r7, #16
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e008:	f001 ff44 	bl	800fe94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e014:	429a      	cmp	r2, r3
 800e016:	d102      	bne.n	800e01e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e018:	2301      	movs	r3, #1
 800e01a:	60fb      	str	r3, [r7, #12]
 800e01c:	e001      	b.n	800e022 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e01e:	2300      	movs	r3, #0
 800e020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e022:	f001 ff67 	bl	800fef4 <vPortExitCritical>

	return xReturn;
 800e026:	68fb      	ldr	r3, [r7, #12]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e03a:	2300      	movs	r3, #0
 800e03c:	60fb      	str	r3, [r7, #12]
 800e03e:	e014      	b.n	800e06a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e040:	4a0f      	ldr	r2, [pc, #60]	; (800e080 <vQueueAddToRegistry+0x50>)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d10b      	bne.n	800e064 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e04c:	490c      	ldr	r1, [pc, #48]	; (800e080 <vQueueAddToRegistry+0x50>)
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	683a      	ldr	r2, [r7, #0]
 800e052:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e056:	4a0a      	ldr	r2, [pc, #40]	; (800e080 <vQueueAddToRegistry+0x50>)
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	00db      	lsls	r3, r3, #3
 800e05c:	4413      	add	r3, r2
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e062:	e006      	b.n	800e072 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	3301      	adds	r3, #1
 800e068:	60fb      	str	r3, [r7, #12]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2b07      	cmp	r3, #7
 800e06e:	d9e7      	bls.n	800e040 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e070:	bf00      	nop
 800e072:	bf00      	nop
 800e074:	3714      	adds	r7, #20
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	2000d628 	.word	0x2000d628

0800e084 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e084:	b580      	push	{r7, lr}
 800e086:	b086      	sub	sp, #24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e094:	f001 fefe 	bl	800fe94 <vPortEnterCritical>
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e09e:	b25b      	sxtb	r3, r3
 800e0a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0a4:	d103      	bne.n	800e0ae <vQueueWaitForMessageRestricted+0x2a>
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0b4:	b25b      	sxtb	r3, r3
 800e0b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0ba:	d103      	bne.n	800e0c4 <vQueueWaitForMessageRestricted+0x40>
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0c4:	f001 ff16 	bl	800fef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d106      	bne.n	800e0de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	3324      	adds	r3, #36	; 0x24
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	68b9      	ldr	r1, [r7, #8]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f000 fd7d 	bl	800ebd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e0de:	6978      	ldr	r0, [r7, #20]
 800e0e0:	f7ff ff26 	bl	800df30 <prvUnlockQueue>
	}
 800e0e4:	bf00      	nop
 800e0e6:	3718      	adds	r7, #24
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08e      	sub	sp, #56	; 0x38
 800e0f0:	af04      	add	r7, sp, #16
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d10a      	bne.n	800e116 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	623b      	str	r3, [r7, #32]
}
 800e112:	bf00      	nop
 800e114:	e7fe      	b.n	800e114 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10a      	bne.n	800e132 <xTaskCreateStatic+0x46>
	__asm volatile
 800e11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e120:	f383 8811 	msr	BASEPRI, r3
 800e124:	f3bf 8f6f 	isb	sy
 800e128:	f3bf 8f4f 	dsb	sy
 800e12c:	61fb      	str	r3, [r7, #28]
}
 800e12e:	bf00      	nop
 800e130:	e7fe      	b.n	800e130 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e132:	23c0      	movs	r3, #192	; 0xc0
 800e134:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	2bc0      	cmp	r3, #192	; 0xc0
 800e13a:	d00a      	beq.n	800e152 <xTaskCreateStatic+0x66>
	__asm volatile
 800e13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e140:	f383 8811 	msr	BASEPRI, r3
 800e144:	f3bf 8f6f 	isb	sy
 800e148:	f3bf 8f4f 	dsb	sy
 800e14c:	61bb      	str	r3, [r7, #24]
}
 800e14e:	bf00      	nop
 800e150:	e7fe      	b.n	800e150 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e152:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e156:	2b00      	cmp	r3, #0
 800e158:	d01e      	beq.n	800e198 <xTaskCreateStatic+0xac>
 800e15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d01b      	beq.n	800e198 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e162:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e168:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16c:	2202      	movs	r2, #2
 800e16e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e172:	2300      	movs	r3, #0
 800e174:	9303      	str	r3, [sp, #12]
 800e176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e178:	9302      	str	r3, [sp, #8]
 800e17a:	f107 0314 	add.w	r3, r7, #20
 800e17e:	9301      	str	r3, [sp, #4]
 800e180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	68b9      	ldr	r1, [r7, #8]
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f000 f850 	bl	800e230 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e192:	f000 f8f7 	bl	800e384 <prvAddNewTaskToReadyList>
 800e196:	e001      	b.n	800e19c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e198:	2300      	movs	r3, #0
 800e19a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e19c:	697b      	ldr	r3, [r7, #20]
	}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3728      	adds	r7, #40	; 0x28
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b08c      	sub	sp, #48	; 0x30
 800e1aa:	af04      	add	r7, sp, #16
 800e1ac:	60f8      	str	r0, [r7, #12]
 800e1ae:	60b9      	str	r1, [r7, #8]
 800e1b0:	603b      	str	r3, [r7, #0]
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e1b6:	88fb      	ldrh	r3, [r7, #6]
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f001 ff8c 	bl	80100d8 <pvPortMalloc>
 800e1c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00e      	beq.n	800e1e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e1c8:	20c0      	movs	r0, #192	; 0xc0
 800e1ca:	f001 ff85 	bl	80100d8 <pvPortMalloc>
 800e1ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d003      	beq.n	800e1de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	697a      	ldr	r2, [r7, #20]
 800e1da:	631a      	str	r2, [r3, #48]	; 0x30
 800e1dc:	e005      	b.n	800e1ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e1de:	6978      	ldr	r0, [r7, #20]
 800e1e0:	f002 f846 	bl	8010270 <vPortFree>
 800e1e4:	e001      	b.n	800e1ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e1ea:	69fb      	ldr	r3, [r7, #28]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d017      	beq.n	800e220 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e1f8:	88fa      	ldrh	r2, [r7, #6]
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	9303      	str	r3, [sp, #12]
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	9302      	str	r3, [sp, #8]
 800e202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e204:	9301      	str	r3, [sp, #4]
 800e206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	68b9      	ldr	r1, [r7, #8]
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f000 f80e 	bl	800e230 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e214:	69f8      	ldr	r0, [r7, #28]
 800e216:	f000 f8b5 	bl	800e384 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e21a:	2301      	movs	r3, #1
 800e21c:	61bb      	str	r3, [r7, #24]
 800e21e:	e002      	b.n	800e226 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e224:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e226:	69bb      	ldr	r3, [r7, #24]
	}
 800e228:	4618      	mov	r0, r3
 800e22a:	3720      	adds	r7, #32
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b088      	sub	sp, #32
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
 800e23c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e240:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	461a      	mov	r2, r3
 800e248:	21a5      	movs	r1, #165	; 0xa5
 800e24a:	f002 ffae 	bl	80111aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e258:	3b01      	subs	r3, #1
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4413      	add	r3, r2
 800e25e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	f023 0307 	bic.w	r3, r3, #7
 800e266:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	f003 0307 	and.w	r3, r3, #7
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d00a      	beq.n	800e288 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e276:	f383 8811 	msr	BASEPRI, r3
 800e27a:	f3bf 8f6f 	isb	sy
 800e27e:	f3bf 8f4f 	dsb	sy
 800e282:	617b      	str	r3, [r7, #20]
}
 800e284:	bf00      	nop
 800e286:	e7fe      	b.n	800e286 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d01f      	beq.n	800e2ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e28e:	2300      	movs	r3, #0
 800e290:	61fb      	str	r3, [r7, #28]
 800e292:	e012      	b.n	800e2ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e294:	68ba      	ldr	r2, [r7, #8]
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	4413      	add	r3, r2
 800e29a:	7819      	ldrb	r1, [r3, #0]
 800e29c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	3334      	adds	r3, #52	; 0x34
 800e2a4:	460a      	mov	r2, r1
 800e2a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e2a8:	68ba      	ldr	r2, [r7, #8]
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d006      	beq.n	800e2c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	61fb      	str	r3, [r7, #28]
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	2b0f      	cmp	r3, #15
 800e2be:	d9e9      	bls.n	800e294 <prvInitialiseNewTask+0x64>
 800e2c0:	e000      	b.n	800e2c4 <prvInitialiseNewTask+0x94>
			{
				break;
 800e2c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e2cc:	e003      	b.n	800e2d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d8:	2b37      	cmp	r3, #55	; 0x37
 800e2da:	d901      	bls.n	800e2e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e2dc:	2337      	movs	r3, #55	; 0x37
 800e2de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f4:	3304      	adds	r3, #4
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7ff f8be 	bl	800d478 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fe:	3318      	adds	r3, #24
 800e300:	4618      	mov	r0, r3
 800e302:	f7ff f8b9 	bl	800d478 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e30a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e314:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e31a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31e:	2200      	movs	r2, #0
 800e320:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e324:	2200      	movs	r2, #0
 800e326:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32c:	2200      	movs	r2, #0
 800e32e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e334:	3358      	adds	r3, #88	; 0x58
 800e336:	2260      	movs	r2, #96	; 0x60
 800e338:	2100      	movs	r1, #0
 800e33a:	4618      	mov	r0, r3
 800e33c:	f002 ff35 	bl	80111aa <memset>
 800e340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e342:	4a0d      	ldr	r2, [pc, #52]	; (800e378 <prvInitialiseNewTask+0x148>)
 800e344:	65da      	str	r2, [r3, #92]	; 0x5c
 800e346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e348:	4a0c      	ldr	r2, [pc, #48]	; (800e37c <prvInitialiseNewTask+0x14c>)
 800e34a:	661a      	str	r2, [r3, #96]	; 0x60
 800e34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34e:	4a0c      	ldr	r2, [pc, #48]	; (800e380 <prvInitialiseNewTask+0x150>)
 800e350:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e352:	683a      	ldr	r2, [r7, #0]
 800e354:	68f9      	ldr	r1, [r7, #12]
 800e356:	69b8      	ldr	r0, [r7, #24]
 800e358:	f001 fc6e 	bl	800fc38 <pxPortInitialiseStack>
 800e35c:	4602      	mov	r2, r0
 800e35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e360:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e364:	2b00      	cmp	r3, #0
 800e366:	d002      	beq.n	800e36e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e36c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e36e:	bf00      	nop
 800e370:	3720      	adds	r7, #32
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	0801a33c 	.word	0x0801a33c
 800e37c:	0801a35c 	.word	0x0801a35c
 800e380:	0801a31c 	.word	0x0801a31c

0800e384 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e38c:	f001 fd82 	bl	800fe94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e390:	4b2d      	ldr	r3, [pc, #180]	; (800e448 <prvAddNewTaskToReadyList+0xc4>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3301      	adds	r3, #1
 800e396:	4a2c      	ldr	r2, [pc, #176]	; (800e448 <prvAddNewTaskToReadyList+0xc4>)
 800e398:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e39a:	4b2c      	ldr	r3, [pc, #176]	; (800e44c <prvAddNewTaskToReadyList+0xc8>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d109      	bne.n	800e3b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e3a2:	4a2a      	ldr	r2, [pc, #168]	; (800e44c <prvAddNewTaskToReadyList+0xc8>)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e3a8:	4b27      	ldr	r3, [pc, #156]	; (800e448 <prvAddNewTaskToReadyList+0xc4>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d110      	bne.n	800e3d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e3b0:	f000 fd3e 	bl	800ee30 <prvInitialiseTaskLists>
 800e3b4:	e00d      	b.n	800e3d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e3b6:	4b26      	ldr	r3, [pc, #152]	; (800e450 <prvAddNewTaskToReadyList+0xcc>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d109      	bne.n	800e3d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e3be:	4b23      	ldr	r3, [pc, #140]	; (800e44c <prvAddNewTaskToReadyList+0xc8>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d802      	bhi.n	800e3d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e3cc:	4a1f      	ldr	r2, [pc, #124]	; (800e44c <prvAddNewTaskToReadyList+0xc8>)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e3d2:	4b20      	ldr	r3, [pc, #128]	; (800e454 <prvAddNewTaskToReadyList+0xd0>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	4a1e      	ldr	r2, [pc, #120]	; (800e454 <prvAddNewTaskToReadyList+0xd0>)
 800e3da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e3dc:	4b1d      	ldr	r3, [pc, #116]	; (800e454 <prvAddNewTaskToReadyList+0xd0>)
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e8:	4b1b      	ldr	r3, [pc, #108]	; (800e458 <prvAddNewTaskToReadyList+0xd4>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d903      	bls.n	800e3f8 <prvAddNewTaskToReadyList+0x74>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f4:	4a18      	ldr	r2, [pc, #96]	; (800e458 <prvAddNewTaskToReadyList+0xd4>)
 800e3f6:	6013      	str	r3, [r2, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	4413      	add	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	4a15      	ldr	r2, [pc, #84]	; (800e45c <prvAddNewTaskToReadyList+0xd8>)
 800e406:	441a      	add	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	3304      	adds	r3, #4
 800e40c:	4619      	mov	r1, r3
 800e40e:	4610      	mov	r0, r2
 800e410:	f7ff f83f 	bl	800d492 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e414:	f001 fd6e 	bl	800fef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e418:	4b0d      	ldr	r3, [pc, #52]	; (800e450 <prvAddNewTaskToReadyList+0xcc>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00e      	beq.n	800e43e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e420:	4b0a      	ldr	r3, [pc, #40]	; (800e44c <prvAddNewTaskToReadyList+0xc8>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d207      	bcs.n	800e43e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e42e:	4b0c      	ldr	r3, [pc, #48]	; (800e460 <prvAddNewTaskToReadyList+0xdc>)
 800e430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e434:	601a      	str	r2, [r3, #0]
 800e436:	f3bf 8f4f 	dsb	sy
 800e43a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e43e:	bf00      	nop
 800e440:	3708      	adds	r7, #8
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	20003400 	.word	0x20003400
 800e44c:	20002f2c 	.word	0x20002f2c
 800e450:	2000340c 	.word	0x2000340c
 800e454:	2000341c 	.word	0x2000341c
 800e458:	20003408 	.word	0x20003408
 800e45c:	20002f30 	.word	0x20002f30
 800e460:	e000ed04 	.word	0xe000ed04

0800e464 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e46c:	2300      	movs	r3, #0
 800e46e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d017      	beq.n	800e4a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e476:	4b13      	ldr	r3, [pc, #76]	; (800e4c4 <vTaskDelay+0x60>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d00a      	beq.n	800e494 <vTaskDelay+0x30>
	__asm volatile
 800e47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e482:	f383 8811 	msr	BASEPRI, r3
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	60bb      	str	r3, [r7, #8]
}
 800e490:	bf00      	nop
 800e492:	e7fe      	b.n	800e492 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e494:	f000 f8f4 	bl	800e680 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e498:	2100      	movs	r1, #0
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f001 f82a 	bl	800f4f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e4a0:	f000 f8fc 	bl	800e69c <xTaskResumeAll>
 800e4a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d107      	bne.n	800e4bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e4ac:	4b06      	ldr	r3, [pc, #24]	; (800e4c8 <vTaskDelay+0x64>)
 800e4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4b2:	601a      	str	r2, [r3, #0]
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4bc:	bf00      	nop
 800e4be:	3710      	adds	r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	20003428 	.word	0x20003428
 800e4c8:	e000ed04 	.word	0xe000ed04

0800e4cc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b088      	sub	sp, #32
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d10a      	bne.n	800e4f4 <eTaskGetState+0x28>
	__asm volatile
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	60bb      	str	r3, [r7, #8]
}
 800e4f0:	bf00      	nop
 800e4f2:	e7fe      	b.n	800e4f2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800e4f4:	4b23      	ldr	r3, [pc, #140]	; (800e584 <eTaskGetState+0xb8>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	69ba      	ldr	r2, [r7, #24]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d102      	bne.n	800e504 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800e4fe:	2300      	movs	r3, #0
 800e500:	77fb      	strb	r3, [r7, #31]
 800e502:	e03a      	b.n	800e57a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800e504:	f001 fcc6 	bl	800fe94 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	695b      	ldr	r3, [r3, #20]
 800e50c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800e50e:	4b1e      	ldr	r3, [pc, #120]	; (800e588 <eTaskGetState+0xbc>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800e514:	4b1d      	ldr	r3, [pc, #116]	; (800e58c <eTaskGetState+0xc0>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800e51a:	f001 fceb 	bl	800fef4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800e51e:	697a      	ldr	r2, [r7, #20]
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	429a      	cmp	r2, r3
 800e524:	d003      	beq.n	800e52e <eTaskGetState+0x62>
 800e526:	697a      	ldr	r2, [r7, #20]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d102      	bne.n	800e534 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800e52e:	2302      	movs	r3, #2
 800e530:	77fb      	strb	r3, [r7, #31]
 800e532:	e022      	b.n	800e57a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	4a16      	ldr	r2, [pc, #88]	; (800e590 <eTaskGetState+0xc4>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d112      	bne.n	800e562 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e540:	2b00      	cmp	r3, #0
 800e542:	d10b      	bne.n	800e55c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d102      	bne.n	800e556 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800e550:	2302      	movs	r3, #2
 800e552:	77fb      	strb	r3, [r7, #31]
 800e554:	e011      	b.n	800e57a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800e556:	2303      	movs	r3, #3
 800e558:	77fb      	strb	r3, [r7, #31]
 800e55a:	e00e      	b.n	800e57a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800e55c:	2302      	movs	r3, #2
 800e55e:	77fb      	strb	r3, [r7, #31]
 800e560:	e00b      	b.n	800e57a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	4a0b      	ldr	r2, [pc, #44]	; (800e594 <eTaskGetState+0xc8>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d002      	beq.n	800e570 <eTaskGetState+0xa4>
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d102      	bne.n	800e576 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800e570:	2304      	movs	r3, #4
 800e572:	77fb      	strb	r3, [r7, #31]
 800e574:	e001      	b.n	800e57a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800e576:	2301      	movs	r3, #1
 800e578:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800e57a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e57c:	4618      	mov	r0, r3
 800e57e:	3720      	adds	r7, #32
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	20002f2c 	.word	0x20002f2c
 800e588:	200033b8 	.word	0x200033b8
 800e58c:	200033bc 	.word	0x200033bc
 800e590:	200033ec 	.word	0x200033ec
 800e594:	200033d4 	.word	0x200033d4

0800e598 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b08a      	sub	sp, #40	; 0x28
 800e59c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e5a6:	463a      	mov	r2, r7
 800e5a8:	1d39      	adds	r1, r7, #4
 800e5aa:	f107 0308 	add.w	r3, r7, #8
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fe ff0e 	bl	800d3d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e5b4:	6839      	ldr	r1, [r7, #0]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	68ba      	ldr	r2, [r7, #8]
 800e5ba:	9202      	str	r2, [sp, #8]
 800e5bc:	9301      	str	r3, [sp, #4]
 800e5be:	2300      	movs	r3, #0
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	460a      	mov	r2, r1
 800e5c6:	4925      	ldr	r1, [pc, #148]	; (800e65c <vTaskStartScheduler+0xc4>)
 800e5c8:	4825      	ldr	r0, [pc, #148]	; (800e660 <vTaskStartScheduler+0xc8>)
 800e5ca:	f7ff fd8f 	bl	800e0ec <xTaskCreateStatic>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	4a24      	ldr	r2, [pc, #144]	; (800e664 <vTaskStartScheduler+0xcc>)
 800e5d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e5d4:	4b23      	ldr	r3, [pc, #140]	; (800e664 <vTaskStartScheduler+0xcc>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	617b      	str	r3, [r7, #20]
 800e5e0:	e001      	b.n	800e5e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d102      	bne.n	800e5f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e5ec:	f000 ffd6 	bl	800f59c <xTimerCreateTimerTask>
 800e5f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d11e      	bne.n	800e636 <vTaskStartScheduler+0x9e>
	__asm volatile
 800e5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fc:	f383 8811 	msr	BASEPRI, r3
 800e600:	f3bf 8f6f 	isb	sy
 800e604:	f3bf 8f4f 	dsb	sy
 800e608:	613b      	str	r3, [r7, #16]
}
 800e60a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e60c:	4b16      	ldr	r3, [pc, #88]	; (800e668 <vTaskStartScheduler+0xd0>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	3358      	adds	r3, #88	; 0x58
 800e612:	4a16      	ldr	r2, [pc, #88]	; (800e66c <vTaskStartScheduler+0xd4>)
 800e614:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e616:	4b16      	ldr	r3, [pc, #88]	; (800e670 <vTaskStartScheduler+0xd8>)
 800e618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e61c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e61e:	4b15      	ldr	r3, [pc, #84]	; (800e674 <vTaskStartScheduler+0xdc>)
 800e620:	2201      	movs	r2, #1
 800e622:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e624:	4b14      	ldr	r3, [pc, #80]	; (800e678 <vTaskStartScheduler+0xe0>)
 800e626:	2200      	movs	r2, #0
 800e628:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e62a:	4b14      	ldr	r3, [pc, #80]	; (800e67c <vTaskStartScheduler+0xe4>)
 800e62c:	2200      	movs	r2, #0
 800e62e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e630:	f001 fb8e 	bl	800fd50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e634:	e00e      	b.n	800e654 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e63c:	d10a      	bne.n	800e654 <vTaskStartScheduler+0xbc>
	__asm volatile
 800e63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	60fb      	str	r3, [r7, #12]
}
 800e650:	bf00      	nop
 800e652:	e7fe      	b.n	800e652 <vTaskStartScheduler+0xba>
}
 800e654:	bf00      	nop
 800e656:	3718      	adds	r7, #24
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	08014028 	.word	0x08014028
 800e660:	0800ee01 	.word	0x0800ee01
 800e664:	20003424 	.word	0x20003424
 800e668:	20002f2c 	.word	0x20002f2c
 800e66c:	200001b0 	.word	0x200001b0
 800e670:	20003420 	.word	0x20003420
 800e674:	2000340c 	.word	0x2000340c
 800e678:	20003404 	.word	0x20003404
 800e67c:	2000cd88 	.word	0x2000cd88

0800e680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e680:	b480      	push	{r7}
 800e682:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e684:	4b04      	ldr	r3, [pc, #16]	; (800e698 <vTaskSuspendAll+0x18>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	3301      	adds	r3, #1
 800e68a:	4a03      	ldr	r2, [pc, #12]	; (800e698 <vTaskSuspendAll+0x18>)
 800e68c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e68e:	bf00      	nop
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr
 800e698:	20003428 	.word	0x20003428

0800e69c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e6aa:	4b42      	ldr	r3, [pc, #264]	; (800e7b4 <xTaskResumeAll+0x118>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d10a      	bne.n	800e6c8 <xTaskResumeAll+0x2c>
	__asm volatile
 800e6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b6:	f383 8811 	msr	BASEPRI, r3
 800e6ba:	f3bf 8f6f 	isb	sy
 800e6be:	f3bf 8f4f 	dsb	sy
 800e6c2:	603b      	str	r3, [r7, #0]
}
 800e6c4:	bf00      	nop
 800e6c6:	e7fe      	b.n	800e6c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e6c8:	f001 fbe4 	bl	800fe94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e6cc:	4b39      	ldr	r3, [pc, #228]	; (800e7b4 <xTaskResumeAll+0x118>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	4a38      	ldr	r2, [pc, #224]	; (800e7b4 <xTaskResumeAll+0x118>)
 800e6d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6d6:	4b37      	ldr	r3, [pc, #220]	; (800e7b4 <xTaskResumeAll+0x118>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d162      	bne.n	800e7a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e6de:	4b36      	ldr	r3, [pc, #216]	; (800e7b8 <xTaskResumeAll+0x11c>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d05e      	beq.n	800e7a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6e6:	e02f      	b.n	800e748 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6e8:	4b34      	ldr	r3, [pc, #208]	; (800e7bc <xTaskResumeAll+0x120>)
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	3318      	adds	r3, #24
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7fe ff29 	bl	800d54c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fe ff24 	bl	800d54c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e708:	4b2d      	ldr	r3, [pc, #180]	; (800e7c0 <xTaskResumeAll+0x124>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d903      	bls.n	800e718 <xTaskResumeAll+0x7c>
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e714:	4a2a      	ldr	r2, [pc, #168]	; (800e7c0 <xTaskResumeAll+0x124>)
 800e716:	6013      	str	r3, [r2, #0]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71c:	4613      	mov	r3, r2
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	4413      	add	r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	4a27      	ldr	r2, [pc, #156]	; (800e7c4 <xTaskResumeAll+0x128>)
 800e726:	441a      	add	r2, r3
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	3304      	adds	r3, #4
 800e72c:	4619      	mov	r1, r3
 800e72e:	4610      	mov	r0, r2
 800e730:	f7fe feaf 	bl	800d492 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e738:	4b23      	ldr	r3, [pc, #140]	; (800e7c8 <xTaskResumeAll+0x12c>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e73e:	429a      	cmp	r2, r3
 800e740:	d302      	bcc.n	800e748 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e742:	4b22      	ldr	r3, [pc, #136]	; (800e7cc <xTaskResumeAll+0x130>)
 800e744:	2201      	movs	r2, #1
 800e746:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e748:	4b1c      	ldr	r3, [pc, #112]	; (800e7bc <xTaskResumeAll+0x120>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d1cb      	bne.n	800e6e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d001      	beq.n	800e75a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e756:	f000 fce1 	bl	800f11c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e75a:	4b1d      	ldr	r3, [pc, #116]	; (800e7d0 <xTaskResumeAll+0x134>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d010      	beq.n	800e788 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e766:	f000 f8d7 	bl	800e918 <xTaskIncrementTick>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d002      	beq.n	800e776 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e770:	4b16      	ldr	r3, [pc, #88]	; (800e7cc <xTaskResumeAll+0x130>)
 800e772:	2201      	movs	r2, #1
 800e774:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	3b01      	subs	r3, #1
 800e77a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d1f1      	bne.n	800e766 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e782:	4b13      	ldr	r3, [pc, #76]	; (800e7d0 <xTaskResumeAll+0x134>)
 800e784:	2200      	movs	r2, #0
 800e786:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e788:	4b10      	ldr	r3, [pc, #64]	; (800e7cc <xTaskResumeAll+0x130>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d009      	beq.n	800e7a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e790:	2301      	movs	r3, #1
 800e792:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e794:	4b0f      	ldr	r3, [pc, #60]	; (800e7d4 <xTaskResumeAll+0x138>)
 800e796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e79a:	601a      	str	r2, [r3, #0]
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e7a4:	f001 fba6 	bl	800fef4 <vPortExitCritical>

	return xAlreadyYielded;
 800e7a8:	68bb      	ldr	r3, [r7, #8]
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	20003428 	.word	0x20003428
 800e7b8:	20003400 	.word	0x20003400
 800e7bc:	200033c0 	.word	0x200033c0
 800e7c0:	20003408 	.word	0x20003408
 800e7c4:	20002f30 	.word	0x20002f30
 800e7c8:	20002f2c 	.word	0x20002f2c
 800e7cc:	20003414 	.word	0x20003414
 800e7d0:	20003410 	.word	0x20003410
 800e7d4:	e000ed04 	.word	0xe000ed04

0800e7d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e7de:	4b05      	ldr	r3, [pc, #20]	; (800e7f4 <xTaskGetTickCount+0x1c>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e7e4:	687b      	ldr	r3, [r7, #4]
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	370c      	adds	r7, #12
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
 800e7f4:	20003404 	.word	0x20003404

0800e7f8 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b086      	sub	sp, #24
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	60f8      	str	r0, [r7, #12]
 800e800:	60b9      	str	r1, [r7, #8]
 800e802:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e804:	2300      	movs	r3, #0
 800e806:	617b      	str	r3, [r7, #20]
 800e808:	2338      	movs	r3, #56	; 0x38
 800e80a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800e80c:	f7ff ff38 	bl	800e680 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e810:	4b3a      	ldr	r3, [pc, #232]	; (800e8fc <uxTaskGetSystemState+0x104>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	429a      	cmp	r2, r3
 800e818:	d369      	bcc.n	800e8ee <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	3b01      	subs	r3, #1
 800e81e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e820:	697a      	ldr	r2, [r7, #20]
 800e822:	4613      	mov	r3, r2
 800e824:	00db      	lsls	r3, r3, #3
 800e826:	4413      	add	r3, r2
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	461a      	mov	r2, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	1898      	adds	r0, r3, r2
 800e830:	693a      	ldr	r2, [r7, #16]
 800e832:	4613      	mov	r3, r2
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	4413      	add	r3, r2
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4a31      	ldr	r2, [pc, #196]	; (800e900 <uxTaskGetSystemState+0x108>)
 800e83c:	4413      	add	r3, r2
 800e83e:	2201      	movs	r2, #1
 800e840:	4619      	mov	r1, r3
 800e842:	f000 fbc9 	bl	800efd8 <prvListTasksWithinSingleList>
 800e846:	4602      	mov	r2, r0
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	4413      	add	r3, r2
 800e84c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d1e2      	bne.n	800e81a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e854:	697a      	ldr	r2, [r7, #20]
 800e856:	4613      	mov	r3, r2
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	4413      	add	r3, r2
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	461a      	mov	r2, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	4413      	add	r3, r2
 800e864:	4a27      	ldr	r2, [pc, #156]	; (800e904 <uxTaskGetSystemState+0x10c>)
 800e866:	6811      	ldr	r1, [r2, #0]
 800e868:	2202      	movs	r2, #2
 800e86a:	4618      	mov	r0, r3
 800e86c:	f000 fbb4 	bl	800efd8 <prvListTasksWithinSingleList>
 800e870:	4602      	mov	r2, r0
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	4413      	add	r3, r2
 800e876:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e878:	697a      	ldr	r2, [r7, #20]
 800e87a:	4613      	mov	r3, r2
 800e87c:	00db      	lsls	r3, r3, #3
 800e87e:	4413      	add	r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	461a      	mov	r2, r3
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	4413      	add	r3, r2
 800e888:	4a1f      	ldr	r2, [pc, #124]	; (800e908 <uxTaskGetSystemState+0x110>)
 800e88a:	6811      	ldr	r1, [r2, #0]
 800e88c:	2202      	movs	r2, #2
 800e88e:	4618      	mov	r0, r3
 800e890:	f000 fba2 	bl	800efd8 <prvListTasksWithinSingleList>
 800e894:	4602      	mov	r2, r0
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	4413      	add	r3, r2
 800e89a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e89c:	697a      	ldr	r2, [r7, #20]
 800e89e:	4613      	mov	r3, r2
 800e8a0:	00db      	lsls	r3, r3, #3
 800e8a2:	4413      	add	r3, r2
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	2204      	movs	r2, #4
 800e8ae:	4917      	ldr	r1, [pc, #92]	; (800e90c <uxTaskGetSystemState+0x114>)
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f000 fb91 	bl	800efd8 <prvListTasksWithinSingleList>
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e8be:	697a      	ldr	r2, [r7, #20]
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	00db      	lsls	r3, r3, #3
 800e8c4:	4413      	add	r3, r2
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	2203      	movs	r2, #3
 800e8d0:	490f      	ldr	r1, [pc, #60]	; (800e910 <uxTaskGetSystemState+0x118>)
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fb80 	bl	800efd8 <prvListTasksWithinSingleList>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	4413      	add	r3, r2
 800e8de:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d003      	beq.n	800e8ee <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e8e6:	4b0b      	ldr	r3, [pc, #44]	; (800e914 <uxTaskGetSystemState+0x11c>)
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800e8ee:	f7ff fed5 	bl	800e69c <xTaskResumeAll>

		return uxTask;
 800e8f2:	697b      	ldr	r3, [r7, #20]
	}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3718      	adds	r7, #24
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	20003400 	.word	0x20003400
 800e900:	20002f30 	.word	0x20002f30
 800e904:	200033b8 	.word	0x200033b8
 800e908:	200033bc 	.word	0x200033bc
 800e90c:	200033d4 	.word	0x200033d4
 800e910:	200033ec 	.word	0x200033ec
 800e914:	2000cd88 	.word	0x2000cd88

0800e918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e91e:	2300      	movs	r3, #0
 800e920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e922:	4b4f      	ldr	r3, [pc, #316]	; (800ea60 <xTaskIncrementTick+0x148>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	f040 808f 	bne.w	800ea4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e92c:	4b4d      	ldr	r3, [pc, #308]	; (800ea64 <xTaskIncrementTick+0x14c>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	3301      	adds	r3, #1
 800e932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e934:	4a4b      	ldr	r2, [pc, #300]	; (800ea64 <xTaskIncrementTick+0x14c>)
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d120      	bne.n	800e982 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e940:	4b49      	ldr	r3, [pc, #292]	; (800ea68 <xTaskIncrementTick+0x150>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00a      	beq.n	800e960 <xTaskIncrementTick+0x48>
	__asm volatile
 800e94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	603b      	str	r3, [r7, #0]
}
 800e95c:	bf00      	nop
 800e95e:	e7fe      	b.n	800e95e <xTaskIncrementTick+0x46>
 800e960:	4b41      	ldr	r3, [pc, #260]	; (800ea68 <xTaskIncrementTick+0x150>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	60fb      	str	r3, [r7, #12]
 800e966:	4b41      	ldr	r3, [pc, #260]	; (800ea6c <xTaskIncrementTick+0x154>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a3f      	ldr	r2, [pc, #252]	; (800ea68 <xTaskIncrementTick+0x150>)
 800e96c:	6013      	str	r3, [r2, #0]
 800e96e:	4a3f      	ldr	r2, [pc, #252]	; (800ea6c <xTaskIncrementTick+0x154>)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	6013      	str	r3, [r2, #0]
 800e974:	4b3e      	ldr	r3, [pc, #248]	; (800ea70 <xTaskIncrementTick+0x158>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	3301      	adds	r3, #1
 800e97a:	4a3d      	ldr	r2, [pc, #244]	; (800ea70 <xTaskIncrementTick+0x158>)
 800e97c:	6013      	str	r3, [r2, #0]
 800e97e:	f000 fbcd 	bl	800f11c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e982:	4b3c      	ldr	r3, [pc, #240]	; (800ea74 <xTaskIncrementTick+0x15c>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	693a      	ldr	r2, [r7, #16]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d349      	bcc.n	800ea20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e98c:	4b36      	ldr	r3, [pc, #216]	; (800ea68 <xTaskIncrementTick+0x150>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d104      	bne.n	800e9a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e996:	4b37      	ldr	r3, [pc, #220]	; (800ea74 <xTaskIncrementTick+0x15c>)
 800e998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e99c:	601a      	str	r2, [r3, #0]
					break;
 800e99e:	e03f      	b.n	800ea20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9a0:	4b31      	ldr	r3, [pc, #196]	; (800ea68 <xTaskIncrementTick+0x150>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e9b0:	693a      	ldr	r2, [r7, #16]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d203      	bcs.n	800e9c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e9b8:	4a2e      	ldr	r2, [pc, #184]	; (800ea74 <xTaskIncrementTick+0x15c>)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e9be:	e02f      	b.n	800ea20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	3304      	adds	r3, #4
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7fe fdc1 	bl	800d54c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d004      	beq.n	800e9dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	3318      	adds	r3, #24
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fe fdb8 	bl	800d54c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9e0:	4b25      	ldr	r3, [pc, #148]	; (800ea78 <xTaskIncrementTick+0x160>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d903      	bls.n	800e9f0 <xTaskIncrementTick+0xd8>
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ec:	4a22      	ldr	r2, [pc, #136]	; (800ea78 <xTaskIncrementTick+0x160>)
 800e9ee:	6013      	str	r3, [r2, #0]
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	4413      	add	r3, r2
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4a1f      	ldr	r2, [pc, #124]	; (800ea7c <xTaskIncrementTick+0x164>)
 800e9fe:	441a      	add	r2, r3
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	3304      	adds	r3, #4
 800ea04:	4619      	mov	r1, r3
 800ea06:	4610      	mov	r0, r2
 800ea08:	f7fe fd43 	bl	800d492 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea10:	4b1b      	ldr	r3, [pc, #108]	; (800ea80 <xTaskIncrementTick+0x168>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d3b8      	bcc.n	800e98c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea1e:	e7b5      	b.n	800e98c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ea20:	4b17      	ldr	r3, [pc, #92]	; (800ea80 <xTaskIncrementTick+0x168>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea26:	4915      	ldr	r1, [pc, #84]	; (800ea7c <xTaskIncrementTick+0x164>)
 800ea28:	4613      	mov	r3, r2
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	4413      	add	r3, r2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	440b      	add	r3, r1
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d901      	bls.n	800ea3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ea3c:	4b11      	ldr	r3, [pc, #68]	; (800ea84 <xTaskIncrementTick+0x16c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d007      	beq.n	800ea54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ea44:	2301      	movs	r3, #1
 800ea46:	617b      	str	r3, [r7, #20]
 800ea48:	e004      	b.n	800ea54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ea4a:	4b0f      	ldr	r3, [pc, #60]	; (800ea88 <xTaskIncrementTick+0x170>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	4a0d      	ldr	r2, [pc, #52]	; (800ea88 <xTaskIncrementTick+0x170>)
 800ea52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ea54:	697b      	ldr	r3, [r7, #20]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3718      	adds	r7, #24
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	20003428 	.word	0x20003428
 800ea64:	20003404 	.word	0x20003404
 800ea68:	200033b8 	.word	0x200033b8
 800ea6c:	200033bc 	.word	0x200033bc
 800ea70:	20003418 	.word	0x20003418
 800ea74:	20003420 	.word	0x20003420
 800ea78:	20003408 	.word	0x20003408
 800ea7c:	20002f30 	.word	0x20002f30
 800ea80:	20002f2c 	.word	0x20002f2c
 800ea84:	20003414 	.word	0x20003414
 800ea88:	20003410 	.word	0x20003410

0800ea8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b085      	sub	sp, #20
 800ea90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ea92:	4b36      	ldr	r3, [pc, #216]	; (800eb6c <vTaskSwitchContext+0xe0>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d003      	beq.n	800eaa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ea9a:	4b35      	ldr	r3, [pc, #212]	; (800eb70 <vTaskSwitchContext+0xe4>)
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eaa0:	e05e      	b.n	800eb60 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800eaa2:	4b33      	ldr	r3, [pc, #204]	; (800eb70 <vTaskSwitchContext+0xe4>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800eaa8:	4b32      	ldr	r3, [pc, #200]	; (800eb74 <vTaskSwitchContext+0xe8>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a32      	ldr	r2, [pc, #200]	; (800eb78 <vTaskSwitchContext+0xec>)
 800eaae:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800eab0:	4b31      	ldr	r3, [pc, #196]	; (800eb78 <vTaskSwitchContext+0xec>)
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	4b31      	ldr	r3, [pc, #196]	; (800eb7c <vTaskSwitchContext+0xf0>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d909      	bls.n	800ead0 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800eabc:	4b30      	ldr	r3, [pc, #192]	; (800eb80 <vTaskSwitchContext+0xf4>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eac2:	4a2d      	ldr	r2, [pc, #180]	; (800eb78 <vTaskSwitchContext+0xec>)
 800eac4:	6810      	ldr	r0, [r2, #0]
 800eac6:	4a2d      	ldr	r2, [pc, #180]	; (800eb7c <vTaskSwitchContext+0xf0>)
 800eac8:	6812      	ldr	r2, [r2, #0]
 800eaca:	1a82      	subs	r2, r0, r2
 800eacc:	440a      	add	r2, r1
 800eace:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ead0:	4b29      	ldr	r3, [pc, #164]	; (800eb78 <vTaskSwitchContext+0xec>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a29      	ldr	r2, [pc, #164]	; (800eb7c <vTaskSwitchContext+0xf0>)
 800ead6:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ead8:	4b2a      	ldr	r3, [pc, #168]	; (800eb84 <vTaskSwitchContext+0xf8>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	60fb      	str	r3, [r7, #12]
 800eade:	e010      	b.n	800eb02 <vTaskSwitchContext+0x76>
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d10a      	bne.n	800eafc <vTaskSwitchContext+0x70>
	__asm volatile
 800eae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaea:	f383 8811 	msr	BASEPRI, r3
 800eaee:	f3bf 8f6f 	isb	sy
 800eaf2:	f3bf 8f4f 	dsb	sy
 800eaf6:	607b      	str	r3, [r7, #4]
}
 800eaf8:	bf00      	nop
 800eafa:	e7fe      	b.n	800eafa <vTaskSwitchContext+0x6e>
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	3b01      	subs	r3, #1
 800eb00:	60fb      	str	r3, [r7, #12]
 800eb02:	4921      	ldr	r1, [pc, #132]	; (800eb88 <vTaskSwitchContext+0xfc>)
 800eb04:	68fa      	ldr	r2, [r7, #12]
 800eb06:	4613      	mov	r3, r2
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	4413      	add	r3, r2
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	440b      	add	r3, r1
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d0e4      	beq.n	800eae0 <vTaskSwitchContext+0x54>
 800eb16:	68fa      	ldr	r2, [r7, #12]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	4413      	add	r3, r2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	4a19      	ldr	r2, [pc, #100]	; (800eb88 <vTaskSwitchContext+0xfc>)
 800eb22:	4413      	add	r3, r2
 800eb24:	60bb      	str	r3, [r7, #8]
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	685a      	ldr	r2, [r3, #4]
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	605a      	str	r2, [r3, #4]
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	685a      	ldr	r2, [r3, #4]
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	3308      	adds	r3, #8
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d104      	bne.n	800eb46 <vTaskSwitchContext+0xba>
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	685a      	ldr	r2, [r3, #4]
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	605a      	str	r2, [r3, #4]
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	4a0c      	ldr	r2, [pc, #48]	; (800eb80 <vTaskSwitchContext+0xf4>)
 800eb4e:	6013      	str	r3, [r2, #0]
 800eb50:	4a0c      	ldr	r2, [pc, #48]	; (800eb84 <vTaskSwitchContext+0xf8>)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eb56:	4b0a      	ldr	r3, [pc, #40]	; (800eb80 <vTaskSwitchContext+0xf4>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	3358      	adds	r3, #88	; 0x58
 800eb5c:	4a0b      	ldr	r2, [pc, #44]	; (800eb8c <vTaskSwitchContext+0x100>)
 800eb5e:	6013      	str	r3, [r2, #0]
}
 800eb60:	bf00      	nop
 800eb62:	3714      	adds	r7, #20
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr
 800eb6c:	20003428 	.word	0x20003428
 800eb70:	20003414 	.word	0x20003414
 800eb74:	2000cd88 	.word	0x2000cd88
 800eb78:	20003430 	.word	0x20003430
 800eb7c:	2000342c 	.word	0x2000342c
 800eb80:	20002f2c 	.word	0x20002f2c
 800eb84:	20003408 	.word	0x20003408
 800eb88:	20002f30 	.word	0x20002f30
 800eb8c:	200001b0 	.word	0x200001b0

0800eb90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d10a      	bne.n	800ebb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800eba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	60fb      	str	r3, [r7, #12]
}
 800ebb2:	bf00      	nop
 800ebb4:	e7fe      	b.n	800ebb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ebb6:	4b07      	ldr	r3, [pc, #28]	; (800ebd4 <vTaskPlaceOnEventList+0x44>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	3318      	adds	r3, #24
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f7fe fc8b 	bl	800d4da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ebc4:	2101      	movs	r1, #1
 800ebc6:	6838      	ldr	r0, [r7, #0]
 800ebc8:	f000 fc94 	bl	800f4f4 <prvAddCurrentTaskToDelayedList>
}
 800ebcc:	bf00      	nop
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	20002f2c 	.word	0x20002f2c

0800ebd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b086      	sub	sp, #24
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d10a      	bne.n	800ec00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ebea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebee:	f383 8811 	msr	BASEPRI, r3
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	f3bf 8f4f 	dsb	sy
 800ebfa:	617b      	str	r3, [r7, #20]
}
 800ebfc:	bf00      	nop
 800ebfe:	e7fe      	b.n	800ebfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec00:	4b0a      	ldr	r3, [pc, #40]	; (800ec2c <vTaskPlaceOnEventListRestricted+0x54>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	3318      	adds	r3, #24
 800ec06:	4619      	mov	r1, r3
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f7fe fc42 	bl	800d492 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d002      	beq.n	800ec1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ec14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec1a:	6879      	ldr	r1, [r7, #4]
 800ec1c:	68b8      	ldr	r0, [r7, #8]
 800ec1e:	f000 fc69 	bl	800f4f4 <prvAddCurrentTaskToDelayedList>
	}
 800ec22:	bf00      	nop
 800ec24:	3718      	adds	r7, #24
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	20002f2c 	.word	0x20002f2c

0800ec30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b086      	sub	sp, #24
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10a      	bne.n	800ec5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ec46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4a:	f383 8811 	msr	BASEPRI, r3
 800ec4e:	f3bf 8f6f 	isb	sy
 800ec52:	f3bf 8f4f 	dsb	sy
 800ec56:	60fb      	str	r3, [r7, #12]
}
 800ec58:	bf00      	nop
 800ec5a:	e7fe      	b.n	800ec5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	3318      	adds	r3, #24
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fe fc73 	bl	800d54c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec66:	4b1e      	ldr	r3, [pc, #120]	; (800ece0 <xTaskRemoveFromEventList+0xb0>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d11d      	bne.n	800ecaa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	3304      	adds	r3, #4
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7fe fc6a 	bl	800d54c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7c:	4b19      	ldr	r3, [pc, #100]	; (800ece4 <xTaskRemoveFromEventList+0xb4>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d903      	bls.n	800ec8c <xTaskRemoveFromEventList+0x5c>
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec88:	4a16      	ldr	r2, [pc, #88]	; (800ece4 <xTaskRemoveFromEventList+0xb4>)
 800ec8a:	6013      	str	r3, [r2, #0]
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec90:	4613      	mov	r3, r2
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	4413      	add	r3, r2
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	4a13      	ldr	r2, [pc, #76]	; (800ece8 <xTaskRemoveFromEventList+0xb8>)
 800ec9a:	441a      	add	r2, r3
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	3304      	adds	r3, #4
 800eca0:	4619      	mov	r1, r3
 800eca2:	4610      	mov	r0, r2
 800eca4:	f7fe fbf5 	bl	800d492 <vListInsertEnd>
 800eca8:	e005      	b.n	800ecb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	3318      	adds	r3, #24
 800ecae:	4619      	mov	r1, r3
 800ecb0:	480e      	ldr	r0, [pc, #56]	; (800ecec <xTaskRemoveFromEventList+0xbc>)
 800ecb2:	f7fe fbee 	bl	800d492 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecba:	4b0d      	ldr	r3, [pc, #52]	; (800ecf0 <xTaskRemoveFromEventList+0xc0>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d905      	bls.n	800ecd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ecc8:	4b0a      	ldr	r3, [pc, #40]	; (800ecf4 <xTaskRemoveFromEventList+0xc4>)
 800ecca:	2201      	movs	r2, #1
 800eccc:	601a      	str	r2, [r3, #0]
 800ecce:	e001      	b.n	800ecd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ecd4:	697b      	ldr	r3, [r7, #20]
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3718      	adds	r7, #24
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	20003428 	.word	0x20003428
 800ece4:	20003408 	.word	0x20003408
 800ece8:	20002f30 	.word	0x20002f30
 800ecec:	200033c0 	.word	0x200033c0
 800ecf0:	20002f2c 	.word	0x20002f2c
 800ecf4:	20003414 	.word	0x20003414

0800ecf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed00:	4b06      	ldr	r3, [pc, #24]	; (800ed1c <vTaskInternalSetTimeOutState+0x24>)
 800ed02:	681a      	ldr	r2, [r3, #0]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed08:	4b05      	ldr	r3, [pc, #20]	; (800ed20 <vTaskInternalSetTimeOutState+0x28>)
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	605a      	str	r2, [r3, #4]
}
 800ed10:	bf00      	nop
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr
 800ed1c:	20003418 	.word	0x20003418
 800ed20:	20003404 	.word	0x20003404

0800ed24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b088      	sub	sp, #32
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d10a      	bne.n	800ed4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ed34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed38:	f383 8811 	msr	BASEPRI, r3
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	f3bf 8f4f 	dsb	sy
 800ed44:	613b      	str	r3, [r7, #16]
}
 800ed46:	bf00      	nop
 800ed48:	e7fe      	b.n	800ed48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d10a      	bne.n	800ed66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ed50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed54:	f383 8811 	msr	BASEPRI, r3
 800ed58:	f3bf 8f6f 	isb	sy
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	60fb      	str	r3, [r7, #12]
}
 800ed62:	bf00      	nop
 800ed64:	e7fe      	b.n	800ed64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ed66:	f001 f895 	bl	800fe94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ed6a:	4b1d      	ldr	r3, [pc, #116]	; (800ede0 <xTaskCheckForTimeOut+0xbc>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	69ba      	ldr	r2, [r7, #24]
 800ed76:	1ad3      	subs	r3, r2, r3
 800ed78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed82:	d102      	bne.n	800ed8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ed84:	2300      	movs	r3, #0
 800ed86:	61fb      	str	r3, [r7, #28]
 800ed88:	e023      	b.n	800edd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	4b15      	ldr	r3, [pc, #84]	; (800ede4 <xTaskCheckForTimeOut+0xc0>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d007      	beq.n	800eda6 <xTaskCheckForTimeOut+0x82>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	69ba      	ldr	r2, [r7, #24]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d302      	bcc.n	800eda6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eda0:	2301      	movs	r3, #1
 800eda2:	61fb      	str	r3, [r7, #28]
 800eda4:	e015      	b.n	800edd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	697a      	ldr	r2, [r7, #20]
 800edac:	429a      	cmp	r2, r3
 800edae:	d20b      	bcs.n	800edc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	1ad2      	subs	r2, r2, r3
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f7ff ff9b 	bl	800ecf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800edc2:	2300      	movs	r3, #0
 800edc4:	61fb      	str	r3, [r7, #28]
 800edc6:	e004      	b.n	800edd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	2200      	movs	r2, #0
 800edcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800edce:	2301      	movs	r3, #1
 800edd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800edd2:	f001 f88f 	bl	800fef4 <vPortExitCritical>

	return xReturn;
 800edd6:	69fb      	ldr	r3, [r7, #28]
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3720      	adds	r7, #32
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}
 800ede0:	20003404 	.word	0x20003404
 800ede4:	20003418 	.word	0x20003418

0800ede8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ede8:	b480      	push	{r7}
 800edea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800edec:	4b03      	ldr	r3, [pc, #12]	; (800edfc <vTaskMissedYield+0x14>)
 800edee:	2201      	movs	r2, #1
 800edf0:	601a      	str	r2, [r3, #0]
}
 800edf2:	bf00      	nop
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr
 800edfc:	20003414 	.word	0x20003414

0800ee00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ee08:	f000 f852 	bl	800eeb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ee0c:	4b06      	ldr	r3, [pc, #24]	; (800ee28 <prvIdleTask+0x28>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d9f9      	bls.n	800ee08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ee14:	4b05      	ldr	r3, [pc, #20]	; (800ee2c <prvIdleTask+0x2c>)
 800ee16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee1a:	601a      	str	r2, [r3, #0]
 800ee1c:	f3bf 8f4f 	dsb	sy
 800ee20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ee24:	e7f0      	b.n	800ee08 <prvIdleTask+0x8>
 800ee26:	bf00      	nop
 800ee28:	20002f30 	.word	0x20002f30
 800ee2c:	e000ed04 	.word	0xe000ed04

0800ee30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee36:	2300      	movs	r3, #0
 800ee38:	607b      	str	r3, [r7, #4]
 800ee3a:	e00c      	b.n	800ee56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	4413      	add	r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	4a12      	ldr	r2, [pc, #72]	; (800ee90 <prvInitialiseTaskLists+0x60>)
 800ee48:	4413      	add	r3, r2
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7fe faf4 	bl	800d438 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	3301      	adds	r3, #1
 800ee54:	607b      	str	r3, [r7, #4]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2b37      	cmp	r3, #55	; 0x37
 800ee5a:	d9ef      	bls.n	800ee3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ee5c:	480d      	ldr	r0, [pc, #52]	; (800ee94 <prvInitialiseTaskLists+0x64>)
 800ee5e:	f7fe faeb 	bl	800d438 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ee62:	480d      	ldr	r0, [pc, #52]	; (800ee98 <prvInitialiseTaskLists+0x68>)
 800ee64:	f7fe fae8 	bl	800d438 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ee68:	480c      	ldr	r0, [pc, #48]	; (800ee9c <prvInitialiseTaskLists+0x6c>)
 800ee6a:	f7fe fae5 	bl	800d438 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ee6e:	480c      	ldr	r0, [pc, #48]	; (800eea0 <prvInitialiseTaskLists+0x70>)
 800ee70:	f7fe fae2 	bl	800d438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ee74:	480b      	ldr	r0, [pc, #44]	; (800eea4 <prvInitialiseTaskLists+0x74>)
 800ee76:	f7fe fadf 	bl	800d438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ee7a:	4b0b      	ldr	r3, [pc, #44]	; (800eea8 <prvInitialiseTaskLists+0x78>)
 800ee7c:	4a05      	ldr	r2, [pc, #20]	; (800ee94 <prvInitialiseTaskLists+0x64>)
 800ee7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ee80:	4b0a      	ldr	r3, [pc, #40]	; (800eeac <prvInitialiseTaskLists+0x7c>)
 800ee82:	4a05      	ldr	r2, [pc, #20]	; (800ee98 <prvInitialiseTaskLists+0x68>)
 800ee84:	601a      	str	r2, [r3, #0]
}
 800ee86:	bf00      	nop
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	20002f30 	.word	0x20002f30
 800ee94:	20003390 	.word	0x20003390
 800ee98:	200033a4 	.word	0x200033a4
 800ee9c:	200033c0 	.word	0x200033c0
 800eea0:	200033d4 	.word	0x200033d4
 800eea4:	200033ec 	.word	0x200033ec
 800eea8:	200033b8 	.word	0x200033b8
 800eeac:	200033bc 	.word	0x200033bc

0800eeb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eeb6:	e019      	b.n	800eeec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eeb8:	f000 ffec 	bl	800fe94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eebc:	4b10      	ldr	r3, [pc, #64]	; (800ef00 <prvCheckTasksWaitingTermination+0x50>)
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	3304      	adds	r3, #4
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fe fb3f 	bl	800d54c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eece:	4b0d      	ldr	r3, [pc, #52]	; (800ef04 <prvCheckTasksWaitingTermination+0x54>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	3b01      	subs	r3, #1
 800eed4:	4a0b      	ldr	r2, [pc, #44]	; (800ef04 <prvCheckTasksWaitingTermination+0x54>)
 800eed6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eed8:	4b0b      	ldr	r3, [pc, #44]	; (800ef08 <prvCheckTasksWaitingTermination+0x58>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	3b01      	subs	r3, #1
 800eede:	4a0a      	ldr	r2, [pc, #40]	; (800ef08 <prvCheckTasksWaitingTermination+0x58>)
 800eee0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eee2:	f001 f807 	bl	800fef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 f8e4 	bl	800f0b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eeec:	4b06      	ldr	r3, [pc, #24]	; (800ef08 <prvCheckTasksWaitingTermination+0x58>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d1e1      	bne.n	800eeb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eef4:	bf00      	nop
 800eef6:	bf00      	nop
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	200033d4 	.word	0x200033d4
 800ef04:	20003400 	.word	0x20003400
 800ef08:	200033e8 	.word	0x200033e8

0800ef0c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b086      	sub	sp, #24
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	607a      	str	r2, [r7, #4]
 800ef18:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d102      	bne.n	800ef26 <vTaskGetInfo+0x1a>
 800ef20:	4b2c      	ldr	r3, [pc, #176]	; (800efd4 <vTaskGetInfo+0xc8>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	e000      	b.n	800ef28 <vTaskGetInfo+0x1c>
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	697a      	ldr	r2, [r7, #20]
 800ef2e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800ef62:	78fb      	ldrb	r3, [r7, #3]
 800ef64:	2b05      	cmp	r3, #5
 800ef66:	d01a      	beq.n	800ef9e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800ef68:	4b1a      	ldr	r3, [pc, #104]	; (800efd4 <vTaskGetInfo+0xc8>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	697a      	ldr	r2, [r7, #20]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d103      	bne.n	800ef7a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	2200      	movs	r2, #0
 800ef76:	731a      	strb	r2, [r3, #12]
 800ef78:	e018      	b.n	800efac <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	78fa      	ldrb	r2, [r7, #3]
 800ef7e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800ef80:	78fb      	ldrb	r3, [r7, #3]
 800ef82:	2b03      	cmp	r3, #3
 800ef84:	d112      	bne.n	800efac <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800ef86:	f7ff fb7b 	bl	800e680 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d002      	beq.n	800ef98 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	2202      	movs	r2, #2
 800ef96:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800ef98:	f7ff fb80 	bl	800e69c <xTaskResumeAll>
 800ef9c:	e006      	b.n	800efac <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800ef9e:	6978      	ldr	r0, [r7, #20]
 800efa0:	f7ff fa94 	bl	800e4cc <eTaskGetState>
 800efa4:	4603      	mov	r3, r0
 800efa6:	461a      	mov	r2, r3
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d009      	beq.n	800efc6 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efb6:	4618      	mov	r0, r3
 800efb8:	f000 f860 	bl	800f07c <prvTaskCheckFreeStackSpace>
 800efbc:	4603      	mov	r3, r0
 800efbe:	461a      	mov	r2, r3
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800efc4:	e002      	b.n	800efcc <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	2200      	movs	r2, #0
 800efca:	841a      	strh	r2, [r3, #32]
	}
 800efcc:	bf00      	nop
 800efce:	3718      	adds	r7, #24
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	20002f2c 	.word	0x20002f2c

0800efd8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b08a      	sub	sp, #40	; 0x28
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	4613      	mov	r3, r2
 800efe4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800efe6:	2300      	movs	r3, #0
 800efe8:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d03f      	beq.n	800f072 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	623b      	str	r3, [r7, #32]
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	685a      	ldr	r2, [r3, #4]
 800effc:	6a3b      	ldr	r3, [r7, #32]
 800effe:	605a      	str	r2, [r3, #4]
 800f000:	6a3b      	ldr	r3, [r7, #32]
 800f002:	685a      	ldr	r2, [r3, #4]
 800f004:	6a3b      	ldr	r3, [r7, #32]
 800f006:	3308      	adds	r3, #8
 800f008:	429a      	cmp	r2, r3
 800f00a:	d104      	bne.n	800f016 <prvListTasksWithinSingleList+0x3e>
 800f00c:	6a3b      	ldr	r3, [r7, #32]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	6a3b      	ldr	r3, [r7, #32]
 800f014:	605a      	str	r2, [r3, #4]
 800f016:	6a3b      	ldr	r3, [r7, #32]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	61bb      	str	r3, [r7, #24]
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	685a      	ldr	r2, [r3, #4]
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	605a      	str	r2, [r3, #4]
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	685a      	ldr	r2, [r3, #4]
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	3308      	adds	r3, #8
 800f034:	429a      	cmp	r2, r3
 800f036:	d104      	bne.n	800f042 <prvListTasksWithinSingleList+0x6a>
 800f038:	69bb      	ldr	r3, [r7, #24]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	685a      	ldr	r2, [r3, #4]
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	605a      	str	r2, [r3, #4]
 800f042:	69bb      	ldr	r3, [r7, #24]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800f04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f04c:	4613      	mov	r3, r2
 800f04e:	00db      	lsls	r3, r3, #3
 800f050:	4413      	add	r3, r2
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	461a      	mov	r2, r3
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	1899      	adds	r1, r3, r2
 800f05a:	79fb      	ldrb	r3, [r7, #7]
 800f05c:	2201      	movs	r2, #1
 800f05e:	6978      	ldr	r0, [r7, #20]
 800f060:	f7ff ff54 	bl	800ef0c <vTaskGetInfo>
				uxTask++;
 800f064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f066:	3301      	adds	r3, #1
 800f068:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800f06a:	697a      	ldr	r2, [r7, #20]
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d1d5      	bne.n	800f01e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800f072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f074:	4618      	mov	r0, r3
 800f076:	3728      	adds	r7, #40	; 0x28
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800f07c:	b480      	push	{r7}
 800f07e:	b085      	sub	sp, #20
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800f084:	2300      	movs	r3, #0
 800f086:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f088:	e005      	b.n	800f096 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	3301      	adds	r3, #1
 800f08e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	3301      	adds	r3, #1
 800f094:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	2ba5      	cmp	r3, #165	; 0xa5
 800f09c:	d0f5      	beq.n	800f08a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	089b      	lsrs	r3, r3, #2
 800f0a2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	b29b      	uxth	r3, r3
	}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3714      	adds	r7, #20
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr

0800f0b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	3358      	adds	r3, #88	; 0x58
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f002 fd4d 	bl	8011b60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d108      	bne.n	800f0e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f001 f8cb 	bl	8010270 <vPortFree>
				vPortFree( pxTCB );
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f001 f8c8 	bl	8010270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f0e0:	e018      	b.n	800f114 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d103      	bne.n	800f0f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f001 f8bf 	bl	8010270 <vPortFree>
	}
 800f0f2:	e00f      	b.n	800f114 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800f0fa:	2b02      	cmp	r3, #2
 800f0fc:	d00a      	beq.n	800f114 <prvDeleteTCB+0x60>
	__asm volatile
 800f0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f102:	f383 8811 	msr	BASEPRI, r3
 800f106:	f3bf 8f6f 	isb	sy
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	60fb      	str	r3, [r7, #12]
}
 800f110:	bf00      	nop
 800f112:	e7fe      	b.n	800f112 <prvDeleteTCB+0x5e>
	}
 800f114:	bf00      	nop
 800f116:	3710      	adds	r7, #16
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}

0800f11c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f122:	4b0c      	ldr	r3, [pc, #48]	; (800f154 <prvResetNextTaskUnblockTime+0x38>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d104      	bne.n	800f136 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f12c:	4b0a      	ldr	r3, [pc, #40]	; (800f158 <prvResetNextTaskUnblockTime+0x3c>)
 800f12e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f132:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f134:	e008      	b.n	800f148 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f136:	4b07      	ldr	r3, [pc, #28]	; (800f154 <prvResetNextTaskUnblockTime+0x38>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	4a04      	ldr	r2, [pc, #16]	; (800f158 <prvResetNextTaskUnblockTime+0x3c>)
 800f146:	6013      	str	r3, [r2, #0]
}
 800f148:	bf00      	nop
 800f14a:	370c      	adds	r7, #12
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr
 800f154:	200033b8 	.word	0x200033b8
 800f158:	20003420 	.word	0x20003420

0800f15c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f15c:	b480      	push	{r7}
 800f15e:	b083      	sub	sp, #12
 800f160:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f162:	4b0b      	ldr	r3, [pc, #44]	; (800f190 <xTaskGetSchedulerState+0x34>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d102      	bne.n	800f170 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f16a:	2301      	movs	r3, #1
 800f16c:	607b      	str	r3, [r7, #4]
 800f16e:	e008      	b.n	800f182 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f170:	4b08      	ldr	r3, [pc, #32]	; (800f194 <xTaskGetSchedulerState+0x38>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d102      	bne.n	800f17e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f178:	2302      	movs	r3, #2
 800f17a:	607b      	str	r3, [r7, #4]
 800f17c:	e001      	b.n	800f182 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f17e:	2300      	movs	r3, #0
 800f180:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f182:	687b      	ldr	r3, [r7, #4]
	}
 800f184:	4618      	mov	r0, r3
 800f186:	370c      	adds	r7, #12
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr
 800f190:	2000340c 	.word	0x2000340c
 800f194:	20003428 	.word	0x20003428

0800f198 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d056      	beq.n	800f25c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f1ae:	4b2e      	ldr	r3, [pc, #184]	; (800f268 <xTaskPriorityDisinherit+0xd0>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	693a      	ldr	r2, [r7, #16]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d00a      	beq.n	800f1ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1bc:	f383 8811 	msr	BASEPRI, r3
 800f1c0:	f3bf 8f6f 	isb	sy
 800f1c4:	f3bf 8f4f 	dsb	sy
 800f1c8:	60fb      	str	r3, [r7, #12]
}
 800f1ca:	bf00      	nop
 800f1cc:	e7fe      	b.n	800f1cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d10a      	bne.n	800f1ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1da:	f383 8811 	msr	BASEPRI, r3
 800f1de:	f3bf 8f6f 	isb	sy
 800f1e2:	f3bf 8f4f 	dsb	sy
 800f1e6:	60bb      	str	r3, [r7, #8]
}
 800f1e8:	bf00      	nop
 800f1ea:	e7fe      	b.n	800f1ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1f0:	1e5a      	subs	r2, r3, #1
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d02c      	beq.n	800f25c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f206:	2b00      	cmp	r3, #0
 800f208:	d128      	bne.n	800f25c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	3304      	adds	r3, #4
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fe f99c 	bl	800d54c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f220:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f22c:	4b0f      	ldr	r3, [pc, #60]	; (800f26c <xTaskPriorityDisinherit+0xd4>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	429a      	cmp	r2, r3
 800f232:	d903      	bls.n	800f23c <xTaskPriorityDisinherit+0xa4>
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f238:	4a0c      	ldr	r2, [pc, #48]	; (800f26c <xTaskPriorityDisinherit+0xd4>)
 800f23a:	6013      	str	r3, [r2, #0]
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f240:	4613      	mov	r3, r2
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	4413      	add	r3, r2
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	4a09      	ldr	r2, [pc, #36]	; (800f270 <xTaskPriorityDisinherit+0xd8>)
 800f24a:	441a      	add	r2, r3
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	3304      	adds	r3, #4
 800f250:	4619      	mov	r1, r3
 800f252:	4610      	mov	r0, r2
 800f254:	f7fe f91d 	bl	800d492 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f258:	2301      	movs	r3, #1
 800f25a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f25c:	697b      	ldr	r3, [r7, #20]
	}
 800f25e:	4618      	mov	r0, r3
 800f260:	3718      	adds	r7, #24
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	20002f2c 	.word	0x20002f2c
 800f26c:	20003408 	.word	0x20003408
 800f270:	20002f30 	.word	0x20002f30

0800f274 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f274:	b580      	push	{r7, lr}
 800f276:	b084      	sub	sp, #16
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f27e:	6839      	ldr	r1, [r7, #0]
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f002 fd4b 	bl	8011d1c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7f0 ffa2 	bl	80001d0 <strlen>
 800f28c:	60f8      	str	r0, [r7, #12]
 800f28e:	e007      	b.n	800f2a0 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800f290:	687a      	ldr	r2, [r7, #4]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	4413      	add	r3, r2
 800f296:	2220      	movs	r2, #32
 800f298:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	3301      	adds	r3, #1
 800f29e:	60fb      	str	r3, [r7, #12]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2b0e      	cmp	r3, #14
 800f2a4:	d9f4      	bls.n	800f290 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	4413      	add	r3, r2
	}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3710      	adds	r7, #16
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
	...

0800f2c0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f2c0:	b590      	push	{r4, r7, lr}
 800f2c2:	b089      	sub	sp, #36	; 0x24
 800f2c4:	af02      	add	r7, sp, #8
 800f2c6:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f2ce:	4b45      	ldr	r3, [pc, #276]	; (800f3e4 <vTaskList+0x124>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800f2d4:	4b43      	ldr	r3, [pc, #268]	; (800f3e4 <vTaskList+0x124>)
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	4613      	mov	r3, r2
 800f2da:	00db      	lsls	r3, r3, #3
 800f2dc:	4413      	add	r3, r2
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f000 fef9 	bl	80100d8 <pvPortMalloc>
 800f2e6:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d076      	beq.n	800f3dc <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	68f9      	ldr	r1, [r7, #12]
 800f2f2:	68b8      	ldr	r0, [r7, #8]
 800f2f4:	f7ff fa80 	bl	800e7f8 <uxTaskGetSystemState>
 800f2f8:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	617b      	str	r3, [r7, #20]
 800f2fe:	e066      	b.n	800f3ce <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f300:	697a      	ldr	r2, [r7, #20]
 800f302:	4613      	mov	r3, r2
 800f304:	00db      	lsls	r3, r3, #3
 800f306:	4413      	add	r3, r2
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	461a      	mov	r2, r3
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	4413      	add	r3, r2
 800f310:	7b1b      	ldrb	r3, [r3, #12]
 800f312:	2b04      	cmp	r3, #4
 800f314:	d81b      	bhi.n	800f34e <vTaskList+0x8e>
 800f316:	a201      	add	r2, pc, #4	; (adr r2, 800f31c <vTaskList+0x5c>)
 800f318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f31c:	0800f331 	.word	0x0800f331
 800f320:	0800f337 	.word	0x0800f337
 800f324:	0800f33d 	.word	0x0800f33d
 800f328:	0800f343 	.word	0x0800f343
 800f32c:	0800f349 	.word	0x0800f349
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800f330:	2358      	movs	r3, #88	; 0x58
 800f332:	74fb      	strb	r3, [r7, #19]
										break;
 800f334:	e00e      	b.n	800f354 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800f336:	2352      	movs	r3, #82	; 0x52
 800f338:	74fb      	strb	r3, [r7, #19]
										break;
 800f33a:	e00b      	b.n	800f354 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800f33c:	2342      	movs	r3, #66	; 0x42
 800f33e:	74fb      	strb	r3, [r7, #19]
										break;
 800f340:	e008      	b.n	800f354 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f342:	2353      	movs	r3, #83	; 0x53
 800f344:	74fb      	strb	r3, [r7, #19]
										break;
 800f346:	e005      	b.n	800f354 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f348:	2344      	movs	r3, #68	; 0x44
 800f34a:	74fb      	strb	r3, [r7, #19]
										break;
 800f34c:	e002      	b.n	800f354 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800f34e:	2300      	movs	r3, #0
 800f350:	74fb      	strb	r3, [r7, #19]
										break;
 800f352:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	4613      	mov	r3, r2
 800f358:	00db      	lsls	r3, r3, #3
 800f35a:	4413      	add	r3, r2
 800f35c:	009b      	lsls	r3, r3, #2
 800f35e:	461a      	mov	r2, r3
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	4413      	add	r3, r2
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	4619      	mov	r1, r3
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7ff ff83 	bl	800f274 <prvWriteNameToBuffer>
 800f36e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800f370:	7cf9      	ldrb	r1, [r7, #19]
 800f372:	697a      	ldr	r2, [r7, #20]
 800f374:	4613      	mov	r3, r2
 800f376:	00db      	lsls	r3, r3, #3
 800f378:	4413      	add	r3, r2
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	461a      	mov	r2, r3
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	4413      	add	r3, r2
 800f382:	6918      	ldr	r0, [r3, #16]
 800f384:	697a      	ldr	r2, [r7, #20]
 800f386:	4613      	mov	r3, r2
 800f388:	00db      	lsls	r3, r3, #3
 800f38a:	4413      	add	r3, r2
 800f38c:	009b      	lsls	r3, r3, #2
 800f38e:	461a      	mov	r2, r3
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	4413      	add	r3, r2
 800f394:	8c1b      	ldrh	r3, [r3, #32]
 800f396:	461c      	mov	r4, r3
 800f398:	697a      	ldr	r2, [r7, #20]
 800f39a:	4613      	mov	r3, r2
 800f39c:	00db      	lsls	r3, r3, #3
 800f39e:	4413      	add	r3, r2
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	4413      	add	r3, r2
 800f3a8:	689b      	ldr	r3, [r3, #8]
 800f3aa:	9301      	str	r3, [sp, #4]
 800f3ac:	9400      	str	r4, [sp, #0]
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	460a      	mov	r2, r1
 800f3b2:	490d      	ldr	r1, [pc, #52]	; (800f3e8 <vTaskList+0x128>)
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f002 fc3f 	bl	8011c38 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7f0 ff08 	bl	80001d0 <strlen>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4413      	add	r3, r2
 800f3c6:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	617b      	str	r3, [r7, #20]
 800f3ce:	697a      	ldr	r2, [r7, #20]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d394      	bcc.n	800f300 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800f3d6:	68b8      	ldr	r0, [r7, #8]
 800f3d8:	f000 ff4a 	bl	8010270 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f3dc:	bf00      	nop
 800f3de:	371c      	adds	r7, #28
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd90      	pop	{r4, r7, pc}
 800f3e4:	20003400 	.word	0x20003400
 800f3e8:	08014030 	.word	0x08014030

0800f3ec <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b088      	sub	sp, #32
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f3fa:	4b3a      	ldr	r3, [pc, #232]	; (800f4e4 <vTaskGetRunTimeStats+0xf8>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800f400:	4b38      	ldr	r3, [pc, #224]	; (800f4e4 <vTaskGetRunTimeStats+0xf8>)
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	4613      	mov	r3, r2
 800f406:	00db      	lsls	r3, r3, #3
 800f408:	4413      	add	r3, r2
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4618      	mov	r0, r3
 800f40e:	f000 fe63 	bl	80100d8 <pvPortMalloc>
 800f412:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d05f      	beq.n	800f4da <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f41a:	f107 030c 	add.w	r3, r7, #12
 800f41e:	461a      	mov	r2, r3
 800f420:	69b9      	ldr	r1, [r7, #24]
 800f422:	6978      	ldr	r0, [r7, #20]
 800f424:	f7ff f9e8 	bl	800e7f8 <uxTaskGetSystemState>
 800f428:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	4a2e      	ldr	r2, [pc, #184]	; (800f4e8 <vTaskGetRunTimeStats+0xfc>)
 800f42e:	fba2 2303 	umull	r2, r3, r2, r3
 800f432:	095b      	lsrs	r3, r3, #5
 800f434:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d04b      	beq.n	800f4d4 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f43c:	2300      	movs	r3, #0
 800f43e:	61fb      	str	r3, [r7, #28]
 800f440:	e044      	b.n	800f4cc <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f442:	69fa      	ldr	r2, [r7, #28]
 800f444:	4613      	mov	r3, r2
 800f446:	00db      	lsls	r3, r3, #3
 800f448:	4413      	add	r3, r2
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	461a      	mov	r2, r3
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	4413      	add	r3, r2
 800f452:	699a      	ldr	r2, [r3, #24]
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	fbb2 f3f3 	udiv	r3, r2, r3
 800f45a:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f45c:	69fa      	ldr	r2, [r7, #28]
 800f45e:	4613      	mov	r3, r2
 800f460:	00db      	lsls	r3, r3, #3
 800f462:	4413      	add	r3, r2
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	461a      	mov	r2, r3
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	4413      	add	r3, r2
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	4619      	mov	r1, r3
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7ff feff 	bl	800f274 <prvWriteNameToBuffer>
 800f476:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00e      	beq.n	800f49c <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800f47e:	69fa      	ldr	r2, [r7, #28]
 800f480:	4613      	mov	r3, r2
 800f482:	00db      	lsls	r3, r3, #3
 800f484:	4413      	add	r3, r2
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	461a      	mov	r2, r3
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	4413      	add	r3, r2
 800f48e:	699a      	ldr	r2, [r3, #24]
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	4916      	ldr	r1, [pc, #88]	; (800f4ec <vTaskGetRunTimeStats+0x100>)
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f002 fbcf 	bl	8011c38 <siprintf>
 800f49a:	e00d      	b.n	800f4b8 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800f49c:	69fa      	ldr	r2, [r7, #28]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	00db      	lsls	r3, r3, #3
 800f4a2:	4413      	add	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	699b      	ldr	r3, [r3, #24]
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	490f      	ldr	r1, [pc, #60]	; (800f4f0 <vTaskGetRunTimeStats+0x104>)
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f002 fbc0 	bl	8011c38 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7f0 fe89 	bl	80001d0 <strlen>
 800f4be:	4602      	mov	r2, r0
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	61fb      	str	r3, [r7, #28]
 800f4cc:	69fa      	ldr	r2, [r7, #28]
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d3b6      	bcc.n	800f442 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800f4d4:	6978      	ldr	r0, [r7, #20]
 800f4d6:	f000 fecb 	bl	8010270 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f4da:	bf00      	nop
 800f4dc:	3720      	adds	r7, #32
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20003400 	.word	0x20003400
 800f4e8:	51eb851f 	.word	0x51eb851f
 800f4ec:	08014040 	.word	0x08014040
 800f4f0:	0801404c 	.word	0x0801404c

0800f4f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f4fe:	4b21      	ldr	r3, [pc, #132]	; (800f584 <prvAddCurrentTaskToDelayedList+0x90>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f504:	4b20      	ldr	r3, [pc, #128]	; (800f588 <prvAddCurrentTaskToDelayedList+0x94>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	3304      	adds	r3, #4
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7fe f81e 	bl	800d54c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f516:	d10a      	bne.n	800f52e <prvAddCurrentTaskToDelayedList+0x3a>
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d007      	beq.n	800f52e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f51e:	4b1a      	ldr	r3, [pc, #104]	; (800f588 <prvAddCurrentTaskToDelayedList+0x94>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3304      	adds	r3, #4
 800f524:	4619      	mov	r1, r3
 800f526:	4819      	ldr	r0, [pc, #100]	; (800f58c <prvAddCurrentTaskToDelayedList+0x98>)
 800f528:	f7fd ffb3 	bl	800d492 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f52c:	e026      	b.n	800f57c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f52e:	68fa      	ldr	r2, [r7, #12]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4413      	add	r3, r2
 800f534:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f536:	4b14      	ldr	r3, [pc, #80]	; (800f588 <prvAddCurrentTaskToDelayedList+0x94>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	68ba      	ldr	r2, [r7, #8]
 800f53c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f53e:	68ba      	ldr	r2, [r7, #8]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	429a      	cmp	r2, r3
 800f544:	d209      	bcs.n	800f55a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f546:	4b12      	ldr	r3, [pc, #72]	; (800f590 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	4b0f      	ldr	r3, [pc, #60]	; (800f588 <prvAddCurrentTaskToDelayedList+0x94>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	3304      	adds	r3, #4
 800f550:	4619      	mov	r1, r3
 800f552:	4610      	mov	r0, r2
 800f554:	f7fd ffc1 	bl	800d4da <vListInsert>
}
 800f558:	e010      	b.n	800f57c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f55a:	4b0e      	ldr	r3, [pc, #56]	; (800f594 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	4b0a      	ldr	r3, [pc, #40]	; (800f588 <prvAddCurrentTaskToDelayedList+0x94>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	3304      	adds	r3, #4
 800f564:	4619      	mov	r1, r3
 800f566:	4610      	mov	r0, r2
 800f568:	f7fd ffb7 	bl	800d4da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f56c:	4b0a      	ldr	r3, [pc, #40]	; (800f598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	68ba      	ldr	r2, [r7, #8]
 800f572:	429a      	cmp	r2, r3
 800f574:	d202      	bcs.n	800f57c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f576:	4a08      	ldr	r2, [pc, #32]	; (800f598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	6013      	str	r3, [r2, #0]
}
 800f57c:	bf00      	nop
 800f57e:	3710      	adds	r7, #16
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	20003404 	.word	0x20003404
 800f588:	20002f2c 	.word	0x20002f2c
 800f58c:	200033ec 	.word	0x200033ec
 800f590:	200033bc 	.word	0x200033bc
 800f594:	200033b8 	.word	0x200033b8
 800f598:	20003420 	.word	0x20003420

0800f59c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b08a      	sub	sp, #40	; 0x28
 800f5a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f5a6:	f000 fb07 	bl	800fbb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f5aa:	4b1c      	ldr	r3, [pc, #112]	; (800f61c <xTimerCreateTimerTask+0x80>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d021      	beq.n	800f5f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f5ba:	1d3a      	adds	r2, r7, #4
 800f5bc:	f107 0108 	add.w	r1, r7, #8
 800f5c0:	f107 030c 	add.w	r3, r7, #12
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7fd ff1d 	bl	800d404 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f5ca:	6879      	ldr	r1, [r7, #4]
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	68fa      	ldr	r2, [r7, #12]
 800f5d0:	9202      	str	r2, [sp, #8]
 800f5d2:	9301      	str	r3, [sp, #4]
 800f5d4:	2302      	movs	r3, #2
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	2300      	movs	r3, #0
 800f5da:	460a      	mov	r2, r1
 800f5dc:	4910      	ldr	r1, [pc, #64]	; (800f620 <xTimerCreateTimerTask+0x84>)
 800f5de:	4811      	ldr	r0, [pc, #68]	; (800f624 <xTimerCreateTimerTask+0x88>)
 800f5e0:	f7fe fd84 	bl	800e0ec <xTaskCreateStatic>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	4a10      	ldr	r2, [pc, #64]	; (800f628 <xTimerCreateTimerTask+0x8c>)
 800f5e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f5ea:	4b0f      	ldr	r3, [pc, #60]	; (800f628 <xTimerCreateTimerTask+0x8c>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d001      	beq.n	800f5f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d10a      	bne.n	800f612 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f600:	f383 8811 	msr	BASEPRI, r3
 800f604:	f3bf 8f6f 	isb	sy
 800f608:	f3bf 8f4f 	dsb	sy
 800f60c:	613b      	str	r3, [r7, #16]
}
 800f60e:	bf00      	nop
 800f610:	e7fe      	b.n	800f610 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f612:	697b      	ldr	r3, [r7, #20]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3718      	adds	r7, #24
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	20003464 	.word	0x20003464
 800f620:	08014058 	.word	0x08014058
 800f624:	0800f761 	.word	0x0800f761
 800f628:	20003468 	.word	0x20003468

0800f62c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b08a      	sub	sp, #40	; 0x28
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	607a      	str	r2, [r7, #4]
 800f638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f63a:	2300      	movs	r3, #0
 800f63c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d10a      	bne.n	800f65a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f648:	f383 8811 	msr	BASEPRI, r3
 800f64c:	f3bf 8f6f 	isb	sy
 800f650:	f3bf 8f4f 	dsb	sy
 800f654:	623b      	str	r3, [r7, #32]
}
 800f656:	bf00      	nop
 800f658:	e7fe      	b.n	800f658 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f65a:	4b1a      	ldr	r3, [pc, #104]	; (800f6c4 <xTimerGenericCommand+0x98>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d02a      	beq.n	800f6b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2b05      	cmp	r3, #5
 800f672:	dc18      	bgt.n	800f6a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f674:	f7ff fd72 	bl	800f15c <xTaskGetSchedulerState>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b02      	cmp	r3, #2
 800f67c:	d109      	bne.n	800f692 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f67e:	4b11      	ldr	r3, [pc, #68]	; (800f6c4 <xTimerGenericCommand+0x98>)
 800f680:	6818      	ldr	r0, [r3, #0]
 800f682:	f107 0110 	add.w	r1, r7, #16
 800f686:	2300      	movs	r3, #0
 800f688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f68a:	f7fe f8c7 	bl	800d81c <xQueueGenericSend>
 800f68e:	6278      	str	r0, [r7, #36]	; 0x24
 800f690:	e012      	b.n	800f6b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f692:	4b0c      	ldr	r3, [pc, #48]	; (800f6c4 <xTimerGenericCommand+0x98>)
 800f694:	6818      	ldr	r0, [r3, #0]
 800f696:	f107 0110 	add.w	r1, r7, #16
 800f69a:	2300      	movs	r3, #0
 800f69c:	2200      	movs	r2, #0
 800f69e:	f7fe f8bd 	bl	800d81c <xQueueGenericSend>
 800f6a2:	6278      	str	r0, [r7, #36]	; 0x24
 800f6a4:	e008      	b.n	800f6b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f6a6:	4b07      	ldr	r3, [pc, #28]	; (800f6c4 <xTimerGenericCommand+0x98>)
 800f6a8:	6818      	ldr	r0, [r3, #0]
 800f6aa:	f107 0110 	add.w	r1, r7, #16
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	683a      	ldr	r2, [r7, #0]
 800f6b2:	f7fe f9b1 	bl	800da18 <xQueueGenericSendFromISR>
 800f6b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3728      	adds	r7, #40	; 0x28
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	20003464 	.word	0x20003464

0800f6c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b088      	sub	sp, #32
 800f6cc:	af02      	add	r7, sp, #8
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6d2:	4b22      	ldr	r3, [pc, #136]	; (800f75c <prvProcessExpiredTimer+0x94>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	3304      	adds	r3, #4
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fd ff33 	bl	800d54c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6ec:	f003 0304 	and.w	r3, r3, #4
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d022      	beq.n	800f73a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	699a      	ldr	r2, [r3, #24]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	18d1      	adds	r1, r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	683a      	ldr	r2, [r7, #0]
 800f700:	6978      	ldr	r0, [r7, #20]
 800f702:	f000 f8d1 	bl	800f8a8 <prvInsertTimerInActiveList>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d01f      	beq.n	800f74c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f70c:	2300      	movs	r3, #0
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	2300      	movs	r3, #0
 800f712:	687a      	ldr	r2, [r7, #4]
 800f714:	2100      	movs	r1, #0
 800f716:	6978      	ldr	r0, [r7, #20]
 800f718:	f7ff ff88 	bl	800f62c <xTimerGenericCommand>
 800f71c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d113      	bne.n	800f74c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f728:	f383 8811 	msr	BASEPRI, r3
 800f72c:	f3bf 8f6f 	isb	sy
 800f730:	f3bf 8f4f 	dsb	sy
 800f734:	60fb      	str	r3, [r7, #12]
}
 800f736:	bf00      	nop
 800f738:	e7fe      	b.n	800f738 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f740:	f023 0301 	bic.w	r3, r3, #1
 800f744:	b2da      	uxtb	r2, r3
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	6a1b      	ldr	r3, [r3, #32]
 800f750:	6978      	ldr	r0, [r7, #20]
 800f752:	4798      	blx	r3
}
 800f754:	bf00      	nop
 800f756:	3718      	adds	r7, #24
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	2000345c 	.word	0x2000345c

0800f760 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f768:	f107 0308 	add.w	r3, r7, #8
 800f76c:	4618      	mov	r0, r3
 800f76e:	f000 f857 	bl	800f820 <prvGetNextExpireTime>
 800f772:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	4619      	mov	r1, r3
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f000 f803 	bl	800f784 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f77e:	f000 f8d5 	bl	800f92c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f782:	e7f1      	b.n	800f768 <prvTimerTask+0x8>

0800f784 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f78e:	f7fe ff77 	bl	800e680 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f792:	f107 0308 	add.w	r3, r7, #8
 800f796:	4618      	mov	r0, r3
 800f798:	f000 f866 	bl	800f868 <prvSampleTimeNow>
 800f79c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d130      	bne.n	800f806 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d10a      	bne.n	800f7c0 <prvProcessTimerOrBlockTask+0x3c>
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d806      	bhi.n	800f7c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f7b2:	f7fe ff73 	bl	800e69c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f7b6:	68f9      	ldr	r1, [r7, #12]
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7ff ff85 	bl	800f6c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f7be:	e024      	b.n	800f80a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d008      	beq.n	800f7d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f7c6:	4b13      	ldr	r3, [pc, #76]	; (800f814 <prvProcessTimerOrBlockTask+0x90>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d101      	bne.n	800f7d4 <prvProcessTimerOrBlockTask+0x50>
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	e000      	b.n	800f7d6 <prvProcessTimerOrBlockTask+0x52>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f7d8:	4b0f      	ldr	r3, [pc, #60]	; (800f818 <prvProcessTimerOrBlockTask+0x94>)
 800f7da:	6818      	ldr	r0, [r3, #0]
 800f7dc:	687a      	ldr	r2, [r7, #4]
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	1ad3      	subs	r3, r2, r3
 800f7e2:	683a      	ldr	r2, [r7, #0]
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	f7fe fc4d 	bl	800e084 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f7ea:	f7fe ff57 	bl	800e69c <xTaskResumeAll>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d10a      	bne.n	800f80a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f7f4:	4b09      	ldr	r3, [pc, #36]	; (800f81c <prvProcessTimerOrBlockTask+0x98>)
 800f7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7fa:	601a      	str	r2, [r3, #0]
 800f7fc:	f3bf 8f4f 	dsb	sy
 800f800:	f3bf 8f6f 	isb	sy
}
 800f804:	e001      	b.n	800f80a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f806:	f7fe ff49 	bl	800e69c <xTaskResumeAll>
}
 800f80a:	bf00      	nop
 800f80c:	3710      	adds	r7, #16
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
 800f812:	bf00      	nop
 800f814:	20003460 	.word	0x20003460
 800f818:	20003464 	.word	0x20003464
 800f81c:	e000ed04 	.word	0xe000ed04

0800f820 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f820:	b480      	push	{r7}
 800f822:	b085      	sub	sp, #20
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f828:	4b0e      	ldr	r3, [pc, #56]	; (800f864 <prvGetNextExpireTime+0x44>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d101      	bne.n	800f836 <prvGetNextExpireTime+0x16>
 800f832:	2201      	movs	r2, #1
 800f834:	e000      	b.n	800f838 <prvGetNextExpireTime+0x18>
 800f836:	2200      	movs	r2, #0
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d105      	bne.n	800f850 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f844:	4b07      	ldr	r3, [pc, #28]	; (800f864 <prvGetNextExpireTime+0x44>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	60fb      	str	r3, [r7, #12]
 800f84e:	e001      	b.n	800f854 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f850:	2300      	movs	r3, #0
 800f852:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f854:	68fb      	ldr	r3, [r7, #12]
}
 800f856:	4618      	mov	r0, r3
 800f858:	3714      	adds	r7, #20
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	2000345c 	.word	0x2000345c

0800f868 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f870:	f7fe ffb2 	bl	800e7d8 <xTaskGetTickCount>
 800f874:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f876:	4b0b      	ldr	r3, [pc, #44]	; (800f8a4 <prvSampleTimeNow+0x3c>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	68fa      	ldr	r2, [r7, #12]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d205      	bcs.n	800f88c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f880:	f000 f936 	bl	800faf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	601a      	str	r2, [r3, #0]
 800f88a:	e002      	b.n	800f892 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2200      	movs	r2, #0
 800f890:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f892:	4a04      	ldr	r2, [pc, #16]	; (800f8a4 <prvSampleTimeNow+0x3c>)
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f898:	68fb      	ldr	r3, [r7, #12]
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3710      	adds	r7, #16
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	bf00      	nop
 800f8a4:	2000346c 	.word	0x2000346c

0800f8a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b086      	sub	sp, #24
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	60f8      	str	r0, [r7, #12]
 800f8b0:	60b9      	str	r1, [r7, #8]
 800f8b2:	607a      	str	r2, [r7, #4]
 800f8b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	68ba      	ldr	r2, [r7, #8]
 800f8be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f8c6:	68ba      	ldr	r2, [r7, #8]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d812      	bhi.n	800f8f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	1ad2      	subs	r2, r2, r3
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	699b      	ldr	r3, [r3, #24]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d302      	bcc.n	800f8e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	617b      	str	r3, [r7, #20]
 800f8e0:	e01b      	b.n	800f91a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f8e2:	4b10      	ldr	r3, [pc, #64]	; (800f924 <prvInsertTimerInActiveList+0x7c>)
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	4610      	mov	r0, r2
 800f8ee:	f7fd fdf4 	bl	800d4da <vListInsert>
 800f8f2:	e012      	b.n	800f91a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d206      	bcs.n	800f90a <prvInsertTimerInActiveList+0x62>
 800f8fc:	68ba      	ldr	r2, [r7, #8]
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	429a      	cmp	r2, r3
 800f902:	d302      	bcc.n	800f90a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f904:	2301      	movs	r3, #1
 800f906:	617b      	str	r3, [r7, #20]
 800f908:	e007      	b.n	800f91a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f90a:	4b07      	ldr	r3, [pc, #28]	; (800f928 <prvInsertTimerInActiveList+0x80>)
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	3304      	adds	r3, #4
 800f912:	4619      	mov	r1, r3
 800f914:	4610      	mov	r0, r2
 800f916:	f7fd fde0 	bl	800d4da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f91a:	697b      	ldr	r3, [r7, #20]
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3718      	adds	r7, #24
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	20003460 	.word	0x20003460
 800f928:	2000345c 	.word	0x2000345c

0800f92c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b08e      	sub	sp, #56	; 0x38
 800f930:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f932:	e0ca      	b.n	800faca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2b00      	cmp	r3, #0
 800f938:	da18      	bge.n	800f96c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f93a:	1d3b      	adds	r3, r7, #4
 800f93c:	3304      	adds	r3, #4
 800f93e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f942:	2b00      	cmp	r3, #0
 800f944:	d10a      	bne.n	800f95c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94a:	f383 8811 	msr	BASEPRI, r3
 800f94e:	f3bf 8f6f 	isb	sy
 800f952:	f3bf 8f4f 	dsb	sy
 800f956:	61fb      	str	r3, [r7, #28]
}
 800f958:	bf00      	nop
 800f95a:	e7fe      	b.n	800f95a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f962:	6850      	ldr	r0, [r2, #4]
 800f964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f966:	6892      	ldr	r2, [r2, #8]
 800f968:	4611      	mov	r1, r2
 800f96a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	f2c0 80aa 	blt.w	800fac8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97a:	695b      	ldr	r3, [r3, #20]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d004      	beq.n	800f98a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f982:	3304      	adds	r3, #4
 800f984:	4618      	mov	r0, r3
 800f986:	f7fd fde1 	bl	800d54c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f98a:	463b      	mov	r3, r7
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7ff ff6b 	bl	800f868 <prvSampleTimeNow>
 800f992:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2b09      	cmp	r3, #9
 800f998:	f200 8097 	bhi.w	800faca <prvProcessReceivedCommands+0x19e>
 800f99c:	a201      	add	r2, pc, #4	; (adr r2, 800f9a4 <prvProcessReceivedCommands+0x78>)
 800f99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a2:	bf00      	nop
 800f9a4:	0800f9cd 	.word	0x0800f9cd
 800f9a8:	0800f9cd 	.word	0x0800f9cd
 800f9ac:	0800f9cd 	.word	0x0800f9cd
 800f9b0:	0800fa41 	.word	0x0800fa41
 800f9b4:	0800fa55 	.word	0x0800fa55
 800f9b8:	0800fa9f 	.word	0x0800fa9f
 800f9bc:	0800f9cd 	.word	0x0800f9cd
 800f9c0:	0800f9cd 	.word	0x0800f9cd
 800f9c4:	0800fa41 	.word	0x0800fa41
 800f9c8:	0800fa55 	.word	0x0800fa55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9d2:	f043 0301 	orr.w	r3, r3, #1
 800f9d6:	b2da      	uxtb	r2, r3
 800f9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e2:	699b      	ldr	r3, [r3, #24]
 800f9e4:	18d1      	adds	r1, r2, r3
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9ec:	f7ff ff5c 	bl	800f8a8 <prvInsertTimerInActiveList>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d069      	beq.n	800faca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f8:	6a1b      	ldr	r3, [r3, #32]
 800f9fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa04:	f003 0304 	and.w	r3, r3, #4
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d05e      	beq.n	800faca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa10:	699b      	ldr	r3, [r3, #24]
 800fa12:	441a      	add	r2, r3
 800fa14:	2300      	movs	r3, #0
 800fa16:	9300      	str	r3, [sp, #0]
 800fa18:	2300      	movs	r3, #0
 800fa1a:	2100      	movs	r1, #0
 800fa1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa1e:	f7ff fe05 	bl	800f62c <xTimerGenericCommand>
 800fa22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa24:	6a3b      	ldr	r3, [r7, #32]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d14f      	bne.n	800faca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa2e:	f383 8811 	msr	BASEPRI, r3
 800fa32:	f3bf 8f6f 	isb	sy
 800fa36:	f3bf 8f4f 	dsb	sy
 800fa3a:	61bb      	str	r3, [r7, #24]
}
 800fa3c:	bf00      	nop
 800fa3e:	e7fe      	b.n	800fa3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa46:	f023 0301 	bic.w	r3, r3, #1
 800fa4a:	b2da      	uxtb	r2, r3
 800fa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fa52:	e03a      	b.n	800faca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa5a:	f043 0301 	orr.w	r3, r3, #1
 800fa5e:	b2da      	uxtb	r2, r3
 800fa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fa66:	68ba      	ldr	r2, [r7, #8]
 800fa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6e:	699b      	ldr	r3, [r3, #24]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d10a      	bne.n	800fa8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa78:	f383 8811 	msr	BASEPRI, r3
 800fa7c:	f3bf 8f6f 	isb	sy
 800fa80:	f3bf 8f4f 	dsb	sy
 800fa84:	617b      	str	r3, [r7, #20]
}
 800fa86:	bf00      	nop
 800fa88:	e7fe      	b.n	800fa88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa8c:	699a      	ldr	r2, [r3, #24]
 800fa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa90:	18d1      	adds	r1, r2, r3
 800fa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa98:	f7ff ff06 	bl	800f8a8 <prvInsertTimerInActiveList>
					break;
 800fa9c:	e015      	b.n	800faca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faa4:	f003 0302 	and.w	r3, r3, #2
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d103      	bne.n	800fab4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800faac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800faae:	f000 fbdf 	bl	8010270 <vPortFree>
 800fab2:	e00a      	b.n	800faca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faba:	f023 0301 	bic.w	r3, r3, #1
 800fabe:	b2da      	uxtb	r2, r3
 800fac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fac6:	e000      	b.n	800faca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fac8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800faca:	4b08      	ldr	r3, [pc, #32]	; (800faec <prvProcessReceivedCommands+0x1c0>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	1d39      	adds	r1, r7, #4
 800fad0:	2200      	movs	r2, #0
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fe f83c 	bl	800db50 <xQueueReceive>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f47f af2a 	bne.w	800f934 <prvProcessReceivedCommands+0x8>
	}
}
 800fae0:	bf00      	nop
 800fae2:	bf00      	nop
 800fae4:	3730      	adds	r7, #48	; 0x30
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	20003464 	.word	0x20003464

0800faf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b088      	sub	sp, #32
 800faf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800faf6:	e048      	b.n	800fb8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800faf8:	4b2d      	ldr	r3, [pc, #180]	; (800fbb0 <prvSwitchTimerLists+0xc0>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	68db      	ldr	r3, [r3, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb02:	4b2b      	ldr	r3, [pc, #172]	; (800fbb0 <prvSwitchTimerLists+0xc0>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	3304      	adds	r3, #4
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7fd fd1b 	bl	800d54c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6a1b      	ldr	r3, [r3, #32]
 800fb1a:	68f8      	ldr	r0, [r7, #12]
 800fb1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb24:	f003 0304 	and.w	r3, r3, #4
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d02e      	beq.n	800fb8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	699b      	ldr	r3, [r3, #24]
 800fb30:	693a      	ldr	r2, [r7, #16]
 800fb32:	4413      	add	r3, r2
 800fb34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb36:	68ba      	ldr	r2, [r7, #8]
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d90e      	bls.n	800fb5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	68ba      	ldr	r2, [r7, #8]
 800fb42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	68fa      	ldr	r2, [r7, #12]
 800fb48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb4a:	4b19      	ldr	r3, [pc, #100]	; (800fbb0 <prvSwitchTimerLists+0xc0>)
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	3304      	adds	r3, #4
 800fb52:	4619      	mov	r1, r3
 800fb54:	4610      	mov	r0, r2
 800fb56:	f7fd fcc0 	bl	800d4da <vListInsert>
 800fb5a:	e016      	b.n	800fb8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	2300      	movs	r3, #0
 800fb62:	693a      	ldr	r2, [r7, #16]
 800fb64:	2100      	movs	r1, #0
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f7ff fd60 	bl	800f62c <xTimerGenericCommand>
 800fb6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d10a      	bne.n	800fb8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb78:	f383 8811 	msr	BASEPRI, r3
 800fb7c:	f3bf 8f6f 	isb	sy
 800fb80:	f3bf 8f4f 	dsb	sy
 800fb84:	603b      	str	r3, [r7, #0]
}
 800fb86:	bf00      	nop
 800fb88:	e7fe      	b.n	800fb88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb8a:	4b09      	ldr	r3, [pc, #36]	; (800fbb0 <prvSwitchTimerLists+0xc0>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d1b1      	bne.n	800faf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fb94:	4b06      	ldr	r3, [pc, #24]	; (800fbb0 <prvSwitchTimerLists+0xc0>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fb9a:	4b06      	ldr	r3, [pc, #24]	; (800fbb4 <prvSwitchTimerLists+0xc4>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4a04      	ldr	r2, [pc, #16]	; (800fbb0 <prvSwitchTimerLists+0xc0>)
 800fba0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fba2:	4a04      	ldr	r2, [pc, #16]	; (800fbb4 <prvSwitchTimerLists+0xc4>)
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	6013      	str	r3, [r2, #0]
}
 800fba8:	bf00      	nop
 800fbaa:	3718      	adds	r7, #24
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	2000345c 	.word	0x2000345c
 800fbb4:	20003460 	.word	0x20003460

0800fbb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fbbe:	f000 f969 	bl	800fe94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fbc2:	4b15      	ldr	r3, [pc, #84]	; (800fc18 <prvCheckForValidListAndQueue+0x60>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d120      	bne.n	800fc0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fbca:	4814      	ldr	r0, [pc, #80]	; (800fc1c <prvCheckForValidListAndQueue+0x64>)
 800fbcc:	f7fd fc34 	bl	800d438 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fbd0:	4813      	ldr	r0, [pc, #76]	; (800fc20 <prvCheckForValidListAndQueue+0x68>)
 800fbd2:	f7fd fc31 	bl	800d438 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fbd6:	4b13      	ldr	r3, [pc, #76]	; (800fc24 <prvCheckForValidListAndQueue+0x6c>)
 800fbd8:	4a10      	ldr	r2, [pc, #64]	; (800fc1c <prvCheckForValidListAndQueue+0x64>)
 800fbda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fbdc:	4b12      	ldr	r3, [pc, #72]	; (800fc28 <prvCheckForValidListAndQueue+0x70>)
 800fbde:	4a10      	ldr	r2, [pc, #64]	; (800fc20 <prvCheckForValidListAndQueue+0x68>)
 800fbe0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	9300      	str	r3, [sp, #0]
 800fbe6:	4b11      	ldr	r3, [pc, #68]	; (800fc2c <prvCheckForValidListAndQueue+0x74>)
 800fbe8:	4a11      	ldr	r2, [pc, #68]	; (800fc30 <prvCheckForValidListAndQueue+0x78>)
 800fbea:	2110      	movs	r1, #16
 800fbec:	200a      	movs	r0, #10
 800fbee:	f7fd fd3f 	bl	800d670 <xQueueGenericCreateStatic>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	4a08      	ldr	r2, [pc, #32]	; (800fc18 <prvCheckForValidListAndQueue+0x60>)
 800fbf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fbf8:	4b07      	ldr	r3, [pc, #28]	; (800fc18 <prvCheckForValidListAndQueue+0x60>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d005      	beq.n	800fc0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc00:	4b05      	ldr	r3, [pc, #20]	; (800fc18 <prvCheckForValidListAndQueue+0x60>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	490b      	ldr	r1, [pc, #44]	; (800fc34 <prvCheckForValidListAndQueue+0x7c>)
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fe fa12 	bl	800e030 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc0c:	f000 f972 	bl	800fef4 <vPortExitCritical>
}
 800fc10:	bf00      	nop
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	20003464 	.word	0x20003464
 800fc1c:	20003434 	.word	0x20003434
 800fc20:	20003448 	.word	0x20003448
 800fc24:	2000345c 	.word	0x2000345c
 800fc28:	20003460 	.word	0x20003460
 800fc2c:	20003510 	.word	0x20003510
 800fc30:	20003470 	.word	0x20003470
 800fc34:	08014060 	.word	0x08014060

0800fc38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	3b04      	subs	r3, #4
 800fc48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fc50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	3b04      	subs	r3, #4
 800fc56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	f023 0201 	bic.w	r2, r3, #1
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	3b04      	subs	r3, #4
 800fc66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc68:	4a0c      	ldr	r2, [pc, #48]	; (800fc9c <pxPortInitialiseStack+0x64>)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	3b14      	subs	r3, #20
 800fc72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	3b04      	subs	r3, #4
 800fc7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f06f 0202 	mvn.w	r2, #2
 800fc86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	3b20      	subs	r3, #32
 800fc8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3714      	adds	r7, #20
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	0800fca1 	.word	0x0800fca1

0800fca0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fca6:	2300      	movs	r3, #0
 800fca8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fcaa:	4b12      	ldr	r3, [pc, #72]	; (800fcf4 <prvTaskExitError+0x54>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcb2:	d00a      	beq.n	800fcca <prvTaskExitError+0x2a>
	__asm volatile
 800fcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb8:	f383 8811 	msr	BASEPRI, r3
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	f3bf 8f4f 	dsb	sy
 800fcc4:	60fb      	str	r3, [r7, #12]
}
 800fcc6:	bf00      	nop
 800fcc8:	e7fe      	b.n	800fcc8 <prvTaskExitError+0x28>
	__asm volatile
 800fcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcce:	f383 8811 	msr	BASEPRI, r3
 800fcd2:	f3bf 8f6f 	isb	sy
 800fcd6:	f3bf 8f4f 	dsb	sy
 800fcda:	60bb      	str	r3, [r7, #8]
}
 800fcdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fcde:	bf00      	nop
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d0fc      	beq.n	800fce0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fce6:	bf00      	nop
 800fce8:	bf00      	nop
 800fcea:	3714      	adds	r7, #20
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr
 800fcf4:	20000148 	.word	0x20000148
	...

0800fd00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd00:	4b07      	ldr	r3, [pc, #28]	; (800fd20 <pxCurrentTCBConst2>)
 800fd02:	6819      	ldr	r1, [r3, #0]
 800fd04:	6808      	ldr	r0, [r1, #0]
 800fd06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0a:	f380 8809 	msr	PSP, r0
 800fd0e:	f3bf 8f6f 	isb	sy
 800fd12:	f04f 0000 	mov.w	r0, #0
 800fd16:	f380 8811 	msr	BASEPRI, r0
 800fd1a:	4770      	bx	lr
 800fd1c:	f3af 8000 	nop.w

0800fd20 <pxCurrentTCBConst2>:
 800fd20:	20002f2c 	.word	0x20002f2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd24:	bf00      	nop
 800fd26:	bf00      	nop

0800fd28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd28:	4808      	ldr	r0, [pc, #32]	; (800fd4c <prvPortStartFirstTask+0x24>)
 800fd2a:	6800      	ldr	r0, [r0, #0]
 800fd2c:	6800      	ldr	r0, [r0, #0]
 800fd2e:	f380 8808 	msr	MSP, r0
 800fd32:	f04f 0000 	mov.w	r0, #0
 800fd36:	f380 8814 	msr	CONTROL, r0
 800fd3a:	b662      	cpsie	i
 800fd3c:	b661      	cpsie	f
 800fd3e:	f3bf 8f4f 	dsb	sy
 800fd42:	f3bf 8f6f 	isb	sy
 800fd46:	df00      	svc	0
 800fd48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd4a:	bf00      	nop
 800fd4c:	e000ed08 	.word	0xe000ed08

0800fd50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fd56:	4b46      	ldr	r3, [pc, #280]	; (800fe70 <xPortStartScheduler+0x120>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a46      	ldr	r2, [pc, #280]	; (800fe74 <xPortStartScheduler+0x124>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d10a      	bne.n	800fd76 <xPortStartScheduler+0x26>
	__asm volatile
 800fd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd64:	f383 8811 	msr	BASEPRI, r3
 800fd68:	f3bf 8f6f 	isb	sy
 800fd6c:	f3bf 8f4f 	dsb	sy
 800fd70:	613b      	str	r3, [r7, #16]
}
 800fd72:	bf00      	nop
 800fd74:	e7fe      	b.n	800fd74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fd76:	4b3e      	ldr	r3, [pc, #248]	; (800fe70 <xPortStartScheduler+0x120>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4a3f      	ldr	r2, [pc, #252]	; (800fe78 <xPortStartScheduler+0x128>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d10a      	bne.n	800fd96 <xPortStartScheduler+0x46>
	__asm volatile
 800fd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd84:	f383 8811 	msr	BASEPRI, r3
 800fd88:	f3bf 8f6f 	isb	sy
 800fd8c:	f3bf 8f4f 	dsb	sy
 800fd90:	60fb      	str	r3, [r7, #12]
}
 800fd92:	bf00      	nop
 800fd94:	e7fe      	b.n	800fd94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fd96:	4b39      	ldr	r3, [pc, #228]	; (800fe7c <xPortStartScheduler+0x12c>)
 800fd98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	22ff      	movs	r2, #255	; 0xff
 800fda6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fdb0:	78fb      	ldrb	r3, [r7, #3]
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fdb8:	b2da      	uxtb	r2, r3
 800fdba:	4b31      	ldr	r3, [pc, #196]	; (800fe80 <xPortStartScheduler+0x130>)
 800fdbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fdbe:	4b31      	ldr	r3, [pc, #196]	; (800fe84 <xPortStartScheduler+0x134>)
 800fdc0:	2207      	movs	r2, #7
 800fdc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdc4:	e009      	b.n	800fdda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fdc6:	4b2f      	ldr	r3, [pc, #188]	; (800fe84 <xPortStartScheduler+0x134>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3b01      	subs	r3, #1
 800fdcc:	4a2d      	ldr	r2, [pc, #180]	; (800fe84 <xPortStartScheduler+0x134>)
 800fdce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fdd0:	78fb      	ldrb	r3, [r7, #3]
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	005b      	lsls	r3, r3, #1
 800fdd6:	b2db      	uxtb	r3, r3
 800fdd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdda:	78fb      	ldrb	r3, [r7, #3]
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fde2:	2b80      	cmp	r3, #128	; 0x80
 800fde4:	d0ef      	beq.n	800fdc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fde6:	4b27      	ldr	r3, [pc, #156]	; (800fe84 <xPortStartScheduler+0x134>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f1c3 0307 	rsb	r3, r3, #7
 800fdee:	2b04      	cmp	r3, #4
 800fdf0:	d00a      	beq.n	800fe08 <xPortStartScheduler+0xb8>
	__asm volatile
 800fdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf6:	f383 8811 	msr	BASEPRI, r3
 800fdfa:	f3bf 8f6f 	isb	sy
 800fdfe:	f3bf 8f4f 	dsb	sy
 800fe02:	60bb      	str	r3, [r7, #8]
}
 800fe04:	bf00      	nop
 800fe06:	e7fe      	b.n	800fe06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe08:	4b1e      	ldr	r3, [pc, #120]	; (800fe84 <xPortStartScheduler+0x134>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	021b      	lsls	r3, r3, #8
 800fe0e:	4a1d      	ldr	r2, [pc, #116]	; (800fe84 <xPortStartScheduler+0x134>)
 800fe10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe12:	4b1c      	ldr	r3, [pc, #112]	; (800fe84 <xPortStartScheduler+0x134>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fe1a:	4a1a      	ldr	r2, [pc, #104]	; (800fe84 <xPortStartScheduler+0x134>)
 800fe1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	b2da      	uxtb	r2, r3
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe26:	4b18      	ldr	r3, [pc, #96]	; (800fe88 <xPortStartScheduler+0x138>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	4a17      	ldr	r2, [pc, #92]	; (800fe88 <xPortStartScheduler+0x138>)
 800fe2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe32:	4b15      	ldr	r3, [pc, #84]	; (800fe88 <xPortStartScheduler+0x138>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	4a14      	ldr	r2, [pc, #80]	; (800fe88 <xPortStartScheduler+0x138>)
 800fe38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe3e:	f000 f8dd 	bl	800fffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe42:	4b12      	ldr	r3, [pc, #72]	; (800fe8c <xPortStartScheduler+0x13c>)
 800fe44:	2200      	movs	r2, #0
 800fe46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fe48:	f000 f8fc 	bl	8010044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe4c:	4b10      	ldr	r3, [pc, #64]	; (800fe90 <xPortStartScheduler+0x140>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a0f      	ldr	r2, [pc, #60]	; (800fe90 <xPortStartScheduler+0x140>)
 800fe52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fe56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fe58:	f7ff ff66 	bl	800fd28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fe5c:	f7fe fe16 	bl	800ea8c <vTaskSwitchContext>
	prvTaskExitError();
 800fe60:	f7ff ff1e 	bl	800fca0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fe64:	2300      	movs	r3, #0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3718      	adds	r7, #24
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	e000ed00 	.word	0xe000ed00
 800fe74:	410fc271 	.word	0x410fc271
 800fe78:	410fc270 	.word	0x410fc270
 800fe7c:	e000e400 	.word	0xe000e400
 800fe80:	20003560 	.word	0x20003560
 800fe84:	20003564 	.word	0x20003564
 800fe88:	e000ed20 	.word	0xe000ed20
 800fe8c:	20000148 	.word	0x20000148
 800fe90:	e000ef34 	.word	0xe000ef34

0800fe94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
	__asm volatile
 800fe9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9e:	f383 8811 	msr	BASEPRI, r3
 800fea2:	f3bf 8f6f 	isb	sy
 800fea6:	f3bf 8f4f 	dsb	sy
 800feaa:	607b      	str	r3, [r7, #4]
}
 800feac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800feae:	4b0f      	ldr	r3, [pc, #60]	; (800feec <vPortEnterCritical+0x58>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	3301      	adds	r3, #1
 800feb4:	4a0d      	ldr	r2, [pc, #52]	; (800feec <vPortEnterCritical+0x58>)
 800feb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800feb8:	4b0c      	ldr	r3, [pc, #48]	; (800feec <vPortEnterCritical+0x58>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b01      	cmp	r3, #1
 800febe:	d10f      	bne.n	800fee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fec0:	4b0b      	ldr	r3, [pc, #44]	; (800fef0 <vPortEnterCritical+0x5c>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	b2db      	uxtb	r3, r3
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d00a      	beq.n	800fee0 <vPortEnterCritical+0x4c>
	__asm volatile
 800feca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	603b      	str	r3, [r7, #0]
}
 800fedc:	bf00      	nop
 800fede:	e7fe      	b.n	800fede <vPortEnterCritical+0x4a>
	}
}
 800fee0:	bf00      	nop
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	20000148 	.word	0x20000148
 800fef0:	e000ed04 	.word	0xe000ed04

0800fef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fefa:	4b12      	ldr	r3, [pc, #72]	; (800ff44 <vPortExitCritical+0x50>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d10a      	bne.n	800ff18 <vPortExitCritical+0x24>
	__asm volatile
 800ff02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff06:	f383 8811 	msr	BASEPRI, r3
 800ff0a:	f3bf 8f6f 	isb	sy
 800ff0e:	f3bf 8f4f 	dsb	sy
 800ff12:	607b      	str	r3, [r7, #4]
}
 800ff14:	bf00      	nop
 800ff16:	e7fe      	b.n	800ff16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ff18:	4b0a      	ldr	r3, [pc, #40]	; (800ff44 <vPortExitCritical+0x50>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	3b01      	subs	r3, #1
 800ff1e:	4a09      	ldr	r2, [pc, #36]	; (800ff44 <vPortExitCritical+0x50>)
 800ff20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff22:	4b08      	ldr	r3, [pc, #32]	; (800ff44 <vPortExitCritical+0x50>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d105      	bne.n	800ff36 <vPortExitCritical+0x42>
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	f383 8811 	msr	BASEPRI, r3
}
 800ff34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff36:	bf00      	nop
 800ff38:	370c      	adds	r7, #12
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	20000148 	.word	0x20000148
	...

0800ff50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ff50:	f3ef 8009 	mrs	r0, PSP
 800ff54:	f3bf 8f6f 	isb	sy
 800ff58:	4b15      	ldr	r3, [pc, #84]	; (800ffb0 <pxCurrentTCBConst>)
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	f01e 0f10 	tst.w	lr, #16
 800ff60:	bf08      	it	eq
 800ff62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ff66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6a:	6010      	str	r0, [r2, #0]
 800ff6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ff70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ff74:	f380 8811 	msr	BASEPRI, r0
 800ff78:	f3bf 8f4f 	dsb	sy
 800ff7c:	f3bf 8f6f 	isb	sy
 800ff80:	f7fe fd84 	bl	800ea8c <vTaskSwitchContext>
 800ff84:	f04f 0000 	mov.w	r0, #0
 800ff88:	f380 8811 	msr	BASEPRI, r0
 800ff8c:	bc09      	pop	{r0, r3}
 800ff8e:	6819      	ldr	r1, [r3, #0]
 800ff90:	6808      	ldr	r0, [r1, #0]
 800ff92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff96:	f01e 0f10 	tst.w	lr, #16
 800ff9a:	bf08      	it	eq
 800ff9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ffa0:	f380 8809 	msr	PSP, r0
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	4770      	bx	lr
 800ffaa:	bf00      	nop
 800ffac:	f3af 8000 	nop.w

0800ffb0 <pxCurrentTCBConst>:
 800ffb0:	20002f2c 	.word	0x20002f2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ffb4:	bf00      	nop
 800ffb6:	bf00      	nop

0800ffb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
	__asm volatile
 800ffbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc2:	f383 8811 	msr	BASEPRI, r3
 800ffc6:	f3bf 8f6f 	isb	sy
 800ffca:	f3bf 8f4f 	dsb	sy
 800ffce:	607b      	str	r3, [r7, #4]
}
 800ffd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ffd2:	f7fe fca1 	bl	800e918 <xTaskIncrementTick>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d003      	beq.n	800ffe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ffdc:	4b06      	ldr	r3, [pc, #24]	; (800fff8 <xPortSysTickHandler+0x40>)
 800ffde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffe2:	601a      	str	r2, [r3, #0]
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	f383 8811 	msr	BASEPRI, r3
}
 800ffee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fff0:	bf00      	nop
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	e000ed04 	.word	0xe000ed04

0800fffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fffc:	b480      	push	{r7}
 800fffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010000:	4b0b      	ldr	r3, [pc, #44]	; (8010030 <vPortSetupTimerInterrupt+0x34>)
 8010002:	2200      	movs	r2, #0
 8010004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010006:	4b0b      	ldr	r3, [pc, #44]	; (8010034 <vPortSetupTimerInterrupt+0x38>)
 8010008:	2200      	movs	r2, #0
 801000a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801000c:	4b0a      	ldr	r3, [pc, #40]	; (8010038 <vPortSetupTimerInterrupt+0x3c>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4a0a      	ldr	r2, [pc, #40]	; (801003c <vPortSetupTimerInterrupt+0x40>)
 8010012:	fba2 2303 	umull	r2, r3, r2, r3
 8010016:	099b      	lsrs	r3, r3, #6
 8010018:	4a09      	ldr	r2, [pc, #36]	; (8010040 <vPortSetupTimerInterrupt+0x44>)
 801001a:	3b01      	subs	r3, #1
 801001c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801001e:	4b04      	ldr	r3, [pc, #16]	; (8010030 <vPortSetupTimerInterrupt+0x34>)
 8010020:	2207      	movs	r2, #7
 8010022:	601a      	str	r2, [r3, #0]
}
 8010024:	bf00      	nop
 8010026:	46bd      	mov	sp, r7
 8010028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop
 8010030:	e000e010 	.word	0xe000e010
 8010034:	e000e018 	.word	0xe000e018
 8010038:	2000002c 	.word	0x2000002c
 801003c:	10624dd3 	.word	0x10624dd3
 8010040:	e000e014 	.word	0xe000e014

08010044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010054 <vPortEnableVFP+0x10>
 8010048:	6801      	ldr	r1, [r0, #0]
 801004a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801004e:	6001      	str	r1, [r0, #0]
 8010050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010052:	bf00      	nop
 8010054:	e000ed88 	.word	0xe000ed88

08010058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010058:	b480      	push	{r7}
 801005a:	b085      	sub	sp, #20
 801005c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801005e:	f3ef 8305 	mrs	r3, IPSR
 8010062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2b0f      	cmp	r3, #15
 8010068:	d914      	bls.n	8010094 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801006a:	4a17      	ldr	r2, [pc, #92]	; (80100c8 <vPortValidateInterruptPriority+0x70>)
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	4413      	add	r3, r2
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010074:	4b15      	ldr	r3, [pc, #84]	; (80100cc <vPortValidateInterruptPriority+0x74>)
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	7afa      	ldrb	r2, [r7, #11]
 801007a:	429a      	cmp	r2, r3
 801007c:	d20a      	bcs.n	8010094 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801007e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	607b      	str	r3, [r7, #4]
}
 8010090:	bf00      	nop
 8010092:	e7fe      	b.n	8010092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010094:	4b0e      	ldr	r3, [pc, #56]	; (80100d0 <vPortValidateInterruptPriority+0x78>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801009c:	4b0d      	ldr	r3, [pc, #52]	; (80100d4 <vPortValidateInterruptPriority+0x7c>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d90a      	bls.n	80100ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	603b      	str	r3, [r7, #0]
}
 80100b6:	bf00      	nop
 80100b8:	e7fe      	b.n	80100b8 <vPortValidateInterruptPriority+0x60>
	}
 80100ba:	bf00      	nop
 80100bc:	3714      	adds	r7, #20
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop
 80100c8:	e000e3f0 	.word	0xe000e3f0
 80100cc:	20003560 	.word	0x20003560
 80100d0:	e000ed0c 	.word	0xe000ed0c
 80100d4:	20003564 	.word	0x20003564

080100d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b08a      	sub	sp, #40	; 0x28
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80100e0:	2300      	movs	r3, #0
 80100e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80100e4:	f7fe facc 	bl	800e680 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80100e8:	4b5b      	ldr	r3, [pc, #364]	; (8010258 <pvPortMalloc+0x180>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d101      	bne.n	80100f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80100f0:	f000 f92c 	bl	801034c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80100f4:	4b59      	ldr	r3, [pc, #356]	; (801025c <pvPortMalloc+0x184>)
 80100f6:	681a      	ldr	r2, [r3, #0]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	4013      	ands	r3, r2
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f040 8093 	bne.w	8010228 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d01d      	beq.n	8010144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010108:	2208      	movs	r2, #8
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4413      	add	r3, r2
 801010e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f003 0307 	and.w	r3, r3, #7
 8010116:	2b00      	cmp	r3, #0
 8010118:	d014      	beq.n	8010144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f023 0307 	bic.w	r3, r3, #7
 8010120:	3308      	adds	r3, #8
 8010122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f003 0307 	and.w	r3, r3, #7
 801012a:	2b00      	cmp	r3, #0
 801012c:	d00a      	beq.n	8010144 <pvPortMalloc+0x6c>
	__asm volatile
 801012e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010132:	f383 8811 	msr	BASEPRI, r3
 8010136:	f3bf 8f6f 	isb	sy
 801013a:	f3bf 8f4f 	dsb	sy
 801013e:	617b      	str	r3, [r7, #20]
}
 8010140:	bf00      	nop
 8010142:	e7fe      	b.n	8010142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d06e      	beq.n	8010228 <pvPortMalloc+0x150>
 801014a:	4b45      	ldr	r3, [pc, #276]	; (8010260 <pvPortMalloc+0x188>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	429a      	cmp	r2, r3
 8010152:	d869      	bhi.n	8010228 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010154:	4b43      	ldr	r3, [pc, #268]	; (8010264 <pvPortMalloc+0x18c>)
 8010156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010158:	4b42      	ldr	r3, [pc, #264]	; (8010264 <pvPortMalloc+0x18c>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801015e:	e004      	b.n	801016a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801016a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	687a      	ldr	r2, [r7, #4]
 8010170:	429a      	cmp	r2, r3
 8010172:	d903      	bls.n	801017c <pvPortMalloc+0xa4>
 8010174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d1f1      	bne.n	8010160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801017c:	4b36      	ldr	r3, [pc, #216]	; (8010258 <pvPortMalloc+0x180>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010182:	429a      	cmp	r2, r3
 8010184:	d050      	beq.n	8010228 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010186:	6a3b      	ldr	r3, [r7, #32]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2208      	movs	r2, #8
 801018c:	4413      	add	r3, r2
 801018e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010192:	681a      	ldr	r2, [r3, #0]
 8010194:	6a3b      	ldr	r3, [r7, #32]
 8010196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019a:	685a      	ldr	r2, [r3, #4]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	1ad2      	subs	r2, r2, r3
 80101a0:	2308      	movs	r3, #8
 80101a2:	005b      	lsls	r3, r3, #1
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d91f      	bls.n	80101e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80101a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4413      	add	r3, r2
 80101ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	f003 0307 	and.w	r3, r3, #7
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00a      	beq.n	80101d0 <pvPortMalloc+0xf8>
	__asm volatile
 80101ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101be:	f383 8811 	msr	BASEPRI, r3
 80101c2:	f3bf 8f6f 	isb	sy
 80101c6:	f3bf 8f4f 	dsb	sy
 80101ca:	613b      	str	r3, [r7, #16]
}
 80101cc:	bf00      	nop
 80101ce:	e7fe      	b.n	80101ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80101d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d2:	685a      	ldr	r2, [r3, #4]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	1ad2      	subs	r2, r2, r3
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80101dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80101e2:	69b8      	ldr	r0, [r7, #24]
 80101e4:	f000 f914 	bl	8010410 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80101e8:	4b1d      	ldr	r3, [pc, #116]	; (8010260 <pvPortMalloc+0x188>)
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	1ad3      	subs	r3, r2, r3
 80101f2:	4a1b      	ldr	r2, [pc, #108]	; (8010260 <pvPortMalloc+0x188>)
 80101f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80101f6:	4b1a      	ldr	r3, [pc, #104]	; (8010260 <pvPortMalloc+0x188>)
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	4b1b      	ldr	r3, [pc, #108]	; (8010268 <pvPortMalloc+0x190>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d203      	bcs.n	801020a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010202:	4b17      	ldr	r3, [pc, #92]	; (8010260 <pvPortMalloc+0x188>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4a18      	ldr	r2, [pc, #96]	; (8010268 <pvPortMalloc+0x190>)
 8010208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801020a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020c:	685a      	ldr	r2, [r3, #4]
 801020e:	4b13      	ldr	r3, [pc, #76]	; (801025c <pvPortMalloc+0x184>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	431a      	orrs	r2, r3
 8010214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021a:	2200      	movs	r2, #0
 801021c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801021e:	4b13      	ldr	r3, [pc, #76]	; (801026c <pvPortMalloc+0x194>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	3301      	adds	r3, #1
 8010224:	4a11      	ldr	r2, [pc, #68]	; (801026c <pvPortMalloc+0x194>)
 8010226:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010228:	f7fe fa38 	bl	800e69c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	f003 0307 	and.w	r3, r3, #7
 8010232:	2b00      	cmp	r3, #0
 8010234:	d00a      	beq.n	801024c <pvPortMalloc+0x174>
	__asm volatile
 8010236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023a:	f383 8811 	msr	BASEPRI, r3
 801023e:	f3bf 8f6f 	isb	sy
 8010242:	f3bf 8f4f 	dsb	sy
 8010246:	60fb      	str	r3, [r7, #12]
}
 8010248:	bf00      	nop
 801024a:	e7fe      	b.n	801024a <pvPortMalloc+0x172>
	return pvReturn;
 801024c:	69fb      	ldr	r3, [r7, #28]
}
 801024e:	4618      	mov	r0, r3
 8010250:	3728      	adds	r7, #40	; 0x28
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	200073f0 	.word	0x200073f0
 801025c:	20007404 	.word	0x20007404
 8010260:	200073f4 	.word	0x200073f4
 8010264:	200073e8 	.word	0x200073e8
 8010268:	200073f8 	.word	0x200073f8
 801026c:	200073fc 	.word	0x200073fc

08010270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b086      	sub	sp, #24
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d04d      	beq.n	801031e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010282:	2308      	movs	r3, #8
 8010284:	425b      	negs	r3, r3
 8010286:	697a      	ldr	r2, [r7, #20]
 8010288:	4413      	add	r3, r2
 801028a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	685a      	ldr	r2, [r3, #4]
 8010294:	4b24      	ldr	r3, [pc, #144]	; (8010328 <vPortFree+0xb8>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4013      	ands	r3, r2
 801029a:	2b00      	cmp	r3, #0
 801029c:	d10a      	bne.n	80102b4 <vPortFree+0x44>
	__asm volatile
 801029e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a2:	f383 8811 	msr	BASEPRI, r3
 80102a6:	f3bf 8f6f 	isb	sy
 80102aa:	f3bf 8f4f 	dsb	sy
 80102ae:	60fb      	str	r3, [r7, #12]
}
 80102b0:	bf00      	nop
 80102b2:	e7fe      	b.n	80102b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d00a      	beq.n	80102d2 <vPortFree+0x62>
	__asm volatile
 80102bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c0:	f383 8811 	msr	BASEPRI, r3
 80102c4:	f3bf 8f6f 	isb	sy
 80102c8:	f3bf 8f4f 	dsb	sy
 80102cc:	60bb      	str	r3, [r7, #8]
}
 80102ce:	bf00      	nop
 80102d0:	e7fe      	b.n	80102d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	685a      	ldr	r2, [r3, #4]
 80102d6:	4b14      	ldr	r3, [pc, #80]	; (8010328 <vPortFree+0xb8>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4013      	ands	r3, r2
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d01e      	beq.n	801031e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d11a      	bne.n	801031e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	685a      	ldr	r2, [r3, #4]
 80102ec:	4b0e      	ldr	r3, [pc, #56]	; (8010328 <vPortFree+0xb8>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	43db      	mvns	r3, r3
 80102f2:	401a      	ands	r2, r3
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80102f8:	f7fe f9c2 	bl	800e680 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	685a      	ldr	r2, [r3, #4]
 8010300:	4b0a      	ldr	r3, [pc, #40]	; (801032c <vPortFree+0xbc>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4413      	add	r3, r2
 8010306:	4a09      	ldr	r2, [pc, #36]	; (801032c <vPortFree+0xbc>)
 8010308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801030a:	6938      	ldr	r0, [r7, #16]
 801030c:	f000 f880 	bl	8010410 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010310:	4b07      	ldr	r3, [pc, #28]	; (8010330 <vPortFree+0xc0>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	3301      	adds	r3, #1
 8010316:	4a06      	ldr	r2, [pc, #24]	; (8010330 <vPortFree+0xc0>)
 8010318:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801031a:	f7fe f9bf 	bl	800e69c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801031e:	bf00      	nop
 8010320:	3718      	adds	r7, #24
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop
 8010328:	20007404 	.word	0x20007404
 801032c:	200073f4 	.word	0x200073f4
 8010330:	20007400 	.word	0x20007400

08010334 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8010334:	b480      	push	{r7}
 8010336:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8010338:	4b03      	ldr	r3, [pc, #12]	; (8010348 <xPortGetFreeHeapSize+0x14>)
 801033a:	681b      	ldr	r3, [r3, #0]
}
 801033c:	4618      	mov	r0, r3
 801033e:	46bd      	mov	sp, r7
 8010340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop
 8010348:	200073f4 	.word	0x200073f4

0801034c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801034c:	b480      	push	{r7}
 801034e:	b085      	sub	sp, #20
 8010350:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010352:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8010356:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010358:	4b27      	ldr	r3, [pc, #156]	; (80103f8 <prvHeapInit+0xac>)
 801035a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f003 0307 	and.w	r3, r3, #7
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00c      	beq.n	8010380 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	3307      	adds	r3, #7
 801036a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f023 0307 	bic.w	r3, r3, #7
 8010372:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010374:	68ba      	ldr	r2, [r7, #8]
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	1ad3      	subs	r3, r2, r3
 801037a:	4a1f      	ldr	r2, [pc, #124]	; (80103f8 <prvHeapInit+0xac>)
 801037c:	4413      	add	r3, r2
 801037e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010384:	4a1d      	ldr	r2, [pc, #116]	; (80103fc <prvHeapInit+0xb0>)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801038a:	4b1c      	ldr	r3, [pc, #112]	; (80103fc <prvHeapInit+0xb0>)
 801038c:	2200      	movs	r2, #0
 801038e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	68ba      	ldr	r2, [r7, #8]
 8010394:	4413      	add	r3, r2
 8010396:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010398:	2208      	movs	r2, #8
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	1a9b      	subs	r3, r3, r2
 801039e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f023 0307 	bic.w	r3, r3, #7
 80103a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	4a15      	ldr	r2, [pc, #84]	; (8010400 <prvHeapInit+0xb4>)
 80103ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80103ae:	4b14      	ldr	r3, [pc, #80]	; (8010400 <prvHeapInit+0xb4>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	2200      	movs	r2, #0
 80103b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80103b6:	4b12      	ldr	r3, [pc, #72]	; (8010400 <prvHeapInit+0xb4>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	2200      	movs	r2, #0
 80103bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	68fa      	ldr	r2, [r7, #12]
 80103c6:	1ad2      	subs	r2, r2, r3
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80103cc:	4b0c      	ldr	r3, [pc, #48]	; (8010400 <prvHeapInit+0xb4>)
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	4a0a      	ldr	r2, [pc, #40]	; (8010404 <prvHeapInit+0xb8>)
 80103da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	4a09      	ldr	r2, [pc, #36]	; (8010408 <prvHeapInit+0xbc>)
 80103e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80103e4:	4b09      	ldr	r3, [pc, #36]	; (801040c <prvHeapInit+0xc0>)
 80103e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80103ea:	601a      	str	r2, [r3, #0]
}
 80103ec:	bf00      	nop
 80103ee:	3714      	adds	r7, #20
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	20003568 	.word	0x20003568
 80103fc:	200073e8 	.word	0x200073e8
 8010400:	200073f0 	.word	0x200073f0
 8010404:	200073f8 	.word	0x200073f8
 8010408:	200073f4 	.word	0x200073f4
 801040c:	20007404 	.word	0x20007404

08010410 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010410:	b480      	push	{r7}
 8010412:	b085      	sub	sp, #20
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010418:	4b28      	ldr	r3, [pc, #160]	; (80104bc <prvInsertBlockIntoFreeList+0xac>)
 801041a:	60fb      	str	r3, [r7, #12]
 801041c:	e002      	b.n	8010424 <prvInsertBlockIntoFreeList+0x14>
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	60fb      	str	r3, [r7, #12]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	429a      	cmp	r2, r3
 801042c:	d8f7      	bhi.n	801041e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	68ba      	ldr	r2, [r7, #8]
 8010438:	4413      	add	r3, r2
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	429a      	cmp	r2, r3
 801043e:	d108      	bne.n	8010452 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	685a      	ldr	r2, [r3, #4]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	441a      	add	r2, r3
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	68ba      	ldr	r2, [r7, #8]
 801045c:	441a      	add	r2, r3
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	429a      	cmp	r2, r3
 8010464:	d118      	bne.n	8010498 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681a      	ldr	r2, [r3, #0]
 801046a:	4b15      	ldr	r3, [pc, #84]	; (80104c0 <prvInsertBlockIntoFreeList+0xb0>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	429a      	cmp	r2, r3
 8010470:	d00d      	beq.n	801048e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	685a      	ldr	r2, [r3, #4]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	441a      	add	r2, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	601a      	str	r2, [r3, #0]
 801048c:	e008      	b.n	80104a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801048e:	4b0c      	ldr	r3, [pc, #48]	; (80104c0 <prvInsertBlockIntoFreeList+0xb0>)
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	601a      	str	r2, [r3, #0]
 8010496:	e003      	b.n	80104a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681a      	ldr	r2, [r3, #0]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80104a0:	68fa      	ldr	r2, [r7, #12]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d002      	beq.n	80104ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104ae:	bf00      	nop
 80104b0:	3714      	adds	r7, #20
 80104b2:	46bd      	mov	sp, r7
 80104b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b8:	4770      	bx	lr
 80104ba:	bf00      	nop
 80104bc:	200073e8 	.word	0x200073e8
 80104c0:	200073f0 	.word	0x200073f0

080104c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80104c8:	2200      	movs	r2, #0
 80104ca:	4912      	ldr	r1, [pc, #72]	; (8010514 <MX_USB_DEVICE_Init+0x50>)
 80104cc:	4812      	ldr	r0, [pc, #72]	; (8010518 <MX_USB_DEVICE_Init+0x54>)
 80104ce:	f7fb fba9 	bl	800bc24 <USBD_Init>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d001      	beq.n	80104dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80104d8:	f7f3 f852 	bl	8003580 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80104dc:	490f      	ldr	r1, [pc, #60]	; (801051c <MX_USB_DEVICE_Init+0x58>)
 80104de:	480e      	ldr	r0, [pc, #56]	; (8010518 <MX_USB_DEVICE_Init+0x54>)
 80104e0:	f7fb fbd0 	bl	800bc84 <USBD_RegisterClass>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d001      	beq.n	80104ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80104ea:	f7f3 f849 	bl	8003580 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80104ee:	490c      	ldr	r1, [pc, #48]	; (8010520 <MX_USB_DEVICE_Init+0x5c>)
 80104f0:	4809      	ldr	r0, [pc, #36]	; (8010518 <MX_USB_DEVICE_Init+0x54>)
 80104f2:	f7fb faf1 	bl	800bad8 <USBD_CDC_RegisterInterface>
 80104f6:	4603      	mov	r3, r0
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d001      	beq.n	8010500 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80104fc:	f7f3 f840 	bl	8003580 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010500:	4805      	ldr	r0, [pc, #20]	; (8010518 <MX_USB_DEVICE_Init+0x54>)
 8010502:	f7fb fbe6 	bl	800bcd2 <USBD_Start>
 8010506:	4603      	mov	r3, r0
 8010508:	2b00      	cmp	r3, #0
 801050a:	d001      	beq.n	8010510 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801050c:	f7f3 f838 	bl	8003580 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010510:	bf00      	nop
 8010512:	bd80      	pop	{r7, pc}
 8010514:	20000160 	.word	0x20000160
 8010518:	2000d668 	.word	0x2000d668
 801051c:	20000044 	.word	0x20000044
 8010520:	2000014c 	.word	0x2000014c

08010524 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010528:	2200      	movs	r2, #0
 801052a:	4905      	ldr	r1, [pc, #20]	; (8010540 <CDC_Init_FS+0x1c>)
 801052c:	4805      	ldr	r0, [pc, #20]	; (8010544 <CDC_Init_FS+0x20>)
 801052e:	f7fb fae8 	bl	800bb02 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010532:	4905      	ldr	r1, [pc, #20]	; (8010548 <CDC_Init_FS+0x24>)
 8010534:	4803      	ldr	r0, [pc, #12]	; (8010544 <CDC_Init_FS+0x20>)
 8010536:	f7fb fb02 	bl	800bb3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801053a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801053c:	4618      	mov	r0, r3
 801053e:	bd80      	pop	{r7, pc}
 8010540:	2000e138 	.word	0x2000e138
 8010544:	2000d668 	.word	0x2000d668
 8010548:	2000d938 	.word	0x2000d938

0801054c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801054c:	b480      	push	{r7}
 801054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010550:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010552:	4618      	mov	r0, r3
 8010554:	46bd      	mov	sp, r7
 8010556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055a:	4770      	bx	lr

0801055c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801055c:	b480      	push	{r7}
 801055e:	b083      	sub	sp, #12
 8010560:	af00      	add	r7, sp, #0
 8010562:	4603      	mov	r3, r0
 8010564:	6039      	str	r1, [r7, #0]
 8010566:	71fb      	strb	r3, [r7, #7]
 8010568:	4613      	mov	r3, r2
 801056a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801056c:	79fb      	ldrb	r3, [r7, #7]
 801056e:	2b23      	cmp	r3, #35	; 0x23
 8010570:	d84a      	bhi.n	8010608 <CDC_Control_FS+0xac>
 8010572:	a201      	add	r2, pc, #4	; (adr r2, 8010578 <CDC_Control_FS+0x1c>)
 8010574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010578:	08010609 	.word	0x08010609
 801057c:	08010609 	.word	0x08010609
 8010580:	08010609 	.word	0x08010609
 8010584:	08010609 	.word	0x08010609
 8010588:	08010609 	.word	0x08010609
 801058c:	08010609 	.word	0x08010609
 8010590:	08010609 	.word	0x08010609
 8010594:	08010609 	.word	0x08010609
 8010598:	08010609 	.word	0x08010609
 801059c:	08010609 	.word	0x08010609
 80105a0:	08010609 	.word	0x08010609
 80105a4:	08010609 	.word	0x08010609
 80105a8:	08010609 	.word	0x08010609
 80105ac:	08010609 	.word	0x08010609
 80105b0:	08010609 	.word	0x08010609
 80105b4:	08010609 	.word	0x08010609
 80105b8:	08010609 	.word	0x08010609
 80105bc:	08010609 	.word	0x08010609
 80105c0:	08010609 	.word	0x08010609
 80105c4:	08010609 	.word	0x08010609
 80105c8:	08010609 	.word	0x08010609
 80105cc:	08010609 	.word	0x08010609
 80105d0:	08010609 	.word	0x08010609
 80105d4:	08010609 	.word	0x08010609
 80105d8:	08010609 	.word	0x08010609
 80105dc:	08010609 	.word	0x08010609
 80105e0:	08010609 	.word	0x08010609
 80105e4:	08010609 	.word	0x08010609
 80105e8:	08010609 	.word	0x08010609
 80105ec:	08010609 	.word	0x08010609
 80105f0:	08010609 	.word	0x08010609
 80105f4:	08010609 	.word	0x08010609
 80105f8:	08010609 	.word	0x08010609
 80105fc:	08010609 	.word	0x08010609
 8010600:	08010609 	.word	0x08010609
 8010604:	08010609 	.word	0x08010609
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010608:	bf00      	nop
  }

  return (USBD_OK);
 801060a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801060c:	4618      	mov	r0, r3
 801060e:	370c      	adds	r7, #12
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr

08010618 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010622:	6879      	ldr	r1, [r7, #4]
 8010624:	4805      	ldr	r0, [pc, #20]	; (801063c <CDC_Receive_FS+0x24>)
 8010626:	f7fb fa8a 	bl	800bb3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801062a:	4804      	ldr	r0, [pc, #16]	; (801063c <CDC_Receive_FS+0x24>)
 801062c:	f7fb fad0 	bl	800bbd0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010630:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010632:	4618      	mov	r0, r3
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	2000d668 	.word	0x2000d668

08010640 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	460b      	mov	r3, r1
 801064a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010650:	4b0d      	ldr	r3, [pc, #52]	; (8010688 <CDC_Transmit_FS+0x48>)
 8010652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010656:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801065e:	2b00      	cmp	r3, #0
 8010660:	d001      	beq.n	8010666 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010662:	2301      	movs	r3, #1
 8010664:	e00b      	b.n	801067e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010666:	887b      	ldrh	r3, [r7, #2]
 8010668:	461a      	mov	r2, r3
 801066a:	6879      	ldr	r1, [r7, #4]
 801066c:	4806      	ldr	r0, [pc, #24]	; (8010688 <CDC_Transmit_FS+0x48>)
 801066e:	f7fb fa48 	bl	800bb02 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010672:	4805      	ldr	r0, [pc, #20]	; (8010688 <CDC_Transmit_FS+0x48>)
 8010674:	f7fb fa7c 	bl	800bb70 <USBD_CDC_TransmitPacket>
 8010678:	4603      	mov	r3, r0
 801067a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801067c:	7bfb      	ldrb	r3, [r7, #15]
}
 801067e:	4618      	mov	r0, r3
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	2000d668 	.word	0x2000d668

0801068c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801068c:	b480      	push	{r7}
 801068e:	b087      	sub	sp, #28
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	4613      	mov	r3, r2
 8010698:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801069a:	2300      	movs	r3, #0
 801069c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801069e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	371c      	adds	r7, #28
 80106a6:	46bd      	mov	sp, r7
 80106a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ac:	4770      	bx	lr
	...

080106b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	4603      	mov	r3, r0
 80106b8:	6039      	str	r1, [r7, #0]
 80106ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	2212      	movs	r2, #18
 80106c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80106c2:	4b03      	ldr	r3, [pc, #12]	; (80106d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	370c      	adds	r7, #12
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr
 80106d0:	2000017c 	.word	0x2000017c

080106d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	4603      	mov	r3, r0
 80106dc:	6039      	str	r1, [r7, #0]
 80106de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	2204      	movs	r2, #4
 80106e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80106e6:	4b03      	ldr	r3, [pc, #12]	; (80106f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr
 80106f4:	20000190 	.word	0x20000190

080106f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b082      	sub	sp, #8
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	4603      	mov	r3, r0
 8010700:	6039      	str	r1, [r7, #0]
 8010702:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010704:	79fb      	ldrb	r3, [r7, #7]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d105      	bne.n	8010716 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801070a:	683a      	ldr	r2, [r7, #0]
 801070c:	4907      	ldr	r1, [pc, #28]	; (801072c <USBD_FS_ProductStrDescriptor+0x34>)
 801070e:	4808      	ldr	r0, [pc, #32]	; (8010730 <USBD_FS_ProductStrDescriptor+0x38>)
 8010710:	f7fc fb11 	bl	800cd36 <USBD_GetString>
 8010714:	e004      	b.n	8010720 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010716:	683a      	ldr	r2, [r7, #0]
 8010718:	4904      	ldr	r1, [pc, #16]	; (801072c <USBD_FS_ProductStrDescriptor+0x34>)
 801071a:	4805      	ldr	r0, [pc, #20]	; (8010730 <USBD_FS_ProductStrDescriptor+0x38>)
 801071c:	f7fc fb0b 	bl	800cd36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010720:	4b02      	ldr	r3, [pc, #8]	; (801072c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010722:	4618      	mov	r0, r3
 8010724:	3708      	adds	r7, #8
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop
 801072c:	2000e938 	.word	0x2000e938
 8010730:	08014068 	.word	0x08014068

08010734 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	4603      	mov	r3, r0
 801073c:	6039      	str	r1, [r7, #0]
 801073e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010740:	683a      	ldr	r2, [r7, #0]
 8010742:	4904      	ldr	r1, [pc, #16]	; (8010754 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010744:	4804      	ldr	r0, [pc, #16]	; (8010758 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010746:	f7fc faf6 	bl	800cd36 <USBD_GetString>
  return USBD_StrDesc;
 801074a:	4b02      	ldr	r3, [pc, #8]	; (8010754 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801074c:	4618      	mov	r0, r3
 801074e:	3708      	adds	r7, #8
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}
 8010754:	2000e938 	.word	0x2000e938
 8010758:	08014080 	.word	0x08014080

0801075c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	4603      	mov	r3, r0
 8010764:	6039      	str	r1, [r7, #0]
 8010766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	221a      	movs	r2, #26
 801076c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801076e:	f000 f843 	bl	80107f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010772:	4b02      	ldr	r3, [pc, #8]	; (801077c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010774:	4618      	mov	r0, r3
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	20000194 	.word	0x20000194

08010780 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	4603      	mov	r3, r0
 8010788:	6039      	str	r1, [r7, #0]
 801078a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801078c:	79fb      	ldrb	r3, [r7, #7]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d105      	bne.n	801079e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010792:	683a      	ldr	r2, [r7, #0]
 8010794:	4907      	ldr	r1, [pc, #28]	; (80107b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010796:	4808      	ldr	r0, [pc, #32]	; (80107b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010798:	f7fc facd 	bl	800cd36 <USBD_GetString>
 801079c:	e004      	b.n	80107a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801079e:	683a      	ldr	r2, [r7, #0]
 80107a0:	4904      	ldr	r1, [pc, #16]	; (80107b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80107a2:	4805      	ldr	r0, [pc, #20]	; (80107b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80107a4:	f7fc fac7 	bl	800cd36 <USBD_GetString>
  }
  return USBD_StrDesc;
 80107a8:	4b02      	ldr	r3, [pc, #8]	; (80107b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3708      	adds	r7, #8
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	2000e938 	.word	0x2000e938
 80107b8:	08014094 	.word	0x08014094

080107bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	4603      	mov	r3, r0
 80107c4:	6039      	str	r1, [r7, #0]
 80107c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80107c8:	79fb      	ldrb	r3, [r7, #7]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d105      	bne.n	80107da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80107ce:	683a      	ldr	r2, [r7, #0]
 80107d0:	4907      	ldr	r1, [pc, #28]	; (80107f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80107d2:	4808      	ldr	r0, [pc, #32]	; (80107f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80107d4:	f7fc faaf 	bl	800cd36 <USBD_GetString>
 80107d8:	e004      	b.n	80107e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80107da:	683a      	ldr	r2, [r7, #0]
 80107dc:	4904      	ldr	r1, [pc, #16]	; (80107f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80107de:	4805      	ldr	r0, [pc, #20]	; (80107f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80107e0:	f7fc faa9 	bl	800cd36 <USBD_GetString>
  }
  return USBD_StrDesc;
 80107e4:	4b02      	ldr	r3, [pc, #8]	; (80107f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3708      	adds	r7, #8
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
 80107ee:	bf00      	nop
 80107f0:	2000e938 	.word	0x2000e938
 80107f4:	080140a0 	.word	0x080140a0

080107f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80107fe:	4b0f      	ldr	r3, [pc, #60]	; (801083c <Get_SerialNum+0x44>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010804:	4b0e      	ldr	r3, [pc, #56]	; (8010840 <Get_SerialNum+0x48>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801080a:	4b0e      	ldr	r3, [pc, #56]	; (8010844 <Get_SerialNum+0x4c>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	4413      	add	r3, r2
 8010816:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d009      	beq.n	8010832 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801081e:	2208      	movs	r2, #8
 8010820:	4909      	ldr	r1, [pc, #36]	; (8010848 <Get_SerialNum+0x50>)
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f000 f814 	bl	8010850 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010828:	2204      	movs	r2, #4
 801082a:	4908      	ldr	r1, [pc, #32]	; (801084c <Get_SerialNum+0x54>)
 801082c:	68b8      	ldr	r0, [r7, #8]
 801082e:	f000 f80f 	bl	8010850 <IntToUnicode>
  }
}
 8010832:	bf00      	nop
 8010834:	3710      	adds	r7, #16
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
 801083a:	bf00      	nop
 801083c:	1fff7a10 	.word	0x1fff7a10
 8010840:	1fff7a14 	.word	0x1fff7a14
 8010844:	1fff7a18 	.word	0x1fff7a18
 8010848:	20000196 	.word	0x20000196
 801084c:	200001a6 	.word	0x200001a6

08010850 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010850:	b480      	push	{r7}
 8010852:	b087      	sub	sp, #28
 8010854:	af00      	add	r7, sp, #0
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	60b9      	str	r1, [r7, #8]
 801085a:	4613      	mov	r3, r2
 801085c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801085e:	2300      	movs	r3, #0
 8010860:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010862:	2300      	movs	r3, #0
 8010864:	75fb      	strb	r3, [r7, #23]
 8010866:	e027      	b.n	80108b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	0f1b      	lsrs	r3, r3, #28
 801086c:	2b09      	cmp	r3, #9
 801086e:	d80b      	bhi.n	8010888 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	0f1b      	lsrs	r3, r3, #28
 8010874:	b2da      	uxtb	r2, r3
 8010876:	7dfb      	ldrb	r3, [r7, #23]
 8010878:	005b      	lsls	r3, r3, #1
 801087a:	4619      	mov	r1, r3
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	440b      	add	r3, r1
 8010880:	3230      	adds	r2, #48	; 0x30
 8010882:	b2d2      	uxtb	r2, r2
 8010884:	701a      	strb	r2, [r3, #0]
 8010886:	e00a      	b.n	801089e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	0f1b      	lsrs	r3, r3, #28
 801088c:	b2da      	uxtb	r2, r3
 801088e:	7dfb      	ldrb	r3, [r7, #23]
 8010890:	005b      	lsls	r3, r3, #1
 8010892:	4619      	mov	r1, r3
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	440b      	add	r3, r1
 8010898:	3237      	adds	r2, #55	; 0x37
 801089a:	b2d2      	uxtb	r2, r2
 801089c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	011b      	lsls	r3, r3, #4
 80108a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80108a4:	7dfb      	ldrb	r3, [r7, #23]
 80108a6:	005b      	lsls	r3, r3, #1
 80108a8:	3301      	adds	r3, #1
 80108aa:	68ba      	ldr	r2, [r7, #8]
 80108ac:	4413      	add	r3, r2
 80108ae:	2200      	movs	r2, #0
 80108b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80108b2:	7dfb      	ldrb	r3, [r7, #23]
 80108b4:	3301      	adds	r3, #1
 80108b6:	75fb      	strb	r3, [r7, #23]
 80108b8:	7dfa      	ldrb	r2, [r7, #23]
 80108ba:	79fb      	ldrb	r3, [r7, #7]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d3d3      	bcc.n	8010868 <IntToUnicode+0x18>
  }
}
 80108c0:	bf00      	nop
 80108c2:	bf00      	nop
 80108c4:	371c      	adds	r7, #28
 80108c6:	46bd      	mov	sp, r7
 80108c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108cc:	4770      	bx	lr
	...

080108d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b08a      	sub	sp, #40	; 0x28
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80108d8:	f107 0314 	add.w	r3, r7, #20
 80108dc:	2200      	movs	r2, #0
 80108de:	601a      	str	r2, [r3, #0]
 80108e0:	605a      	str	r2, [r3, #4]
 80108e2:	609a      	str	r2, [r3, #8]
 80108e4:	60da      	str	r2, [r3, #12]
 80108e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80108f0:	d147      	bne.n	8010982 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80108f2:	2300      	movs	r3, #0
 80108f4:	613b      	str	r3, [r7, #16]
 80108f6:	4b25      	ldr	r3, [pc, #148]	; (801098c <HAL_PCD_MspInit+0xbc>)
 80108f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108fa:	4a24      	ldr	r2, [pc, #144]	; (801098c <HAL_PCD_MspInit+0xbc>)
 80108fc:	f043 0301 	orr.w	r3, r3, #1
 8010900:	6313      	str	r3, [r2, #48]	; 0x30
 8010902:	4b22      	ldr	r3, [pc, #136]	; (801098c <HAL_PCD_MspInit+0xbc>)
 8010904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010906:	f003 0301 	and.w	r3, r3, #1
 801090a:	613b      	str	r3, [r7, #16]
 801090c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801090e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010914:	2300      	movs	r3, #0
 8010916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010918:	2300      	movs	r3, #0
 801091a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801091c:	f107 0314 	add.w	r3, r7, #20
 8010920:	4619      	mov	r1, r3
 8010922:	481b      	ldr	r0, [pc, #108]	; (8010990 <HAL_PCD_MspInit+0xc0>)
 8010924:	f7f4 fd62 	bl	80053ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010928:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801092e:	2302      	movs	r3, #2
 8010930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010932:	2300      	movs	r3, #0
 8010934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010936:	2300      	movs	r3, #0
 8010938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801093a:	230a      	movs	r3, #10
 801093c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801093e:	f107 0314 	add.w	r3, r7, #20
 8010942:	4619      	mov	r1, r3
 8010944:	4812      	ldr	r0, [pc, #72]	; (8010990 <HAL_PCD_MspInit+0xc0>)
 8010946:	f7f4 fd51 	bl	80053ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801094a:	4b10      	ldr	r3, [pc, #64]	; (801098c <HAL_PCD_MspInit+0xbc>)
 801094c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801094e:	4a0f      	ldr	r2, [pc, #60]	; (801098c <HAL_PCD_MspInit+0xbc>)
 8010950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010954:	6353      	str	r3, [r2, #52]	; 0x34
 8010956:	2300      	movs	r3, #0
 8010958:	60fb      	str	r3, [r7, #12]
 801095a:	4b0c      	ldr	r3, [pc, #48]	; (801098c <HAL_PCD_MspInit+0xbc>)
 801095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801095e:	4a0b      	ldr	r2, [pc, #44]	; (801098c <HAL_PCD_MspInit+0xbc>)
 8010960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010964:	6453      	str	r3, [r2, #68]	; 0x44
 8010966:	4b09      	ldr	r3, [pc, #36]	; (801098c <HAL_PCD_MspInit+0xbc>)
 8010968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801096e:	60fb      	str	r3, [r7, #12]
 8010970:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010972:	2200      	movs	r2, #0
 8010974:	2105      	movs	r1, #5
 8010976:	2043      	movs	r0, #67	; 0x43
 8010978:	f7f4 f8a0 	bl	8004abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801097c:	2043      	movs	r0, #67	; 0x43
 801097e:	f7f4 f8b9 	bl	8004af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010982:	bf00      	nop
 8010984:	3728      	adds	r7, #40	; 0x28
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	40023800 	.word	0x40023800
 8010990:	40020000 	.word	0x40020000

08010994 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80109a8:	4619      	mov	r1, r3
 80109aa:	4610      	mov	r0, r2
 80109ac:	f7fb f9dc 	bl	800bd68 <USBD_LL_SetupStage>
}
 80109b0:	bf00      	nop
 80109b2:	3708      	adds	r7, #8
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	460b      	mov	r3, r1
 80109c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80109ca:	78fa      	ldrb	r2, [r7, #3]
 80109cc:	6879      	ldr	r1, [r7, #4]
 80109ce:	4613      	mov	r3, r2
 80109d0:	00db      	lsls	r3, r3, #3
 80109d2:	1a9b      	subs	r3, r3, r2
 80109d4:	009b      	lsls	r3, r3, #2
 80109d6:	440b      	add	r3, r1
 80109d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	78fb      	ldrb	r3, [r7, #3]
 80109e0:	4619      	mov	r1, r3
 80109e2:	f7fb fa16 	bl	800be12 <USBD_LL_DataOutStage>
}
 80109e6:	bf00      	nop
 80109e8:	3708      	adds	r7, #8
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}

080109ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109ee:	b580      	push	{r7, lr}
 80109f0:	b082      	sub	sp, #8
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
 80109f6:	460b      	mov	r3, r1
 80109f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010a00:	78fa      	ldrb	r2, [r7, #3]
 8010a02:	6879      	ldr	r1, [r7, #4]
 8010a04:	4613      	mov	r3, r2
 8010a06:	00db      	lsls	r3, r3, #3
 8010a08:	1a9b      	subs	r3, r3, r2
 8010a0a:	009b      	lsls	r3, r3, #2
 8010a0c:	440b      	add	r3, r1
 8010a0e:	3348      	adds	r3, #72	; 0x48
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	78fb      	ldrb	r3, [r7, #3]
 8010a14:	4619      	mov	r1, r3
 8010a16:	f7fb fa5f 	bl	800bed8 <USBD_LL_DataInStage>
}
 8010a1a:	bf00      	nop
 8010a1c:	3708      	adds	r7, #8
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}

08010a22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a22:	b580      	push	{r7, lr}
 8010a24:	b082      	sub	sp, #8
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7fb fb73 	bl	800c11c <USBD_LL_SOF>
}
 8010a36:	bf00      	nop
 8010a38:	3708      	adds	r7, #8
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a3e:	b580      	push	{r7, lr}
 8010a40:	b084      	sub	sp, #16
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010a46:	2301      	movs	r3, #1
 8010a48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	68db      	ldr	r3, [r3, #12]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d102      	bne.n	8010a58 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010a52:	2300      	movs	r3, #0
 8010a54:	73fb      	strb	r3, [r7, #15]
 8010a56:	e008      	b.n	8010a6a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	68db      	ldr	r3, [r3, #12]
 8010a5c:	2b02      	cmp	r3, #2
 8010a5e:	d102      	bne.n	8010a66 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010a60:	2301      	movs	r3, #1
 8010a62:	73fb      	strb	r3, [r7, #15]
 8010a64:	e001      	b.n	8010a6a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010a66:	f7f2 fd8b 	bl	8003580 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010a70:	7bfa      	ldrb	r2, [r7, #15]
 8010a72:	4611      	mov	r1, r2
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7fb fb13 	bl	800c0a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7fb fabf 	bl	800c004 <USBD_LL_Reset>
}
 8010a86:	bf00      	nop
 8010a88:	3710      	adds	r7, #16
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
	...

08010a90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fb fb0e 	bl	800c0c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	6812      	ldr	r2, [r2, #0]
 8010ab2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ab6:	f043 0301 	orr.w	r3, r3, #1
 8010aba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6a1b      	ldr	r3, [r3, #32]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d005      	beq.n	8010ad0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ac4:	4b04      	ldr	r3, [pc, #16]	; (8010ad8 <HAL_PCD_SuspendCallback+0x48>)
 8010ac6:	691b      	ldr	r3, [r3, #16]
 8010ac8:	4a03      	ldr	r2, [pc, #12]	; (8010ad8 <HAL_PCD_SuspendCallback+0x48>)
 8010aca:	f043 0306 	orr.w	r3, r3, #6
 8010ace:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010ad0:	bf00      	nop
 8010ad2:	3708      	adds	r7, #8
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}
 8010ad8:	e000ed00 	.word	0xe000ed00

08010adc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fb fafe 	bl	800c0ec <USBD_LL_Resume>
}
 8010af0:	bf00      	nop
 8010af2:	3708      	adds	r7, #8
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	460b      	mov	r3, r1
 8010b02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010b0a:	78fa      	ldrb	r2, [r7, #3]
 8010b0c:	4611      	mov	r1, r2
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7fb fb4c 	bl	800c1ac <USBD_LL_IsoOUTIncomplete>
}
 8010b14:	bf00      	nop
 8010b16:	3708      	adds	r7, #8
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}

08010b1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	460b      	mov	r3, r1
 8010b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010b2e:	78fa      	ldrb	r2, [r7, #3]
 8010b30:	4611      	mov	r1, r2
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fb fb14 	bl	800c160 <USBD_LL_IsoINIncomplete>
}
 8010b38:	bf00      	nop
 8010b3a:	3708      	adds	r7, #8
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b082      	sub	sp, #8
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7fb fb52 	bl	800c1f8 <USBD_LL_DevConnected>
}
 8010b54:	bf00      	nop
 8010b56:	3708      	adds	r7, #8
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fb fb4f 	bl	800c20e <USBD_LL_DevDisconnected>
}
 8010b70:	bf00      	nop
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d13c      	bne.n	8010c02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010b88:	4a20      	ldr	r2, [pc, #128]	; (8010c0c <USBD_LL_Init+0x94>)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	4a1e      	ldr	r2, [pc, #120]	; (8010c0c <USBD_LL_Init+0x94>)
 8010b94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010b98:	4b1c      	ldr	r3, [pc, #112]	; (8010c0c <USBD_LL_Init+0x94>)
 8010b9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010b9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010ba0:	4b1a      	ldr	r3, [pc, #104]	; (8010c0c <USBD_LL_Init+0x94>)
 8010ba2:	2204      	movs	r2, #4
 8010ba4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010ba6:	4b19      	ldr	r3, [pc, #100]	; (8010c0c <USBD_LL_Init+0x94>)
 8010ba8:	2202      	movs	r2, #2
 8010baa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010bac:	4b17      	ldr	r3, [pc, #92]	; (8010c0c <USBD_LL_Init+0x94>)
 8010bae:	2200      	movs	r2, #0
 8010bb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010bb2:	4b16      	ldr	r3, [pc, #88]	; (8010c0c <USBD_LL_Init+0x94>)
 8010bb4:	2202      	movs	r2, #2
 8010bb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010bb8:	4b14      	ldr	r3, [pc, #80]	; (8010c0c <USBD_LL_Init+0x94>)
 8010bba:	2200      	movs	r2, #0
 8010bbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010bbe:	4b13      	ldr	r3, [pc, #76]	; (8010c0c <USBD_LL_Init+0x94>)
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010bc4:	4b11      	ldr	r3, [pc, #68]	; (8010c0c <USBD_LL_Init+0x94>)
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010bca:	4b10      	ldr	r3, [pc, #64]	; (8010c0c <USBD_LL_Init+0x94>)
 8010bcc:	2200      	movs	r2, #0
 8010bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010bd0:	4b0e      	ldr	r3, [pc, #56]	; (8010c0c <USBD_LL_Init+0x94>)
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010bd6:	480d      	ldr	r0, [pc, #52]	; (8010c0c <USBD_LL_Init+0x94>)
 8010bd8:	f7f6 f811 	bl	8006bfe <HAL_PCD_Init>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d001      	beq.n	8010be6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010be2:	f7f2 fccd 	bl	8003580 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010be6:	2180      	movs	r1, #128	; 0x80
 8010be8:	4808      	ldr	r0, [pc, #32]	; (8010c0c <USBD_LL_Init+0x94>)
 8010bea:	f7f7 f96e 	bl	8007eca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010bee:	2240      	movs	r2, #64	; 0x40
 8010bf0:	2100      	movs	r1, #0
 8010bf2:	4806      	ldr	r0, [pc, #24]	; (8010c0c <USBD_LL_Init+0x94>)
 8010bf4:	f7f7 f922 	bl	8007e3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010bf8:	2280      	movs	r2, #128	; 0x80
 8010bfa:	2101      	movs	r1, #1
 8010bfc:	4803      	ldr	r0, [pc, #12]	; (8010c0c <USBD_LL_Init+0x94>)
 8010bfe:	f7f7 f91d 	bl	8007e3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010c02:	2300      	movs	r3, #0
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3708      	adds	r7, #8
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}
 8010c0c:	2000eb38 	.word	0x2000eb38

08010c10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7f6 f906 	bl	8006e38 <HAL_PCD_Start>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c30:	7bfb      	ldrb	r3, [r7, #15]
 8010c32:	4618      	mov	r0, r3
 8010c34:	f000 f942 	bl	8010ebc <USBD_Get_USB_Status>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3710      	adds	r7, #16
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b084      	sub	sp, #16
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
 8010c4e:	4608      	mov	r0, r1
 8010c50:	4611      	mov	r1, r2
 8010c52:	461a      	mov	r2, r3
 8010c54:	4603      	mov	r3, r0
 8010c56:	70fb      	strb	r3, [r7, #3]
 8010c58:	460b      	mov	r3, r1
 8010c5a:	70bb      	strb	r3, [r7, #2]
 8010c5c:	4613      	mov	r3, r2
 8010c5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c60:	2300      	movs	r3, #0
 8010c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c64:	2300      	movs	r3, #0
 8010c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010c6e:	78bb      	ldrb	r3, [r7, #2]
 8010c70:	883a      	ldrh	r2, [r7, #0]
 8010c72:	78f9      	ldrb	r1, [r7, #3]
 8010c74:	f7f6 fcea 	bl	800764c <HAL_PCD_EP_Open>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c7c:	7bfb      	ldrb	r3, [r7, #15]
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f000 f91c 	bl	8010ebc <USBD_Get_USB_Status>
 8010c84:	4603      	mov	r3, r0
 8010c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3710      	adds	r7, #16
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}

08010c92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c92:	b580      	push	{r7, lr}
 8010c94:	b084      	sub	sp, #16
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010cac:	78fa      	ldrb	r2, [r7, #3]
 8010cae:	4611      	mov	r1, r2
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7f6 fd33 	bl	800771c <HAL_PCD_EP_Close>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cba:	7bfb      	ldrb	r3, [r7, #15]
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f000 f8fd 	bl	8010ebc <USBD_Get_USB_Status>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3710      	adds	r7, #16
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b084      	sub	sp, #16
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010cea:	78fa      	ldrb	r2, [r7, #3]
 8010cec:	4611      	mov	r1, r2
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7f6 fe0b 	bl	800790a <HAL_PCD_EP_SetStall>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cf8:	7bfb      	ldrb	r3, [r7, #15]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f000 f8de 	bl	8010ebc <USBD_Get_USB_Status>
 8010d00:	4603      	mov	r3, r0
 8010d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3710      	adds	r7, #16
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}

08010d0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d0e:	b580      	push	{r7, lr}
 8010d10:	b084      	sub	sp, #16
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	6078      	str	r0, [r7, #4]
 8010d16:	460b      	mov	r3, r1
 8010d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010d28:	78fa      	ldrb	r2, [r7, #3]
 8010d2a:	4611      	mov	r1, r2
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f7f6 fe50 	bl	80079d2 <HAL_PCD_EP_ClrStall>
 8010d32:	4603      	mov	r3, r0
 8010d34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d36:	7bfb      	ldrb	r3, [r7, #15]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f000 f8bf 	bl	8010ebc <USBD_Get_USB_Status>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3710      	adds	r7, #16
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b085      	sub	sp, #20
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	460b      	mov	r3, r1
 8010d56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010d5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	da0b      	bge.n	8010d80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010d68:	78fb      	ldrb	r3, [r7, #3]
 8010d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d6e:	68f9      	ldr	r1, [r7, #12]
 8010d70:	4613      	mov	r3, r2
 8010d72:	00db      	lsls	r3, r3, #3
 8010d74:	1a9b      	subs	r3, r3, r2
 8010d76:	009b      	lsls	r3, r3, #2
 8010d78:	440b      	add	r3, r1
 8010d7a:	333e      	adds	r3, #62	; 0x3e
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	e00b      	b.n	8010d98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010d80:	78fb      	ldrb	r3, [r7, #3]
 8010d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d86:	68f9      	ldr	r1, [r7, #12]
 8010d88:	4613      	mov	r3, r2
 8010d8a:	00db      	lsls	r3, r3, #3
 8010d8c:	1a9b      	subs	r3, r3, r2
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	440b      	add	r3, r1
 8010d92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010d96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3714      	adds	r7, #20
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	460b      	mov	r3, r1
 8010dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010db0:	2300      	movs	r3, #0
 8010db2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010db4:	2300      	movs	r3, #0
 8010db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010dbe:	78fa      	ldrb	r2, [r7, #3]
 8010dc0:	4611      	mov	r1, r2
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7f6 fc1d 	bl	8007602 <HAL_PCD_SetAddress>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010dcc:	7bfb      	ldrb	r3, [r7, #15]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f000 f874 	bl	8010ebc <USBD_Get_USB_Status>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3710      	adds	r7, #16
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}

08010de2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010de2:	b580      	push	{r7, lr}
 8010de4:	b086      	sub	sp, #24
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	60f8      	str	r0, [r7, #12]
 8010dea:	607a      	str	r2, [r7, #4]
 8010dec:	603b      	str	r3, [r7, #0]
 8010dee:	460b      	mov	r3, r1
 8010df0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010df2:	2300      	movs	r3, #0
 8010df4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010df6:	2300      	movs	r3, #0
 8010df8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010e00:	7af9      	ldrb	r1, [r7, #11]
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	687a      	ldr	r2, [r7, #4]
 8010e06:	f7f6 fd36 	bl	8007876 <HAL_PCD_EP_Transmit>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e0e:	7dfb      	ldrb	r3, [r7, #23]
 8010e10:	4618      	mov	r0, r3
 8010e12:	f000 f853 	bl	8010ebc <USBD_Get_USB_Status>
 8010e16:	4603      	mov	r3, r0
 8010e18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010e1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3718      	adds	r7, #24
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}

08010e24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b086      	sub	sp, #24
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	607a      	str	r2, [r7, #4]
 8010e2e:	603b      	str	r3, [r7, #0]
 8010e30:	460b      	mov	r3, r1
 8010e32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e34:	2300      	movs	r3, #0
 8010e36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010e42:	7af9      	ldrb	r1, [r7, #11]
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	f7f6 fcb2 	bl	80077b0 <HAL_PCD_EP_Receive>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e50:	7dfb      	ldrb	r3, [r7, #23]
 8010e52:	4618      	mov	r0, r3
 8010e54:	f000 f832 	bl	8010ebc <USBD_Get_USB_Status>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010e5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3718      	adds	r7, #24
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}

08010e66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e66:	b580      	push	{r7, lr}
 8010e68:	b082      	sub	sp, #8
 8010e6a:	af00      	add	r7, sp, #0
 8010e6c:	6078      	str	r0, [r7, #4]
 8010e6e:	460b      	mov	r3, r1
 8010e70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010e78:	78fa      	ldrb	r2, [r7, #3]
 8010e7a:	4611      	mov	r1, r2
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7f6 fce2 	bl	8007846 <HAL_PCD_EP_GetRxCount>
 8010e82:	4603      	mov	r3, r0
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3708      	adds	r7, #8
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}

08010e8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010e94:	4b03      	ldr	r3, [pc, #12]	; (8010ea4 <USBD_static_malloc+0x18>)
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	370c      	adds	r7, #12
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	20007408 	.word	0x20007408

08010ea8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]

}
 8010eb0:	bf00      	nop
 8010eb2:	370c      	adds	r7, #12
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eba:	4770      	bx	lr

08010ebc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b085      	sub	sp, #20
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010eca:	79fb      	ldrb	r3, [r7, #7]
 8010ecc:	2b03      	cmp	r3, #3
 8010ece:	d817      	bhi.n	8010f00 <USBD_Get_USB_Status+0x44>
 8010ed0:	a201      	add	r2, pc, #4	; (adr r2, 8010ed8 <USBD_Get_USB_Status+0x1c>)
 8010ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ed6:	bf00      	nop
 8010ed8:	08010ee9 	.word	0x08010ee9
 8010edc:	08010eef 	.word	0x08010eef
 8010ee0:	08010ef5 	.word	0x08010ef5
 8010ee4:	08010efb 	.word	0x08010efb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	73fb      	strb	r3, [r7, #15]
    break;
 8010eec:	e00b      	b.n	8010f06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010eee:	2303      	movs	r3, #3
 8010ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ef2:	e008      	b.n	8010f06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ef8:	e005      	b.n	8010f06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010efa:	2303      	movs	r3, #3
 8010efc:	73fb      	strb	r3, [r7, #15]
    break;
 8010efe:	e002      	b.n	8010f06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010f00:	2303      	movs	r3, #3
 8010f02:	73fb      	strb	r3, [r7, #15]
    break;
 8010f04:	bf00      	nop
  }
  return usb_status;
 8010f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3714      	adds	r7, #20
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr

08010f14 <__errno>:
 8010f14:	4b01      	ldr	r3, [pc, #4]	; (8010f1c <__errno+0x8>)
 8010f16:	6818      	ldr	r0, [r3, #0]
 8010f18:	4770      	bx	lr
 8010f1a:	bf00      	nop
 8010f1c:	200001b0 	.word	0x200001b0

08010f20 <std>:
 8010f20:	2300      	movs	r3, #0
 8010f22:	b510      	push	{r4, lr}
 8010f24:	4604      	mov	r4, r0
 8010f26:	e9c0 3300 	strd	r3, r3, [r0]
 8010f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f2e:	6083      	str	r3, [r0, #8]
 8010f30:	8181      	strh	r1, [r0, #12]
 8010f32:	6643      	str	r3, [r0, #100]	; 0x64
 8010f34:	81c2      	strh	r2, [r0, #14]
 8010f36:	6183      	str	r3, [r0, #24]
 8010f38:	4619      	mov	r1, r3
 8010f3a:	2208      	movs	r2, #8
 8010f3c:	305c      	adds	r0, #92	; 0x5c
 8010f3e:	f000 f934 	bl	80111aa <memset>
 8010f42:	4b05      	ldr	r3, [pc, #20]	; (8010f58 <std+0x38>)
 8010f44:	6263      	str	r3, [r4, #36]	; 0x24
 8010f46:	4b05      	ldr	r3, [pc, #20]	; (8010f5c <std+0x3c>)
 8010f48:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f4a:	4b05      	ldr	r3, [pc, #20]	; (8010f60 <std+0x40>)
 8010f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f4e:	4b05      	ldr	r3, [pc, #20]	; (8010f64 <std+0x44>)
 8010f50:	6224      	str	r4, [r4, #32]
 8010f52:	6323      	str	r3, [r4, #48]	; 0x30
 8010f54:	bd10      	pop	{r4, pc}
 8010f56:	bf00      	nop
 8010f58:	08011c79 	.word	0x08011c79
 8010f5c:	08011c9b 	.word	0x08011c9b
 8010f60:	08011cd3 	.word	0x08011cd3
 8010f64:	08011cf7 	.word	0x08011cf7

08010f68 <_cleanup_r>:
 8010f68:	4901      	ldr	r1, [pc, #4]	; (8010f70 <_cleanup_r+0x8>)
 8010f6a:	f000 b8af 	b.w	80110cc <_fwalk_reent>
 8010f6e:	bf00      	nop
 8010f70:	08012bf5 	.word	0x08012bf5

08010f74 <__sfmoreglue>:
 8010f74:	b570      	push	{r4, r5, r6, lr}
 8010f76:	1e4a      	subs	r2, r1, #1
 8010f78:	2568      	movs	r5, #104	; 0x68
 8010f7a:	4355      	muls	r5, r2
 8010f7c:	460e      	mov	r6, r1
 8010f7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010f82:	f000 f91b 	bl	80111bc <_malloc_r>
 8010f86:	4604      	mov	r4, r0
 8010f88:	b140      	cbz	r0, 8010f9c <__sfmoreglue+0x28>
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	e9c0 1600 	strd	r1, r6, [r0]
 8010f90:	300c      	adds	r0, #12
 8010f92:	60a0      	str	r0, [r4, #8]
 8010f94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010f98:	f000 f907 	bl	80111aa <memset>
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	bd70      	pop	{r4, r5, r6, pc}

08010fa0 <__sfp_lock_acquire>:
 8010fa0:	4801      	ldr	r0, [pc, #4]	; (8010fa8 <__sfp_lock_acquire+0x8>)
 8010fa2:	f000 b8f2 	b.w	801118a <__retarget_lock_acquire_recursive>
 8010fa6:	bf00      	nop
 8010fa8:	2000ef48 	.word	0x2000ef48

08010fac <__sfp_lock_release>:
 8010fac:	4801      	ldr	r0, [pc, #4]	; (8010fb4 <__sfp_lock_release+0x8>)
 8010fae:	f000 b8ed 	b.w	801118c <__retarget_lock_release_recursive>
 8010fb2:	bf00      	nop
 8010fb4:	2000ef48 	.word	0x2000ef48

08010fb8 <__sinit_lock_acquire>:
 8010fb8:	4801      	ldr	r0, [pc, #4]	; (8010fc0 <__sinit_lock_acquire+0x8>)
 8010fba:	f000 b8e6 	b.w	801118a <__retarget_lock_acquire_recursive>
 8010fbe:	bf00      	nop
 8010fc0:	2000ef43 	.word	0x2000ef43

08010fc4 <__sinit_lock_release>:
 8010fc4:	4801      	ldr	r0, [pc, #4]	; (8010fcc <__sinit_lock_release+0x8>)
 8010fc6:	f000 b8e1 	b.w	801118c <__retarget_lock_release_recursive>
 8010fca:	bf00      	nop
 8010fcc:	2000ef43 	.word	0x2000ef43

08010fd0 <__sinit>:
 8010fd0:	b510      	push	{r4, lr}
 8010fd2:	4604      	mov	r4, r0
 8010fd4:	f7ff fff0 	bl	8010fb8 <__sinit_lock_acquire>
 8010fd8:	69a3      	ldr	r3, [r4, #24]
 8010fda:	b11b      	cbz	r3, 8010fe4 <__sinit+0x14>
 8010fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fe0:	f7ff bff0 	b.w	8010fc4 <__sinit_lock_release>
 8010fe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010fe8:	6523      	str	r3, [r4, #80]	; 0x50
 8010fea:	4b13      	ldr	r3, [pc, #76]	; (8011038 <__sinit+0x68>)
 8010fec:	4a13      	ldr	r2, [pc, #76]	; (801103c <__sinit+0x6c>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	62a2      	str	r2, [r4, #40]	; 0x28
 8010ff2:	42a3      	cmp	r3, r4
 8010ff4:	bf04      	itt	eq
 8010ff6:	2301      	moveq	r3, #1
 8010ff8:	61a3      	streq	r3, [r4, #24]
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f000 f820 	bl	8011040 <__sfp>
 8011000:	6060      	str	r0, [r4, #4]
 8011002:	4620      	mov	r0, r4
 8011004:	f000 f81c 	bl	8011040 <__sfp>
 8011008:	60a0      	str	r0, [r4, #8]
 801100a:	4620      	mov	r0, r4
 801100c:	f000 f818 	bl	8011040 <__sfp>
 8011010:	2200      	movs	r2, #0
 8011012:	60e0      	str	r0, [r4, #12]
 8011014:	2104      	movs	r1, #4
 8011016:	6860      	ldr	r0, [r4, #4]
 8011018:	f7ff ff82 	bl	8010f20 <std>
 801101c:	68a0      	ldr	r0, [r4, #8]
 801101e:	2201      	movs	r2, #1
 8011020:	2109      	movs	r1, #9
 8011022:	f7ff ff7d 	bl	8010f20 <std>
 8011026:	68e0      	ldr	r0, [r4, #12]
 8011028:	2202      	movs	r2, #2
 801102a:	2112      	movs	r1, #18
 801102c:	f7ff ff78 	bl	8010f20 <std>
 8011030:	2301      	movs	r3, #1
 8011032:	61a3      	str	r3, [r4, #24]
 8011034:	e7d2      	b.n	8010fdc <__sinit+0xc>
 8011036:	bf00      	nop
 8011038:	0801a37c 	.word	0x0801a37c
 801103c:	08010f69 	.word	0x08010f69

08011040 <__sfp>:
 8011040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011042:	4607      	mov	r7, r0
 8011044:	f7ff ffac 	bl	8010fa0 <__sfp_lock_acquire>
 8011048:	4b1e      	ldr	r3, [pc, #120]	; (80110c4 <__sfp+0x84>)
 801104a:	681e      	ldr	r6, [r3, #0]
 801104c:	69b3      	ldr	r3, [r6, #24]
 801104e:	b913      	cbnz	r3, 8011056 <__sfp+0x16>
 8011050:	4630      	mov	r0, r6
 8011052:	f7ff ffbd 	bl	8010fd0 <__sinit>
 8011056:	3648      	adds	r6, #72	; 0x48
 8011058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801105c:	3b01      	subs	r3, #1
 801105e:	d503      	bpl.n	8011068 <__sfp+0x28>
 8011060:	6833      	ldr	r3, [r6, #0]
 8011062:	b30b      	cbz	r3, 80110a8 <__sfp+0x68>
 8011064:	6836      	ldr	r6, [r6, #0]
 8011066:	e7f7      	b.n	8011058 <__sfp+0x18>
 8011068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801106c:	b9d5      	cbnz	r5, 80110a4 <__sfp+0x64>
 801106e:	4b16      	ldr	r3, [pc, #88]	; (80110c8 <__sfp+0x88>)
 8011070:	60e3      	str	r3, [r4, #12]
 8011072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011076:	6665      	str	r5, [r4, #100]	; 0x64
 8011078:	f000 f886 	bl	8011188 <__retarget_lock_init_recursive>
 801107c:	f7ff ff96 	bl	8010fac <__sfp_lock_release>
 8011080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011088:	6025      	str	r5, [r4, #0]
 801108a:	61a5      	str	r5, [r4, #24]
 801108c:	2208      	movs	r2, #8
 801108e:	4629      	mov	r1, r5
 8011090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011094:	f000 f889 	bl	80111aa <memset>
 8011098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801109c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80110a0:	4620      	mov	r0, r4
 80110a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110a4:	3468      	adds	r4, #104	; 0x68
 80110a6:	e7d9      	b.n	801105c <__sfp+0x1c>
 80110a8:	2104      	movs	r1, #4
 80110aa:	4638      	mov	r0, r7
 80110ac:	f7ff ff62 	bl	8010f74 <__sfmoreglue>
 80110b0:	4604      	mov	r4, r0
 80110b2:	6030      	str	r0, [r6, #0]
 80110b4:	2800      	cmp	r0, #0
 80110b6:	d1d5      	bne.n	8011064 <__sfp+0x24>
 80110b8:	f7ff ff78 	bl	8010fac <__sfp_lock_release>
 80110bc:	230c      	movs	r3, #12
 80110be:	603b      	str	r3, [r7, #0]
 80110c0:	e7ee      	b.n	80110a0 <__sfp+0x60>
 80110c2:	bf00      	nop
 80110c4:	0801a37c 	.word	0x0801a37c
 80110c8:	ffff0001 	.word	0xffff0001

080110cc <_fwalk_reent>:
 80110cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110d0:	4606      	mov	r6, r0
 80110d2:	4688      	mov	r8, r1
 80110d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80110d8:	2700      	movs	r7, #0
 80110da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110de:	f1b9 0901 	subs.w	r9, r9, #1
 80110e2:	d505      	bpl.n	80110f0 <_fwalk_reent+0x24>
 80110e4:	6824      	ldr	r4, [r4, #0]
 80110e6:	2c00      	cmp	r4, #0
 80110e8:	d1f7      	bne.n	80110da <_fwalk_reent+0xe>
 80110ea:	4638      	mov	r0, r7
 80110ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110f0:	89ab      	ldrh	r3, [r5, #12]
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	d907      	bls.n	8011106 <_fwalk_reent+0x3a>
 80110f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110fa:	3301      	adds	r3, #1
 80110fc:	d003      	beq.n	8011106 <_fwalk_reent+0x3a>
 80110fe:	4629      	mov	r1, r5
 8011100:	4630      	mov	r0, r6
 8011102:	47c0      	blx	r8
 8011104:	4307      	orrs	r7, r0
 8011106:	3568      	adds	r5, #104	; 0x68
 8011108:	e7e9      	b.n	80110de <_fwalk_reent+0x12>
	...

0801110c <__libc_init_array>:
 801110c:	b570      	push	{r4, r5, r6, lr}
 801110e:	4d0d      	ldr	r5, [pc, #52]	; (8011144 <__libc_init_array+0x38>)
 8011110:	4c0d      	ldr	r4, [pc, #52]	; (8011148 <__libc_init_array+0x3c>)
 8011112:	1b64      	subs	r4, r4, r5
 8011114:	10a4      	asrs	r4, r4, #2
 8011116:	2600      	movs	r6, #0
 8011118:	42a6      	cmp	r6, r4
 801111a:	d109      	bne.n	8011130 <__libc_init_array+0x24>
 801111c:	4d0b      	ldr	r5, [pc, #44]	; (801114c <__libc_init_array+0x40>)
 801111e:	4c0c      	ldr	r4, [pc, #48]	; (8011150 <__libc_init_array+0x44>)
 8011120:	f002 fe9e 	bl	8013e60 <_init>
 8011124:	1b64      	subs	r4, r4, r5
 8011126:	10a4      	asrs	r4, r4, #2
 8011128:	2600      	movs	r6, #0
 801112a:	42a6      	cmp	r6, r4
 801112c:	d105      	bne.n	801113a <__libc_init_array+0x2e>
 801112e:	bd70      	pop	{r4, r5, r6, pc}
 8011130:	f855 3b04 	ldr.w	r3, [r5], #4
 8011134:	4798      	blx	r3
 8011136:	3601      	adds	r6, #1
 8011138:	e7ee      	b.n	8011118 <__libc_init_array+0xc>
 801113a:	f855 3b04 	ldr.w	r3, [r5], #4
 801113e:	4798      	blx	r3
 8011140:	3601      	adds	r6, #1
 8011142:	e7f2      	b.n	801112a <__libc_init_array+0x1e>
 8011144:	0801a72c 	.word	0x0801a72c
 8011148:	0801a72c 	.word	0x0801a72c
 801114c:	0801a72c 	.word	0x0801a72c
 8011150:	0801a730 	.word	0x0801a730

08011154 <__itoa>:
 8011154:	1e93      	subs	r3, r2, #2
 8011156:	2b22      	cmp	r3, #34	; 0x22
 8011158:	b510      	push	{r4, lr}
 801115a:	460c      	mov	r4, r1
 801115c:	d904      	bls.n	8011168 <__itoa+0x14>
 801115e:	2300      	movs	r3, #0
 8011160:	700b      	strb	r3, [r1, #0]
 8011162:	461c      	mov	r4, r3
 8011164:	4620      	mov	r0, r4
 8011166:	bd10      	pop	{r4, pc}
 8011168:	2a0a      	cmp	r2, #10
 801116a:	d109      	bne.n	8011180 <__itoa+0x2c>
 801116c:	2800      	cmp	r0, #0
 801116e:	da07      	bge.n	8011180 <__itoa+0x2c>
 8011170:	232d      	movs	r3, #45	; 0x2d
 8011172:	700b      	strb	r3, [r1, #0]
 8011174:	4240      	negs	r0, r0
 8011176:	2101      	movs	r1, #1
 8011178:	4421      	add	r1, r4
 801117a:	f000 fdd7 	bl	8011d2c <__utoa>
 801117e:	e7f1      	b.n	8011164 <__itoa+0x10>
 8011180:	2100      	movs	r1, #0
 8011182:	e7f9      	b.n	8011178 <__itoa+0x24>

08011184 <itoa>:
 8011184:	f7ff bfe6 	b.w	8011154 <__itoa>

08011188 <__retarget_lock_init_recursive>:
 8011188:	4770      	bx	lr

0801118a <__retarget_lock_acquire_recursive>:
 801118a:	4770      	bx	lr

0801118c <__retarget_lock_release_recursive>:
 801118c:	4770      	bx	lr

0801118e <memcpy>:
 801118e:	440a      	add	r2, r1
 8011190:	4291      	cmp	r1, r2
 8011192:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011196:	d100      	bne.n	801119a <memcpy+0xc>
 8011198:	4770      	bx	lr
 801119a:	b510      	push	{r4, lr}
 801119c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111a4:	4291      	cmp	r1, r2
 80111a6:	d1f9      	bne.n	801119c <memcpy+0xe>
 80111a8:	bd10      	pop	{r4, pc}

080111aa <memset>:
 80111aa:	4402      	add	r2, r0
 80111ac:	4603      	mov	r3, r0
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d100      	bne.n	80111b4 <memset+0xa>
 80111b2:	4770      	bx	lr
 80111b4:	f803 1b01 	strb.w	r1, [r3], #1
 80111b8:	e7f9      	b.n	80111ae <memset+0x4>
	...

080111bc <_malloc_r>:
 80111bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111be:	1ccd      	adds	r5, r1, #3
 80111c0:	f025 0503 	bic.w	r5, r5, #3
 80111c4:	3508      	adds	r5, #8
 80111c6:	2d0c      	cmp	r5, #12
 80111c8:	bf38      	it	cc
 80111ca:	250c      	movcc	r5, #12
 80111cc:	2d00      	cmp	r5, #0
 80111ce:	4606      	mov	r6, r0
 80111d0:	db01      	blt.n	80111d6 <_malloc_r+0x1a>
 80111d2:	42a9      	cmp	r1, r5
 80111d4:	d903      	bls.n	80111de <_malloc_r+0x22>
 80111d6:	230c      	movs	r3, #12
 80111d8:	6033      	str	r3, [r6, #0]
 80111da:	2000      	movs	r0, #0
 80111dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111de:	f001 fd63 	bl	8012ca8 <__malloc_lock>
 80111e2:	4921      	ldr	r1, [pc, #132]	; (8011268 <_malloc_r+0xac>)
 80111e4:	680a      	ldr	r2, [r1, #0]
 80111e6:	4614      	mov	r4, r2
 80111e8:	b99c      	cbnz	r4, 8011212 <_malloc_r+0x56>
 80111ea:	4f20      	ldr	r7, [pc, #128]	; (801126c <_malloc_r+0xb0>)
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	b923      	cbnz	r3, 80111fa <_malloc_r+0x3e>
 80111f0:	4621      	mov	r1, r4
 80111f2:	4630      	mov	r0, r6
 80111f4:	f000 fd10 	bl	8011c18 <_sbrk_r>
 80111f8:	6038      	str	r0, [r7, #0]
 80111fa:	4629      	mov	r1, r5
 80111fc:	4630      	mov	r0, r6
 80111fe:	f000 fd0b 	bl	8011c18 <_sbrk_r>
 8011202:	1c43      	adds	r3, r0, #1
 8011204:	d123      	bne.n	801124e <_malloc_r+0x92>
 8011206:	230c      	movs	r3, #12
 8011208:	6033      	str	r3, [r6, #0]
 801120a:	4630      	mov	r0, r6
 801120c:	f001 fd52 	bl	8012cb4 <__malloc_unlock>
 8011210:	e7e3      	b.n	80111da <_malloc_r+0x1e>
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	1b5b      	subs	r3, r3, r5
 8011216:	d417      	bmi.n	8011248 <_malloc_r+0x8c>
 8011218:	2b0b      	cmp	r3, #11
 801121a:	d903      	bls.n	8011224 <_malloc_r+0x68>
 801121c:	6023      	str	r3, [r4, #0]
 801121e:	441c      	add	r4, r3
 8011220:	6025      	str	r5, [r4, #0]
 8011222:	e004      	b.n	801122e <_malloc_r+0x72>
 8011224:	6863      	ldr	r3, [r4, #4]
 8011226:	42a2      	cmp	r2, r4
 8011228:	bf0c      	ite	eq
 801122a:	600b      	streq	r3, [r1, #0]
 801122c:	6053      	strne	r3, [r2, #4]
 801122e:	4630      	mov	r0, r6
 8011230:	f001 fd40 	bl	8012cb4 <__malloc_unlock>
 8011234:	f104 000b 	add.w	r0, r4, #11
 8011238:	1d23      	adds	r3, r4, #4
 801123a:	f020 0007 	bic.w	r0, r0, #7
 801123e:	1ac2      	subs	r2, r0, r3
 8011240:	d0cc      	beq.n	80111dc <_malloc_r+0x20>
 8011242:	1a1b      	subs	r3, r3, r0
 8011244:	50a3      	str	r3, [r4, r2]
 8011246:	e7c9      	b.n	80111dc <_malloc_r+0x20>
 8011248:	4622      	mov	r2, r4
 801124a:	6864      	ldr	r4, [r4, #4]
 801124c:	e7cc      	b.n	80111e8 <_malloc_r+0x2c>
 801124e:	1cc4      	adds	r4, r0, #3
 8011250:	f024 0403 	bic.w	r4, r4, #3
 8011254:	42a0      	cmp	r0, r4
 8011256:	d0e3      	beq.n	8011220 <_malloc_r+0x64>
 8011258:	1a21      	subs	r1, r4, r0
 801125a:	4630      	mov	r0, r6
 801125c:	f000 fcdc 	bl	8011c18 <_sbrk_r>
 8011260:	3001      	adds	r0, #1
 8011262:	d1dd      	bne.n	8011220 <_malloc_r+0x64>
 8011264:	e7cf      	b.n	8011206 <_malloc_r+0x4a>
 8011266:	bf00      	nop
 8011268:	20007628 	.word	0x20007628
 801126c:	2000762c 	.word	0x2000762c

08011270 <__cvt>:
 8011270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011274:	ec55 4b10 	vmov	r4, r5, d0
 8011278:	2d00      	cmp	r5, #0
 801127a:	460e      	mov	r6, r1
 801127c:	4619      	mov	r1, r3
 801127e:	462b      	mov	r3, r5
 8011280:	bfbb      	ittet	lt
 8011282:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011286:	461d      	movlt	r5, r3
 8011288:	2300      	movge	r3, #0
 801128a:	232d      	movlt	r3, #45	; 0x2d
 801128c:	700b      	strb	r3, [r1, #0]
 801128e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011290:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011294:	4691      	mov	r9, r2
 8011296:	f023 0820 	bic.w	r8, r3, #32
 801129a:	bfbc      	itt	lt
 801129c:	4622      	movlt	r2, r4
 801129e:	4614      	movlt	r4, r2
 80112a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80112a4:	d005      	beq.n	80112b2 <__cvt+0x42>
 80112a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80112aa:	d100      	bne.n	80112ae <__cvt+0x3e>
 80112ac:	3601      	adds	r6, #1
 80112ae:	2102      	movs	r1, #2
 80112b0:	e000      	b.n	80112b4 <__cvt+0x44>
 80112b2:	2103      	movs	r1, #3
 80112b4:	ab03      	add	r3, sp, #12
 80112b6:	9301      	str	r3, [sp, #4]
 80112b8:	ab02      	add	r3, sp, #8
 80112ba:	9300      	str	r3, [sp, #0]
 80112bc:	ec45 4b10 	vmov	d0, r4, r5
 80112c0:	4653      	mov	r3, sl
 80112c2:	4632      	mov	r2, r6
 80112c4:	f000 fe24 	bl	8011f10 <_dtoa_r>
 80112c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80112cc:	4607      	mov	r7, r0
 80112ce:	d102      	bne.n	80112d6 <__cvt+0x66>
 80112d0:	f019 0f01 	tst.w	r9, #1
 80112d4:	d022      	beq.n	801131c <__cvt+0xac>
 80112d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80112da:	eb07 0906 	add.w	r9, r7, r6
 80112de:	d110      	bne.n	8011302 <__cvt+0x92>
 80112e0:	783b      	ldrb	r3, [r7, #0]
 80112e2:	2b30      	cmp	r3, #48	; 0x30
 80112e4:	d10a      	bne.n	80112fc <__cvt+0x8c>
 80112e6:	2200      	movs	r2, #0
 80112e8:	2300      	movs	r3, #0
 80112ea:	4620      	mov	r0, r4
 80112ec:	4629      	mov	r1, r5
 80112ee:	f7ef fbeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80112f2:	b918      	cbnz	r0, 80112fc <__cvt+0x8c>
 80112f4:	f1c6 0601 	rsb	r6, r6, #1
 80112f8:	f8ca 6000 	str.w	r6, [sl]
 80112fc:	f8da 3000 	ldr.w	r3, [sl]
 8011300:	4499      	add	r9, r3
 8011302:	2200      	movs	r2, #0
 8011304:	2300      	movs	r3, #0
 8011306:	4620      	mov	r0, r4
 8011308:	4629      	mov	r1, r5
 801130a:	f7ef fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 801130e:	b108      	cbz	r0, 8011314 <__cvt+0xa4>
 8011310:	f8cd 900c 	str.w	r9, [sp, #12]
 8011314:	2230      	movs	r2, #48	; 0x30
 8011316:	9b03      	ldr	r3, [sp, #12]
 8011318:	454b      	cmp	r3, r9
 801131a:	d307      	bcc.n	801132c <__cvt+0xbc>
 801131c:	9b03      	ldr	r3, [sp, #12]
 801131e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011320:	1bdb      	subs	r3, r3, r7
 8011322:	4638      	mov	r0, r7
 8011324:	6013      	str	r3, [r2, #0]
 8011326:	b004      	add	sp, #16
 8011328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801132c:	1c59      	adds	r1, r3, #1
 801132e:	9103      	str	r1, [sp, #12]
 8011330:	701a      	strb	r2, [r3, #0]
 8011332:	e7f0      	b.n	8011316 <__cvt+0xa6>

08011334 <__exponent>:
 8011334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011336:	4603      	mov	r3, r0
 8011338:	2900      	cmp	r1, #0
 801133a:	bfb8      	it	lt
 801133c:	4249      	neglt	r1, r1
 801133e:	f803 2b02 	strb.w	r2, [r3], #2
 8011342:	bfb4      	ite	lt
 8011344:	222d      	movlt	r2, #45	; 0x2d
 8011346:	222b      	movge	r2, #43	; 0x2b
 8011348:	2909      	cmp	r1, #9
 801134a:	7042      	strb	r2, [r0, #1]
 801134c:	dd2a      	ble.n	80113a4 <__exponent+0x70>
 801134e:	f10d 0407 	add.w	r4, sp, #7
 8011352:	46a4      	mov	ip, r4
 8011354:	270a      	movs	r7, #10
 8011356:	46a6      	mov	lr, r4
 8011358:	460a      	mov	r2, r1
 801135a:	fb91 f6f7 	sdiv	r6, r1, r7
 801135e:	fb07 1516 	mls	r5, r7, r6, r1
 8011362:	3530      	adds	r5, #48	; 0x30
 8011364:	2a63      	cmp	r2, #99	; 0x63
 8011366:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801136a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801136e:	4631      	mov	r1, r6
 8011370:	dcf1      	bgt.n	8011356 <__exponent+0x22>
 8011372:	3130      	adds	r1, #48	; 0x30
 8011374:	f1ae 0502 	sub.w	r5, lr, #2
 8011378:	f804 1c01 	strb.w	r1, [r4, #-1]
 801137c:	1c44      	adds	r4, r0, #1
 801137e:	4629      	mov	r1, r5
 8011380:	4561      	cmp	r1, ip
 8011382:	d30a      	bcc.n	801139a <__exponent+0x66>
 8011384:	f10d 0209 	add.w	r2, sp, #9
 8011388:	eba2 020e 	sub.w	r2, r2, lr
 801138c:	4565      	cmp	r5, ip
 801138e:	bf88      	it	hi
 8011390:	2200      	movhi	r2, #0
 8011392:	4413      	add	r3, r2
 8011394:	1a18      	subs	r0, r3, r0
 8011396:	b003      	add	sp, #12
 8011398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801139a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801139e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80113a2:	e7ed      	b.n	8011380 <__exponent+0x4c>
 80113a4:	2330      	movs	r3, #48	; 0x30
 80113a6:	3130      	adds	r1, #48	; 0x30
 80113a8:	7083      	strb	r3, [r0, #2]
 80113aa:	70c1      	strb	r1, [r0, #3]
 80113ac:	1d03      	adds	r3, r0, #4
 80113ae:	e7f1      	b.n	8011394 <__exponent+0x60>

080113b0 <_printf_float>:
 80113b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	ed2d 8b02 	vpush	{d8}
 80113b8:	b08d      	sub	sp, #52	; 0x34
 80113ba:	460c      	mov	r4, r1
 80113bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80113c0:	4616      	mov	r6, r2
 80113c2:	461f      	mov	r7, r3
 80113c4:	4605      	mov	r5, r0
 80113c6:	f001 fc51 	bl	8012c6c <_localeconv_r>
 80113ca:	f8d0 a000 	ldr.w	sl, [r0]
 80113ce:	4650      	mov	r0, sl
 80113d0:	f7ee fefe 	bl	80001d0 <strlen>
 80113d4:	2300      	movs	r3, #0
 80113d6:	930a      	str	r3, [sp, #40]	; 0x28
 80113d8:	6823      	ldr	r3, [r4, #0]
 80113da:	9305      	str	r3, [sp, #20]
 80113dc:	f8d8 3000 	ldr.w	r3, [r8]
 80113e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80113e4:	3307      	adds	r3, #7
 80113e6:	f023 0307 	bic.w	r3, r3, #7
 80113ea:	f103 0208 	add.w	r2, r3, #8
 80113ee:	f8c8 2000 	str.w	r2, [r8]
 80113f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80113fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80113fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011402:	9307      	str	r3, [sp, #28]
 8011404:	f8cd 8018 	str.w	r8, [sp, #24]
 8011408:	ee08 0a10 	vmov	s16, r0
 801140c:	4b9f      	ldr	r3, [pc, #636]	; (801168c <_printf_float+0x2dc>)
 801140e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011416:	f7ef fb89 	bl	8000b2c <__aeabi_dcmpun>
 801141a:	bb88      	cbnz	r0, 8011480 <_printf_float+0xd0>
 801141c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011420:	4b9a      	ldr	r3, [pc, #616]	; (801168c <_printf_float+0x2dc>)
 8011422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011426:	f7ef fb63 	bl	8000af0 <__aeabi_dcmple>
 801142a:	bb48      	cbnz	r0, 8011480 <_printf_float+0xd0>
 801142c:	2200      	movs	r2, #0
 801142e:	2300      	movs	r3, #0
 8011430:	4640      	mov	r0, r8
 8011432:	4649      	mov	r1, r9
 8011434:	f7ef fb52 	bl	8000adc <__aeabi_dcmplt>
 8011438:	b110      	cbz	r0, 8011440 <_printf_float+0x90>
 801143a:	232d      	movs	r3, #45	; 0x2d
 801143c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011440:	4b93      	ldr	r3, [pc, #588]	; (8011690 <_printf_float+0x2e0>)
 8011442:	4894      	ldr	r0, [pc, #592]	; (8011694 <_printf_float+0x2e4>)
 8011444:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011448:	bf94      	ite	ls
 801144a:	4698      	movls	r8, r3
 801144c:	4680      	movhi	r8, r0
 801144e:	2303      	movs	r3, #3
 8011450:	6123      	str	r3, [r4, #16]
 8011452:	9b05      	ldr	r3, [sp, #20]
 8011454:	f023 0204 	bic.w	r2, r3, #4
 8011458:	6022      	str	r2, [r4, #0]
 801145a:	f04f 0900 	mov.w	r9, #0
 801145e:	9700      	str	r7, [sp, #0]
 8011460:	4633      	mov	r3, r6
 8011462:	aa0b      	add	r2, sp, #44	; 0x2c
 8011464:	4621      	mov	r1, r4
 8011466:	4628      	mov	r0, r5
 8011468:	f000 f9d8 	bl	801181c <_printf_common>
 801146c:	3001      	adds	r0, #1
 801146e:	f040 8090 	bne.w	8011592 <_printf_float+0x1e2>
 8011472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011476:	b00d      	add	sp, #52	; 0x34
 8011478:	ecbd 8b02 	vpop	{d8}
 801147c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011480:	4642      	mov	r2, r8
 8011482:	464b      	mov	r3, r9
 8011484:	4640      	mov	r0, r8
 8011486:	4649      	mov	r1, r9
 8011488:	f7ef fb50 	bl	8000b2c <__aeabi_dcmpun>
 801148c:	b140      	cbz	r0, 80114a0 <_printf_float+0xf0>
 801148e:	464b      	mov	r3, r9
 8011490:	2b00      	cmp	r3, #0
 8011492:	bfbc      	itt	lt
 8011494:	232d      	movlt	r3, #45	; 0x2d
 8011496:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801149a:	487f      	ldr	r0, [pc, #508]	; (8011698 <_printf_float+0x2e8>)
 801149c:	4b7f      	ldr	r3, [pc, #508]	; (801169c <_printf_float+0x2ec>)
 801149e:	e7d1      	b.n	8011444 <_printf_float+0x94>
 80114a0:	6863      	ldr	r3, [r4, #4]
 80114a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80114a6:	9206      	str	r2, [sp, #24]
 80114a8:	1c5a      	adds	r2, r3, #1
 80114aa:	d13f      	bne.n	801152c <_printf_float+0x17c>
 80114ac:	2306      	movs	r3, #6
 80114ae:	6063      	str	r3, [r4, #4]
 80114b0:	9b05      	ldr	r3, [sp, #20]
 80114b2:	6861      	ldr	r1, [r4, #4]
 80114b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80114b8:	2300      	movs	r3, #0
 80114ba:	9303      	str	r3, [sp, #12]
 80114bc:	ab0a      	add	r3, sp, #40	; 0x28
 80114be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80114c2:	ab09      	add	r3, sp, #36	; 0x24
 80114c4:	ec49 8b10 	vmov	d0, r8, r9
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	6022      	str	r2, [r4, #0]
 80114cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80114d0:	4628      	mov	r0, r5
 80114d2:	f7ff fecd 	bl	8011270 <__cvt>
 80114d6:	9b06      	ldr	r3, [sp, #24]
 80114d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80114da:	2b47      	cmp	r3, #71	; 0x47
 80114dc:	4680      	mov	r8, r0
 80114de:	d108      	bne.n	80114f2 <_printf_float+0x142>
 80114e0:	1cc8      	adds	r0, r1, #3
 80114e2:	db02      	blt.n	80114ea <_printf_float+0x13a>
 80114e4:	6863      	ldr	r3, [r4, #4]
 80114e6:	4299      	cmp	r1, r3
 80114e8:	dd41      	ble.n	801156e <_printf_float+0x1be>
 80114ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80114ee:	fa5f fb8b 	uxtb.w	fp, fp
 80114f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80114f6:	d820      	bhi.n	801153a <_printf_float+0x18a>
 80114f8:	3901      	subs	r1, #1
 80114fa:	465a      	mov	r2, fp
 80114fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011500:	9109      	str	r1, [sp, #36]	; 0x24
 8011502:	f7ff ff17 	bl	8011334 <__exponent>
 8011506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011508:	1813      	adds	r3, r2, r0
 801150a:	2a01      	cmp	r2, #1
 801150c:	4681      	mov	r9, r0
 801150e:	6123      	str	r3, [r4, #16]
 8011510:	dc02      	bgt.n	8011518 <_printf_float+0x168>
 8011512:	6822      	ldr	r2, [r4, #0]
 8011514:	07d2      	lsls	r2, r2, #31
 8011516:	d501      	bpl.n	801151c <_printf_float+0x16c>
 8011518:	3301      	adds	r3, #1
 801151a:	6123      	str	r3, [r4, #16]
 801151c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011520:	2b00      	cmp	r3, #0
 8011522:	d09c      	beq.n	801145e <_printf_float+0xae>
 8011524:	232d      	movs	r3, #45	; 0x2d
 8011526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801152a:	e798      	b.n	801145e <_printf_float+0xae>
 801152c:	9a06      	ldr	r2, [sp, #24]
 801152e:	2a47      	cmp	r2, #71	; 0x47
 8011530:	d1be      	bne.n	80114b0 <_printf_float+0x100>
 8011532:	2b00      	cmp	r3, #0
 8011534:	d1bc      	bne.n	80114b0 <_printf_float+0x100>
 8011536:	2301      	movs	r3, #1
 8011538:	e7b9      	b.n	80114ae <_printf_float+0xfe>
 801153a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801153e:	d118      	bne.n	8011572 <_printf_float+0x1c2>
 8011540:	2900      	cmp	r1, #0
 8011542:	6863      	ldr	r3, [r4, #4]
 8011544:	dd0b      	ble.n	801155e <_printf_float+0x1ae>
 8011546:	6121      	str	r1, [r4, #16]
 8011548:	b913      	cbnz	r3, 8011550 <_printf_float+0x1a0>
 801154a:	6822      	ldr	r2, [r4, #0]
 801154c:	07d0      	lsls	r0, r2, #31
 801154e:	d502      	bpl.n	8011556 <_printf_float+0x1a6>
 8011550:	3301      	adds	r3, #1
 8011552:	440b      	add	r3, r1
 8011554:	6123      	str	r3, [r4, #16]
 8011556:	65a1      	str	r1, [r4, #88]	; 0x58
 8011558:	f04f 0900 	mov.w	r9, #0
 801155c:	e7de      	b.n	801151c <_printf_float+0x16c>
 801155e:	b913      	cbnz	r3, 8011566 <_printf_float+0x1b6>
 8011560:	6822      	ldr	r2, [r4, #0]
 8011562:	07d2      	lsls	r2, r2, #31
 8011564:	d501      	bpl.n	801156a <_printf_float+0x1ba>
 8011566:	3302      	adds	r3, #2
 8011568:	e7f4      	b.n	8011554 <_printf_float+0x1a4>
 801156a:	2301      	movs	r3, #1
 801156c:	e7f2      	b.n	8011554 <_printf_float+0x1a4>
 801156e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011574:	4299      	cmp	r1, r3
 8011576:	db05      	blt.n	8011584 <_printf_float+0x1d4>
 8011578:	6823      	ldr	r3, [r4, #0]
 801157a:	6121      	str	r1, [r4, #16]
 801157c:	07d8      	lsls	r0, r3, #31
 801157e:	d5ea      	bpl.n	8011556 <_printf_float+0x1a6>
 8011580:	1c4b      	adds	r3, r1, #1
 8011582:	e7e7      	b.n	8011554 <_printf_float+0x1a4>
 8011584:	2900      	cmp	r1, #0
 8011586:	bfd4      	ite	le
 8011588:	f1c1 0202 	rsble	r2, r1, #2
 801158c:	2201      	movgt	r2, #1
 801158e:	4413      	add	r3, r2
 8011590:	e7e0      	b.n	8011554 <_printf_float+0x1a4>
 8011592:	6823      	ldr	r3, [r4, #0]
 8011594:	055a      	lsls	r2, r3, #21
 8011596:	d407      	bmi.n	80115a8 <_printf_float+0x1f8>
 8011598:	6923      	ldr	r3, [r4, #16]
 801159a:	4642      	mov	r2, r8
 801159c:	4631      	mov	r1, r6
 801159e:	4628      	mov	r0, r5
 80115a0:	47b8      	blx	r7
 80115a2:	3001      	adds	r0, #1
 80115a4:	d12c      	bne.n	8011600 <_printf_float+0x250>
 80115a6:	e764      	b.n	8011472 <_printf_float+0xc2>
 80115a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80115ac:	f240 80e0 	bls.w	8011770 <_printf_float+0x3c0>
 80115b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80115b4:	2200      	movs	r2, #0
 80115b6:	2300      	movs	r3, #0
 80115b8:	f7ef fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 80115bc:	2800      	cmp	r0, #0
 80115be:	d034      	beq.n	801162a <_printf_float+0x27a>
 80115c0:	4a37      	ldr	r2, [pc, #220]	; (80116a0 <_printf_float+0x2f0>)
 80115c2:	2301      	movs	r3, #1
 80115c4:	4631      	mov	r1, r6
 80115c6:	4628      	mov	r0, r5
 80115c8:	47b8      	blx	r7
 80115ca:	3001      	adds	r0, #1
 80115cc:	f43f af51 	beq.w	8011472 <_printf_float+0xc2>
 80115d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80115d4:	429a      	cmp	r2, r3
 80115d6:	db02      	blt.n	80115de <_printf_float+0x22e>
 80115d8:	6823      	ldr	r3, [r4, #0]
 80115da:	07d8      	lsls	r0, r3, #31
 80115dc:	d510      	bpl.n	8011600 <_printf_float+0x250>
 80115de:	ee18 3a10 	vmov	r3, s16
 80115e2:	4652      	mov	r2, sl
 80115e4:	4631      	mov	r1, r6
 80115e6:	4628      	mov	r0, r5
 80115e8:	47b8      	blx	r7
 80115ea:	3001      	adds	r0, #1
 80115ec:	f43f af41 	beq.w	8011472 <_printf_float+0xc2>
 80115f0:	f04f 0800 	mov.w	r8, #0
 80115f4:	f104 091a 	add.w	r9, r4, #26
 80115f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115fa:	3b01      	subs	r3, #1
 80115fc:	4543      	cmp	r3, r8
 80115fe:	dc09      	bgt.n	8011614 <_printf_float+0x264>
 8011600:	6823      	ldr	r3, [r4, #0]
 8011602:	079b      	lsls	r3, r3, #30
 8011604:	f100 8105 	bmi.w	8011812 <_printf_float+0x462>
 8011608:	68e0      	ldr	r0, [r4, #12]
 801160a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801160c:	4298      	cmp	r0, r3
 801160e:	bfb8      	it	lt
 8011610:	4618      	movlt	r0, r3
 8011612:	e730      	b.n	8011476 <_printf_float+0xc6>
 8011614:	2301      	movs	r3, #1
 8011616:	464a      	mov	r2, r9
 8011618:	4631      	mov	r1, r6
 801161a:	4628      	mov	r0, r5
 801161c:	47b8      	blx	r7
 801161e:	3001      	adds	r0, #1
 8011620:	f43f af27 	beq.w	8011472 <_printf_float+0xc2>
 8011624:	f108 0801 	add.w	r8, r8, #1
 8011628:	e7e6      	b.n	80115f8 <_printf_float+0x248>
 801162a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801162c:	2b00      	cmp	r3, #0
 801162e:	dc39      	bgt.n	80116a4 <_printf_float+0x2f4>
 8011630:	4a1b      	ldr	r2, [pc, #108]	; (80116a0 <_printf_float+0x2f0>)
 8011632:	2301      	movs	r3, #1
 8011634:	4631      	mov	r1, r6
 8011636:	4628      	mov	r0, r5
 8011638:	47b8      	blx	r7
 801163a:	3001      	adds	r0, #1
 801163c:	f43f af19 	beq.w	8011472 <_printf_float+0xc2>
 8011640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011644:	4313      	orrs	r3, r2
 8011646:	d102      	bne.n	801164e <_printf_float+0x29e>
 8011648:	6823      	ldr	r3, [r4, #0]
 801164a:	07d9      	lsls	r1, r3, #31
 801164c:	d5d8      	bpl.n	8011600 <_printf_float+0x250>
 801164e:	ee18 3a10 	vmov	r3, s16
 8011652:	4652      	mov	r2, sl
 8011654:	4631      	mov	r1, r6
 8011656:	4628      	mov	r0, r5
 8011658:	47b8      	blx	r7
 801165a:	3001      	adds	r0, #1
 801165c:	f43f af09 	beq.w	8011472 <_printf_float+0xc2>
 8011660:	f04f 0900 	mov.w	r9, #0
 8011664:	f104 0a1a 	add.w	sl, r4, #26
 8011668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801166a:	425b      	negs	r3, r3
 801166c:	454b      	cmp	r3, r9
 801166e:	dc01      	bgt.n	8011674 <_printf_float+0x2c4>
 8011670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011672:	e792      	b.n	801159a <_printf_float+0x1ea>
 8011674:	2301      	movs	r3, #1
 8011676:	4652      	mov	r2, sl
 8011678:	4631      	mov	r1, r6
 801167a:	4628      	mov	r0, r5
 801167c:	47b8      	blx	r7
 801167e:	3001      	adds	r0, #1
 8011680:	f43f aef7 	beq.w	8011472 <_printf_float+0xc2>
 8011684:	f109 0901 	add.w	r9, r9, #1
 8011688:	e7ee      	b.n	8011668 <_printf_float+0x2b8>
 801168a:	bf00      	nop
 801168c:	7fefffff 	.word	0x7fefffff
 8011690:	0801a380 	.word	0x0801a380
 8011694:	0801a384 	.word	0x0801a384
 8011698:	0801a38c 	.word	0x0801a38c
 801169c:	0801a388 	.word	0x0801a388
 80116a0:	0801a390 	.word	0x0801a390
 80116a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80116a8:	429a      	cmp	r2, r3
 80116aa:	bfa8      	it	ge
 80116ac:	461a      	movge	r2, r3
 80116ae:	2a00      	cmp	r2, #0
 80116b0:	4691      	mov	r9, r2
 80116b2:	dc37      	bgt.n	8011724 <_printf_float+0x374>
 80116b4:	f04f 0b00 	mov.w	fp, #0
 80116b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80116bc:	f104 021a 	add.w	r2, r4, #26
 80116c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80116c2:	9305      	str	r3, [sp, #20]
 80116c4:	eba3 0309 	sub.w	r3, r3, r9
 80116c8:	455b      	cmp	r3, fp
 80116ca:	dc33      	bgt.n	8011734 <_printf_float+0x384>
 80116cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80116d0:	429a      	cmp	r2, r3
 80116d2:	db3b      	blt.n	801174c <_printf_float+0x39c>
 80116d4:	6823      	ldr	r3, [r4, #0]
 80116d6:	07da      	lsls	r2, r3, #31
 80116d8:	d438      	bmi.n	801174c <_printf_float+0x39c>
 80116da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116dc:	9b05      	ldr	r3, [sp, #20]
 80116de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116e0:	1ad3      	subs	r3, r2, r3
 80116e2:	eba2 0901 	sub.w	r9, r2, r1
 80116e6:	4599      	cmp	r9, r3
 80116e8:	bfa8      	it	ge
 80116ea:	4699      	movge	r9, r3
 80116ec:	f1b9 0f00 	cmp.w	r9, #0
 80116f0:	dc35      	bgt.n	801175e <_printf_float+0x3ae>
 80116f2:	f04f 0800 	mov.w	r8, #0
 80116f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80116fa:	f104 0a1a 	add.w	sl, r4, #26
 80116fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011702:	1a9b      	subs	r3, r3, r2
 8011704:	eba3 0309 	sub.w	r3, r3, r9
 8011708:	4543      	cmp	r3, r8
 801170a:	f77f af79 	ble.w	8011600 <_printf_float+0x250>
 801170e:	2301      	movs	r3, #1
 8011710:	4652      	mov	r2, sl
 8011712:	4631      	mov	r1, r6
 8011714:	4628      	mov	r0, r5
 8011716:	47b8      	blx	r7
 8011718:	3001      	adds	r0, #1
 801171a:	f43f aeaa 	beq.w	8011472 <_printf_float+0xc2>
 801171e:	f108 0801 	add.w	r8, r8, #1
 8011722:	e7ec      	b.n	80116fe <_printf_float+0x34e>
 8011724:	4613      	mov	r3, r2
 8011726:	4631      	mov	r1, r6
 8011728:	4642      	mov	r2, r8
 801172a:	4628      	mov	r0, r5
 801172c:	47b8      	blx	r7
 801172e:	3001      	adds	r0, #1
 8011730:	d1c0      	bne.n	80116b4 <_printf_float+0x304>
 8011732:	e69e      	b.n	8011472 <_printf_float+0xc2>
 8011734:	2301      	movs	r3, #1
 8011736:	4631      	mov	r1, r6
 8011738:	4628      	mov	r0, r5
 801173a:	9205      	str	r2, [sp, #20]
 801173c:	47b8      	blx	r7
 801173e:	3001      	adds	r0, #1
 8011740:	f43f ae97 	beq.w	8011472 <_printf_float+0xc2>
 8011744:	9a05      	ldr	r2, [sp, #20]
 8011746:	f10b 0b01 	add.w	fp, fp, #1
 801174a:	e7b9      	b.n	80116c0 <_printf_float+0x310>
 801174c:	ee18 3a10 	vmov	r3, s16
 8011750:	4652      	mov	r2, sl
 8011752:	4631      	mov	r1, r6
 8011754:	4628      	mov	r0, r5
 8011756:	47b8      	blx	r7
 8011758:	3001      	adds	r0, #1
 801175a:	d1be      	bne.n	80116da <_printf_float+0x32a>
 801175c:	e689      	b.n	8011472 <_printf_float+0xc2>
 801175e:	9a05      	ldr	r2, [sp, #20]
 8011760:	464b      	mov	r3, r9
 8011762:	4442      	add	r2, r8
 8011764:	4631      	mov	r1, r6
 8011766:	4628      	mov	r0, r5
 8011768:	47b8      	blx	r7
 801176a:	3001      	adds	r0, #1
 801176c:	d1c1      	bne.n	80116f2 <_printf_float+0x342>
 801176e:	e680      	b.n	8011472 <_printf_float+0xc2>
 8011770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011772:	2a01      	cmp	r2, #1
 8011774:	dc01      	bgt.n	801177a <_printf_float+0x3ca>
 8011776:	07db      	lsls	r3, r3, #31
 8011778:	d538      	bpl.n	80117ec <_printf_float+0x43c>
 801177a:	2301      	movs	r3, #1
 801177c:	4642      	mov	r2, r8
 801177e:	4631      	mov	r1, r6
 8011780:	4628      	mov	r0, r5
 8011782:	47b8      	blx	r7
 8011784:	3001      	adds	r0, #1
 8011786:	f43f ae74 	beq.w	8011472 <_printf_float+0xc2>
 801178a:	ee18 3a10 	vmov	r3, s16
 801178e:	4652      	mov	r2, sl
 8011790:	4631      	mov	r1, r6
 8011792:	4628      	mov	r0, r5
 8011794:	47b8      	blx	r7
 8011796:	3001      	adds	r0, #1
 8011798:	f43f ae6b 	beq.w	8011472 <_printf_float+0xc2>
 801179c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80117a0:	2200      	movs	r2, #0
 80117a2:	2300      	movs	r3, #0
 80117a4:	f7ef f990 	bl	8000ac8 <__aeabi_dcmpeq>
 80117a8:	b9d8      	cbnz	r0, 80117e2 <_printf_float+0x432>
 80117aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117ac:	f108 0201 	add.w	r2, r8, #1
 80117b0:	3b01      	subs	r3, #1
 80117b2:	4631      	mov	r1, r6
 80117b4:	4628      	mov	r0, r5
 80117b6:	47b8      	blx	r7
 80117b8:	3001      	adds	r0, #1
 80117ba:	d10e      	bne.n	80117da <_printf_float+0x42a>
 80117bc:	e659      	b.n	8011472 <_printf_float+0xc2>
 80117be:	2301      	movs	r3, #1
 80117c0:	4652      	mov	r2, sl
 80117c2:	4631      	mov	r1, r6
 80117c4:	4628      	mov	r0, r5
 80117c6:	47b8      	blx	r7
 80117c8:	3001      	adds	r0, #1
 80117ca:	f43f ae52 	beq.w	8011472 <_printf_float+0xc2>
 80117ce:	f108 0801 	add.w	r8, r8, #1
 80117d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117d4:	3b01      	subs	r3, #1
 80117d6:	4543      	cmp	r3, r8
 80117d8:	dcf1      	bgt.n	80117be <_printf_float+0x40e>
 80117da:	464b      	mov	r3, r9
 80117dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80117e0:	e6dc      	b.n	801159c <_printf_float+0x1ec>
 80117e2:	f04f 0800 	mov.w	r8, #0
 80117e6:	f104 0a1a 	add.w	sl, r4, #26
 80117ea:	e7f2      	b.n	80117d2 <_printf_float+0x422>
 80117ec:	2301      	movs	r3, #1
 80117ee:	4642      	mov	r2, r8
 80117f0:	e7df      	b.n	80117b2 <_printf_float+0x402>
 80117f2:	2301      	movs	r3, #1
 80117f4:	464a      	mov	r2, r9
 80117f6:	4631      	mov	r1, r6
 80117f8:	4628      	mov	r0, r5
 80117fa:	47b8      	blx	r7
 80117fc:	3001      	adds	r0, #1
 80117fe:	f43f ae38 	beq.w	8011472 <_printf_float+0xc2>
 8011802:	f108 0801 	add.w	r8, r8, #1
 8011806:	68e3      	ldr	r3, [r4, #12]
 8011808:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801180a:	1a5b      	subs	r3, r3, r1
 801180c:	4543      	cmp	r3, r8
 801180e:	dcf0      	bgt.n	80117f2 <_printf_float+0x442>
 8011810:	e6fa      	b.n	8011608 <_printf_float+0x258>
 8011812:	f04f 0800 	mov.w	r8, #0
 8011816:	f104 0919 	add.w	r9, r4, #25
 801181a:	e7f4      	b.n	8011806 <_printf_float+0x456>

0801181c <_printf_common>:
 801181c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011820:	4616      	mov	r6, r2
 8011822:	4699      	mov	r9, r3
 8011824:	688a      	ldr	r2, [r1, #8]
 8011826:	690b      	ldr	r3, [r1, #16]
 8011828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801182c:	4293      	cmp	r3, r2
 801182e:	bfb8      	it	lt
 8011830:	4613      	movlt	r3, r2
 8011832:	6033      	str	r3, [r6, #0]
 8011834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011838:	4607      	mov	r7, r0
 801183a:	460c      	mov	r4, r1
 801183c:	b10a      	cbz	r2, 8011842 <_printf_common+0x26>
 801183e:	3301      	adds	r3, #1
 8011840:	6033      	str	r3, [r6, #0]
 8011842:	6823      	ldr	r3, [r4, #0]
 8011844:	0699      	lsls	r1, r3, #26
 8011846:	bf42      	ittt	mi
 8011848:	6833      	ldrmi	r3, [r6, #0]
 801184a:	3302      	addmi	r3, #2
 801184c:	6033      	strmi	r3, [r6, #0]
 801184e:	6825      	ldr	r5, [r4, #0]
 8011850:	f015 0506 	ands.w	r5, r5, #6
 8011854:	d106      	bne.n	8011864 <_printf_common+0x48>
 8011856:	f104 0a19 	add.w	sl, r4, #25
 801185a:	68e3      	ldr	r3, [r4, #12]
 801185c:	6832      	ldr	r2, [r6, #0]
 801185e:	1a9b      	subs	r3, r3, r2
 8011860:	42ab      	cmp	r3, r5
 8011862:	dc26      	bgt.n	80118b2 <_printf_common+0x96>
 8011864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011868:	1e13      	subs	r3, r2, #0
 801186a:	6822      	ldr	r2, [r4, #0]
 801186c:	bf18      	it	ne
 801186e:	2301      	movne	r3, #1
 8011870:	0692      	lsls	r2, r2, #26
 8011872:	d42b      	bmi.n	80118cc <_printf_common+0xb0>
 8011874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011878:	4649      	mov	r1, r9
 801187a:	4638      	mov	r0, r7
 801187c:	47c0      	blx	r8
 801187e:	3001      	adds	r0, #1
 8011880:	d01e      	beq.n	80118c0 <_printf_common+0xa4>
 8011882:	6823      	ldr	r3, [r4, #0]
 8011884:	68e5      	ldr	r5, [r4, #12]
 8011886:	6832      	ldr	r2, [r6, #0]
 8011888:	f003 0306 	and.w	r3, r3, #6
 801188c:	2b04      	cmp	r3, #4
 801188e:	bf08      	it	eq
 8011890:	1aad      	subeq	r5, r5, r2
 8011892:	68a3      	ldr	r3, [r4, #8]
 8011894:	6922      	ldr	r2, [r4, #16]
 8011896:	bf0c      	ite	eq
 8011898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801189c:	2500      	movne	r5, #0
 801189e:	4293      	cmp	r3, r2
 80118a0:	bfc4      	itt	gt
 80118a2:	1a9b      	subgt	r3, r3, r2
 80118a4:	18ed      	addgt	r5, r5, r3
 80118a6:	2600      	movs	r6, #0
 80118a8:	341a      	adds	r4, #26
 80118aa:	42b5      	cmp	r5, r6
 80118ac:	d11a      	bne.n	80118e4 <_printf_common+0xc8>
 80118ae:	2000      	movs	r0, #0
 80118b0:	e008      	b.n	80118c4 <_printf_common+0xa8>
 80118b2:	2301      	movs	r3, #1
 80118b4:	4652      	mov	r2, sl
 80118b6:	4649      	mov	r1, r9
 80118b8:	4638      	mov	r0, r7
 80118ba:	47c0      	blx	r8
 80118bc:	3001      	adds	r0, #1
 80118be:	d103      	bne.n	80118c8 <_printf_common+0xac>
 80118c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118c8:	3501      	adds	r5, #1
 80118ca:	e7c6      	b.n	801185a <_printf_common+0x3e>
 80118cc:	18e1      	adds	r1, r4, r3
 80118ce:	1c5a      	adds	r2, r3, #1
 80118d0:	2030      	movs	r0, #48	; 0x30
 80118d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80118d6:	4422      	add	r2, r4
 80118d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80118dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80118e0:	3302      	adds	r3, #2
 80118e2:	e7c7      	b.n	8011874 <_printf_common+0x58>
 80118e4:	2301      	movs	r3, #1
 80118e6:	4622      	mov	r2, r4
 80118e8:	4649      	mov	r1, r9
 80118ea:	4638      	mov	r0, r7
 80118ec:	47c0      	blx	r8
 80118ee:	3001      	adds	r0, #1
 80118f0:	d0e6      	beq.n	80118c0 <_printf_common+0xa4>
 80118f2:	3601      	adds	r6, #1
 80118f4:	e7d9      	b.n	80118aa <_printf_common+0x8e>
	...

080118f8 <_printf_i>:
 80118f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118fc:	460c      	mov	r4, r1
 80118fe:	4691      	mov	r9, r2
 8011900:	7e27      	ldrb	r7, [r4, #24]
 8011902:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011904:	2f78      	cmp	r7, #120	; 0x78
 8011906:	4680      	mov	r8, r0
 8011908:	469a      	mov	sl, r3
 801190a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801190e:	d807      	bhi.n	8011920 <_printf_i+0x28>
 8011910:	2f62      	cmp	r7, #98	; 0x62
 8011912:	d80a      	bhi.n	801192a <_printf_i+0x32>
 8011914:	2f00      	cmp	r7, #0
 8011916:	f000 80d8 	beq.w	8011aca <_printf_i+0x1d2>
 801191a:	2f58      	cmp	r7, #88	; 0x58
 801191c:	f000 80a3 	beq.w	8011a66 <_printf_i+0x16e>
 8011920:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011928:	e03a      	b.n	80119a0 <_printf_i+0xa8>
 801192a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801192e:	2b15      	cmp	r3, #21
 8011930:	d8f6      	bhi.n	8011920 <_printf_i+0x28>
 8011932:	a001      	add	r0, pc, #4	; (adr r0, 8011938 <_printf_i+0x40>)
 8011934:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011938:	08011991 	.word	0x08011991
 801193c:	080119a5 	.word	0x080119a5
 8011940:	08011921 	.word	0x08011921
 8011944:	08011921 	.word	0x08011921
 8011948:	08011921 	.word	0x08011921
 801194c:	08011921 	.word	0x08011921
 8011950:	080119a5 	.word	0x080119a5
 8011954:	08011921 	.word	0x08011921
 8011958:	08011921 	.word	0x08011921
 801195c:	08011921 	.word	0x08011921
 8011960:	08011921 	.word	0x08011921
 8011964:	08011ab1 	.word	0x08011ab1
 8011968:	080119d5 	.word	0x080119d5
 801196c:	08011a93 	.word	0x08011a93
 8011970:	08011921 	.word	0x08011921
 8011974:	08011921 	.word	0x08011921
 8011978:	08011ad3 	.word	0x08011ad3
 801197c:	08011921 	.word	0x08011921
 8011980:	080119d5 	.word	0x080119d5
 8011984:	08011921 	.word	0x08011921
 8011988:	08011921 	.word	0x08011921
 801198c:	08011a9b 	.word	0x08011a9b
 8011990:	680b      	ldr	r3, [r1, #0]
 8011992:	1d1a      	adds	r2, r3, #4
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	600a      	str	r2, [r1, #0]
 8011998:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801199c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119a0:	2301      	movs	r3, #1
 80119a2:	e0a3      	b.n	8011aec <_printf_i+0x1f4>
 80119a4:	6825      	ldr	r5, [r4, #0]
 80119a6:	6808      	ldr	r0, [r1, #0]
 80119a8:	062e      	lsls	r6, r5, #24
 80119aa:	f100 0304 	add.w	r3, r0, #4
 80119ae:	d50a      	bpl.n	80119c6 <_printf_i+0xce>
 80119b0:	6805      	ldr	r5, [r0, #0]
 80119b2:	600b      	str	r3, [r1, #0]
 80119b4:	2d00      	cmp	r5, #0
 80119b6:	da03      	bge.n	80119c0 <_printf_i+0xc8>
 80119b8:	232d      	movs	r3, #45	; 0x2d
 80119ba:	426d      	negs	r5, r5
 80119bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119c0:	485e      	ldr	r0, [pc, #376]	; (8011b3c <_printf_i+0x244>)
 80119c2:	230a      	movs	r3, #10
 80119c4:	e019      	b.n	80119fa <_printf_i+0x102>
 80119c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80119ca:	6805      	ldr	r5, [r0, #0]
 80119cc:	600b      	str	r3, [r1, #0]
 80119ce:	bf18      	it	ne
 80119d0:	b22d      	sxthne	r5, r5
 80119d2:	e7ef      	b.n	80119b4 <_printf_i+0xbc>
 80119d4:	680b      	ldr	r3, [r1, #0]
 80119d6:	6825      	ldr	r5, [r4, #0]
 80119d8:	1d18      	adds	r0, r3, #4
 80119da:	6008      	str	r0, [r1, #0]
 80119dc:	0628      	lsls	r0, r5, #24
 80119de:	d501      	bpl.n	80119e4 <_printf_i+0xec>
 80119e0:	681d      	ldr	r5, [r3, #0]
 80119e2:	e002      	b.n	80119ea <_printf_i+0xf2>
 80119e4:	0669      	lsls	r1, r5, #25
 80119e6:	d5fb      	bpl.n	80119e0 <_printf_i+0xe8>
 80119e8:	881d      	ldrh	r5, [r3, #0]
 80119ea:	4854      	ldr	r0, [pc, #336]	; (8011b3c <_printf_i+0x244>)
 80119ec:	2f6f      	cmp	r7, #111	; 0x6f
 80119ee:	bf0c      	ite	eq
 80119f0:	2308      	moveq	r3, #8
 80119f2:	230a      	movne	r3, #10
 80119f4:	2100      	movs	r1, #0
 80119f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80119fa:	6866      	ldr	r6, [r4, #4]
 80119fc:	60a6      	str	r6, [r4, #8]
 80119fe:	2e00      	cmp	r6, #0
 8011a00:	bfa2      	ittt	ge
 8011a02:	6821      	ldrge	r1, [r4, #0]
 8011a04:	f021 0104 	bicge.w	r1, r1, #4
 8011a08:	6021      	strge	r1, [r4, #0]
 8011a0a:	b90d      	cbnz	r5, 8011a10 <_printf_i+0x118>
 8011a0c:	2e00      	cmp	r6, #0
 8011a0e:	d04d      	beq.n	8011aac <_printf_i+0x1b4>
 8011a10:	4616      	mov	r6, r2
 8011a12:	fbb5 f1f3 	udiv	r1, r5, r3
 8011a16:	fb03 5711 	mls	r7, r3, r1, r5
 8011a1a:	5dc7      	ldrb	r7, [r0, r7]
 8011a1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011a20:	462f      	mov	r7, r5
 8011a22:	42bb      	cmp	r3, r7
 8011a24:	460d      	mov	r5, r1
 8011a26:	d9f4      	bls.n	8011a12 <_printf_i+0x11a>
 8011a28:	2b08      	cmp	r3, #8
 8011a2a:	d10b      	bne.n	8011a44 <_printf_i+0x14c>
 8011a2c:	6823      	ldr	r3, [r4, #0]
 8011a2e:	07df      	lsls	r7, r3, #31
 8011a30:	d508      	bpl.n	8011a44 <_printf_i+0x14c>
 8011a32:	6923      	ldr	r3, [r4, #16]
 8011a34:	6861      	ldr	r1, [r4, #4]
 8011a36:	4299      	cmp	r1, r3
 8011a38:	bfde      	ittt	le
 8011a3a:	2330      	movle	r3, #48	; 0x30
 8011a3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011a40:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8011a44:	1b92      	subs	r2, r2, r6
 8011a46:	6122      	str	r2, [r4, #16]
 8011a48:	f8cd a000 	str.w	sl, [sp]
 8011a4c:	464b      	mov	r3, r9
 8011a4e:	aa03      	add	r2, sp, #12
 8011a50:	4621      	mov	r1, r4
 8011a52:	4640      	mov	r0, r8
 8011a54:	f7ff fee2 	bl	801181c <_printf_common>
 8011a58:	3001      	adds	r0, #1
 8011a5a:	d14c      	bne.n	8011af6 <_printf_i+0x1fe>
 8011a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a60:	b004      	add	sp, #16
 8011a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a66:	4835      	ldr	r0, [pc, #212]	; (8011b3c <_printf_i+0x244>)
 8011a68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011a6c:	6823      	ldr	r3, [r4, #0]
 8011a6e:	680e      	ldr	r6, [r1, #0]
 8011a70:	061f      	lsls	r7, r3, #24
 8011a72:	f856 5b04 	ldr.w	r5, [r6], #4
 8011a76:	600e      	str	r6, [r1, #0]
 8011a78:	d514      	bpl.n	8011aa4 <_printf_i+0x1ac>
 8011a7a:	07d9      	lsls	r1, r3, #31
 8011a7c:	bf44      	itt	mi
 8011a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8011a82:	6023      	strmi	r3, [r4, #0]
 8011a84:	b91d      	cbnz	r5, 8011a8e <_printf_i+0x196>
 8011a86:	6823      	ldr	r3, [r4, #0]
 8011a88:	f023 0320 	bic.w	r3, r3, #32
 8011a8c:	6023      	str	r3, [r4, #0]
 8011a8e:	2310      	movs	r3, #16
 8011a90:	e7b0      	b.n	80119f4 <_printf_i+0xfc>
 8011a92:	6823      	ldr	r3, [r4, #0]
 8011a94:	f043 0320 	orr.w	r3, r3, #32
 8011a98:	6023      	str	r3, [r4, #0]
 8011a9a:	2378      	movs	r3, #120	; 0x78
 8011a9c:	4828      	ldr	r0, [pc, #160]	; (8011b40 <_printf_i+0x248>)
 8011a9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011aa2:	e7e3      	b.n	8011a6c <_printf_i+0x174>
 8011aa4:	065e      	lsls	r6, r3, #25
 8011aa6:	bf48      	it	mi
 8011aa8:	b2ad      	uxthmi	r5, r5
 8011aaa:	e7e6      	b.n	8011a7a <_printf_i+0x182>
 8011aac:	4616      	mov	r6, r2
 8011aae:	e7bb      	b.n	8011a28 <_printf_i+0x130>
 8011ab0:	680b      	ldr	r3, [r1, #0]
 8011ab2:	6826      	ldr	r6, [r4, #0]
 8011ab4:	6960      	ldr	r0, [r4, #20]
 8011ab6:	1d1d      	adds	r5, r3, #4
 8011ab8:	600d      	str	r5, [r1, #0]
 8011aba:	0635      	lsls	r5, r6, #24
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	d501      	bpl.n	8011ac4 <_printf_i+0x1cc>
 8011ac0:	6018      	str	r0, [r3, #0]
 8011ac2:	e002      	b.n	8011aca <_printf_i+0x1d2>
 8011ac4:	0671      	lsls	r1, r6, #25
 8011ac6:	d5fb      	bpl.n	8011ac0 <_printf_i+0x1c8>
 8011ac8:	8018      	strh	r0, [r3, #0]
 8011aca:	2300      	movs	r3, #0
 8011acc:	6123      	str	r3, [r4, #16]
 8011ace:	4616      	mov	r6, r2
 8011ad0:	e7ba      	b.n	8011a48 <_printf_i+0x150>
 8011ad2:	680b      	ldr	r3, [r1, #0]
 8011ad4:	1d1a      	adds	r2, r3, #4
 8011ad6:	600a      	str	r2, [r1, #0]
 8011ad8:	681e      	ldr	r6, [r3, #0]
 8011ada:	6862      	ldr	r2, [r4, #4]
 8011adc:	2100      	movs	r1, #0
 8011ade:	4630      	mov	r0, r6
 8011ae0:	f7ee fb7e 	bl	80001e0 <memchr>
 8011ae4:	b108      	cbz	r0, 8011aea <_printf_i+0x1f2>
 8011ae6:	1b80      	subs	r0, r0, r6
 8011ae8:	6060      	str	r0, [r4, #4]
 8011aea:	6863      	ldr	r3, [r4, #4]
 8011aec:	6123      	str	r3, [r4, #16]
 8011aee:	2300      	movs	r3, #0
 8011af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011af4:	e7a8      	b.n	8011a48 <_printf_i+0x150>
 8011af6:	6923      	ldr	r3, [r4, #16]
 8011af8:	4632      	mov	r2, r6
 8011afa:	4649      	mov	r1, r9
 8011afc:	4640      	mov	r0, r8
 8011afe:	47d0      	blx	sl
 8011b00:	3001      	adds	r0, #1
 8011b02:	d0ab      	beq.n	8011a5c <_printf_i+0x164>
 8011b04:	6823      	ldr	r3, [r4, #0]
 8011b06:	079b      	lsls	r3, r3, #30
 8011b08:	d413      	bmi.n	8011b32 <_printf_i+0x23a>
 8011b0a:	68e0      	ldr	r0, [r4, #12]
 8011b0c:	9b03      	ldr	r3, [sp, #12]
 8011b0e:	4298      	cmp	r0, r3
 8011b10:	bfb8      	it	lt
 8011b12:	4618      	movlt	r0, r3
 8011b14:	e7a4      	b.n	8011a60 <_printf_i+0x168>
 8011b16:	2301      	movs	r3, #1
 8011b18:	4632      	mov	r2, r6
 8011b1a:	4649      	mov	r1, r9
 8011b1c:	4640      	mov	r0, r8
 8011b1e:	47d0      	blx	sl
 8011b20:	3001      	adds	r0, #1
 8011b22:	d09b      	beq.n	8011a5c <_printf_i+0x164>
 8011b24:	3501      	adds	r5, #1
 8011b26:	68e3      	ldr	r3, [r4, #12]
 8011b28:	9903      	ldr	r1, [sp, #12]
 8011b2a:	1a5b      	subs	r3, r3, r1
 8011b2c:	42ab      	cmp	r3, r5
 8011b2e:	dcf2      	bgt.n	8011b16 <_printf_i+0x21e>
 8011b30:	e7eb      	b.n	8011b0a <_printf_i+0x212>
 8011b32:	2500      	movs	r5, #0
 8011b34:	f104 0619 	add.w	r6, r4, #25
 8011b38:	e7f5      	b.n	8011b26 <_printf_i+0x22e>
 8011b3a:	bf00      	nop
 8011b3c:	0801a392 	.word	0x0801a392
 8011b40:	0801a3a3 	.word	0x0801a3a3

08011b44 <cleanup_glue>:
 8011b44:	b538      	push	{r3, r4, r5, lr}
 8011b46:	460c      	mov	r4, r1
 8011b48:	6809      	ldr	r1, [r1, #0]
 8011b4a:	4605      	mov	r5, r0
 8011b4c:	b109      	cbz	r1, 8011b52 <cleanup_glue+0xe>
 8011b4e:	f7ff fff9 	bl	8011b44 <cleanup_glue>
 8011b52:	4621      	mov	r1, r4
 8011b54:	4628      	mov	r0, r5
 8011b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b5a:	f001 bc3f 	b.w	80133dc <_free_r>
	...

08011b60 <_reclaim_reent>:
 8011b60:	4b2c      	ldr	r3, [pc, #176]	; (8011c14 <_reclaim_reent+0xb4>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4283      	cmp	r3, r0
 8011b66:	b570      	push	{r4, r5, r6, lr}
 8011b68:	4604      	mov	r4, r0
 8011b6a:	d051      	beq.n	8011c10 <_reclaim_reent+0xb0>
 8011b6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011b6e:	b143      	cbz	r3, 8011b82 <_reclaim_reent+0x22>
 8011b70:	68db      	ldr	r3, [r3, #12]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d14a      	bne.n	8011c0c <_reclaim_reent+0xac>
 8011b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b78:	6819      	ldr	r1, [r3, #0]
 8011b7a:	b111      	cbz	r1, 8011b82 <_reclaim_reent+0x22>
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	f001 fc2d 	bl	80133dc <_free_r>
 8011b82:	6961      	ldr	r1, [r4, #20]
 8011b84:	b111      	cbz	r1, 8011b8c <_reclaim_reent+0x2c>
 8011b86:	4620      	mov	r0, r4
 8011b88:	f001 fc28 	bl	80133dc <_free_r>
 8011b8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011b8e:	b111      	cbz	r1, 8011b96 <_reclaim_reent+0x36>
 8011b90:	4620      	mov	r0, r4
 8011b92:	f001 fc23 	bl	80133dc <_free_r>
 8011b96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011b98:	b111      	cbz	r1, 8011ba0 <_reclaim_reent+0x40>
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f001 fc1e 	bl	80133dc <_free_r>
 8011ba0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011ba2:	b111      	cbz	r1, 8011baa <_reclaim_reent+0x4a>
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	f001 fc19 	bl	80133dc <_free_r>
 8011baa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011bac:	b111      	cbz	r1, 8011bb4 <_reclaim_reent+0x54>
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f001 fc14 	bl	80133dc <_free_r>
 8011bb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011bb6:	b111      	cbz	r1, 8011bbe <_reclaim_reent+0x5e>
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f001 fc0f 	bl	80133dc <_free_r>
 8011bbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011bc0:	b111      	cbz	r1, 8011bc8 <_reclaim_reent+0x68>
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f001 fc0a 	bl	80133dc <_free_r>
 8011bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bca:	b111      	cbz	r1, 8011bd2 <_reclaim_reent+0x72>
 8011bcc:	4620      	mov	r0, r4
 8011bce:	f001 fc05 	bl	80133dc <_free_r>
 8011bd2:	69a3      	ldr	r3, [r4, #24]
 8011bd4:	b1e3      	cbz	r3, 8011c10 <_reclaim_reent+0xb0>
 8011bd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011bd8:	4620      	mov	r0, r4
 8011bda:	4798      	blx	r3
 8011bdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011bde:	b1b9      	cbz	r1, 8011c10 <_reclaim_reent+0xb0>
 8011be0:	4620      	mov	r0, r4
 8011be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011be6:	f7ff bfad 	b.w	8011b44 <cleanup_glue>
 8011bea:	5949      	ldr	r1, [r1, r5]
 8011bec:	b941      	cbnz	r1, 8011c00 <_reclaim_reent+0xa0>
 8011bee:	3504      	adds	r5, #4
 8011bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bf2:	2d80      	cmp	r5, #128	; 0x80
 8011bf4:	68d9      	ldr	r1, [r3, #12]
 8011bf6:	d1f8      	bne.n	8011bea <_reclaim_reent+0x8a>
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f001 fbef 	bl	80133dc <_free_r>
 8011bfe:	e7ba      	b.n	8011b76 <_reclaim_reent+0x16>
 8011c00:	680e      	ldr	r6, [r1, #0]
 8011c02:	4620      	mov	r0, r4
 8011c04:	f001 fbea 	bl	80133dc <_free_r>
 8011c08:	4631      	mov	r1, r6
 8011c0a:	e7ef      	b.n	8011bec <_reclaim_reent+0x8c>
 8011c0c:	2500      	movs	r5, #0
 8011c0e:	e7ef      	b.n	8011bf0 <_reclaim_reent+0x90>
 8011c10:	bd70      	pop	{r4, r5, r6, pc}
 8011c12:	bf00      	nop
 8011c14:	200001b0 	.word	0x200001b0

08011c18 <_sbrk_r>:
 8011c18:	b538      	push	{r3, r4, r5, lr}
 8011c1a:	4d06      	ldr	r5, [pc, #24]	; (8011c34 <_sbrk_r+0x1c>)
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	4604      	mov	r4, r0
 8011c20:	4608      	mov	r0, r1
 8011c22:	602b      	str	r3, [r5, #0]
 8011c24:	f7f2 f8d4 	bl	8003dd0 <_sbrk>
 8011c28:	1c43      	adds	r3, r0, #1
 8011c2a:	d102      	bne.n	8011c32 <_sbrk_r+0x1a>
 8011c2c:	682b      	ldr	r3, [r5, #0]
 8011c2e:	b103      	cbz	r3, 8011c32 <_sbrk_r+0x1a>
 8011c30:	6023      	str	r3, [r4, #0]
 8011c32:	bd38      	pop	{r3, r4, r5, pc}
 8011c34:	2000ef4c 	.word	0x2000ef4c

08011c38 <siprintf>:
 8011c38:	b40e      	push	{r1, r2, r3}
 8011c3a:	b500      	push	{lr}
 8011c3c:	b09c      	sub	sp, #112	; 0x70
 8011c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8011c40:	9002      	str	r0, [sp, #8]
 8011c42:	9006      	str	r0, [sp, #24]
 8011c44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011c48:	4809      	ldr	r0, [pc, #36]	; (8011c70 <siprintf+0x38>)
 8011c4a:	9107      	str	r1, [sp, #28]
 8011c4c:	9104      	str	r1, [sp, #16]
 8011c4e:	4909      	ldr	r1, [pc, #36]	; (8011c74 <siprintf+0x3c>)
 8011c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c54:	9105      	str	r1, [sp, #20]
 8011c56:	6800      	ldr	r0, [r0, #0]
 8011c58:	9301      	str	r3, [sp, #4]
 8011c5a:	a902      	add	r1, sp, #8
 8011c5c:	f001 fc6a 	bl	8013534 <_svfiprintf_r>
 8011c60:	9b02      	ldr	r3, [sp, #8]
 8011c62:	2200      	movs	r2, #0
 8011c64:	701a      	strb	r2, [r3, #0]
 8011c66:	b01c      	add	sp, #112	; 0x70
 8011c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c6c:	b003      	add	sp, #12
 8011c6e:	4770      	bx	lr
 8011c70:	200001b0 	.word	0x200001b0
 8011c74:	ffff0208 	.word	0xffff0208

08011c78 <__sread>:
 8011c78:	b510      	push	{r4, lr}
 8011c7a:	460c      	mov	r4, r1
 8011c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c80:	f001 fd58 	bl	8013734 <_read_r>
 8011c84:	2800      	cmp	r0, #0
 8011c86:	bfab      	itete	ge
 8011c88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8011c8c:	181b      	addge	r3, r3, r0
 8011c8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c92:	bfac      	ite	ge
 8011c94:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c96:	81a3      	strhlt	r3, [r4, #12]
 8011c98:	bd10      	pop	{r4, pc}

08011c9a <__swrite>:
 8011c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c9e:	461f      	mov	r7, r3
 8011ca0:	898b      	ldrh	r3, [r1, #12]
 8011ca2:	05db      	lsls	r3, r3, #23
 8011ca4:	4605      	mov	r5, r0
 8011ca6:	460c      	mov	r4, r1
 8011ca8:	4616      	mov	r6, r2
 8011caa:	d505      	bpl.n	8011cb8 <__swrite+0x1e>
 8011cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cb0:	2302      	movs	r3, #2
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	f000 ffde 	bl	8012c74 <_lseek_r>
 8011cb8:	89a3      	ldrh	r3, [r4, #12]
 8011cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011cc2:	81a3      	strh	r3, [r4, #12]
 8011cc4:	4632      	mov	r2, r6
 8011cc6:	463b      	mov	r3, r7
 8011cc8:	4628      	mov	r0, r5
 8011cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cce:	f000 b86f 	b.w	8011db0 <_write_r>

08011cd2 <__sseek>:
 8011cd2:	b510      	push	{r4, lr}
 8011cd4:	460c      	mov	r4, r1
 8011cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cda:	f000 ffcb 	bl	8012c74 <_lseek_r>
 8011cde:	1c43      	adds	r3, r0, #1
 8011ce0:	89a3      	ldrh	r3, [r4, #12]
 8011ce2:	bf15      	itete	ne
 8011ce4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011cea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011cee:	81a3      	strheq	r3, [r4, #12]
 8011cf0:	bf18      	it	ne
 8011cf2:	81a3      	strhne	r3, [r4, #12]
 8011cf4:	bd10      	pop	{r4, pc}

08011cf6 <__sclose>:
 8011cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cfa:	f000 b86b 	b.w	8011dd4 <_close_r>

08011cfe <strcat>:
 8011cfe:	b510      	push	{r4, lr}
 8011d00:	4602      	mov	r2, r0
 8011d02:	7814      	ldrb	r4, [r2, #0]
 8011d04:	4613      	mov	r3, r2
 8011d06:	3201      	adds	r2, #1
 8011d08:	2c00      	cmp	r4, #0
 8011d0a:	d1fa      	bne.n	8011d02 <strcat+0x4>
 8011d0c:	3b01      	subs	r3, #1
 8011d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d16:	2a00      	cmp	r2, #0
 8011d18:	d1f9      	bne.n	8011d0e <strcat+0x10>
 8011d1a:	bd10      	pop	{r4, pc}

08011d1c <strcpy>:
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d22:	f803 2b01 	strb.w	r2, [r3], #1
 8011d26:	2a00      	cmp	r2, #0
 8011d28:	d1f9      	bne.n	8011d1e <strcpy+0x2>
 8011d2a:	4770      	bx	lr

08011d2c <__utoa>:
 8011d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d2e:	4c1f      	ldr	r4, [pc, #124]	; (8011dac <__utoa+0x80>)
 8011d30:	b08b      	sub	sp, #44	; 0x2c
 8011d32:	4605      	mov	r5, r0
 8011d34:	460b      	mov	r3, r1
 8011d36:	466e      	mov	r6, sp
 8011d38:	f104 0c20 	add.w	ip, r4, #32
 8011d3c:	6820      	ldr	r0, [r4, #0]
 8011d3e:	6861      	ldr	r1, [r4, #4]
 8011d40:	4637      	mov	r7, r6
 8011d42:	c703      	stmia	r7!, {r0, r1}
 8011d44:	3408      	adds	r4, #8
 8011d46:	4564      	cmp	r4, ip
 8011d48:	463e      	mov	r6, r7
 8011d4a:	d1f7      	bne.n	8011d3c <__utoa+0x10>
 8011d4c:	7921      	ldrb	r1, [r4, #4]
 8011d4e:	7139      	strb	r1, [r7, #4]
 8011d50:	1e91      	subs	r1, r2, #2
 8011d52:	6820      	ldr	r0, [r4, #0]
 8011d54:	6038      	str	r0, [r7, #0]
 8011d56:	2922      	cmp	r1, #34	; 0x22
 8011d58:	f04f 0100 	mov.w	r1, #0
 8011d5c:	d904      	bls.n	8011d68 <__utoa+0x3c>
 8011d5e:	7019      	strb	r1, [r3, #0]
 8011d60:	460b      	mov	r3, r1
 8011d62:	4618      	mov	r0, r3
 8011d64:	b00b      	add	sp, #44	; 0x2c
 8011d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d68:	1e58      	subs	r0, r3, #1
 8011d6a:	4684      	mov	ip, r0
 8011d6c:	fbb5 f7f2 	udiv	r7, r5, r2
 8011d70:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8011d74:	fb02 5617 	mls	r6, r2, r7, r5
 8011d78:	4476      	add	r6, lr
 8011d7a:	460c      	mov	r4, r1
 8011d7c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8011d80:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8011d84:	462e      	mov	r6, r5
 8011d86:	42b2      	cmp	r2, r6
 8011d88:	f101 0101 	add.w	r1, r1, #1
 8011d8c:	463d      	mov	r5, r7
 8011d8e:	d9ed      	bls.n	8011d6c <__utoa+0x40>
 8011d90:	2200      	movs	r2, #0
 8011d92:	545a      	strb	r2, [r3, r1]
 8011d94:	1919      	adds	r1, r3, r4
 8011d96:	1aa5      	subs	r5, r4, r2
 8011d98:	42aa      	cmp	r2, r5
 8011d9a:	dae2      	bge.n	8011d62 <__utoa+0x36>
 8011d9c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011da0:	780e      	ldrb	r6, [r1, #0]
 8011da2:	7006      	strb	r6, [r0, #0]
 8011da4:	3201      	adds	r2, #1
 8011da6:	f801 5901 	strb.w	r5, [r1], #-1
 8011daa:	e7f4      	b.n	8011d96 <__utoa+0x6a>
 8011dac:	0801a3b4 	.word	0x0801a3b4

08011db0 <_write_r>:
 8011db0:	b538      	push	{r3, r4, r5, lr}
 8011db2:	4d07      	ldr	r5, [pc, #28]	; (8011dd0 <_write_r+0x20>)
 8011db4:	4604      	mov	r4, r0
 8011db6:	4608      	mov	r0, r1
 8011db8:	4611      	mov	r1, r2
 8011dba:	2200      	movs	r2, #0
 8011dbc:	602a      	str	r2, [r5, #0]
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	f7f1 ffb5 	bl	8003d2e <_write>
 8011dc4:	1c43      	adds	r3, r0, #1
 8011dc6:	d102      	bne.n	8011dce <_write_r+0x1e>
 8011dc8:	682b      	ldr	r3, [r5, #0]
 8011dca:	b103      	cbz	r3, 8011dce <_write_r+0x1e>
 8011dcc:	6023      	str	r3, [r4, #0]
 8011dce:	bd38      	pop	{r3, r4, r5, pc}
 8011dd0:	2000ef4c 	.word	0x2000ef4c

08011dd4 <_close_r>:
 8011dd4:	b538      	push	{r3, r4, r5, lr}
 8011dd6:	4d06      	ldr	r5, [pc, #24]	; (8011df0 <_close_r+0x1c>)
 8011dd8:	2300      	movs	r3, #0
 8011dda:	4604      	mov	r4, r0
 8011ddc:	4608      	mov	r0, r1
 8011dde:	602b      	str	r3, [r5, #0]
 8011de0:	f7f1 ffc1 	bl	8003d66 <_close>
 8011de4:	1c43      	adds	r3, r0, #1
 8011de6:	d102      	bne.n	8011dee <_close_r+0x1a>
 8011de8:	682b      	ldr	r3, [r5, #0]
 8011dea:	b103      	cbz	r3, 8011dee <_close_r+0x1a>
 8011dec:	6023      	str	r3, [r4, #0]
 8011dee:	bd38      	pop	{r3, r4, r5, pc}
 8011df0:	2000ef4c 	.word	0x2000ef4c

08011df4 <quorem>:
 8011df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df8:	6903      	ldr	r3, [r0, #16]
 8011dfa:	690c      	ldr	r4, [r1, #16]
 8011dfc:	42a3      	cmp	r3, r4
 8011dfe:	4607      	mov	r7, r0
 8011e00:	f2c0 8081 	blt.w	8011f06 <quorem+0x112>
 8011e04:	3c01      	subs	r4, #1
 8011e06:	f101 0814 	add.w	r8, r1, #20
 8011e0a:	f100 0514 	add.w	r5, r0, #20
 8011e0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e12:	9301      	str	r3, [sp, #4]
 8011e14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011e24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e28:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e2c:	d331      	bcc.n	8011e92 <quorem+0x9e>
 8011e2e:	f04f 0e00 	mov.w	lr, #0
 8011e32:	4640      	mov	r0, r8
 8011e34:	46ac      	mov	ip, r5
 8011e36:	46f2      	mov	sl, lr
 8011e38:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e3c:	b293      	uxth	r3, r2
 8011e3e:	fb06 e303 	mla	r3, r6, r3, lr
 8011e42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011e46:	b29b      	uxth	r3, r3
 8011e48:	ebaa 0303 	sub.w	r3, sl, r3
 8011e4c:	0c12      	lsrs	r2, r2, #16
 8011e4e:	f8dc a000 	ldr.w	sl, [ip]
 8011e52:	fb06 e202 	mla	r2, r6, r2, lr
 8011e56:	fa13 f38a 	uxtah	r3, r3, sl
 8011e5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011e5e:	fa1f fa82 	uxth.w	sl, r2
 8011e62:	f8dc 2000 	ldr.w	r2, [ip]
 8011e66:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011e6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e74:	4581      	cmp	r9, r0
 8011e76:	f84c 3b04 	str.w	r3, [ip], #4
 8011e7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011e7e:	d2db      	bcs.n	8011e38 <quorem+0x44>
 8011e80:	f855 300b 	ldr.w	r3, [r5, fp]
 8011e84:	b92b      	cbnz	r3, 8011e92 <quorem+0x9e>
 8011e86:	9b01      	ldr	r3, [sp, #4]
 8011e88:	3b04      	subs	r3, #4
 8011e8a:	429d      	cmp	r5, r3
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	d32e      	bcc.n	8011eee <quorem+0xfa>
 8011e90:	613c      	str	r4, [r7, #16]
 8011e92:	4638      	mov	r0, r7
 8011e94:	f001 f992 	bl	80131bc <__mcmp>
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	db24      	blt.n	8011ee6 <quorem+0xf2>
 8011e9c:	3601      	adds	r6, #1
 8011e9e:	4628      	mov	r0, r5
 8011ea0:	f04f 0c00 	mov.w	ip, #0
 8011ea4:	f858 2b04 	ldr.w	r2, [r8], #4
 8011ea8:	f8d0 e000 	ldr.w	lr, [r0]
 8011eac:	b293      	uxth	r3, r2
 8011eae:	ebac 0303 	sub.w	r3, ip, r3
 8011eb2:	0c12      	lsrs	r2, r2, #16
 8011eb4:	fa13 f38e 	uxtah	r3, r3, lr
 8011eb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011ebc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ec6:	45c1      	cmp	r9, r8
 8011ec8:	f840 3b04 	str.w	r3, [r0], #4
 8011ecc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011ed0:	d2e8      	bcs.n	8011ea4 <quorem+0xb0>
 8011ed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011eda:	b922      	cbnz	r2, 8011ee6 <quorem+0xf2>
 8011edc:	3b04      	subs	r3, #4
 8011ede:	429d      	cmp	r5, r3
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	d30a      	bcc.n	8011efa <quorem+0x106>
 8011ee4:	613c      	str	r4, [r7, #16]
 8011ee6:	4630      	mov	r0, r6
 8011ee8:	b003      	add	sp, #12
 8011eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eee:	6812      	ldr	r2, [r2, #0]
 8011ef0:	3b04      	subs	r3, #4
 8011ef2:	2a00      	cmp	r2, #0
 8011ef4:	d1cc      	bne.n	8011e90 <quorem+0x9c>
 8011ef6:	3c01      	subs	r4, #1
 8011ef8:	e7c7      	b.n	8011e8a <quorem+0x96>
 8011efa:	6812      	ldr	r2, [r2, #0]
 8011efc:	3b04      	subs	r3, #4
 8011efe:	2a00      	cmp	r2, #0
 8011f00:	d1f0      	bne.n	8011ee4 <quorem+0xf0>
 8011f02:	3c01      	subs	r4, #1
 8011f04:	e7eb      	b.n	8011ede <quorem+0xea>
 8011f06:	2000      	movs	r0, #0
 8011f08:	e7ee      	b.n	8011ee8 <quorem+0xf4>
 8011f0a:	0000      	movs	r0, r0
 8011f0c:	0000      	movs	r0, r0
	...

08011f10 <_dtoa_r>:
 8011f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f14:	ed2d 8b02 	vpush	{d8}
 8011f18:	ec57 6b10 	vmov	r6, r7, d0
 8011f1c:	b095      	sub	sp, #84	; 0x54
 8011f1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011f20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011f24:	9105      	str	r1, [sp, #20]
 8011f26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011f2a:	4604      	mov	r4, r0
 8011f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8011f2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f30:	b975      	cbnz	r5, 8011f50 <_dtoa_r+0x40>
 8011f32:	2010      	movs	r0, #16
 8011f34:	f000 feb0 	bl	8012c98 <malloc>
 8011f38:	4602      	mov	r2, r0
 8011f3a:	6260      	str	r0, [r4, #36]	; 0x24
 8011f3c:	b920      	cbnz	r0, 8011f48 <_dtoa_r+0x38>
 8011f3e:	4bb2      	ldr	r3, [pc, #712]	; (8012208 <_dtoa_r+0x2f8>)
 8011f40:	21ea      	movs	r1, #234	; 0xea
 8011f42:	48b2      	ldr	r0, [pc, #712]	; (801220c <_dtoa_r+0x2fc>)
 8011f44:	f001 fc08 	bl	8013758 <__assert_func>
 8011f48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011f4c:	6005      	str	r5, [r0, #0]
 8011f4e:	60c5      	str	r5, [r0, #12]
 8011f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f52:	6819      	ldr	r1, [r3, #0]
 8011f54:	b151      	cbz	r1, 8011f6c <_dtoa_r+0x5c>
 8011f56:	685a      	ldr	r2, [r3, #4]
 8011f58:	604a      	str	r2, [r1, #4]
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	4093      	lsls	r3, r2
 8011f5e:	608b      	str	r3, [r1, #8]
 8011f60:	4620      	mov	r0, r4
 8011f62:	f000 feed 	bl	8012d40 <_Bfree>
 8011f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f68:	2200      	movs	r2, #0
 8011f6a:	601a      	str	r2, [r3, #0]
 8011f6c:	1e3b      	subs	r3, r7, #0
 8011f6e:	bfb9      	ittee	lt
 8011f70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011f74:	9303      	strlt	r3, [sp, #12]
 8011f76:	2300      	movge	r3, #0
 8011f78:	f8c8 3000 	strge.w	r3, [r8]
 8011f7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011f80:	4ba3      	ldr	r3, [pc, #652]	; (8012210 <_dtoa_r+0x300>)
 8011f82:	bfbc      	itt	lt
 8011f84:	2201      	movlt	r2, #1
 8011f86:	f8c8 2000 	strlt.w	r2, [r8]
 8011f8a:	ea33 0309 	bics.w	r3, r3, r9
 8011f8e:	d11b      	bne.n	8011fc8 <_dtoa_r+0xb8>
 8011f90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f92:	f242 730f 	movw	r3, #9999	; 0x270f
 8011f96:	6013      	str	r3, [r2, #0]
 8011f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f9c:	4333      	orrs	r3, r6
 8011f9e:	f000 857a 	beq.w	8012a96 <_dtoa_r+0xb86>
 8011fa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011fa4:	b963      	cbnz	r3, 8011fc0 <_dtoa_r+0xb0>
 8011fa6:	4b9b      	ldr	r3, [pc, #620]	; (8012214 <_dtoa_r+0x304>)
 8011fa8:	e024      	b.n	8011ff4 <_dtoa_r+0xe4>
 8011faa:	4b9b      	ldr	r3, [pc, #620]	; (8012218 <_dtoa_r+0x308>)
 8011fac:	9300      	str	r3, [sp, #0]
 8011fae:	3308      	adds	r3, #8
 8011fb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011fb2:	6013      	str	r3, [r2, #0]
 8011fb4:	9800      	ldr	r0, [sp, #0]
 8011fb6:	b015      	add	sp, #84	; 0x54
 8011fb8:	ecbd 8b02 	vpop	{d8}
 8011fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fc0:	4b94      	ldr	r3, [pc, #592]	; (8012214 <_dtoa_r+0x304>)
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	3303      	adds	r3, #3
 8011fc6:	e7f3      	b.n	8011fb0 <_dtoa_r+0xa0>
 8011fc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	ec51 0b17 	vmov	r0, r1, d7
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011fd8:	f7ee fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 8011fdc:	4680      	mov	r8, r0
 8011fde:	b158      	cbz	r0, 8011ff8 <_dtoa_r+0xe8>
 8011fe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	6013      	str	r3, [r2, #0]
 8011fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	f000 8551 	beq.w	8012a90 <_dtoa_r+0xb80>
 8011fee:	488b      	ldr	r0, [pc, #556]	; (801221c <_dtoa_r+0x30c>)
 8011ff0:	6018      	str	r0, [r3, #0]
 8011ff2:	1e43      	subs	r3, r0, #1
 8011ff4:	9300      	str	r3, [sp, #0]
 8011ff6:	e7dd      	b.n	8011fb4 <_dtoa_r+0xa4>
 8011ff8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011ffc:	aa12      	add	r2, sp, #72	; 0x48
 8011ffe:	a913      	add	r1, sp, #76	; 0x4c
 8012000:	4620      	mov	r0, r4
 8012002:	f001 f97f 	bl	8013304 <__d2b>
 8012006:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801200a:	4683      	mov	fp, r0
 801200c:	2d00      	cmp	r5, #0
 801200e:	d07c      	beq.n	801210a <_dtoa_r+0x1fa>
 8012010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012012:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801201a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801201e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012022:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801202a:	4b7d      	ldr	r3, [pc, #500]	; (8012220 <_dtoa_r+0x310>)
 801202c:	2200      	movs	r2, #0
 801202e:	4630      	mov	r0, r6
 8012030:	4639      	mov	r1, r7
 8012032:	f7ee f929 	bl	8000288 <__aeabi_dsub>
 8012036:	a36e      	add	r3, pc, #440	; (adr r3, 80121f0 <_dtoa_r+0x2e0>)
 8012038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203c:	f7ee fadc 	bl	80005f8 <__aeabi_dmul>
 8012040:	a36d      	add	r3, pc, #436	; (adr r3, 80121f8 <_dtoa_r+0x2e8>)
 8012042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012046:	f7ee f921 	bl	800028c <__adddf3>
 801204a:	4606      	mov	r6, r0
 801204c:	4628      	mov	r0, r5
 801204e:	460f      	mov	r7, r1
 8012050:	f7ee fa68 	bl	8000524 <__aeabi_i2d>
 8012054:	a36a      	add	r3, pc, #424	; (adr r3, 8012200 <_dtoa_r+0x2f0>)
 8012056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205a:	f7ee facd 	bl	80005f8 <__aeabi_dmul>
 801205e:	4602      	mov	r2, r0
 8012060:	460b      	mov	r3, r1
 8012062:	4630      	mov	r0, r6
 8012064:	4639      	mov	r1, r7
 8012066:	f7ee f911 	bl	800028c <__adddf3>
 801206a:	4606      	mov	r6, r0
 801206c:	460f      	mov	r7, r1
 801206e:	f7ee fd73 	bl	8000b58 <__aeabi_d2iz>
 8012072:	2200      	movs	r2, #0
 8012074:	4682      	mov	sl, r0
 8012076:	2300      	movs	r3, #0
 8012078:	4630      	mov	r0, r6
 801207a:	4639      	mov	r1, r7
 801207c:	f7ee fd2e 	bl	8000adc <__aeabi_dcmplt>
 8012080:	b148      	cbz	r0, 8012096 <_dtoa_r+0x186>
 8012082:	4650      	mov	r0, sl
 8012084:	f7ee fa4e 	bl	8000524 <__aeabi_i2d>
 8012088:	4632      	mov	r2, r6
 801208a:	463b      	mov	r3, r7
 801208c:	f7ee fd1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8012090:	b908      	cbnz	r0, 8012096 <_dtoa_r+0x186>
 8012092:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012096:	f1ba 0f16 	cmp.w	sl, #22
 801209a:	d854      	bhi.n	8012146 <_dtoa_r+0x236>
 801209c:	4b61      	ldr	r3, [pc, #388]	; (8012224 <_dtoa_r+0x314>)
 801209e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80120a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80120aa:	f7ee fd17 	bl	8000adc <__aeabi_dcmplt>
 80120ae:	2800      	cmp	r0, #0
 80120b0:	d04b      	beq.n	801214a <_dtoa_r+0x23a>
 80120b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80120b6:	2300      	movs	r3, #0
 80120b8:	930e      	str	r3, [sp, #56]	; 0x38
 80120ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120bc:	1b5d      	subs	r5, r3, r5
 80120be:	1e6b      	subs	r3, r5, #1
 80120c0:	9304      	str	r3, [sp, #16]
 80120c2:	bf43      	ittte	mi
 80120c4:	2300      	movmi	r3, #0
 80120c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80120ca:	9304      	strmi	r3, [sp, #16]
 80120cc:	f04f 0800 	movpl.w	r8, #0
 80120d0:	f1ba 0f00 	cmp.w	sl, #0
 80120d4:	db3b      	blt.n	801214e <_dtoa_r+0x23e>
 80120d6:	9b04      	ldr	r3, [sp, #16]
 80120d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80120dc:	4453      	add	r3, sl
 80120de:	9304      	str	r3, [sp, #16]
 80120e0:	2300      	movs	r3, #0
 80120e2:	9306      	str	r3, [sp, #24]
 80120e4:	9b05      	ldr	r3, [sp, #20]
 80120e6:	2b09      	cmp	r3, #9
 80120e8:	d869      	bhi.n	80121be <_dtoa_r+0x2ae>
 80120ea:	2b05      	cmp	r3, #5
 80120ec:	bfc4      	itt	gt
 80120ee:	3b04      	subgt	r3, #4
 80120f0:	9305      	strgt	r3, [sp, #20]
 80120f2:	9b05      	ldr	r3, [sp, #20]
 80120f4:	f1a3 0302 	sub.w	r3, r3, #2
 80120f8:	bfcc      	ite	gt
 80120fa:	2500      	movgt	r5, #0
 80120fc:	2501      	movle	r5, #1
 80120fe:	2b03      	cmp	r3, #3
 8012100:	d869      	bhi.n	80121d6 <_dtoa_r+0x2c6>
 8012102:	e8df f003 	tbb	[pc, r3]
 8012106:	4e2c      	.short	0x4e2c
 8012108:	5a4c      	.short	0x5a4c
 801210a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801210e:	441d      	add	r5, r3
 8012110:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012114:	2b20      	cmp	r3, #32
 8012116:	bfc1      	itttt	gt
 8012118:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801211c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012120:	fa09 f303 	lslgt.w	r3, r9, r3
 8012124:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012128:	bfda      	itte	le
 801212a:	f1c3 0320 	rsble	r3, r3, #32
 801212e:	fa06 f003 	lslle.w	r0, r6, r3
 8012132:	4318      	orrgt	r0, r3
 8012134:	f7ee f9e6 	bl	8000504 <__aeabi_ui2d>
 8012138:	2301      	movs	r3, #1
 801213a:	4606      	mov	r6, r0
 801213c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012140:	3d01      	subs	r5, #1
 8012142:	9310      	str	r3, [sp, #64]	; 0x40
 8012144:	e771      	b.n	801202a <_dtoa_r+0x11a>
 8012146:	2301      	movs	r3, #1
 8012148:	e7b6      	b.n	80120b8 <_dtoa_r+0x1a8>
 801214a:	900e      	str	r0, [sp, #56]	; 0x38
 801214c:	e7b5      	b.n	80120ba <_dtoa_r+0x1aa>
 801214e:	f1ca 0300 	rsb	r3, sl, #0
 8012152:	9306      	str	r3, [sp, #24]
 8012154:	2300      	movs	r3, #0
 8012156:	eba8 080a 	sub.w	r8, r8, sl
 801215a:	930d      	str	r3, [sp, #52]	; 0x34
 801215c:	e7c2      	b.n	80120e4 <_dtoa_r+0x1d4>
 801215e:	2300      	movs	r3, #0
 8012160:	9308      	str	r3, [sp, #32]
 8012162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012164:	2b00      	cmp	r3, #0
 8012166:	dc39      	bgt.n	80121dc <_dtoa_r+0x2cc>
 8012168:	f04f 0901 	mov.w	r9, #1
 801216c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012170:	464b      	mov	r3, r9
 8012172:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012176:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012178:	2200      	movs	r2, #0
 801217a:	6042      	str	r2, [r0, #4]
 801217c:	2204      	movs	r2, #4
 801217e:	f102 0614 	add.w	r6, r2, #20
 8012182:	429e      	cmp	r6, r3
 8012184:	6841      	ldr	r1, [r0, #4]
 8012186:	d92f      	bls.n	80121e8 <_dtoa_r+0x2d8>
 8012188:	4620      	mov	r0, r4
 801218a:	f000 fd99 	bl	8012cc0 <_Balloc>
 801218e:	9000      	str	r0, [sp, #0]
 8012190:	2800      	cmp	r0, #0
 8012192:	d14b      	bne.n	801222c <_dtoa_r+0x31c>
 8012194:	4b24      	ldr	r3, [pc, #144]	; (8012228 <_dtoa_r+0x318>)
 8012196:	4602      	mov	r2, r0
 8012198:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801219c:	e6d1      	b.n	8011f42 <_dtoa_r+0x32>
 801219e:	2301      	movs	r3, #1
 80121a0:	e7de      	b.n	8012160 <_dtoa_r+0x250>
 80121a2:	2300      	movs	r3, #0
 80121a4:	9308      	str	r3, [sp, #32]
 80121a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121a8:	eb0a 0903 	add.w	r9, sl, r3
 80121ac:	f109 0301 	add.w	r3, r9, #1
 80121b0:	2b01      	cmp	r3, #1
 80121b2:	9301      	str	r3, [sp, #4]
 80121b4:	bfb8      	it	lt
 80121b6:	2301      	movlt	r3, #1
 80121b8:	e7dd      	b.n	8012176 <_dtoa_r+0x266>
 80121ba:	2301      	movs	r3, #1
 80121bc:	e7f2      	b.n	80121a4 <_dtoa_r+0x294>
 80121be:	2501      	movs	r5, #1
 80121c0:	2300      	movs	r3, #0
 80121c2:	9305      	str	r3, [sp, #20]
 80121c4:	9508      	str	r5, [sp, #32]
 80121c6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80121ca:	2200      	movs	r2, #0
 80121cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80121d0:	2312      	movs	r3, #18
 80121d2:	9209      	str	r2, [sp, #36]	; 0x24
 80121d4:	e7cf      	b.n	8012176 <_dtoa_r+0x266>
 80121d6:	2301      	movs	r3, #1
 80121d8:	9308      	str	r3, [sp, #32]
 80121da:	e7f4      	b.n	80121c6 <_dtoa_r+0x2b6>
 80121dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80121e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80121e4:	464b      	mov	r3, r9
 80121e6:	e7c6      	b.n	8012176 <_dtoa_r+0x266>
 80121e8:	3101      	adds	r1, #1
 80121ea:	6041      	str	r1, [r0, #4]
 80121ec:	0052      	lsls	r2, r2, #1
 80121ee:	e7c6      	b.n	801217e <_dtoa_r+0x26e>
 80121f0:	636f4361 	.word	0x636f4361
 80121f4:	3fd287a7 	.word	0x3fd287a7
 80121f8:	8b60c8b3 	.word	0x8b60c8b3
 80121fc:	3fc68a28 	.word	0x3fc68a28
 8012200:	509f79fb 	.word	0x509f79fb
 8012204:	3fd34413 	.word	0x3fd34413
 8012208:	0801a3e6 	.word	0x0801a3e6
 801220c:	0801a3fd 	.word	0x0801a3fd
 8012210:	7ff00000 	.word	0x7ff00000
 8012214:	0801a3e2 	.word	0x0801a3e2
 8012218:	0801a3d9 	.word	0x0801a3d9
 801221c:	0801a391 	.word	0x0801a391
 8012220:	3ff80000 	.word	0x3ff80000
 8012224:	0801a4f8 	.word	0x0801a4f8
 8012228:	0801a45c 	.word	0x0801a45c
 801222c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801222e:	9a00      	ldr	r2, [sp, #0]
 8012230:	601a      	str	r2, [r3, #0]
 8012232:	9b01      	ldr	r3, [sp, #4]
 8012234:	2b0e      	cmp	r3, #14
 8012236:	f200 80ad 	bhi.w	8012394 <_dtoa_r+0x484>
 801223a:	2d00      	cmp	r5, #0
 801223c:	f000 80aa 	beq.w	8012394 <_dtoa_r+0x484>
 8012240:	f1ba 0f00 	cmp.w	sl, #0
 8012244:	dd36      	ble.n	80122b4 <_dtoa_r+0x3a4>
 8012246:	4ac3      	ldr	r2, [pc, #780]	; (8012554 <_dtoa_r+0x644>)
 8012248:	f00a 030f 	and.w	r3, sl, #15
 801224c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012250:	ed93 7b00 	vldr	d7, [r3]
 8012254:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012258:	ea4f 172a 	mov.w	r7, sl, asr #4
 801225c:	eeb0 8a47 	vmov.f32	s16, s14
 8012260:	eef0 8a67 	vmov.f32	s17, s15
 8012264:	d016      	beq.n	8012294 <_dtoa_r+0x384>
 8012266:	4bbc      	ldr	r3, [pc, #752]	; (8012558 <_dtoa_r+0x648>)
 8012268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801226c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012270:	f7ee faec 	bl	800084c <__aeabi_ddiv>
 8012274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012278:	f007 070f 	and.w	r7, r7, #15
 801227c:	2503      	movs	r5, #3
 801227e:	4eb6      	ldr	r6, [pc, #728]	; (8012558 <_dtoa_r+0x648>)
 8012280:	b957      	cbnz	r7, 8012298 <_dtoa_r+0x388>
 8012282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012286:	ec53 2b18 	vmov	r2, r3, d8
 801228a:	f7ee fadf 	bl	800084c <__aeabi_ddiv>
 801228e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012292:	e029      	b.n	80122e8 <_dtoa_r+0x3d8>
 8012294:	2502      	movs	r5, #2
 8012296:	e7f2      	b.n	801227e <_dtoa_r+0x36e>
 8012298:	07f9      	lsls	r1, r7, #31
 801229a:	d508      	bpl.n	80122ae <_dtoa_r+0x39e>
 801229c:	ec51 0b18 	vmov	r0, r1, d8
 80122a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80122a4:	f7ee f9a8 	bl	80005f8 <__aeabi_dmul>
 80122a8:	ec41 0b18 	vmov	d8, r0, r1
 80122ac:	3501      	adds	r5, #1
 80122ae:	107f      	asrs	r7, r7, #1
 80122b0:	3608      	adds	r6, #8
 80122b2:	e7e5      	b.n	8012280 <_dtoa_r+0x370>
 80122b4:	f000 80a6 	beq.w	8012404 <_dtoa_r+0x4f4>
 80122b8:	f1ca 0600 	rsb	r6, sl, #0
 80122bc:	4ba5      	ldr	r3, [pc, #660]	; (8012554 <_dtoa_r+0x644>)
 80122be:	4fa6      	ldr	r7, [pc, #664]	; (8012558 <_dtoa_r+0x648>)
 80122c0:	f006 020f 	and.w	r2, r6, #15
 80122c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80122d0:	f7ee f992 	bl	80005f8 <__aeabi_dmul>
 80122d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122d8:	1136      	asrs	r6, r6, #4
 80122da:	2300      	movs	r3, #0
 80122dc:	2502      	movs	r5, #2
 80122de:	2e00      	cmp	r6, #0
 80122e0:	f040 8085 	bne.w	80123ee <_dtoa_r+0x4de>
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d1d2      	bne.n	801228e <_dtoa_r+0x37e>
 80122e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f000 808c 	beq.w	8012408 <_dtoa_r+0x4f8>
 80122f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80122f4:	4b99      	ldr	r3, [pc, #612]	; (801255c <_dtoa_r+0x64c>)
 80122f6:	2200      	movs	r2, #0
 80122f8:	4630      	mov	r0, r6
 80122fa:	4639      	mov	r1, r7
 80122fc:	f7ee fbee 	bl	8000adc <__aeabi_dcmplt>
 8012300:	2800      	cmp	r0, #0
 8012302:	f000 8081 	beq.w	8012408 <_dtoa_r+0x4f8>
 8012306:	9b01      	ldr	r3, [sp, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d07d      	beq.n	8012408 <_dtoa_r+0x4f8>
 801230c:	f1b9 0f00 	cmp.w	r9, #0
 8012310:	dd3c      	ble.n	801238c <_dtoa_r+0x47c>
 8012312:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8012316:	9307      	str	r3, [sp, #28]
 8012318:	2200      	movs	r2, #0
 801231a:	4b91      	ldr	r3, [pc, #580]	; (8012560 <_dtoa_r+0x650>)
 801231c:	4630      	mov	r0, r6
 801231e:	4639      	mov	r1, r7
 8012320:	f7ee f96a 	bl	80005f8 <__aeabi_dmul>
 8012324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012328:	3501      	adds	r5, #1
 801232a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801232e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012332:	4628      	mov	r0, r5
 8012334:	f7ee f8f6 	bl	8000524 <__aeabi_i2d>
 8012338:	4632      	mov	r2, r6
 801233a:	463b      	mov	r3, r7
 801233c:	f7ee f95c 	bl	80005f8 <__aeabi_dmul>
 8012340:	4b88      	ldr	r3, [pc, #544]	; (8012564 <_dtoa_r+0x654>)
 8012342:	2200      	movs	r2, #0
 8012344:	f7ed ffa2 	bl	800028c <__adddf3>
 8012348:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801234c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012350:	9303      	str	r3, [sp, #12]
 8012352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012354:	2b00      	cmp	r3, #0
 8012356:	d15c      	bne.n	8012412 <_dtoa_r+0x502>
 8012358:	4b83      	ldr	r3, [pc, #524]	; (8012568 <_dtoa_r+0x658>)
 801235a:	2200      	movs	r2, #0
 801235c:	4630      	mov	r0, r6
 801235e:	4639      	mov	r1, r7
 8012360:	f7ed ff92 	bl	8000288 <__aeabi_dsub>
 8012364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012368:	4606      	mov	r6, r0
 801236a:	460f      	mov	r7, r1
 801236c:	f7ee fbd4 	bl	8000b18 <__aeabi_dcmpgt>
 8012370:	2800      	cmp	r0, #0
 8012372:	f040 8296 	bne.w	80128a2 <_dtoa_r+0x992>
 8012376:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801237a:	4630      	mov	r0, r6
 801237c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012380:	4639      	mov	r1, r7
 8012382:	f7ee fbab 	bl	8000adc <__aeabi_dcmplt>
 8012386:	2800      	cmp	r0, #0
 8012388:	f040 8288 	bne.w	801289c <_dtoa_r+0x98c>
 801238c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012390:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012394:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012396:	2b00      	cmp	r3, #0
 8012398:	f2c0 8158 	blt.w	801264c <_dtoa_r+0x73c>
 801239c:	f1ba 0f0e 	cmp.w	sl, #14
 80123a0:	f300 8154 	bgt.w	801264c <_dtoa_r+0x73c>
 80123a4:	4b6b      	ldr	r3, [pc, #428]	; (8012554 <_dtoa_r+0x644>)
 80123a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80123aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80123ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	f280 80e3 	bge.w	801257c <_dtoa_r+0x66c>
 80123b6:	9b01      	ldr	r3, [sp, #4]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	f300 80df 	bgt.w	801257c <_dtoa_r+0x66c>
 80123be:	f040 826d 	bne.w	801289c <_dtoa_r+0x98c>
 80123c2:	4b69      	ldr	r3, [pc, #420]	; (8012568 <_dtoa_r+0x658>)
 80123c4:	2200      	movs	r2, #0
 80123c6:	4640      	mov	r0, r8
 80123c8:	4649      	mov	r1, r9
 80123ca:	f7ee f915 	bl	80005f8 <__aeabi_dmul>
 80123ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123d2:	f7ee fb97 	bl	8000b04 <__aeabi_dcmpge>
 80123d6:	9e01      	ldr	r6, [sp, #4]
 80123d8:	4637      	mov	r7, r6
 80123da:	2800      	cmp	r0, #0
 80123dc:	f040 8243 	bne.w	8012866 <_dtoa_r+0x956>
 80123e0:	9d00      	ldr	r5, [sp, #0]
 80123e2:	2331      	movs	r3, #49	; 0x31
 80123e4:	f805 3b01 	strb.w	r3, [r5], #1
 80123e8:	f10a 0a01 	add.w	sl, sl, #1
 80123ec:	e23f      	b.n	801286e <_dtoa_r+0x95e>
 80123ee:	07f2      	lsls	r2, r6, #31
 80123f0:	d505      	bpl.n	80123fe <_dtoa_r+0x4ee>
 80123f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80123f6:	f7ee f8ff 	bl	80005f8 <__aeabi_dmul>
 80123fa:	3501      	adds	r5, #1
 80123fc:	2301      	movs	r3, #1
 80123fe:	1076      	asrs	r6, r6, #1
 8012400:	3708      	adds	r7, #8
 8012402:	e76c      	b.n	80122de <_dtoa_r+0x3ce>
 8012404:	2502      	movs	r5, #2
 8012406:	e76f      	b.n	80122e8 <_dtoa_r+0x3d8>
 8012408:	9b01      	ldr	r3, [sp, #4]
 801240a:	f8cd a01c 	str.w	sl, [sp, #28]
 801240e:	930c      	str	r3, [sp, #48]	; 0x30
 8012410:	e78d      	b.n	801232e <_dtoa_r+0x41e>
 8012412:	9900      	ldr	r1, [sp, #0]
 8012414:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012416:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012418:	4b4e      	ldr	r3, [pc, #312]	; (8012554 <_dtoa_r+0x644>)
 801241a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801241e:	4401      	add	r1, r0
 8012420:	9102      	str	r1, [sp, #8]
 8012422:	9908      	ldr	r1, [sp, #32]
 8012424:	eeb0 8a47 	vmov.f32	s16, s14
 8012428:	eef0 8a67 	vmov.f32	s17, s15
 801242c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012430:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012434:	2900      	cmp	r1, #0
 8012436:	d045      	beq.n	80124c4 <_dtoa_r+0x5b4>
 8012438:	494c      	ldr	r1, [pc, #304]	; (801256c <_dtoa_r+0x65c>)
 801243a:	2000      	movs	r0, #0
 801243c:	f7ee fa06 	bl	800084c <__aeabi_ddiv>
 8012440:	ec53 2b18 	vmov	r2, r3, d8
 8012444:	f7ed ff20 	bl	8000288 <__aeabi_dsub>
 8012448:	9d00      	ldr	r5, [sp, #0]
 801244a:	ec41 0b18 	vmov	d8, r0, r1
 801244e:	4639      	mov	r1, r7
 8012450:	4630      	mov	r0, r6
 8012452:	f7ee fb81 	bl	8000b58 <__aeabi_d2iz>
 8012456:	900c      	str	r0, [sp, #48]	; 0x30
 8012458:	f7ee f864 	bl	8000524 <__aeabi_i2d>
 801245c:	4602      	mov	r2, r0
 801245e:	460b      	mov	r3, r1
 8012460:	4630      	mov	r0, r6
 8012462:	4639      	mov	r1, r7
 8012464:	f7ed ff10 	bl	8000288 <__aeabi_dsub>
 8012468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801246a:	3330      	adds	r3, #48	; 0x30
 801246c:	f805 3b01 	strb.w	r3, [r5], #1
 8012470:	ec53 2b18 	vmov	r2, r3, d8
 8012474:	4606      	mov	r6, r0
 8012476:	460f      	mov	r7, r1
 8012478:	f7ee fb30 	bl	8000adc <__aeabi_dcmplt>
 801247c:	2800      	cmp	r0, #0
 801247e:	d165      	bne.n	801254c <_dtoa_r+0x63c>
 8012480:	4632      	mov	r2, r6
 8012482:	463b      	mov	r3, r7
 8012484:	4935      	ldr	r1, [pc, #212]	; (801255c <_dtoa_r+0x64c>)
 8012486:	2000      	movs	r0, #0
 8012488:	f7ed fefe 	bl	8000288 <__aeabi_dsub>
 801248c:	ec53 2b18 	vmov	r2, r3, d8
 8012490:	f7ee fb24 	bl	8000adc <__aeabi_dcmplt>
 8012494:	2800      	cmp	r0, #0
 8012496:	f040 80b9 	bne.w	801260c <_dtoa_r+0x6fc>
 801249a:	9b02      	ldr	r3, [sp, #8]
 801249c:	429d      	cmp	r5, r3
 801249e:	f43f af75 	beq.w	801238c <_dtoa_r+0x47c>
 80124a2:	4b2f      	ldr	r3, [pc, #188]	; (8012560 <_dtoa_r+0x650>)
 80124a4:	ec51 0b18 	vmov	r0, r1, d8
 80124a8:	2200      	movs	r2, #0
 80124aa:	f7ee f8a5 	bl	80005f8 <__aeabi_dmul>
 80124ae:	4b2c      	ldr	r3, [pc, #176]	; (8012560 <_dtoa_r+0x650>)
 80124b0:	ec41 0b18 	vmov	d8, r0, r1
 80124b4:	2200      	movs	r2, #0
 80124b6:	4630      	mov	r0, r6
 80124b8:	4639      	mov	r1, r7
 80124ba:	f7ee f89d 	bl	80005f8 <__aeabi_dmul>
 80124be:	4606      	mov	r6, r0
 80124c0:	460f      	mov	r7, r1
 80124c2:	e7c4      	b.n	801244e <_dtoa_r+0x53e>
 80124c4:	ec51 0b17 	vmov	r0, r1, d7
 80124c8:	f7ee f896 	bl	80005f8 <__aeabi_dmul>
 80124cc:	9b02      	ldr	r3, [sp, #8]
 80124ce:	9d00      	ldr	r5, [sp, #0]
 80124d0:	930c      	str	r3, [sp, #48]	; 0x30
 80124d2:	ec41 0b18 	vmov	d8, r0, r1
 80124d6:	4639      	mov	r1, r7
 80124d8:	4630      	mov	r0, r6
 80124da:	f7ee fb3d 	bl	8000b58 <__aeabi_d2iz>
 80124de:	9011      	str	r0, [sp, #68]	; 0x44
 80124e0:	f7ee f820 	bl	8000524 <__aeabi_i2d>
 80124e4:	4602      	mov	r2, r0
 80124e6:	460b      	mov	r3, r1
 80124e8:	4630      	mov	r0, r6
 80124ea:	4639      	mov	r1, r7
 80124ec:	f7ed fecc 	bl	8000288 <__aeabi_dsub>
 80124f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80124f2:	3330      	adds	r3, #48	; 0x30
 80124f4:	f805 3b01 	strb.w	r3, [r5], #1
 80124f8:	9b02      	ldr	r3, [sp, #8]
 80124fa:	429d      	cmp	r5, r3
 80124fc:	4606      	mov	r6, r0
 80124fe:	460f      	mov	r7, r1
 8012500:	f04f 0200 	mov.w	r2, #0
 8012504:	d134      	bne.n	8012570 <_dtoa_r+0x660>
 8012506:	4b19      	ldr	r3, [pc, #100]	; (801256c <_dtoa_r+0x65c>)
 8012508:	ec51 0b18 	vmov	r0, r1, d8
 801250c:	f7ed febe 	bl	800028c <__adddf3>
 8012510:	4602      	mov	r2, r0
 8012512:	460b      	mov	r3, r1
 8012514:	4630      	mov	r0, r6
 8012516:	4639      	mov	r1, r7
 8012518:	f7ee fafe 	bl	8000b18 <__aeabi_dcmpgt>
 801251c:	2800      	cmp	r0, #0
 801251e:	d175      	bne.n	801260c <_dtoa_r+0x6fc>
 8012520:	ec53 2b18 	vmov	r2, r3, d8
 8012524:	4911      	ldr	r1, [pc, #68]	; (801256c <_dtoa_r+0x65c>)
 8012526:	2000      	movs	r0, #0
 8012528:	f7ed feae 	bl	8000288 <__aeabi_dsub>
 801252c:	4602      	mov	r2, r0
 801252e:	460b      	mov	r3, r1
 8012530:	4630      	mov	r0, r6
 8012532:	4639      	mov	r1, r7
 8012534:	f7ee fad2 	bl	8000adc <__aeabi_dcmplt>
 8012538:	2800      	cmp	r0, #0
 801253a:	f43f af27 	beq.w	801238c <_dtoa_r+0x47c>
 801253e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012540:	1e6b      	subs	r3, r5, #1
 8012542:	930c      	str	r3, [sp, #48]	; 0x30
 8012544:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012548:	2b30      	cmp	r3, #48	; 0x30
 801254a:	d0f8      	beq.n	801253e <_dtoa_r+0x62e>
 801254c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012550:	e04a      	b.n	80125e8 <_dtoa_r+0x6d8>
 8012552:	bf00      	nop
 8012554:	0801a4f8 	.word	0x0801a4f8
 8012558:	0801a4d0 	.word	0x0801a4d0
 801255c:	3ff00000 	.word	0x3ff00000
 8012560:	40240000 	.word	0x40240000
 8012564:	401c0000 	.word	0x401c0000
 8012568:	40140000 	.word	0x40140000
 801256c:	3fe00000 	.word	0x3fe00000
 8012570:	4baf      	ldr	r3, [pc, #700]	; (8012830 <_dtoa_r+0x920>)
 8012572:	f7ee f841 	bl	80005f8 <__aeabi_dmul>
 8012576:	4606      	mov	r6, r0
 8012578:	460f      	mov	r7, r1
 801257a:	e7ac      	b.n	80124d6 <_dtoa_r+0x5c6>
 801257c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012580:	9d00      	ldr	r5, [sp, #0]
 8012582:	4642      	mov	r2, r8
 8012584:	464b      	mov	r3, r9
 8012586:	4630      	mov	r0, r6
 8012588:	4639      	mov	r1, r7
 801258a:	f7ee f95f 	bl	800084c <__aeabi_ddiv>
 801258e:	f7ee fae3 	bl	8000b58 <__aeabi_d2iz>
 8012592:	9002      	str	r0, [sp, #8]
 8012594:	f7ed ffc6 	bl	8000524 <__aeabi_i2d>
 8012598:	4642      	mov	r2, r8
 801259a:	464b      	mov	r3, r9
 801259c:	f7ee f82c 	bl	80005f8 <__aeabi_dmul>
 80125a0:	4602      	mov	r2, r0
 80125a2:	460b      	mov	r3, r1
 80125a4:	4630      	mov	r0, r6
 80125a6:	4639      	mov	r1, r7
 80125a8:	f7ed fe6e 	bl	8000288 <__aeabi_dsub>
 80125ac:	9e02      	ldr	r6, [sp, #8]
 80125ae:	9f01      	ldr	r7, [sp, #4]
 80125b0:	3630      	adds	r6, #48	; 0x30
 80125b2:	f805 6b01 	strb.w	r6, [r5], #1
 80125b6:	9e00      	ldr	r6, [sp, #0]
 80125b8:	1bae      	subs	r6, r5, r6
 80125ba:	42b7      	cmp	r7, r6
 80125bc:	4602      	mov	r2, r0
 80125be:	460b      	mov	r3, r1
 80125c0:	d137      	bne.n	8012632 <_dtoa_r+0x722>
 80125c2:	f7ed fe63 	bl	800028c <__adddf3>
 80125c6:	4642      	mov	r2, r8
 80125c8:	464b      	mov	r3, r9
 80125ca:	4606      	mov	r6, r0
 80125cc:	460f      	mov	r7, r1
 80125ce:	f7ee faa3 	bl	8000b18 <__aeabi_dcmpgt>
 80125d2:	b9c8      	cbnz	r0, 8012608 <_dtoa_r+0x6f8>
 80125d4:	4642      	mov	r2, r8
 80125d6:	464b      	mov	r3, r9
 80125d8:	4630      	mov	r0, r6
 80125da:	4639      	mov	r1, r7
 80125dc:	f7ee fa74 	bl	8000ac8 <__aeabi_dcmpeq>
 80125e0:	b110      	cbz	r0, 80125e8 <_dtoa_r+0x6d8>
 80125e2:	9b02      	ldr	r3, [sp, #8]
 80125e4:	07d9      	lsls	r1, r3, #31
 80125e6:	d40f      	bmi.n	8012608 <_dtoa_r+0x6f8>
 80125e8:	4620      	mov	r0, r4
 80125ea:	4659      	mov	r1, fp
 80125ec:	f000 fba8 	bl	8012d40 <_Bfree>
 80125f0:	2300      	movs	r3, #0
 80125f2:	702b      	strb	r3, [r5, #0]
 80125f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125f6:	f10a 0001 	add.w	r0, sl, #1
 80125fa:	6018      	str	r0, [r3, #0]
 80125fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125fe:	2b00      	cmp	r3, #0
 8012600:	f43f acd8 	beq.w	8011fb4 <_dtoa_r+0xa4>
 8012604:	601d      	str	r5, [r3, #0]
 8012606:	e4d5      	b.n	8011fb4 <_dtoa_r+0xa4>
 8012608:	f8cd a01c 	str.w	sl, [sp, #28]
 801260c:	462b      	mov	r3, r5
 801260e:	461d      	mov	r5, r3
 8012610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012614:	2a39      	cmp	r2, #57	; 0x39
 8012616:	d108      	bne.n	801262a <_dtoa_r+0x71a>
 8012618:	9a00      	ldr	r2, [sp, #0]
 801261a:	429a      	cmp	r2, r3
 801261c:	d1f7      	bne.n	801260e <_dtoa_r+0x6fe>
 801261e:	9a07      	ldr	r2, [sp, #28]
 8012620:	9900      	ldr	r1, [sp, #0]
 8012622:	3201      	adds	r2, #1
 8012624:	9207      	str	r2, [sp, #28]
 8012626:	2230      	movs	r2, #48	; 0x30
 8012628:	700a      	strb	r2, [r1, #0]
 801262a:	781a      	ldrb	r2, [r3, #0]
 801262c:	3201      	adds	r2, #1
 801262e:	701a      	strb	r2, [r3, #0]
 8012630:	e78c      	b.n	801254c <_dtoa_r+0x63c>
 8012632:	4b7f      	ldr	r3, [pc, #508]	; (8012830 <_dtoa_r+0x920>)
 8012634:	2200      	movs	r2, #0
 8012636:	f7ed ffdf 	bl	80005f8 <__aeabi_dmul>
 801263a:	2200      	movs	r2, #0
 801263c:	2300      	movs	r3, #0
 801263e:	4606      	mov	r6, r0
 8012640:	460f      	mov	r7, r1
 8012642:	f7ee fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8012646:	2800      	cmp	r0, #0
 8012648:	d09b      	beq.n	8012582 <_dtoa_r+0x672>
 801264a:	e7cd      	b.n	80125e8 <_dtoa_r+0x6d8>
 801264c:	9a08      	ldr	r2, [sp, #32]
 801264e:	2a00      	cmp	r2, #0
 8012650:	f000 80c4 	beq.w	80127dc <_dtoa_r+0x8cc>
 8012654:	9a05      	ldr	r2, [sp, #20]
 8012656:	2a01      	cmp	r2, #1
 8012658:	f300 80a8 	bgt.w	80127ac <_dtoa_r+0x89c>
 801265c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801265e:	2a00      	cmp	r2, #0
 8012660:	f000 80a0 	beq.w	80127a4 <_dtoa_r+0x894>
 8012664:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012668:	9e06      	ldr	r6, [sp, #24]
 801266a:	4645      	mov	r5, r8
 801266c:	9a04      	ldr	r2, [sp, #16]
 801266e:	2101      	movs	r1, #1
 8012670:	441a      	add	r2, r3
 8012672:	4620      	mov	r0, r4
 8012674:	4498      	add	r8, r3
 8012676:	9204      	str	r2, [sp, #16]
 8012678:	f000 fc1e 	bl	8012eb8 <__i2b>
 801267c:	4607      	mov	r7, r0
 801267e:	2d00      	cmp	r5, #0
 8012680:	dd0b      	ble.n	801269a <_dtoa_r+0x78a>
 8012682:	9b04      	ldr	r3, [sp, #16]
 8012684:	2b00      	cmp	r3, #0
 8012686:	dd08      	ble.n	801269a <_dtoa_r+0x78a>
 8012688:	42ab      	cmp	r3, r5
 801268a:	9a04      	ldr	r2, [sp, #16]
 801268c:	bfa8      	it	ge
 801268e:	462b      	movge	r3, r5
 8012690:	eba8 0803 	sub.w	r8, r8, r3
 8012694:	1aed      	subs	r5, r5, r3
 8012696:	1ad3      	subs	r3, r2, r3
 8012698:	9304      	str	r3, [sp, #16]
 801269a:	9b06      	ldr	r3, [sp, #24]
 801269c:	b1fb      	cbz	r3, 80126de <_dtoa_r+0x7ce>
 801269e:	9b08      	ldr	r3, [sp, #32]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	f000 809f 	beq.w	80127e4 <_dtoa_r+0x8d4>
 80126a6:	2e00      	cmp	r6, #0
 80126a8:	dd11      	ble.n	80126ce <_dtoa_r+0x7be>
 80126aa:	4639      	mov	r1, r7
 80126ac:	4632      	mov	r2, r6
 80126ae:	4620      	mov	r0, r4
 80126b0:	f000 fcbe 	bl	8013030 <__pow5mult>
 80126b4:	465a      	mov	r2, fp
 80126b6:	4601      	mov	r1, r0
 80126b8:	4607      	mov	r7, r0
 80126ba:	4620      	mov	r0, r4
 80126bc:	f000 fc12 	bl	8012ee4 <__multiply>
 80126c0:	4659      	mov	r1, fp
 80126c2:	9007      	str	r0, [sp, #28]
 80126c4:	4620      	mov	r0, r4
 80126c6:	f000 fb3b 	bl	8012d40 <_Bfree>
 80126ca:	9b07      	ldr	r3, [sp, #28]
 80126cc:	469b      	mov	fp, r3
 80126ce:	9b06      	ldr	r3, [sp, #24]
 80126d0:	1b9a      	subs	r2, r3, r6
 80126d2:	d004      	beq.n	80126de <_dtoa_r+0x7ce>
 80126d4:	4659      	mov	r1, fp
 80126d6:	4620      	mov	r0, r4
 80126d8:	f000 fcaa 	bl	8013030 <__pow5mult>
 80126dc:	4683      	mov	fp, r0
 80126de:	2101      	movs	r1, #1
 80126e0:	4620      	mov	r0, r4
 80126e2:	f000 fbe9 	bl	8012eb8 <__i2b>
 80126e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	4606      	mov	r6, r0
 80126ec:	dd7c      	ble.n	80127e8 <_dtoa_r+0x8d8>
 80126ee:	461a      	mov	r2, r3
 80126f0:	4601      	mov	r1, r0
 80126f2:	4620      	mov	r0, r4
 80126f4:	f000 fc9c 	bl	8013030 <__pow5mult>
 80126f8:	9b05      	ldr	r3, [sp, #20]
 80126fa:	2b01      	cmp	r3, #1
 80126fc:	4606      	mov	r6, r0
 80126fe:	dd76      	ble.n	80127ee <_dtoa_r+0x8de>
 8012700:	2300      	movs	r3, #0
 8012702:	9306      	str	r3, [sp, #24]
 8012704:	6933      	ldr	r3, [r6, #16]
 8012706:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801270a:	6918      	ldr	r0, [r3, #16]
 801270c:	f000 fb84 	bl	8012e18 <__hi0bits>
 8012710:	f1c0 0020 	rsb	r0, r0, #32
 8012714:	9b04      	ldr	r3, [sp, #16]
 8012716:	4418      	add	r0, r3
 8012718:	f010 001f 	ands.w	r0, r0, #31
 801271c:	f000 8086 	beq.w	801282c <_dtoa_r+0x91c>
 8012720:	f1c0 0320 	rsb	r3, r0, #32
 8012724:	2b04      	cmp	r3, #4
 8012726:	dd7f      	ble.n	8012828 <_dtoa_r+0x918>
 8012728:	f1c0 001c 	rsb	r0, r0, #28
 801272c:	9b04      	ldr	r3, [sp, #16]
 801272e:	4403      	add	r3, r0
 8012730:	4480      	add	r8, r0
 8012732:	4405      	add	r5, r0
 8012734:	9304      	str	r3, [sp, #16]
 8012736:	f1b8 0f00 	cmp.w	r8, #0
 801273a:	dd05      	ble.n	8012748 <_dtoa_r+0x838>
 801273c:	4659      	mov	r1, fp
 801273e:	4642      	mov	r2, r8
 8012740:	4620      	mov	r0, r4
 8012742:	f000 fccf 	bl	80130e4 <__lshift>
 8012746:	4683      	mov	fp, r0
 8012748:	9b04      	ldr	r3, [sp, #16]
 801274a:	2b00      	cmp	r3, #0
 801274c:	dd05      	ble.n	801275a <_dtoa_r+0x84a>
 801274e:	4631      	mov	r1, r6
 8012750:	461a      	mov	r2, r3
 8012752:	4620      	mov	r0, r4
 8012754:	f000 fcc6 	bl	80130e4 <__lshift>
 8012758:	4606      	mov	r6, r0
 801275a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801275c:	2b00      	cmp	r3, #0
 801275e:	d069      	beq.n	8012834 <_dtoa_r+0x924>
 8012760:	4631      	mov	r1, r6
 8012762:	4658      	mov	r0, fp
 8012764:	f000 fd2a 	bl	80131bc <__mcmp>
 8012768:	2800      	cmp	r0, #0
 801276a:	da63      	bge.n	8012834 <_dtoa_r+0x924>
 801276c:	2300      	movs	r3, #0
 801276e:	4659      	mov	r1, fp
 8012770:	220a      	movs	r2, #10
 8012772:	4620      	mov	r0, r4
 8012774:	f000 fb06 	bl	8012d84 <__multadd>
 8012778:	9b08      	ldr	r3, [sp, #32]
 801277a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801277e:	4683      	mov	fp, r0
 8012780:	2b00      	cmp	r3, #0
 8012782:	f000 818f 	beq.w	8012aa4 <_dtoa_r+0xb94>
 8012786:	4639      	mov	r1, r7
 8012788:	2300      	movs	r3, #0
 801278a:	220a      	movs	r2, #10
 801278c:	4620      	mov	r0, r4
 801278e:	f000 faf9 	bl	8012d84 <__multadd>
 8012792:	f1b9 0f00 	cmp.w	r9, #0
 8012796:	4607      	mov	r7, r0
 8012798:	f300 808e 	bgt.w	80128b8 <_dtoa_r+0x9a8>
 801279c:	9b05      	ldr	r3, [sp, #20]
 801279e:	2b02      	cmp	r3, #2
 80127a0:	dc50      	bgt.n	8012844 <_dtoa_r+0x934>
 80127a2:	e089      	b.n	80128b8 <_dtoa_r+0x9a8>
 80127a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80127a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80127aa:	e75d      	b.n	8012668 <_dtoa_r+0x758>
 80127ac:	9b01      	ldr	r3, [sp, #4]
 80127ae:	1e5e      	subs	r6, r3, #1
 80127b0:	9b06      	ldr	r3, [sp, #24]
 80127b2:	42b3      	cmp	r3, r6
 80127b4:	bfbf      	itttt	lt
 80127b6:	9b06      	ldrlt	r3, [sp, #24]
 80127b8:	9606      	strlt	r6, [sp, #24]
 80127ba:	1af2      	sublt	r2, r6, r3
 80127bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80127be:	bfb6      	itet	lt
 80127c0:	189b      	addlt	r3, r3, r2
 80127c2:	1b9e      	subge	r6, r3, r6
 80127c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80127c6:	9b01      	ldr	r3, [sp, #4]
 80127c8:	bfb8      	it	lt
 80127ca:	2600      	movlt	r6, #0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	bfb5      	itete	lt
 80127d0:	eba8 0503 	sublt.w	r5, r8, r3
 80127d4:	9b01      	ldrge	r3, [sp, #4]
 80127d6:	2300      	movlt	r3, #0
 80127d8:	4645      	movge	r5, r8
 80127da:	e747      	b.n	801266c <_dtoa_r+0x75c>
 80127dc:	9e06      	ldr	r6, [sp, #24]
 80127de:	9f08      	ldr	r7, [sp, #32]
 80127e0:	4645      	mov	r5, r8
 80127e2:	e74c      	b.n	801267e <_dtoa_r+0x76e>
 80127e4:	9a06      	ldr	r2, [sp, #24]
 80127e6:	e775      	b.n	80126d4 <_dtoa_r+0x7c4>
 80127e8:	9b05      	ldr	r3, [sp, #20]
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	dc18      	bgt.n	8012820 <_dtoa_r+0x910>
 80127ee:	9b02      	ldr	r3, [sp, #8]
 80127f0:	b9b3      	cbnz	r3, 8012820 <_dtoa_r+0x910>
 80127f2:	9b03      	ldr	r3, [sp, #12]
 80127f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127f8:	b9a3      	cbnz	r3, 8012824 <_dtoa_r+0x914>
 80127fa:	9b03      	ldr	r3, [sp, #12]
 80127fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012800:	0d1b      	lsrs	r3, r3, #20
 8012802:	051b      	lsls	r3, r3, #20
 8012804:	b12b      	cbz	r3, 8012812 <_dtoa_r+0x902>
 8012806:	9b04      	ldr	r3, [sp, #16]
 8012808:	3301      	adds	r3, #1
 801280a:	9304      	str	r3, [sp, #16]
 801280c:	f108 0801 	add.w	r8, r8, #1
 8012810:	2301      	movs	r3, #1
 8012812:	9306      	str	r3, [sp, #24]
 8012814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012816:	2b00      	cmp	r3, #0
 8012818:	f47f af74 	bne.w	8012704 <_dtoa_r+0x7f4>
 801281c:	2001      	movs	r0, #1
 801281e:	e779      	b.n	8012714 <_dtoa_r+0x804>
 8012820:	2300      	movs	r3, #0
 8012822:	e7f6      	b.n	8012812 <_dtoa_r+0x902>
 8012824:	9b02      	ldr	r3, [sp, #8]
 8012826:	e7f4      	b.n	8012812 <_dtoa_r+0x902>
 8012828:	d085      	beq.n	8012736 <_dtoa_r+0x826>
 801282a:	4618      	mov	r0, r3
 801282c:	301c      	adds	r0, #28
 801282e:	e77d      	b.n	801272c <_dtoa_r+0x81c>
 8012830:	40240000 	.word	0x40240000
 8012834:	9b01      	ldr	r3, [sp, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	dc38      	bgt.n	80128ac <_dtoa_r+0x99c>
 801283a:	9b05      	ldr	r3, [sp, #20]
 801283c:	2b02      	cmp	r3, #2
 801283e:	dd35      	ble.n	80128ac <_dtoa_r+0x99c>
 8012840:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012844:	f1b9 0f00 	cmp.w	r9, #0
 8012848:	d10d      	bne.n	8012866 <_dtoa_r+0x956>
 801284a:	4631      	mov	r1, r6
 801284c:	464b      	mov	r3, r9
 801284e:	2205      	movs	r2, #5
 8012850:	4620      	mov	r0, r4
 8012852:	f000 fa97 	bl	8012d84 <__multadd>
 8012856:	4601      	mov	r1, r0
 8012858:	4606      	mov	r6, r0
 801285a:	4658      	mov	r0, fp
 801285c:	f000 fcae 	bl	80131bc <__mcmp>
 8012860:	2800      	cmp	r0, #0
 8012862:	f73f adbd 	bgt.w	80123e0 <_dtoa_r+0x4d0>
 8012866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012868:	9d00      	ldr	r5, [sp, #0]
 801286a:	ea6f 0a03 	mvn.w	sl, r3
 801286e:	f04f 0800 	mov.w	r8, #0
 8012872:	4631      	mov	r1, r6
 8012874:	4620      	mov	r0, r4
 8012876:	f000 fa63 	bl	8012d40 <_Bfree>
 801287a:	2f00      	cmp	r7, #0
 801287c:	f43f aeb4 	beq.w	80125e8 <_dtoa_r+0x6d8>
 8012880:	f1b8 0f00 	cmp.w	r8, #0
 8012884:	d005      	beq.n	8012892 <_dtoa_r+0x982>
 8012886:	45b8      	cmp	r8, r7
 8012888:	d003      	beq.n	8012892 <_dtoa_r+0x982>
 801288a:	4641      	mov	r1, r8
 801288c:	4620      	mov	r0, r4
 801288e:	f000 fa57 	bl	8012d40 <_Bfree>
 8012892:	4639      	mov	r1, r7
 8012894:	4620      	mov	r0, r4
 8012896:	f000 fa53 	bl	8012d40 <_Bfree>
 801289a:	e6a5      	b.n	80125e8 <_dtoa_r+0x6d8>
 801289c:	2600      	movs	r6, #0
 801289e:	4637      	mov	r7, r6
 80128a0:	e7e1      	b.n	8012866 <_dtoa_r+0x956>
 80128a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80128a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80128a8:	4637      	mov	r7, r6
 80128aa:	e599      	b.n	80123e0 <_dtoa_r+0x4d0>
 80128ac:	9b08      	ldr	r3, [sp, #32]
 80128ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f000 80fd 	beq.w	8012ab2 <_dtoa_r+0xba2>
 80128b8:	2d00      	cmp	r5, #0
 80128ba:	dd05      	ble.n	80128c8 <_dtoa_r+0x9b8>
 80128bc:	4639      	mov	r1, r7
 80128be:	462a      	mov	r2, r5
 80128c0:	4620      	mov	r0, r4
 80128c2:	f000 fc0f 	bl	80130e4 <__lshift>
 80128c6:	4607      	mov	r7, r0
 80128c8:	9b06      	ldr	r3, [sp, #24]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d05c      	beq.n	8012988 <_dtoa_r+0xa78>
 80128ce:	6879      	ldr	r1, [r7, #4]
 80128d0:	4620      	mov	r0, r4
 80128d2:	f000 f9f5 	bl	8012cc0 <_Balloc>
 80128d6:	4605      	mov	r5, r0
 80128d8:	b928      	cbnz	r0, 80128e6 <_dtoa_r+0x9d6>
 80128da:	4b80      	ldr	r3, [pc, #512]	; (8012adc <_dtoa_r+0xbcc>)
 80128dc:	4602      	mov	r2, r0
 80128de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80128e2:	f7ff bb2e 	b.w	8011f42 <_dtoa_r+0x32>
 80128e6:	693a      	ldr	r2, [r7, #16]
 80128e8:	3202      	adds	r2, #2
 80128ea:	0092      	lsls	r2, r2, #2
 80128ec:	f107 010c 	add.w	r1, r7, #12
 80128f0:	300c      	adds	r0, #12
 80128f2:	f7fe fc4c 	bl	801118e <memcpy>
 80128f6:	2201      	movs	r2, #1
 80128f8:	4629      	mov	r1, r5
 80128fa:	4620      	mov	r0, r4
 80128fc:	f000 fbf2 	bl	80130e4 <__lshift>
 8012900:	9b00      	ldr	r3, [sp, #0]
 8012902:	3301      	adds	r3, #1
 8012904:	9301      	str	r3, [sp, #4]
 8012906:	9b00      	ldr	r3, [sp, #0]
 8012908:	444b      	add	r3, r9
 801290a:	9307      	str	r3, [sp, #28]
 801290c:	9b02      	ldr	r3, [sp, #8]
 801290e:	f003 0301 	and.w	r3, r3, #1
 8012912:	46b8      	mov	r8, r7
 8012914:	9306      	str	r3, [sp, #24]
 8012916:	4607      	mov	r7, r0
 8012918:	9b01      	ldr	r3, [sp, #4]
 801291a:	4631      	mov	r1, r6
 801291c:	3b01      	subs	r3, #1
 801291e:	4658      	mov	r0, fp
 8012920:	9302      	str	r3, [sp, #8]
 8012922:	f7ff fa67 	bl	8011df4 <quorem>
 8012926:	4603      	mov	r3, r0
 8012928:	3330      	adds	r3, #48	; 0x30
 801292a:	9004      	str	r0, [sp, #16]
 801292c:	4641      	mov	r1, r8
 801292e:	4658      	mov	r0, fp
 8012930:	9308      	str	r3, [sp, #32]
 8012932:	f000 fc43 	bl	80131bc <__mcmp>
 8012936:	463a      	mov	r2, r7
 8012938:	4681      	mov	r9, r0
 801293a:	4631      	mov	r1, r6
 801293c:	4620      	mov	r0, r4
 801293e:	f000 fc59 	bl	80131f4 <__mdiff>
 8012942:	68c2      	ldr	r2, [r0, #12]
 8012944:	9b08      	ldr	r3, [sp, #32]
 8012946:	4605      	mov	r5, r0
 8012948:	bb02      	cbnz	r2, 801298c <_dtoa_r+0xa7c>
 801294a:	4601      	mov	r1, r0
 801294c:	4658      	mov	r0, fp
 801294e:	f000 fc35 	bl	80131bc <__mcmp>
 8012952:	9b08      	ldr	r3, [sp, #32]
 8012954:	4602      	mov	r2, r0
 8012956:	4629      	mov	r1, r5
 8012958:	4620      	mov	r0, r4
 801295a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801295e:	f000 f9ef 	bl	8012d40 <_Bfree>
 8012962:	9b05      	ldr	r3, [sp, #20]
 8012964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012966:	9d01      	ldr	r5, [sp, #4]
 8012968:	ea43 0102 	orr.w	r1, r3, r2
 801296c:	9b06      	ldr	r3, [sp, #24]
 801296e:	430b      	orrs	r3, r1
 8012970:	9b08      	ldr	r3, [sp, #32]
 8012972:	d10d      	bne.n	8012990 <_dtoa_r+0xa80>
 8012974:	2b39      	cmp	r3, #57	; 0x39
 8012976:	d029      	beq.n	80129cc <_dtoa_r+0xabc>
 8012978:	f1b9 0f00 	cmp.w	r9, #0
 801297c:	dd01      	ble.n	8012982 <_dtoa_r+0xa72>
 801297e:	9b04      	ldr	r3, [sp, #16]
 8012980:	3331      	adds	r3, #49	; 0x31
 8012982:	9a02      	ldr	r2, [sp, #8]
 8012984:	7013      	strb	r3, [r2, #0]
 8012986:	e774      	b.n	8012872 <_dtoa_r+0x962>
 8012988:	4638      	mov	r0, r7
 801298a:	e7b9      	b.n	8012900 <_dtoa_r+0x9f0>
 801298c:	2201      	movs	r2, #1
 801298e:	e7e2      	b.n	8012956 <_dtoa_r+0xa46>
 8012990:	f1b9 0f00 	cmp.w	r9, #0
 8012994:	db06      	blt.n	80129a4 <_dtoa_r+0xa94>
 8012996:	9905      	ldr	r1, [sp, #20]
 8012998:	ea41 0909 	orr.w	r9, r1, r9
 801299c:	9906      	ldr	r1, [sp, #24]
 801299e:	ea59 0101 	orrs.w	r1, r9, r1
 80129a2:	d120      	bne.n	80129e6 <_dtoa_r+0xad6>
 80129a4:	2a00      	cmp	r2, #0
 80129a6:	ddec      	ble.n	8012982 <_dtoa_r+0xa72>
 80129a8:	4659      	mov	r1, fp
 80129aa:	2201      	movs	r2, #1
 80129ac:	4620      	mov	r0, r4
 80129ae:	9301      	str	r3, [sp, #4]
 80129b0:	f000 fb98 	bl	80130e4 <__lshift>
 80129b4:	4631      	mov	r1, r6
 80129b6:	4683      	mov	fp, r0
 80129b8:	f000 fc00 	bl	80131bc <__mcmp>
 80129bc:	2800      	cmp	r0, #0
 80129be:	9b01      	ldr	r3, [sp, #4]
 80129c0:	dc02      	bgt.n	80129c8 <_dtoa_r+0xab8>
 80129c2:	d1de      	bne.n	8012982 <_dtoa_r+0xa72>
 80129c4:	07da      	lsls	r2, r3, #31
 80129c6:	d5dc      	bpl.n	8012982 <_dtoa_r+0xa72>
 80129c8:	2b39      	cmp	r3, #57	; 0x39
 80129ca:	d1d8      	bne.n	801297e <_dtoa_r+0xa6e>
 80129cc:	9a02      	ldr	r2, [sp, #8]
 80129ce:	2339      	movs	r3, #57	; 0x39
 80129d0:	7013      	strb	r3, [r2, #0]
 80129d2:	462b      	mov	r3, r5
 80129d4:	461d      	mov	r5, r3
 80129d6:	3b01      	subs	r3, #1
 80129d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80129dc:	2a39      	cmp	r2, #57	; 0x39
 80129de:	d050      	beq.n	8012a82 <_dtoa_r+0xb72>
 80129e0:	3201      	adds	r2, #1
 80129e2:	701a      	strb	r2, [r3, #0]
 80129e4:	e745      	b.n	8012872 <_dtoa_r+0x962>
 80129e6:	2a00      	cmp	r2, #0
 80129e8:	dd03      	ble.n	80129f2 <_dtoa_r+0xae2>
 80129ea:	2b39      	cmp	r3, #57	; 0x39
 80129ec:	d0ee      	beq.n	80129cc <_dtoa_r+0xabc>
 80129ee:	3301      	adds	r3, #1
 80129f0:	e7c7      	b.n	8012982 <_dtoa_r+0xa72>
 80129f2:	9a01      	ldr	r2, [sp, #4]
 80129f4:	9907      	ldr	r1, [sp, #28]
 80129f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80129fa:	428a      	cmp	r2, r1
 80129fc:	d02a      	beq.n	8012a54 <_dtoa_r+0xb44>
 80129fe:	4659      	mov	r1, fp
 8012a00:	2300      	movs	r3, #0
 8012a02:	220a      	movs	r2, #10
 8012a04:	4620      	mov	r0, r4
 8012a06:	f000 f9bd 	bl	8012d84 <__multadd>
 8012a0a:	45b8      	cmp	r8, r7
 8012a0c:	4683      	mov	fp, r0
 8012a0e:	f04f 0300 	mov.w	r3, #0
 8012a12:	f04f 020a 	mov.w	r2, #10
 8012a16:	4641      	mov	r1, r8
 8012a18:	4620      	mov	r0, r4
 8012a1a:	d107      	bne.n	8012a2c <_dtoa_r+0xb1c>
 8012a1c:	f000 f9b2 	bl	8012d84 <__multadd>
 8012a20:	4680      	mov	r8, r0
 8012a22:	4607      	mov	r7, r0
 8012a24:	9b01      	ldr	r3, [sp, #4]
 8012a26:	3301      	adds	r3, #1
 8012a28:	9301      	str	r3, [sp, #4]
 8012a2a:	e775      	b.n	8012918 <_dtoa_r+0xa08>
 8012a2c:	f000 f9aa 	bl	8012d84 <__multadd>
 8012a30:	4639      	mov	r1, r7
 8012a32:	4680      	mov	r8, r0
 8012a34:	2300      	movs	r3, #0
 8012a36:	220a      	movs	r2, #10
 8012a38:	4620      	mov	r0, r4
 8012a3a:	f000 f9a3 	bl	8012d84 <__multadd>
 8012a3e:	4607      	mov	r7, r0
 8012a40:	e7f0      	b.n	8012a24 <_dtoa_r+0xb14>
 8012a42:	f1b9 0f00 	cmp.w	r9, #0
 8012a46:	9a00      	ldr	r2, [sp, #0]
 8012a48:	bfcc      	ite	gt
 8012a4a:	464d      	movgt	r5, r9
 8012a4c:	2501      	movle	r5, #1
 8012a4e:	4415      	add	r5, r2
 8012a50:	f04f 0800 	mov.w	r8, #0
 8012a54:	4659      	mov	r1, fp
 8012a56:	2201      	movs	r2, #1
 8012a58:	4620      	mov	r0, r4
 8012a5a:	9301      	str	r3, [sp, #4]
 8012a5c:	f000 fb42 	bl	80130e4 <__lshift>
 8012a60:	4631      	mov	r1, r6
 8012a62:	4683      	mov	fp, r0
 8012a64:	f000 fbaa 	bl	80131bc <__mcmp>
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	dcb2      	bgt.n	80129d2 <_dtoa_r+0xac2>
 8012a6c:	d102      	bne.n	8012a74 <_dtoa_r+0xb64>
 8012a6e:	9b01      	ldr	r3, [sp, #4]
 8012a70:	07db      	lsls	r3, r3, #31
 8012a72:	d4ae      	bmi.n	80129d2 <_dtoa_r+0xac2>
 8012a74:	462b      	mov	r3, r5
 8012a76:	461d      	mov	r5, r3
 8012a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a7c:	2a30      	cmp	r2, #48	; 0x30
 8012a7e:	d0fa      	beq.n	8012a76 <_dtoa_r+0xb66>
 8012a80:	e6f7      	b.n	8012872 <_dtoa_r+0x962>
 8012a82:	9a00      	ldr	r2, [sp, #0]
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d1a5      	bne.n	80129d4 <_dtoa_r+0xac4>
 8012a88:	f10a 0a01 	add.w	sl, sl, #1
 8012a8c:	2331      	movs	r3, #49	; 0x31
 8012a8e:	e779      	b.n	8012984 <_dtoa_r+0xa74>
 8012a90:	4b13      	ldr	r3, [pc, #76]	; (8012ae0 <_dtoa_r+0xbd0>)
 8012a92:	f7ff baaf 	b.w	8011ff4 <_dtoa_r+0xe4>
 8012a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f47f aa86 	bne.w	8011faa <_dtoa_r+0x9a>
 8012a9e:	4b11      	ldr	r3, [pc, #68]	; (8012ae4 <_dtoa_r+0xbd4>)
 8012aa0:	f7ff baa8 	b.w	8011ff4 <_dtoa_r+0xe4>
 8012aa4:	f1b9 0f00 	cmp.w	r9, #0
 8012aa8:	dc03      	bgt.n	8012ab2 <_dtoa_r+0xba2>
 8012aaa:	9b05      	ldr	r3, [sp, #20]
 8012aac:	2b02      	cmp	r3, #2
 8012aae:	f73f aec9 	bgt.w	8012844 <_dtoa_r+0x934>
 8012ab2:	9d00      	ldr	r5, [sp, #0]
 8012ab4:	4631      	mov	r1, r6
 8012ab6:	4658      	mov	r0, fp
 8012ab8:	f7ff f99c 	bl	8011df4 <quorem>
 8012abc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012ac0:	f805 3b01 	strb.w	r3, [r5], #1
 8012ac4:	9a00      	ldr	r2, [sp, #0]
 8012ac6:	1aaa      	subs	r2, r5, r2
 8012ac8:	4591      	cmp	r9, r2
 8012aca:	ddba      	ble.n	8012a42 <_dtoa_r+0xb32>
 8012acc:	4659      	mov	r1, fp
 8012ace:	2300      	movs	r3, #0
 8012ad0:	220a      	movs	r2, #10
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f000 f956 	bl	8012d84 <__multadd>
 8012ad8:	4683      	mov	fp, r0
 8012ada:	e7eb      	b.n	8012ab4 <_dtoa_r+0xba4>
 8012adc:	0801a45c 	.word	0x0801a45c
 8012ae0:	0801a390 	.word	0x0801a390
 8012ae4:	0801a3d9 	.word	0x0801a3d9

08012ae8 <__sflush_r>:
 8012ae8:	898a      	ldrh	r2, [r1, #12]
 8012aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aee:	4605      	mov	r5, r0
 8012af0:	0710      	lsls	r0, r2, #28
 8012af2:	460c      	mov	r4, r1
 8012af4:	d458      	bmi.n	8012ba8 <__sflush_r+0xc0>
 8012af6:	684b      	ldr	r3, [r1, #4]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	dc05      	bgt.n	8012b08 <__sflush_r+0x20>
 8012afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	dc02      	bgt.n	8012b08 <__sflush_r+0x20>
 8012b02:	2000      	movs	r0, #0
 8012b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b0a:	2e00      	cmp	r6, #0
 8012b0c:	d0f9      	beq.n	8012b02 <__sflush_r+0x1a>
 8012b0e:	2300      	movs	r3, #0
 8012b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012b14:	682f      	ldr	r7, [r5, #0]
 8012b16:	602b      	str	r3, [r5, #0]
 8012b18:	d032      	beq.n	8012b80 <__sflush_r+0x98>
 8012b1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012b1c:	89a3      	ldrh	r3, [r4, #12]
 8012b1e:	075a      	lsls	r2, r3, #29
 8012b20:	d505      	bpl.n	8012b2e <__sflush_r+0x46>
 8012b22:	6863      	ldr	r3, [r4, #4]
 8012b24:	1ac0      	subs	r0, r0, r3
 8012b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b28:	b10b      	cbz	r3, 8012b2e <__sflush_r+0x46>
 8012b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012b2c:	1ac0      	subs	r0, r0, r3
 8012b2e:	2300      	movs	r3, #0
 8012b30:	4602      	mov	r2, r0
 8012b32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b34:	6a21      	ldr	r1, [r4, #32]
 8012b36:	4628      	mov	r0, r5
 8012b38:	47b0      	blx	r6
 8012b3a:	1c43      	adds	r3, r0, #1
 8012b3c:	89a3      	ldrh	r3, [r4, #12]
 8012b3e:	d106      	bne.n	8012b4e <__sflush_r+0x66>
 8012b40:	6829      	ldr	r1, [r5, #0]
 8012b42:	291d      	cmp	r1, #29
 8012b44:	d82c      	bhi.n	8012ba0 <__sflush_r+0xb8>
 8012b46:	4a2a      	ldr	r2, [pc, #168]	; (8012bf0 <__sflush_r+0x108>)
 8012b48:	40ca      	lsrs	r2, r1
 8012b4a:	07d6      	lsls	r6, r2, #31
 8012b4c:	d528      	bpl.n	8012ba0 <__sflush_r+0xb8>
 8012b4e:	2200      	movs	r2, #0
 8012b50:	6062      	str	r2, [r4, #4]
 8012b52:	04d9      	lsls	r1, r3, #19
 8012b54:	6922      	ldr	r2, [r4, #16]
 8012b56:	6022      	str	r2, [r4, #0]
 8012b58:	d504      	bpl.n	8012b64 <__sflush_r+0x7c>
 8012b5a:	1c42      	adds	r2, r0, #1
 8012b5c:	d101      	bne.n	8012b62 <__sflush_r+0x7a>
 8012b5e:	682b      	ldr	r3, [r5, #0]
 8012b60:	b903      	cbnz	r3, 8012b64 <__sflush_r+0x7c>
 8012b62:	6560      	str	r0, [r4, #84]	; 0x54
 8012b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b66:	602f      	str	r7, [r5, #0]
 8012b68:	2900      	cmp	r1, #0
 8012b6a:	d0ca      	beq.n	8012b02 <__sflush_r+0x1a>
 8012b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b70:	4299      	cmp	r1, r3
 8012b72:	d002      	beq.n	8012b7a <__sflush_r+0x92>
 8012b74:	4628      	mov	r0, r5
 8012b76:	f000 fc31 	bl	80133dc <_free_r>
 8012b7a:	2000      	movs	r0, #0
 8012b7c:	6360      	str	r0, [r4, #52]	; 0x34
 8012b7e:	e7c1      	b.n	8012b04 <__sflush_r+0x1c>
 8012b80:	6a21      	ldr	r1, [r4, #32]
 8012b82:	2301      	movs	r3, #1
 8012b84:	4628      	mov	r0, r5
 8012b86:	47b0      	blx	r6
 8012b88:	1c41      	adds	r1, r0, #1
 8012b8a:	d1c7      	bne.n	8012b1c <__sflush_r+0x34>
 8012b8c:	682b      	ldr	r3, [r5, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d0c4      	beq.n	8012b1c <__sflush_r+0x34>
 8012b92:	2b1d      	cmp	r3, #29
 8012b94:	d001      	beq.n	8012b9a <__sflush_r+0xb2>
 8012b96:	2b16      	cmp	r3, #22
 8012b98:	d101      	bne.n	8012b9e <__sflush_r+0xb6>
 8012b9a:	602f      	str	r7, [r5, #0]
 8012b9c:	e7b1      	b.n	8012b02 <__sflush_r+0x1a>
 8012b9e:	89a3      	ldrh	r3, [r4, #12]
 8012ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ba4:	81a3      	strh	r3, [r4, #12]
 8012ba6:	e7ad      	b.n	8012b04 <__sflush_r+0x1c>
 8012ba8:	690f      	ldr	r7, [r1, #16]
 8012baa:	2f00      	cmp	r7, #0
 8012bac:	d0a9      	beq.n	8012b02 <__sflush_r+0x1a>
 8012bae:	0793      	lsls	r3, r2, #30
 8012bb0:	680e      	ldr	r6, [r1, #0]
 8012bb2:	bf08      	it	eq
 8012bb4:	694b      	ldreq	r3, [r1, #20]
 8012bb6:	600f      	str	r7, [r1, #0]
 8012bb8:	bf18      	it	ne
 8012bba:	2300      	movne	r3, #0
 8012bbc:	eba6 0807 	sub.w	r8, r6, r7
 8012bc0:	608b      	str	r3, [r1, #8]
 8012bc2:	f1b8 0f00 	cmp.w	r8, #0
 8012bc6:	dd9c      	ble.n	8012b02 <__sflush_r+0x1a>
 8012bc8:	6a21      	ldr	r1, [r4, #32]
 8012bca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012bcc:	4643      	mov	r3, r8
 8012bce:	463a      	mov	r2, r7
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	47b0      	blx	r6
 8012bd4:	2800      	cmp	r0, #0
 8012bd6:	dc06      	bgt.n	8012be6 <__sflush_r+0xfe>
 8012bd8:	89a3      	ldrh	r3, [r4, #12]
 8012bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bde:	81a3      	strh	r3, [r4, #12]
 8012be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012be4:	e78e      	b.n	8012b04 <__sflush_r+0x1c>
 8012be6:	4407      	add	r7, r0
 8012be8:	eba8 0800 	sub.w	r8, r8, r0
 8012bec:	e7e9      	b.n	8012bc2 <__sflush_r+0xda>
 8012bee:	bf00      	nop
 8012bf0:	20400001 	.word	0x20400001

08012bf4 <_fflush_r>:
 8012bf4:	b538      	push	{r3, r4, r5, lr}
 8012bf6:	690b      	ldr	r3, [r1, #16]
 8012bf8:	4605      	mov	r5, r0
 8012bfa:	460c      	mov	r4, r1
 8012bfc:	b913      	cbnz	r3, 8012c04 <_fflush_r+0x10>
 8012bfe:	2500      	movs	r5, #0
 8012c00:	4628      	mov	r0, r5
 8012c02:	bd38      	pop	{r3, r4, r5, pc}
 8012c04:	b118      	cbz	r0, 8012c0e <_fflush_r+0x1a>
 8012c06:	6983      	ldr	r3, [r0, #24]
 8012c08:	b90b      	cbnz	r3, 8012c0e <_fflush_r+0x1a>
 8012c0a:	f7fe f9e1 	bl	8010fd0 <__sinit>
 8012c0e:	4b14      	ldr	r3, [pc, #80]	; (8012c60 <_fflush_r+0x6c>)
 8012c10:	429c      	cmp	r4, r3
 8012c12:	d11b      	bne.n	8012c4c <_fflush_r+0x58>
 8012c14:	686c      	ldr	r4, [r5, #4]
 8012c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d0ef      	beq.n	8012bfe <_fflush_r+0xa>
 8012c1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012c20:	07d0      	lsls	r0, r2, #31
 8012c22:	d404      	bmi.n	8012c2e <_fflush_r+0x3a>
 8012c24:	0599      	lsls	r1, r3, #22
 8012c26:	d402      	bmi.n	8012c2e <_fflush_r+0x3a>
 8012c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c2a:	f7fe faae 	bl	801118a <__retarget_lock_acquire_recursive>
 8012c2e:	4628      	mov	r0, r5
 8012c30:	4621      	mov	r1, r4
 8012c32:	f7ff ff59 	bl	8012ae8 <__sflush_r>
 8012c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c38:	07da      	lsls	r2, r3, #31
 8012c3a:	4605      	mov	r5, r0
 8012c3c:	d4e0      	bmi.n	8012c00 <_fflush_r+0xc>
 8012c3e:	89a3      	ldrh	r3, [r4, #12]
 8012c40:	059b      	lsls	r3, r3, #22
 8012c42:	d4dd      	bmi.n	8012c00 <_fflush_r+0xc>
 8012c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c46:	f7fe faa1 	bl	801118c <__retarget_lock_release_recursive>
 8012c4a:	e7d9      	b.n	8012c00 <_fflush_r+0xc>
 8012c4c:	4b05      	ldr	r3, [pc, #20]	; (8012c64 <_fflush_r+0x70>)
 8012c4e:	429c      	cmp	r4, r3
 8012c50:	d101      	bne.n	8012c56 <_fflush_r+0x62>
 8012c52:	68ac      	ldr	r4, [r5, #8]
 8012c54:	e7df      	b.n	8012c16 <_fflush_r+0x22>
 8012c56:	4b04      	ldr	r3, [pc, #16]	; (8012c68 <_fflush_r+0x74>)
 8012c58:	429c      	cmp	r4, r3
 8012c5a:	bf08      	it	eq
 8012c5c:	68ec      	ldreq	r4, [r5, #12]
 8012c5e:	e7da      	b.n	8012c16 <_fflush_r+0x22>
 8012c60:	0801a33c 	.word	0x0801a33c
 8012c64:	0801a35c 	.word	0x0801a35c
 8012c68:	0801a31c 	.word	0x0801a31c

08012c6c <_localeconv_r>:
 8012c6c:	4800      	ldr	r0, [pc, #0]	; (8012c70 <_localeconv_r+0x4>)
 8012c6e:	4770      	bx	lr
 8012c70:	20000304 	.word	0x20000304

08012c74 <_lseek_r>:
 8012c74:	b538      	push	{r3, r4, r5, lr}
 8012c76:	4d07      	ldr	r5, [pc, #28]	; (8012c94 <_lseek_r+0x20>)
 8012c78:	4604      	mov	r4, r0
 8012c7a:	4608      	mov	r0, r1
 8012c7c:	4611      	mov	r1, r2
 8012c7e:	2200      	movs	r2, #0
 8012c80:	602a      	str	r2, [r5, #0]
 8012c82:	461a      	mov	r2, r3
 8012c84:	f7f1 f896 	bl	8003db4 <_lseek>
 8012c88:	1c43      	adds	r3, r0, #1
 8012c8a:	d102      	bne.n	8012c92 <_lseek_r+0x1e>
 8012c8c:	682b      	ldr	r3, [r5, #0]
 8012c8e:	b103      	cbz	r3, 8012c92 <_lseek_r+0x1e>
 8012c90:	6023      	str	r3, [r4, #0]
 8012c92:	bd38      	pop	{r3, r4, r5, pc}
 8012c94:	2000ef4c 	.word	0x2000ef4c

08012c98 <malloc>:
 8012c98:	4b02      	ldr	r3, [pc, #8]	; (8012ca4 <malloc+0xc>)
 8012c9a:	4601      	mov	r1, r0
 8012c9c:	6818      	ldr	r0, [r3, #0]
 8012c9e:	f7fe ba8d 	b.w	80111bc <_malloc_r>
 8012ca2:	bf00      	nop
 8012ca4:	200001b0 	.word	0x200001b0

08012ca8 <__malloc_lock>:
 8012ca8:	4801      	ldr	r0, [pc, #4]	; (8012cb0 <__malloc_lock+0x8>)
 8012caa:	f7fe ba6e 	b.w	801118a <__retarget_lock_acquire_recursive>
 8012cae:	bf00      	nop
 8012cb0:	2000ef44 	.word	0x2000ef44

08012cb4 <__malloc_unlock>:
 8012cb4:	4801      	ldr	r0, [pc, #4]	; (8012cbc <__malloc_unlock+0x8>)
 8012cb6:	f7fe ba69 	b.w	801118c <__retarget_lock_release_recursive>
 8012cba:	bf00      	nop
 8012cbc:	2000ef44 	.word	0x2000ef44

08012cc0 <_Balloc>:
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	460d      	mov	r5, r1
 8012cc8:	b976      	cbnz	r6, 8012ce8 <_Balloc+0x28>
 8012cca:	2010      	movs	r0, #16
 8012ccc:	f7ff ffe4 	bl	8012c98 <malloc>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	6260      	str	r0, [r4, #36]	; 0x24
 8012cd4:	b920      	cbnz	r0, 8012ce0 <_Balloc+0x20>
 8012cd6:	4b18      	ldr	r3, [pc, #96]	; (8012d38 <_Balloc+0x78>)
 8012cd8:	4818      	ldr	r0, [pc, #96]	; (8012d3c <_Balloc+0x7c>)
 8012cda:	2166      	movs	r1, #102	; 0x66
 8012cdc:	f000 fd3c 	bl	8013758 <__assert_func>
 8012ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ce4:	6006      	str	r6, [r0, #0]
 8012ce6:	60c6      	str	r6, [r0, #12]
 8012ce8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012cea:	68f3      	ldr	r3, [r6, #12]
 8012cec:	b183      	cbz	r3, 8012d10 <_Balloc+0x50>
 8012cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cf0:	68db      	ldr	r3, [r3, #12]
 8012cf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012cf6:	b9b8      	cbnz	r0, 8012d28 <_Balloc+0x68>
 8012cf8:	2101      	movs	r1, #1
 8012cfa:	fa01 f605 	lsl.w	r6, r1, r5
 8012cfe:	1d72      	adds	r2, r6, #5
 8012d00:	0092      	lsls	r2, r2, #2
 8012d02:	4620      	mov	r0, r4
 8012d04:	f000 fb5a 	bl	80133bc <_calloc_r>
 8012d08:	b160      	cbz	r0, 8012d24 <_Balloc+0x64>
 8012d0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d0e:	e00e      	b.n	8012d2e <_Balloc+0x6e>
 8012d10:	2221      	movs	r2, #33	; 0x21
 8012d12:	2104      	movs	r1, #4
 8012d14:	4620      	mov	r0, r4
 8012d16:	f000 fb51 	bl	80133bc <_calloc_r>
 8012d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d1c:	60f0      	str	r0, [r6, #12]
 8012d1e:	68db      	ldr	r3, [r3, #12]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d1e4      	bne.n	8012cee <_Balloc+0x2e>
 8012d24:	2000      	movs	r0, #0
 8012d26:	bd70      	pop	{r4, r5, r6, pc}
 8012d28:	6802      	ldr	r2, [r0, #0]
 8012d2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d2e:	2300      	movs	r3, #0
 8012d30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d34:	e7f7      	b.n	8012d26 <_Balloc+0x66>
 8012d36:	bf00      	nop
 8012d38:	0801a3e6 	.word	0x0801a3e6
 8012d3c:	0801a46d 	.word	0x0801a46d

08012d40 <_Bfree>:
 8012d40:	b570      	push	{r4, r5, r6, lr}
 8012d42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d44:	4605      	mov	r5, r0
 8012d46:	460c      	mov	r4, r1
 8012d48:	b976      	cbnz	r6, 8012d68 <_Bfree+0x28>
 8012d4a:	2010      	movs	r0, #16
 8012d4c:	f7ff ffa4 	bl	8012c98 <malloc>
 8012d50:	4602      	mov	r2, r0
 8012d52:	6268      	str	r0, [r5, #36]	; 0x24
 8012d54:	b920      	cbnz	r0, 8012d60 <_Bfree+0x20>
 8012d56:	4b09      	ldr	r3, [pc, #36]	; (8012d7c <_Bfree+0x3c>)
 8012d58:	4809      	ldr	r0, [pc, #36]	; (8012d80 <_Bfree+0x40>)
 8012d5a:	218a      	movs	r1, #138	; 0x8a
 8012d5c:	f000 fcfc 	bl	8013758 <__assert_func>
 8012d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d64:	6006      	str	r6, [r0, #0]
 8012d66:	60c6      	str	r6, [r0, #12]
 8012d68:	b13c      	cbz	r4, 8012d7a <_Bfree+0x3a>
 8012d6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012d6c:	6862      	ldr	r2, [r4, #4]
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d74:	6021      	str	r1, [r4, #0]
 8012d76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d7a:	bd70      	pop	{r4, r5, r6, pc}
 8012d7c:	0801a3e6 	.word	0x0801a3e6
 8012d80:	0801a46d 	.word	0x0801a46d

08012d84 <__multadd>:
 8012d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d88:	690e      	ldr	r6, [r1, #16]
 8012d8a:	4607      	mov	r7, r0
 8012d8c:	4698      	mov	r8, r3
 8012d8e:	460c      	mov	r4, r1
 8012d90:	f101 0014 	add.w	r0, r1, #20
 8012d94:	2300      	movs	r3, #0
 8012d96:	6805      	ldr	r5, [r0, #0]
 8012d98:	b2a9      	uxth	r1, r5
 8012d9a:	fb02 8101 	mla	r1, r2, r1, r8
 8012d9e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012da2:	0c2d      	lsrs	r5, r5, #16
 8012da4:	fb02 c505 	mla	r5, r2, r5, ip
 8012da8:	b289      	uxth	r1, r1
 8012daa:	3301      	adds	r3, #1
 8012dac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012db0:	429e      	cmp	r6, r3
 8012db2:	f840 1b04 	str.w	r1, [r0], #4
 8012db6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012dba:	dcec      	bgt.n	8012d96 <__multadd+0x12>
 8012dbc:	f1b8 0f00 	cmp.w	r8, #0
 8012dc0:	d022      	beq.n	8012e08 <__multadd+0x84>
 8012dc2:	68a3      	ldr	r3, [r4, #8]
 8012dc4:	42b3      	cmp	r3, r6
 8012dc6:	dc19      	bgt.n	8012dfc <__multadd+0x78>
 8012dc8:	6861      	ldr	r1, [r4, #4]
 8012dca:	4638      	mov	r0, r7
 8012dcc:	3101      	adds	r1, #1
 8012dce:	f7ff ff77 	bl	8012cc0 <_Balloc>
 8012dd2:	4605      	mov	r5, r0
 8012dd4:	b928      	cbnz	r0, 8012de2 <__multadd+0x5e>
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	4b0d      	ldr	r3, [pc, #52]	; (8012e10 <__multadd+0x8c>)
 8012dda:	480e      	ldr	r0, [pc, #56]	; (8012e14 <__multadd+0x90>)
 8012ddc:	21b5      	movs	r1, #181	; 0xb5
 8012dde:	f000 fcbb 	bl	8013758 <__assert_func>
 8012de2:	6922      	ldr	r2, [r4, #16]
 8012de4:	3202      	adds	r2, #2
 8012de6:	f104 010c 	add.w	r1, r4, #12
 8012dea:	0092      	lsls	r2, r2, #2
 8012dec:	300c      	adds	r0, #12
 8012dee:	f7fe f9ce 	bl	801118e <memcpy>
 8012df2:	4621      	mov	r1, r4
 8012df4:	4638      	mov	r0, r7
 8012df6:	f7ff ffa3 	bl	8012d40 <_Bfree>
 8012dfa:	462c      	mov	r4, r5
 8012dfc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012e00:	3601      	adds	r6, #1
 8012e02:	f8c3 8014 	str.w	r8, [r3, #20]
 8012e06:	6126      	str	r6, [r4, #16]
 8012e08:	4620      	mov	r0, r4
 8012e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e0e:	bf00      	nop
 8012e10:	0801a45c 	.word	0x0801a45c
 8012e14:	0801a46d 	.word	0x0801a46d

08012e18 <__hi0bits>:
 8012e18:	0c03      	lsrs	r3, r0, #16
 8012e1a:	041b      	lsls	r3, r3, #16
 8012e1c:	b9d3      	cbnz	r3, 8012e54 <__hi0bits+0x3c>
 8012e1e:	0400      	lsls	r0, r0, #16
 8012e20:	2310      	movs	r3, #16
 8012e22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012e26:	bf04      	itt	eq
 8012e28:	0200      	lsleq	r0, r0, #8
 8012e2a:	3308      	addeq	r3, #8
 8012e2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012e30:	bf04      	itt	eq
 8012e32:	0100      	lsleq	r0, r0, #4
 8012e34:	3304      	addeq	r3, #4
 8012e36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012e3a:	bf04      	itt	eq
 8012e3c:	0080      	lsleq	r0, r0, #2
 8012e3e:	3302      	addeq	r3, #2
 8012e40:	2800      	cmp	r0, #0
 8012e42:	db05      	blt.n	8012e50 <__hi0bits+0x38>
 8012e44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012e48:	f103 0301 	add.w	r3, r3, #1
 8012e4c:	bf08      	it	eq
 8012e4e:	2320      	moveq	r3, #32
 8012e50:	4618      	mov	r0, r3
 8012e52:	4770      	bx	lr
 8012e54:	2300      	movs	r3, #0
 8012e56:	e7e4      	b.n	8012e22 <__hi0bits+0xa>

08012e58 <__lo0bits>:
 8012e58:	6803      	ldr	r3, [r0, #0]
 8012e5a:	f013 0207 	ands.w	r2, r3, #7
 8012e5e:	4601      	mov	r1, r0
 8012e60:	d00b      	beq.n	8012e7a <__lo0bits+0x22>
 8012e62:	07da      	lsls	r2, r3, #31
 8012e64:	d424      	bmi.n	8012eb0 <__lo0bits+0x58>
 8012e66:	0798      	lsls	r0, r3, #30
 8012e68:	bf49      	itett	mi
 8012e6a:	085b      	lsrmi	r3, r3, #1
 8012e6c:	089b      	lsrpl	r3, r3, #2
 8012e6e:	2001      	movmi	r0, #1
 8012e70:	600b      	strmi	r3, [r1, #0]
 8012e72:	bf5c      	itt	pl
 8012e74:	600b      	strpl	r3, [r1, #0]
 8012e76:	2002      	movpl	r0, #2
 8012e78:	4770      	bx	lr
 8012e7a:	b298      	uxth	r0, r3
 8012e7c:	b9b0      	cbnz	r0, 8012eac <__lo0bits+0x54>
 8012e7e:	0c1b      	lsrs	r3, r3, #16
 8012e80:	2010      	movs	r0, #16
 8012e82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012e86:	bf04      	itt	eq
 8012e88:	0a1b      	lsreq	r3, r3, #8
 8012e8a:	3008      	addeq	r0, #8
 8012e8c:	071a      	lsls	r2, r3, #28
 8012e8e:	bf04      	itt	eq
 8012e90:	091b      	lsreq	r3, r3, #4
 8012e92:	3004      	addeq	r0, #4
 8012e94:	079a      	lsls	r2, r3, #30
 8012e96:	bf04      	itt	eq
 8012e98:	089b      	lsreq	r3, r3, #2
 8012e9a:	3002      	addeq	r0, #2
 8012e9c:	07da      	lsls	r2, r3, #31
 8012e9e:	d403      	bmi.n	8012ea8 <__lo0bits+0x50>
 8012ea0:	085b      	lsrs	r3, r3, #1
 8012ea2:	f100 0001 	add.w	r0, r0, #1
 8012ea6:	d005      	beq.n	8012eb4 <__lo0bits+0x5c>
 8012ea8:	600b      	str	r3, [r1, #0]
 8012eaa:	4770      	bx	lr
 8012eac:	4610      	mov	r0, r2
 8012eae:	e7e8      	b.n	8012e82 <__lo0bits+0x2a>
 8012eb0:	2000      	movs	r0, #0
 8012eb2:	4770      	bx	lr
 8012eb4:	2020      	movs	r0, #32
 8012eb6:	4770      	bx	lr

08012eb8 <__i2b>:
 8012eb8:	b510      	push	{r4, lr}
 8012eba:	460c      	mov	r4, r1
 8012ebc:	2101      	movs	r1, #1
 8012ebe:	f7ff feff 	bl	8012cc0 <_Balloc>
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	b928      	cbnz	r0, 8012ed2 <__i2b+0x1a>
 8012ec6:	4b05      	ldr	r3, [pc, #20]	; (8012edc <__i2b+0x24>)
 8012ec8:	4805      	ldr	r0, [pc, #20]	; (8012ee0 <__i2b+0x28>)
 8012eca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012ece:	f000 fc43 	bl	8013758 <__assert_func>
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	6144      	str	r4, [r0, #20]
 8012ed6:	6103      	str	r3, [r0, #16]
 8012ed8:	bd10      	pop	{r4, pc}
 8012eda:	bf00      	nop
 8012edc:	0801a45c 	.word	0x0801a45c
 8012ee0:	0801a46d 	.word	0x0801a46d

08012ee4 <__multiply>:
 8012ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ee8:	4614      	mov	r4, r2
 8012eea:	690a      	ldr	r2, [r1, #16]
 8012eec:	6923      	ldr	r3, [r4, #16]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	bfb8      	it	lt
 8012ef2:	460b      	movlt	r3, r1
 8012ef4:	460d      	mov	r5, r1
 8012ef6:	bfbc      	itt	lt
 8012ef8:	4625      	movlt	r5, r4
 8012efa:	461c      	movlt	r4, r3
 8012efc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012f00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012f04:	68ab      	ldr	r3, [r5, #8]
 8012f06:	6869      	ldr	r1, [r5, #4]
 8012f08:	eb0a 0709 	add.w	r7, sl, r9
 8012f0c:	42bb      	cmp	r3, r7
 8012f0e:	b085      	sub	sp, #20
 8012f10:	bfb8      	it	lt
 8012f12:	3101      	addlt	r1, #1
 8012f14:	f7ff fed4 	bl	8012cc0 <_Balloc>
 8012f18:	b930      	cbnz	r0, 8012f28 <__multiply+0x44>
 8012f1a:	4602      	mov	r2, r0
 8012f1c:	4b42      	ldr	r3, [pc, #264]	; (8013028 <__multiply+0x144>)
 8012f1e:	4843      	ldr	r0, [pc, #268]	; (801302c <__multiply+0x148>)
 8012f20:	f240 115d 	movw	r1, #349	; 0x15d
 8012f24:	f000 fc18 	bl	8013758 <__assert_func>
 8012f28:	f100 0614 	add.w	r6, r0, #20
 8012f2c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012f30:	4633      	mov	r3, r6
 8012f32:	2200      	movs	r2, #0
 8012f34:	4543      	cmp	r3, r8
 8012f36:	d31e      	bcc.n	8012f76 <__multiply+0x92>
 8012f38:	f105 0c14 	add.w	ip, r5, #20
 8012f3c:	f104 0314 	add.w	r3, r4, #20
 8012f40:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012f44:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012f48:	9202      	str	r2, [sp, #8]
 8012f4a:	ebac 0205 	sub.w	r2, ip, r5
 8012f4e:	3a15      	subs	r2, #21
 8012f50:	f022 0203 	bic.w	r2, r2, #3
 8012f54:	3204      	adds	r2, #4
 8012f56:	f105 0115 	add.w	r1, r5, #21
 8012f5a:	458c      	cmp	ip, r1
 8012f5c:	bf38      	it	cc
 8012f5e:	2204      	movcc	r2, #4
 8012f60:	9201      	str	r2, [sp, #4]
 8012f62:	9a02      	ldr	r2, [sp, #8]
 8012f64:	9303      	str	r3, [sp, #12]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d808      	bhi.n	8012f7c <__multiply+0x98>
 8012f6a:	2f00      	cmp	r7, #0
 8012f6c:	dc55      	bgt.n	801301a <__multiply+0x136>
 8012f6e:	6107      	str	r7, [r0, #16]
 8012f70:	b005      	add	sp, #20
 8012f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f76:	f843 2b04 	str.w	r2, [r3], #4
 8012f7a:	e7db      	b.n	8012f34 <__multiply+0x50>
 8012f7c:	f8b3 a000 	ldrh.w	sl, [r3]
 8012f80:	f1ba 0f00 	cmp.w	sl, #0
 8012f84:	d020      	beq.n	8012fc8 <__multiply+0xe4>
 8012f86:	f105 0e14 	add.w	lr, r5, #20
 8012f8a:	46b1      	mov	r9, r6
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012f92:	f8d9 b000 	ldr.w	fp, [r9]
 8012f96:	b2a1      	uxth	r1, r4
 8012f98:	fa1f fb8b 	uxth.w	fp, fp
 8012f9c:	fb0a b101 	mla	r1, sl, r1, fp
 8012fa0:	4411      	add	r1, r2
 8012fa2:	f8d9 2000 	ldr.w	r2, [r9]
 8012fa6:	0c24      	lsrs	r4, r4, #16
 8012fa8:	0c12      	lsrs	r2, r2, #16
 8012faa:	fb0a 2404 	mla	r4, sl, r4, r2
 8012fae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012fb2:	b289      	uxth	r1, r1
 8012fb4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012fb8:	45f4      	cmp	ip, lr
 8012fba:	f849 1b04 	str.w	r1, [r9], #4
 8012fbe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012fc2:	d8e4      	bhi.n	8012f8e <__multiply+0xaa>
 8012fc4:	9901      	ldr	r1, [sp, #4]
 8012fc6:	5072      	str	r2, [r6, r1]
 8012fc8:	9a03      	ldr	r2, [sp, #12]
 8012fca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012fce:	3304      	adds	r3, #4
 8012fd0:	f1b9 0f00 	cmp.w	r9, #0
 8012fd4:	d01f      	beq.n	8013016 <__multiply+0x132>
 8012fd6:	6834      	ldr	r4, [r6, #0]
 8012fd8:	f105 0114 	add.w	r1, r5, #20
 8012fdc:	46b6      	mov	lr, r6
 8012fde:	f04f 0a00 	mov.w	sl, #0
 8012fe2:	880a      	ldrh	r2, [r1, #0]
 8012fe4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012fe8:	fb09 b202 	mla	r2, r9, r2, fp
 8012fec:	4492      	add	sl, r2
 8012fee:	b2a4      	uxth	r4, r4
 8012ff0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012ff4:	f84e 4b04 	str.w	r4, [lr], #4
 8012ff8:	f851 4b04 	ldr.w	r4, [r1], #4
 8012ffc:	f8be 2000 	ldrh.w	r2, [lr]
 8013000:	0c24      	lsrs	r4, r4, #16
 8013002:	fb09 2404 	mla	r4, r9, r4, r2
 8013006:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801300a:	458c      	cmp	ip, r1
 801300c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013010:	d8e7      	bhi.n	8012fe2 <__multiply+0xfe>
 8013012:	9a01      	ldr	r2, [sp, #4]
 8013014:	50b4      	str	r4, [r6, r2]
 8013016:	3604      	adds	r6, #4
 8013018:	e7a3      	b.n	8012f62 <__multiply+0x7e>
 801301a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801301e:	2b00      	cmp	r3, #0
 8013020:	d1a5      	bne.n	8012f6e <__multiply+0x8a>
 8013022:	3f01      	subs	r7, #1
 8013024:	e7a1      	b.n	8012f6a <__multiply+0x86>
 8013026:	bf00      	nop
 8013028:	0801a45c 	.word	0x0801a45c
 801302c:	0801a46d 	.word	0x0801a46d

08013030 <__pow5mult>:
 8013030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013034:	4615      	mov	r5, r2
 8013036:	f012 0203 	ands.w	r2, r2, #3
 801303a:	4606      	mov	r6, r0
 801303c:	460f      	mov	r7, r1
 801303e:	d007      	beq.n	8013050 <__pow5mult+0x20>
 8013040:	4c25      	ldr	r4, [pc, #148]	; (80130d8 <__pow5mult+0xa8>)
 8013042:	3a01      	subs	r2, #1
 8013044:	2300      	movs	r3, #0
 8013046:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801304a:	f7ff fe9b 	bl	8012d84 <__multadd>
 801304e:	4607      	mov	r7, r0
 8013050:	10ad      	asrs	r5, r5, #2
 8013052:	d03d      	beq.n	80130d0 <__pow5mult+0xa0>
 8013054:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013056:	b97c      	cbnz	r4, 8013078 <__pow5mult+0x48>
 8013058:	2010      	movs	r0, #16
 801305a:	f7ff fe1d 	bl	8012c98 <malloc>
 801305e:	4602      	mov	r2, r0
 8013060:	6270      	str	r0, [r6, #36]	; 0x24
 8013062:	b928      	cbnz	r0, 8013070 <__pow5mult+0x40>
 8013064:	4b1d      	ldr	r3, [pc, #116]	; (80130dc <__pow5mult+0xac>)
 8013066:	481e      	ldr	r0, [pc, #120]	; (80130e0 <__pow5mult+0xb0>)
 8013068:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801306c:	f000 fb74 	bl	8013758 <__assert_func>
 8013070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013074:	6004      	str	r4, [r0, #0]
 8013076:	60c4      	str	r4, [r0, #12]
 8013078:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801307c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013080:	b94c      	cbnz	r4, 8013096 <__pow5mult+0x66>
 8013082:	f240 2171 	movw	r1, #625	; 0x271
 8013086:	4630      	mov	r0, r6
 8013088:	f7ff ff16 	bl	8012eb8 <__i2b>
 801308c:	2300      	movs	r3, #0
 801308e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013092:	4604      	mov	r4, r0
 8013094:	6003      	str	r3, [r0, #0]
 8013096:	f04f 0900 	mov.w	r9, #0
 801309a:	07eb      	lsls	r3, r5, #31
 801309c:	d50a      	bpl.n	80130b4 <__pow5mult+0x84>
 801309e:	4639      	mov	r1, r7
 80130a0:	4622      	mov	r2, r4
 80130a2:	4630      	mov	r0, r6
 80130a4:	f7ff ff1e 	bl	8012ee4 <__multiply>
 80130a8:	4639      	mov	r1, r7
 80130aa:	4680      	mov	r8, r0
 80130ac:	4630      	mov	r0, r6
 80130ae:	f7ff fe47 	bl	8012d40 <_Bfree>
 80130b2:	4647      	mov	r7, r8
 80130b4:	106d      	asrs	r5, r5, #1
 80130b6:	d00b      	beq.n	80130d0 <__pow5mult+0xa0>
 80130b8:	6820      	ldr	r0, [r4, #0]
 80130ba:	b938      	cbnz	r0, 80130cc <__pow5mult+0x9c>
 80130bc:	4622      	mov	r2, r4
 80130be:	4621      	mov	r1, r4
 80130c0:	4630      	mov	r0, r6
 80130c2:	f7ff ff0f 	bl	8012ee4 <__multiply>
 80130c6:	6020      	str	r0, [r4, #0]
 80130c8:	f8c0 9000 	str.w	r9, [r0]
 80130cc:	4604      	mov	r4, r0
 80130ce:	e7e4      	b.n	801309a <__pow5mult+0x6a>
 80130d0:	4638      	mov	r0, r7
 80130d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130d6:	bf00      	nop
 80130d8:	0801a5c0 	.word	0x0801a5c0
 80130dc:	0801a3e6 	.word	0x0801a3e6
 80130e0:	0801a46d 	.word	0x0801a46d

080130e4 <__lshift>:
 80130e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130e8:	460c      	mov	r4, r1
 80130ea:	6849      	ldr	r1, [r1, #4]
 80130ec:	6923      	ldr	r3, [r4, #16]
 80130ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80130f2:	68a3      	ldr	r3, [r4, #8]
 80130f4:	4607      	mov	r7, r0
 80130f6:	4691      	mov	r9, r2
 80130f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80130fc:	f108 0601 	add.w	r6, r8, #1
 8013100:	42b3      	cmp	r3, r6
 8013102:	db0b      	blt.n	801311c <__lshift+0x38>
 8013104:	4638      	mov	r0, r7
 8013106:	f7ff fddb 	bl	8012cc0 <_Balloc>
 801310a:	4605      	mov	r5, r0
 801310c:	b948      	cbnz	r0, 8013122 <__lshift+0x3e>
 801310e:	4602      	mov	r2, r0
 8013110:	4b28      	ldr	r3, [pc, #160]	; (80131b4 <__lshift+0xd0>)
 8013112:	4829      	ldr	r0, [pc, #164]	; (80131b8 <__lshift+0xd4>)
 8013114:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013118:	f000 fb1e 	bl	8013758 <__assert_func>
 801311c:	3101      	adds	r1, #1
 801311e:	005b      	lsls	r3, r3, #1
 8013120:	e7ee      	b.n	8013100 <__lshift+0x1c>
 8013122:	2300      	movs	r3, #0
 8013124:	f100 0114 	add.w	r1, r0, #20
 8013128:	f100 0210 	add.w	r2, r0, #16
 801312c:	4618      	mov	r0, r3
 801312e:	4553      	cmp	r3, sl
 8013130:	db33      	blt.n	801319a <__lshift+0xb6>
 8013132:	6920      	ldr	r0, [r4, #16]
 8013134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013138:	f104 0314 	add.w	r3, r4, #20
 801313c:	f019 091f 	ands.w	r9, r9, #31
 8013140:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013144:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013148:	d02b      	beq.n	80131a2 <__lshift+0xbe>
 801314a:	f1c9 0e20 	rsb	lr, r9, #32
 801314e:	468a      	mov	sl, r1
 8013150:	2200      	movs	r2, #0
 8013152:	6818      	ldr	r0, [r3, #0]
 8013154:	fa00 f009 	lsl.w	r0, r0, r9
 8013158:	4302      	orrs	r2, r0
 801315a:	f84a 2b04 	str.w	r2, [sl], #4
 801315e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013162:	459c      	cmp	ip, r3
 8013164:	fa22 f20e 	lsr.w	r2, r2, lr
 8013168:	d8f3      	bhi.n	8013152 <__lshift+0x6e>
 801316a:	ebac 0304 	sub.w	r3, ip, r4
 801316e:	3b15      	subs	r3, #21
 8013170:	f023 0303 	bic.w	r3, r3, #3
 8013174:	3304      	adds	r3, #4
 8013176:	f104 0015 	add.w	r0, r4, #21
 801317a:	4584      	cmp	ip, r0
 801317c:	bf38      	it	cc
 801317e:	2304      	movcc	r3, #4
 8013180:	50ca      	str	r2, [r1, r3]
 8013182:	b10a      	cbz	r2, 8013188 <__lshift+0xa4>
 8013184:	f108 0602 	add.w	r6, r8, #2
 8013188:	3e01      	subs	r6, #1
 801318a:	4638      	mov	r0, r7
 801318c:	612e      	str	r6, [r5, #16]
 801318e:	4621      	mov	r1, r4
 8013190:	f7ff fdd6 	bl	8012d40 <_Bfree>
 8013194:	4628      	mov	r0, r5
 8013196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801319a:	f842 0f04 	str.w	r0, [r2, #4]!
 801319e:	3301      	adds	r3, #1
 80131a0:	e7c5      	b.n	801312e <__lshift+0x4a>
 80131a2:	3904      	subs	r1, #4
 80131a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80131a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80131ac:	459c      	cmp	ip, r3
 80131ae:	d8f9      	bhi.n	80131a4 <__lshift+0xc0>
 80131b0:	e7ea      	b.n	8013188 <__lshift+0xa4>
 80131b2:	bf00      	nop
 80131b4:	0801a45c 	.word	0x0801a45c
 80131b8:	0801a46d 	.word	0x0801a46d

080131bc <__mcmp>:
 80131bc:	b530      	push	{r4, r5, lr}
 80131be:	6902      	ldr	r2, [r0, #16]
 80131c0:	690c      	ldr	r4, [r1, #16]
 80131c2:	1b12      	subs	r2, r2, r4
 80131c4:	d10e      	bne.n	80131e4 <__mcmp+0x28>
 80131c6:	f100 0314 	add.w	r3, r0, #20
 80131ca:	3114      	adds	r1, #20
 80131cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80131d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80131d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80131d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80131dc:	42a5      	cmp	r5, r4
 80131de:	d003      	beq.n	80131e8 <__mcmp+0x2c>
 80131e0:	d305      	bcc.n	80131ee <__mcmp+0x32>
 80131e2:	2201      	movs	r2, #1
 80131e4:	4610      	mov	r0, r2
 80131e6:	bd30      	pop	{r4, r5, pc}
 80131e8:	4283      	cmp	r3, r0
 80131ea:	d3f3      	bcc.n	80131d4 <__mcmp+0x18>
 80131ec:	e7fa      	b.n	80131e4 <__mcmp+0x28>
 80131ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131f2:	e7f7      	b.n	80131e4 <__mcmp+0x28>

080131f4 <__mdiff>:
 80131f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131f8:	460c      	mov	r4, r1
 80131fa:	4606      	mov	r6, r0
 80131fc:	4611      	mov	r1, r2
 80131fe:	4620      	mov	r0, r4
 8013200:	4617      	mov	r7, r2
 8013202:	f7ff ffdb 	bl	80131bc <__mcmp>
 8013206:	1e05      	subs	r5, r0, #0
 8013208:	d110      	bne.n	801322c <__mdiff+0x38>
 801320a:	4629      	mov	r1, r5
 801320c:	4630      	mov	r0, r6
 801320e:	f7ff fd57 	bl	8012cc0 <_Balloc>
 8013212:	b930      	cbnz	r0, 8013222 <__mdiff+0x2e>
 8013214:	4b39      	ldr	r3, [pc, #228]	; (80132fc <__mdiff+0x108>)
 8013216:	4602      	mov	r2, r0
 8013218:	f240 2132 	movw	r1, #562	; 0x232
 801321c:	4838      	ldr	r0, [pc, #224]	; (8013300 <__mdiff+0x10c>)
 801321e:	f000 fa9b 	bl	8013758 <__assert_func>
 8013222:	2301      	movs	r3, #1
 8013224:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801322c:	bfa4      	itt	ge
 801322e:	463b      	movge	r3, r7
 8013230:	4627      	movge	r7, r4
 8013232:	4630      	mov	r0, r6
 8013234:	6879      	ldr	r1, [r7, #4]
 8013236:	bfa6      	itte	ge
 8013238:	461c      	movge	r4, r3
 801323a:	2500      	movge	r5, #0
 801323c:	2501      	movlt	r5, #1
 801323e:	f7ff fd3f 	bl	8012cc0 <_Balloc>
 8013242:	b920      	cbnz	r0, 801324e <__mdiff+0x5a>
 8013244:	4b2d      	ldr	r3, [pc, #180]	; (80132fc <__mdiff+0x108>)
 8013246:	4602      	mov	r2, r0
 8013248:	f44f 7110 	mov.w	r1, #576	; 0x240
 801324c:	e7e6      	b.n	801321c <__mdiff+0x28>
 801324e:	693e      	ldr	r6, [r7, #16]
 8013250:	60c5      	str	r5, [r0, #12]
 8013252:	6925      	ldr	r5, [r4, #16]
 8013254:	f107 0114 	add.w	r1, r7, #20
 8013258:	f104 0914 	add.w	r9, r4, #20
 801325c:	f100 0e14 	add.w	lr, r0, #20
 8013260:	f107 0210 	add.w	r2, r7, #16
 8013264:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013268:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801326c:	46f2      	mov	sl, lr
 801326e:	2700      	movs	r7, #0
 8013270:	f859 3b04 	ldr.w	r3, [r9], #4
 8013274:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013278:	fa1f f883 	uxth.w	r8, r3
 801327c:	fa17 f78b 	uxtah	r7, r7, fp
 8013280:	0c1b      	lsrs	r3, r3, #16
 8013282:	eba7 0808 	sub.w	r8, r7, r8
 8013286:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801328a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801328e:	fa1f f888 	uxth.w	r8, r8
 8013292:	141f      	asrs	r7, r3, #16
 8013294:	454d      	cmp	r5, r9
 8013296:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801329a:	f84a 3b04 	str.w	r3, [sl], #4
 801329e:	d8e7      	bhi.n	8013270 <__mdiff+0x7c>
 80132a0:	1b2b      	subs	r3, r5, r4
 80132a2:	3b15      	subs	r3, #21
 80132a4:	f023 0303 	bic.w	r3, r3, #3
 80132a8:	3304      	adds	r3, #4
 80132aa:	3415      	adds	r4, #21
 80132ac:	42a5      	cmp	r5, r4
 80132ae:	bf38      	it	cc
 80132b0:	2304      	movcc	r3, #4
 80132b2:	4419      	add	r1, r3
 80132b4:	4473      	add	r3, lr
 80132b6:	469e      	mov	lr, r3
 80132b8:	460d      	mov	r5, r1
 80132ba:	4565      	cmp	r5, ip
 80132bc:	d30e      	bcc.n	80132dc <__mdiff+0xe8>
 80132be:	f10c 0203 	add.w	r2, ip, #3
 80132c2:	1a52      	subs	r2, r2, r1
 80132c4:	f022 0203 	bic.w	r2, r2, #3
 80132c8:	3903      	subs	r1, #3
 80132ca:	458c      	cmp	ip, r1
 80132cc:	bf38      	it	cc
 80132ce:	2200      	movcc	r2, #0
 80132d0:	441a      	add	r2, r3
 80132d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80132d6:	b17b      	cbz	r3, 80132f8 <__mdiff+0x104>
 80132d8:	6106      	str	r6, [r0, #16]
 80132da:	e7a5      	b.n	8013228 <__mdiff+0x34>
 80132dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80132e0:	fa17 f488 	uxtah	r4, r7, r8
 80132e4:	1422      	asrs	r2, r4, #16
 80132e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80132ea:	b2a4      	uxth	r4, r4
 80132ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80132f0:	f84e 4b04 	str.w	r4, [lr], #4
 80132f4:	1417      	asrs	r7, r2, #16
 80132f6:	e7e0      	b.n	80132ba <__mdiff+0xc6>
 80132f8:	3e01      	subs	r6, #1
 80132fa:	e7ea      	b.n	80132d2 <__mdiff+0xde>
 80132fc:	0801a45c 	.word	0x0801a45c
 8013300:	0801a46d 	.word	0x0801a46d

08013304 <__d2b>:
 8013304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013308:	4689      	mov	r9, r1
 801330a:	2101      	movs	r1, #1
 801330c:	ec57 6b10 	vmov	r6, r7, d0
 8013310:	4690      	mov	r8, r2
 8013312:	f7ff fcd5 	bl	8012cc0 <_Balloc>
 8013316:	4604      	mov	r4, r0
 8013318:	b930      	cbnz	r0, 8013328 <__d2b+0x24>
 801331a:	4602      	mov	r2, r0
 801331c:	4b25      	ldr	r3, [pc, #148]	; (80133b4 <__d2b+0xb0>)
 801331e:	4826      	ldr	r0, [pc, #152]	; (80133b8 <__d2b+0xb4>)
 8013320:	f240 310a 	movw	r1, #778	; 0x30a
 8013324:	f000 fa18 	bl	8013758 <__assert_func>
 8013328:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801332c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013330:	bb35      	cbnz	r5, 8013380 <__d2b+0x7c>
 8013332:	2e00      	cmp	r6, #0
 8013334:	9301      	str	r3, [sp, #4]
 8013336:	d028      	beq.n	801338a <__d2b+0x86>
 8013338:	4668      	mov	r0, sp
 801333a:	9600      	str	r6, [sp, #0]
 801333c:	f7ff fd8c 	bl	8012e58 <__lo0bits>
 8013340:	9900      	ldr	r1, [sp, #0]
 8013342:	b300      	cbz	r0, 8013386 <__d2b+0x82>
 8013344:	9a01      	ldr	r2, [sp, #4]
 8013346:	f1c0 0320 	rsb	r3, r0, #32
 801334a:	fa02 f303 	lsl.w	r3, r2, r3
 801334e:	430b      	orrs	r3, r1
 8013350:	40c2      	lsrs	r2, r0
 8013352:	6163      	str	r3, [r4, #20]
 8013354:	9201      	str	r2, [sp, #4]
 8013356:	9b01      	ldr	r3, [sp, #4]
 8013358:	61a3      	str	r3, [r4, #24]
 801335a:	2b00      	cmp	r3, #0
 801335c:	bf14      	ite	ne
 801335e:	2202      	movne	r2, #2
 8013360:	2201      	moveq	r2, #1
 8013362:	6122      	str	r2, [r4, #16]
 8013364:	b1d5      	cbz	r5, 801339c <__d2b+0x98>
 8013366:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801336a:	4405      	add	r5, r0
 801336c:	f8c9 5000 	str.w	r5, [r9]
 8013370:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013374:	f8c8 0000 	str.w	r0, [r8]
 8013378:	4620      	mov	r0, r4
 801337a:	b003      	add	sp, #12
 801337c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013384:	e7d5      	b.n	8013332 <__d2b+0x2e>
 8013386:	6161      	str	r1, [r4, #20]
 8013388:	e7e5      	b.n	8013356 <__d2b+0x52>
 801338a:	a801      	add	r0, sp, #4
 801338c:	f7ff fd64 	bl	8012e58 <__lo0bits>
 8013390:	9b01      	ldr	r3, [sp, #4]
 8013392:	6163      	str	r3, [r4, #20]
 8013394:	2201      	movs	r2, #1
 8013396:	6122      	str	r2, [r4, #16]
 8013398:	3020      	adds	r0, #32
 801339a:	e7e3      	b.n	8013364 <__d2b+0x60>
 801339c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80133a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80133a4:	f8c9 0000 	str.w	r0, [r9]
 80133a8:	6918      	ldr	r0, [r3, #16]
 80133aa:	f7ff fd35 	bl	8012e18 <__hi0bits>
 80133ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80133b2:	e7df      	b.n	8013374 <__d2b+0x70>
 80133b4:	0801a45c 	.word	0x0801a45c
 80133b8:	0801a46d 	.word	0x0801a46d

080133bc <_calloc_r>:
 80133bc:	b513      	push	{r0, r1, r4, lr}
 80133be:	434a      	muls	r2, r1
 80133c0:	4611      	mov	r1, r2
 80133c2:	9201      	str	r2, [sp, #4]
 80133c4:	f7fd fefa 	bl	80111bc <_malloc_r>
 80133c8:	4604      	mov	r4, r0
 80133ca:	b118      	cbz	r0, 80133d4 <_calloc_r+0x18>
 80133cc:	9a01      	ldr	r2, [sp, #4]
 80133ce:	2100      	movs	r1, #0
 80133d0:	f7fd feeb 	bl	80111aa <memset>
 80133d4:	4620      	mov	r0, r4
 80133d6:	b002      	add	sp, #8
 80133d8:	bd10      	pop	{r4, pc}
	...

080133dc <_free_r>:
 80133dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80133de:	2900      	cmp	r1, #0
 80133e0:	d048      	beq.n	8013474 <_free_r+0x98>
 80133e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80133e6:	9001      	str	r0, [sp, #4]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	f1a1 0404 	sub.w	r4, r1, #4
 80133ee:	bfb8      	it	lt
 80133f0:	18e4      	addlt	r4, r4, r3
 80133f2:	f7ff fc59 	bl	8012ca8 <__malloc_lock>
 80133f6:	4a20      	ldr	r2, [pc, #128]	; (8013478 <_free_r+0x9c>)
 80133f8:	9801      	ldr	r0, [sp, #4]
 80133fa:	6813      	ldr	r3, [r2, #0]
 80133fc:	4615      	mov	r5, r2
 80133fe:	b933      	cbnz	r3, 801340e <_free_r+0x32>
 8013400:	6063      	str	r3, [r4, #4]
 8013402:	6014      	str	r4, [r2, #0]
 8013404:	b003      	add	sp, #12
 8013406:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801340a:	f7ff bc53 	b.w	8012cb4 <__malloc_unlock>
 801340e:	42a3      	cmp	r3, r4
 8013410:	d90b      	bls.n	801342a <_free_r+0x4e>
 8013412:	6821      	ldr	r1, [r4, #0]
 8013414:	1862      	adds	r2, r4, r1
 8013416:	4293      	cmp	r3, r2
 8013418:	bf04      	itt	eq
 801341a:	681a      	ldreq	r2, [r3, #0]
 801341c:	685b      	ldreq	r3, [r3, #4]
 801341e:	6063      	str	r3, [r4, #4]
 8013420:	bf04      	itt	eq
 8013422:	1852      	addeq	r2, r2, r1
 8013424:	6022      	streq	r2, [r4, #0]
 8013426:	602c      	str	r4, [r5, #0]
 8013428:	e7ec      	b.n	8013404 <_free_r+0x28>
 801342a:	461a      	mov	r2, r3
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	b10b      	cbz	r3, 8013434 <_free_r+0x58>
 8013430:	42a3      	cmp	r3, r4
 8013432:	d9fa      	bls.n	801342a <_free_r+0x4e>
 8013434:	6811      	ldr	r1, [r2, #0]
 8013436:	1855      	adds	r5, r2, r1
 8013438:	42a5      	cmp	r5, r4
 801343a:	d10b      	bne.n	8013454 <_free_r+0x78>
 801343c:	6824      	ldr	r4, [r4, #0]
 801343e:	4421      	add	r1, r4
 8013440:	1854      	adds	r4, r2, r1
 8013442:	42a3      	cmp	r3, r4
 8013444:	6011      	str	r1, [r2, #0]
 8013446:	d1dd      	bne.n	8013404 <_free_r+0x28>
 8013448:	681c      	ldr	r4, [r3, #0]
 801344a:	685b      	ldr	r3, [r3, #4]
 801344c:	6053      	str	r3, [r2, #4]
 801344e:	4421      	add	r1, r4
 8013450:	6011      	str	r1, [r2, #0]
 8013452:	e7d7      	b.n	8013404 <_free_r+0x28>
 8013454:	d902      	bls.n	801345c <_free_r+0x80>
 8013456:	230c      	movs	r3, #12
 8013458:	6003      	str	r3, [r0, #0]
 801345a:	e7d3      	b.n	8013404 <_free_r+0x28>
 801345c:	6825      	ldr	r5, [r4, #0]
 801345e:	1961      	adds	r1, r4, r5
 8013460:	428b      	cmp	r3, r1
 8013462:	bf04      	itt	eq
 8013464:	6819      	ldreq	r1, [r3, #0]
 8013466:	685b      	ldreq	r3, [r3, #4]
 8013468:	6063      	str	r3, [r4, #4]
 801346a:	bf04      	itt	eq
 801346c:	1949      	addeq	r1, r1, r5
 801346e:	6021      	streq	r1, [r4, #0]
 8013470:	6054      	str	r4, [r2, #4]
 8013472:	e7c7      	b.n	8013404 <_free_r+0x28>
 8013474:	b003      	add	sp, #12
 8013476:	bd30      	pop	{r4, r5, pc}
 8013478:	20007628 	.word	0x20007628

0801347c <__ssputs_r>:
 801347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013480:	688e      	ldr	r6, [r1, #8]
 8013482:	429e      	cmp	r6, r3
 8013484:	4682      	mov	sl, r0
 8013486:	460c      	mov	r4, r1
 8013488:	4690      	mov	r8, r2
 801348a:	461f      	mov	r7, r3
 801348c:	d838      	bhi.n	8013500 <__ssputs_r+0x84>
 801348e:	898a      	ldrh	r2, [r1, #12]
 8013490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013494:	d032      	beq.n	80134fc <__ssputs_r+0x80>
 8013496:	6825      	ldr	r5, [r4, #0]
 8013498:	6909      	ldr	r1, [r1, #16]
 801349a:	eba5 0901 	sub.w	r9, r5, r1
 801349e:	6965      	ldr	r5, [r4, #20]
 80134a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80134a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80134a8:	3301      	adds	r3, #1
 80134aa:	444b      	add	r3, r9
 80134ac:	106d      	asrs	r5, r5, #1
 80134ae:	429d      	cmp	r5, r3
 80134b0:	bf38      	it	cc
 80134b2:	461d      	movcc	r5, r3
 80134b4:	0553      	lsls	r3, r2, #21
 80134b6:	d531      	bpl.n	801351c <__ssputs_r+0xa0>
 80134b8:	4629      	mov	r1, r5
 80134ba:	f7fd fe7f 	bl	80111bc <_malloc_r>
 80134be:	4606      	mov	r6, r0
 80134c0:	b950      	cbnz	r0, 80134d8 <__ssputs_r+0x5c>
 80134c2:	230c      	movs	r3, #12
 80134c4:	f8ca 3000 	str.w	r3, [sl]
 80134c8:	89a3      	ldrh	r3, [r4, #12]
 80134ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134ce:	81a3      	strh	r3, [r4, #12]
 80134d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80134d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134d8:	6921      	ldr	r1, [r4, #16]
 80134da:	464a      	mov	r2, r9
 80134dc:	f7fd fe57 	bl	801118e <memcpy>
 80134e0:	89a3      	ldrh	r3, [r4, #12]
 80134e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80134e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134ea:	81a3      	strh	r3, [r4, #12]
 80134ec:	6126      	str	r6, [r4, #16]
 80134ee:	6165      	str	r5, [r4, #20]
 80134f0:	444e      	add	r6, r9
 80134f2:	eba5 0509 	sub.w	r5, r5, r9
 80134f6:	6026      	str	r6, [r4, #0]
 80134f8:	60a5      	str	r5, [r4, #8]
 80134fa:	463e      	mov	r6, r7
 80134fc:	42be      	cmp	r6, r7
 80134fe:	d900      	bls.n	8013502 <__ssputs_r+0x86>
 8013500:	463e      	mov	r6, r7
 8013502:	4632      	mov	r2, r6
 8013504:	6820      	ldr	r0, [r4, #0]
 8013506:	4641      	mov	r1, r8
 8013508:	f000 f968 	bl	80137dc <memmove>
 801350c:	68a3      	ldr	r3, [r4, #8]
 801350e:	6822      	ldr	r2, [r4, #0]
 8013510:	1b9b      	subs	r3, r3, r6
 8013512:	4432      	add	r2, r6
 8013514:	60a3      	str	r3, [r4, #8]
 8013516:	6022      	str	r2, [r4, #0]
 8013518:	2000      	movs	r0, #0
 801351a:	e7db      	b.n	80134d4 <__ssputs_r+0x58>
 801351c:	462a      	mov	r2, r5
 801351e:	f000 f977 	bl	8013810 <_realloc_r>
 8013522:	4606      	mov	r6, r0
 8013524:	2800      	cmp	r0, #0
 8013526:	d1e1      	bne.n	80134ec <__ssputs_r+0x70>
 8013528:	6921      	ldr	r1, [r4, #16]
 801352a:	4650      	mov	r0, sl
 801352c:	f7ff ff56 	bl	80133dc <_free_r>
 8013530:	e7c7      	b.n	80134c2 <__ssputs_r+0x46>
	...

08013534 <_svfiprintf_r>:
 8013534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013538:	4698      	mov	r8, r3
 801353a:	898b      	ldrh	r3, [r1, #12]
 801353c:	061b      	lsls	r3, r3, #24
 801353e:	b09d      	sub	sp, #116	; 0x74
 8013540:	4607      	mov	r7, r0
 8013542:	460d      	mov	r5, r1
 8013544:	4614      	mov	r4, r2
 8013546:	d50e      	bpl.n	8013566 <_svfiprintf_r+0x32>
 8013548:	690b      	ldr	r3, [r1, #16]
 801354a:	b963      	cbnz	r3, 8013566 <_svfiprintf_r+0x32>
 801354c:	2140      	movs	r1, #64	; 0x40
 801354e:	f7fd fe35 	bl	80111bc <_malloc_r>
 8013552:	6028      	str	r0, [r5, #0]
 8013554:	6128      	str	r0, [r5, #16]
 8013556:	b920      	cbnz	r0, 8013562 <_svfiprintf_r+0x2e>
 8013558:	230c      	movs	r3, #12
 801355a:	603b      	str	r3, [r7, #0]
 801355c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013560:	e0d1      	b.n	8013706 <_svfiprintf_r+0x1d2>
 8013562:	2340      	movs	r3, #64	; 0x40
 8013564:	616b      	str	r3, [r5, #20]
 8013566:	2300      	movs	r3, #0
 8013568:	9309      	str	r3, [sp, #36]	; 0x24
 801356a:	2320      	movs	r3, #32
 801356c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013570:	f8cd 800c 	str.w	r8, [sp, #12]
 8013574:	2330      	movs	r3, #48	; 0x30
 8013576:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013720 <_svfiprintf_r+0x1ec>
 801357a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801357e:	f04f 0901 	mov.w	r9, #1
 8013582:	4623      	mov	r3, r4
 8013584:	469a      	mov	sl, r3
 8013586:	f813 2b01 	ldrb.w	r2, [r3], #1
 801358a:	b10a      	cbz	r2, 8013590 <_svfiprintf_r+0x5c>
 801358c:	2a25      	cmp	r2, #37	; 0x25
 801358e:	d1f9      	bne.n	8013584 <_svfiprintf_r+0x50>
 8013590:	ebba 0b04 	subs.w	fp, sl, r4
 8013594:	d00b      	beq.n	80135ae <_svfiprintf_r+0x7a>
 8013596:	465b      	mov	r3, fp
 8013598:	4622      	mov	r2, r4
 801359a:	4629      	mov	r1, r5
 801359c:	4638      	mov	r0, r7
 801359e:	f7ff ff6d 	bl	801347c <__ssputs_r>
 80135a2:	3001      	adds	r0, #1
 80135a4:	f000 80aa 	beq.w	80136fc <_svfiprintf_r+0x1c8>
 80135a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135aa:	445a      	add	r2, fp
 80135ac:	9209      	str	r2, [sp, #36]	; 0x24
 80135ae:	f89a 3000 	ldrb.w	r3, [sl]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	f000 80a2 	beq.w	80136fc <_svfiprintf_r+0x1c8>
 80135b8:	2300      	movs	r3, #0
 80135ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135c2:	f10a 0a01 	add.w	sl, sl, #1
 80135c6:	9304      	str	r3, [sp, #16]
 80135c8:	9307      	str	r3, [sp, #28]
 80135ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80135ce:	931a      	str	r3, [sp, #104]	; 0x68
 80135d0:	4654      	mov	r4, sl
 80135d2:	2205      	movs	r2, #5
 80135d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135d8:	4851      	ldr	r0, [pc, #324]	; (8013720 <_svfiprintf_r+0x1ec>)
 80135da:	f7ec fe01 	bl	80001e0 <memchr>
 80135de:	9a04      	ldr	r2, [sp, #16]
 80135e0:	b9d8      	cbnz	r0, 801361a <_svfiprintf_r+0xe6>
 80135e2:	06d0      	lsls	r0, r2, #27
 80135e4:	bf44      	itt	mi
 80135e6:	2320      	movmi	r3, #32
 80135e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135ec:	0711      	lsls	r1, r2, #28
 80135ee:	bf44      	itt	mi
 80135f0:	232b      	movmi	r3, #43	; 0x2b
 80135f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135f6:	f89a 3000 	ldrb.w	r3, [sl]
 80135fa:	2b2a      	cmp	r3, #42	; 0x2a
 80135fc:	d015      	beq.n	801362a <_svfiprintf_r+0xf6>
 80135fe:	9a07      	ldr	r2, [sp, #28]
 8013600:	4654      	mov	r4, sl
 8013602:	2000      	movs	r0, #0
 8013604:	f04f 0c0a 	mov.w	ip, #10
 8013608:	4621      	mov	r1, r4
 801360a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801360e:	3b30      	subs	r3, #48	; 0x30
 8013610:	2b09      	cmp	r3, #9
 8013612:	d94e      	bls.n	80136b2 <_svfiprintf_r+0x17e>
 8013614:	b1b0      	cbz	r0, 8013644 <_svfiprintf_r+0x110>
 8013616:	9207      	str	r2, [sp, #28]
 8013618:	e014      	b.n	8013644 <_svfiprintf_r+0x110>
 801361a:	eba0 0308 	sub.w	r3, r0, r8
 801361e:	fa09 f303 	lsl.w	r3, r9, r3
 8013622:	4313      	orrs	r3, r2
 8013624:	9304      	str	r3, [sp, #16]
 8013626:	46a2      	mov	sl, r4
 8013628:	e7d2      	b.n	80135d0 <_svfiprintf_r+0x9c>
 801362a:	9b03      	ldr	r3, [sp, #12]
 801362c:	1d19      	adds	r1, r3, #4
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	9103      	str	r1, [sp, #12]
 8013632:	2b00      	cmp	r3, #0
 8013634:	bfbb      	ittet	lt
 8013636:	425b      	neglt	r3, r3
 8013638:	f042 0202 	orrlt.w	r2, r2, #2
 801363c:	9307      	strge	r3, [sp, #28]
 801363e:	9307      	strlt	r3, [sp, #28]
 8013640:	bfb8      	it	lt
 8013642:	9204      	strlt	r2, [sp, #16]
 8013644:	7823      	ldrb	r3, [r4, #0]
 8013646:	2b2e      	cmp	r3, #46	; 0x2e
 8013648:	d10c      	bne.n	8013664 <_svfiprintf_r+0x130>
 801364a:	7863      	ldrb	r3, [r4, #1]
 801364c:	2b2a      	cmp	r3, #42	; 0x2a
 801364e:	d135      	bne.n	80136bc <_svfiprintf_r+0x188>
 8013650:	9b03      	ldr	r3, [sp, #12]
 8013652:	1d1a      	adds	r2, r3, #4
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	9203      	str	r2, [sp, #12]
 8013658:	2b00      	cmp	r3, #0
 801365a:	bfb8      	it	lt
 801365c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013660:	3402      	adds	r4, #2
 8013662:	9305      	str	r3, [sp, #20]
 8013664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013730 <_svfiprintf_r+0x1fc>
 8013668:	7821      	ldrb	r1, [r4, #0]
 801366a:	2203      	movs	r2, #3
 801366c:	4650      	mov	r0, sl
 801366e:	f7ec fdb7 	bl	80001e0 <memchr>
 8013672:	b140      	cbz	r0, 8013686 <_svfiprintf_r+0x152>
 8013674:	2340      	movs	r3, #64	; 0x40
 8013676:	eba0 000a 	sub.w	r0, r0, sl
 801367a:	fa03 f000 	lsl.w	r0, r3, r0
 801367e:	9b04      	ldr	r3, [sp, #16]
 8013680:	4303      	orrs	r3, r0
 8013682:	3401      	adds	r4, #1
 8013684:	9304      	str	r3, [sp, #16]
 8013686:	f814 1b01 	ldrb.w	r1, [r4], #1
 801368a:	4826      	ldr	r0, [pc, #152]	; (8013724 <_svfiprintf_r+0x1f0>)
 801368c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013690:	2206      	movs	r2, #6
 8013692:	f7ec fda5 	bl	80001e0 <memchr>
 8013696:	2800      	cmp	r0, #0
 8013698:	d038      	beq.n	801370c <_svfiprintf_r+0x1d8>
 801369a:	4b23      	ldr	r3, [pc, #140]	; (8013728 <_svfiprintf_r+0x1f4>)
 801369c:	bb1b      	cbnz	r3, 80136e6 <_svfiprintf_r+0x1b2>
 801369e:	9b03      	ldr	r3, [sp, #12]
 80136a0:	3307      	adds	r3, #7
 80136a2:	f023 0307 	bic.w	r3, r3, #7
 80136a6:	3308      	adds	r3, #8
 80136a8:	9303      	str	r3, [sp, #12]
 80136aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136ac:	4433      	add	r3, r6
 80136ae:	9309      	str	r3, [sp, #36]	; 0x24
 80136b0:	e767      	b.n	8013582 <_svfiprintf_r+0x4e>
 80136b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80136b6:	460c      	mov	r4, r1
 80136b8:	2001      	movs	r0, #1
 80136ba:	e7a5      	b.n	8013608 <_svfiprintf_r+0xd4>
 80136bc:	2300      	movs	r3, #0
 80136be:	3401      	adds	r4, #1
 80136c0:	9305      	str	r3, [sp, #20]
 80136c2:	4619      	mov	r1, r3
 80136c4:	f04f 0c0a 	mov.w	ip, #10
 80136c8:	4620      	mov	r0, r4
 80136ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80136ce:	3a30      	subs	r2, #48	; 0x30
 80136d0:	2a09      	cmp	r2, #9
 80136d2:	d903      	bls.n	80136dc <_svfiprintf_r+0x1a8>
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d0c5      	beq.n	8013664 <_svfiprintf_r+0x130>
 80136d8:	9105      	str	r1, [sp, #20]
 80136da:	e7c3      	b.n	8013664 <_svfiprintf_r+0x130>
 80136dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80136e0:	4604      	mov	r4, r0
 80136e2:	2301      	movs	r3, #1
 80136e4:	e7f0      	b.n	80136c8 <_svfiprintf_r+0x194>
 80136e6:	ab03      	add	r3, sp, #12
 80136e8:	9300      	str	r3, [sp, #0]
 80136ea:	462a      	mov	r2, r5
 80136ec:	4b0f      	ldr	r3, [pc, #60]	; (801372c <_svfiprintf_r+0x1f8>)
 80136ee:	a904      	add	r1, sp, #16
 80136f0:	4638      	mov	r0, r7
 80136f2:	f7fd fe5d 	bl	80113b0 <_printf_float>
 80136f6:	1c42      	adds	r2, r0, #1
 80136f8:	4606      	mov	r6, r0
 80136fa:	d1d6      	bne.n	80136aa <_svfiprintf_r+0x176>
 80136fc:	89ab      	ldrh	r3, [r5, #12]
 80136fe:	065b      	lsls	r3, r3, #25
 8013700:	f53f af2c 	bmi.w	801355c <_svfiprintf_r+0x28>
 8013704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013706:	b01d      	add	sp, #116	; 0x74
 8013708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801370c:	ab03      	add	r3, sp, #12
 801370e:	9300      	str	r3, [sp, #0]
 8013710:	462a      	mov	r2, r5
 8013712:	4b06      	ldr	r3, [pc, #24]	; (801372c <_svfiprintf_r+0x1f8>)
 8013714:	a904      	add	r1, sp, #16
 8013716:	4638      	mov	r0, r7
 8013718:	f7fe f8ee 	bl	80118f8 <_printf_i>
 801371c:	e7eb      	b.n	80136f6 <_svfiprintf_r+0x1c2>
 801371e:	bf00      	nop
 8013720:	0801a5cc 	.word	0x0801a5cc
 8013724:	0801a5d6 	.word	0x0801a5d6
 8013728:	080113b1 	.word	0x080113b1
 801372c:	0801347d 	.word	0x0801347d
 8013730:	0801a5d2 	.word	0x0801a5d2

08013734 <_read_r>:
 8013734:	b538      	push	{r3, r4, r5, lr}
 8013736:	4d07      	ldr	r5, [pc, #28]	; (8013754 <_read_r+0x20>)
 8013738:	4604      	mov	r4, r0
 801373a:	4608      	mov	r0, r1
 801373c:	4611      	mov	r1, r2
 801373e:	2200      	movs	r2, #0
 8013740:	602a      	str	r2, [r5, #0]
 8013742:	461a      	mov	r2, r3
 8013744:	f7f0 fad6 	bl	8003cf4 <_read>
 8013748:	1c43      	adds	r3, r0, #1
 801374a:	d102      	bne.n	8013752 <_read_r+0x1e>
 801374c:	682b      	ldr	r3, [r5, #0]
 801374e:	b103      	cbz	r3, 8013752 <_read_r+0x1e>
 8013750:	6023      	str	r3, [r4, #0]
 8013752:	bd38      	pop	{r3, r4, r5, pc}
 8013754:	2000ef4c 	.word	0x2000ef4c

08013758 <__assert_func>:
 8013758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801375a:	4614      	mov	r4, r2
 801375c:	461a      	mov	r2, r3
 801375e:	4b09      	ldr	r3, [pc, #36]	; (8013784 <__assert_func+0x2c>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	4605      	mov	r5, r0
 8013764:	68d8      	ldr	r0, [r3, #12]
 8013766:	b14c      	cbz	r4, 801377c <__assert_func+0x24>
 8013768:	4b07      	ldr	r3, [pc, #28]	; (8013788 <__assert_func+0x30>)
 801376a:	9100      	str	r1, [sp, #0]
 801376c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013770:	4906      	ldr	r1, [pc, #24]	; (801378c <__assert_func+0x34>)
 8013772:	462b      	mov	r3, r5
 8013774:	f000 f80e 	bl	8013794 <fiprintf>
 8013778:	f000 fa98 	bl	8013cac <abort>
 801377c:	4b04      	ldr	r3, [pc, #16]	; (8013790 <__assert_func+0x38>)
 801377e:	461c      	mov	r4, r3
 8013780:	e7f3      	b.n	801376a <__assert_func+0x12>
 8013782:	bf00      	nop
 8013784:	200001b0 	.word	0x200001b0
 8013788:	0801a5dd 	.word	0x0801a5dd
 801378c:	0801a5ea 	.word	0x0801a5ea
 8013790:	0801a618 	.word	0x0801a618

08013794 <fiprintf>:
 8013794:	b40e      	push	{r1, r2, r3}
 8013796:	b503      	push	{r0, r1, lr}
 8013798:	4601      	mov	r1, r0
 801379a:	ab03      	add	r3, sp, #12
 801379c:	4805      	ldr	r0, [pc, #20]	; (80137b4 <fiprintf+0x20>)
 801379e:	f853 2b04 	ldr.w	r2, [r3], #4
 80137a2:	6800      	ldr	r0, [r0, #0]
 80137a4:	9301      	str	r3, [sp, #4]
 80137a6:	f000 f883 	bl	80138b0 <_vfiprintf_r>
 80137aa:	b002      	add	sp, #8
 80137ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80137b0:	b003      	add	sp, #12
 80137b2:	4770      	bx	lr
 80137b4:	200001b0 	.word	0x200001b0

080137b8 <__ascii_mbtowc>:
 80137b8:	b082      	sub	sp, #8
 80137ba:	b901      	cbnz	r1, 80137be <__ascii_mbtowc+0x6>
 80137bc:	a901      	add	r1, sp, #4
 80137be:	b142      	cbz	r2, 80137d2 <__ascii_mbtowc+0x1a>
 80137c0:	b14b      	cbz	r3, 80137d6 <__ascii_mbtowc+0x1e>
 80137c2:	7813      	ldrb	r3, [r2, #0]
 80137c4:	600b      	str	r3, [r1, #0]
 80137c6:	7812      	ldrb	r2, [r2, #0]
 80137c8:	1e10      	subs	r0, r2, #0
 80137ca:	bf18      	it	ne
 80137cc:	2001      	movne	r0, #1
 80137ce:	b002      	add	sp, #8
 80137d0:	4770      	bx	lr
 80137d2:	4610      	mov	r0, r2
 80137d4:	e7fb      	b.n	80137ce <__ascii_mbtowc+0x16>
 80137d6:	f06f 0001 	mvn.w	r0, #1
 80137da:	e7f8      	b.n	80137ce <__ascii_mbtowc+0x16>

080137dc <memmove>:
 80137dc:	4288      	cmp	r0, r1
 80137de:	b510      	push	{r4, lr}
 80137e0:	eb01 0402 	add.w	r4, r1, r2
 80137e4:	d902      	bls.n	80137ec <memmove+0x10>
 80137e6:	4284      	cmp	r4, r0
 80137e8:	4623      	mov	r3, r4
 80137ea:	d807      	bhi.n	80137fc <memmove+0x20>
 80137ec:	1e43      	subs	r3, r0, #1
 80137ee:	42a1      	cmp	r1, r4
 80137f0:	d008      	beq.n	8013804 <memmove+0x28>
 80137f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137fa:	e7f8      	b.n	80137ee <memmove+0x12>
 80137fc:	4402      	add	r2, r0
 80137fe:	4601      	mov	r1, r0
 8013800:	428a      	cmp	r2, r1
 8013802:	d100      	bne.n	8013806 <memmove+0x2a>
 8013804:	bd10      	pop	{r4, pc}
 8013806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801380a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801380e:	e7f7      	b.n	8013800 <memmove+0x24>

08013810 <_realloc_r>:
 8013810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013812:	4607      	mov	r7, r0
 8013814:	4614      	mov	r4, r2
 8013816:	460e      	mov	r6, r1
 8013818:	b921      	cbnz	r1, 8013824 <_realloc_r+0x14>
 801381a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801381e:	4611      	mov	r1, r2
 8013820:	f7fd bccc 	b.w	80111bc <_malloc_r>
 8013824:	b922      	cbnz	r2, 8013830 <_realloc_r+0x20>
 8013826:	f7ff fdd9 	bl	80133dc <_free_r>
 801382a:	4625      	mov	r5, r4
 801382c:	4628      	mov	r0, r5
 801382e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013830:	f000 faa8 	bl	8013d84 <_malloc_usable_size_r>
 8013834:	42a0      	cmp	r0, r4
 8013836:	d20f      	bcs.n	8013858 <_realloc_r+0x48>
 8013838:	4621      	mov	r1, r4
 801383a:	4638      	mov	r0, r7
 801383c:	f7fd fcbe 	bl	80111bc <_malloc_r>
 8013840:	4605      	mov	r5, r0
 8013842:	2800      	cmp	r0, #0
 8013844:	d0f2      	beq.n	801382c <_realloc_r+0x1c>
 8013846:	4631      	mov	r1, r6
 8013848:	4622      	mov	r2, r4
 801384a:	f7fd fca0 	bl	801118e <memcpy>
 801384e:	4631      	mov	r1, r6
 8013850:	4638      	mov	r0, r7
 8013852:	f7ff fdc3 	bl	80133dc <_free_r>
 8013856:	e7e9      	b.n	801382c <_realloc_r+0x1c>
 8013858:	4635      	mov	r5, r6
 801385a:	e7e7      	b.n	801382c <_realloc_r+0x1c>

0801385c <__sfputc_r>:
 801385c:	6893      	ldr	r3, [r2, #8]
 801385e:	3b01      	subs	r3, #1
 8013860:	2b00      	cmp	r3, #0
 8013862:	b410      	push	{r4}
 8013864:	6093      	str	r3, [r2, #8]
 8013866:	da08      	bge.n	801387a <__sfputc_r+0x1e>
 8013868:	6994      	ldr	r4, [r2, #24]
 801386a:	42a3      	cmp	r3, r4
 801386c:	db01      	blt.n	8013872 <__sfputc_r+0x16>
 801386e:	290a      	cmp	r1, #10
 8013870:	d103      	bne.n	801387a <__sfputc_r+0x1e>
 8013872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013876:	f000 b94b 	b.w	8013b10 <__swbuf_r>
 801387a:	6813      	ldr	r3, [r2, #0]
 801387c:	1c58      	adds	r0, r3, #1
 801387e:	6010      	str	r0, [r2, #0]
 8013880:	7019      	strb	r1, [r3, #0]
 8013882:	4608      	mov	r0, r1
 8013884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013888:	4770      	bx	lr

0801388a <__sfputs_r>:
 801388a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801388c:	4606      	mov	r6, r0
 801388e:	460f      	mov	r7, r1
 8013890:	4614      	mov	r4, r2
 8013892:	18d5      	adds	r5, r2, r3
 8013894:	42ac      	cmp	r4, r5
 8013896:	d101      	bne.n	801389c <__sfputs_r+0x12>
 8013898:	2000      	movs	r0, #0
 801389a:	e007      	b.n	80138ac <__sfputs_r+0x22>
 801389c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138a0:	463a      	mov	r2, r7
 80138a2:	4630      	mov	r0, r6
 80138a4:	f7ff ffda 	bl	801385c <__sfputc_r>
 80138a8:	1c43      	adds	r3, r0, #1
 80138aa:	d1f3      	bne.n	8013894 <__sfputs_r+0xa>
 80138ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138b0 <_vfiprintf_r>:
 80138b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b4:	460d      	mov	r5, r1
 80138b6:	b09d      	sub	sp, #116	; 0x74
 80138b8:	4614      	mov	r4, r2
 80138ba:	4698      	mov	r8, r3
 80138bc:	4606      	mov	r6, r0
 80138be:	b118      	cbz	r0, 80138c8 <_vfiprintf_r+0x18>
 80138c0:	6983      	ldr	r3, [r0, #24]
 80138c2:	b90b      	cbnz	r3, 80138c8 <_vfiprintf_r+0x18>
 80138c4:	f7fd fb84 	bl	8010fd0 <__sinit>
 80138c8:	4b89      	ldr	r3, [pc, #548]	; (8013af0 <_vfiprintf_r+0x240>)
 80138ca:	429d      	cmp	r5, r3
 80138cc:	d11b      	bne.n	8013906 <_vfiprintf_r+0x56>
 80138ce:	6875      	ldr	r5, [r6, #4]
 80138d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138d2:	07d9      	lsls	r1, r3, #31
 80138d4:	d405      	bmi.n	80138e2 <_vfiprintf_r+0x32>
 80138d6:	89ab      	ldrh	r3, [r5, #12]
 80138d8:	059a      	lsls	r2, r3, #22
 80138da:	d402      	bmi.n	80138e2 <_vfiprintf_r+0x32>
 80138dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138de:	f7fd fc54 	bl	801118a <__retarget_lock_acquire_recursive>
 80138e2:	89ab      	ldrh	r3, [r5, #12]
 80138e4:	071b      	lsls	r3, r3, #28
 80138e6:	d501      	bpl.n	80138ec <_vfiprintf_r+0x3c>
 80138e8:	692b      	ldr	r3, [r5, #16]
 80138ea:	b9eb      	cbnz	r3, 8013928 <_vfiprintf_r+0x78>
 80138ec:	4629      	mov	r1, r5
 80138ee:	4630      	mov	r0, r6
 80138f0:	f000 f96e 	bl	8013bd0 <__swsetup_r>
 80138f4:	b1c0      	cbz	r0, 8013928 <_vfiprintf_r+0x78>
 80138f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138f8:	07dc      	lsls	r4, r3, #31
 80138fa:	d50e      	bpl.n	801391a <_vfiprintf_r+0x6a>
 80138fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013900:	b01d      	add	sp, #116	; 0x74
 8013902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013906:	4b7b      	ldr	r3, [pc, #492]	; (8013af4 <_vfiprintf_r+0x244>)
 8013908:	429d      	cmp	r5, r3
 801390a:	d101      	bne.n	8013910 <_vfiprintf_r+0x60>
 801390c:	68b5      	ldr	r5, [r6, #8]
 801390e:	e7df      	b.n	80138d0 <_vfiprintf_r+0x20>
 8013910:	4b79      	ldr	r3, [pc, #484]	; (8013af8 <_vfiprintf_r+0x248>)
 8013912:	429d      	cmp	r5, r3
 8013914:	bf08      	it	eq
 8013916:	68f5      	ldreq	r5, [r6, #12]
 8013918:	e7da      	b.n	80138d0 <_vfiprintf_r+0x20>
 801391a:	89ab      	ldrh	r3, [r5, #12]
 801391c:	0598      	lsls	r0, r3, #22
 801391e:	d4ed      	bmi.n	80138fc <_vfiprintf_r+0x4c>
 8013920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013922:	f7fd fc33 	bl	801118c <__retarget_lock_release_recursive>
 8013926:	e7e9      	b.n	80138fc <_vfiprintf_r+0x4c>
 8013928:	2300      	movs	r3, #0
 801392a:	9309      	str	r3, [sp, #36]	; 0x24
 801392c:	2320      	movs	r3, #32
 801392e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013932:	f8cd 800c 	str.w	r8, [sp, #12]
 8013936:	2330      	movs	r3, #48	; 0x30
 8013938:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013afc <_vfiprintf_r+0x24c>
 801393c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013940:	f04f 0901 	mov.w	r9, #1
 8013944:	4623      	mov	r3, r4
 8013946:	469a      	mov	sl, r3
 8013948:	f813 2b01 	ldrb.w	r2, [r3], #1
 801394c:	b10a      	cbz	r2, 8013952 <_vfiprintf_r+0xa2>
 801394e:	2a25      	cmp	r2, #37	; 0x25
 8013950:	d1f9      	bne.n	8013946 <_vfiprintf_r+0x96>
 8013952:	ebba 0b04 	subs.w	fp, sl, r4
 8013956:	d00b      	beq.n	8013970 <_vfiprintf_r+0xc0>
 8013958:	465b      	mov	r3, fp
 801395a:	4622      	mov	r2, r4
 801395c:	4629      	mov	r1, r5
 801395e:	4630      	mov	r0, r6
 8013960:	f7ff ff93 	bl	801388a <__sfputs_r>
 8013964:	3001      	adds	r0, #1
 8013966:	f000 80aa 	beq.w	8013abe <_vfiprintf_r+0x20e>
 801396a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801396c:	445a      	add	r2, fp
 801396e:	9209      	str	r2, [sp, #36]	; 0x24
 8013970:	f89a 3000 	ldrb.w	r3, [sl]
 8013974:	2b00      	cmp	r3, #0
 8013976:	f000 80a2 	beq.w	8013abe <_vfiprintf_r+0x20e>
 801397a:	2300      	movs	r3, #0
 801397c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013984:	f10a 0a01 	add.w	sl, sl, #1
 8013988:	9304      	str	r3, [sp, #16]
 801398a:	9307      	str	r3, [sp, #28]
 801398c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013990:	931a      	str	r3, [sp, #104]	; 0x68
 8013992:	4654      	mov	r4, sl
 8013994:	2205      	movs	r2, #5
 8013996:	f814 1b01 	ldrb.w	r1, [r4], #1
 801399a:	4858      	ldr	r0, [pc, #352]	; (8013afc <_vfiprintf_r+0x24c>)
 801399c:	f7ec fc20 	bl	80001e0 <memchr>
 80139a0:	9a04      	ldr	r2, [sp, #16]
 80139a2:	b9d8      	cbnz	r0, 80139dc <_vfiprintf_r+0x12c>
 80139a4:	06d1      	lsls	r1, r2, #27
 80139a6:	bf44      	itt	mi
 80139a8:	2320      	movmi	r3, #32
 80139aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139ae:	0713      	lsls	r3, r2, #28
 80139b0:	bf44      	itt	mi
 80139b2:	232b      	movmi	r3, #43	; 0x2b
 80139b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139b8:	f89a 3000 	ldrb.w	r3, [sl]
 80139bc:	2b2a      	cmp	r3, #42	; 0x2a
 80139be:	d015      	beq.n	80139ec <_vfiprintf_r+0x13c>
 80139c0:	9a07      	ldr	r2, [sp, #28]
 80139c2:	4654      	mov	r4, sl
 80139c4:	2000      	movs	r0, #0
 80139c6:	f04f 0c0a 	mov.w	ip, #10
 80139ca:	4621      	mov	r1, r4
 80139cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139d0:	3b30      	subs	r3, #48	; 0x30
 80139d2:	2b09      	cmp	r3, #9
 80139d4:	d94e      	bls.n	8013a74 <_vfiprintf_r+0x1c4>
 80139d6:	b1b0      	cbz	r0, 8013a06 <_vfiprintf_r+0x156>
 80139d8:	9207      	str	r2, [sp, #28]
 80139da:	e014      	b.n	8013a06 <_vfiprintf_r+0x156>
 80139dc:	eba0 0308 	sub.w	r3, r0, r8
 80139e0:	fa09 f303 	lsl.w	r3, r9, r3
 80139e4:	4313      	orrs	r3, r2
 80139e6:	9304      	str	r3, [sp, #16]
 80139e8:	46a2      	mov	sl, r4
 80139ea:	e7d2      	b.n	8013992 <_vfiprintf_r+0xe2>
 80139ec:	9b03      	ldr	r3, [sp, #12]
 80139ee:	1d19      	adds	r1, r3, #4
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	9103      	str	r1, [sp, #12]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	bfbb      	ittet	lt
 80139f8:	425b      	neglt	r3, r3
 80139fa:	f042 0202 	orrlt.w	r2, r2, #2
 80139fe:	9307      	strge	r3, [sp, #28]
 8013a00:	9307      	strlt	r3, [sp, #28]
 8013a02:	bfb8      	it	lt
 8013a04:	9204      	strlt	r2, [sp, #16]
 8013a06:	7823      	ldrb	r3, [r4, #0]
 8013a08:	2b2e      	cmp	r3, #46	; 0x2e
 8013a0a:	d10c      	bne.n	8013a26 <_vfiprintf_r+0x176>
 8013a0c:	7863      	ldrb	r3, [r4, #1]
 8013a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8013a10:	d135      	bne.n	8013a7e <_vfiprintf_r+0x1ce>
 8013a12:	9b03      	ldr	r3, [sp, #12]
 8013a14:	1d1a      	adds	r2, r3, #4
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	9203      	str	r2, [sp, #12]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	bfb8      	it	lt
 8013a1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013a22:	3402      	adds	r4, #2
 8013a24:	9305      	str	r3, [sp, #20]
 8013a26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013b0c <_vfiprintf_r+0x25c>
 8013a2a:	7821      	ldrb	r1, [r4, #0]
 8013a2c:	2203      	movs	r2, #3
 8013a2e:	4650      	mov	r0, sl
 8013a30:	f7ec fbd6 	bl	80001e0 <memchr>
 8013a34:	b140      	cbz	r0, 8013a48 <_vfiprintf_r+0x198>
 8013a36:	2340      	movs	r3, #64	; 0x40
 8013a38:	eba0 000a 	sub.w	r0, r0, sl
 8013a3c:	fa03 f000 	lsl.w	r0, r3, r0
 8013a40:	9b04      	ldr	r3, [sp, #16]
 8013a42:	4303      	orrs	r3, r0
 8013a44:	3401      	adds	r4, #1
 8013a46:	9304      	str	r3, [sp, #16]
 8013a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a4c:	482c      	ldr	r0, [pc, #176]	; (8013b00 <_vfiprintf_r+0x250>)
 8013a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a52:	2206      	movs	r2, #6
 8013a54:	f7ec fbc4 	bl	80001e0 <memchr>
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	d03f      	beq.n	8013adc <_vfiprintf_r+0x22c>
 8013a5c:	4b29      	ldr	r3, [pc, #164]	; (8013b04 <_vfiprintf_r+0x254>)
 8013a5e:	bb1b      	cbnz	r3, 8013aa8 <_vfiprintf_r+0x1f8>
 8013a60:	9b03      	ldr	r3, [sp, #12]
 8013a62:	3307      	adds	r3, #7
 8013a64:	f023 0307 	bic.w	r3, r3, #7
 8013a68:	3308      	adds	r3, #8
 8013a6a:	9303      	str	r3, [sp, #12]
 8013a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a6e:	443b      	add	r3, r7
 8013a70:	9309      	str	r3, [sp, #36]	; 0x24
 8013a72:	e767      	b.n	8013944 <_vfiprintf_r+0x94>
 8013a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a78:	460c      	mov	r4, r1
 8013a7a:	2001      	movs	r0, #1
 8013a7c:	e7a5      	b.n	80139ca <_vfiprintf_r+0x11a>
 8013a7e:	2300      	movs	r3, #0
 8013a80:	3401      	adds	r4, #1
 8013a82:	9305      	str	r3, [sp, #20]
 8013a84:	4619      	mov	r1, r3
 8013a86:	f04f 0c0a 	mov.w	ip, #10
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a90:	3a30      	subs	r2, #48	; 0x30
 8013a92:	2a09      	cmp	r2, #9
 8013a94:	d903      	bls.n	8013a9e <_vfiprintf_r+0x1ee>
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d0c5      	beq.n	8013a26 <_vfiprintf_r+0x176>
 8013a9a:	9105      	str	r1, [sp, #20]
 8013a9c:	e7c3      	b.n	8013a26 <_vfiprintf_r+0x176>
 8013a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013aa2:	4604      	mov	r4, r0
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	e7f0      	b.n	8013a8a <_vfiprintf_r+0x1da>
 8013aa8:	ab03      	add	r3, sp, #12
 8013aaa:	9300      	str	r3, [sp, #0]
 8013aac:	462a      	mov	r2, r5
 8013aae:	4b16      	ldr	r3, [pc, #88]	; (8013b08 <_vfiprintf_r+0x258>)
 8013ab0:	a904      	add	r1, sp, #16
 8013ab2:	4630      	mov	r0, r6
 8013ab4:	f7fd fc7c 	bl	80113b0 <_printf_float>
 8013ab8:	4607      	mov	r7, r0
 8013aba:	1c78      	adds	r0, r7, #1
 8013abc:	d1d6      	bne.n	8013a6c <_vfiprintf_r+0x1bc>
 8013abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ac0:	07d9      	lsls	r1, r3, #31
 8013ac2:	d405      	bmi.n	8013ad0 <_vfiprintf_r+0x220>
 8013ac4:	89ab      	ldrh	r3, [r5, #12]
 8013ac6:	059a      	lsls	r2, r3, #22
 8013ac8:	d402      	bmi.n	8013ad0 <_vfiprintf_r+0x220>
 8013aca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013acc:	f7fd fb5e 	bl	801118c <__retarget_lock_release_recursive>
 8013ad0:	89ab      	ldrh	r3, [r5, #12]
 8013ad2:	065b      	lsls	r3, r3, #25
 8013ad4:	f53f af12 	bmi.w	80138fc <_vfiprintf_r+0x4c>
 8013ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ada:	e711      	b.n	8013900 <_vfiprintf_r+0x50>
 8013adc:	ab03      	add	r3, sp, #12
 8013ade:	9300      	str	r3, [sp, #0]
 8013ae0:	462a      	mov	r2, r5
 8013ae2:	4b09      	ldr	r3, [pc, #36]	; (8013b08 <_vfiprintf_r+0x258>)
 8013ae4:	a904      	add	r1, sp, #16
 8013ae6:	4630      	mov	r0, r6
 8013ae8:	f7fd ff06 	bl	80118f8 <_printf_i>
 8013aec:	e7e4      	b.n	8013ab8 <_vfiprintf_r+0x208>
 8013aee:	bf00      	nop
 8013af0:	0801a33c 	.word	0x0801a33c
 8013af4:	0801a35c 	.word	0x0801a35c
 8013af8:	0801a31c 	.word	0x0801a31c
 8013afc:	0801a5cc 	.word	0x0801a5cc
 8013b00:	0801a5d6 	.word	0x0801a5d6
 8013b04:	080113b1 	.word	0x080113b1
 8013b08:	0801388b 	.word	0x0801388b
 8013b0c:	0801a5d2 	.word	0x0801a5d2

08013b10 <__swbuf_r>:
 8013b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b12:	460e      	mov	r6, r1
 8013b14:	4614      	mov	r4, r2
 8013b16:	4605      	mov	r5, r0
 8013b18:	b118      	cbz	r0, 8013b22 <__swbuf_r+0x12>
 8013b1a:	6983      	ldr	r3, [r0, #24]
 8013b1c:	b90b      	cbnz	r3, 8013b22 <__swbuf_r+0x12>
 8013b1e:	f7fd fa57 	bl	8010fd0 <__sinit>
 8013b22:	4b21      	ldr	r3, [pc, #132]	; (8013ba8 <__swbuf_r+0x98>)
 8013b24:	429c      	cmp	r4, r3
 8013b26:	d12b      	bne.n	8013b80 <__swbuf_r+0x70>
 8013b28:	686c      	ldr	r4, [r5, #4]
 8013b2a:	69a3      	ldr	r3, [r4, #24]
 8013b2c:	60a3      	str	r3, [r4, #8]
 8013b2e:	89a3      	ldrh	r3, [r4, #12]
 8013b30:	071a      	lsls	r2, r3, #28
 8013b32:	d52f      	bpl.n	8013b94 <__swbuf_r+0x84>
 8013b34:	6923      	ldr	r3, [r4, #16]
 8013b36:	b36b      	cbz	r3, 8013b94 <__swbuf_r+0x84>
 8013b38:	6923      	ldr	r3, [r4, #16]
 8013b3a:	6820      	ldr	r0, [r4, #0]
 8013b3c:	1ac0      	subs	r0, r0, r3
 8013b3e:	6963      	ldr	r3, [r4, #20]
 8013b40:	b2f6      	uxtb	r6, r6
 8013b42:	4283      	cmp	r3, r0
 8013b44:	4637      	mov	r7, r6
 8013b46:	dc04      	bgt.n	8013b52 <__swbuf_r+0x42>
 8013b48:	4621      	mov	r1, r4
 8013b4a:	4628      	mov	r0, r5
 8013b4c:	f7ff f852 	bl	8012bf4 <_fflush_r>
 8013b50:	bb30      	cbnz	r0, 8013ba0 <__swbuf_r+0x90>
 8013b52:	68a3      	ldr	r3, [r4, #8]
 8013b54:	3b01      	subs	r3, #1
 8013b56:	60a3      	str	r3, [r4, #8]
 8013b58:	6823      	ldr	r3, [r4, #0]
 8013b5a:	1c5a      	adds	r2, r3, #1
 8013b5c:	6022      	str	r2, [r4, #0]
 8013b5e:	701e      	strb	r6, [r3, #0]
 8013b60:	6963      	ldr	r3, [r4, #20]
 8013b62:	3001      	adds	r0, #1
 8013b64:	4283      	cmp	r3, r0
 8013b66:	d004      	beq.n	8013b72 <__swbuf_r+0x62>
 8013b68:	89a3      	ldrh	r3, [r4, #12]
 8013b6a:	07db      	lsls	r3, r3, #31
 8013b6c:	d506      	bpl.n	8013b7c <__swbuf_r+0x6c>
 8013b6e:	2e0a      	cmp	r6, #10
 8013b70:	d104      	bne.n	8013b7c <__swbuf_r+0x6c>
 8013b72:	4621      	mov	r1, r4
 8013b74:	4628      	mov	r0, r5
 8013b76:	f7ff f83d 	bl	8012bf4 <_fflush_r>
 8013b7a:	b988      	cbnz	r0, 8013ba0 <__swbuf_r+0x90>
 8013b7c:	4638      	mov	r0, r7
 8013b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b80:	4b0a      	ldr	r3, [pc, #40]	; (8013bac <__swbuf_r+0x9c>)
 8013b82:	429c      	cmp	r4, r3
 8013b84:	d101      	bne.n	8013b8a <__swbuf_r+0x7a>
 8013b86:	68ac      	ldr	r4, [r5, #8]
 8013b88:	e7cf      	b.n	8013b2a <__swbuf_r+0x1a>
 8013b8a:	4b09      	ldr	r3, [pc, #36]	; (8013bb0 <__swbuf_r+0xa0>)
 8013b8c:	429c      	cmp	r4, r3
 8013b8e:	bf08      	it	eq
 8013b90:	68ec      	ldreq	r4, [r5, #12]
 8013b92:	e7ca      	b.n	8013b2a <__swbuf_r+0x1a>
 8013b94:	4621      	mov	r1, r4
 8013b96:	4628      	mov	r0, r5
 8013b98:	f000 f81a 	bl	8013bd0 <__swsetup_r>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	d0cb      	beq.n	8013b38 <__swbuf_r+0x28>
 8013ba0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013ba4:	e7ea      	b.n	8013b7c <__swbuf_r+0x6c>
 8013ba6:	bf00      	nop
 8013ba8:	0801a33c 	.word	0x0801a33c
 8013bac:	0801a35c 	.word	0x0801a35c
 8013bb0:	0801a31c 	.word	0x0801a31c

08013bb4 <__ascii_wctomb>:
 8013bb4:	b149      	cbz	r1, 8013bca <__ascii_wctomb+0x16>
 8013bb6:	2aff      	cmp	r2, #255	; 0xff
 8013bb8:	bf85      	ittet	hi
 8013bba:	238a      	movhi	r3, #138	; 0x8a
 8013bbc:	6003      	strhi	r3, [r0, #0]
 8013bbe:	700a      	strbls	r2, [r1, #0]
 8013bc0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013bc4:	bf98      	it	ls
 8013bc6:	2001      	movls	r0, #1
 8013bc8:	4770      	bx	lr
 8013bca:	4608      	mov	r0, r1
 8013bcc:	4770      	bx	lr
	...

08013bd0 <__swsetup_r>:
 8013bd0:	4b32      	ldr	r3, [pc, #200]	; (8013c9c <__swsetup_r+0xcc>)
 8013bd2:	b570      	push	{r4, r5, r6, lr}
 8013bd4:	681d      	ldr	r5, [r3, #0]
 8013bd6:	4606      	mov	r6, r0
 8013bd8:	460c      	mov	r4, r1
 8013bda:	b125      	cbz	r5, 8013be6 <__swsetup_r+0x16>
 8013bdc:	69ab      	ldr	r3, [r5, #24]
 8013bde:	b913      	cbnz	r3, 8013be6 <__swsetup_r+0x16>
 8013be0:	4628      	mov	r0, r5
 8013be2:	f7fd f9f5 	bl	8010fd0 <__sinit>
 8013be6:	4b2e      	ldr	r3, [pc, #184]	; (8013ca0 <__swsetup_r+0xd0>)
 8013be8:	429c      	cmp	r4, r3
 8013bea:	d10f      	bne.n	8013c0c <__swsetup_r+0x3c>
 8013bec:	686c      	ldr	r4, [r5, #4]
 8013bee:	89a3      	ldrh	r3, [r4, #12]
 8013bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013bf4:	0719      	lsls	r1, r3, #28
 8013bf6:	d42c      	bmi.n	8013c52 <__swsetup_r+0x82>
 8013bf8:	06dd      	lsls	r5, r3, #27
 8013bfa:	d411      	bmi.n	8013c20 <__swsetup_r+0x50>
 8013bfc:	2309      	movs	r3, #9
 8013bfe:	6033      	str	r3, [r6, #0]
 8013c00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c04:	81a3      	strh	r3, [r4, #12]
 8013c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c0a:	e03e      	b.n	8013c8a <__swsetup_r+0xba>
 8013c0c:	4b25      	ldr	r3, [pc, #148]	; (8013ca4 <__swsetup_r+0xd4>)
 8013c0e:	429c      	cmp	r4, r3
 8013c10:	d101      	bne.n	8013c16 <__swsetup_r+0x46>
 8013c12:	68ac      	ldr	r4, [r5, #8]
 8013c14:	e7eb      	b.n	8013bee <__swsetup_r+0x1e>
 8013c16:	4b24      	ldr	r3, [pc, #144]	; (8013ca8 <__swsetup_r+0xd8>)
 8013c18:	429c      	cmp	r4, r3
 8013c1a:	bf08      	it	eq
 8013c1c:	68ec      	ldreq	r4, [r5, #12]
 8013c1e:	e7e6      	b.n	8013bee <__swsetup_r+0x1e>
 8013c20:	0758      	lsls	r0, r3, #29
 8013c22:	d512      	bpl.n	8013c4a <__swsetup_r+0x7a>
 8013c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c26:	b141      	cbz	r1, 8013c3a <__swsetup_r+0x6a>
 8013c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c2c:	4299      	cmp	r1, r3
 8013c2e:	d002      	beq.n	8013c36 <__swsetup_r+0x66>
 8013c30:	4630      	mov	r0, r6
 8013c32:	f7ff fbd3 	bl	80133dc <_free_r>
 8013c36:	2300      	movs	r3, #0
 8013c38:	6363      	str	r3, [r4, #52]	; 0x34
 8013c3a:	89a3      	ldrh	r3, [r4, #12]
 8013c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c40:	81a3      	strh	r3, [r4, #12]
 8013c42:	2300      	movs	r3, #0
 8013c44:	6063      	str	r3, [r4, #4]
 8013c46:	6923      	ldr	r3, [r4, #16]
 8013c48:	6023      	str	r3, [r4, #0]
 8013c4a:	89a3      	ldrh	r3, [r4, #12]
 8013c4c:	f043 0308 	orr.w	r3, r3, #8
 8013c50:	81a3      	strh	r3, [r4, #12]
 8013c52:	6923      	ldr	r3, [r4, #16]
 8013c54:	b94b      	cbnz	r3, 8013c6a <__swsetup_r+0x9a>
 8013c56:	89a3      	ldrh	r3, [r4, #12]
 8013c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c60:	d003      	beq.n	8013c6a <__swsetup_r+0x9a>
 8013c62:	4621      	mov	r1, r4
 8013c64:	4630      	mov	r0, r6
 8013c66:	f000 f84d 	bl	8013d04 <__smakebuf_r>
 8013c6a:	89a0      	ldrh	r0, [r4, #12]
 8013c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c70:	f010 0301 	ands.w	r3, r0, #1
 8013c74:	d00a      	beq.n	8013c8c <__swsetup_r+0xbc>
 8013c76:	2300      	movs	r3, #0
 8013c78:	60a3      	str	r3, [r4, #8]
 8013c7a:	6963      	ldr	r3, [r4, #20]
 8013c7c:	425b      	negs	r3, r3
 8013c7e:	61a3      	str	r3, [r4, #24]
 8013c80:	6923      	ldr	r3, [r4, #16]
 8013c82:	b943      	cbnz	r3, 8013c96 <__swsetup_r+0xc6>
 8013c84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013c88:	d1ba      	bne.n	8013c00 <__swsetup_r+0x30>
 8013c8a:	bd70      	pop	{r4, r5, r6, pc}
 8013c8c:	0781      	lsls	r1, r0, #30
 8013c8e:	bf58      	it	pl
 8013c90:	6963      	ldrpl	r3, [r4, #20]
 8013c92:	60a3      	str	r3, [r4, #8]
 8013c94:	e7f4      	b.n	8013c80 <__swsetup_r+0xb0>
 8013c96:	2000      	movs	r0, #0
 8013c98:	e7f7      	b.n	8013c8a <__swsetup_r+0xba>
 8013c9a:	bf00      	nop
 8013c9c:	200001b0 	.word	0x200001b0
 8013ca0:	0801a33c 	.word	0x0801a33c
 8013ca4:	0801a35c 	.word	0x0801a35c
 8013ca8:	0801a31c 	.word	0x0801a31c

08013cac <abort>:
 8013cac:	b508      	push	{r3, lr}
 8013cae:	2006      	movs	r0, #6
 8013cb0:	f000 f898 	bl	8013de4 <raise>
 8013cb4:	2001      	movs	r0, #1
 8013cb6:	f7f0 f813 	bl	8003ce0 <_exit>

08013cba <__swhatbuf_r>:
 8013cba:	b570      	push	{r4, r5, r6, lr}
 8013cbc:	460e      	mov	r6, r1
 8013cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cc2:	2900      	cmp	r1, #0
 8013cc4:	b096      	sub	sp, #88	; 0x58
 8013cc6:	4614      	mov	r4, r2
 8013cc8:	461d      	mov	r5, r3
 8013cca:	da07      	bge.n	8013cdc <__swhatbuf_r+0x22>
 8013ccc:	2300      	movs	r3, #0
 8013cce:	602b      	str	r3, [r5, #0]
 8013cd0:	89b3      	ldrh	r3, [r6, #12]
 8013cd2:	061a      	lsls	r2, r3, #24
 8013cd4:	d410      	bmi.n	8013cf8 <__swhatbuf_r+0x3e>
 8013cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cda:	e00e      	b.n	8013cfa <__swhatbuf_r+0x40>
 8013cdc:	466a      	mov	r2, sp
 8013cde:	f000 f89d 	bl	8013e1c <_fstat_r>
 8013ce2:	2800      	cmp	r0, #0
 8013ce4:	dbf2      	blt.n	8013ccc <__swhatbuf_r+0x12>
 8013ce6:	9a01      	ldr	r2, [sp, #4]
 8013ce8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013cec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013cf0:	425a      	negs	r2, r3
 8013cf2:	415a      	adcs	r2, r3
 8013cf4:	602a      	str	r2, [r5, #0]
 8013cf6:	e7ee      	b.n	8013cd6 <__swhatbuf_r+0x1c>
 8013cf8:	2340      	movs	r3, #64	; 0x40
 8013cfa:	2000      	movs	r0, #0
 8013cfc:	6023      	str	r3, [r4, #0]
 8013cfe:	b016      	add	sp, #88	; 0x58
 8013d00:	bd70      	pop	{r4, r5, r6, pc}
	...

08013d04 <__smakebuf_r>:
 8013d04:	898b      	ldrh	r3, [r1, #12]
 8013d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d08:	079d      	lsls	r5, r3, #30
 8013d0a:	4606      	mov	r6, r0
 8013d0c:	460c      	mov	r4, r1
 8013d0e:	d507      	bpl.n	8013d20 <__smakebuf_r+0x1c>
 8013d10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d14:	6023      	str	r3, [r4, #0]
 8013d16:	6123      	str	r3, [r4, #16]
 8013d18:	2301      	movs	r3, #1
 8013d1a:	6163      	str	r3, [r4, #20]
 8013d1c:	b002      	add	sp, #8
 8013d1e:	bd70      	pop	{r4, r5, r6, pc}
 8013d20:	ab01      	add	r3, sp, #4
 8013d22:	466a      	mov	r2, sp
 8013d24:	f7ff ffc9 	bl	8013cba <__swhatbuf_r>
 8013d28:	9900      	ldr	r1, [sp, #0]
 8013d2a:	4605      	mov	r5, r0
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	f7fd fa45 	bl	80111bc <_malloc_r>
 8013d32:	b948      	cbnz	r0, 8013d48 <__smakebuf_r+0x44>
 8013d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d38:	059a      	lsls	r2, r3, #22
 8013d3a:	d4ef      	bmi.n	8013d1c <__smakebuf_r+0x18>
 8013d3c:	f023 0303 	bic.w	r3, r3, #3
 8013d40:	f043 0302 	orr.w	r3, r3, #2
 8013d44:	81a3      	strh	r3, [r4, #12]
 8013d46:	e7e3      	b.n	8013d10 <__smakebuf_r+0xc>
 8013d48:	4b0d      	ldr	r3, [pc, #52]	; (8013d80 <__smakebuf_r+0x7c>)
 8013d4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8013d4c:	89a3      	ldrh	r3, [r4, #12]
 8013d4e:	6020      	str	r0, [r4, #0]
 8013d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d54:	81a3      	strh	r3, [r4, #12]
 8013d56:	9b00      	ldr	r3, [sp, #0]
 8013d58:	6163      	str	r3, [r4, #20]
 8013d5a:	9b01      	ldr	r3, [sp, #4]
 8013d5c:	6120      	str	r0, [r4, #16]
 8013d5e:	b15b      	cbz	r3, 8013d78 <__smakebuf_r+0x74>
 8013d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d64:	4630      	mov	r0, r6
 8013d66:	f000 f86b 	bl	8013e40 <_isatty_r>
 8013d6a:	b128      	cbz	r0, 8013d78 <__smakebuf_r+0x74>
 8013d6c:	89a3      	ldrh	r3, [r4, #12]
 8013d6e:	f023 0303 	bic.w	r3, r3, #3
 8013d72:	f043 0301 	orr.w	r3, r3, #1
 8013d76:	81a3      	strh	r3, [r4, #12]
 8013d78:	89a0      	ldrh	r0, [r4, #12]
 8013d7a:	4305      	orrs	r5, r0
 8013d7c:	81a5      	strh	r5, [r4, #12]
 8013d7e:	e7cd      	b.n	8013d1c <__smakebuf_r+0x18>
 8013d80:	08010f69 	.word	0x08010f69

08013d84 <_malloc_usable_size_r>:
 8013d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d88:	1f18      	subs	r0, r3, #4
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	bfbc      	itt	lt
 8013d8e:	580b      	ldrlt	r3, [r1, r0]
 8013d90:	18c0      	addlt	r0, r0, r3
 8013d92:	4770      	bx	lr

08013d94 <_raise_r>:
 8013d94:	291f      	cmp	r1, #31
 8013d96:	b538      	push	{r3, r4, r5, lr}
 8013d98:	4604      	mov	r4, r0
 8013d9a:	460d      	mov	r5, r1
 8013d9c:	d904      	bls.n	8013da8 <_raise_r+0x14>
 8013d9e:	2316      	movs	r3, #22
 8013da0:	6003      	str	r3, [r0, #0]
 8013da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013da6:	bd38      	pop	{r3, r4, r5, pc}
 8013da8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013daa:	b112      	cbz	r2, 8013db2 <_raise_r+0x1e>
 8013dac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013db0:	b94b      	cbnz	r3, 8013dc6 <_raise_r+0x32>
 8013db2:	4620      	mov	r0, r4
 8013db4:	f000 f830 	bl	8013e18 <_getpid_r>
 8013db8:	462a      	mov	r2, r5
 8013dba:	4601      	mov	r1, r0
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013dc2:	f000 b817 	b.w	8013df4 <_kill_r>
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	d00a      	beq.n	8013de0 <_raise_r+0x4c>
 8013dca:	1c59      	adds	r1, r3, #1
 8013dcc:	d103      	bne.n	8013dd6 <_raise_r+0x42>
 8013dce:	2316      	movs	r3, #22
 8013dd0:	6003      	str	r3, [r0, #0]
 8013dd2:	2001      	movs	r0, #1
 8013dd4:	e7e7      	b.n	8013da6 <_raise_r+0x12>
 8013dd6:	2400      	movs	r4, #0
 8013dd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013ddc:	4628      	mov	r0, r5
 8013dde:	4798      	blx	r3
 8013de0:	2000      	movs	r0, #0
 8013de2:	e7e0      	b.n	8013da6 <_raise_r+0x12>

08013de4 <raise>:
 8013de4:	4b02      	ldr	r3, [pc, #8]	; (8013df0 <raise+0xc>)
 8013de6:	4601      	mov	r1, r0
 8013de8:	6818      	ldr	r0, [r3, #0]
 8013dea:	f7ff bfd3 	b.w	8013d94 <_raise_r>
 8013dee:	bf00      	nop
 8013df0:	200001b0 	.word	0x200001b0

08013df4 <_kill_r>:
 8013df4:	b538      	push	{r3, r4, r5, lr}
 8013df6:	4d07      	ldr	r5, [pc, #28]	; (8013e14 <_kill_r+0x20>)
 8013df8:	2300      	movs	r3, #0
 8013dfa:	4604      	mov	r4, r0
 8013dfc:	4608      	mov	r0, r1
 8013dfe:	4611      	mov	r1, r2
 8013e00:	602b      	str	r3, [r5, #0]
 8013e02:	f7ef ff5d 	bl	8003cc0 <_kill>
 8013e06:	1c43      	adds	r3, r0, #1
 8013e08:	d102      	bne.n	8013e10 <_kill_r+0x1c>
 8013e0a:	682b      	ldr	r3, [r5, #0]
 8013e0c:	b103      	cbz	r3, 8013e10 <_kill_r+0x1c>
 8013e0e:	6023      	str	r3, [r4, #0]
 8013e10:	bd38      	pop	{r3, r4, r5, pc}
 8013e12:	bf00      	nop
 8013e14:	2000ef4c 	.word	0x2000ef4c

08013e18 <_getpid_r>:
 8013e18:	f7ef bf4a 	b.w	8003cb0 <_getpid>

08013e1c <_fstat_r>:
 8013e1c:	b538      	push	{r3, r4, r5, lr}
 8013e1e:	4d07      	ldr	r5, [pc, #28]	; (8013e3c <_fstat_r+0x20>)
 8013e20:	2300      	movs	r3, #0
 8013e22:	4604      	mov	r4, r0
 8013e24:	4608      	mov	r0, r1
 8013e26:	4611      	mov	r1, r2
 8013e28:	602b      	str	r3, [r5, #0]
 8013e2a:	f7ef ffa8 	bl	8003d7e <_fstat>
 8013e2e:	1c43      	adds	r3, r0, #1
 8013e30:	d102      	bne.n	8013e38 <_fstat_r+0x1c>
 8013e32:	682b      	ldr	r3, [r5, #0]
 8013e34:	b103      	cbz	r3, 8013e38 <_fstat_r+0x1c>
 8013e36:	6023      	str	r3, [r4, #0]
 8013e38:	bd38      	pop	{r3, r4, r5, pc}
 8013e3a:	bf00      	nop
 8013e3c:	2000ef4c 	.word	0x2000ef4c

08013e40 <_isatty_r>:
 8013e40:	b538      	push	{r3, r4, r5, lr}
 8013e42:	4d06      	ldr	r5, [pc, #24]	; (8013e5c <_isatty_r+0x1c>)
 8013e44:	2300      	movs	r3, #0
 8013e46:	4604      	mov	r4, r0
 8013e48:	4608      	mov	r0, r1
 8013e4a:	602b      	str	r3, [r5, #0]
 8013e4c:	f7ef ffa7 	bl	8003d9e <_isatty>
 8013e50:	1c43      	adds	r3, r0, #1
 8013e52:	d102      	bne.n	8013e5a <_isatty_r+0x1a>
 8013e54:	682b      	ldr	r3, [r5, #0]
 8013e56:	b103      	cbz	r3, 8013e5a <_isatty_r+0x1a>
 8013e58:	6023      	str	r3, [r4, #0]
 8013e5a:	bd38      	pop	{r3, r4, r5, pc}
 8013e5c:	2000ef4c 	.word	0x2000ef4c

08013e60 <_init>:
 8013e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e62:	bf00      	nop
 8013e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e66:	bc08      	pop	{r3}
 8013e68:	469e      	mov	lr, r3
 8013e6a:	4770      	bx	lr

08013e6c <_fini>:
 8013e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e6e:	bf00      	nop
 8013e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e72:	bc08      	pop	{r3}
 8013e74:	469e      	mov	lr, r3
 8013e76:	4770      	bx	lr
