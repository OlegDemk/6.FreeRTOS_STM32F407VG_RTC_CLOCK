
6.FreeRTOS_STM32F407VG_RTC_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013538  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bdc  080136c8  080136c8  000236c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080162a4  080162a4  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080162a4  080162a4  000262a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080162ac  080162ac  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080162ac  080162ac  000262ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080162b0  080162b0  000262b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  080162b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030354  2**0
                  CONTENTS
 10 .bss          0000b31c  20000354  20000354  00030354  2**2
                  ALLOC
 11 ._user_heap_stack 00001100  2000b670  2000b670  00030354  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003278d  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000647a  00000000  00000000  00062b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002278  00000000  00000000  00068f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002028  00000000  00000000  0006b208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029028  00000000  00000000  0006d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002976a  00000000  00000000  00096258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb7f5  00000000  00000000  000bf9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ab1b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a328  00000000  00000000  001ab20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080136b0 	.word	0x080136b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	080136b0 	.word	0x080136b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <time_i2c_write_single>:



/*function to transmit one byte of data to register_address on ds3231 (device_address: 0X68)*/
void time_i2c_write_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af04      	add	r7, sp, #16
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	603a      	str	r2, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	460b      	mov	r3, r1
 8000eae:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Write(&hi2c3, DS3231_I2C_ADDRESS<<1, DS3231_REGISTER_SECONDS_DEFAULT, 1, &seco, 1, 1000);
	//HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	HAL_I2C_Mem_Write(&hi2c3, (uint16_t)device_address<<1, register_address, 1, data_byte, 1, 1000);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	b299      	uxth	r1, r3
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec0:	9302      	str	r3, [sp, #8]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <time_i2c_write_single+0x3c>)
 8000ece:	f004 ff19 	bl	8005d04 <HAL_I2C_Mem_Write>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20005610 	.word	0x20005610

08000ee0 <time_i2c_write_multi>:

/*function to transmit an array of data to device_address, starting from start_register_address*/
void time_i2c_write_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af04      	add	r7, sp, #16
 8000ee6:	603a      	str	r2, [r7, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	71bb      	strb	r3, [r7, #6]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, device_address<<1, start_register_address, 1, data_array, data_length, 1000);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	b299      	uxth	r1, r3
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0a:	9002      	str	r0, [sp, #8]
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <time_i2c_write_multi+0x44>)
 8000f16:	f004 fef5 	bl	8005d04 <HAL_I2C_Mem_Write>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20005610 	.word	0x20005610

08000f28 <time_i2c_read_single>:

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af04      	add	r7, sp, #16
 8000f2e:	4603      	mov	r3, r0
 8000f30:	603a      	str	r2, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	460b      	mov	r3, r1
 8000f36:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c3, device_address<<1,register_address, 1, data_byte, 1, 1000);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	b299      	uxth	r1, r3
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f48:	9302      	str	r3, [sp, #8]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <time_i2c_read_single+0x3c>)
 8000f56:	f004 ffcf 	bl	8005ef8 <HAL_I2C_Mem_Read>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20005610 	.word	0x20005610

08000f68 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af04      	add	r7, sp, #16
 8000f6e:	603a      	str	r2, [r7, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	460b      	mov	r3, r1
 8000f78:	71bb      	strb	r3, [r7, #6]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	b299      	uxth	r1, r3
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	797b      	ldrb	r3, [r7, #5]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f92:	9002      	str	r0, [sp, #8]
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <time_i2c_read_multi+0x44>)
 8000f9e:	f004 ffab 	bl	8005ef8 <HAL_I2C_Mem_Read>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20005610 	.word	0x20005610

08000fb0 <ds3231_I2C_init>:

/*function to initialize I2C peripheral in 100khz or 400khz*/
void ds3231_I2C_init()
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b0e      	cmp	r3, #14
 8000fd0:	f200 80ac 	bhi.w	800112c <ds3231_read+0x16c>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <ds3231_read+0x1c>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08001019 	.word	0x08001019
 8000fe0:	08001035 	.word	0x08001035
 8000fe4:	08001051 	.word	0x08001051
 8000fe8:	0800106d 	.word	0x0800106d
 8000fec:	08001089 	.word	0x08001089
 8000ff0:	080010a5 	.word	0x080010a5
 8000ff4:	080010c1 	.word	0x080010c1
 8000ff8:	080010dd 	.word	0x080010dd
 8000ffc:	080010f1 	.word	0x080010f1
 8001000:	08001105 	.word	0x08001105
 8001004:	0800112d 	.word	0x0800112d
 8001008:	0800112d 	.word	0x0800112d
 800100c:	0800112d 	.word	0x0800112d
 8001010:	0800112d 	.word	0x0800112d
 8001014:	08001117 	.word	0x08001117
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8001018:	4a48      	ldr	r2, [pc, #288]	; (800113c <ds3231_read+0x17c>)
 800101a:	2100      	movs	r1, #0
 800101c:	2068      	movs	r0, #104	; 0x68
 800101e:	f7ff ff83 	bl	8000f28 <time_i2c_read_single>
      *data_array = register_current_value;
 8001022:	4b46      	ldr	r3, [pc, #280]	; (800113c <ds3231_read+0x17c>)
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800102a:	2101      	movs	r1, #1
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	f000 f9cf 	bl	80013d0 <BCD_to_HEX>
      break;
 8001032:	e07d      	b.n	8001130 <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 8001034:	4a41      	ldr	r2, [pc, #260]	; (800113c <ds3231_read+0x17c>)
 8001036:	2101      	movs	r1, #1
 8001038:	2068      	movs	r0, #104	; 0x68
 800103a:	f7ff ff75 	bl	8000f28 <time_i2c_read_single>
      *data_array = register_current_value;
 800103e:	4b3f      	ldr	r3, [pc, #252]	; (800113c <ds3231_read+0x17c>)
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001046:	2101      	movs	r1, #1
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f000 f9c1 	bl	80013d0 <BCD_to_HEX>
      break;
 800104e:	e06f      	b.n	8001130 <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 8001050:	4a3a      	ldr	r2, [pc, #232]	; (800113c <ds3231_read+0x17c>)
 8001052:	2102      	movs	r1, #2
 8001054:	2068      	movs	r0, #104	; 0x68
 8001056:	f7ff ff67 	bl	8000f28 <time_i2c_read_single>
      *data_array = register_current_value;
 800105a:	4b38      	ldr	r3, [pc, #224]	; (800113c <ds3231_read+0x17c>)
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8001062:	2101      	movs	r1, #1
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f000 f9b3 	bl	80013d0 <BCD_to_HEX>
      break;
 800106a:	e061      	b.n	8001130 <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 800106c:	4a33      	ldr	r2, [pc, #204]	; (800113c <ds3231_read+0x17c>)
 800106e:	2103      	movs	r1, #3
 8001070:	2068      	movs	r0, #104	; 0x68
 8001072:	f7ff ff59 	bl	8000f28 <time_i2c_read_single>
      *data_array = register_current_value;
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <ds3231_read+0x17c>)
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800107e:	2101      	movs	r1, #1
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f000 f9a5 	bl	80013d0 <BCD_to_HEX>
      break;
 8001086:	e053      	b.n	8001130 <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 8001088:	4a2c      	ldr	r2, [pc, #176]	; (800113c <ds3231_read+0x17c>)
 800108a:	2104      	movs	r1, #4
 800108c:	2068      	movs	r0, #104	; 0x68
 800108e:	f7ff ff4b 	bl	8000f28 <time_i2c_read_single>
      *data_array = register_current_value;
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <ds3231_read+0x17c>)
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800109a:	2101      	movs	r1, #1
 800109c:	6838      	ldr	r0, [r7, #0]
 800109e:	f000 f997 	bl	80013d0 <BCD_to_HEX>
      break;
 80010a2:	e045      	b.n	8001130 <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 80010a4:	4a25      	ldr	r2, [pc, #148]	; (800113c <ds3231_read+0x17c>)
 80010a6:	2105      	movs	r1, #5
 80010a8:	2068      	movs	r0, #104	; 0x68
 80010aa:	f7ff ff3d 	bl	8000f28 <time_i2c_read_single>
      *data_array = register_current_value;
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <ds3231_read+0x17c>)
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80010b6:	2101      	movs	r1, #1
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f000 f989 	bl	80013d0 <BCD_to_HEX>
      break;
 80010be:	e037      	b.n	8001130 <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 80010c0:	4a1e      	ldr	r2, [pc, #120]	; (800113c <ds3231_read+0x17c>)
 80010c2:	2106      	movs	r1, #6
 80010c4:	2068      	movs	r0, #104	; 0x68
 80010c6:	f7ff ff2f 	bl	8000f28 <time_i2c_read_single>
      *data_array = register_current_value;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <ds3231_read+0x17c>)
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80010d2:	2101      	movs	r1, #1
 80010d4:	6838      	ldr	r0, [r7, #0]
 80010d6:	f000 f97b 	bl	80013d0 <BCD_to_HEX>
      break;
 80010da:	e029      	b.n	8001130 <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 80010dc:	4a17      	ldr	r2, [pc, #92]	; (800113c <ds3231_read+0x17c>)
 80010de:	210e      	movs	r1, #14
 80010e0:	2068      	movs	r0, #104	; 0x68
 80010e2:	f7ff ff21 	bl	8000f28 <time_i2c_read_single>
      *data_array = register_current_value;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <ds3231_read+0x17c>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	701a      	strb	r2, [r3, #0]
      break;
 80010ee:	e01f      	b.n	8001130 <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <ds3231_read+0x17c>)
 80010f2:	210f      	movs	r1, #15
 80010f4:	2068      	movs	r0, #104	; 0x68
 80010f6:	f7ff ff17 	bl	8000f28 <time_i2c_read_single>
      *data_array = register_current_value;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <ds3231_read+0x17c>)
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	701a      	strb	r2, [r3, #0]
      break;
 8001102:	e015      	b.n	8001130 <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <ds3231_read+0x17c>)
 8001106:	2110      	movs	r1, #16
 8001108:	2068      	movs	r0, #104	; 0x68
 800110a:	f7ff ff0d 	bl	8000f28 <time_i2c_read_single>
      *data_array = register_current_value;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <ds3231_read+0x17c>)
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 8001116:	2307      	movs	r3, #7
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	2100      	movs	r1, #0
 800111c:	2068      	movs	r0, #104	; 0x68
 800111e:	f7ff ff23 	bl	8000f68 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 8001122:	2107      	movs	r1, #7
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f000 f953 	bl	80013d0 <BCD_to_HEX>
      break;
 800112a:	e001      	b.n	8001130 <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 800112c:	2300      	movs	r3, #0
 800112e:	e000      	b.n	8001132 <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8001130:	2301      	movs	r3, #1
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000370 	.word	0x20000370

08001140 <ds3231_set>:

/*function to set internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_set(uint8_t option, uint8_t *data_array)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  switch (option)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b0e      	cmp	r3, #14
 8001150:	f200 80d5 	bhi.w	80012fe <ds3231_set+0x1be>
 8001154:	a201      	add	r2, pc, #4	; (adr r2, 800115c <ds3231_set+0x1c>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	08001199 	.word	0x08001199
 8001160:	080011b5 	.word	0x080011b5
 8001164:	080011d1 	.word	0x080011d1
 8001168:	080011ed 	.word	0x080011ed
 800116c:	08001209 	.word	0x08001209
 8001170:	08001225 	.word	0x08001225
 8001174:	08001241 	.word	0x08001241
 8001178:	0800125d 	.word	0x0800125d
 800117c:	08001295 	.word	0x08001295
 8001180:	080012eb 	.word	0x080012eb
 8001184:	080012ff 	.word	0x080012ff
 8001188:	080012ff 	.word	0x080012ff
 800118c:	080012ff 	.word	0x080012ff
 8001190:	080012ff 	.word	0x080012ff
 8001194:	080012cd 	.word	0x080012cd
  {
    case SECOND:
      time_registers_clone[0] = *data_array;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	4b5b      	ldr	r3, [pc, #364]	; (800130c <ds3231_set+0x1cc>)
 800119e:	701a      	strb	r2, [r3, #0]
      HEX_to_BCD(&time_registers_clone[0], 1);
 80011a0:	2101      	movs	r1, #1
 80011a2:	485a      	ldr	r0, [pc, #360]	; (800130c <ds3231_set+0x1cc>)
 80011a4:	f000 f953 	bl	800144e <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 80011a8:	4a58      	ldr	r2, [pc, #352]	; (800130c <ds3231_set+0x1cc>)
 80011aa:	2100      	movs	r1, #0
 80011ac:	2068      	movs	r0, #104	; 0x68
 80011ae:	f7ff fe77 	bl	8000ea0 <time_i2c_write_single>
      break;
 80011b2:	e0a6      	b.n	8001302 <ds3231_set+0x1c2>
    case MINUTE:
      time_registers_clone[1] = *data_array;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	4b54      	ldr	r3, [pc, #336]	; (800130c <ds3231_set+0x1cc>)
 80011ba:	705a      	strb	r2, [r3, #1]
      HEX_to_BCD(&time_registers_clone[1], 1);
 80011bc:	2101      	movs	r1, #1
 80011be:	4854      	ldr	r0, [pc, #336]	; (8001310 <ds3231_set+0x1d0>)
 80011c0:	f000 f945 	bl	800144e <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 80011c4:	4a52      	ldr	r2, [pc, #328]	; (8001310 <ds3231_set+0x1d0>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	2068      	movs	r0, #104	; 0x68
 80011ca:	f7ff fe69 	bl	8000ea0 <time_i2c_write_single>
      break;
 80011ce:	e098      	b.n	8001302 <ds3231_set+0x1c2>
    case HOUR:
      time_registers_clone[2] = *data_array;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	4b4d      	ldr	r3, [pc, #308]	; (800130c <ds3231_set+0x1cc>)
 80011d6:	709a      	strb	r2, [r3, #2]
      HEX_to_BCD(&time_registers_clone[2], 1);
 80011d8:	2101      	movs	r1, #1
 80011da:	484e      	ldr	r0, [pc, #312]	; (8001314 <ds3231_set+0x1d4>)
 80011dc:	f000 f937 	bl	800144e <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 80011e0:	4a4c      	ldr	r2, [pc, #304]	; (8001314 <ds3231_set+0x1d4>)
 80011e2:	2102      	movs	r1, #2
 80011e4:	2068      	movs	r0, #104	; 0x68
 80011e6:	f7ff fe5b 	bl	8000ea0 <time_i2c_write_single>
      break;
 80011ea:	e08a      	b.n	8001302 <ds3231_set+0x1c2>
    case DAY_OF_WEEK:
      time_registers_clone[3] = *data_array;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b46      	ldr	r3, [pc, #280]	; (800130c <ds3231_set+0x1cc>)
 80011f2:	70da      	strb	r2, [r3, #3]
      HEX_to_BCD(&time_registers_clone[3], 1);
 80011f4:	2101      	movs	r1, #1
 80011f6:	4848      	ldr	r0, [pc, #288]	; (8001318 <ds3231_set+0x1d8>)
 80011f8:	f000 f929 	bl	800144e <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 80011fc:	4a46      	ldr	r2, [pc, #280]	; (8001318 <ds3231_set+0x1d8>)
 80011fe:	2103      	movs	r1, #3
 8001200:	2068      	movs	r0, #104	; 0x68
 8001202:	f7ff fe4d 	bl	8000ea0 <time_i2c_write_single>
      break;
 8001206:	e07c      	b.n	8001302 <ds3231_set+0x1c2>
    case DATE:
      time_registers_clone[4] = *data_array;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <ds3231_set+0x1cc>)
 800120e:	711a      	strb	r2, [r3, #4]
      HEX_to_BCD(&time_registers_clone[4], 1);
 8001210:	2101      	movs	r1, #1
 8001212:	4842      	ldr	r0, [pc, #264]	; (800131c <ds3231_set+0x1dc>)
 8001214:	f000 f91b 	bl	800144e <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 8001218:	4a40      	ldr	r2, [pc, #256]	; (800131c <ds3231_set+0x1dc>)
 800121a:	2104      	movs	r1, #4
 800121c:	2068      	movs	r0, #104	; 0x68
 800121e:	f7ff fe3f 	bl	8000ea0 <time_i2c_write_single>
      break;
 8001222:	e06e      	b.n	8001302 <ds3231_set+0x1c2>
    case MONTH:
      time_registers_clone[5] = *data_array;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <ds3231_set+0x1cc>)
 800122a:	715a      	strb	r2, [r3, #5]
      HEX_to_BCD(&time_registers_clone[5], 1);
 800122c:	2101      	movs	r1, #1
 800122e:	483c      	ldr	r0, [pc, #240]	; (8001320 <ds3231_set+0x1e0>)
 8001230:	f000 f90d 	bl	800144e <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 8001234:	4a3a      	ldr	r2, [pc, #232]	; (8001320 <ds3231_set+0x1e0>)
 8001236:	2105      	movs	r1, #5
 8001238:	2068      	movs	r0, #104	; 0x68
 800123a:	f7ff fe31 	bl	8000ea0 <time_i2c_write_single>
      break;
 800123e:	e060      	b.n	8001302 <ds3231_set+0x1c2>
    case YEAR:
      time_registers_clone[6] = *data_array;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <ds3231_set+0x1cc>)
 8001246:	719a      	strb	r2, [r3, #6]
      HEX_to_BCD(&time_registers_clone[6], 1);
 8001248:	2101      	movs	r1, #1
 800124a:	4836      	ldr	r0, [pc, #216]	; (8001324 <ds3231_set+0x1e4>)
 800124c:	f000 f8ff 	bl	800144e <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8001250:	4a34      	ldr	r2, [pc, #208]	; (8001324 <ds3231_set+0x1e4>)
 8001252:	2106      	movs	r1, #6
 8001254:	2068      	movs	r0, #104	; 0x68
 8001256:	f7ff fe23 	bl	8000ea0 <time_i2c_write_single>
      break;
 800125a:	e052      	b.n	8001302 <ds3231_set+0x1c2>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 800125c:	4a32      	ldr	r2, [pc, #200]	; (8001328 <ds3231_set+0x1e8>)
 800125e:	210e      	movs	r1, #14
 8001260:	2068      	movs	r0, #104	; 0x68
 8001262:	f7ff fe61 	bl	8000f28 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (*data_array & (~(1 << DS3231_BIT_EOSC)));
 8001266:	4b30      	ldr	r3, [pc, #192]	; (8001328 <ds3231_set+0x1e8>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b25b      	sxtb	r3, r3
 800126c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001270:	b25a      	sxtb	r2, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b25b      	sxtb	r3, r3
 8001278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800127c:	b25b      	sxtb	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b25b      	sxtb	r3, r3
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b29      	ldr	r3, [pc, #164]	; (800132c <ds3231_set+0x1ec>)
 8001286:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8001288:	4a28      	ldr	r2, [pc, #160]	; (800132c <ds3231_set+0x1ec>)
 800128a:	210e      	movs	r1, #14
 800128c:	2068      	movs	r0, #104	; 0x68
 800128e:	f7ff fe07 	bl	8000ea0 <time_i2c_write_single>
      break;
 8001292:	e036      	b.n	8001302 <ds3231_set+0x1c2>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8001294:	4a24      	ldr	r2, [pc, #144]	; (8001328 <ds3231_set+0x1e8>)
 8001296:	210f      	movs	r1, #15
 8001298:	2068      	movs	r0, #104	; 0x68
 800129a:	f7ff fe45 	bl	8000f28 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (*data_array & (~(1 << DS3231_BIT_OSF)));
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <ds3231_set+0x1e8>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012a8:	b25a      	sxtb	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <ds3231_set+0x1ec>)
 80012be:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 80012c0:	4a1a      	ldr	r2, [pc, #104]	; (800132c <ds3231_set+0x1ec>)
 80012c2:	210f      	movs	r1, #15
 80012c4:	2068      	movs	r0, #104	; 0x68
 80012c6:	f7ff fdeb 	bl	8000ea0 <time_i2c_write_single>
      break;
 80012ca:	e01a      	b.n	8001302 <ds3231_set+0x1c2>
    case TIME:
      ds3231_data_clone(TIME, data_array);
 80012cc:	6839      	ldr	r1, [r7, #0]
 80012ce:	200e      	movs	r0, #14
 80012d0:	f000 f82e 	bl	8001330 <ds3231_data_clone>
      HEX_to_BCD(&time_registers_clone[0], 7);
 80012d4:	2107      	movs	r1, #7
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <ds3231_set+0x1cc>)
 80012d8:	f000 f8b9 	bl	800144e <HEX_to_BCD>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 80012dc:	2307      	movs	r3, #7
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <ds3231_set+0x1cc>)
 80012e0:	2100      	movs	r1, #0
 80012e2:	2068      	movs	r0, #104	; 0x68
 80012e4:	f7ff fdfc 	bl	8000ee0 <time_i2c_write_multi>
      break;
 80012e8:	e00b      	b.n	8001302 <ds3231_set+0x1c2>
    case AGING_OFFSET:
      register_new_value = *data_array;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	781a      	ldrb	r2, [r3, #0]
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <ds3231_set+0x1ec>)
 80012f0:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <ds3231_set+0x1ec>)
 80012f4:	2110      	movs	r1, #16
 80012f6:	2068      	movs	r0, #104	; 0x68
 80012f8:	f7ff fdd2 	bl	8000ea0 <time_i2c_write_single>
      break;
 80012fc:	e001      	b.n	8001302 <ds3231_set+0x1c2>
    default:
      return OPERATION_FAILED;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <ds3231_set+0x1c4>
  }
  return OPERATION_DONE;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000374 	.word	0x20000374
 8001310:	20000375 	.word	0x20000375
 8001314:	20000376 	.word	0x20000376
 8001318:	20000377 	.word	0x20000377
 800131c:	20000378 	.word	0x20000378
 8001320:	20000379 	.word	0x20000379
 8001324:	2000037a 	.word	0x2000037a
 8001328:	20000370 	.word	0x20000370
 800132c:	20000371 	.word	0x20000371

08001330 <ds3231_data_clone>:

/*to clone the desired data and prevent reconversion of BCD to HEX*/
static void ds3231_data_clone(uint8_t option, uint8_t *input_array)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  switch (option)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b0e      	cmp	r3, #14
 8001340:	d006      	beq.n	8001350 <ds3231_data_clone+0x20>
 8001342:	2b0e      	cmp	r3, #14
 8001344:	dc37      	bgt.n	80013b6 <ds3231_data_clone+0x86>
 8001346:	2b0a      	cmp	r3, #10
 8001348:	d013      	beq.n	8001372 <ds3231_data_clone+0x42>
 800134a:	2b0b      	cmp	r3, #11
 800134c:	d022      	beq.n	8001394 <ds3231_data_clone+0x64>
      {
        alarm2_registers_clone[counter] = input_array[counter];
      }
      break;
    default:
      break;
 800134e:	e032      	b.n	80013b6 <ds3231_data_clone+0x86>
      for (uint8_t counter = 0; counter < 7; counter++)
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e009      	b.n	800136a <ds3231_data_clone+0x3a>
        time_registers_clone[counter] = input_array[counter];
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	441a      	add	r2, r3
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	7811      	ldrb	r1, [r2, #0]
 8001360:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <ds3231_data_clone+0x94>)
 8001362:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 7; counter++)
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3301      	adds	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b06      	cmp	r3, #6
 800136e:	d9f2      	bls.n	8001356 <ds3231_data_clone+0x26>
      break;
 8001370:	e022      	b.n	80013b8 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 4; counter++)
 8001372:	2300      	movs	r3, #0
 8001374:	73bb      	strb	r3, [r7, #14]
 8001376:	e009      	b.n	800138c <ds3231_data_clone+0x5c>
        alarm1_registers_clone[counter] = input_array[counter];
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	441a      	add	r2, r3
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	7811      	ldrb	r1, [r2, #0]
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <ds3231_data_clone+0x98>)
 8001384:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 4; counter++)
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	3301      	adds	r3, #1
 800138a:	73bb      	strb	r3, [r7, #14]
 800138c:	7bbb      	ldrb	r3, [r7, #14]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d9f2      	bls.n	8001378 <ds3231_data_clone+0x48>
      break;
 8001392:	e011      	b.n	80013b8 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 3; counter++)
 8001394:	2300      	movs	r3, #0
 8001396:	737b      	strb	r3, [r7, #13]
 8001398:	e009      	b.n	80013ae <ds3231_data_clone+0x7e>
        alarm2_registers_clone[counter] = input_array[counter];
 800139a:	7b7b      	ldrb	r3, [r7, #13]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	441a      	add	r2, r3
 80013a0:	7b7b      	ldrb	r3, [r7, #13]
 80013a2:	7811      	ldrb	r1, [r2, #0]
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <ds3231_data_clone+0x9c>)
 80013a6:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 3; counter++)
 80013a8:	7b7b      	ldrb	r3, [r7, #13]
 80013aa:	3301      	adds	r3, #1
 80013ac:	737b      	strb	r3, [r7, #13]
 80013ae:	7b7b      	ldrb	r3, [r7, #13]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d9f2      	bls.n	800139a <ds3231_data_clone+0x6a>
      break;
 80013b4:	e000      	b.n	80013b8 <ds3231_data_clone+0x88>
      break;
 80013b6:	bf00      	nop
  }
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	20000374 	.word	0x20000374
 80013c8:	2000037c 	.word	0x2000037c
 80013cc:	20000380 	.word	0x20000380

080013d0 <BCD_to_HEX>:

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	3b01      	subs	r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e028      	b.n	8001438 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	440b      	add	r3, r1
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	b2db      	uxtb	r3, r3
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4413      	add	r3, r2
 800140c:	b2d9      	uxtb	r1, r3
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	b2da      	uxtb	r2, r3
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	4403      	add	r3, r0
 8001426:	440a      	add	r2, r1
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 800142c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	3b01      	subs	r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	dad2      	bge.n	80013e6 <BCD_to_HEX+0x16>
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HEX_to_BCD>:

/*internal function related to this file and not accessible from outside*/
static void HEX_to_BCD(uint8_t *data_array, uint8_t array_length)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	70fb      	strb	r3, [r7, #3]
  uint8_t temporary_value;
  for (int8_t index = (array_length - 1); index >= 0; index--)
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	3b01      	subs	r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	73bb      	strb	r3, [r7, #14]
 8001462:	e02d      	b.n	80014c0 <HEX_to_BCD+0x72>
  {
    temporary_value = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8001468:	e00e      	b.n	8001488 <HEX_to_BCD+0x3a>
    {
      temporary_value += 0X10;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3310      	adds	r3, #16
 800146e:	73fb      	strb	r3, [r7, #15]
      data_array[index] -= 0X0A;
 8001470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	781a      	ldrb	r2, [r3, #0]
 800147a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	440b      	add	r3, r1
 8001482:	3a0a      	subs	r2, #10
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	701a      	strb	r2, [r3, #0]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8001488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b25b      	sxtb	r3, r3
 8001494:	2b09      	cmp	r3, #9
 8001496:	dce8      	bgt.n	800146a <HEX_to_BCD+0x1c>
    }
    temporary_value += data_array[index];
 8001498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	781a      	ldrb	r2, [r3, #0]
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	4413      	add	r3, r2
 80014a6:	73fb      	strb	r3, [r7, #15]
    data_array[index] = temporary_value;
 80014a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 80014b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	73bb      	strb	r3, [r7, #14]
 80014c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dacd      	bge.n	8001464 <HEX_to_BCD+0x16>
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014dc:	f002 ff9c 	bl	8004418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e0:	f000 f882 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e4:	f000 fb36 	bl	8001b54 <MX_GPIO_Init>
  MX_TIM3_Init();
 80014e8:	f000 fa6e 	bl	80019c8 <MX_TIM3_Init>
  MX_I2C3_Init();
 80014ec:	f000 f966 	bl	80017bc <MX_I2C3_Init>
  MX_TIM10_Init();
 80014f0:	f000 faee 	bl	8001ad0 <MX_TIM10_Init>
  MX_SPI1_Init();
 80014f4:	f000 f9a4 	bl	8001840 <MX_SPI1_Init>
  MX_SPI2_Init();
 80014f8:	f000 f9d8 	bl	80018ac <MX_SPI2_Init>
  MX_DMA_Init();
 80014fc:	f000 fb0a 	bl	8001b14 <MX_DMA_Init>
  MX_RNG_Init();
 8001500:	f000 f98a 	bl	8001818 <MX_RNG_Init>
  MX_I2C2_Init();
 8001504:	f000 f92c 	bl	8001760 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001508:	f000 f8d8 	bl	80016bc <MX_ADC1_Init>
  MX_TIM1_Init();
 800150c:	f000 fa04 	bl	8001918 <MX_TIM1_Init>
  MX_TIM7_Init();
 8001510:	f000 faa8 	bl	8001a64 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 8001514:	4821      	ldr	r0, [pc, #132]	; (800159c <main+0xc4>)
 8001516:	f007 fb51 	bl	8008bbc <HAL_TIM_Base_Start_IT>
  /* IF LCD DOESN'T WORK !
  RIGHT IN RIGHT ORDER SPI2 AND DMA !!!!
  MX_DMA_Init();
  MX_SPI2_Init();
  */
  HAL_DMA_DeInit(&hdma_spi2_tx);
 800151a:	4821      	ldr	r0, [pc, #132]	; (80015a0 <main+0xc8>)
 800151c:	f003 fc06 	bl	8004d2c <HAL_DMA_DeInit>
  HAL_SPI_DeInit(&hspi2);
 8001520:	4820      	ldr	r0, [pc, #128]	; (80015a4 <main+0xcc>)
 8001522:	f007 f9b4 	bl	800888e <HAL_SPI_DeInit>
  MX_DMA_Init();
 8001526:	f000 faf5 	bl	8001b14 <MX_DMA_Init>
  MX_SPI2_Init();
 800152a:	f000 f9bf 	bl	80018ac <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800152e:	f00b f94d 	bl	800c7cc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8001532:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <main+0xd0>)
 8001534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001538:	200a      	movs	r0, #10
 800153a:	f00b fa3e 	bl	800c9ba <osMessageQueueNew>
 800153e:	4603      	mov	r3, r0
 8001540:	4a1a      	ldr	r2, [pc, #104]	; (80015ac <main+0xd4>)
 8001542:	6013      	str	r3, [r2, #0]

  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (1, sizeof(LCDQUEUE), &LCDQueue_attributes);
 8001544:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <main+0xd8>)
 8001546:	2164      	movs	r1, #100	; 0x64
 8001548:	2001      	movs	r0, #1
 800154a:	f00b fa36 	bl	800c9ba <osMessageQueueNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <main+0xdc>)
 8001552:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001554:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <main+0xe0>)
 8001556:	2100      	movs	r1, #0
 8001558:	4818      	ldr	r0, [pc, #96]	; (80015bc <main+0xe4>)
 800155a:	f00b f981 	bl	800c860 <osThreadNew>
 800155e:	4603      	mov	r3, r0
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <main+0xe8>)
 8001562:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 8001564:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <main+0xec>)
 8001566:	2100      	movs	r1, #0
 8001568:	4817      	ldr	r0, [pc, #92]	; (80015c8 <main+0xf0>)
 800156a:	f00b f979 	bl	800c860 <osThreadNew>
 800156e:	4603      	mov	r3, r0
 8001570:	4a16      	ldr	r2, [pc, #88]	; (80015cc <main+0xf4>)
 8001572:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 8001574:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <main+0xf8>)
 8001576:	2100      	movs	r1, #0
 8001578:	4816      	ldr	r0, [pc, #88]	; (80015d4 <main+0xfc>)
 800157a:	f00b f971 	bl	800c860 <osThreadNew>
 800157e:	4603      	mov	r3, r0
 8001580:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <main+0x100>)
 8001582:	6013      	str	r3, [r2, #0]

  /* creation of RTC */
  RTCHandle = osThreadNew(Start_RTC, NULL, &RTC_attributes);
 8001584:	4a15      	ldr	r2, [pc, #84]	; (80015dc <main+0x104>)
 8001586:	2100      	movs	r1, #0
 8001588:	4815      	ldr	r0, [pc, #84]	; (80015e0 <main+0x108>)
 800158a:	f00b f969 	bl	800c860 <osThreadNew>
 800158e:	4603      	mov	r3, r0
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <main+0x10c>)
 8001592:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001594:	f00b f93e 	bl	800c814 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001598:	e7fe      	b.n	8001598 <main+0xc0>
 800159a:	bf00      	nop
 800159c:	20008a70 	.word	0x20008a70
 80015a0:	20009650 	.word	0x20009650
 80015a4:	200056b4 	.word	0x200056b4
 80015a8:	080139e0 	.word	0x080139e0
 80015ac:	200061ac 	.word	0x200061ac
 80015b0:	080139f8 	.word	0x080139f8
 80015b4:	20008b04 	.word	0x20008b04
 80015b8:	08013950 	.word	0x08013950
 80015bc:	08001e5d 	.word	0x08001e5d
 80015c0:	2000560c 	.word	0x2000560c
 80015c4:	08013974 	.word	0x08013974
 80015c8:	08001e71 	.word	0x08001e71
 80015cc:	20009534 	.word	0x20009534
 80015d0:	08013998 	.word	0x08013998
 80015d4:	080020ed 	.word	0x080020ed
 80015d8:	20008b00 	.word	0x20008b00
 80015dc:	080139bc 	.word	0x080139bc
 80015e0:	08002149 	.word	0x08002149
 80015e4:	200096f8 	.word	0x200096f8

080015e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b094      	sub	sp, #80	; 0x50
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	2230      	movs	r2, #48	; 0x30
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00f f9ff 	bl	80109fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <SystemClock_Config+0xcc>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a27      	ldr	r2, [pc, #156]	; (80016b4 <SystemClock_Config+0xcc>)
 8001616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <SystemClock_Config+0xcc>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <SystemClock_Config+0xd0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <SystemClock_Config+0xd0>)
 8001632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <SystemClock_Config+0xd0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001644:	2301      	movs	r3, #1
 8001646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164e:	2302      	movs	r3, #2
 8001650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001658:	2308      	movs	r3, #8
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800165c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001662:	2302      	movs	r3, #2
 8001664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001666:	2307      	movs	r3, #7
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4618      	mov	r0, r3
 8001670:	f006 fbc8 	bl	8007e04 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800167a:	f001 fde9 	bl	8003250 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	2302      	movs	r3, #2
 8001684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800168a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2105      	movs	r1, #5
 800169c:	4618      	mov	r0, r3
 800169e:	f006 fe29 	bl	80082f4 <HAL_RCC_ClockConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016a8:	f001 fdd2 	bl	8003250 <Error_Handler>
  }
}
 80016ac:	bf00      	nop
 80016ae:	3750      	adds	r7, #80	; 0x50
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <MX_ADC1_Init+0x98>)
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <MX_ADC1_Init+0x9c>)
 80016d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <MX_ADC1_Init+0x98>)
 80016d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_ADC1_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <MX_ADC1_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <MX_ADC1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <MX_ADC1_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_ADC1_Init+0x98>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <MX_ADC1_Init+0x98>)
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <MX_ADC1_Init+0xa0>)
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_ADC1_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_ADC1_Init+0x98>)
 800170a:	2201      	movs	r2, #1
 800170c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_ADC1_Init+0x98>)
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_ADC1_Init+0x98>)
 8001718:	2201      	movs	r2, #1
 800171a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <MX_ADC1_Init+0x98>)
 800171e:	f002 fee1 	bl	80044e4 <HAL_ADC_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001728:	f001 fd92 	bl	8003250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800172c:	2309      	movs	r3, #9
 800172e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001730:	2301      	movs	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_ADC1_Init+0x98>)
 800173e:	f002 ff15 	bl	800456c <HAL_ADC_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001748:	f001 fd82 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20008ab8 	.word	0x20008ab8
 8001758:	40012000 	.word	0x40012000
 800175c:	0f000001 	.word	0x0f000001

08001760 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <MX_I2C2_Init+0x54>)
 8001768:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_I2C2_Init+0x50>)
 800176c:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_I2C2_Init+0x58>)
 800176e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_I2C2_Init+0x50>)
 800177e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001782:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_I2C2_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_I2C2_Init+0x50>)
 800179e:	f004 f86f 	bl	8005880 <HAL_I2C_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017a8:	f001 fd52 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200057a4 	.word	0x200057a4
 80017b4:	40005800 	.word	0x40005800
 80017b8:	000186a0 	.word	0x000186a0

080017bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_I2C3_Init+0x50>)
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <MX_I2C3_Init+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_I2C3_Init+0x50>)
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <MX_I2C3_Init+0x58>)
 80017ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_I2C3_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_I2C3_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_I2C3_Init+0x50>)
 80017da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_I2C3_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_I2C3_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_I2C3_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_I2C3_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_I2C3_Init+0x50>)
 80017fa:	f004 f841 	bl	8005880 <HAL_I2C_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001804:	f001 fd24 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20005610 	.word	0x20005610
 8001810:	40005c00 	.word	0x40005c00
 8001814:	00061a80 	.word	0x00061a80

08001818 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_RNG_Init+0x20>)
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <MX_RNG_Init+0x24>)
 8001820:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_RNG_Init+0x20>)
 8001824:	f006 ff80 	bl	8008728 <HAL_RNG_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800182e:	f001 fd0f 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20009524 	.word	0x20009524
 800183c:	50060800 	.word	0x50060800

08001840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <MX_SPI1_Init+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_SPI1_Init+0x64>)
 800184c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_SPI1_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_SPI1_Init+0x64>)
 800186c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001874:	2220      	movs	r2, #32
 8001876:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <MX_SPI1_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_SPI1_Init+0x64>)
 800188c:	220a      	movs	r2, #10
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001892:	f006 ff73 	bl	800877c <HAL_SPI_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800189c:	f001 fcd8 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20009538 	.word	0x20009538
 80018a8:	40013000 	.word	0x40013000

080018ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_SPI2_Init+0x64>)
 80018b2:	4a18      	ldr	r2, [pc, #96]	; (8001914 <MX_SPI2_Init+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <MX_SPI2_Init+0x64>)
 80018b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_SPI2_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_SPI2_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_SPI2_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_SPI2_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_SPI2_Init+0x64>)
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_SPI2_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <MX_SPI2_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_SPI2_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <MX_SPI2_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_SPI2_Init+0x64>)
 80018f8:	220a      	movs	r2, #10
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_SPI2_Init+0x64>)
 80018fe:	f006 ff3d 	bl	800877c <HAL_SPI_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001908:	f001 fca2 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200056b4 	.word	0x200056b4
 8001914:	40003800 	.word	0x40003800

08001918 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2224      	movs	r2, #36	; 0x24
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f00f f867 	bl	80109fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <MX_TIM1_Init+0xa8>)
 8001936:	4a23      	ldr	r2, [pc, #140]	; (80019c4 <MX_TIM1_Init+0xac>)
 8001938:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MX_TIM1_Init+0xa8>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_TIM1_Init+0xa8>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_TIM1_Init+0xa8>)
 8001948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_TIM1_Init+0xa8>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MX_TIM1_Init+0xa8>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_TIM1_Init+0xa8>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001960:	2301      	movs	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001968:	2301      	movs	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001978:	2301      	movs	r3, #1
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	480d      	ldr	r0, [pc, #52]	; (80019c0 <MX_TIM1_Init+0xa8>)
 800198c:	f007 f9b5 	bl	8008cfa <HAL_TIM_Encoder_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001996:	f001 fc5b 	bl	8003250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <MX_TIM1_Init+0xa8>)
 80019a8:	f007 fe32 	bl	8009610 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80019b2:	f001 fc4d 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	3730      	adds	r7, #48	; 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200092d8 	.word	0x200092d8
 80019c4:	40010000 	.word	0x40010000

080019c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019e6:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <MX_TIM3_Init+0x98>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019ec:	f240 3247 	movw	r2, #839	; 0x347
 80019f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019fa:	220a      	movs	r2, #10
 80019fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a06:	2280      	movs	r2, #128	; 0x80
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a0a:	4814      	ldr	r0, [pc, #80]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a0c:	f007 f886 	bl	8008b1c <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a16:	f001 fc1b 	bl	8003250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	4619      	mov	r1, r3
 8001a26:	480d      	ldr	r0, [pc, #52]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a28:	f007 fba3 	bl	8009172 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a32:	f001 fc0d 	bl	8003250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a3e:	463b      	mov	r3, r7
 8001a40:	4619      	mov	r1, r3
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a44:	f007 fde4 	bl	8009610 <HAL_TIMEx_MasterConfigSynchronization>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a4e:	f001 fbff 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20008a70 	.word	0x20008a70
 8001a60:	40000400 	.word	0x40000400

08001a64 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <MX_TIM7_Init+0x64>)
 8001a74:	4a15      	ldr	r2, [pc, #84]	; (8001acc <MX_TIM7_Init+0x68>)
 8001a76:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_TIM7_Init+0x64>)
 8001a7a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001a7e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_TIM7_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <MX_TIM7_Init+0x64>)
 8001a88:	2263      	movs	r2, #99	; 0x63
 8001a8a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_TIM7_Init+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <MX_TIM7_Init+0x64>)
 8001a94:	f007 f842 	bl	8008b1c <HAL_TIM_Base_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a9e:	f001 fbd7 	bl	8003250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4619      	mov	r1, r3
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <MX_TIM7_Init+0x64>)
 8001ab0:	f007 fdae 	bl	8009610 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001aba:	f001 fbc9 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200096b0 	.word	0x200096b0
 8001acc:	40001400 	.word	0x40001400

08001ad0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <MX_TIM10_Init+0x3c>)
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <MX_TIM10_Init+0x40>)
 8001ad8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <MX_TIM10_Init+0x3c>)
 8001adc:	22a7      	movs	r2, #167	; 0xa7
 8001ade:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <MX_TIM10_Init+0x3c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <MX_TIM10_Init+0x3c>)
 8001ae8:	2209      	movs	r2, #9
 8001aea:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <MX_TIM10_Init+0x3c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <MX_TIM10_Init+0x3c>)
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_TIM10_Init+0x3c>)
 8001afa:	f007 f80f 	bl	8008b1c <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8001b04:	f001 fba4 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000575c 	.word	0x2000575c
 8001b10:	40014400 	.word	0x40014400

08001b14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_DMA_Init+0x3c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <MX_DMA_Init+0x3c>)
 8001b24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_DMA_Init+0x3c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2105      	movs	r1, #5
 8001b3a:	200f      	movs	r0, #15
 8001b3c:	f003 f810 	bl	8004b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001b40:	200f      	movs	r0, #15
 8001b42:	f003 f829 	bl	8004b98 <HAL_NVIC_EnableIRQ>

}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	; 0x30
 8001b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	4bb5      	ldr	r3, [pc, #724]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4ab4      	ldr	r2, [pc, #720]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001b74:	f043 0310 	orr.w	r3, r3, #16
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4bb2      	ldr	r3, [pc, #712]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4bae      	ldr	r3, [pc, #696]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4aad      	ldr	r2, [pc, #692]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4bab      	ldr	r3, [pc, #684]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4ba7      	ldr	r3, [pc, #668]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4aa6      	ldr	r2, [pc, #664]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4ba4      	ldr	r3, [pc, #656]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4ba0      	ldr	r3, [pc, #640]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a9f      	ldr	r2, [pc, #636]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b9d      	ldr	r3, [pc, #628]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b99      	ldr	r3, [pc, #612]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a98      	ldr	r2, [pc, #608]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b96      	ldr	r3, [pc, #600]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	4b92      	ldr	r3, [pc, #584]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a91      	ldr	r2, [pc, #580]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b8f      	ldr	r3, [pc, #572]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001c12:	2200      	movs	r2, #0
 8001c14:	217c      	movs	r1, #124	; 0x7c
 8001c16:	488c      	ldr	r0, [pc, #560]	; (8001e48 <MX_GPIO_Init+0x2f4>)
 8001c18:	f003 fdf4 	bl	8005804 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2101      	movs	r1, #1
 8001c20:	488a      	ldr	r0, [pc, #552]	; (8001e4c <MX_GPIO_Init+0x2f8>)
 8001c22:	f003 fdef 	bl	8005804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2142      	movs	r1, #66	; 0x42
 8001c2a:	4888      	ldr	r0, [pc, #544]	; (8001e4c <MX_GPIO_Init+0x2f8>)
 8001c2c:	f003 fdea 	bl	8005804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c30:	2200      	movs	r2, #0
 8001c32:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001c36:	4886      	ldr	r0, [pc, #536]	; (8001e50 <MX_GPIO_Init+0x2fc>)
 8001c38:	f003 fde4 	bl	8005804 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001c42:	4884      	ldr	r0, [pc, #528]	; (8001e54 <MX_GPIO_Init+0x300>)
 8001c44:	f003 fdde 	bl	8005804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 8001c48:	231c      	movs	r3, #28
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	487a      	ldr	r0, [pc, #488]	; (8001e48 <MX_GPIO_Init+0x2f4>)
 8001c60:	f003 fb20 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 8001c64:	2360      	movs	r3, #96	; 0x60
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4873      	ldr	r0, [pc, #460]	; (8001e48 <MX_GPIO_Init+0x2f4>)
 8001c7c:	f003 fb12 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	486d      	ldr	r0, [pc, #436]	; (8001e4c <MX_GPIO_Init+0x2f8>)
 8001c96:	f003 fb05 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4866      	ldr	r0, [pc, #408]	; (8001e4c <MX_GPIO_Init+0x2f8>)
 8001cb2:	f003 faf7 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	485e      	ldr	r0, [pc, #376]	; (8001e4c <MX_GPIO_Init+0x2f8>)
 8001cd2:	f003 fae7 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cda:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	485b      	ldr	r0, [pc, #364]	; (8001e58 <MX_GPIO_Init+0x304>)
 8001cec:	f003 fada 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001cf0:	2310      	movs	r3, #16
 8001cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d00:	2306      	movs	r3, #6
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4853      	ldr	r0, [pc, #332]	; (8001e58 <MX_GPIO_Init+0x304>)
 8001d0c:	f003 faca 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001d10:	2304      	movs	r3, #4
 8001d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	484c      	ldr	r0, [pc, #304]	; (8001e54 <MX_GPIO_Init+0x300>)
 8001d24:	f003 fabe 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4842      	ldr	r0, [pc, #264]	; (8001e48 <MX_GPIO_Init+0x2f4>)
 8001d40:	f003 fab0 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001d44:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001d48:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	483c      	ldr	r0, [pc, #240]	; (8001e50 <MX_GPIO_Init+0x2fc>)
 8001d5e:	f003 faa1 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 8001d62:	2340      	movs	r3, #64	; 0x40
 8001d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	4619      	mov	r1, r3
 8001d78:	4834      	ldr	r0, [pc, #208]	; (8001e4c <MX_GPIO_Init+0x2f8>)
 8001d7a:	f003 fa93 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d7e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d90:	2306      	movs	r3, #6
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	482c      	ldr	r0, [pc, #176]	; (8001e4c <MX_GPIO_Init+0x2f8>)
 8001d9c:	f003 fa82 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001da0:	2320      	movs	r3, #32
 8001da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	4619      	mov	r1, r3
 8001db2:	4827      	ldr	r0, [pc, #156]	; (8001e50 <MX_GPIO_Init+0x2fc>)
 8001db4:	f003 fa76 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001db8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbe:	2312      	movs	r3, #18
 8001dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dca:	2304      	movs	r3, #4
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	481f      	ldr	r0, [pc, #124]	; (8001e54 <MX_GPIO_Init+0x300>)
 8001dd6:	f003 fa65 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001dda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	4818      	ldr	r0, [pc, #96]	; (8001e54 <MX_GPIO_Init+0x300>)
 8001df4:	f003 fa56 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480f      	ldr	r0, [pc, #60]	; (8001e48 <MX_GPIO_Init+0x2f4>)
 8001e0c:	f003 fa4a 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001e10:	2302      	movs	r3, #2
 8001e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	4808      	ldr	r0, [pc, #32]	; (8001e48 <MX_GPIO_Init+0x2f4>)
 8001e26:	f003 fa3d 	bl	80052a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2105      	movs	r1, #5
 8001e2e:	2028      	movs	r0, #40	; 0x28
 8001e30:	f002 fe96 	bl	8004b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e34:	2028      	movs	r0, #40	; 0x28
 8001e36:	f002 feaf 	bl	8004b98 <HAL_NVIC_EnableIRQ>

}
 8001e3a:	bf00      	nop
 8001e3c:	3730      	adds	r7, #48	; 0x30
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020000 	.word	0x40020000

08001e5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001e64:	f00d ff56 	bl	800fd14 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8001e68:	200a      	movs	r0, #10
 8001e6a:	f00a fd8b 	bl	800c984 <osDelay>
 8001e6e:	e7fb      	b.n	8001e68 <StartDefaultTask+0xc>

08001e70 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e72:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8001e7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e80:	f00a fd80 	bl	800c984 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8001e84:	4a90      	ldr	r2, [pc, #576]	; (80020c8 <Start_Show_Resources+0x258>)
 8001e86:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	8019      	strh	r1, [r3, #0]
 8001e90:	3302      	adds	r3, #2
 8001e92:	0c12      	lsrs	r2, r2, #16
 8001e94:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8001e96:	232d      	movs	r3, #45	; 0x2d
 8001e98:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  char buff[10] = {0};
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8001ea2:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8001eac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f00e fd9f 	bl	80109fa <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8001ebc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe f985 	bl	80001d0 <strlen>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a7e      	ldr	r2, [pc, #504]	; (80020cc <Start_Show_Resources+0x25c>)
 8001ed2:	461d      	mov	r5, r3
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed8:	6028      	str	r0, [r5, #0]
 8001eda:	6069      	str	r1, [r5, #4]
 8001edc:	60aa      	str	r2, [r5, #8]
 8001ede:	60eb      	str	r3, [r5, #12]
 8001ee0:	cc03      	ldmia	r4!, {r0, r1}
 8001ee2:	6128      	str	r0, [r5, #16]
 8001ee4:	6169      	str	r1, [r5, #20]
 8001ee6:	7823      	ldrb	r3, [r4, #0]
 8001ee8:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8001eea:	f00d fe4b 	bl	800fb84 <xPortGetFreeHeapSize>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b77      	ldr	r3, [pc, #476]	; (80020d0 <Start_Show_Resources+0x260>)
 8001ef4:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8001ef6:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <Start_Show_Resources+0x260>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8001efe:	220a      	movs	r2, #10
 8001f00:	4618      	mov	r0, r3
 8001f02:	f00e fd67 	bl	80109d4 <itoa>
	  strcat(msg.Buf, buff);
 8001f06:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8001f0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00f fb1c 	bl	801154e <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8001f16:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8001f1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f00f fb14 	bl	801154e <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 8001f26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe f950 	bl	80001d0 <strlen>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a66      	ldr	r2, [pc, #408]	; (80020d4 <Start_Show_Resources+0x264>)
 8001f3c:	4614      	mov	r4, r2
 8001f3e:	469c      	mov	ip, r3
 8001f40:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001f44:	4665      	mov	r5, ip
 8001f46:	4626      	mov	r6, r4
 8001f48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f4a:	6028      	str	r0, [r5, #0]
 8001f4c:	6069      	str	r1, [r5, #4]
 8001f4e:	60aa      	str	r2, [r5, #8]
 8001f50:	60eb      	str	r3, [r5, #12]
 8001f52:	3410      	adds	r4, #16
 8001f54:	f10c 0c10 	add.w	ip, ip, #16
 8001f58:	4574      	cmp	r4, lr
 8001f5a:	d1f3      	bne.n	8001f44 <Start_Show_Resources+0xd4>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8001f5c:	485e      	ldr	r0, [pc, #376]	; (80020d8 <Start_Show_Resources+0x268>)
 8001f5e:	f00c fdd5 	bl	800eb0c <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8001f68:	e004      	b.n	8001f74 <Start_Show_Resources+0x104>
	  {
	  	buffer_size ++;
 8001f6a:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8001f74:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8001f78:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f7c:	5cd3      	ldrb	r3, [r2, r3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f3      	bne.n	8001f6a <Start_Show_Resources+0xfa>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8001f8e:	e011      	b.n	8001fb4 <Start_Show_Resources+0x144>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8001f90:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8001f94:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8001f98:	4413      	add	r3, r2
 8001f9a:	494f      	ldr	r1, [pc, #316]	; (80020d8 <Start_Show_Resources+0x268>)
 8001f9c:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8001fa0:	440a      	add	r2, r1
 8001fa2:	7811      	ldrb	r1, [r2, #0]
 8001fa4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fa8:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8001faa:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8001fb4:	4a48      	ldr	r2, [pc, #288]	; (80020d8 <Start_Show_Resources+0x268>)
 8001fb6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8001fba:	4413      	add	r3, r2
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1e6      	bne.n	8001f90 <Start_Show_Resources+0x120>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8001fc2:	4b46      	ldr	r3, [pc, #280]	; (80020dc <Start_Show_Resources+0x26c>)
 8001fc4:	f207 4434 	addw	r4, r7, #1076	; 0x434
 8001fc8:	461d      	mov	r5, r3
 8001fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fd2:	c403      	stmia	r4!, {r0, r1}
 8001fd4:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	4a41      	ldr	r2, [pc, #260]	; (80020e0 <Start_Show_Resources+0x270>)
 8001fdc:	461c      	mov	r4, r3
 8001fde:	4615      	mov	r5, r2
 8001fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fe8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fec:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 8001ff0:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8001ff4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f00f faa7 	bl	801154e <strcat>
	  strcat(msg.Buf, str_head_2);
 8002000:	f107 020c 	add.w	r2, r7, #12
 8002004:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f00f fa9f 	bl	801154e <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8002010:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002014:	2100      	movs	r1, #0
 8002016:	4830      	ldr	r0, [pc, #192]	; (80020d8 <Start_Show_Resources+0x268>)
 8002018:	f00e fcef 	bl	80109fa <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 800201c:	482e      	ldr	r0, [pc, #184]	; (80020d8 <Start_Show_Resources+0x268>)
 800201e:	f00c fe0b 	bl	800ec38 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 8002022:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002026:	b29a      	uxth	r2, r3
 8002028:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 800202c:	4413      	add	r3, r2
 800202e:	b29b      	uxth	r3, r3
 8002030:	3340      	adds	r3, #64	; 0x40
 8002032:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800203c:	e011      	b.n	8002062 <Start_Show_Resources+0x1f2>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 800203e:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002042:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002046:	4413      	add	r3, r2
 8002048:	4923      	ldr	r1, [pc, #140]	; (80020d8 <Start_Show_Resources+0x268>)
 800204a:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800204e:	440a      	add	r2, r1
 8002050:	7811      	ldrb	r1, [r2, #0]
 8002052:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002056:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002058:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800205c:	3301      	adds	r3, #1
 800205e:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002062:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <Start_Show_Resources+0x268>)
 8002064:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e6      	bne.n	800203e <Start_Show_Resources+0x1ce>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8002070:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe f8ab 	bl	80001d0 <strlen>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002082:	4413      	add	r3, r2
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <Start_Show_Resources+0x274>)
 8002086:	4614      	mov	r4, r2
 8002088:	469c      	mov	ip, r3
 800208a:	f104 0e20 	add.w	lr, r4, #32
 800208e:	4665      	mov	r5, ip
 8002090:	4626      	mov	r6, r4
 8002092:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002094:	6028      	str	r0, [r5, #0]
 8002096:	6069      	str	r1, [r5, #4]
 8002098:	60aa      	str	r2, [r5, #8]
 800209a:	60eb      	str	r3, [r5, #12]
 800209c:	3410      	adds	r4, #16
 800209e:	f10c 0c10 	add.w	ip, ip, #16
 80020a2:	4574      	cmp	r4, lr
 80020a4:	d1f3      	bne.n	800208e <Start_Show_Resources+0x21e>
 80020a6:	4665      	mov	r5, ip
 80020a8:	4623      	mov	r3, r4
 80020aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020ac:	6028      	str	r0, [r5, #0]
 80020ae:	6069      	str	r1, [r5, #4]
 80020b0:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <Start_Show_Resources+0x278>)
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020be:	2200      	movs	r2, #0
 80020c0:	f00a fcee 	bl	800caa0 <osMessageQueuePut>
  {
 80020c4:	e6da      	b.n	8001e7c <Start_Show_Resources+0xc>
 80020c6:	bf00      	nop
 80020c8:	08013788 	.word	0x08013788
 80020cc:	0801370c 	.word	0x0801370c
 80020d0:	2000076c 	.word	0x2000076c
 80020d4:	08013728 	.word	0x08013728
 80020d8:	20000384 	.word	0x20000384
 80020dc:	0801378c 	.word	0x0801378c
 80020e0:	080137a8 	.word	0x080137a8
 80020e4:	0801375c 	.word	0x0801375c
 80020e8:	200061ac 	.word	0x200061ac

080020ec <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <Start_UART_Task+0x58>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	f107 010c 	add.w	r1, r7, #12
 8002100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002104:	2200      	movs	r2, #0
 8002106:	f00a fd2b 	bl	800cb60 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002110:	e004      	b.n	800211c <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8002112:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002116:	3301      	adds	r3, #1
 8002118:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 800211c:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002120:	f107 020c 	add.w	r2, r7, #12
 8002124:	5cd3      	ldrb	r3, [r2, r3]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f3      	bne.n	8002112 <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 800212a:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f00d feab 	bl	800fe90 <CDC_Transmit_FS>
    osDelay(1);
 800213a:	2001      	movs	r0, #1
 800213c:	f00a fc22 	bl	800c984 <osDelay>
  {
 8002140:	e7da      	b.n	80020f8 <Start_UART_Task+0xc>
 8002142:	bf00      	nop
 8002144:	200061ac 	.word	0x200061ac

08002148 <Start_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RTC */
void Start_RTC(void *argument)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b0a0      	sub	sp, #128	; 0x80
 800214c:	af04      	add	r7, sp, #16
 800214e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RTC */
  /* Infinite loop */

	osDelay(1000);
 8002150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002154:	f00a fc16 	bl	800c984 <osDelay>

	// For resd time
	char time[20] = {0};
 8002158:	2300      	movs	r3, #0
 800215a:	65bb      	str	r3, [r7, #88]	; 0x58
 800215c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
	char date[40] = {0};
 800216a:	2300      	movs	r3, #0
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
 800216e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002172:	2224      	movs	r2, #36	; 0x24
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f00e fc3f 	bl	80109fa <memset>
	char time_buf[10] = {0};
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
 8002180:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	809a      	strh	r2, [r3, #4]
	char time_buf_2[10] = {0};
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	809a      	strh	r2, [r3, #4]

	uint8_t seconds = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	75fb      	strb	r3, [r7, #23]
	uint8_t minutes = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	75bb      	strb	r3, [r7, #22]
	uint8_t hours = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	757b      	strb	r3, [r7, #21]
	uint8_t day = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	753b      	strb	r3, [r7, #20]
	uint8_t date_day = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	74fb      	strb	r3, [r7, #19]
	uint8_t mounth = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	74bb      	strb	r3, [r7, #18]
	uint8_t year = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	747b      	strb	r3, [r7, #17]
	uint8_t status = 9;
 80021b4:	2309      	movs	r3, #9
 80021b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	//

	oled_init();
 80021ba:	f002 f891 	bl	80042e0 <oled_init>
	oled_update();
 80021be:	f002 f83b 	bl	8004238 <oled_update>
	ds3231_I2C_init();
 80021c2:	f7fe fef5 	bl	8000fb0 <ds3231_I2C_init>

	// Encoder
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80021c6:	213c      	movs	r1, #60	; 0x3c
 80021c8:	48c9      	ldr	r0, [pc, #804]	; (80024f0 <Start_RTC+0x3a8>)
 80021ca:	f006 fe3c 	bl	8008e46 <HAL_TIM_Encoder_Start>
	int32_t prevCounter = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
	//

	for(;;)
	{
		switch (klick)
 80021d2:	4bc8      	ldr	r3, [pc, #800]	; (80024f4 <Start_RTC+0x3ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b0f      	cmp	r3, #15
 80021d8:	d8fb      	bhi.n	80021d2 <Start_RTC+0x8a>
 80021da:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <Start_RTC+0x98>)
 80021dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e0:	08002221 	.word	0x08002221
 80021e4:	08002851 	.word	0x08002851
 80021e8:	080021d3 	.word	0x080021d3
 80021ec:	080029bb 	.word	0x080029bb
 80021f0:	080021d3 	.word	0x080021d3
 80021f4:	08002af7 	.word	0x08002af7
 80021f8:	080021d3 	.word	0x080021d3
 80021fc:	08002c65 	.word	0x08002c65
 8002200:	080021d3 	.word	0x080021d3
 8002204:	08002dab 	.word	0x08002dab
 8002208:	080021d3 	.word	0x080021d3
 800220c:	08002efb 	.word	0x08002efb
 8002210:	080021d3 	.word	0x080021d3
 8002214:	08003021 	.word	0x08003021
 8002218:	080021d3 	.word	0x080021d3
 800221c:	08003173 	.word	0x08003173
		{
			case 0:					// Read time and data from DS3231

				strcat(time_buf, "TIME");
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4618      	mov	r0, r3
 8002226:	f7fd ffd3 	bl	80001d0 <strlen>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002232:	4413      	add	r3, r2
 8002234:	4ab0      	ldr	r2, [pc, #704]	; (80024f8 <Start_RTC+0x3b0>)
 8002236:	6810      	ldr	r0, [r2, #0]
 8002238:	6018      	str	r0, [r3, #0]
 800223a:	7912      	ldrb	r2, [r2, #4]
 800223c:	711a      	strb	r2, [r3, #4]
				graphics_text(40, 10, 3, time_buf);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	2203      	movs	r2, #3
 8002244:	210a      	movs	r1, #10
 8002246:	2028      	movs	r0, #40	; 0x28
 8002248:	f001 ff42 	bl	80040d0 <graphics_text>
				oled_update();
 800224c:	f001 fff4 	bl	8004238 <oled_update>
				osDelay(2000);
 8002250:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002254:	f00a fb96 	bl	800c984 <osDelay>
				clear();
 8002258:	f001 fd86 	bl	8003d68 <clear>
				oled_update();
 800225c:	f001 ffec 	bl	8004238 <oled_update>

				while(klick == 0)
 8002260:	e2ef      	b.n	8002842 <Start_RTC+0x6fa>
				{
					memset(time, 0, sizeof(time));
 8002262:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002266:	2214      	movs	r2, #20
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f00e fbc5 	bl	80109fa <memset>
					memset(date, 0, sizeof(date));
 8002270:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002274:	2228      	movs	r2, #40	; 0x28
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f00e fbbe 	bl	80109fa <memset>
					memset(time_buf, 0, sizeof(time_buf));
 800227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002282:	220a      	movs	r2, #10
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f00e fbb7 	bl	80109fa <memset>
					memset(time_buf_2, 0, sizeof(time_buf_2));
 800228c:	f107 0318 	add.w	r3, r7, #24
 8002290:	220a      	movs	r2, #10
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00e fbb0 	bl	80109fa <memset>

					// 1. Read time from RTS
					// Red status (Detect DS3231)
					uint8_t buff= 0;
 800229a:	2300      	movs	r3, #0
 800229c:	72fb      	strb	r3, [r7, #11]
					status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	2301      	movs	r3, #1
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	f107 030b 	add.w	r3, r7, #11
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2301      	movs	r3, #1
 80022b0:	2200      	movs	r2, #0
 80022b2:	21d0      	movs	r1, #208	; 0xd0
 80022b4:	4891      	ldr	r0, [pc, #580]	; (80024fc <Start_RTC+0x3b4>)
 80022b6:	f003 fe1f 	bl	8005ef8 <HAL_I2C_Mem_Read>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if(status != HAL_OK )								// If DS3231 doesen'e detect
 80022c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d050      	beq.n	800236a <Start_RTC+0x222>
					{
						clear();
 80022c8:	f001 fd4e 	bl	8003d68 <clear>
						while(status != HAL_OK)							// If ERROR
 80022cc:	e046      	b.n	800235c <Start_RTC+0x214>
						{
							strcat(time_buf, "RTC ERROR");
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fd ff7c 	bl	80001d0 <strlen>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e0:	4413      	add	r3, r2
 80022e2:	4987      	ldr	r1, [pc, #540]	; (8002500 <Start_RTC+0x3b8>)
 80022e4:	461a      	mov	r2, r3
 80022e6:	460b      	mov	r3, r1
 80022e8:	cb03      	ldmia	r3!, {r0, r1}
 80022ea:	6010      	str	r0, [r2, #0]
 80022ec:	6051      	str	r1, [r2, #4]
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	8113      	strh	r3, [r2, #8]
							graphics_text(8, 5, 3, time_buf);
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	2203      	movs	r2, #3
 80022f8:	2105      	movs	r1, #5
 80022fa:	2008      	movs	r0, #8
 80022fc:	f001 fee8 	bl	80040d0 <graphics_text>
							oled_update();
 8002300:	f001 ff9a 	bl	8004238 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002308:	220a      	movs	r2, #10
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f00e fb74 	bl	80109fa <memset>
							osDelay(300);
 8002312:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002316:	f00a fb35 	bl	800c984 <osDelay>

							invert_rectangle(0, 0, 128, 32);
 800231a:	2320      	movs	r3, #32
 800231c:	2280      	movs	r2, #128	; 0x80
 800231e:	2100      	movs	r1, #0
 8002320:	2000      	movs	r0, #0
 8002322:	f001 fcf3 	bl	8003d0c <invert_rectangle>
							oled_update();
 8002326:	f001 ff87 	bl	8004238 <oled_update>
							osDelay(300);
 800232a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800232e:	f00a fb29 	bl	800c984 <osDelay>

							clear();
 8002332:	f001 fd19 	bl	8003d68 <clear>
							oled_update();
 8002336:	f001 ff7f 	bl	8004238 <oled_update>

							status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 800233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	2301      	movs	r3, #1
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	f107 030b 	add.w	r3, r7, #11
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2301      	movs	r3, #1
 800234c:	2200      	movs	r2, #0
 800234e:	21d0      	movs	r1, #208	; 0xd0
 8002350:	486a      	ldr	r0, [pc, #424]	; (80024fc <Start_RTC+0x3b4>)
 8002352:	f003 fdd1 	bl	8005ef8 <HAL_I2C_Mem_Read>
 8002356:	4603      	mov	r3, r0
 8002358:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						while(status != HAL_OK)							// If ERROR
 800235c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1b4      	bne.n	80022ce <Start_RTC+0x186>
						}
						clear();
 8002364:	f001 fd00 	bl	8003d68 <clear>
 8002368:	e26b      	b.n	8002842 <Start_RTC+0x6fa>
					}

					else	// If all DS3231 detected, read time and date
					{
						ds3231_read(DS3231_REGISTER_SECONDS_DEFAULT, &seconds);
 800236a:	f107 0317 	add.w	r3, r7, #23
 800236e:	4619      	mov	r1, r3
 8002370:	2000      	movs	r0, #0
 8002372:	f7fe fe25 	bl	8000fc0 <ds3231_read>
						ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &minutes);
 8002376:	f107 0316 	add.w	r3, r7, #22
 800237a:	4619      	mov	r1, r3
 800237c:	2001      	movs	r0, #1
 800237e:	f7fe fe1f 	bl	8000fc0 <ds3231_read>
						ds3231_read(DS3231_REGISTER_HOURS_DEFAULT, &hours);
 8002382:	f107 0315 	add.w	r3, r7, #21
 8002386:	4619      	mov	r1, r3
 8002388:	2002      	movs	r0, #2
 800238a:	f7fe fe19 	bl	8000fc0 <ds3231_read>

						ds3231_read(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &day);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	2003      	movs	r0, #3
 8002396:	f7fe fe13 	bl	8000fc0 <ds3231_read>
						ds3231_read(DS3231_REGISTER_DATE_DEFAULT, &date_day);
 800239a:	f107 0313 	add.w	r3, r7, #19
 800239e:	4619      	mov	r1, r3
 80023a0:	2004      	movs	r0, #4
 80023a2:	f7fe fe0d 	bl	8000fc0 <ds3231_read>
						ds3231_read(DS3231_REGISTER_MONTH_DEFAULT, &mounth);
 80023a6:	f107 0312 	add.w	r3, r7, #18
 80023aa:	4619      	mov	r1, r3
 80023ac:	2005      	movs	r0, #5
 80023ae:	f7fe fe07 	bl	8000fc0 <ds3231_read>
						ds3231_read(DS3231_REGISTER_YEAR_DEFAULT, &year);
 80023b2:	f107 0311 	add.w	r3, r7, #17
 80023b6:	4619      	mov	r1, r3
 80023b8:	2006      	movs	r0, #6
 80023ba:	f7fe fe01 	bl	8000fc0 <ds3231_read>

						// Convert in string
						// Print minutes on OLED
						if(hours < 10)
 80023be:	7d7b      	ldrb	r3, [r7, #21]
 80023c0:	2b09      	cmp	r3, #9
 80023c2:	d835      	bhi.n	8002430 <Start_RTC+0x2e8>
						{
							memset(time_buf, 0, sizeof(time_buf));
 80023c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c8:	220a      	movs	r2, #10
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f00e fb14 	bl	80109fa <memset>
							sprintf(time_buf, "%c", '0');
 80023d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d6:	2230      	movs	r2, #48	; 0x30
 80023d8:	494a      	ldr	r1, [pc, #296]	; (8002504 <Start_RTC+0x3bc>)
 80023da:	4618      	mov	r0, r3
 80023dc:	f00f f854 	bl	8011488 <siprintf>
							sprintf(time_buf_2, "%d", hours);
 80023e0:	7d7b      	ldrb	r3, [r7, #21]
 80023e2:	461a      	mov	r2, r3
 80023e4:	f107 0318 	add.w	r3, r7, #24
 80023e8:	4947      	ldr	r1, [pc, #284]	; (8002508 <Start_RTC+0x3c0>)
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00f f84c 	bl	8011488 <siprintf>
							strcat(time_buf, time_buf_2);
 80023f0:	f107 0218 	add.w	r2, r7, #24
 80023f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f00f f8a7 	bl	801154e <strcat>
							strcat(time, time_buf);
 8002400:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002404:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f00f f89f 	bl	801154e <strcat>
							strcat(time, ":");
 8002410:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002414:	4618      	mov	r0, r3
 8002416:	f7fd fedb 	bl	80001d0 <strlen>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002422:	4413      	add	r3, r2
 8002424:	4939      	ldr	r1, [pc, #228]	; (800250c <Start_RTC+0x3c4>)
 8002426:	461a      	mov	r2, r3
 8002428:	460b      	mov	r3, r1
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	8013      	strh	r3, [r2, #0]
 800242e:	e025      	b.n	800247c <Start_RTC+0x334>
						}
						else
						{
							sprintf(time_buf, "%d", hours);
 8002430:	7d7b      	ldrb	r3, [r7, #21]
 8002432:	461a      	mov	r2, r3
 8002434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002438:	4933      	ldr	r1, [pc, #204]	; (8002508 <Start_RTC+0x3c0>)
 800243a:	4618      	mov	r0, r3
 800243c:	f00f f824 	bl	8011488 <siprintf>
							strcat(time, time_buf);
 8002440:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002444:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f00f f87f 	bl	801154e <strcat>
							strcat(time, ":");
 8002450:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002454:	4618      	mov	r0, r3
 8002456:	f7fd febb 	bl	80001d0 <strlen>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002462:	4413      	add	r3, r2
 8002464:	4929      	ldr	r1, [pc, #164]	; (800250c <Start_RTC+0x3c4>)
 8002466:	461a      	mov	r2, r3
 8002468:	460b      	mov	r3, r1
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 800246e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002472:	220a      	movs	r2, #10
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f00e fabf 	bl	80109fa <memset>
						}

						// Print minutes on OLED
						if(minutes < 10)
 800247c:	7dbb      	ldrb	r3, [r7, #22]
 800247e:	2b09      	cmp	r3, #9
 8002480:	d846      	bhi.n	8002510 <Start_RTC+0x3c8>
						{
							memset(time_buf, 0, sizeof(time_buf));
 8002482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002486:	220a      	movs	r2, #10
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f00e fab5 	bl	80109fa <memset>
							sprintf(time_buf, "%c", '0');
 8002490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002494:	2230      	movs	r2, #48	; 0x30
 8002496:	491b      	ldr	r1, [pc, #108]	; (8002504 <Start_RTC+0x3bc>)
 8002498:	4618      	mov	r0, r3
 800249a:	f00e fff5 	bl	8011488 <siprintf>
							sprintf(time_buf_2, "%d", minutes);
 800249e:	7dbb      	ldrb	r3, [r7, #22]
 80024a0:	461a      	mov	r2, r3
 80024a2:	f107 0318 	add.w	r3, r7, #24
 80024a6:	4918      	ldr	r1, [pc, #96]	; (8002508 <Start_RTC+0x3c0>)
 80024a8:	4618      	mov	r0, r3
 80024aa:	f00e ffed 	bl	8011488 <siprintf>
							strcat(time_buf, time_buf_2);
 80024ae:	f107 0218 	add.w	r2, r7, #24
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f00f f848 	bl	801154e <strcat>
							strcat(time, time_buf);
 80024be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80024c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00f f840 	bl	801154e <strcat>
							strcat(time, ":");
 80024ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd fe7c 	bl	80001d0 <strlen>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024e0:	4413      	add	r3, r2
 80024e2:	490a      	ldr	r1, [pc, #40]	; (800250c <Start_RTC+0x3c4>)
 80024e4:	461a      	mov	r2, r3
 80024e6:	460b      	mov	r3, r1
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	8013      	strh	r3, [r2, #0]
 80024ec:	e036      	b.n	800255c <Start_RTC+0x414>
 80024ee:	bf00      	nop
 80024f0:	200092d8 	.word	0x200092d8
 80024f4:	20000774 	.word	0x20000774
 80024f8:	080137d0 	.word	0x080137d0
 80024fc:	20005610 	.word	0x20005610
 8002500:	080137d8 	.word	0x080137d8
 8002504:	080137e4 	.word	0x080137e4
 8002508:	080137e8 	.word	0x080137e8
 800250c:	080137ec 	.word	0x080137ec
						}
						else
						{
							sprintf(time_buf, "%d", minutes);
 8002510:	7dbb      	ldrb	r3, [r7, #22]
 8002512:	461a      	mov	r2, r3
 8002514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002518:	49d7      	ldr	r1, [pc, #860]	; (8002878 <Start_RTC+0x730>)
 800251a:	4618      	mov	r0, r3
 800251c:	f00e ffb4 	bl	8011488 <siprintf>
							strcat(time, time_buf);
 8002520:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002524:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f00f f80f 	bl	801154e <strcat>
							strcat(time, ":");
 8002530:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd fe4b 	bl	80001d0 <strlen>
 800253a:	4603      	mov	r3, r0
 800253c:	461a      	mov	r2, r3
 800253e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002542:	4413      	add	r3, r2
 8002544:	49cd      	ldr	r1, [pc, #820]	; (800287c <Start_RTC+0x734>)
 8002546:	461a      	mov	r2, r3
 8002548:	460b      	mov	r3, r1
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 800254e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002552:	220a      	movs	r2, #10
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f00e fa4f 	bl	80109fa <memset>
						}

						// Print seconds on OLED
						if(seconds == 0)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <Start_RTC+0x422>
						{
							clear();
 8002562:	f001 fc01 	bl	8003d68 <clear>
							oled_update();
 8002566:	f001 fe67 	bl	8004238 <oled_update>
						}
						if(seconds < 10)
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b09      	cmp	r3, #9
 800256e:	d826      	bhi.n	80025be <Start_RTC+0x476>
						{
							memset(time_buf, 0, sizeof(time_buf));
 8002570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002574:	220a      	movs	r2, #10
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f00e fa3e 	bl	80109fa <memset>
							sprintf(time_buf, "%c", '0');
 800257e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002582:	2230      	movs	r2, #48	; 0x30
 8002584:	49be      	ldr	r1, [pc, #760]	; (8002880 <Start_RTC+0x738>)
 8002586:	4618      	mov	r0, r3
 8002588:	f00e ff7e 	bl	8011488 <siprintf>
							sprintf(time_buf_2, "%d", seconds);
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	461a      	mov	r2, r3
 8002590:	f107 0318 	add.w	r3, r7, #24
 8002594:	49b8      	ldr	r1, [pc, #736]	; (8002878 <Start_RTC+0x730>)
 8002596:	4618      	mov	r0, r3
 8002598:	f00e ff76 	bl	8011488 <siprintf>
							strcat(time_buf, time_buf_2);
 800259c:	f107 0218 	add.w	r2, r7, #24
 80025a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f00e ffd1 	bl	801154e <strcat>
							strcat(time, time_buf);
 80025ac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f00e ffc9 	bl	801154e <strcat>
 80025bc:	e016      	b.n	80025ec <Start_RTC+0x4a4>
						}
						else
						{
							sprintf(time_buf, "%d", seconds);
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	461a      	mov	r2, r3
 80025c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c6:	49ac      	ldr	r1, [pc, #688]	; (8002878 <Start_RTC+0x730>)
 80025c8:	4618      	mov	r0, r3
 80025ca:	f00e ff5d 	bl	8011488 <siprintf>
							strcat(time, time_buf);
 80025ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f00e ffb8 	bl	801154e <strcat>
							memset(time_buf, 0, sizeof(time_buf));
 80025de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e2:	220a      	movs	r2, #10
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00e fa07 	bl	80109fa <memset>
						}

						uint8_t second_line = seconds*2;
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
						line_h(5, second_line, 19, 2, add);
 80025f4:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 80025f8:	2301      	movs	r3, #1
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2302      	movs	r3, #2
 80025fe:	2213      	movs	r2, #19
 8002600:	2005      	movs	r0, #5
 8002602:	f001 fbd9 	bl	8003db8 <line_h>
//						line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode);
						//invert_rectangle(5, 15, second_line, 5);

						// Print date
						sprintf(time_buf, "%d", date_day);
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	461a      	mov	r2, r3
 800260a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260e:	499a      	ldr	r1, [pc, #616]	; (8002878 <Start_RTC+0x730>)
 8002610:	4618      	mov	r0, r3
 8002612:	f00e ff39 	bl	8011488 <siprintf>
						strcat(date, time_buf);
 8002616:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800261a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f00e ff94 	bl	801154e <strcat>
						strcat(date, ".");
 8002626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fdd0 	bl	80001d0 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	461a      	mov	r2, r3
 8002634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002638:	4413      	add	r3, r2
 800263a:	4992      	ldr	r1, [pc, #584]	; (8002884 <Start_RTC+0x73c>)
 800263c:	461a      	mov	r2, r3
 800263e:	460b      	mov	r3, r1
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	8013      	strh	r3, [r2, #0]
						memset(time_buf, 0, sizeof(time_buf));
 8002644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002648:	220a      	movs	r2, #10
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f00e f9d4 	bl	80109fa <memset>

						sprintf(time_buf, "%d", mounth);
 8002652:	7cbb      	ldrb	r3, [r7, #18]
 8002654:	461a      	mov	r2, r3
 8002656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265a:	4987      	ldr	r1, [pc, #540]	; (8002878 <Start_RTC+0x730>)
 800265c:	4618      	mov	r0, r3
 800265e:	f00e ff13 	bl	8011488 <siprintf>
						strcat(date, time_buf);
 8002662:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f00e ff6e 	bl	801154e <strcat>
						strcat(date, ".");
 8002672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd fdaa 	bl	80001d0 <strlen>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002684:	4413      	add	r3, r2
 8002686:	497f      	ldr	r1, [pc, #508]	; (8002884 <Start_RTC+0x73c>)
 8002688:	461a      	mov	r2, r3
 800268a:	460b      	mov	r3, r1
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	8013      	strh	r3, [r2, #0]
						memset(time_buf, 0, sizeof(time_buf));
 8002690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002694:	220a      	movs	r2, #10
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f00e f9ae 	bl	80109fa <memset>

						sprintf(time_buf, "%d", year);
 800269e:	7c7b      	ldrb	r3, [r7, #17]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a6:	4974      	ldr	r1, [pc, #464]	; (8002878 <Start_RTC+0x730>)
 80026a8:	4618      	mov	r0, r3
 80026aa:	f00e feed 	bl	8011488 <siprintf>
						strcat(date, "20");
 80026ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd fd8c 	bl	80001d0 <strlen>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026c0:	4413      	add	r3, r2
 80026c2:	4a71      	ldr	r2, [pc, #452]	; (8002888 <Start_RTC+0x740>)
 80026c4:	8811      	ldrh	r1, [r2, #0]
 80026c6:	7892      	ldrb	r2, [r2, #2]
 80026c8:	8019      	strh	r1, [r3, #0]
 80026ca:	709a      	strb	r2, [r3, #2]
						strcat(date, time_buf);
 80026cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f00e ff39 	bl	801154e <strcat>
						memset(time_buf, 0, sizeof(time_buf));
 80026dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e0:	220a      	movs	r2, #10
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f00e f988 	bl	80109fa <memset>

						// day
						switch (day)
 80026ea:	7d3b      	ldrb	r3, [r7, #20]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	f200 8093 	bhi.w	800281a <Start_RTC+0x6d2>
 80026f4:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <Start_RTC+0x5b4>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	08002719 	.word	0x08002719
 8002700:	0800273b 	.word	0x0800273b
 8002704:	08002761 	.word	0x08002761
 8002708:	0800278b 	.word	0x0800278b
 800270c:	080027b1 	.word	0x080027b1
 8002710:	080027d3 	.word	0x080027d3
 8002714:	080027f9 	.word	0x080027f9
						{
							case 1:
								strcat(date, " Monday");
 8002718:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd fd57 	bl	80001d0 <strlen>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800272a:	4413      	add	r3, r2
 800272c:	4957      	ldr	r1, [pc, #348]	; (800288c <Start_RTC+0x744>)
 800272e:	461a      	mov	r2, r3
 8002730:	460b      	mov	r3, r1
 8002732:	cb03      	ldmia	r3!, {r0, r1}
 8002734:	6010      	str	r0, [r2, #0]
 8002736:	6051      	str	r1, [r2, #4]
								break;
 8002738:	e06f      	b.n	800281a <Start_RTC+0x6d2>
							case 2:
								strcat(date, " Tuesday");
 800273a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fd46 	bl	80001d0 <strlen>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800274c:	4413      	add	r3, r2
 800274e:	4950      	ldr	r1, [pc, #320]	; (8002890 <Start_RTC+0x748>)
 8002750:	461a      	mov	r2, r3
 8002752:	460b      	mov	r3, r1
 8002754:	cb03      	ldmia	r3!, {r0, r1}
 8002756:	6010      	str	r0, [r2, #0]
 8002758:	6051      	str	r1, [r2, #4]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	7213      	strb	r3, [r2, #8]
								break;
 800275e:	e05c      	b.n	800281a <Start_RTC+0x6d2>
							case 3:
								strcat(date, " Wednesday");
 8002760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fd33 	bl	80001d0 <strlen>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002772:	4413      	add	r3, r2
 8002774:	4947      	ldr	r1, [pc, #284]	; (8002894 <Start_RTC+0x74c>)
 8002776:	461a      	mov	r2, r3
 8002778:	460b      	mov	r3, r1
 800277a:	cb03      	ldmia	r3!, {r0, r1}
 800277c:	6010      	str	r0, [r2, #0]
 800277e:	6051      	str	r1, [r2, #4]
 8002780:	8819      	ldrh	r1, [r3, #0]
 8002782:	789b      	ldrb	r3, [r3, #2]
 8002784:	8111      	strh	r1, [r2, #8]
 8002786:	7293      	strb	r3, [r2, #10]
								break;
 8002788:	e047      	b.n	800281a <Start_RTC+0x6d2>
							case 4:
								strcat(date, " Thursday");
 800278a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800278e:	4618      	mov	r0, r3
 8002790:	f7fd fd1e 	bl	80001d0 <strlen>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800279c:	4413      	add	r3, r2
 800279e:	493e      	ldr	r1, [pc, #248]	; (8002898 <Start_RTC+0x750>)
 80027a0:	461a      	mov	r2, r3
 80027a2:	460b      	mov	r3, r1
 80027a4:	cb03      	ldmia	r3!, {r0, r1}
 80027a6:	6010      	str	r0, [r2, #0]
 80027a8:	6051      	str	r1, [r2, #4]
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	8113      	strh	r3, [r2, #8]
								break;
 80027ae:	e034      	b.n	800281a <Start_RTC+0x6d2>
							case 5:
								strcat(date, " Friday");
 80027b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fd0b 	bl	80001d0 <strlen>
 80027ba:	4603      	mov	r3, r0
 80027bc:	461a      	mov	r2, r3
 80027be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027c2:	4413      	add	r3, r2
 80027c4:	4935      	ldr	r1, [pc, #212]	; (800289c <Start_RTC+0x754>)
 80027c6:	461a      	mov	r2, r3
 80027c8:	460b      	mov	r3, r1
 80027ca:	cb03      	ldmia	r3!, {r0, r1}
 80027cc:	6010      	str	r0, [r2, #0]
 80027ce:	6051      	str	r1, [r2, #4]
								break;
 80027d0:	e023      	b.n	800281a <Start_RTC+0x6d2>
							case 6:
								strcat(date, " Saturday");
 80027d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fcfa 	bl	80001d0 <strlen>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027e4:	4413      	add	r3, r2
 80027e6:	492e      	ldr	r1, [pc, #184]	; (80028a0 <Start_RTC+0x758>)
 80027e8:	461a      	mov	r2, r3
 80027ea:	460b      	mov	r3, r1
 80027ec:	cb03      	ldmia	r3!, {r0, r1}
 80027ee:	6010      	str	r0, [r2, #0]
 80027f0:	6051      	str	r1, [r2, #4]
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	8113      	strh	r3, [r2, #8]
								break;
 80027f6:	e010      	b.n	800281a <Start_RTC+0x6d2>
							case 7:
								strcat(date, " Sunday");
 80027f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fce7 	bl	80001d0 <strlen>
 8002802:	4603      	mov	r3, r0
 8002804:	461a      	mov	r2, r3
 8002806:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800280a:	4413      	add	r3, r2
 800280c:	4925      	ldr	r1, [pc, #148]	; (80028a4 <Start_RTC+0x75c>)
 800280e:	461a      	mov	r2, r3
 8002810:	460b      	mov	r3, r1
 8002812:	cb03      	ldmia	r3!, {r0, r1}
 8002814:	6010      	str	r0, [r2, #0]
 8002816:	6051      	str	r1, [r2, #4]
								break;
 8002818:	bf00      	nop
						}

						graphics_text(40, 0, 3, time);
 800281a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800281e:	2203      	movs	r2, #3
 8002820:	2100      	movs	r1, #0
 8002822:	2028      	movs	r0, #40	; 0x28
 8002824:	f001 fc54 	bl	80040d0 <graphics_text>
						graphics_text(0, 24, 2, date);
 8002828:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800282c:	2202      	movs	r2, #2
 800282e:	2118      	movs	r1, #24
 8002830:	2000      	movs	r0, #0
 8002832:	f001 fc4d 	bl	80040d0 <graphics_text>
						oled_update();
 8002836:	f001 fcff 	bl	8004238 <oled_update>

						osDelay(1000);
 800283a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800283e:	f00a f8a1 	bl	800c984 <osDelay>
				while(klick == 0)
 8002842:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <Start_RTC+0x760>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f43f ad0b 	beq.w	8002262 <Start_RTC+0x11a>
					}
				}
		  		break;
 800284c:	f000 bccd 	b.w	80031ea <Start_RTC+0x10a2>


			case 1:
				// Set yer
				graphics_text(0, 0, 1, "   SET:");
 8002850:	4b16      	ldr	r3, [pc, #88]	; (80028ac <Start_RTC+0x764>)
 8002852:	2201      	movs	r2, #1
 8002854:	2100      	movs	r1, #0
 8002856:	2000      	movs	r0, #0
 8002858:	f001 fc3a 	bl	80040d0 <graphics_text>
				graphics_text(0, 8, 1, "YEAR   ");
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <Start_RTC+0x768>)
 800285e:	2201      	movs	r2, #1
 8002860:	2108      	movs	r1, #8
 8002862:	2000      	movs	r0, #0
 8002864:	f001 fc34 	bl	80040d0 <graphics_text>
				oled_update();
 8002868:	f001 fce6 	bl	8004238 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 0);								// Start count encoder from 0
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <Start_RTC+0x76c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2200      	movs	r2, #0
 8002872:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 1)
 8002874:	e071      	b.n	800295a <Start_RTC+0x812>
 8002876:	bf00      	nop
 8002878:	080137e8 	.word	0x080137e8
 800287c:	080137ec 	.word	0x080137ec
 8002880:	080137e4 	.word	0x080137e4
 8002884:	080137f0 	.word	0x080137f0
 8002888:	080137f4 	.word	0x080137f4
 800288c:	080137f8 	.word	0x080137f8
 8002890:	08013800 	.word	0x08013800
 8002894:	0801380c 	.word	0x0801380c
 8002898:	08013818 	.word	0x08013818
 800289c:	08013824 	.word	0x08013824
 80028a0:	0801382c 	.word	0x0801382c
 80028a4:	08013838 	.word	0x08013838
 80028a8:	20000774 	.word	0x20000774
 80028ac:	08013840 	.word	0x08013840
 80028b0:	08013848 	.word	0x08013848
 80028b4:	200092d8 	.word	0x200092d8
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80028b8:	4b99      	ldr	r3, [pc, #612]	; (8002b20 <Start_RTC+0x9d8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	461a      	mov	r2, r3
 80028c0:	4b98      	ldr	r3, [pc, #608]	; (8002b24 <Start_RTC+0x9dc>)
 80028c2:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80028c4:	4b97      	ldr	r3, [pc, #604]	; (8002b24 <Start_RTC+0x9dc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	0fda      	lsrs	r2, r3, #31
 80028ce:	4413      	add	r3, r2
 80028d0:	105b      	asrs	r3, r3, #1
 80028d2:	425b      	negs	r3, r3
 80028d4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80028d8:	337f      	adds	r3, #127	; 0x7f
 80028da:	4a92      	ldr	r2, [pc, #584]	; (8002b24 <Start_RTC+0x9dc>)
 80028dc:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 80028de:	4b91      	ldr	r3, [pc, #580]	; (8002b24 <Start_RTC+0x9dc>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d038      	beq.n	800295a <Start_RTC+0x812>
					{
						prevCounter = currCounter;
 80028e8:	4b8e      	ldr	r3, [pc, #568]	; (8002b24 <Start_RTC+0x9dc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
						if(currCounter > 100)									// Encoder count from 0 to 100
 80028ee:	4b8d      	ldr	r3, [pc, #564]	; (8002b24 <Start_RTC+0x9dc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	dd06      	ble.n	8002904 <Start_RTC+0x7bc>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 80028f6:	4b8a      	ldr	r3, [pc, #552]	; (8002b20 <Start_RTC+0x9d8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2200      	movs	r2, #0
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 80028fe:	4b89      	ldr	r3, [pc, #548]	; (8002b24 <Start_RTC+0x9dc>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
						}
						if(currCounter < 0)
 8002904:	4b87      	ldr	r3, [pc, #540]	; (8002b24 <Start_RTC+0x9dc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	da06      	bge.n	800291a <Start_RTC+0x7d2>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 800290c:	4b84      	ldr	r3, [pc, #528]	; (8002b20 <Start_RTC+0x9d8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 8002914:	4b83      	ldr	r3, [pc, #524]	; (8002b24 <Start_RTC+0x9dc>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
						}

						graphics_text(0, 16, 1, "           ");
 800291a:	4b83      	ldr	r3, [pc, #524]	; (8002b28 <Start_RTC+0x9e0>)
 800291c:	2201      	movs	r2, #1
 800291e:	2110      	movs	r1, #16
 8002920:	2000      	movs	r0, #0
 8002922:	f001 fbd5 	bl	80040d0 <graphics_text>
						oled_update();
 8002926:	f001 fc87 	bl	8004238 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 800292a:	4b7e      	ldr	r3, [pc, #504]	; (8002b24 <Start_RTC+0x9dc>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002932:	497e      	ldr	r1, [pc, #504]	; (8002b2c <Start_RTC+0x9e4>)
 8002934:	4618      	mov	r0, r3
 8002936:	f00e fda7 	bl	8011488 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 800293a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293e:	2201      	movs	r2, #1
 8002940:	2110      	movs	r1, #16
 8002942:	2000      	movs	r0, #0
 8002944:	f001 fbc4 	bl	80040d0 <graphics_text>
						oled_update();
 8002948:	f001 fc76 	bl	8004238 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	220a      	movs	r2, #10
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f00e f850 	bl	80109fa <memset>
				while(klick == 1)
 800295a:	4b75      	ldr	r3, [pc, #468]	; (8002b30 <Start_RTC+0x9e8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d0aa      	beq.n	80028b8 <Start_RTC+0x770>
					}
				}
				if(klick == 2)
 8002962:	4b73      	ldr	r3, [pc, #460]	; (8002b30 <Start_RTC+0x9e8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b02      	cmp	r3, #2
 8002968:	f040 842f 	bne.w	80031ca <Start_RTC+0x1082>
				{
					// write data
					ds3231_set(DS3231_REGISTER_YEAR_DEFAULT, &prevCounter);
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	4619      	mov	r1, r3
 8002972:	2006      	movs	r0, #6
 8002974:	f7fe fbe4 	bl	8001140 <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 8002978:	4b6e      	ldr	r3, [pc, #440]	; (8002b34 <Start_RTC+0x9ec>)
 800297a:	2201      	movs	r2, #1
 800297c:	2110      	movs	r1, #16
 800297e:	2000      	movs	r0, #0
 8002980:	f001 fba6 	bl	80040d0 <graphics_text>
					oled_update();
 8002984:	f001 fc58 	bl	8004238 <oled_update>

					graphics_text(0, 16, 1, "installed");
 8002988:	4b6b      	ldr	r3, [pc, #428]	; (8002b38 <Start_RTC+0x9f0>)
 800298a:	2201      	movs	r2, #1
 800298c:	2110      	movs	r1, #16
 800298e:	2000      	movs	r0, #0
 8002990:	f001 fb9e 	bl	80040d0 <graphics_text>
					oled_update();
 8002994:	f001 fc50 	bl	8004238 <oled_update>

					osDelay(800);
 8002998:	f44f 7048 	mov.w	r0, #800	; 0x320
 800299c:	f009 fff2 	bl	800c984 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 80029a0:	4b64      	ldr	r3, [pc, #400]	; (8002b34 <Start_RTC+0x9ec>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	2110      	movs	r1, #16
 80029a6:	2000      	movs	r0, #0
 80029a8:	f001 fb92 	bl	80040d0 <graphics_text>
					oled_update();
 80029ac:	f001 fc44 	bl	8004238 <oled_update>

					klick = 3;
 80029b0:	4b5f      	ldr	r3, [pc, #380]	; (8002b30 <Start_RTC+0x9e8>)
 80029b2:	2203      	movs	r2, #3
 80029b4:	601a      	str	r2, [r3, #0]
				}
				break;
 80029b6:	f000 bc08 	b.w	80031ca <Start_RTC+0x1082>

			case 3:
				// set month
				graphics_text(0, 8, 1, "MONTH");
 80029ba:	4b60      	ldr	r3, [pc, #384]	; (8002b3c <Start_RTC+0x9f4>)
 80029bc:	2201      	movs	r2, #1
 80029be:	2108      	movs	r1, #8
 80029c0:	2000      	movs	r0, #0
 80029c2:	f001 fb85 	bl	80040d0 <graphics_text>
				oled_update();
 80029c6:	f001 fc37 	bl	8004238 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 80029ca:	4b55      	ldr	r3, [pc, #340]	; (8002b20 <Start_RTC+0x9d8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2201      	movs	r2, #1
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
				currCounter = 1;
 80029d2:	4b54      	ldr	r3, [pc, #336]	; (8002b24 <Start_RTC+0x9dc>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

				while(klick == 3)
 80029d8:	e050      	b.n	8002a7c <Start_RTC+0x934>
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80029da:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <Start_RTC+0x9d8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b50      	ldr	r3, [pc, #320]	; (8002b24 <Start_RTC+0x9dc>)
 80029e4:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80029e6:	4b4f      	ldr	r3, [pc, #316]	; (8002b24 <Start_RTC+0x9dc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	0fda      	lsrs	r2, r3, #31
 80029f0:	4413      	add	r3, r2
 80029f2:	105b      	asrs	r3, r3, #1
 80029f4:	425b      	negs	r3, r3
 80029f6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80029fa:	337f      	adds	r3, #127	; 0x7f
 80029fc:	4a49      	ldr	r2, [pc, #292]	; (8002b24 <Start_RTC+0x9dc>)
 80029fe:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 8002a00:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <Start_RTC+0x9dc>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d038      	beq.n	8002a7c <Start_RTC+0x934>
					{
						prevCounter = currCounter;
 8002a0a:	4b46      	ldr	r3, [pc, #280]	; (8002b24 <Start_RTC+0x9dc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

						if(currCounter > 12)
 8002a10:	4b44      	ldr	r3, [pc, #272]	; (8002b24 <Start_RTC+0x9dc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	dd06      	ble.n	8002a26 <Start_RTC+0x8de>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <Start_RTC+0x9d8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 8002a20:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <Start_RTC+0x9dc>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
						}

						if(currCounter < 1)
 8002a26:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <Start_RTC+0x9dc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	dc06      	bgt.n	8002a3c <Start_RTC+0x8f4>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <Start_RTC+0x9d8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2201      	movs	r2, #1
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 8002a36:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <Start_RTC+0x9dc>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
						}


						graphics_text(0, 16, 1, "           ");
 8002a3c:	4b3a      	ldr	r3, [pc, #232]	; (8002b28 <Start_RTC+0x9e0>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	2110      	movs	r1, #16
 8002a42:	2000      	movs	r0, #0
 8002a44:	f001 fb44 	bl	80040d0 <graphics_text>
						oled_update();
 8002a48:	f001 fbf6 	bl	8004238 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 8002a4c:	4b35      	ldr	r3, [pc, #212]	; (8002b24 <Start_RTC+0x9dc>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a54:	4935      	ldr	r1, [pc, #212]	; (8002b2c <Start_RTC+0x9e4>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00e fd16 	bl	8011488 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 8002a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a60:	2201      	movs	r2, #1
 8002a62:	2110      	movs	r1, #16
 8002a64:	2000      	movs	r0, #0
 8002a66:	f001 fb33 	bl	80040d0 <graphics_text>
						oled_update();
 8002a6a:	f001 fbe5 	bl	8004238 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8002a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a72:	220a      	movs	r2, #10
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f00d ffbf 	bl	80109fa <memset>
				while(klick == 3)
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <Start_RTC+0x9e8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d0aa      	beq.n	80029da <Start_RTC+0x892>

					}
				}
				if(klick == 4)
 8002a84:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <Start_RTC+0x9e8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	f040 83a1 	bne.w	80031d0 <Start_RTC+0x1088>
				{
					if((currCounter < 1) || (currCounter > 12))
 8002a8e:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <Start_RTC+0x9dc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	dd03      	ble.n	8002a9e <Start_RTC+0x956>
 8002a96:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <Start_RTC+0x9dc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	dd05      	ble.n	8002aaa <Start_RTC+0x962>
					{
						__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <Start_RTC+0x9d8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
						prevCounter = 1;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	60fb      	str	r3, [r7, #12]
					}

					// write data
					ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	4619      	mov	r1, r3
 8002ab0:	2005      	movs	r0, #5
 8002ab2:	f7fe fb45 	bl	8001140 <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <Start_RTC+0x9ec>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2110      	movs	r1, #16
 8002abc:	2000      	movs	r0, #0
 8002abe:	f001 fb07 	bl	80040d0 <graphics_text>
					oled_update();
 8002ac2:	f001 fbb9 	bl	8004238 <oled_update>

					graphics_text(0, 16, 1, "installed");
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <Start_RTC+0x9f0>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	2110      	movs	r1, #16
 8002acc:	2000      	movs	r0, #0
 8002ace:	f001 faff 	bl	80040d0 <graphics_text>
					oled_update();
 8002ad2:	f001 fbb1 	bl	8004238 <oled_update>

					osDelay(800);
 8002ad6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002ada:	f009 ff53 	bl	800c984 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <Start_RTC+0x9ec>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	2110      	movs	r1, #16
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f001 faf3 	bl	80040d0 <graphics_text>
					oled_update();
 8002aea:	f001 fba5 	bl	8004238 <oled_update>

					klick = 5;
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <Start_RTC+0x9e8>)
 8002af0:	2205      	movs	r2, #5
 8002af2:	601a      	str	r2, [r3, #0]
				}

				break;
 8002af4:	e36c      	b.n	80031d0 <Start_RTC+0x1088>

			case 5:
				// Set date

				graphics_text(0, 8, 1, "              ");
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <Start_RTC+0x9f8>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	2108      	movs	r1, #8
 8002afc:	2000      	movs	r0, #0
 8002afe:	f001 fae7 	bl	80040d0 <graphics_text>
				oled_update();
 8002b02:	f001 fb99 	bl	8004238 <oled_update>
				graphics_text(0, 8, 1, "DATE");
 8002b06:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <Start_RTC+0x9fc>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2108      	movs	r1, #8
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f001 fadf 	bl	80040d0 <graphics_text>
				oled_update();
 8002b12:	f001 fb91 	bl	8004238 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 8002b16:	4b02      	ldr	r3, [pc, #8]	; (8002b20 <Start_RTC+0x9d8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 5)
 8002b1e:	e064      	b.n	8002bea <Start_RTC+0xaa2>
 8002b20:	200092d8 	.word	0x200092d8
 8002b24:	20000770 	.word	0x20000770
 8002b28:	08013850 	.word	0x08013850
 8002b2c:	080137e8 	.word	0x080137e8
 8002b30:	20000774 	.word	0x20000774
 8002b34:	0801385c 	.word	0x0801385c
 8002b38:	08013870 	.word	0x08013870
 8002b3c:	0801387c 	.word	0x0801387c
 8002b40:	08013884 	.word	0x08013884
 8002b44:	08013894 	.word	0x08013894
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002b48:	4ba2      	ldr	r3, [pc, #648]	; (8002dd4 <Start_RTC+0xc8c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4ba1      	ldr	r3, [pc, #644]	; (8002dd8 <Start_RTC+0xc90>)
 8002b52:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002b54:	4ba0      	ldr	r3, [pc, #640]	; (8002dd8 <Start_RTC+0xc90>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	0fda      	lsrs	r2, r3, #31
 8002b5e:	4413      	add	r3, r2
 8002b60:	105b      	asrs	r3, r3, #1
 8002b62:	425b      	negs	r3, r3
 8002b64:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002b68:	337f      	adds	r3, #127	; 0x7f
 8002b6a:	4a9b      	ldr	r2, [pc, #620]	; (8002dd8 <Start_RTC+0xc90>)
 8002b6c:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 8002b6e:	4b9a      	ldr	r3, [pc, #616]	; (8002dd8 <Start_RTC+0xc90>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d038      	beq.n	8002bea <Start_RTC+0xaa2>
					{
						prevCounter = currCounter;
 8002b78:	4b97      	ldr	r3, [pc, #604]	; (8002dd8 <Start_RTC+0xc90>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]

						if(currCounter > 31)
 8002b7e:	4b96      	ldr	r3, [pc, #600]	; (8002dd8 <Start_RTC+0xc90>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b1f      	cmp	r3, #31
 8002b84:	dd06      	ble.n	8002b94 <Start_RTC+0xa4c>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8002b86:	4b93      	ldr	r3, [pc, #588]	; (8002dd4 <Start_RTC+0xc8c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 8002b8e:	4b92      	ldr	r3, [pc, #584]	; (8002dd8 <Start_RTC+0xc90>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
						}
						if(currCounter < 1)
 8002b94:	4b90      	ldr	r3, [pc, #576]	; (8002dd8 <Start_RTC+0xc90>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	dc06      	bgt.n	8002baa <Start_RTC+0xa62>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8002b9c:	4b8d      	ldr	r3, [pc, #564]	; (8002dd4 <Start_RTC+0xc8c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 8002ba4:	4b8c      	ldr	r3, [pc, #560]	; (8002dd8 <Start_RTC+0xc90>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
						}

						graphics_text(0, 16, 1, "           ");
 8002baa:	4b8c      	ldr	r3, [pc, #560]	; (8002ddc <Start_RTC+0xc94>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	2110      	movs	r1, #16
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f001 fa8d 	bl	80040d0 <graphics_text>
						oled_update();
 8002bb6:	f001 fb3f 	bl	8004238 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 8002bba:	4b87      	ldr	r3, [pc, #540]	; (8002dd8 <Start_RTC+0xc90>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc2:	4987      	ldr	r1, [pc, #540]	; (8002de0 <Start_RTC+0xc98>)
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f00e fc5f 	bl	8011488 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 8002bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bce:	2201      	movs	r2, #1
 8002bd0:	2110      	movs	r1, #16
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f001 fa7c 	bl	80040d0 <graphics_text>
						oled_update();
 8002bd8:	f001 fb2e 	bl	8004238 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8002bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be0:	220a      	movs	r2, #10
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f00d ff08 	bl	80109fa <memset>
				while(klick == 5)
 8002bea:	4b7e      	ldr	r3, [pc, #504]	; (8002de4 <Start_RTC+0xc9c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b05      	cmp	r3, #5
 8002bf0:	d0aa      	beq.n	8002b48 <Start_RTC+0xa00>

					}
				}
				if(klick == 6)
 8002bf2:	4b7c      	ldr	r3, [pc, #496]	; (8002de4 <Start_RTC+0xc9c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	f040 82ed 	bne.w	80031d6 <Start_RTC+0x108e>
				{
					if((currCounter < 1) || (currCounter > 32))
 8002bfc:	4b76      	ldr	r3, [pc, #472]	; (8002dd8 <Start_RTC+0xc90>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	dd03      	ble.n	8002c0c <Start_RTC+0xac4>
 8002c04:	4b74      	ldr	r3, [pc, #464]	; (8002dd8 <Start_RTC+0xc90>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	dd05      	ble.n	8002c18 <Start_RTC+0xad0>
					{
						__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002c0c:	4b71      	ldr	r3, [pc, #452]	; (8002dd4 <Start_RTC+0xc8c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2201      	movs	r2, #1
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
						prevCounter = 1;
 8002c14:	2301      	movs	r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
					}

					// write data
					ds3231_set(DS3231_REGISTER_DATE_DEFAULT, &prevCounter);
 8002c18:	f107 030c 	add.w	r3, r7, #12
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	2004      	movs	r0, #4
 8002c20:	f7fe fa8e 	bl	8001140 <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 8002c24:	4b70      	ldr	r3, [pc, #448]	; (8002de8 <Start_RTC+0xca0>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	2110      	movs	r1, #16
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f001 fa50 	bl	80040d0 <graphics_text>
					oled_update();
 8002c30:	f001 fb02 	bl	8004238 <oled_update>

					graphics_text(0, 16, 1, "installed");
 8002c34:	4b6d      	ldr	r3, [pc, #436]	; (8002dec <Start_RTC+0xca4>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	2110      	movs	r1, #16
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f001 fa48 	bl	80040d0 <graphics_text>
					oled_update();
 8002c40:	f001 fafa 	bl	8004238 <oled_update>

					osDelay(800);
 8002c44:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002c48:	f009 fe9c 	bl	800c984 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 8002c4c:	4b66      	ldr	r3, [pc, #408]	; (8002de8 <Start_RTC+0xca0>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	2110      	movs	r1, #16
 8002c52:	2000      	movs	r0, #0
 8002c54:	f001 fa3c 	bl	80040d0 <graphics_text>
					oled_update();
 8002c58:	f001 faee 	bl	8004238 <oled_update>

					klick = 7;
 8002c5c:	4b61      	ldr	r3, [pc, #388]	; (8002de4 <Start_RTC+0xc9c>)
 8002c5e:	2207      	movs	r2, #7
 8002c60:	601a      	str	r2, [r3, #0]
				}

				break;
 8002c62:	e2b8      	b.n	80031d6 <Start_RTC+0x108e>

			case 7:
				// Set day of week

				graphics_text(0, 8, 1, "              ");
 8002c64:	4b62      	ldr	r3, [pc, #392]	; (8002df0 <Start_RTC+0xca8>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	2108      	movs	r1, #8
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f001 fa30 	bl	80040d0 <graphics_text>
				oled_update();
 8002c70:	f001 fae2 	bl	8004238 <oled_update>
				graphics_text(0, 8, 1, "DAY");
 8002c74:	4b5f      	ldr	r3, [pc, #380]	; (8002df4 <Start_RTC+0xcac>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	2108      	movs	r1, #8
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f001 fa28 	bl	80040d0 <graphics_text>
				oled_update();
 8002c80:	f001 fada 	bl	8004238 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002c84:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <Start_RTC+0xc8c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 7)
 8002c8c:	e050      	b.n	8002d30 <Start_RTC+0xbe8>
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002c8e:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <Start_RTC+0xc8c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <Start_RTC+0xc90>)
 8002c98:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002c9a:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <Start_RTC+0xc90>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	0fda      	lsrs	r2, r3, #31
 8002ca4:	4413      	add	r3, r2
 8002ca6:	105b      	asrs	r3, r3, #1
 8002ca8:	425b      	negs	r3, r3
 8002caa:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002cae:	337f      	adds	r3, #127	; 0x7f
 8002cb0:	4a49      	ldr	r2, [pc, #292]	; (8002dd8 <Start_RTC+0xc90>)
 8002cb2:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 8002cb4:	4b48      	ldr	r3, [pc, #288]	; (8002dd8 <Start_RTC+0xc90>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d038      	beq.n	8002d30 <Start_RTC+0xbe8>
					{
						prevCounter = currCounter;
 8002cbe:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <Start_RTC+0xc90>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]
						if(currCounter > 7)
 8002cc4:	4b44      	ldr	r3, [pc, #272]	; (8002dd8 <Start_RTC+0xc90>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b07      	cmp	r3, #7
 8002cca:	dd06      	ble.n	8002cda <Start_RTC+0xb92>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002ccc:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <Start_RTC+0xc8c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 8002cd4:	4b40      	ldr	r3, [pc, #256]	; (8002dd8 <Start_RTC+0xc90>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
						}
						if(currCounter < 1)
 8002cda:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <Start_RTC+0xc90>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	dc06      	bgt.n	8002cf0 <Start_RTC+0xba8>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <Start_RTC+0xc8c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 1;
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <Start_RTC+0xc90>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
						}

						graphics_text(0, 16, 1, "           ");
 8002cf0:	4b3a      	ldr	r3, [pc, #232]	; (8002ddc <Start_RTC+0xc94>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	2110      	movs	r1, #16
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f001 f9ea 	bl	80040d0 <graphics_text>
						oled_update();
 8002cfc:	f001 fa9c 	bl	8004238 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 8002d00:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <Start_RTC+0xc90>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d08:	4935      	ldr	r1, [pc, #212]	; (8002de0 <Start_RTC+0xc98>)
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f00e fbbc 	bl	8011488 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 8002d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d14:	2201      	movs	r2, #1
 8002d16:	2110      	movs	r1, #16
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f001 f9d9 	bl	80040d0 <graphics_text>
						oled_update();
 8002d1e:	f001 fa8b 	bl	8004238 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8002d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d26:	220a      	movs	r2, #10
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f00d fe65 	bl	80109fa <memset>
				while(klick == 7)
 8002d30:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <Start_RTC+0xc9c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b07      	cmp	r3, #7
 8002d36:	d0aa      	beq.n	8002c8e <Start_RTC+0xb46>

					}
				}
				if(klick == 8)
 8002d38:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <Start_RTC+0xc9c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	f040 824d 	bne.w	80031dc <Start_RTC+0x1094>
				{
					if((currCounter < 1) || (currCounter > 7))
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <Start_RTC+0xc90>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	dd03      	ble.n	8002d52 <Start_RTC+0xc0a>
 8002d4a:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <Start_RTC+0xc90>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b07      	cmp	r3, #7
 8002d50:	dd05      	ble.n	8002d5e <Start_RTC+0xc16>
					{
						__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <Start_RTC+0xc8c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
						prevCounter = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
					}

					// write data
					ds3231_set(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &prevCounter);
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	4619      	mov	r1, r3
 8002d64:	2003      	movs	r0, #3
 8002d66:	f7fe f9eb 	bl	8001140 <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <Start_RTC+0xca0>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2110      	movs	r1, #16
 8002d70:	2000      	movs	r0, #0
 8002d72:	f001 f9ad 	bl	80040d0 <graphics_text>
					oled_update();
 8002d76:	f001 fa5f 	bl	8004238 <oled_update>

					graphics_text(0, 16, 1, "installed");
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <Start_RTC+0xca4>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	2110      	movs	r1, #16
 8002d80:	2000      	movs	r0, #0
 8002d82:	f001 f9a5 	bl	80040d0 <graphics_text>
					oled_update();
 8002d86:	f001 fa57 	bl	8004238 <oled_update>

					osDelay(800);
 8002d8a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002d8e:	f009 fdf9 	bl	800c984 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <Start_RTC+0xca0>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	2110      	movs	r1, #16
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f001 f999 	bl	80040d0 <graphics_text>
					oled_update();
 8002d9e:	f001 fa4b 	bl	8004238 <oled_update>

					klick = 9;
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <Start_RTC+0xc9c>)
 8002da4:	2209      	movs	r2, #9
 8002da6:	601a      	str	r2, [r3, #0]
				}
				break;
 8002da8:	e218      	b.n	80031dc <Start_RTC+0x1094>

			case 9:
				// Set hour

				graphics_text(0, 8, 1, "              ");
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <Start_RTC+0xca8>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	2108      	movs	r1, #8
 8002db0:	2000      	movs	r0, #0
 8002db2:	f001 f98d 	bl	80040d0 <graphics_text>
				oled_update();
 8002db6:	f001 fa3f 	bl	8004238 <oled_update>
				graphics_text(0, 8, 1, "HOUR");
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <Start_RTC+0xcb0>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	2108      	movs	r1, #8
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f001 f985 	bl	80040d0 <graphics_text>
				oled_update();
 8002dc6:	f001 fa37 	bl	8004238 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002dca:	4b02      	ldr	r3, [pc, #8]	; (8002dd4 <Start_RTC+0xc8c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 9)
 8002dd2:	e08d      	b.n	8002ef0 <Start_RTC+0xda8>
 8002dd4:	200092d8 	.word	0x200092d8
 8002dd8:	20000770 	.word	0x20000770
 8002ddc:	08013850 	.word	0x08013850
 8002de0:	080137e8 	.word	0x080137e8
 8002de4:	20000774 	.word	0x20000774
 8002de8:	0801385c 	.word	0x0801385c
 8002dec:	08013870 	.word	0x08013870
 8002df0:	08013884 	.word	0x08013884
 8002df4:	0801389c 	.word	0x0801389c
 8002df8:	080138a0 	.word	0x080138a0
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002dfc:	4b93      	ldr	r3, [pc, #588]	; (800304c <Start_RTC+0xf04>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b92      	ldr	r3, [pc, #584]	; (8003050 <Start_RTC+0xf08>)
 8002e06:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002e08:	4b91      	ldr	r3, [pc, #580]	; (8003050 <Start_RTC+0xf08>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	0fda      	lsrs	r2, r3, #31
 8002e12:	4413      	add	r3, r2
 8002e14:	105b      	asrs	r3, r3, #1
 8002e16:	425b      	negs	r3, r3
 8002e18:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002e1c:	337f      	adds	r3, #127	; 0x7f
 8002e1e:	4a8c      	ldr	r2, [pc, #560]	; (8003050 <Start_RTC+0xf08>)
 8002e20:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 8002e22:	4b8b      	ldr	r3, [pc, #556]	; (8003050 <Start_RTC+0xf08>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d038      	beq.n	8002e9e <Start_RTC+0xd56>
					{
						prevCounter = currCounter;
 8002e2c:	4b88      	ldr	r3, [pc, #544]	; (8003050 <Start_RTC+0xf08>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
						if(currCounter > 23)
 8002e32:	4b87      	ldr	r3, [pc, #540]	; (8003050 <Start_RTC+0xf08>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b17      	cmp	r3, #23
 8002e38:	dd06      	ble.n	8002e48 <Start_RTC+0xd00>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002e3a:	4b84      	ldr	r3, [pc, #528]	; (800304c <Start_RTC+0xf04>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 8002e42:	4b83      	ldr	r3, [pc, #524]	; (8003050 <Start_RTC+0xf08>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
						}
						if(currCounter < 0)
 8002e48:	4b81      	ldr	r3, [pc, #516]	; (8003050 <Start_RTC+0xf08>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	da06      	bge.n	8002e5e <Start_RTC+0xd16>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002e50:	4b7e      	ldr	r3, [pc, #504]	; (800304c <Start_RTC+0xf04>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 8002e58:	4b7d      	ldr	r3, [pc, #500]	; (8003050 <Start_RTC+0xf08>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
						}

						graphics_text(0, 16, 1, "           ");
 8002e5e:	4b7d      	ldr	r3, [pc, #500]	; (8003054 <Start_RTC+0xf0c>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	2110      	movs	r1, #16
 8002e64:	2000      	movs	r0, #0
 8002e66:	f001 f933 	bl	80040d0 <graphics_text>
						oled_update();
 8002e6a:	f001 f9e5 	bl	8004238 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 8002e6e:	4b78      	ldr	r3, [pc, #480]	; (8003050 <Start_RTC+0xf08>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e76:	4978      	ldr	r1, [pc, #480]	; (8003058 <Start_RTC+0xf10>)
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f00e fb05 	bl	8011488 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 8002e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e82:	2201      	movs	r2, #1
 8002e84:	2110      	movs	r1, #16
 8002e86:	2000      	movs	r0, #0
 8002e88:	f001 f922 	bl	80040d0 <graphics_text>
						oled_update();
 8002e8c:	f001 f9d4 	bl	8004238 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8002e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e94:	220a      	movs	r2, #10
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f00d fdae 	bl	80109fa <memset>
					}

					if(klick == 10)
 8002e9e:	4b6f      	ldr	r3, [pc, #444]	; (800305c <Start_RTC+0xf14>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b0a      	cmp	r3, #10
 8002ea4:	d124      	bne.n	8002ef0 <Start_RTC+0xda8>
					{
						// write data
						ds3231_set(DS3231_REGISTER_HOURS_DEFAULT, &prevCounter);
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	4619      	mov	r1, r3
 8002eac:	2002      	movs	r0, #2
 8002eae:	f7fe f947 	bl	8001140 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002eb2:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <Start_RTC+0xf18>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	2110      	movs	r1, #16
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f001 f909 	bl	80040d0 <graphics_text>
						oled_update();
 8002ebe:	f001 f9bb 	bl	8004238 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002ec2:	4b68      	ldr	r3, [pc, #416]	; (8003064 <Start_RTC+0xf1c>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	2110      	movs	r1, #16
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f001 f901 	bl	80040d0 <graphics_text>
						oled_update();
 8002ece:	f001 f9b3 	bl	8004238 <oled_update>

						osDelay(800);
 8002ed2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002ed6:	f009 fd55 	bl	800c984 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002eda:	4b61      	ldr	r3, [pc, #388]	; (8003060 <Start_RTC+0xf18>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	2110      	movs	r1, #16
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f001 f8f5 	bl	80040d0 <graphics_text>
						oled_update();
 8002ee6:	f001 f9a7 	bl	8004238 <oled_update>

						klick = 11;
 8002eea:	4b5c      	ldr	r3, [pc, #368]	; (800305c <Start_RTC+0xf14>)
 8002eec:	220b      	movs	r2, #11
 8002eee:	601a      	str	r2, [r3, #0]
				while(klick == 9)
 8002ef0:	4b5a      	ldr	r3, [pc, #360]	; (800305c <Start_RTC+0xf14>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	d081      	beq.n	8002dfc <Start_RTC+0xcb4>
					}
				}
				break;
 8002ef8:	e177      	b.n	80031ea <Start_RTC+0x10a2>

			case 11:
				// Set minutes

				graphics_text(0, 8, 1, "              ");
 8002efa:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <Start_RTC+0xf20>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	2108      	movs	r1, #8
 8002f00:	2000      	movs	r0, #0
 8002f02:	f001 f8e5 	bl	80040d0 <graphics_text>
				oled_update();
 8002f06:	f001 f997 	bl	8004238 <oled_update>
				graphics_text(0, 8, 1, "MINUTES");
 8002f0a:	4b58      	ldr	r3, [pc, #352]	; (800306c <Start_RTC+0xf24>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	2108      	movs	r1, #8
 8002f10:	2000      	movs	r0, #0
 8002f12:	f001 f8dd 	bl	80040d0 <graphics_text>
				oled_update();
 8002f16:	f001 f98f 	bl	8004238 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002f1a:	4b4c      	ldr	r3, [pc, #304]	; (800304c <Start_RTC+0xf04>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 11)
 8002f22:	e04e      	b.n	8002fc2 <Start_RTC+0xe7a>
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002f24:	4b49      	ldr	r3, [pc, #292]	; (800304c <Start_RTC+0xf04>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b48      	ldr	r3, [pc, #288]	; (8003050 <Start_RTC+0xf08>)
 8002f2e:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002f30:	4b47      	ldr	r3, [pc, #284]	; (8003050 <Start_RTC+0xf08>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	0fda      	lsrs	r2, r3, #31
 8002f3a:	4413      	add	r3, r2
 8002f3c:	105b      	asrs	r3, r3, #1
 8002f3e:	425b      	negs	r3, r3
 8002f40:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002f44:	337f      	adds	r3, #127	; 0x7f
 8002f46:	4a42      	ldr	r2, [pc, #264]	; (8003050 <Start_RTC+0xf08>)
 8002f48:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 8002f4a:	4b41      	ldr	r3, [pc, #260]	; (8003050 <Start_RTC+0xf08>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d036      	beq.n	8002fc2 <Start_RTC+0xe7a>
					{
						prevCounter = currCounter;
 8002f54:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <Start_RTC+0xf08>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
						if(currCounter > 59)
 8002f5a:	4b3d      	ldr	r3, [pc, #244]	; (8003050 <Start_RTC+0xf08>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b3b      	cmp	r3, #59	; 0x3b
 8002f60:	dd05      	ble.n	8002f6e <Start_RTC+0xe26>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002f62:	4b3a      	ldr	r3, [pc, #232]	; (800304c <Start_RTC+0xf04>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
						}
						if(currCounter < 0)
 8002f6e:	4b38      	ldr	r3, [pc, #224]	; (8003050 <Start_RTC+0xf08>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da05      	bge.n	8002f82 <Start_RTC+0xe3a>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002f76:	4b35      	ldr	r3, [pc, #212]	; (800304c <Start_RTC+0xf04>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
						}

						graphics_text(0, 16, 1, "           ");
 8002f82:	4b34      	ldr	r3, [pc, #208]	; (8003054 <Start_RTC+0xf0c>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	2110      	movs	r1, #16
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f001 f8a1 	bl	80040d0 <graphics_text>
						oled_update();
 8002f8e:	f001 f953 	bl	8004238 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 8002f92:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <Start_RTC+0xf08>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f9a:	492f      	ldr	r1, [pc, #188]	; (8003058 <Start_RTC+0xf10>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f00e fa73 	bl	8011488 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 8002fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	2110      	movs	r1, #16
 8002faa:	2000      	movs	r0, #0
 8002fac:	f001 f890 	bl	80040d0 <graphics_text>
						oled_update();
 8002fb0:	f001 f942 	bl	8004238 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8002fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb8:	220a      	movs	r2, #10
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f00d fd1c 	bl	80109fa <memset>
				while(klick == 11)
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <Start_RTC+0xf14>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b0b      	cmp	r3, #11
 8002fc8:	d0ac      	beq.n	8002f24 <Start_RTC+0xddc>
					}
				}
				if(klick == 12)
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <Start_RTC+0xf14>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	f040 8107 	bne.w	80031e2 <Start_RTC+0x109a>
				{
					// write data
					ds3231_set(DS3231_REGISTER_MINUTES_DEFAULT, &prevCounter);
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	4619      	mov	r1, r3
 8002fda:	2001      	movs	r0, #1
 8002fdc:	f7fe f8b0 	bl	8001140 <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <Start_RTC+0xf18>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	2110      	movs	r1, #16
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f001 f872 	bl	80040d0 <graphics_text>
					oled_update();
 8002fec:	f001 f924 	bl	8004238 <oled_update>

					graphics_text(0, 16, 1, "installed");
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <Start_RTC+0xf1c>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	2110      	movs	r1, #16
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f001 f86a 	bl	80040d0 <graphics_text>
					oled_update();
 8002ffc:	f001 f91c 	bl	8004238 <oled_update>

					osDelay(800);
 8003000:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003004:	f009 fcbe 	bl	800c984 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <Start_RTC+0xf18>)
 800300a:	2201      	movs	r2, #1
 800300c:	2110      	movs	r1, #16
 800300e:	2000      	movs	r0, #0
 8003010:	f001 f85e 	bl	80040d0 <graphics_text>
					oled_update();
 8003014:	f001 f910 	bl	8004238 <oled_update>

					klick = 13;
 8003018:	4b10      	ldr	r3, [pc, #64]	; (800305c <Start_RTC+0xf14>)
 800301a:	220d      	movs	r2, #13
 800301c:	601a      	str	r2, [r3, #0]
				}
				break;
 800301e:	e0e0      	b.n	80031e2 <Start_RTC+0x109a>

			case 13:
				// Set minutes

				graphics_text(0, 8, 1, "              ");
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <Start_RTC+0xf20>)
 8003022:	2201      	movs	r2, #1
 8003024:	2108      	movs	r1, #8
 8003026:	2000      	movs	r0, #0
 8003028:	f001 f852 	bl	80040d0 <graphics_text>
				oled_update();
 800302c:	f001 f904 	bl	8004238 <oled_update>
				graphics_text(0, 8, 1, "SECONDS");
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <Start_RTC+0xf28>)
 8003032:	2201      	movs	r2, #1
 8003034:	2108      	movs	r1, #8
 8003036:	2000      	movs	r0, #0
 8003038:	f001 f84a 	bl	80040d0 <graphics_text>
				oled_update();
 800303c:	f001 f8fc 	bl	8004238 <oled_update>

				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003040:	4b02      	ldr	r3, [pc, #8]	; (800304c <Start_RTC+0xf04>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2200      	movs	r2, #0
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

				while(klick == 13)
 8003048:	e065      	b.n	8003116 <Start_RTC+0xfce>
 800304a:	bf00      	nop
 800304c:	200092d8 	.word	0x200092d8
 8003050:	20000770 	.word	0x20000770
 8003054:	08013850 	.word	0x08013850
 8003058:	080137e8 	.word	0x080137e8
 800305c:	20000774 	.word	0x20000774
 8003060:	0801385c 	.word	0x0801385c
 8003064:	08013870 	.word	0x08013870
 8003068:	08013884 	.word	0x08013884
 800306c:	080138a8 	.word	0x080138a8
 8003070:	080138b0 	.word	0x080138b0
				{
					currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8003074:	4b5e      	ldr	r3, [pc, #376]	; (80031f0 <Start_RTC+0x10a8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	461a      	mov	r2, r3
 800307c:	4b5d      	ldr	r3, [pc, #372]	; (80031f4 <Start_RTC+0x10ac>)
 800307e:	601a      	str	r2, [r3, #0]
					currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8003080:	4b5c      	ldr	r3, [pc, #368]	; (80031f4 <Start_RTC+0x10ac>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3b01      	subs	r3, #1
 8003086:	b29b      	uxth	r3, r3
 8003088:	0fda      	lsrs	r2, r3, #31
 800308a:	4413      	add	r3, r2
 800308c:	105b      	asrs	r3, r3, #1
 800308e:	425b      	negs	r3, r3
 8003090:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003094:	337f      	adds	r3, #127	; 0x7f
 8003096:	4a57      	ldr	r2, [pc, #348]	; (80031f4 <Start_RTC+0x10ac>)
 8003098:	6013      	str	r3, [r2, #0]

					if(currCounter != prevCounter)
 800309a:	4b56      	ldr	r3, [pc, #344]	; (80031f4 <Start_RTC+0x10ac>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d038      	beq.n	8003116 <Start_RTC+0xfce>
					{
						prevCounter = currCounter;
 80030a4:	4b53      	ldr	r3, [pc, #332]	; (80031f4 <Start_RTC+0x10ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]
						if(currCounter > 59)
 80030aa:	4b52      	ldr	r3, [pc, #328]	; (80031f4 <Start_RTC+0x10ac>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b3b      	cmp	r3, #59	; 0x3b
 80030b0:	dd06      	ble.n	80030c0 <Start_RTC+0xf78>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 80030b2:	4b4f      	ldr	r3, [pc, #316]	; (80031f0 <Start_RTC+0x10a8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2200      	movs	r2, #0
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 80030ba:	4b4e      	ldr	r3, [pc, #312]	; (80031f4 <Start_RTC+0x10ac>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
						}
						if(currCounter < 0)
 80030c0:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <Start_RTC+0x10ac>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	da06      	bge.n	80030d6 <Start_RTC+0xf8e>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 0);
 80030c8:	4b49      	ldr	r3, [pc, #292]	; (80031f0 <Start_RTC+0x10a8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2200      	movs	r2, #0
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24
							currCounter = 0;
 80030d0:	4b48      	ldr	r3, [pc, #288]	; (80031f4 <Start_RTC+0x10ac>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
						}
						graphics_text(0, 16, 1, "           ");
 80030d6:	4b48      	ldr	r3, [pc, #288]	; (80031f8 <Start_RTC+0x10b0>)
 80030d8:	2201      	movs	r2, #1
 80030da:	2110      	movs	r1, #16
 80030dc:	2000      	movs	r0, #0
 80030de:	f000 fff7 	bl	80040d0 <graphics_text>
						oled_update();
 80030e2:	f001 f8a9 	bl	8004238 <oled_update>

						sprintf(time_buf, "%d", currCounter);
 80030e6:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <Start_RTC+0x10ac>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ee:	4943      	ldr	r1, [pc, #268]	; (80031fc <Start_RTC+0x10b4>)
 80030f0:	4618      	mov	r0, r3
 80030f2:	f00e f9c9 	bl	8011488 <siprintf>
						graphics_text(0, 16, 1, time_buf);
 80030f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fa:	2201      	movs	r2, #1
 80030fc:	2110      	movs	r1, #16
 80030fe:	2000      	movs	r0, #0
 8003100:	f000 ffe6 	bl	80040d0 <graphics_text>
						oled_update();
 8003104:	f001 f898 	bl	8004238 <oled_update>
						memset(time_buf, 0, sizeof(time_buf));
 8003108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800310c:	220a      	movs	r2, #10
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f00d fc72 	bl	80109fa <memset>
				while(klick == 13)
 8003116:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <Start_RTC+0x10b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b0d      	cmp	r3, #13
 800311c:	d0aa      	beq.n	8003074 <Start_RTC+0xf2c>
					}
				}
				if(klick == 14)
 800311e:	4b38      	ldr	r3, [pc, #224]	; (8003200 <Start_RTC+0x10b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b0e      	cmp	r3, #14
 8003124:	d160      	bne.n	80031e8 <Start_RTC+0x10a0>
				{
					// write data
					ds3231_set(DS3231_REGISTER_SECONDS_DEFAULT, &prevCounter);
 8003126:	f107 030c 	add.w	r3, r7, #12
 800312a:	4619      	mov	r1, r3
 800312c:	2000      	movs	r0, #0
 800312e:	f7fe f807 	bl	8001140 <ds3231_set>

					graphics_text(0, 16, 1, "                 ");
 8003132:	4b34      	ldr	r3, [pc, #208]	; (8003204 <Start_RTC+0x10bc>)
 8003134:	2201      	movs	r2, #1
 8003136:	2110      	movs	r1, #16
 8003138:	2000      	movs	r0, #0
 800313a:	f000 ffc9 	bl	80040d0 <graphics_text>
					oled_update();
 800313e:	f001 f87b 	bl	8004238 <oled_update>

					graphics_text(0, 16, 1, "installed");
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <Start_RTC+0x10c0>)
 8003144:	2201      	movs	r2, #1
 8003146:	2110      	movs	r1, #16
 8003148:	2000      	movs	r0, #0
 800314a:	f000 ffc1 	bl	80040d0 <graphics_text>
					oled_update();
 800314e:	f001 f873 	bl	8004238 <oled_update>

					osDelay(800);
 8003152:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003156:	f009 fc15 	bl	800c984 <osDelay>

					graphics_text(0, 16, 1, "                 ");
 800315a:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <Start_RTC+0x10bc>)
 800315c:	2201      	movs	r2, #1
 800315e:	2110      	movs	r1, #16
 8003160:	2000      	movs	r0, #0
 8003162:	f000 ffb5 	bl	80040d0 <graphics_text>
					oled_update();
 8003166:	f001 f867 	bl	8004238 <oled_update>

					klick = 15;
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <Start_RTC+0x10b8>)
 800316c:	220f      	movs	r2, #15
 800316e:	601a      	str	r2, [r3, #0]
				}
				break;
 8003170:	e03a      	b.n	80031e8 <Start_RTC+0x10a0>

			case 15:		// EXIT

				osDelay(500);
 8003172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003176:	f009 fc05 	bl	800c984 <osDelay>
				clear();
 800317a:	f000 fdf5 	bl	8003d68 <clear>
				oled_update();
 800317e:	f001 f85b 	bl	8004238 <oled_update>

				for(uint8_t q = 0; q < 3; q ++)
 8003182:	2300      	movs	r3, #0
 8003184:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8003188:	e017      	b.n	80031ba <Start_RTC+0x1072>
				{
					graphics_text(20, 16, 2, "THE TIME IS SET");
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <Start_RTC+0x10c4>)
 800318c:	2202      	movs	r2, #2
 800318e:	2110      	movs	r1, #16
 8003190:	2014      	movs	r0, #20
 8003192:	f000 ff9d 	bl	80040d0 <graphics_text>
					oled_update();
 8003196:	f001 f84f 	bl	8004238 <oled_update>
					osDelay(400);
 800319a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800319e:	f009 fbf1 	bl	800c984 <osDelay>

					clear();
 80031a2:	f000 fde1 	bl	8003d68 <clear>
					oled_update();
 80031a6:	f001 f847 	bl	8004238 <oled_update>
					osDelay(200);
 80031aa:	20c8      	movs	r0, #200	; 0xc8
 80031ac:	f009 fbea 	bl	800c984 <osDelay>
				for(uint8_t q = 0; q < 3; q ++)
 80031b0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80031b4:	3301      	adds	r3, #1
 80031b6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80031ba:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d9e3      	bls.n	800318a <Start_RTC+0x1042>
				}
				klick = 0;					// Return to show time
 80031c2:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <Start_RTC+0x10b8>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

				break;
 80031c8:	e00f      	b.n	80031ea <Start_RTC+0x10a2>
				break;
 80031ca:	bf00      	nop
 80031cc:	f7ff b801 	b.w	80021d2 <Start_RTC+0x8a>
				break;
 80031d0:	bf00      	nop
 80031d2:	f7fe bffe 	b.w	80021d2 <Start_RTC+0x8a>
				break;
 80031d6:	bf00      	nop
 80031d8:	f7fe bffb 	b.w	80021d2 <Start_RTC+0x8a>
				break;
 80031dc:	bf00      	nop
 80031de:	f7fe bff8 	b.w	80021d2 <Start_RTC+0x8a>
				break;
 80031e2:	bf00      	nop
 80031e4:	f7fe bff5 	b.w	80021d2 <Start_RTC+0x8a>
				break;
 80031e8:	bf00      	nop
		switch (klick)
 80031ea:	f7fe bff2 	b.w	80021d2 <Start_RTC+0x8a>
 80031ee:	bf00      	nop
 80031f0:	200092d8 	.word	0x200092d8
 80031f4:	20000770 	.word	0x20000770
 80031f8:	08013850 	.word	0x08013850
 80031fc:	080137e8 	.word	0x080137e8
 8003200:	20000774 	.word	0x20000774
 8003204:	0801385c 	.word	0x0801385c
 8003208:	08013870 	.word	0x08013870
 800320c:	080138b8 	.word	0x080138b8

08003210 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]




	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a09      	ldr	r2, [pc, #36]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d104      	bne.n	800322c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	4a07      	ldr	r2, [pc, #28]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800322a:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a06      	ldr	r2, [pc, #24]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8003236:	f001 f911 	bl	800445c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40000400 	.word	0x40000400
 8003248:	20009520 	.word	0x20009520
 800324c:	40002000 	.word	0x40002000

08003250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003254:	b672      	cpsid	i
}
 8003256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003258:	e7fe      	b.n	8003258 <Error_Handler+0x8>
	...

0800325c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_MspInit+0x54>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <HAL_MspInit+0x54>)
 800326c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003270:	6453      	str	r3, [r2, #68]	; 0x44
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <HAL_MspInit+0x54>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_MspInit+0x54>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_MspInit+0x54>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_MspInit+0x54>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800329a:	2200      	movs	r2, #0
 800329c:	210f      	movs	r1, #15
 800329e:	f06f 0001 	mvn.w	r0, #1
 80032a2:	f001 fc5d 	bl	8004b60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800

080032b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a17      	ldr	r2, [pc, #92]	; (8003330 <HAL_ADC_MspInit+0x7c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d127      	bne.n	8003326 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	4b16      	ldr	r3, [pc, #88]	; (8003334 <HAL_ADC_MspInit+0x80>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	4a15      	ldr	r2, [pc, #84]	; (8003334 <HAL_ADC_MspInit+0x80>)
 80032e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e4:	6453      	str	r3, [r2, #68]	; 0x44
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <HAL_ADC_MspInit+0x80>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <HAL_ADC_MspInit+0x80>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <HAL_ADC_MspInit+0x80>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_ADC_MspInit+0x80>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800330e:	2302      	movs	r3, #2
 8003310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003312:	2303      	movs	r3, #3
 8003314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331a:	f107 0314 	add.w	r3, r7, #20
 800331e:	4619      	mov	r1, r3
 8003320:	4805      	ldr	r0, [pc, #20]	; (8003338 <HAL_ADC_MspInit+0x84>)
 8003322:	f001 ffbf 	bl	80052a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003326:	bf00      	nop
 8003328:	3728      	adds	r7, #40	; 0x28
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40012000 	.word	0x40012000
 8003334:	40023800 	.word	0x40023800
 8003338:	40020400 	.word	0x40020400

0800333c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	; 0x30
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003344:	f107 031c 	add.w	r3, r7, #28
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a42      	ldr	r2, [pc, #264]	; (8003464 <HAL_I2C_MspInit+0x128>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d12d      	bne.n	80033ba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a40      	ldr	r2, [pc, #256]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b3e      	ldr	r3, [pc, #248]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800337a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800337e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003380:	2312      	movs	r3, #18
 8003382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003388:	2303      	movs	r3, #3
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800338c:	2304      	movs	r3, #4
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003390:	f107 031c 	add.w	r3, r7, #28
 8003394:	4619      	mov	r1, r3
 8003396:	4835      	ldr	r0, [pc, #212]	; (800346c <HAL_I2C_MspInit+0x130>)
 8003398:	f001 ff84 	bl	80052a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	4a30      	ldr	r2, [pc, #192]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 80033a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033aa:	6413      	str	r3, [r2, #64]	; 0x40
 80033ac:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80033b8:	e050      	b.n	800345c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2c      	ldr	r2, [pc, #176]	; (8003470 <HAL_I2C_MspInit+0x134>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d14b      	bne.n	800345c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c4:	2300      	movs	r3, #0
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	4a26      	ldr	r2, [pc, #152]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	6313      	str	r3, [r2, #48]	; 0x30
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6313      	str	r3, [r2, #48]	; 0x30
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003402:	2312      	movs	r3, #18
 8003404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340a:	2303      	movs	r3, #3
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800340e:	2304      	movs	r3, #4
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003412:	f107 031c 	add.w	r3, r7, #28
 8003416:	4619      	mov	r1, r3
 8003418:	4816      	ldr	r0, [pc, #88]	; (8003474 <HAL_I2C_MspInit+0x138>)
 800341a:	f001 ff43 	bl	80052a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800341e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003424:	2312      	movs	r3, #18
 8003426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342c:	2303      	movs	r3, #3
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003430:	2304      	movs	r3, #4
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003434:	f107 031c 	add.w	r3, r7, #28
 8003438:	4619      	mov	r1, r3
 800343a:	480f      	ldr	r0, [pc, #60]	; (8003478 <HAL_I2C_MspInit+0x13c>)
 800343c:	f001 ff32 	bl	80052a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	4a07      	ldr	r2, [pc, #28]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 800344a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800344e:	6413      	str	r3, [r2, #64]	; 0x40
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_I2C_MspInit+0x12c>)
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	68bb      	ldr	r3, [r7, #8]
}
 800345c:	bf00      	nop
 800345e:	3730      	adds	r7, #48	; 0x30
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40005800 	.word	0x40005800
 8003468:	40023800 	.word	0x40023800
 800346c:	40020400 	.word	0x40020400
 8003470:	40005c00 	.word	0x40005c00
 8003474:	40020800 	.word	0x40020800
 8003478:	40020000 	.word	0x40020000

0800347c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <HAL_RNG_MspInit+0x3c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10d      	bne.n	80034aa <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <HAL_RNG_MspInit+0x40>)
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	4a09      	ldr	r2, [pc, #36]	; (80034bc <HAL_RNG_MspInit+0x40>)
 8003498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800349c:	6353      	str	r3, [r2, #52]	; 0x34
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_RNG_MspInit+0x40>)
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	50060800 	.word	0x50060800
 80034bc:	40023800 	.word	0x40023800

080034c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08c      	sub	sp, #48	; 0x30
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 031c 	add.w	r3, r7, #28
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a5d      	ldr	r2, [pc, #372]	; (8003654 <HAL_SPI_MspInit+0x194>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d12c      	bne.n	800353c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	4b5c      	ldr	r3, [pc, #368]	; (8003658 <HAL_SPI_MspInit+0x198>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	4a5b      	ldr	r2, [pc, #364]	; (8003658 <HAL_SPI_MspInit+0x198>)
 80034ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034f0:	6453      	str	r3, [r2, #68]	; 0x44
 80034f2:	4b59      	ldr	r3, [pc, #356]	; (8003658 <HAL_SPI_MspInit+0x198>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	4b55      	ldr	r3, [pc, #340]	; (8003658 <HAL_SPI_MspInit+0x198>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a54      	ldr	r2, [pc, #336]	; (8003658 <HAL_SPI_MspInit+0x198>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b52      	ldr	r3, [pc, #328]	; (8003658 <HAL_SPI_MspInit+0x198>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800351a:	23e0      	movs	r3, #224	; 0xe0
 800351c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003526:	2302      	movs	r3, #2
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800352a:	2305      	movs	r3, #5
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352e:	f107 031c 	add.w	r3, r7, #28
 8003532:	4619      	mov	r1, r3
 8003534:	4849      	ldr	r0, [pc, #292]	; (800365c <HAL_SPI_MspInit+0x19c>)
 8003536:	f001 feb5 	bl	80052a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800353a:	e086      	b.n	800364a <HAL_SPI_MspInit+0x18a>
  else if(hspi->Instance==SPI2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a47      	ldr	r2, [pc, #284]	; (8003660 <HAL_SPI_MspInit+0x1a0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	f040 8081 	bne.w	800364a <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	4b42      	ldr	r3, [pc, #264]	; (8003658 <HAL_SPI_MspInit+0x198>)
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	4a41      	ldr	r2, [pc, #260]	; (8003658 <HAL_SPI_MspInit+0x198>)
 8003552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003556:	6413      	str	r3, [r2, #64]	; 0x40
 8003558:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_SPI_MspInit+0x198>)
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_SPI_MspInit+0x198>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4a3a      	ldr	r2, [pc, #232]	; (8003658 <HAL_SPI_MspInit+0x198>)
 800356e:	f043 0304 	orr.w	r3, r3, #4
 8003572:	6313      	str	r3, [r2, #48]	; 0x30
 8003574:	4b38      	ldr	r3, [pc, #224]	; (8003658 <HAL_SPI_MspInit+0x198>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	4b34      	ldr	r3, [pc, #208]	; (8003658 <HAL_SPI_MspInit+0x198>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	4a33      	ldr	r2, [pc, #204]	; (8003658 <HAL_SPI_MspInit+0x198>)
 800358a:	f043 0302 	orr.w	r3, r3, #2
 800358e:	6313      	str	r3, [r2, #48]	; 0x30
 8003590:	4b31      	ldr	r3, [pc, #196]	; (8003658 <HAL_SPI_MspInit+0x198>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800359c:	2304      	movs	r3, #4
 800359e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a0:	2302      	movs	r3, #2
 80035a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a8:	2303      	movs	r3, #3
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035ac:	2305      	movs	r3, #5
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	4619      	mov	r1, r3
 80035b6:	482b      	ldr	r0, [pc, #172]	; (8003664 <HAL_SPI_MspInit+0x1a4>)
 80035b8:	f001 fe74 	bl	80052a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80035bc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80035c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035ce:	2305      	movs	r3, #5
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d2:	f107 031c 	add.w	r3, r7, #28
 80035d6:	4619      	mov	r1, r3
 80035d8:	4823      	ldr	r0, [pc, #140]	; (8003668 <HAL_SPI_MspInit+0x1a8>)
 80035da:	f001 fe63 	bl	80052a4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80035de:	4b23      	ldr	r3, [pc, #140]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 80035e0:	4a23      	ldr	r2, [pc, #140]	; (8003670 <HAL_SPI_MspInit+0x1b0>)
 80035e2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80035e4:	4b21      	ldr	r3, [pc, #132]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 80035ec:	2240      	movs	r2, #64	; 0x40
 80035ee:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035f0:	4b1e      	ldr	r3, [pc, #120]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 80035f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035fc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035fe:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 8003600:	2200      	movs	r2, #0
 8003602:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 8003606:	2200      	movs	r2, #0
 8003608:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800360a:	4b18      	ldr	r3, [pc, #96]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 800360c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003610:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003612:	4b16      	ldr	r3, [pc, #88]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 8003614:	2200      	movs	r2, #0
 8003616:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003618:	4b14      	ldr	r3, [pc, #80]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 800361a:	2200      	movs	r2, #0
 800361c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800361e:	4813      	ldr	r0, [pc, #76]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 8003620:	f001 fad6 	bl	8004bd0 <HAL_DMA_Init>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_SPI_MspInit+0x16e>
      Error_Handler();
 800362a:	f7ff fe11 	bl	8003250 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a0e      	ldr	r2, [pc, #56]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 8003632:	649a      	str	r2, [r3, #72]	; 0x48
 8003634:	4a0d      	ldr	r2, [pc, #52]	; (800366c <HAL_SPI_MspInit+0x1ac>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800363a:	2200      	movs	r2, #0
 800363c:	2105      	movs	r1, #5
 800363e:	2024      	movs	r0, #36	; 0x24
 8003640:	f001 fa8e 	bl	8004b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003644:	2024      	movs	r0, #36	; 0x24
 8003646:	f001 faa7 	bl	8004b98 <HAL_NVIC_EnableIRQ>
}
 800364a:	bf00      	nop
 800364c:	3730      	adds	r7, #48	; 0x30
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40013000 	.word	0x40013000
 8003658:	40023800 	.word	0x40023800
 800365c:	40020000 	.word	0x40020000
 8003660:	40003800 	.word	0x40003800
 8003664:	40020800 	.word	0x40020800
 8003668:	40020400 	.word	0x40020400
 800366c:	20009650 	.word	0x20009650
 8003670:	40026070 	.word	0x40026070

08003674 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_SPI_MspDeInit+0x68>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10a      	bne.n	800369c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_SPI_MspDeInit+0x6c>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <HAL_SPI_MspDeInit+0x6c>)
 800368c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003690:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8003692:	21e0      	movs	r1, #224	; 0xe0
 8003694:	4813      	ldr	r0, [pc, #76]	; (80036e4 <HAL_SPI_MspDeInit+0x70>)
 8003696:	f001 ffa1 	bl	80055dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800369a:	e01b      	b.n	80036d4 <HAL_SPI_MspDeInit+0x60>
  else if(hspi->Instance==SPI2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <HAL_SPI_MspDeInit+0x74>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d116      	bne.n	80036d4 <HAL_SPI_MspDeInit+0x60>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80036a6:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_SPI_MspDeInit+0x6c>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a0d      	ldr	r2, [pc, #52]	; (80036e0 <HAL_SPI_MspDeInit+0x6c>)
 80036ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 80036b2:	2104      	movs	r1, #4
 80036b4:	480d      	ldr	r0, [pc, #52]	; (80036ec <HAL_SPI_MspDeInit+0x78>)
 80036b6:	f001 ff91 	bl	80055dc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 80036ba:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80036be:	480c      	ldr	r0, [pc, #48]	; (80036f0 <HAL_SPI_MspDeInit+0x7c>)
 80036c0:	f001 ff8c 	bl	80055dc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 fb2f 	bl	8004d2c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 80036ce:	2024      	movs	r0, #36	; 0x24
 80036d0:	f001 fa70 	bl	8004bb4 <HAL_NVIC_DisableIRQ>
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40013000 	.word	0x40013000
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40020000 	.word	0x40020000
 80036e8:	40003800 	.word	0x40003800
 80036ec:	40020800 	.word	0x40020800
 80036f0:	40020400 	.word	0x40020400

080036f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <HAL_TIM_Encoder_MspInit+0x94>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d134      	bne.n	8003780 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	4b1c      	ldr	r3, [pc, #112]	; (800378c <HAL_TIM_Encoder_MspInit+0x98>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	4a1b      	ldr	r2, [pc, #108]	; (800378c <HAL_TIM_Encoder_MspInit+0x98>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6453      	str	r3, [r2, #68]	; 0x44
 8003726:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_TIM_Encoder_MspInit+0x98>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <HAL_TIM_Encoder_MspInit+0x98>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	4a14      	ldr	r2, [pc, #80]	; (800378c <HAL_TIM_Encoder_MspInit+0x98>)
 800373c:	f043 0310 	orr.w	r3, r3, #16
 8003740:	6313      	str	r3, [r2, #48]	; 0x30
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_TIM_Encoder_MspInit+0x98>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800374e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003754:	2302      	movs	r3, #2
 8003756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	2300      	movs	r3, #0
 800375e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003760:	2301      	movs	r3, #1
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	4619      	mov	r1, r3
 800376a:	4809      	ldr	r0, [pc, #36]	; (8003790 <HAL_TIM_Encoder_MspInit+0x9c>)
 800376c:	f001 fd9a 	bl	80052a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2105      	movs	r1, #5
 8003774:	2019      	movs	r0, #25
 8003776:	f001 f9f3 	bl	8004b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800377a:	2019      	movs	r0, #25
 800377c:	f001 fa0c 	bl	8004b98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003780:	bf00      	nop
 8003782:	3728      	adds	r7, #40	; 0x28
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40010000 	.word	0x40010000
 800378c:	40023800 	.word	0x40023800
 8003790:	40021000 	.word	0x40021000

08003794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2a      	ldr	r2, [pc, #168]	; (800384c <HAL_TIM_Base_MspInit+0xb8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d116      	bne.n	80037d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	4b29      	ldr	r3, [pc, #164]	; (8003850 <HAL_TIM_Base_MspInit+0xbc>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	4a28      	ldr	r2, [pc, #160]	; (8003850 <HAL_TIM_Base_MspInit+0xbc>)
 80037b0:	f043 0302 	orr.w	r3, r3, #2
 80037b4:	6413      	str	r3, [r2, #64]	; 0x40
 80037b6:	4b26      	ldr	r3, [pc, #152]	; (8003850 <HAL_TIM_Base_MspInit+0xbc>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80037c2:	2200      	movs	r2, #0
 80037c4:	2105      	movs	r1, #5
 80037c6:	201d      	movs	r0, #29
 80037c8:	f001 f9ca 	bl	8004b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037cc:	201d      	movs	r0, #29
 80037ce:	f001 f9e3 	bl	8004b98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80037d2:	e036      	b.n	8003842 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_TIM_Base_MspInit+0xc0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d116      	bne.n	800380c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_TIM_Base_MspInit+0xbc>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	4a1a      	ldr	r2, [pc, #104]	; (8003850 <HAL_TIM_Base_MspInit+0xbc>)
 80037e8:	f043 0320 	orr.w	r3, r3, #32
 80037ec:	6413      	str	r3, [r2, #64]	; 0x40
 80037ee:	4b18      	ldr	r3, [pc, #96]	; (8003850 <HAL_TIM_Base_MspInit+0xbc>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	2105      	movs	r1, #5
 80037fe:	2037      	movs	r0, #55	; 0x37
 8003800:	f001 f9ae 	bl	8004b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003804:	2037      	movs	r0, #55	; 0x37
 8003806:	f001 f9c7 	bl	8004b98 <HAL_NVIC_EnableIRQ>
}
 800380a:	e01a      	b.n	8003842 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a11      	ldr	r2, [pc, #68]	; (8003858 <HAL_TIM_Base_MspInit+0xc4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d115      	bne.n	8003842 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <HAL_TIM_Base_MspInit+0xbc>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <HAL_TIM_Base_MspInit+0xbc>)
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	6453      	str	r3, [r2, #68]	; 0x44
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_TIM_Base_MspInit+0xbc>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003832:	2200      	movs	r2, #0
 8003834:	2105      	movs	r1, #5
 8003836:	2019      	movs	r0, #25
 8003838:	f001 f992 	bl	8004b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800383c:	2019      	movs	r0, #25
 800383e:	f001 f9ab 	bl	8004b98 <HAL_NVIC_EnableIRQ>
}
 8003842:	bf00      	nop
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40000400 	.word	0x40000400
 8003850:	40023800 	.word	0x40023800
 8003854:	40001400 	.word	0x40001400
 8003858:	40014400 	.word	0x40014400

0800385c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08c      	sub	sp, #48	; 0x30
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800386c:	2200      	movs	r2, #0
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	202d      	movs	r0, #45	; 0x2d
 8003872:	f001 f975 	bl	8004b60 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003876:	202d      	movs	r0, #45	; 0x2d
 8003878:	f001 f98e 	bl	8004b98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <HAL_InitTick+0xa4>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_InitTick+0xa4>)
 8003886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388a:	6413      	str	r3, [r2, #64]	; 0x40
 800388c:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <HAL_InitTick+0xa4>)
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003898:	f107 0210 	add.w	r2, r7, #16
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f004 ff0e 	bl	80086c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038a8:	f004 fef8 	bl	800869c <HAL_RCC_GetPCLK1Freq>
 80038ac:	4603      	mov	r3, r0
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	4a13      	ldr	r2, [pc, #76]	; (8003904 <HAL_InitTick+0xa8>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0c9b      	lsrs	r3, r3, #18
 80038bc:	3b01      	subs	r3, #1
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <HAL_InitTick+0xac>)
 80038c2:	4a12      	ldr	r2, [pc, #72]	; (800390c <HAL_InitTick+0xb0>)
 80038c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <HAL_InitTick+0xac>)
 80038c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038cc:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80038ce:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <HAL_InitTick+0xac>)
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80038d4:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <HAL_InitTick+0xac>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_InitTick+0xac>)
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80038e0:	4809      	ldr	r0, [pc, #36]	; (8003908 <HAL_InitTick+0xac>)
 80038e2:	f005 f91b 	bl	8008b1c <HAL_TIM_Base_Init>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d104      	bne.n	80038f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80038ec:	4806      	ldr	r0, [pc, #24]	; (8003908 <HAL_InitTick+0xac>)
 80038ee:	f005 f965 	bl	8008bbc <HAL_TIM_Base_Start_IT>
 80038f2:	4603      	mov	r3, r0
 80038f4:	e000      	b.n	80038f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3730      	adds	r7, #48	; 0x30
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800
 8003904:	431bde83 	.word	0x431bde83
 8003908:	20009afc 	.word	0x20009afc
 800390c:	40002000 	.word	0x40002000

08003910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003914:	e7fe      	b.n	8003914 <NMI_Handler+0x4>

08003916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800391a:	e7fe      	b.n	800391a <HardFault_Handler+0x4>

0800391c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003920:	e7fe      	b.n	8003920 <MemManage_Handler+0x4>

08003922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003926:	e7fe      	b.n	8003926 <BusFault_Handler+0x4>

08003928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800392c:	e7fe      	b.n	800392c <UsageFault_Handler+0x4>

0800392e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <DMA1_Stream4_IRQHandler+0x10>)
 8003942:	f001 fa73 	bl	8004e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20009650 	.word	0x20009650

08003950 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003954:	4803      	ldr	r0, [pc, #12]	; (8003964 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003956:	f005 fb04 	bl	8008f62 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800395a:	4803      	ldr	r0, [pc, #12]	; (8003968 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800395c:	f005 fb01 	bl	8008f62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}
 8003964:	200092d8 	.word	0x200092d8
 8003968:	2000575c 	.word	0x2000575c

0800396c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <TIM3_IRQHandler+0x10>)
 8003972:	f005 faf6 	bl	8008f62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20008a70 	.word	0x20008a70

08003980 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <SPI2_IRQHandler+0x10>)
 8003986:	f004 ffab 	bl	80088e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	200056b4 	.word	0x200056b4

08003994 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_TIM_Base_Start_IT(&htim7);								//	Turn on Timer with 100Hz period = 0,01 sec
 8003998:	4804      	ldr	r0, [pc, #16]	; (80039ac <EXTI15_10_IRQHandler+0x18>)
 800399a:	f005 f90f 	bl	8008bbc <HAL_TIM_Base_Start_IT>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800399e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80039a2:	f001 ff49 	bl	8005838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200096b0 	.word	0x200096b0

080039b0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80039b4:	4802      	ldr	r0, [pc, #8]	; (80039c0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80039b6:	f005 fad4 	bl	8008f62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20009afc 	.word	0x20009afc

080039c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

	if(tim_val == 4)											// Waiting 3 period of timer7: (0,01 *3 = 0,03 second)
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <TIM7_IRQHandler+0x5c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d11d      	bne.n	8003a0c <TIM7_IRQHandler+0x48>
	{
		tim_val = 0;
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <TIM7_IRQHandler+0x5c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)	// If button steel pressed
 80039d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039da:	4812      	ldr	r0, [pc, #72]	; (8003a24 <TIM7_IRQHandler+0x60>)
 80039dc:	f001 fefa 	bl	80057d4 <HAL_GPIO_ReadPin>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10e      	bne.n	8003a04 <TIM7_IRQHandler+0x40>
		{
			klick++;
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <TIM7_IRQHandler+0x64>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3301      	adds	r3, #1
 80039ec:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <TIM7_IRQHandler+0x64>)
 80039ee:	6013      	str	r3, [r2, #0]
			if(klick >= 15)										// it mean we have only 4 LEDs
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <TIM7_IRQHandler+0x64>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b0e      	cmp	r3, #14
 80039f6:	dd02      	ble.n	80039fe <TIM7_IRQHandler+0x3a>
			{
				klick = 0;
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <TIM7_IRQHandler+0x64>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
			}
			HAL_TIM_Base_Stop_IT(&htim7);						// Stop timer (becouse counter can turn on only encoder key)
 80039fe:	480b      	ldr	r0, [pc, #44]	; (8003a2c <TIM7_IRQHandler+0x68>)
 8003a00:	f005 f94c 	bl	8008c9c <HAL_TIM_Base_Stop_IT>
		}
		HAL_TIM_Base_Stop_IT(&htim7);
 8003a04:	4809      	ldr	r0, [pc, #36]	; (8003a2c <TIM7_IRQHandler+0x68>)
 8003a06:	f005 f949 	bl	8008c9c <HAL_TIM_Base_Stop_IT>
 8003a0a:	e004      	b.n	8003a16 <TIM7_IRQHandler+0x52>
	}
	else
	{
		tim_val++;
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <TIM7_IRQHandler+0x5c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a03      	ldr	r2, [pc, #12]	; (8003a20 <TIM7_IRQHandler+0x5c>)
 8003a14:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003a16:	4805      	ldr	r0, [pc, #20]	; (8003a2c <TIM7_IRQHandler+0x68>)
 8003a18:	f005 faa3 	bl	8008f62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003a1c:	bf00      	nop
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000778 	.word	0x20000778
 8003a24:	40021000 	.word	0x40021000
 8003a28:	20000774 	.word	0x20000774
 8003a2c:	200096b0 	.word	0x200096b0

08003a30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <OTG_FS_IRQHandler+0x10>)
 8003a36:	f003 f9b2 	bl	8006d9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	2000b258 	.word	0x2000b258

08003a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
	return 1;
 8003a48:	2301      	movs	r3, #1
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <_kill>:

int _kill(int pid, int sig)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a5e:	f00c fe81 	bl	8010764 <__errno>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2216      	movs	r2, #22
 8003a66:	601a      	str	r2, [r3, #0]
	return -1;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <_exit>:

void _exit (int status)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff ffe7 	bl	8003a54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a86:	e7fe      	b.n	8003a86 <_exit+0x12>

08003a88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	e00a      	b.n	8003ab0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a9a:	f3af 8000 	nop.w
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	60ba      	str	r2, [r7, #8]
 8003aa6:	b2ca      	uxtb	r2, r1
 8003aa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	3301      	adds	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	dbf0      	blt.n	8003a9a <_read+0x12>
	}

return len;
 8003ab8:	687b      	ldr	r3, [r7, #4]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b086      	sub	sp, #24
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e009      	b.n	8003ae8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	60ba      	str	r2, [r7, #8]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dbf1      	blt.n	8003ad4 <_write+0x12>
	}
	return len;
 8003af0:	687b      	ldr	r3, [r7, #4]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <_close>:

int _close(int file)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
	return -1;
 8003b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b22:	605a      	str	r2, [r3, #4]
	return 0;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <_isatty>:

int _isatty(int file)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
	return 1;
 8003b3a:	2301      	movs	r3, #1
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
	return 0;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b6c:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <_sbrk+0x5c>)
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <_sbrk+0x60>)
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b78:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <_sbrk+0x64>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <_sbrk+0x64>)
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <_sbrk+0x68>)
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <_sbrk+0x64>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d207      	bcs.n	8003ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b94:	f00c fde6 	bl	8010764 <__errno>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba2:	e009      	b.n	8003bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <_sbrk+0x64>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003baa:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <_sbrk+0x64>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	4a05      	ldr	r2, [pc, #20]	; (8003bc8 <_sbrk+0x64>)
 8003bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20020000 	.word	0x20020000
 8003bc4:	00000900 	.word	0x00000900
 8003bc8:	2000077c 	.word	0x2000077c
 8003bcc:	2000b670 	.word	0x2000b670

08003bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <SystemInit+0x20>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <SystemInit+0x20>)
 8003bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	71bb      	strb	r3, [r7, #6]
 8003c02:	4613      	mov	r3, r2
 8003c04:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	db3b      	blt.n	8003c86 <draw_pixel+0x92>
 8003c0e:	79bb      	ldrb	r3, [r7, #6]
 8003c10:	2b1f      	cmp	r3, #31
 8003c12:	d838      	bhi.n	8003c86 <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 8003c18:	79bb      	ldrb	r3, [r7, #6]
 8003c1a:	08db      	lsrs	r3, r3, #3
 8003c1c:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8003c1e:	7bfa      	ldrb	r2, [r7, #15]
 8003c20:	79bb      	ldrb	r3, [r7, #6]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	737b      	strb	r3, [r7, #13]
		if(color)
 8003c2c:	797b      	ldrb	r3, [r7, #5]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d012      	beq.n	8003c58 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8003c32:	7bba      	ldrb	r2, [r7, #14]
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	4917      	ldr	r1, [pc, #92]	; (8003c94 <draw_pixel+0xa0>)
 8003c38:	01d2      	lsls	r2, r2, #7
 8003c3a:	440a      	add	r2, r1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	7818      	ldrb	r0, [r3, #0]
 8003c40:	7bba      	ldrb	r2, [r7, #14]
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	7b79      	ldrb	r1, [r7, #13]
 8003c46:	4301      	orrs	r1, r0
 8003c48:	b2c8      	uxtb	r0, r1
 8003c4a:	4912      	ldr	r1, [pc, #72]	; (8003c94 <draw_pixel+0xa0>)
 8003c4c:	01d2      	lsls	r2, r2, #7
 8003c4e:	440a      	add	r2, r1
 8003c50:	4413      	add	r3, r2
 8003c52:	4602      	mov	r2, r0
 8003c54:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 8003c56:	e016      	b.n	8003c86 <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 8003c58:	7bba      	ldrb	r2, [r7, #14]
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	490d      	ldr	r1, [pc, #52]	; (8003c94 <draw_pixel+0xa0>)
 8003c5e:	01d2      	lsls	r2, r2, #7
 8003c60:	440a      	add	r2, r1
 8003c62:	4413      	add	r3, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b25a      	sxtb	r2, r3
 8003c68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	b25b      	sxtb	r3, r3
 8003c70:	4013      	ands	r3, r2
 8003c72:	b259      	sxtb	r1, r3
 8003c74:	7bba      	ldrb	r2, [r7, #14]
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	b2c8      	uxtb	r0, r1
 8003c7a:	4906      	ldr	r1, [pc, #24]	; (8003c94 <draw_pixel+0xa0>)
 8003c7c:	01d2      	lsls	r2, r2, #7
 8003c7e:	440a      	add	r2, r1
 8003c80:	4413      	add	r3, r2
 8003c82:	4602      	mov	r2, r0
 8003c84:	701a      	strb	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20009b44 	.word	0x20009b44

08003c98 <invert_pixel>:
				draw_pixel(x*3+i,y*3+j,color);
	}
}

void invert_pixel(uint8_t x, uint8_t y)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	460a      	mov	r2, r1
 8003ca2:	71fb      	strb	r3, [r7, #7]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	71bb      	strb	r3, [r7, #6]
	if(x<128 && y<32)
 8003ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	db24      	blt.n	8003cfa <invert_pixel+0x62>
 8003cb0:	79bb      	ldrb	r3, [r7, #6]
 8003cb2:	2b1f      	cmp	r3, #31
 8003cb4:	d821      	bhi.n	8003cfa <invert_pixel+0x62>
	{
		uint8_t pixel = 0x01;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
		gddram[y>>3][x] ^= pixel<<(y%8);
 8003cba:	79bb      	ldrb	r3, [r7, #6]
 8003cbc:	08db      	lsrs	r3, r3, #3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	4910      	ldr	r1, [pc, #64]	; (8003d08 <invert_pixel+0x70>)
 8003cc6:	01d2      	lsls	r2, r2, #7
 8003cc8:	440a      	add	r2, r1
 8003cca:	4413      	add	r3, r2
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	b25a      	sxtb	r2, r3
 8003cd0:	7bf9      	ldrb	r1, [r7, #15]
 8003cd2:	79bb      	ldrb	r3, [r7, #6]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	b25b      	sxtb	r3, r3
 8003cde:	4053      	eors	r3, r2
 8003ce0:	b259      	sxtb	r1, r3
 8003ce2:	79bb      	ldrb	r3, [r7, #6]
 8003ce4:	08db      	lsrs	r3, r3, #3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	b2c8      	uxtb	r0, r1
 8003cee:	4906      	ldr	r1, [pc, #24]	; (8003d08 <invert_pixel+0x70>)
 8003cf0:	01d2      	lsls	r2, r2, #7
 8003cf2:	440a      	add	r2, r1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	701a      	strb	r2, [r3, #0]
	}
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20009b44 	.word	0x20009b44

08003d0c <invert_rectangle>:

void invert_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4604      	mov	r4, r0
 8003d14:	4608      	mov	r0, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	71fb      	strb	r3, [r7, #7]
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71bb      	strb	r3, [r7, #6]
 8003d22:	460b      	mov	r3, r1
 8003d24:	717b      	strb	r3, [r7, #5]
 8003d26:	4613      	mov	r3, r2
 8003d28:	713b      	strb	r3, [r7, #4]
	uint8_t i,j;
	for(i=x0;i<x1;i++)
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	e012      	b.n	8003d56 <invert_rectangle+0x4a>
		for(j=y0;j<y1;j++)
 8003d30:	79bb      	ldrb	r3, [r7, #6]
 8003d32:	73bb      	strb	r3, [r7, #14]
 8003d34:	e008      	b.n	8003d48 <invert_rectangle+0x3c>
			invert_pixel(i,j);
 8003d36:	7bba      	ldrb	r2, [r7, #14]
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ffab 	bl	8003c98 <invert_pixel>
		for(j=y0;j<y1;j++)
 8003d42:	7bbb      	ldrb	r3, [r7, #14]
 8003d44:	3301      	adds	r3, #1
 8003d46:	73bb      	strb	r3, [r7, #14]
 8003d48:	7bba      	ldrb	r2, [r7, #14]
 8003d4a:	793b      	ldrb	r3, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d3f2      	bcc.n	8003d36 <invert_rectangle+0x2a>
	for(i=x0;i<x1;i++)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	3301      	adds	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	797b      	ldrb	r3, [r7, #5]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d3e8      	bcc.n	8003d30 <invert_rectangle+0x24>
}
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd90      	pop	{r4, r7, pc}

08003d68 <clear>:

void clear(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i=0;i<4;i++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	71fb      	strb	r3, [r7, #7]
 8003d72:	e014      	b.n	8003d9e <clear+0x36>
		for(j=0;j<128;j++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	71bb      	strb	r3, [r7, #6]
 8003d78:	e00a      	b.n	8003d90 <clear+0x28>
			gddram[i][j]=0x00;
 8003d7a:	79fa      	ldrb	r2, [r7, #7]
 8003d7c:	79bb      	ldrb	r3, [r7, #6]
 8003d7e:	490d      	ldr	r1, [pc, #52]	; (8003db4 <clear+0x4c>)
 8003d80:	01d2      	lsls	r2, r2, #7
 8003d82:	440a      	add	r2, r1
 8003d84:	4413      	add	r3, r2
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
		for(j=0;j<128;j++)
 8003d8a:	79bb      	ldrb	r3, [r7, #6]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	71bb      	strb	r3, [r7, #6]
 8003d90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	daf0      	bge.n	8003d7a <clear+0x12>
	for(i=0;i<4;i++)
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	71fb      	strb	r3, [r7, #7]
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d9e7      	bls.n	8003d74 <clear+0xc>
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20009b44 	.word	0x20009b44

08003db8 <line_h>:
			break;
	}
}

void line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4623      	mov	r3, r4
 8003dc8:	71fb      	strb	r3, [r7, #7]
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71bb      	strb	r3, [r7, #6]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	717b      	strb	r3, [r7, #5]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	713b      	strb	r3, [r7, #4]
	if(x0>x1)
 8003dd6:	79fa      	ldrb	r2, [r7, #7]
 8003dd8:	79bb      	ldrb	r3, [r7, #6]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d905      	bls.n	8003dea <line_h+0x32>
	{
		uint8_t temp = x0;
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	757b      	strb	r3, [r7, #21]
		x0 = x1;
 8003de2:	79bb      	ldrb	r3, [r7, #6]
 8003de4:	71fb      	strb	r3, [r7, #7]
		x1 = temp;
 8003de6:	7d7b      	ldrb	r3, [r7, #21]
 8003de8:	71bb      	strb	r3, [r7, #6]
	}
	uint8_t i,j;
	switch(mode)
 8003dea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	f000 80ac 	beq.w	8003f4c <line_h+0x194>
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	f300 80fb 	bgt.w	8003ff0 <line_h+0x238>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d054      	beq.n	8003ea8 <line_h+0xf0>
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	f040 80f6 	bne.w	8003ff0 <line_h+0x238>
	{
		case add :
			if(width%2)
 8003e04:	793b      	ldrb	r3, [r7, #4]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d027      	beq.n	8003e60 <line_h+0xa8>
			{
				uint8_t start = y0-(width-1)/2;
 8003e10:	793b      	ldrb	r3, [r7, #4]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	0fda      	lsrs	r2, r3, #31
 8003e16:	4413      	add	r3, r2
 8003e18:	105b      	asrs	r3, r3, #1
 8003e1a:	425b      	negs	r3, r3
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	797b      	ldrb	r3, [r7, #5]
 8003e20:	4413      	add	r3, r2
 8003e22:	747b      	strb	r3, [r7, #17]
				for(i=0;i<width;i++)
 8003e24:	2300      	movs	r3, #0
 8003e26:	75fb      	strb	r3, [r7, #23]
 8003e28:	e015      	b.n	8003e56 <line_h+0x9e>
					for(j=x0;j<=x1;j++)
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	75bb      	strb	r3, [r7, #22]
 8003e2e:	e00b      	b.n	8003e48 <line_h+0x90>
						draw_pixel(j,start+i,1);
 8003e30:	7c7a      	ldrb	r2, [r7, #17]
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	4413      	add	r3, r2
 8003e36:	b2d9      	uxtb	r1, r3
 8003e38:	7dbb      	ldrb	r3, [r7, #22]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fed9 	bl	8003bf4 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003e42:	7dbb      	ldrb	r3, [r7, #22]
 8003e44:	3301      	adds	r3, #1
 8003e46:	75bb      	strb	r3, [r7, #22]
 8003e48:	7dba      	ldrb	r2, [r7, #22]
 8003e4a:	79bb      	ldrb	r3, [r7, #6]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d9ef      	bls.n	8003e30 <line_h+0x78>
				for(i=0;i<width;i++)
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	3301      	adds	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
 8003e56:	7dfa      	ldrb	r2, [r7, #23]
 8003e58:	793b      	ldrb	r3, [r7, #4]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d3e5      	bcc.n	8003e2a <line_h+0x72>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,1);
			}
			break;
 8003e5e:	e0c7      	b.n	8003ff0 <line_h+0x238>
				uint8_t start = y0-width/2;
 8003e60:	793b      	ldrb	r3, [r7, #4]
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	797a      	ldrb	r2, [r7, #5]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	74bb      	strb	r3, [r7, #18]
				for(i=0;i<width;i++)
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	75fb      	strb	r3, [r7, #23]
 8003e70:	e015      	b.n	8003e9e <line_h+0xe6>
					for(j=x0;j<=x1;j++)
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	75bb      	strb	r3, [r7, #22]
 8003e76:	e00b      	b.n	8003e90 <line_h+0xd8>
						draw_pixel(j,start+i,1);
 8003e78:	7cba      	ldrb	r2, [r7, #18]
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	b2d9      	uxtb	r1, r3
 8003e80:	7dbb      	ldrb	r3, [r7, #22]
 8003e82:	2201      	movs	r2, #1
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff feb5 	bl	8003bf4 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003e8a:	7dbb      	ldrb	r3, [r7, #22]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	75bb      	strb	r3, [r7, #22]
 8003e90:	7dba      	ldrb	r2, [r7, #22]
 8003e92:	79bb      	ldrb	r3, [r7, #6]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d9ef      	bls.n	8003e78 <line_h+0xc0>
				for(i=0;i<width;i++)
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	75fb      	strb	r3, [r7, #23]
 8003e9e:	7dfa      	ldrb	r2, [r7, #23]
 8003ea0:	793b      	ldrb	r3, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d3e5      	bcc.n	8003e72 <line_h+0xba>
			break;
 8003ea6:	e0a3      	b.n	8003ff0 <line_h+0x238>

		case erase :
			if(width%2)
 8003ea8:	793b      	ldrb	r3, [r7, #4]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d027      	beq.n	8003f04 <line_h+0x14c>
			{
				uint8_t start = y0-(width-1)/2;
 8003eb4:	793b      	ldrb	r3, [r7, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	0fda      	lsrs	r2, r3, #31
 8003eba:	4413      	add	r3, r2
 8003ebc:	105b      	asrs	r3, r3, #1
 8003ebe:	425b      	negs	r3, r3
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	797b      	ldrb	r3, [r7, #5]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	73fb      	strb	r3, [r7, #15]
				for(i=0;i<width;i++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	75fb      	strb	r3, [r7, #23]
 8003ecc:	e015      	b.n	8003efa <line_h+0x142>
					for(j=x0;j<=x1;j++)
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	75bb      	strb	r3, [r7, #22]
 8003ed2:	e00b      	b.n	8003eec <line_h+0x134>
						draw_pixel(j,start+i,0);
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	4413      	add	r3, r2
 8003eda:	b2d9      	uxtb	r1, r3
 8003edc:	7dbb      	ldrb	r3, [r7, #22]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fe87 	bl	8003bf4 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003ee6:	7dbb      	ldrb	r3, [r7, #22]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	75bb      	strb	r3, [r7, #22]
 8003eec:	7dba      	ldrb	r2, [r7, #22]
 8003eee:	79bb      	ldrb	r3, [r7, #6]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d9ef      	bls.n	8003ed4 <line_h+0x11c>
				for(i=0;i<width;i++)
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
 8003efa:	7dfa      	ldrb	r2, [r7, #23]
 8003efc:	793b      	ldrb	r3, [r7, #4]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d3e5      	bcc.n	8003ece <line_h+0x116>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,0);
			}
			break;
 8003f02:	e075      	b.n	8003ff0 <line_h+0x238>
				uint8_t start = y0-width/2;
 8003f04:	793b      	ldrb	r3, [r7, #4]
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	797a      	ldrb	r2, [r7, #5]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	743b      	strb	r3, [r7, #16]
				for(i=0;i<width;i++)
 8003f10:	2300      	movs	r3, #0
 8003f12:	75fb      	strb	r3, [r7, #23]
 8003f14:	e015      	b.n	8003f42 <line_h+0x18a>
					for(j=x0;j<=x1;j++)
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	75bb      	strb	r3, [r7, #22]
 8003f1a:	e00b      	b.n	8003f34 <line_h+0x17c>
						draw_pixel(j,start+i,0);
 8003f1c:	7c3a      	ldrb	r2, [r7, #16]
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
 8003f20:	4413      	add	r3, r2
 8003f22:	b2d9      	uxtb	r1, r3
 8003f24:	7dbb      	ldrb	r3, [r7, #22]
 8003f26:	2200      	movs	r2, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fe63 	bl	8003bf4 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003f2e:	7dbb      	ldrb	r3, [r7, #22]
 8003f30:	3301      	adds	r3, #1
 8003f32:	75bb      	strb	r3, [r7, #22]
 8003f34:	7dba      	ldrb	r2, [r7, #22]
 8003f36:	79bb      	ldrb	r3, [r7, #6]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d9ef      	bls.n	8003f1c <line_h+0x164>
				for(i=0;i<width;i++)
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
 8003f42:	7dfa      	ldrb	r2, [r7, #23]
 8003f44:	793b      	ldrb	r3, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d3e5      	bcc.n	8003f16 <line_h+0x15e>
			break;
 8003f4a:	e051      	b.n	8003ff0 <line_h+0x238>

		case invert :
			if(width%2)
 8003f4c:	793b      	ldrb	r3, [r7, #4]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d027      	beq.n	8003fa8 <line_h+0x1f0>
			{
				uint8_t start = y0-(width-1)/2;
 8003f58:	793b      	ldrb	r3, [r7, #4]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	0fda      	lsrs	r2, r3, #31
 8003f5e:	4413      	add	r3, r2
 8003f60:	105b      	asrs	r3, r3, #1
 8003f62:	425b      	negs	r3, r3
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	797b      	ldrb	r3, [r7, #5]
 8003f68:	4413      	add	r3, r2
 8003f6a:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<width;i++)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	75fb      	strb	r3, [r7, #23]
 8003f70:	e015      	b.n	8003f9e <line_h+0x1e6>
					for(j=x0;j<=x1;j++)
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	75bb      	strb	r3, [r7, #22]
 8003f76:	e00b      	b.n	8003f90 <line_h+0x1d8>
						invert_pixel(j,start+i);
 8003f78:	7cfa      	ldrb	r2, [r7, #19]
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	7dbb      	ldrb	r3, [r7, #22]
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fe87 	bl	8003c98 <invert_pixel>
					for(j=x0;j<=x1;j++)
 8003f8a:	7dbb      	ldrb	r3, [r7, #22]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	75bb      	strb	r3, [r7, #22]
 8003f90:	7dba      	ldrb	r2, [r7, #22]
 8003f92:	79bb      	ldrb	r3, [r7, #6]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d9ef      	bls.n	8003f78 <line_h+0x1c0>
				for(i=0;i<width;i++)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
 8003f9e:	7dfa      	ldrb	r2, [r7, #23]
 8003fa0:	793b      	ldrb	r3, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d3e5      	bcc.n	8003f72 <line_h+0x1ba>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						invert_pixel(j,start+i);
			}
			break;
 8003fa6:	e022      	b.n	8003fee <line_h+0x236>
				uint8_t start = y0-width/2;
 8003fa8:	793b      	ldrb	r3, [r7, #4]
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	797a      	ldrb	r2, [r7, #5]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	753b      	strb	r3, [r7, #20]
				for(i=0;i<width;i++)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	75fb      	strb	r3, [r7, #23]
 8003fb8:	e015      	b.n	8003fe6 <line_h+0x22e>
					for(j=x0;j<=x1;j++)
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	75bb      	strb	r3, [r7, #22]
 8003fbe:	e00b      	b.n	8003fd8 <line_h+0x220>
						invert_pixel(j,start+i);
 8003fc0:	7d3a      	ldrb	r2, [r7, #20]
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	7dbb      	ldrb	r3, [r7, #22]
 8003fca:	4611      	mov	r1, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fe63 	bl	8003c98 <invert_pixel>
					for(j=x0;j<=x1;j++)
 8003fd2:	7dbb      	ldrb	r3, [r7, #22]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	75bb      	strb	r3, [r7, #22]
 8003fd8:	7dba      	ldrb	r2, [r7, #22]
 8003fda:	79bb      	ldrb	r3, [r7, #6]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d9ef      	bls.n	8003fc0 <line_h+0x208>
				for(i=0;i<width;i++)
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
 8003fe6:	7dfa      	ldrb	r2, [r7, #23]
 8003fe8:	793b      	ldrb	r3, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d3e5      	bcc.n	8003fba <line_h+0x202>
			break;
 8003fee:	bf00      	nop

	}
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd90      	pop	{r4, r7, pc}

08003ff8 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4604      	mov	r4, r0
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	461a      	mov	r2, r3
 8004006:	4623      	mov	r3, r4
 8004008:	71fb      	strb	r3, [r7, #7]
 800400a:	4603      	mov	r3, r0
 800400c:	71bb      	strb	r3, [r7, #6]
 800400e:	460b      	mov	r3, r1
 8004010:	717b      	strb	r3, [r7, #5]
 8004012:	4613      	mov	r3, r2
 8004014:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
 800401e:	e04d      	b.n	80040bc <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 8004020:	2300      	movs	r3, #0
 8004022:	75bb      	strb	r3, [r7, #22]
 8004024:	e042      	b.n	80040ac <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	08db      	lsrs	r3, r3, #3
 800402a:	b2da      	uxtb	r2, r3
 800402c:	7dbb      	ldrb	r3, [r7, #22]
 800402e:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004032:	fb11 f303 	smulbb	r3, r1, r3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	4413      	add	r3, r2
 800403a:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4413      	add	r3, r2
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	43db      	mvns	r3, r3
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	2201      	movs	r2, #1
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 8004056:	7bba      	ldrb	r2, [r7, #14]
 8004058:	7b7b      	ldrb	r3, [r7, #13]
 800405a:	4013      	ands	r3, r2
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00f      	beq.n	8004082 <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 8004062:	79fa      	ldrb	r2, [r7, #7]
 8004064:	797b      	ldrb	r3, [r7, #5]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	b2da      	uxtb	r2, r3
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	4413      	add	r3, r2
 800406e:	b2d8      	uxtb	r0, r3
 8004070:	7dba      	ldrb	r2, [r7, #22]
 8004072:	79bb      	ldrb	r3, [r7, #6]
 8004074:	4413      	add	r3, r2
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2201      	movs	r2, #1
 800407a:	4619      	mov	r1, r3
 800407c:	f7ff fdba 	bl	8003bf4 <draw_pixel>
 8004080:	e00e      	b.n	80040a0 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8004082:	79fa      	ldrb	r2, [r7, #7]
 8004084:	797b      	ldrb	r3, [r7, #5]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	b2da      	uxtb	r2, r3
 800408a:	7dfb      	ldrb	r3, [r7, #23]
 800408c:	4413      	add	r3, r2
 800408e:	b2d8      	uxtb	r0, r3
 8004090:	7dba      	ldrb	r2, [r7, #22]
 8004092:	79bb      	ldrb	r3, [r7, #6]
 8004094:	4413      	add	r3, r2
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2200      	movs	r2, #0
 800409a:	4619      	mov	r1, r3
 800409c:	f7ff fdaa 	bl	8003bf4 <draw_pixel>
		for (y=0; y<height; y++)
 80040a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	3301      	adds	r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	75bb      	strb	r3, [r7, #22]
 80040ac:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80040b0:	793b      	ldrb	r3, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	dbb7      	blt.n	8004026 <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	3301      	adds	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
 80040bc:	7dfa      	ldrb	r2, [r7, #23]
 80040be:	797b      	ldrb	r3, [r7, #5]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d3ad      	bcc.n	8004020 <graphics_Glyph+0x28>
		}
	}
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd90      	pop	{r4, r7, pc}
	...

080040d0 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b089      	sub	sp, #36	; 0x24
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	4603      	mov	r3, r0
 80040da:	71fb      	strb	r3, [r7, #7]
 80040dc:	460b      	mov	r3, r1
 80040de:	71bb      	strb	r3, [r7, #6]
 80040e0:	4613      	mov	r3, r2
 80040e2:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 80040e8:	e081      	b.n	80041ee <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 80040f0:	797a      	ldrb	r2, [r7, #5]
 80040f2:	4944      	ldr	r1, [pc, #272]	; (8004204 <graphics_text+0x134>)
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	3310      	adds	r3, #16
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	7dba      	ldrb	r2, [r7, #22]
 8004104:	429a      	cmp	r2, r3
 8004106:	d30b      	bcc.n	8004120 <graphics_text+0x50>
 8004108:	797a      	ldrb	r2, [r7, #5]
 800410a:	493e      	ldr	r1, [pc, #248]	; (8004204 <graphics_text+0x134>)
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	3311      	adds	r3, #17
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	7dba      	ldrb	r2, [r7, #22]
 800411c:	429a      	cmp	r2, r3
 800411e:	d909      	bls.n	8004134 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 8004120:	797a      	ldrb	r2, [r7, #5]
 8004122:	4938      	ldr	r1, [pc, #224]	; (8004204 <graphics_text+0x134>)
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	3312      	adds	r3, #18
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 8004134:	797a      	ldrb	r2, [r7, #5]
 8004136:	4933      	ldr	r1, [pc, #204]	; (8004204 <graphics_text+0x134>)
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	3310      	adds	r3, #16
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	7dba      	ldrb	r2, [r7, #22]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 800414c:	797a      	ldrb	r2, [r7, #5]
 800414e:	492d      	ldr	r1, [pc, #180]	; (8004204 <graphics_text+0x134>)
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	3308      	adds	r3, #8
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8004160:	7d7b      	ldrb	r3, [r7, #21]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10c      	bne.n	8004180 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 8004166:	797a      	ldrb	r2, [r7, #5]
 8004168:	4926      	ldr	r1, [pc, #152]	; (8004204 <graphics_text+0x134>)
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	330c      	adds	r3, #12
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	7dbb      	ldrb	r3, [r7, #22]
 800417a:	4413      	add	r3, r2
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8004180:	797a      	ldrb	r2, [r7, #5]
 8004182:	4920      	ldr	r1, [pc, #128]	; (8004204 <graphics_text+0x134>)
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3301      	adds	r3, #1
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 8004194:	797a      	ldrb	r2, [r7, #5]
 8004196:	491b      	ldr	r1, [pc, #108]	; (8004204 <graphics_text+0x134>)
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 80041a6:	797a      	ldrb	r2, [r7, #5]
 80041a8:	4916      	ldr	r1, [pc, #88]	; (8004204 <graphics_text+0x134>)
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	3304      	adds	r3, #4
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	7dbb      	ldrb	r3, [r7, #22]
 80041ba:	7cf9      	ldrb	r1, [r7, #19]
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	7d39      	ldrb	r1, [r7, #20]
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]


		x+=width;
 80041ca:	7dfa      	ldrb	r2, [r7, #23]
 80041cc:	7d7b      	ldrb	r3, [r7, #21]
 80041ce:	4413      	add	r3, r2
 80041d0:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 80041d2:	7d3c      	ldrb	r4, [r7, #20]
 80041d4:	7d7a      	ldrb	r2, [r7, #21]
 80041d6:	79b9      	ldrb	r1, [r7, #6]
 80041d8:	7df8      	ldrb	r0, [r7, #23]
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	4623      	mov	r3, r4
 80041e4:	f7ff ff08 	bl	8003ff8 <graphics_Glyph>
		str++;								/* point to next character in string */
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	3301      	adds	r3, #1
 80041ec:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f47f af79 	bne.w	80040ea <graphics_text+0x1a>
	}

}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd90      	pop	{r4, r7, pc}
 8004202:	bf00      	nop
 8004204:	08013a28 	.word	0x08013a28

08004208 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af02      	add	r7, sp, #8
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 8004212:	2300      	movs	r3, #0
 8004214:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 800421a:	f107 020c 	add.w	r2, r7, #12
 800421e:	2332      	movs	r3, #50	; 0x32
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	2302      	movs	r3, #2
 8004224:	2178      	movs	r1, #120	; 0x78
 8004226:	4803      	ldr	r0, [pc, #12]	; (8004234 <ssd1306_command+0x2c>)
 8004228:	f001 fc6e 	bl	8005b08 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20005610 	.word	0x20005610

08004238 <oled_update>:

void oled_update(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 800423e:	2021      	movs	r0, #33	; 0x21
 8004240:	f7ff ffe2 	bl	8004208 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 8004244:	2000      	movs	r0, #0
 8004246:	f7ff ffdf 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 800424a:	207f      	movs	r0, #127	; 0x7f
 800424c:	f7ff ffdc 	bl	8004208 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8004250:	2022      	movs	r0, #34	; 0x22
 8004252:	f7ff ffd9 	bl	8004208 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 8004256:	2000      	movs	r0, #0
 8004258:	f7ff ffd6 	bl	8004208 <ssd1306_command>
  ssd1306_command(3); // Page end address
 800425c:	2003      	movs	r0, #3
 800425e:	f7ff ffd3 	bl	8004208 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 8004262:	2340      	movs	r3, #64	; 0x40
 8004264:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 8004266:	2300      	movs	r3, #0
 8004268:	82fb      	strh	r3, [r7, #22]
 800426a:	e02d      	b.n	80042c8 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 800426c:	2300      	movs	r3, #0
 800426e:	757b      	strb	r3, [r7, #21]
 8004270:	e024      	b.n	80042bc <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 8004272:	2301      	movs	r3, #1
 8004274:	753b      	strb	r3, [r7, #20]
 8004276:	e012      	b.n	800429e <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8004278:	8af9      	ldrh	r1, [r7, #22]
 800427a:	7d7a      	ldrb	r2, [r7, #21]
 800427c:	7d3b      	ldrb	r3, [r7, #20]
 800427e:	4413      	add	r3, r2
 8004280:	1e5a      	subs	r2, r3, #1
 8004282:	7d3b      	ldrb	r3, [r7, #20]
 8004284:	4814      	ldr	r0, [pc, #80]	; (80042d8 <oled_update+0xa0>)
 8004286:	01c9      	lsls	r1, r1, #7
 8004288:	4401      	add	r1, r0
 800428a:	440a      	add	r2, r1
 800428c:	7812      	ldrb	r2, [r2, #0]
 800428e:	f107 0118 	add.w	r1, r7, #24
 8004292:	440b      	add	r3, r1
 8004294:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8004298:	7d3b      	ldrb	r3, [r7, #20]
 800429a:	3301      	adds	r3, #1
 800429c:	753b      	strb	r3, [r7, #20]
 800429e:	7d3b      	ldrb	r3, [r7, #20]
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d9e9      	bls.n	8004278 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 80042a4:	463a      	mov	r2, r7
 80042a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2311      	movs	r3, #17
 80042ae:	2178      	movs	r1, #120	; 0x78
 80042b0:	480a      	ldr	r0, [pc, #40]	; (80042dc <oled_update+0xa4>)
 80042b2:	f001 fc29 	bl	8005b08 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 80042b6:	7d7b      	ldrb	r3, [r7, #21]
 80042b8:	3310      	adds	r3, #16
 80042ba:	757b      	strb	r3, [r7, #21]
 80042bc:	7d7b      	ldrb	r3, [r7, #21]
 80042be:	2b7e      	cmp	r3, #126	; 0x7e
 80042c0:	d9d7      	bls.n	8004272 <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 80042c2:	8afb      	ldrh	r3, [r7, #22]
 80042c4:	3301      	adds	r3, #1
 80042c6:	82fb      	strh	r3, [r7, #22]
 80042c8:	8afb      	ldrh	r3, [r7, #22]
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d9ce      	bls.n	800426c <oled_update+0x34>
		}
	}

}
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20009b44 	.word	0x20009b44
 80042dc:	20005610 	.word	0x20005610

080042e0 <oled_init>:

void oled_init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 80042e6:	20ae      	movs	r0, #174	; 0xae
 80042e8:	f7ff ff8e 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 80042ec:	20d5      	movs	r0, #213	; 0xd5
 80042ee:	f7ff ff8b 	bl	8004208 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 80042f2:	2080      	movs	r0, #128	; 0x80
 80042f4:	f7ff ff88 	bl	8004208 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 80042f8:	20a8      	movs	r0, #168	; 0xa8
 80042fa:	f7ff ff85 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 80042fe:	201f      	movs	r0, #31
 8004300:	f7ff ff82 	bl	8004208 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8004304:	20d3      	movs	r0, #211	; 0xd3
 8004306:	f7ff ff7f 	bl	8004208 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 800430a:	2000      	movs	r0, #0
 800430c:	f7ff ff7c 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8004310:	2040      	movs	r0, #64	; 0x40
 8004312:	f7ff ff79 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8004316:	208d      	movs	r0, #141	; 0x8d
 8004318:	f7ff ff76 	bl	8004208 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 800431c:	2014      	movs	r0, #20
 800431e:	f7ff ff73 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8004322:	2020      	movs	r0, #32
 8004324:	f7ff ff70 	bl	8004208 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8004328:	2000      	movs	r0, #0
 800432a:	f7ff ff6d 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 800432e:	20a1      	movs	r0, #161	; 0xa1
 8004330:	f7ff ff6a 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 8004334:	20c8      	movs	r0, #200	; 0xc8
 8004336:	f7ff ff67 	bl	8004208 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 800433a:	20da      	movs	r0, #218	; 0xda
 800433c:	f7ff ff64 	bl	8004208 <ssd1306_command>
  ssd1306_command(0x02);
 8004340:	2002      	movs	r0, #2
 8004342:	f7ff ff61 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 8004346:	2081      	movs	r0, #129	; 0x81
 8004348:	f7ff ff5e 	bl	8004208 <ssd1306_command>
  ssd1306_command(0x8F);
 800434c:	208f      	movs	r0, #143	; 0x8f
 800434e:	f7ff ff5b 	bl	8004208 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8004352:	20d9      	movs	r0, #217	; 0xd9
 8004354:	f7ff ff58 	bl	8004208 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8004358:	20f1      	movs	r0, #241	; 0xf1
 800435a:	f7ff ff55 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 800435e:	20db      	movs	r0, #219	; 0xdb
 8004360:	f7ff ff52 	bl	8004208 <ssd1306_command>
  ssd1306_command(0x40);
 8004364:	2040      	movs	r0, #64	; 0x40
 8004366:	f7ff ff4f 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 800436a:	20a4      	movs	r0, #164	; 0xa4
 800436c:	f7ff ff4c 	bl	8004208 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8004370:	20a6      	movs	r0, #166	; 0xa6
 8004372:	f7ff ff49 	bl	8004208 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 8004376:	202e      	movs	r0, #46	; 0x2e
 8004378:	f7ff ff46 	bl	8004208 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 800437c:	20af      	movs	r0, #175	; 0xaf
 800437e:	f7ff ff43 	bl	8004208 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8004382:	2300      	movs	r3, #0
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	e013      	b.n	80043b0 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8004388:	2300      	movs	r3, #0
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	e00a      	b.n	80043a4 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 800438e:	4a0c      	ldr	r2, [pc, #48]	; (80043c0 <oled_init+0xe0>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	01db      	lsls	r3, r3, #7
 8004394:	441a      	add	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	4413      	add	r3, r2
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b7f      	cmp	r3, #127	; 0x7f
 80043a8:	ddf1      	ble.n	800438e <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3301      	adds	r3, #1
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	dde8      	ble.n	8004388 <oled_init+0xa8>
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20009b44 	.word	0x20009b44

080043c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043c8:	480d      	ldr	r0, [pc, #52]	; (8004400 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043ca:	490e      	ldr	r1, [pc, #56]	; (8004404 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043cc:	4a0e      	ldr	r2, [pc, #56]	; (8004408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043d0:	e002      	b.n	80043d8 <LoopCopyDataInit>

080043d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043d6:	3304      	adds	r3, #4

080043d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043dc:	d3f9      	bcc.n	80043d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043de:	4a0b      	ldr	r2, [pc, #44]	; (800440c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043e0:	4c0b      	ldr	r4, [pc, #44]	; (8004410 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043e4:	e001      	b.n	80043ea <LoopFillZerobss>

080043e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043e8:	3204      	adds	r2, #4

080043ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043ec:	d3fb      	bcc.n	80043e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043ee:	f7ff fbef 	bl	8003bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043f2:	f00c fab3 	bl	801095c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043f6:	f7fd f86f 	bl	80014d8 <main>
  bx  lr    
 80043fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004404:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8004408:	080162b4 	.word	0x080162b4
  ldr r2, =_sbss
 800440c:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8004410:	2000b670 	.word	0x2000b670

08004414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004414:	e7fe      	b.n	8004414 <ADC_IRQHandler>
	...

08004418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <HAL_Init+0x40>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <HAL_Init+0x40>)
 8004422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_Init+0x40>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <HAL_Init+0x40>)
 800442e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004434:	4b08      	ldr	r3, [pc, #32]	; (8004458 <HAL_Init+0x40>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a07      	ldr	r2, [pc, #28]	; (8004458 <HAL_Init+0x40>)
 800443a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004440:	2003      	movs	r0, #3
 8004442:	f000 fb82 	bl	8004b4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004446:	200f      	movs	r0, #15
 8004448:	f7ff fa08 	bl	800385c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800444c:	f7fe ff06 	bl	800325c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40023c00 	.word	0x40023c00

0800445c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_IncTick+0x20>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_IncTick+0x24>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4413      	add	r3, r2
 800446c:	4a04      	ldr	r2, [pc, #16]	; (8004480 <HAL_IncTick+0x24>)
 800446e:	6013      	str	r3, [r2, #0]
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000008 	.word	0x20000008
 8004480:	20009d44 	.word	0x20009d44

08004484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return uwTick;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_GetTick+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20009d44 	.word	0x20009d44

0800449c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044a4:	f7ff ffee 	bl	8004484 <HAL_GetTick>
 80044a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044b4:	d005      	beq.n	80044c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_Delay+0x44>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044c2:	bf00      	nop
 80044c4:	f7ff ffde 	bl	8004484 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d8f7      	bhi.n	80044c4 <HAL_Delay+0x28>
  {
  }
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000008 	.word	0x20000008

080044e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e033      	b.n	8004562 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fe fed6 	bl	80032b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d118      	bne.n	8004554 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800452a:	f023 0302 	bic.w	r3, r3, #2
 800452e:	f043 0202 	orr.w	r2, r3, #2
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f93a 	bl	80047b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
 8004552:	e001      	b.n	8004558 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004560:	7bfb      	ldrb	r3, [r7, #15]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x1c>
 8004584:	2302      	movs	r3, #2
 8004586:	e105      	b.n	8004794 <HAL_ADC_ConfigChannel+0x228>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b09      	cmp	r3, #9
 8004596:	d925      	bls.n	80045e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68d9      	ldr	r1, [r3, #12]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	4613      	mov	r3, r2
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	3b1e      	subs	r3, #30
 80045ae:	2207      	movs	r2, #7
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43da      	mvns	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	400a      	ands	r2, r1
 80045bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68d9      	ldr	r1, [r3, #12]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	4618      	mov	r0, r3
 80045d0:	4603      	mov	r3, r0
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4403      	add	r3, r0
 80045d6:	3b1e      	subs	r3, #30
 80045d8:	409a      	lsls	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	e022      	b.n	800462a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6919      	ldr	r1, [r3, #16]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	4613      	mov	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4413      	add	r3, r2
 80045f8:	2207      	movs	r2, #7
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43da      	mvns	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	400a      	ands	r2, r1
 8004606:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6919      	ldr	r1, [r3, #16]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	4618      	mov	r0, r3
 800461a:	4603      	mov	r3, r0
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	4403      	add	r3, r0
 8004620:	409a      	lsls	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b06      	cmp	r3, #6
 8004630:	d824      	bhi.n	800467c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	3b05      	subs	r3, #5
 8004644:	221f      	movs	r2, #31
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	400a      	ands	r2, r1
 8004652:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	4618      	mov	r0, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	3b05      	subs	r3, #5
 800466e:	fa00 f203 	lsl.w	r2, r0, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	635a      	str	r2, [r3, #52]	; 0x34
 800467a:	e04c      	b.n	8004716 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b0c      	cmp	r3, #12
 8004682:	d824      	bhi.n	80046ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	3b23      	subs	r3, #35	; 0x23
 8004696:	221f      	movs	r2, #31
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43da      	mvns	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	400a      	ands	r2, r1
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	4618      	mov	r0, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	3b23      	subs	r3, #35	; 0x23
 80046c0:	fa00 f203 	lsl.w	r2, r0, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
 80046cc:	e023      	b.n	8004716 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	3b41      	subs	r3, #65	; 0x41
 80046e0:	221f      	movs	r2, #31
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43da      	mvns	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	400a      	ands	r2, r1
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	4618      	mov	r0, r3
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	3b41      	subs	r3, #65	; 0x41
 800470a:	fa00 f203 	lsl.w	r2, r0, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004716:	4b22      	ldr	r3, [pc, #136]	; (80047a0 <HAL_ADC_ConfigChannel+0x234>)
 8004718:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <HAL_ADC_ConfigChannel+0x238>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d109      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x1cc>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b12      	cmp	r3, #18
 800472a:	d105      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <HAL_ADC_ConfigChannel+0x238>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d123      	bne.n	800478a <HAL_ADC_ConfigChannel+0x21e>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b10      	cmp	r3, #16
 8004748:	d003      	beq.n	8004752 <HAL_ADC_ConfigChannel+0x1e6>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b11      	cmp	r3, #17
 8004750:	d11b      	bne.n	800478a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b10      	cmp	r3, #16
 8004764:	d111      	bne.n	800478a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_ADC_ConfigChannel+0x23c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a10      	ldr	r2, [pc, #64]	; (80047ac <HAL_ADC_ConfigChannel+0x240>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	0c9a      	lsrs	r2, r3, #18
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800477c:	e002      	b.n	8004784 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	3b01      	subs	r3, #1
 8004782:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f9      	bne.n	800477e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40012300 	.word	0x40012300
 80047a4:	40012000 	.word	0x40012000
 80047a8:	20000000 	.word	0x20000000
 80047ac:	431bde83 	.word	0x431bde83

080047b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047b8:	4b79      	ldr	r3, [pc, #484]	; (80049a0 <ADC_Init+0x1f0>)
 80047ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	021a      	lsls	r2, r3, #8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800482a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6899      	ldr	r1, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	4a58      	ldr	r2, [pc, #352]	; (80049a4 <ADC_Init+0x1f4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d022      	beq.n	800488e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004856:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6899      	ldr	r1, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004878:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6899      	ldr	r1, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	e00f      	b.n	80048ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800489c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0202 	bic.w	r2, r2, #2
 80048bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6899      	ldr	r1, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	7e1b      	ldrb	r3, [r3, #24]
 80048c8:	005a      	lsls	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01b      	beq.n	8004914 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	3b01      	subs	r3, #1
 8004908:	035a      	lsls	r2, r3, #13
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	e007      	b.n	8004924 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004922:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004932:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	3b01      	subs	r3, #1
 8004940:	051a      	lsls	r2, r3, #20
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004958:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6899      	ldr	r1, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004966:	025a      	lsls	r2, r3, #9
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6899      	ldr	r1, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	029a      	lsls	r2, r3, #10
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	40012300 	.word	0x40012300
 80049a4:	0f000001 	.word	0x0f000001

080049a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <__NVIC_SetPriorityGrouping+0x44>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049c4:	4013      	ands	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049da:	4a04      	ldr	r2, [pc, #16]	; (80049ec <__NVIC_SetPriorityGrouping+0x44>)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	60d3      	str	r3, [r2, #12]
}
 80049e0:	bf00      	nop
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049f4:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <__NVIC_GetPriorityGrouping+0x18>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	0a1b      	lsrs	r3, r3, #8
 80049fa:	f003 0307 	and.w	r3, r3, #7
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	e000ed00 	.word	0xe000ed00

08004a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	db0b      	blt.n	8004a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	f003 021f 	and.w	r2, r3, #31
 8004a24:	4907      	ldr	r1, [pc, #28]	; (8004a44 <__NVIC_EnableIRQ+0x38>)
 8004a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	e000e100 	.word	0xe000e100

08004a48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	db12      	blt.n	8004a80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	f003 021f 	and.w	r2, r3, #31
 8004a60:	490a      	ldr	r1, [pc, #40]	; (8004a8c <__NVIC_DisableIRQ+0x44>)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	2001      	movs	r0, #1
 8004a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a6e:	3320      	adds	r3, #32
 8004a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a74:	f3bf 8f4f 	dsb	sy
}
 8004a78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a7a:	f3bf 8f6f 	isb	sy
}
 8004a7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100

08004a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	6039      	str	r1, [r7, #0]
 8004a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	db0a      	blt.n	8004aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	490c      	ldr	r1, [pc, #48]	; (8004adc <__NVIC_SetPriority+0x4c>)
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	0112      	lsls	r2, r2, #4
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ab8:	e00a      	b.n	8004ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	4908      	ldr	r1, [pc, #32]	; (8004ae0 <__NVIC_SetPriority+0x50>)
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	3b04      	subs	r3, #4
 8004ac8:	0112      	lsls	r2, r2, #4
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	440b      	add	r3, r1
 8004ace:	761a      	strb	r2, [r3, #24]
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	e000e100 	.word	0xe000e100
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b089      	sub	sp, #36	; 0x24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f1c3 0307 	rsb	r3, r3, #7
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	bf28      	it	cs
 8004b02:	2304      	movcs	r3, #4
 8004b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d902      	bls.n	8004b14 <NVIC_EncodePriority+0x30>
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3b03      	subs	r3, #3
 8004b12:	e000      	b.n	8004b16 <NVIC_EncodePriority+0x32>
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43da      	mvns	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	401a      	ands	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	fa01 f303 	lsl.w	r3, r1, r3
 8004b36:	43d9      	mvns	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b3c:	4313      	orrs	r3, r2
         );
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3724      	adds	r7, #36	; 0x24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff ff28 	bl	80049a8 <__NVIC_SetPriorityGrouping>
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b72:	f7ff ff3d 	bl	80049f0 <__NVIC_GetPriorityGrouping>
 8004b76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	6978      	ldr	r0, [r7, #20]
 8004b7e:	f7ff ffb1 	bl	8004ae4 <NVIC_EncodePriority>
 8004b82:	4602      	mov	r2, r0
 8004b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ff80 	bl	8004a90 <__NVIC_SetPriority>
}
 8004b90:	bf00      	nop
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff ff30 	bl	8004a0c <__NVIC_EnableIRQ>
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff ff40 	bl	8004a48 <__NVIC_DisableIRQ>
}
 8004bc8:	bf00      	nop
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004bdc:	f7ff fc52 	bl	8004484 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e099      	b.n	8004d20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c0c:	e00f      	b.n	8004c2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c0e:	f7ff fc39 	bl	8004484 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b05      	cmp	r3, #5
 8004c1a:	d908      	bls.n	8004c2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2203      	movs	r2, #3
 8004c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e078      	b.n	8004d20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e8      	bne.n	8004c0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4b38      	ldr	r3, [pc, #224]	; (8004d28 <HAL_DMA_Init+0x158>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d107      	bne.n	8004c98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	4313      	orrs	r3, r2
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f023 0307 	bic.w	r3, r3, #7
 8004cae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d117      	bne.n	8004cf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fa69 	bl	80051ac <DMA_CheckFifoParam>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2240      	movs	r2, #64	; 0x40
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e016      	b.n	8004d20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa20 	bl	8005140 <DMA_CalcBaseAndBitshift>
 8004d00:	4603      	mov	r3, r0
 8004d02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d08:	223f      	movs	r2, #63	; 0x3f
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	f010803f 	.word	0xf010803f

08004d2c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e050      	b.n	8004de0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d101      	bne.n	8004d4e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e048      	b.n	8004de0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0201 	bic.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2200      	movs	r2, #0
 8004d84:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2221      	movs	r2, #33	; 0x21
 8004d8c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f9d6 	bl	8005140 <DMA_CalcBaseAndBitshift>
 8004d94:	4603      	mov	r3, r0
 8004d96:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc0:	223f      	movs	r2, #63	; 0x3f
 8004dc2:	409a      	lsls	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d004      	beq.n	8004e06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2280      	movs	r2, #128	; 0x80
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e00c      	b.n	8004e20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2205      	movs	r2, #5
 8004e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e38:	4b92      	ldr	r3, [pc, #584]	; (8005084 <HAL_DMA_IRQHandler+0x258>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a92      	ldr	r2, [pc, #584]	; (8005088 <HAL_DMA_IRQHandler+0x25c>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	0a9b      	lsrs	r3, r3, #10
 8004e44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e56:	2208      	movs	r2, #8
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01a      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d013      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0204 	bic.w	r2, r2, #4
 8004e7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e84:	2208      	movs	r2, #8
 8004e86:	409a      	lsls	r2, r3
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	f043 0201 	orr.w	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d012      	beq.n	8004ece <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eba:	2201      	movs	r2, #1
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	f043 0202 	orr.w	r2, r3, #2
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d012      	beq.n	8004f04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00b      	beq.n	8004f04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efc:	f043 0204 	orr.w	r2, r3, #4
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f08:	2210      	movs	r2, #16
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d043      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d03c      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f26:	2210      	movs	r2, #16
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d018      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d108      	bne.n	8004f5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d024      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
 8004f5a:	e01f      	b.n	8004f9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01b      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	4798      	blx	r3
 8004f6c:	e016      	b.n	8004f9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d107      	bne.n	8004f8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0208 	bic.w	r2, r2, #8
 8004f8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 808e 	beq.w	80050ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8086 	beq.w	80050ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b05      	cmp	r3, #5
 8004fd4:	d136      	bne.n	8005044 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0216 	bic.w	r2, r2, #22
 8004fe4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <HAL_DMA_IRQHandler+0x1da>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0208 	bic.w	r2, r2, #8
 8005014:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	223f      	movs	r2, #63	; 0x3f
 800501c:	409a      	lsls	r2, r3
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005036:	2b00      	cmp	r3, #0
 8005038:	d07d      	beq.n	8005136 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
        }
        return;
 8005042:	e078      	b.n	8005136 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01c      	beq.n	800508c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d108      	bne.n	8005072 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005064:	2b00      	cmp	r3, #0
 8005066:	d030      	beq.n	80050ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	4798      	blx	r3
 8005070:	e02b      	b.n	80050ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d027      	beq.n	80050ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
 8005082:	e022      	b.n	80050ca <HAL_DMA_IRQHandler+0x29e>
 8005084:	20000000 	.word	0x20000000
 8005088:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10f      	bne.n	80050ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0210 	bic.w	r2, r2, #16
 80050a8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d032      	beq.n	8005138 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d022      	beq.n	8005124 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2205      	movs	r2, #5
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	3301      	adds	r3, #1
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d307      	bcc.n	8005112 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1f2      	bne.n	80050f6 <HAL_DMA_IRQHandler+0x2ca>
 8005110:	e000      	b.n	8005114 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005112:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	4798      	blx	r3
 8005134:	e000      	b.n	8005138 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005136:	bf00      	nop
    }
  }
}
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop

08005140 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	3b10      	subs	r3, #16
 8005150:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <DMA_CalcBaseAndBitshift+0x64>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800515a:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <DMA_CalcBaseAndBitshift+0x68>)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b03      	cmp	r3, #3
 800516c:	d909      	bls.n	8005182 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005176:	f023 0303 	bic.w	r3, r3, #3
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	659a      	str	r2, [r3, #88]	; 0x58
 8005180:	e007      	b.n	8005192 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	aaaaaaab 	.word	0xaaaaaaab
 80051a8:	08015e90 	.word	0x08015e90

080051ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d11f      	bne.n	8005206 <DMA_CheckFifoParam+0x5a>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d856      	bhi.n	800527a <DMA_CheckFifoParam+0xce>
 80051cc:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <DMA_CheckFifoParam+0x28>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	080051e5 	.word	0x080051e5
 80051d8:	080051f7 	.word	0x080051f7
 80051dc:	080051e5 	.word	0x080051e5
 80051e0:	0800527b 	.word	0x0800527b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d046      	beq.n	800527e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f4:	e043      	b.n	800527e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051fe:	d140      	bne.n	8005282 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005204:	e03d      	b.n	8005282 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520e:	d121      	bne.n	8005254 <DMA_CheckFifoParam+0xa8>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b03      	cmp	r3, #3
 8005214:	d837      	bhi.n	8005286 <DMA_CheckFifoParam+0xda>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <DMA_CheckFifoParam+0x70>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	0800522d 	.word	0x0800522d
 8005220:	08005233 	.word	0x08005233
 8005224:	0800522d 	.word	0x0800522d
 8005228:	08005245 	.word	0x08005245
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
      break;
 8005230:	e030      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d025      	beq.n	800528a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005242:	e022      	b.n	800528a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800524c:	d11f      	bne.n	800528e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005252:	e01c      	b.n	800528e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d903      	bls.n	8005262 <DMA_CheckFifoParam+0xb6>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b03      	cmp	r3, #3
 800525e:	d003      	beq.n	8005268 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005260:	e018      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
      break;
 8005266:	e015      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00e      	beq.n	8005292 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]
      break;
 8005278:	e00b      	b.n	8005292 <DMA_CheckFifoParam+0xe6>
      break;
 800527a:	bf00      	nop
 800527c:	e00a      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
      break;
 800527e:	bf00      	nop
 8005280:	e008      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
      break;
 8005282:	bf00      	nop
 8005284:	e006      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
      break;
 8005286:	bf00      	nop
 8005288:	e004      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
      break;
 800528a:	bf00      	nop
 800528c:	e002      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
      break;   
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
      break;
 8005292:	bf00      	nop
    }
  } 
  
  return status; 
 8005294:	7bfb      	ldrb	r3, [r7, #15]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop

080052a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b089      	sub	sp, #36	; 0x24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	e16b      	b.n	8005598 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052c0:	2201      	movs	r2, #1
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4013      	ands	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	429a      	cmp	r2, r3
 80052da:	f040 815a 	bne.w	8005592 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d005      	beq.n	80052f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d130      	bne.n	8005358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	2203      	movs	r2, #3
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4313      	orrs	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800532c:	2201      	movs	r2, #1
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f003 0201 	and.w	r2, r3, #1
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4313      	orrs	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 0303 	and.w	r3, r3, #3
 8005360:	2b03      	cmp	r3, #3
 8005362:	d017      	beq.n	8005394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	2203      	movs	r2, #3
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4313      	orrs	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d123      	bne.n	80053e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	08da      	lsrs	r2, r3, #3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3208      	adds	r2, #8
 80053a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	220f      	movs	r2, #15
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	43db      	mvns	r3, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4013      	ands	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	08da      	lsrs	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3208      	adds	r2, #8
 80053e2:	69b9      	ldr	r1, [r7, #24]
 80053e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	2203      	movs	r2, #3
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	43db      	mvns	r3, r3
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	4013      	ands	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 0203 	and.w	r2, r3, #3
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4313      	orrs	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80b4 	beq.w	8005592 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	4b60      	ldr	r3, [pc, #384]	; (80055b0 <HAL_GPIO_Init+0x30c>)
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	4a5f      	ldr	r2, [pc, #380]	; (80055b0 <HAL_GPIO_Init+0x30c>)
 8005434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005438:	6453      	str	r3, [r2, #68]	; 0x44
 800543a:	4b5d      	ldr	r3, [pc, #372]	; (80055b0 <HAL_GPIO_Init+0x30c>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005446:	4a5b      	ldr	r2, [pc, #364]	; (80055b4 <HAL_GPIO_Init+0x310>)
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	3302      	adds	r3, #2
 800544e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	220f      	movs	r2, #15
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a52      	ldr	r2, [pc, #328]	; (80055b8 <HAL_GPIO_Init+0x314>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d02b      	beq.n	80054ca <HAL_GPIO_Init+0x226>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a51      	ldr	r2, [pc, #324]	; (80055bc <HAL_GPIO_Init+0x318>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d025      	beq.n	80054c6 <HAL_GPIO_Init+0x222>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a50      	ldr	r2, [pc, #320]	; (80055c0 <HAL_GPIO_Init+0x31c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01f      	beq.n	80054c2 <HAL_GPIO_Init+0x21e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a4f      	ldr	r2, [pc, #316]	; (80055c4 <HAL_GPIO_Init+0x320>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d019      	beq.n	80054be <HAL_GPIO_Init+0x21a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a4e      	ldr	r2, [pc, #312]	; (80055c8 <HAL_GPIO_Init+0x324>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d013      	beq.n	80054ba <HAL_GPIO_Init+0x216>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a4d      	ldr	r2, [pc, #308]	; (80055cc <HAL_GPIO_Init+0x328>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00d      	beq.n	80054b6 <HAL_GPIO_Init+0x212>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a4c      	ldr	r2, [pc, #304]	; (80055d0 <HAL_GPIO_Init+0x32c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d007      	beq.n	80054b2 <HAL_GPIO_Init+0x20e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a4b      	ldr	r2, [pc, #300]	; (80055d4 <HAL_GPIO_Init+0x330>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d101      	bne.n	80054ae <HAL_GPIO_Init+0x20a>
 80054aa:	2307      	movs	r3, #7
 80054ac:	e00e      	b.n	80054cc <HAL_GPIO_Init+0x228>
 80054ae:	2308      	movs	r3, #8
 80054b0:	e00c      	b.n	80054cc <HAL_GPIO_Init+0x228>
 80054b2:	2306      	movs	r3, #6
 80054b4:	e00a      	b.n	80054cc <HAL_GPIO_Init+0x228>
 80054b6:	2305      	movs	r3, #5
 80054b8:	e008      	b.n	80054cc <HAL_GPIO_Init+0x228>
 80054ba:	2304      	movs	r3, #4
 80054bc:	e006      	b.n	80054cc <HAL_GPIO_Init+0x228>
 80054be:	2303      	movs	r3, #3
 80054c0:	e004      	b.n	80054cc <HAL_GPIO_Init+0x228>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e002      	b.n	80054cc <HAL_GPIO_Init+0x228>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <HAL_GPIO_Init+0x228>
 80054ca:	2300      	movs	r3, #0
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	f002 0203 	and.w	r2, r2, #3
 80054d2:	0092      	lsls	r2, r2, #2
 80054d4:	4093      	lsls	r3, r2
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054dc:	4935      	ldr	r1, [pc, #212]	; (80055b4 <HAL_GPIO_Init+0x310>)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	3302      	adds	r3, #2
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054ea:	4b3b      	ldr	r3, [pc, #236]	; (80055d8 <HAL_GPIO_Init+0x334>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4013      	ands	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800550e:	4a32      	ldr	r2, [pc, #200]	; (80055d8 <HAL_GPIO_Init+0x334>)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005514:	4b30      	ldr	r3, [pc, #192]	; (80055d8 <HAL_GPIO_Init+0x334>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005538:	4a27      	ldr	r2, [pc, #156]	; (80055d8 <HAL_GPIO_Init+0x334>)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800553e:	4b26      	ldr	r3, [pc, #152]	; (80055d8 <HAL_GPIO_Init+0x334>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	43db      	mvns	r3, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4013      	ands	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005562:	4a1d      	ldr	r2, [pc, #116]	; (80055d8 <HAL_GPIO_Init+0x334>)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005568:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <HAL_GPIO_Init+0x334>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	43db      	mvns	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800558c:	4a12      	ldr	r2, [pc, #72]	; (80055d8 <HAL_GPIO_Init+0x334>)
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b0f      	cmp	r3, #15
 800559c:	f67f ae90 	bls.w	80052c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	3724      	adds	r7, #36	; 0x24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40013800 	.word	0x40013800
 80055b8:	40020000 	.word	0x40020000
 80055bc:	40020400 	.word	0x40020400
 80055c0:	40020800 	.word	0x40020800
 80055c4:	40020c00 	.word	0x40020c00
 80055c8:	40021000 	.word	0x40021000
 80055cc:	40021400 	.word	0x40021400
 80055d0:	40021800 	.word	0x40021800
 80055d4:	40021c00 	.word	0x40021c00
 80055d8:	40013c00 	.word	0x40013c00

080055dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e0cd      	b.n	8005794 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055f8:	2201      	movs	r2, #1
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4013      	ands	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	429a      	cmp	r2, r3
 8005610:	f040 80bd 	bne.w	800578e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005614:	4a65      	ldr	r2, [pc, #404]	; (80057ac <HAL_GPIO_DeInit+0x1d0>)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	089b      	lsrs	r3, r3, #2
 800561a:	3302      	adds	r3, #2
 800561c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005620:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	220f      	movs	r2, #15
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	4013      	ands	r3, r2
 8005634:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a5d      	ldr	r2, [pc, #372]	; (80057b0 <HAL_GPIO_DeInit+0x1d4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d02b      	beq.n	8005696 <HAL_GPIO_DeInit+0xba>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a5c      	ldr	r2, [pc, #368]	; (80057b4 <HAL_GPIO_DeInit+0x1d8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d025      	beq.n	8005692 <HAL_GPIO_DeInit+0xb6>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a5b      	ldr	r2, [pc, #364]	; (80057b8 <HAL_GPIO_DeInit+0x1dc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01f      	beq.n	800568e <HAL_GPIO_DeInit+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a5a      	ldr	r2, [pc, #360]	; (80057bc <HAL_GPIO_DeInit+0x1e0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d019      	beq.n	800568a <HAL_GPIO_DeInit+0xae>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a59      	ldr	r2, [pc, #356]	; (80057c0 <HAL_GPIO_DeInit+0x1e4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <HAL_GPIO_DeInit+0xaa>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a58      	ldr	r2, [pc, #352]	; (80057c4 <HAL_GPIO_DeInit+0x1e8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00d      	beq.n	8005682 <HAL_GPIO_DeInit+0xa6>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a57      	ldr	r2, [pc, #348]	; (80057c8 <HAL_GPIO_DeInit+0x1ec>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d007      	beq.n	800567e <HAL_GPIO_DeInit+0xa2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a56      	ldr	r2, [pc, #344]	; (80057cc <HAL_GPIO_DeInit+0x1f0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d101      	bne.n	800567a <HAL_GPIO_DeInit+0x9e>
 8005676:	2307      	movs	r3, #7
 8005678:	e00e      	b.n	8005698 <HAL_GPIO_DeInit+0xbc>
 800567a:	2308      	movs	r3, #8
 800567c:	e00c      	b.n	8005698 <HAL_GPIO_DeInit+0xbc>
 800567e:	2306      	movs	r3, #6
 8005680:	e00a      	b.n	8005698 <HAL_GPIO_DeInit+0xbc>
 8005682:	2305      	movs	r3, #5
 8005684:	e008      	b.n	8005698 <HAL_GPIO_DeInit+0xbc>
 8005686:	2304      	movs	r3, #4
 8005688:	e006      	b.n	8005698 <HAL_GPIO_DeInit+0xbc>
 800568a:	2303      	movs	r3, #3
 800568c:	e004      	b.n	8005698 <HAL_GPIO_DeInit+0xbc>
 800568e:	2302      	movs	r3, #2
 8005690:	e002      	b.n	8005698 <HAL_GPIO_DeInit+0xbc>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <HAL_GPIO_DeInit+0xbc>
 8005696:	2300      	movs	r3, #0
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	f002 0203 	and.w	r2, r2, #3
 800569e:	0092      	lsls	r2, r2, #2
 80056a0:	4093      	lsls	r3, r2
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d132      	bne.n	800570e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80056a8:	4b49      	ldr	r3, [pc, #292]	; (80057d0 <HAL_GPIO_DeInit+0x1f4>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	43db      	mvns	r3, r3
 80056b0:	4947      	ldr	r1, [pc, #284]	; (80057d0 <HAL_GPIO_DeInit+0x1f4>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80056b6:	4b46      	ldr	r3, [pc, #280]	; (80057d0 <HAL_GPIO_DeInit+0x1f4>)
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	43db      	mvns	r3, r3
 80056be:	4944      	ldr	r1, [pc, #272]	; (80057d0 <HAL_GPIO_DeInit+0x1f4>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80056c4:	4b42      	ldr	r3, [pc, #264]	; (80057d0 <HAL_GPIO_DeInit+0x1f4>)
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	43db      	mvns	r3, r3
 80056cc:	4940      	ldr	r1, [pc, #256]	; (80057d0 <HAL_GPIO_DeInit+0x1f4>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80056d2:	4b3f      	ldr	r3, [pc, #252]	; (80057d0 <HAL_GPIO_DeInit+0x1f4>)
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	43db      	mvns	r3, r3
 80056da:	493d      	ldr	r1, [pc, #244]	; (80057d0 <HAL_GPIO_DeInit+0x1f4>)
 80056dc:	4013      	ands	r3, r2
 80056de:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	220f      	movs	r2, #15
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80056f0:	4a2e      	ldr	r2, [pc, #184]	; (80057ac <HAL_GPIO_DeInit+0x1d0>)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	089b      	lsrs	r3, r3, #2
 80056f6:	3302      	adds	r3, #2
 80056f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	43da      	mvns	r2, r3
 8005700:	482a      	ldr	r0, [pc, #168]	; (80057ac <HAL_GPIO_DeInit+0x1d0>)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	089b      	lsrs	r3, r3, #2
 8005706:	400a      	ands	r2, r1
 8005708:	3302      	adds	r3, #2
 800570a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	2103      	movs	r1, #3
 8005718:	fa01 f303 	lsl.w	r3, r1, r3
 800571c:	43db      	mvns	r3, r3
 800571e:	401a      	ands	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	08da      	lsrs	r2, r3, #3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3208      	adds	r2, #8
 800572c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	220f      	movs	r2, #15
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43db      	mvns	r3, r3
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	08d2      	lsrs	r2, r2, #3
 8005744:	4019      	ands	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3208      	adds	r2, #8
 800574a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	2103      	movs	r1, #3
 8005758:	fa01 f303 	lsl.w	r3, r1, r3
 800575c:	43db      	mvns	r3, r3
 800575e:	401a      	ands	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	2101      	movs	r1, #1
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	43db      	mvns	r3, r3
 8005772:	401a      	ands	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	2103      	movs	r1, #3
 8005782:	fa01 f303 	lsl.w	r3, r1, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	401a      	ands	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	3301      	adds	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b0f      	cmp	r3, #15
 8005798:	f67f af2e 	bls.w	80055f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40013800 	.word	0x40013800
 80057b0:	40020000 	.word	0x40020000
 80057b4:	40020400 	.word	0x40020400
 80057b8:	40020800 	.word	0x40020800
 80057bc:	40020c00 	.word	0x40020c00
 80057c0:	40021000 	.word	0x40021000
 80057c4:	40021400 	.word	0x40021400
 80057c8:	40021800 	.word	0x40021800
 80057cc:	40021c00 	.word	0x40021c00
 80057d0:	40013c00 	.word	0x40013c00

080057d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	887b      	ldrh	r3, [r7, #2]
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
 80057f0:	e001      	b.n	80057f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	807b      	strh	r3, [r7, #2]
 8005810:	4613      	mov	r3, r2
 8005812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005814:	787b      	ldrb	r3, [r7, #1]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800581a:	887a      	ldrh	r2, [r7, #2]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005820:	e003      	b.n	800582a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	041a      	lsls	r2, r3, #16
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	619a      	str	r2, [r3, #24]
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005844:	695a      	ldr	r2, [r3, #20]
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	4013      	ands	r3, r2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d006      	beq.n	800585c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800584e:	4a05      	ldr	r2, [pc, #20]	; (8005864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f806 	bl	8005868 <HAL_GPIO_EXTI_Callback>
  }
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40013c00 	.word	0x40013c00

08005868 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e12b      	b.n	8005aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fd fd48 	bl	800333c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2224      	movs	r2, #36	; 0x24
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0201 	bic.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058e4:	f002 feda 	bl	800869c <HAL_RCC_GetPCLK1Freq>
 80058e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	4a81      	ldr	r2, [pc, #516]	; (8005af4 <HAL_I2C_Init+0x274>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d807      	bhi.n	8005904 <HAL_I2C_Init+0x84>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4a80      	ldr	r2, [pc, #512]	; (8005af8 <HAL_I2C_Init+0x278>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	bf94      	ite	ls
 80058fc:	2301      	movls	r3, #1
 80058fe:	2300      	movhi	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e006      	b.n	8005912 <HAL_I2C_Init+0x92>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4a7d      	ldr	r2, [pc, #500]	; (8005afc <HAL_I2C_Init+0x27c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	bf94      	ite	ls
 800590c:	2301      	movls	r3, #1
 800590e:	2300      	movhi	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e0e7      	b.n	8005aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a78      	ldr	r2, [pc, #480]	; (8005b00 <HAL_I2C_Init+0x280>)
 800591e:	fba2 2303 	umull	r2, r3, r2, r3
 8005922:	0c9b      	lsrs	r3, r3, #18
 8005924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a6a      	ldr	r2, [pc, #424]	; (8005af4 <HAL_I2C_Init+0x274>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d802      	bhi.n	8005954 <HAL_I2C_Init+0xd4>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	3301      	adds	r3, #1
 8005952:	e009      	b.n	8005968 <HAL_I2C_Init+0xe8>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	4a69      	ldr	r2, [pc, #420]	; (8005b04 <HAL_I2C_Init+0x284>)
 8005960:	fba2 2303 	umull	r2, r3, r2, r3
 8005964:	099b      	lsrs	r3, r3, #6
 8005966:	3301      	adds	r3, #1
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	430b      	orrs	r3, r1
 800596e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800597a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	495c      	ldr	r1, [pc, #368]	; (8005af4 <HAL_I2C_Init+0x274>)
 8005984:	428b      	cmp	r3, r1
 8005986:	d819      	bhi.n	80059bc <HAL_I2C_Init+0x13c>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1e59      	subs	r1, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	fbb1 f3f3 	udiv	r3, r1, r3
 8005996:	1c59      	adds	r1, r3, #1
 8005998:	f640 73fc 	movw	r3, #4092	; 0xffc
 800599c:	400b      	ands	r3, r1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_I2C_Init+0x138>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1e59      	subs	r1, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80059b0:	3301      	adds	r3, #1
 80059b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b6:	e051      	b.n	8005a5c <HAL_I2C_Init+0x1dc>
 80059b8:	2304      	movs	r3, #4
 80059ba:	e04f      	b.n	8005a5c <HAL_I2C_Init+0x1dc>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d111      	bne.n	80059e8 <HAL_I2C_Init+0x168>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	1e58      	subs	r0, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6859      	ldr	r1, [r3, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	440b      	add	r3, r1
 80059d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059d6:	3301      	adds	r3, #1
 80059d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e012      	b.n	8005a0e <HAL_I2C_Init+0x18e>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	1e58      	subs	r0, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6859      	ldr	r1, [r3, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	0099      	lsls	r1, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80059fe:	3301      	adds	r3, #1
 8005a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bf0c      	ite	eq
 8005a08:	2301      	moveq	r3, #1
 8005a0a:	2300      	movne	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <HAL_I2C_Init+0x196>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e022      	b.n	8005a5c <HAL_I2C_Init+0x1dc>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10e      	bne.n	8005a3c <HAL_I2C_Init+0x1bc>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	1e58      	subs	r0, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6859      	ldr	r1, [r3, #4]
 8005a26:	460b      	mov	r3, r1
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	440b      	add	r3, r1
 8005a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a30:	3301      	adds	r3, #1
 8005a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3a:	e00f      	b.n	8005a5c <HAL_I2C_Init+0x1dc>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1e58      	subs	r0, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6859      	ldr	r1, [r3, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	0099      	lsls	r1, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a52:	3301      	adds	r3, #1
 8005a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	6809      	ldr	r1, [r1, #0]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69da      	ldr	r2, [r3, #28]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6911      	ldr	r1, [r2, #16]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	68d2      	ldr	r2, [r2, #12]
 8005a96:	4311      	orrs	r1, r2
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695a      	ldr	r2, [r3, #20]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	000186a0 	.word	0x000186a0
 8005af8:	001e847f 	.word	0x001e847f
 8005afc:	003d08ff 	.word	0x003d08ff
 8005b00:	431bde83 	.word	0x431bde83
 8005b04:	10624dd3 	.word	0x10624dd3

08005b08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	461a      	mov	r2, r3
 8005b14:	460b      	mov	r3, r1
 8005b16:	817b      	strh	r3, [r7, #10]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b1c:	f7fe fcb2 	bl	8004484 <HAL_GetTick>
 8005b20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	f040 80e0 	bne.w	8005cf0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	2319      	movs	r3, #25
 8005b36:	2201      	movs	r2, #1
 8005b38:	4970      	ldr	r1, [pc, #448]	; (8005cfc <HAL_I2C_Master_Transmit+0x1f4>)
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 fe02 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b46:	2302      	movs	r3, #2
 8005b48:	e0d3      	b.n	8005cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_I2C_Master_Transmit+0x50>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e0cc      	b.n	8005cf2 <HAL_I2C_Master_Transmit+0x1ea>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d007      	beq.n	8005b7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0201 	orr.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2221      	movs	r2, #33	; 0x21
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2210      	movs	r2, #16
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	893a      	ldrh	r2, [r7, #8]
 8005bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4a50      	ldr	r2, [pc, #320]	; (8005d00 <HAL_I2C_Master_Transmit+0x1f8>)
 8005bbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bc0:	8979      	ldrh	r1, [r7, #10]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	6a3a      	ldr	r2, [r7, #32]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 fbbc 	bl	8006344 <I2C_MasterRequestWrite>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e08d      	b.n	8005cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005bec:	e066      	b.n	8005cbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	6a39      	ldr	r1, [r7, #32]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fe7c 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00d      	beq.n	8005c1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d107      	bne.n	8005c16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e06b      	b.n	8005cf2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	781a      	ldrb	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d11b      	bne.n	8005c90 <HAL_I2C_Master_Transmit+0x188>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d017      	beq.n	8005c90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	6a39      	ldr	r1, [r7, #32]
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 fe6c 	bl	8006972 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00d      	beq.n	8005cbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d107      	bne.n	8005cb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e01a      	b.n	8005cf2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d194      	bne.n	8005bee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	e000      	b.n	8005cf2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	00100002 	.word	0x00100002
 8005d00:	ffff0000 	.word	0xffff0000

08005d04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	461a      	mov	r2, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	817b      	strh	r3, [r7, #10]
 8005d16:	460b      	mov	r3, r1
 8005d18:	813b      	strh	r3, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d1e:	f7fe fbb1 	bl	8004484 <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	f040 80d9 	bne.w	8005ee4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	2319      	movs	r3, #25
 8005d38:	2201      	movs	r2, #1
 8005d3a:	496d      	ldr	r1, [pc, #436]	; (8005ef0 <HAL_I2C_Mem_Write+0x1ec>)
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fd01 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e0cc      	b.n	8005ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_I2C_Mem_Write+0x56>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e0c5      	b.n	8005ee6 <HAL_I2C_Mem_Write+0x1e2>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d007      	beq.n	8005d80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2221      	movs	r2, #33	; 0x21
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2240      	movs	r2, #64	; 0x40
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a3a      	ldr	r2, [r7, #32]
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4a4d      	ldr	r2, [pc, #308]	; (8005ef4 <HAL_I2C_Mem_Write+0x1f0>)
 8005dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dc2:	88f8      	ldrh	r0, [r7, #6]
 8005dc4:	893a      	ldrh	r2, [r7, #8]
 8005dc6:	8979      	ldrh	r1, [r7, #10]
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	9301      	str	r3, [sp, #4]
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fb38 	bl	8006448 <I2C_RequestMemoryWrite>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d052      	beq.n	8005e84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e081      	b.n	8005ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fd82 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00d      	beq.n	8005e0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d107      	bne.n	8005e0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e06b      	b.n	8005ee6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	781a      	ldrb	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d11b      	bne.n	8005e84 <HAL_I2C_Mem_Write+0x180>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d017      	beq.n	8005e84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	781a      	ldrb	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1aa      	bne.n	8005de2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 fd6e 	bl	8006972 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00d      	beq.n	8005eb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d107      	bne.n	8005eb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e016      	b.n	8005ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	00100002 	.word	0x00100002
 8005ef4:	ffff0000 	.word	0xffff0000

08005ef8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08c      	sub	sp, #48	; 0x30
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	4608      	mov	r0, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	817b      	strh	r3, [r7, #10]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	813b      	strh	r3, [r7, #8]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f12:	f7fe fab7 	bl	8004484 <HAL_GetTick>
 8005f16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	f040 8208 	bne.w	8006336 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	2319      	movs	r3, #25
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	497b      	ldr	r1, [pc, #492]	; (800611c <HAL_I2C_Mem_Read+0x224>)
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fc07 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e1fb      	b.n	8006338 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_I2C_Mem_Read+0x56>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e1f4      	b.n	8006338 <HAL_I2C_Mem_Read+0x440>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d007      	beq.n	8005f74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2222      	movs	r2, #34	; 0x22
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2240      	movs	r2, #64	; 0x40
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4a5b      	ldr	r2, [pc, #364]	; (8006120 <HAL_I2C_Mem_Read+0x228>)
 8005fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fb6:	88f8      	ldrh	r0, [r7, #6]
 8005fb8:	893a      	ldrh	r2, [r7, #8]
 8005fba:	8979      	ldrh	r1, [r7, #10]
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fad4 	bl	8006574 <I2C_RequestMemoryRead>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e1b0      	b.n	8006338 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d113      	bne.n	8006006 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	623b      	str	r3, [r7, #32]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	623b      	str	r3, [r7, #32]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	623b      	str	r3, [r7, #32]
 8005ff2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e184      	b.n	8006310 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600a:	2b01      	cmp	r3, #1
 800600c:	d11b      	bne.n	8006046 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	61fb      	str	r3, [r7, #28]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e164      	b.n	8006310 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604a:	2b02      	cmp	r3, #2
 800604c:	d11b      	bne.n	8006086 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800606c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	e144      	b.n	8006310 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800609c:	e138      	b.n	8006310 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	f200 80f1 	bhi.w	800628a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d123      	bne.n	80060f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fc9d 	bl	80069f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e139      	b.n	8006338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060f6:	e10b      	b.n	8006310 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d14e      	bne.n	800619e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	2200      	movs	r2, #0
 8006108:	4906      	ldr	r1, [pc, #24]	; (8006124 <HAL_I2C_Mem_Read+0x22c>)
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 fb1a 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d008      	beq.n	8006128 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e10e      	b.n	8006338 <HAL_I2C_Mem_Read+0x440>
 800611a:	bf00      	nop
 800611c:	00100002 	.word	0x00100002
 8006120:	ffff0000 	.word	0xffff0000
 8006124:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691a      	ldr	r2, [r3, #16]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800619c:	e0b8      	b.n	8006310 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	2200      	movs	r2, #0
 80061a6:	4966      	ldr	r1, [pc, #408]	; (8006340 <HAL_I2C_Mem_Read+0x448>)
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 facb 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e0bf      	b.n	8006338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	2200      	movs	r2, #0
 8006202:	494f      	ldr	r1, [pc, #316]	; (8006340 <HAL_I2C_Mem_Read+0x448>)
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fa9d 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e091      	b.n	8006338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	3b01      	subs	r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006288:	e042      	b.n	8006310 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800628a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fbb0 	bl	80069f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e04c      	b.n	8006338 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d118      	bne.n	8006310 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006314:	2b00      	cmp	r3, #0
 8006316:	f47f aec2 	bne.w	800609e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	e000      	b.n	8006338 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006336:	2302      	movs	r3, #2
  }
}
 8006338:	4618      	mov	r0, r3
 800633a:	3728      	adds	r7, #40	; 0x28
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	00010004 	.word	0x00010004

08006344 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af02      	add	r7, sp, #8
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	460b      	mov	r3, r1
 8006352:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b08      	cmp	r3, #8
 800635e:	d006      	beq.n	800636e <I2C_MasterRequestWrite+0x2a>
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d003      	beq.n	800636e <I2C_MasterRequestWrite+0x2a>
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800636c:	d108      	bne.n	8006380 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	e00b      	b.n	8006398 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	2b12      	cmp	r3, #18
 8006386:	d107      	bne.n	8006398 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006396:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f9cd 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00d      	beq.n	80063cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063be:	d103      	bne.n	80063c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e035      	b.n	8006438 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d4:	d108      	bne.n	80063e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063d6:	897b      	ldrh	r3, [r7, #10]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063e4:	611a      	str	r2, [r3, #16]
 80063e6:	e01b      	b.n	8006420 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80063e8:	897b      	ldrh	r3, [r7, #10]
 80063ea:	11db      	asrs	r3, r3, #7
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0306 	and.w	r3, r3, #6
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f063 030f 	orn	r3, r3, #15
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	490e      	ldr	r1, [pc, #56]	; (8006440 <I2C_MasterRequestWrite+0xfc>)
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f9f3 	bl	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e010      	b.n	8006438 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006416:	897b      	ldrh	r3, [r7, #10]
 8006418:	b2da      	uxtb	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	4907      	ldr	r1, [pc, #28]	; (8006444 <I2C_MasterRequestWrite+0x100>)
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f9e3 	bl	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	00010008 	.word	0x00010008
 8006444:	00010002 	.word	0x00010002

08006448 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	4608      	mov	r0, r1
 8006452:	4611      	mov	r1, r2
 8006454:	461a      	mov	r2, r3
 8006456:	4603      	mov	r3, r0
 8006458:	817b      	strh	r3, [r7, #10]
 800645a:	460b      	mov	r3, r1
 800645c:	813b      	strh	r3, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006470:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	2200      	movs	r2, #0
 800647a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 f960 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00d      	beq.n	80064a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006498:	d103      	bne.n	80064a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e05f      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064a6:	897b      	ldrh	r3, [r7, #10]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	6a3a      	ldr	r2, [r7, #32]
 80064ba:	492d      	ldr	r1, [pc, #180]	; (8006570 <I2C_RequestMemoryWrite+0x128>)
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f998 	bl	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e04c      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e4:	6a39      	ldr	r1, [r7, #32]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fa02 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00d      	beq.n	800650e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d107      	bne.n	800650a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006508:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e02b      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d105      	bne.n	8006520 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006514:	893b      	ldrh	r3, [r7, #8]
 8006516:	b2da      	uxtb	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	611a      	str	r2, [r3, #16]
 800651e:	e021      	b.n	8006564 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006520:	893b      	ldrh	r3, [r7, #8]
 8006522:	0a1b      	lsrs	r3, r3, #8
 8006524:	b29b      	uxth	r3, r3
 8006526:	b2da      	uxtb	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f9dc 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00d      	beq.n	800655a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	2b04      	cmp	r3, #4
 8006544:	d107      	bne.n	8006556 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006554:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e005      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800655a:	893b      	ldrh	r3, [r7, #8]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	00010002 	.word	0x00010002

08006574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	4608      	mov	r0, r1
 800657e:	4611      	mov	r1, r2
 8006580:	461a      	mov	r2, r3
 8006582:	4603      	mov	r3, r0
 8006584:	817b      	strh	r3, [r7, #10]
 8006586:	460b      	mov	r3, r1
 8006588:	813b      	strh	r3, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800659c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f8c2 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00d      	beq.n	80065e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d4:	d103      	bne.n	80065de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e0aa      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065e2:	897b      	ldrh	r3, [r7, #10]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	4952      	ldr	r1, [pc, #328]	; (8006740 <I2C_RequestMemoryRead+0x1cc>)
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f8fa 	bl	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e097      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006620:	6a39      	ldr	r1, [r7, #32]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 f964 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00d      	beq.n	800664a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	2b04      	cmp	r3, #4
 8006634:	d107      	bne.n	8006646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e076      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d105      	bne.n	800665c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006650:	893b      	ldrh	r3, [r7, #8]
 8006652:	b2da      	uxtb	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	611a      	str	r2, [r3, #16]
 800665a:	e021      	b.n	80066a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800665c:	893b      	ldrh	r3, [r7, #8]
 800665e:	0a1b      	lsrs	r3, r3, #8
 8006660:	b29b      	uxth	r3, r3
 8006662:	b2da      	uxtb	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800666a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666c:	6a39      	ldr	r1, [r7, #32]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f93e 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00d      	beq.n	8006696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	2b04      	cmp	r3, #4
 8006680:	d107      	bne.n	8006692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e050      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006696:	893b      	ldrh	r3, [r7, #8]
 8006698:	b2da      	uxtb	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a2:	6a39      	ldr	r1, [r7, #32]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f923 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00d      	beq.n	80066cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d107      	bne.n	80066c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e035      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f82b 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00d      	beq.n	8006710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006702:	d103      	bne.n	800670c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800670a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e013      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006710:	897b      	ldrh	r3, [r7, #10]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	4906      	ldr	r1, [pc, #24]	; (8006740 <I2C_RequestMemoryRead+0x1cc>)
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f863 	bl	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	00010002 	.word	0x00010002

08006744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006754:	e025      	b.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800675c:	d021      	beq.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675e:	f7fd fe91 	bl	8004484 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d302      	bcc.n	8006774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d116      	bne.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f043 0220 	orr.w	r2, r3, #32
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e023      	b.n	80067ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d10d      	bne.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	43da      	mvns	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4013      	ands	r3, r2
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bf0c      	ite	eq
 80067be:	2301      	moveq	r3, #1
 80067c0:	2300      	movne	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	e00c      	b.n	80067e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	43da      	mvns	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4013      	ands	r3, r2
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bf0c      	ite	eq
 80067da:	2301      	moveq	r3, #1
 80067dc:	2300      	movne	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d0b6      	beq.n	8006756 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006800:	e051      	b.n	80068a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800680c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006810:	d123      	bne.n	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006820:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800682a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f043 0204 	orr.w	r2, r3, #4
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e046      	b.n	80068e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006860:	d021      	beq.n	80068a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006862:	f7fd fe0f 	bl	8004484 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	429a      	cmp	r2, r3
 8006870:	d302      	bcc.n	8006878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d116      	bne.n	80068a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	f043 0220 	orr.w	r2, r3, #32
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e020      	b.n	80068e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	0c1b      	lsrs	r3, r3, #16
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d10c      	bne.n	80068ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	43da      	mvns	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4013      	ands	r3, r2
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bf14      	ite	ne
 80068c2:	2301      	movne	r3, #1
 80068c4:	2300      	moveq	r3, #0
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	e00b      	b.n	80068e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	43da      	mvns	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4013      	ands	r3, r2
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf14      	ite	ne
 80068dc:	2301      	movne	r3, #1
 80068de:	2300      	moveq	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d18d      	bne.n	8006802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068fc:	e02d      	b.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f8ce 	bl	8006aa0 <I2C_IsAcknowledgeFailed>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e02d      	b.n	800696a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006914:	d021      	beq.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006916:	f7fd fdb5 	bl	8004484 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	d302      	bcc.n	800692c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d116      	bne.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f043 0220 	orr.w	r2, r3, #32
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e007      	b.n	800696a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b80      	cmp	r3, #128	; 0x80
 8006966:	d1ca      	bne.n	80068fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800697e:	e02d      	b.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f88d 	bl	8006aa0 <I2C_IsAcknowledgeFailed>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e02d      	b.n	80069ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006996:	d021      	beq.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006998:	f7fd fd74 	bl	8004484 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d302      	bcc.n	80069ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d116      	bne.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f043 0220 	orr.w	r2, r3, #32
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e007      	b.n	80069ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d1ca      	bne.n	8006980 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a00:	e042      	b.n	8006a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d119      	bne.n	8006a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f06f 0210 	mvn.w	r2, #16
 8006a18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e029      	b.n	8006a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a44:	f7fd fd1e 	bl	8004484 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d302      	bcc.n	8006a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d116      	bne.n	8006a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	f043 0220 	orr.w	r2, r3, #32
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e007      	b.n	8006a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d1b5      	bne.n	8006a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab6:	d11b      	bne.n	8006af0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ac0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	f043 0204 	orr.w	r2, r3, #4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b00:	b08f      	sub	sp, #60	; 0x3c
 8006b02:	af0a      	add	r7, sp, #40	; 0x28
 8006b04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e10f      	b.n	8006d30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d106      	bne.n	8006b30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f009 faf8 	bl	8010120 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2203      	movs	r2, #3
 8006b34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d102      	bne.n	8006b4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f002 ff03 	bl	800995a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	687e      	ldr	r6, [r7, #4]
 8006b5c:	466d      	mov	r5, sp
 8006b5e:	f106 0410 	add.w	r4, r6, #16
 8006b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b72:	1d33      	adds	r3, r6, #4
 8006b74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b76:	6838      	ldr	r0, [r7, #0]
 8006b78:	f002 fdda 	bl	8009730 <USB_CoreInit>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d005      	beq.n	8006b8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2202      	movs	r2, #2
 8006b86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e0d0      	b.n	8006d30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2100      	movs	r1, #0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f002 fef1 	bl	800997c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]
 8006b9e:	e04a      	b.n	8006c36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ba0:	7bfa      	ldrb	r2, [r7, #15]
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	333d      	adds	r3, #61	; 0x3d
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006bb4:	7bfa      	ldrb	r2, [r7, #15]
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	1a9b      	subs	r3, r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	333c      	adds	r3, #60	; 0x3c
 8006bc4:	7bfa      	ldrb	r2, [r7, #15]
 8006bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006bc8:	7bfa      	ldrb	r2, [r7, #15]
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	b298      	uxth	r0, r3
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	3342      	adds	r3, #66	; 0x42
 8006bdc:	4602      	mov	r2, r0
 8006bde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006be0:	7bfa      	ldrb	r2, [r7, #15]
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	1a9b      	subs	r3, r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	333f      	adds	r3, #63	; 0x3f
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006bf4:	7bfa      	ldrb	r2, [r7, #15]
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	1a9b      	subs	r3, r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	440b      	add	r3, r1
 8006c02:	3344      	adds	r3, #68	; 0x44
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c08:	7bfa      	ldrb	r2, [r7, #15]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	3348      	adds	r3, #72	; 0x48
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c1c:	7bfa      	ldrb	r2, [r7, #15]
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4613      	mov	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	3350      	adds	r3, #80	; 0x50
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	3301      	adds	r3, #1
 8006c34:	73fb      	strb	r3, [r7, #15]
 8006c36:	7bfa      	ldrb	r2, [r7, #15]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d3af      	bcc.n	8006ba0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c40:	2300      	movs	r3, #0
 8006c42:	73fb      	strb	r3, [r7, #15]
 8006c44:	e044      	b.n	8006cd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c46:	7bfa      	ldrb	r2, [r7, #15]
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006c58:	2200      	movs	r2, #0
 8006c5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c5c:	7bfa      	ldrb	r2, [r7, #15]
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	4613      	mov	r3, r2
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006c6e:	7bfa      	ldrb	r2, [r7, #15]
 8006c70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c72:	7bfa      	ldrb	r2, [r7, #15]
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4613      	mov	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	1a9b      	subs	r3, r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c88:	7bfa      	ldrb	r2, [r7, #15]
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	1a9b      	subs	r3, r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	1a9b      	subs	r3, r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006cb4:	7bfa      	ldrb	r2, [r7, #15]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	73fb      	strb	r3, [r7, #15]
 8006cd0:	7bfa      	ldrb	r2, [r7, #15]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d3b5      	bcc.n	8006c46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	687e      	ldr	r6, [r7, #4]
 8006ce2:	466d      	mov	r5, sp
 8006ce4:	f106 0410 	add.w	r4, r6, #16
 8006ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006cf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8006cf8:	1d33      	adds	r3, r6, #4
 8006cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cfc:	6838      	ldr	r0, [r7, #0]
 8006cfe:	f002 fe89 	bl	8009a14 <USB_DevInit>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e00d      	b.n	8006d30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f003 ff05 	bl	800ab38 <USB_DevDisconnect>

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_PCD_Start+0x1c>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e020      	b.n	8006d96 <HAL_PCD_Start+0x5e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d109      	bne.n	8006d78 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d005      	beq.n	8006d78 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f002 fddb 	bl	8009938 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f003 feb5 	bl	800aaf6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006d9e:	b590      	push	{r4, r7, lr}
 8006da0:	b08d      	sub	sp, #52	; 0x34
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f003 ff73 	bl	800aca0 <USB_GetMode>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 839d 	bne.w	80074fc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f003 fed7 	bl	800ab7a <USB_ReadInterrupts>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8393 	beq.w	80074fa <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f003 fece 	bl	800ab7a <USB_ReadInterrupts>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d107      	bne.n	8006df8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695a      	ldr	r2, [r3, #20]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f002 0202 	and.w	r2, r2, #2
 8006df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f003 febc 	bl	800ab7a <USB_ReadInterrupts>
 8006e02:	4603      	mov	r3, r0
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b10      	cmp	r3, #16
 8006e0a:	d161      	bne.n	8006ed0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0210 	bic.w	r2, r2, #16
 8006e1a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	f003 020f 	and.w	r2, r3, #15
 8006e28:	4613      	mov	r3, r2
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	4413      	add	r3, r2
 8006e38:	3304      	adds	r3, #4
 8006e3a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	0c5b      	lsrs	r3, r3, #17
 8006e40:	f003 030f 	and.w	r3, r3, #15
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d124      	bne.n	8006e92 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d035      	beq.n	8006ec0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	091b      	lsrs	r3, r3, #4
 8006e5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	6a38      	ldr	r0, [r7, #32]
 8006e68:	f003 fcf3 	bl	800a852 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	091b      	lsrs	r3, r3, #4
 8006e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e78:	441a      	add	r2, r3
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	699a      	ldr	r2, [r3, #24]
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e8a:	441a      	add	r2, r3
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	619a      	str	r2, [r3, #24]
 8006e90:	e016      	b.n	8006ec0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	0c5b      	lsrs	r3, r3, #17
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	2b06      	cmp	r3, #6
 8006e9c:	d110      	bne.n	8006ec0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6a38      	ldr	r0, [r7, #32]
 8006eaa:	f003 fcd2 	bl	800a852 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eba:	441a      	add	r2, r3
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699a      	ldr	r2, [r3, #24]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0210 	orr.w	r2, r2, #16
 8006ece:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f003 fe50 	bl	800ab7a <USB_ReadInterrupts>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ee0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ee4:	d16e      	bne.n	8006fc4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f003 fe56 	bl	800aba0 <USB_ReadDevAllOutEpInterrupt>
 8006ef4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006ef6:	e062      	b.n	8006fbe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d057      	beq.n	8006fb2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f003 fe7b 	bl	800ac08 <USB_ReadDevOutEPInterrupt>
 8006f12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00c      	beq.n	8006f38 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fdb0 	bl	8007a98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00c      	beq.n	8006f5c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2308      	movs	r3, #8
 8006f52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 feaa 	bl	8007cb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f003 0310 	and.w	r3, r3, #16
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f72:	461a      	mov	r2, r3
 8006f74:	2310      	movs	r3, #16
 8006f76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8e:	461a      	mov	r2, r3
 8006f90:	2320      	movs	r3, #32
 8006f92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d009      	beq.n	8006fb2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006faa:	461a      	mov	r2, r3
 8006fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fb0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d199      	bne.n	8006ef8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f003 fdd6 	bl	800ab7a <USB_ReadInterrupts>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fd8:	f040 80c0 	bne.w	800715c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f003 fdf7 	bl	800abd4 <USB_ReadDevAllInEpInterrupt>
 8006fe6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006fec:	e0b2      	b.n	8007154 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 80a7 	beq.w	8007148 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	4611      	mov	r1, r2
 8007004:	4618      	mov	r0, r3
 8007006:	f003 fe1d 	bl	800ac44 <USB_ReadDevInEPInterrupt>
 800700a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d057      	beq.n	80070c6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	f003 030f 	and.w	r3, r3, #15
 800701c:	2201      	movs	r2, #1
 800701e:	fa02 f303 	lsl.w	r3, r2, r3
 8007022:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	43db      	mvns	r3, r3
 8007030:	69f9      	ldr	r1, [r7, #28]
 8007032:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007036:	4013      	ands	r3, r2
 8007038:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	461a      	mov	r2, r3
 8007048:	2301      	movs	r3, #1
 800704a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d132      	bne.n	80070ba <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007058:	4613      	mov	r3, r2
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	3348      	adds	r3, #72	; 0x48
 8007064:	6819      	ldr	r1, [r3, #0]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800706a:	4613      	mov	r3, r2
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	1a9b      	subs	r3, r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4403      	add	r3, r0
 8007074:	3344      	adds	r3, #68	; 0x44
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4419      	add	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707e:	4613      	mov	r3, r2
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	1a9b      	subs	r3, r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4403      	add	r3, r0
 8007088:	3348      	adds	r3, #72	; 0x48
 800708a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	2b00      	cmp	r3, #0
 8007090:	d113      	bne.n	80070ba <HAL_PCD_IRQHandler+0x31c>
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007096:	4613      	mov	r3, r2
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	3350      	adds	r3, #80	; 0x50
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d108      	bne.n	80070ba <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070b2:	461a      	mov	r2, r3
 80070b4:	2101      	movs	r1, #1
 80070b6:	f003 fe25 	bl	800ad04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f009 f8bc 	bl	801023e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d008      	beq.n	80070e2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070dc:	461a      	mov	r2, r3
 80070de:	2308      	movs	r3, #8
 80070e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f003 0310 	and.w	r3, r3, #16
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d008      	beq.n	80070fe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f8:	461a      	mov	r2, r3
 80070fa:	2310      	movs	r3, #16
 80070fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007104:	2b00      	cmp	r3, #0
 8007106:	d008      	beq.n	800711a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007114:	461a      	mov	r2, r3
 8007116:	2340      	movs	r3, #64	; 0x40
 8007118:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007130:	461a      	mov	r2, r3
 8007132:	2302      	movs	r3, #2
 8007134:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fc1b 	bl	800797e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	3301      	adds	r3, #1
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	085b      	lsrs	r3, r3, #1
 8007152:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	2b00      	cmp	r3, #0
 8007158:	f47f af49 	bne.w	8006fee <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4618      	mov	r0, r3
 8007162:	f003 fd0a 	bl	800ab7a <USB_ReadInterrupts>
 8007166:	4603      	mov	r3, r0
 8007168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800716c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007170:	d122      	bne.n	80071b8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800718c:	2b01      	cmp	r3, #1
 800718e:	d108      	bne.n	80071a2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007198:	2100      	movs	r1, #0
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fe26 	bl	8007dec <HAL_PCDEx_LPM_Callback>
 80071a0:	e002      	b.n	80071a8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f009 f8c2 	bl	801032c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695a      	ldr	r2, [r3, #20]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80071b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4618      	mov	r0, r3
 80071be:	f003 fcdc 	bl	800ab7a <USB_ReadInterrupts>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071cc:	d112      	bne.n	80071f4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d102      	bne.n	80071e4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f009 f87e 	bl	80102e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695a      	ldr	r2, [r3, #20]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80071f2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f003 fcbe 	bl	800ab7a <USB_ReadInterrupts>
 80071fe:	4603      	mov	r3, r0
 8007200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007208:	f040 80c7 	bne.w	800739a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800721a:	f023 0301 	bic.w	r3, r3, #1
 800721e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2110      	movs	r1, #16
 8007226:	4618      	mov	r0, r3
 8007228:	f002 fd58 	bl	8009cdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800722c:	2300      	movs	r3, #0
 800722e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007230:	e056      	b.n	80072e0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723e:	461a      	mov	r2, r3
 8007240:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007244:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007256:	0151      	lsls	r1, r2, #5
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	440a      	add	r2, r1
 800725c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007260:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007264:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	440a      	add	r2, r1
 800727c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007280:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007284:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007292:	461a      	mov	r2, r3
 8007294:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007298:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ca:	0151      	lsls	r1, r2, #5
 80072cc:	69fa      	ldr	r2, [r7, #28]
 80072ce:	440a      	add	r2, r1
 80072d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072dc:	3301      	adds	r3, #1
 80072de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d3a3      	bcc.n	8007232 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80072fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007302:	2b00      	cmp	r3, #0
 8007304:	d016      	beq.n	8007334 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007316:	f043 030b 	orr.w	r3, r3, #11
 800731a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732c:	f043 030b 	orr.w	r3, r3, #11
 8007330:	6453      	str	r3, [r2, #68]	; 0x44
 8007332:	e015      	b.n	8007360 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007342:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007346:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800734a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	69fa      	ldr	r2, [r7, #28]
 8007356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735a:	f043 030b 	orr.w	r3, r3, #11
 800735e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800736e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007372:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007384:	461a      	mov	r2, r3
 8007386:	f003 fcbd 	bl	800ad04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	695a      	ldr	r2, [r3, #20]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007398:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4618      	mov	r0, r3
 80073a0:	f003 fbeb 	bl	800ab7a <USB_ReadInterrupts>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ae:	d124      	bne.n	80073fa <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f003 fc81 	bl	800acbc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f002 fce9 	bl	8009d96 <USB_GetDevSpeed>
 80073c4:	4603      	mov	r3, r0
 80073c6:	461a      	mov	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681c      	ldr	r4, [r3, #0]
 80073d0:	f001 f958 	bl	8008684 <HAL_RCC_GetHCLKFreq>
 80073d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	4620      	mov	r0, r4
 80073e0:	f002 fa08 	bl	80097f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f008 ff52 	bl	801028e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	695a      	ldr	r2, [r3, #20]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80073f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	f003 fbbb 	bl	800ab7a <USB_ReadInterrupts>
 8007404:	4603      	mov	r3, r0
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	2b08      	cmp	r3, #8
 800740c:	d10a      	bne.n	8007424 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f008 ff2f 	bl	8010272 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695a      	ldr	r2, [r3, #20]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f002 0208 	and.w	r2, r2, #8
 8007422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4618      	mov	r0, r3
 800742a:	f003 fba6 	bl	800ab7a <USB_ReadInterrupts>
 800742e:	4603      	mov	r3, r0
 8007430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007438:	d10f      	bne.n	800745a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	b2db      	uxtb	r3, r3
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f008 ff91 	bl	801036c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	695a      	ldr	r2, [r3, #20]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007458:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f003 fb8b 	bl	800ab7a <USB_ReadInterrupts>
 8007464:	4603      	mov	r3, r0
 8007466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800746a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800746e:	d10f      	bne.n	8007490 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	b2db      	uxtb	r3, r3
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f008 ff64 	bl	8010348 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695a      	ldr	r2, [r3, #20]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800748e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f003 fb70 	bl	800ab7a <USB_ReadInterrupts>
 800749a:	4603      	mov	r3, r0
 800749c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a4:	d10a      	bne.n	80074bc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f008 ff72 	bl	8010390 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	695a      	ldr	r2, [r3, #20]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80074ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f003 fb5a 	bl	800ab7a <USB_ReadInterrupts>
 80074c6:	4603      	mov	r3, r0
 80074c8:	f003 0304 	and.w	r3, r3, #4
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d115      	bne.n	80074fc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f008 ff62 	bl	80103ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6859      	ldr	r1, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	605a      	str	r2, [r3, #4]
 80074f8:	e000      	b.n	80074fc <HAL_PCD_IRQHandler+0x75e>
      return;
 80074fa:	bf00      	nop
    }
  }
}
 80074fc:	3734      	adds	r7, #52	; 0x34
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd90      	pop	{r4, r7, pc}

08007502 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	460b      	mov	r3, r1
 800750c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007514:	2b01      	cmp	r3, #1
 8007516:	d101      	bne.n	800751c <HAL_PCD_SetAddress+0x1a>
 8007518:	2302      	movs	r3, #2
 800751a:	e013      	b.n	8007544 <HAL_PCD_SetAddress+0x42>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	78fa      	ldrb	r2, [r7, #3]
 8007528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	78fa      	ldrb	r2, [r7, #3]
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f003 fab8 	bl	800aaaa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	4608      	mov	r0, r1
 8007556:	4611      	mov	r1, r2
 8007558:	461a      	mov	r2, r3
 800755a:	4603      	mov	r3, r0
 800755c:	70fb      	strb	r3, [r7, #3]
 800755e:	460b      	mov	r3, r1
 8007560:	803b      	strh	r3, [r7, #0]
 8007562:	4613      	mov	r3, r2
 8007564:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800756a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800756e:	2b00      	cmp	r3, #0
 8007570:	da0f      	bge.n	8007592 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	f003 020f 	and.w	r2, r3, #15
 8007578:	4613      	mov	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	3338      	adds	r3, #56	; 0x38
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	4413      	add	r3, r2
 8007586:	3304      	adds	r3, #4
 8007588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	705a      	strb	r2, [r3, #1]
 8007590:	e00f      	b.n	80075b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	f003 020f 	and.w	r2, r3, #15
 8007598:	4613      	mov	r3, r2
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	1a9b      	subs	r3, r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	4413      	add	r3, r2
 80075a8:	3304      	adds	r3, #4
 80075aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80075b2:	78fb      	ldrb	r3, [r7, #3]
 80075b4:	f003 030f 	and.w	r3, r3, #15
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80075be:	883a      	ldrh	r2, [r7, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	78ba      	ldrb	r2, [r7, #2]
 80075c8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80075dc:	78bb      	ldrb	r3, [r7, #2]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d102      	bne.n	80075e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d101      	bne.n	80075f6 <HAL_PCD_EP_Open+0xaa>
 80075f2:	2302      	movs	r3, #2
 80075f4:	e00e      	b.n	8007614 <HAL_PCD_EP_Open+0xc8>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68f9      	ldr	r1, [r7, #12]
 8007604:	4618      	mov	r0, r3
 8007606:	f002 fbeb 	bl	8009de0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007612:	7afb      	ldrb	r3, [r7, #11]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800762c:	2b00      	cmp	r3, #0
 800762e:	da0f      	bge.n	8007650 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	f003 020f 	and.w	r2, r3, #15
 8007636:	4613      	mov	r3, r2
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	1a9b      	subs	r3, r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	3338      	adds	r3, #56	; 0x38
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	3304      	adds	r3, #4
 8007646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	705a      	strb	r2, [r3, #1]
 800764e:	e00f      	b.n	8007670 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	f003 020f 	and.w	r2, r3, #15
 8007656:	4613      	mov	r3, r2
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	4413      	add	r3, r2
 8007666:	3304      	adds	r3, #4
 8007668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	f003 030f 	and.w	r3, r3, #15
 8007676:	b2da      	uxtb	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <HAL_PCD_EP_Close+0x6e>
 8007686:	2302      	movs	r3, #2
 8007688:	e00e      	b.n	80076a8 <HAL_PCD_EP_Close+0x8c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68f9      	ldr	r1, [r7, #12]
 8007698:	4618      	mov	r0, r3
 800769a:	f002 fc29 	bl	8009ef0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	607a      	str	r2, [r7, #4]
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	460b      	mov	r3, r1
 80076be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	f003 020f 	and.w	r2, r3, #15
 80076c6:	4613      	mov	r3, r2
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	1a9b      	subs	r3, r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4413      	add	r3, r2
 80076d6:	3304      	adds	r3, #4
 80076d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2200      	movs	r2, #0
 80076ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2200      	movs	r2, #0
 80076f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076f2:	7afb      	ldrb	r3, [r7, #11]
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d102      	bne.n	800770c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800770c:	7afb      	ldrb	r3, [r7, #11]
 800770e:	f003 030f 	and.w	r3, r3, #15
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	b2db      	uxtb	r3, r3
 8007720:	461a      	mov	r2, r3
 8007722:	6979      	ldr	r1, [r7, #20]
 8007724:	f002 ff04 	bl	800a530 <USB_EP0StartXfer>
 8007728:	e008      	b.n	800773c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	6979      	ldr	r1, [r7, #20]
 8007738:	f002 fcb6 	bl	800a0a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	460b      	mov	r3, r1
 8007750:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	f003 020f 	and.w	r2, r3, #15
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	1a9b      	subs	r3, r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	440b      	add	r3, r1
 8007764:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007768:	681b      	ldr	r3, [r3, #0]
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b086      	sub	sp, #24
 800777a:	af00      	add	r7, sp, #0
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
 8007782:	460b      	mov	r3, r1
 8007784:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007786:	7afb      	ldrb	r3, [r7, #11]
 8007788:	f003 020f 	and.w	r2, r3, #15
 800778c:	4613      	mov	r3, r2
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	1a9b      	subs	r3, r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	3338      	adds	r3, #56	; 0x38
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4413      	add	r3, r2
 800779a:	3304      	adds	r3, #4
 800779c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2200      	movs	r2, #0
 80077ae:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2201      	movs	r2, #1
 80077b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077b6:	7afb      	ldrb	r3, [r7, #11]
 80077b8:	f003 030f 	and.w	r3, r3, #15
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d102      	bne.n	80077d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d109      	bne.n	80077ee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	6979      	ldr	r1, [r7, #20]
 80077e8:	f002 fea2 	bl	800a530 <USB_EP0StartXfer>
 80077ec:	e008      	b.n	8007800 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	6979      	ldr	r1, [r7, #20]
 80077fc:	f002 fc54 	bl	800a0a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	f003 020f 	and.w	r2, r3, #15
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d901      	bls.n	8007828 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e050      	b.n	80078ca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800782c:	2b00      	cmp	r3, #0
 800782e:	da0f      	bge.n	8007850 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	f003 020f 	and.w	r2, r3, #15
 8007836:	4613      	mov	r3, r2
 8007838:	00db      	lsls	r3, r3, #3
 800783a:	1a9b      	subs	r3, r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	3338      	adds	r3, #56	; 0x38
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	4413      	add	r3, r2
 8007844:	3304      	adds	r3, #4
 8007846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2201      	movs	r2, #1
 800784c:	705a      	strb	r2, [r3, #1]
 800784e:	e00d      	b.n	800786c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007850:	78fa      	ldrb	r2, [r7, #3]
 8007852:	4613      	mov	r3, r2
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	1a9b      	subs	r3, r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	4413      	add	r3, r2
 8007862:	3304      	adds	r3, #4
 8007864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	f003 030f 	and.w	r3, r3, #15
 8007878:	b2da      	uxtb	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007884:	2b01      	cmp	r3, #1
 8007886:	d101      	bne.n	800788c <HAL_PCD_EP_SetStall+0x82>
 8007888:	2302      	movs	r3, #2
 800788a:	e01e      	b.n	80078ca <HAL_PCD_EP_SetStall+0xc0>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68f9      	ldr	r1, [r7, #12]
 800789a:	4618      	mov	r0, r3
 800789c:	f003 f831 	bl	800a902 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	b2d9      	uxtb	r1, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078ba:	461a      	mov	r2, r3
 80078bc:	f003 fa22 	bl	800ad04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	f003 020f 	and.w	r2, r3, #15
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d901      	bls.n	80078f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e042      	b.n	8007976 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80078f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	da0f      	bge.n	8007918 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	f003 020f 	and.w	r2, r3, #15
 80078fe:	4613      	mov	r3, r2
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	1a9b      	subs	r3, r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	3338      	adds	r3, #56	; 0x38
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	4413      	add	r3, r2
 800790c:	3304      	adds	r3, #4
 800790e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2201      	movs	r2, #1
 8007914:	705a      	strb	r2, [r3, #1]
 8007916:	e00f      	b.n	8007938 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	f003 020f 	and.w	r2, r3, #15
 800791e:	4613      	mov	r3, r2
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	4413      	add	r3, r2
 800792e:	3304      	adds	r3, #4
 8007930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	f003 030f 	and.w	r3, r3, #15
 8007944:	b2da      	uxtb	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_PCD_EP_ClrStall+0x86>
 8007954:	2302      	movs	r3, #2
 8007956:	e00e      	b.n	8007976 <HAL_PCD_EP_ClrStall+0xa4>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68f9      	ldr	r1, [r7, #12]
 8007966:	4618      	mov	r0, r3
 8007968:	f003 f839 	bl	800a9de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b08a      	sub	sp, #40	; 0x28
 8007982:	af02      	add	r7, sp, #8
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	4613      	mov	r3, r2
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	1a9b      	subs	r3, r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	3338      	adds	r3, #56	; 0x38
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	4413      	add	r3, r2
 80079a2:	3304      	adds	r3, #4
 80079a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	699a      	ldr	r2, [r3, #24]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d901      	bls.n	80079b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e06c      	b.n	8007a90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	695a      	ldr	r2, [r3, #20]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d902      	bls.n	80079d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	3303      	adds	r3, #3
 80079d6:	089b      	lsrs	r3, r3, #2
 80079d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079da:	e02b      	b.n	8007a34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	695a      	ldr	r2, [r3, #20]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d902      	bls.n	80079f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	3303      	adds	r3, #3
 80079fc:	089b      	lsrs	r3, r3, #2
 80079fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	68d9      	ldr	r1, [r3, #12]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	4603      	mov	r3, r0
 8007a16:	6978      	ldr	r0, [r7, #20]
 8007a18:	f002 fedd 	bl	800a7d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	441a      	add	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	699a      	ldr	r2, [r3, #24]
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	441a      	add	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d809      	bhi.n	8007a5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d203      	bcs.n	8007a5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1be      	bne.n	80079dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	695a      	ldr	r2, [r3, #20]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d811      	bhi.n	8007a8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	f003 030f 	and.w	r3, r3, #15
 8007a70:	2201      	movs	r2, #1
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	43db      	mvns	r3, r3
 8007a84:	6939      	ldr	r1, [r7, #16]
 8007a86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3720      	adds	r7, #32
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	333c      	adds	r3, #60	; 0x3c
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	f040 80a0 	bne.w	8007c10 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d015      	beq.n	8007b06 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4a72      	ldr	r2, [pc, #456]	; (8007ca8 <PCD_EP_OutXfrComplete_int+0x210>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	f240 80dd 	bls.w	8007c9e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 80d7 	beq.w	8007c9e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afc:	461a      	mov	r2, r3
 8007afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b02:	6093      	str	r3, [r2, #8]
 8007b04:	e0cb      	b.n	8007c9e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f003 0320 	and.w	r3, r3, #32
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d009      	beq.n	8007b24 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	2320      	movs	r3, #32
 8007b20:	6093      	str	r3, [r2, #8]
 8007b22:	e0bc      	b.n	8007c9e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f040 80b7 	bne.w	8007c9e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4a5d      	ldr	r2, [pc, #372]	; (8007ca8 <PCD_EP_OutXfrComplete_int+0x210>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d90f      	bls.n	8007b58 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b54:	6093      	str	r3, [r2, #8]
 8007b56:	e0a2      	b.n	8007c9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	1a9b      	subs	r3, r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007b6a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	0159      	lsls	r1, r3, #5
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	440b      	add	r3, r1
 8007b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007b7e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	4613      	mov	r3, r2
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	1a9b      	subs	r3, r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4403      	add	r3, r0
 8007b8e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007b92:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	1a9b      	subs	r3, r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ba6:	6819      	ldr	r1, [r3, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	1a9b      	subs	r3, r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4403      	add	r3, r0
 8007bb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4419      	add	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	1a9b      	subs	r3, r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4403      	add	r3, r0
 8007bcc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007bd0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d114      	bne.n	8007c02 <PCD_EP_OutXfrComplete_int+0x16a>
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	1a9b      	subs	r3, r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d108      	bne.n	8007c02 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	f003 f881 	bl	800ad04 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f008 fafd 	bl	8010208 <HAL_PCD_DataOutStageCallback>
 8007c0e:	e046      	b.n	8007c9e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4a26      	ldr	r2, [pc, #152]	; (8007cac <PCD_EP_OutXfrComplete_int+0x214>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d124      	bne.n	8007c62 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2e:	461a      	mov	r2, r3
 8007c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c34:	6093      	str	r3, [r2, #8]
 8007c36:	e032      	b.n	8007c9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d008      	beq.n	8007c54 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4e:	461a      	mov	r2, r3
 8007c50:	2320      	movs	r3, #32
 8007c52:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f008 fad4 	bl	8010208 <HAL_PCD_DataOutStageCallback>
 8007c60:	e01d      	b.n	8007c9e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d114      	bne.n	8007c92 <PCD_EP_OutXfrComplete_int+0x1fa>
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	1a9b      	subs	r3, r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	440b      	add	r3, r1
 8007c76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d108      	bne.n	8007c92 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	f003 f839 	bl	800ad04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f008 fab5 	bl	8010208 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	4f54300a 	.word	0x4f54300a
 8007cac:	4f54310a 	.word	0x4f54310a

08007cb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	333c      	adds	r3, #60	; 0x3c
 8007cc8:	3304      	adds	r3, #4
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4a15      	ldr	r2, [pc, #84]	; (8007d38 <PCD_EP_OutSetupPacket_int+0x88>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d90e      	bls.n	8007d04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d009      	beq.n	8007d04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f008 fa6d 	bl	80101e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4a0a      	ldr	r2, [pc, #40]	; (8007d38 <PCD_EP_OutSetupPacket_int+0x88>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d90c      	bls.n	8007d2c <PCD_EP_OutSetupPacket_int+0x7c>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d108      	bne.n	8007d2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d24:	461a      	mov	r2, r3
 8007d26:	2101      	movs	r1, #1
 8007d28:	f002 ffec 	bl	800ad04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	4f54300a 	.word	0x4f54300a

08007d3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d107      	bne.n	8007d6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007d5a:	883b      	ldrh	r3, [r7, #0]
 8007d5c:	0419      	lsls	r1, r3, #16
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	629a      	str	r2, [r3, #40]	; 0x28
 8007d68:	e028      	b.n	8007dbc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	0c1b      	lsrs	r3, r3, #16
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	4413      	add	r3, r2
 8007d76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
 8007d7c:	e00d      	b.n	8007d9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	3340      	adds	r3, #64	; 0x40
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	0c1b      	lsrs	r3, r3, #16
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	4413      	add	r3, r2
 8007d92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	3301      	adds	r3, #1
 8007d98:	73fb      	strb	r3, [r7, #15]
 8007d9a:	7bfa      	ldrb	r2, [r7, #15]
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d3ec      	bcc.n	8007d7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007da4:	883b      	ldrh	r3, [r7, #0]
 8007da6:	0418      	lsls	r0, r3, #16
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6819      	ldr	r1, [r3, #0]
 8007dac:	78fb      	ldrb	r3, [r7, #3]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	4302      	orrs	r2, r0
 8007db4:	3340      	adds	r3, #64	; 0x40
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	440b      	add	r3, r1
 8007dba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	887a      	ldrh	r2, [r7, #2]
 8007ddc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e264      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d075      	beq.n	8007f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e22:	4ba3      	ldr	r3, [pc, #652]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 030c 	and.w	r3, r3, #12
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d00c      	beq.n	8007e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e2e:	4ba0      	ldr	r3, [pc, #640]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	d112      	bne.n	8007e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e3a:	4b9d      	ldr	r3, [pc, #628]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e46:	d10b      	bne.n	8007e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e48:	4b99      	ldr	r3, [pc, #612]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d05b      	beq.n	8007f0c <HAL_RCC_OscConfig+0x108>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d157      	bne.n	8007f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e23f      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e68:	d106      	bne.n	8007e78 <HAL_RCC_OscConfig+0x74>
 8007e6a:	4b91      	ldr	r3, [pc, #580]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a90      	ldr	r2, [pc, #576]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	e01d      	b.n	8007eb4 <HAL_RCC_OscConfig+0xb0>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e80:	d10c      	bne.n	8007e9c <HAL_RCC_OscConfig+0x98>
 8007e82:	4b8b      	ldr	r3, [pc, #556]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a8a      	ldr	r2, [pc, #552]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	4b88      	ldr	r3, [pc, #544]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a87      	ldr	r2, [pc, #540]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	e00b      	b.n	8007eb4 <HAL_RCC_OscConfig+0xb0>
 8007e9c:	4b84      	ldr	r3, [pc, #528]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a83      	ldr	r2, [pc, #524]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	4b81      	ldr	r3, [pc, #516]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a80      	ldr	r2, [pc, #512]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d013      	beq.n	8007ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ebc:	f7fc fae2 	bl	8004484 <HAL_GetTick>
 8007ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ec4:	f7fc fade 	bl	8004484 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b64      	cmp	r3, #100	; 0x64
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e204      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ed6:	4b76      	ldr	r3, [pc, #472]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0f0      	beq.n	8007ec4 <HAL_RCC_OscConfig+0xc0>
 8007ee2:	e014      	b.n	8007f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ee4:	f7fc face 	bl	8004484 <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eec:	f7fc faca 	bl	8004484 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b64      	cmp	r3, #100	; 0x64
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e1f0      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007efe:	4b6c      	ldr	r3, [pc, #432]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1f0      	bne.n	8007eec <HAL_RCC_OscConfig+0xe8>
 8007f0a:	e000      	b.n	8007f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d063      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f1a:	4b65      	ldr	r3, [pc, #404]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 030c 	and.w	r3, r3, #12
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00b      	beq.n	8007f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f26:	4b62      	ldr	r3, [pc, #392]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f2e:	2b08      	cmp	r3, #8
 8007f30:	d11c      	bne.n	8007f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f32:	4b5f      	ldr	r3, [pc, #380]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d116      	bne.n	8007f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f3e:	4b5c      	ldr	r3, [pc, #368]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d005      	beq.n	8007f56 <HAL_RCC_OscConfig+0x152>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d001      	beq.n	8007f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e1c4      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f56:	4b56      	ldr	r3, [pc, #344]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	4952      	ldr	r1, [pc, #328]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f6a:	e03a      	b.n	8007fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d020      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f74:	4b4f      	ldr	r3, [pc, #316]	; (80080b4 <HAL_RCC_OscConfig+0x2b0>)
 8007f76:	2201      	movs	r2, #1
 8007f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7a:	f7fc fa83 	bl	8004484 <HAL_GetTick>
 8007f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f80:	e008      	b.n	8007f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f82:	f7fc fa7f 	bl	8004484 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d901      	bls.n	8007f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e1a5      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f94:	4b46      	ldr	r3, [pc, #280]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0f0      	beq.n	8007f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fa0:	4b43      	ldr	r3, [pc, #268]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	4940      	ldr	r1, [pc, #256]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	600b      	str	r3, [r1, #0]
 8007fb4:	e015      	b.n	8007fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fb6:	4b3f      	ldr	r3, [pc, #252]	; (80080b4 <HAL_RCC_OscConfig+0x2b0>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fbc:	f7fc fa62 	bl	8004484 <HAL_GetTick>
 8007fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fc4:	f7fc fa5e 	bl	8004484 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e184      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fd6:	4b36      	ldr	r3, [pc, #216]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1f0      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0308 	and.w	r3, r3, #8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d030      	beq.n	8008050 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d016      	beq.n	8008024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ff6:	4b30      	ldr	r3, [pc, #192]	; (80080b8 <HAL_RCC_OscConfig+0x2b4>)
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ffc:	f7fc fa42 	bl	8004484 <HAL_GetTick>
 8008000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008004:	f7fc fa3e 	bl	8004484 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b02      	cmp	r3, #2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e164      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008016:	4b26      	ldr	r3, [pc, #152]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8008018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0f0      	beq.n	8008004 <HAL_RCC_OscConfig+0x200>
 8008022:	e015      	b.n	8008050 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008024:	4b24      	ldr	r3, [pc, #144]	; (80080b8 <HAL_RCC_OscConfig+0x2b4>)
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800802a:	f7fc fa2b 	bl	8004484 <HAL_GetTick>
 800802e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008030:	e008      	b.n	8008044 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008032:	f7fc fa27 	bl	8004484 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	2b02      	cmp	r3, #2
 800803e:	d901      	bls.n	8008044 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e14d      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008044:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8008046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1f0      	bne.n	8008032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 80a0 	beq.w	800819e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800805e:	2300      	movs	r3, #0
 8008060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008062:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10f      	bne.n	800808e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800806e:	2300      	movs	r3, #0
 8008070:	60bb      	str	r3, [r7, #8]
 8008072:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	4a0e      	ldr	r2, [pc, #56]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8008078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800807c:	6413      	str	r3, [r2, #64]	; 0x40
 800807e:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <HAL_RCC_OscConfig+0x2ac>)
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008086:	60bb      	str	r3, [r7, #8]
 8008088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800808a:	2301      	movs	r3, #1
 800808c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800808e:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <HAL_RCC_OscConfig+0x2b8>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008096:	2b00      	cmp	r3, #0
 8008098:	d121      	bne.n	80080de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800809a:	4b08      	ldr	r3, [pc, #32]	; (80080bc <HAL_RCC_OscConfig+0x2b8>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a07      	ldr	r2, [pc, #28]	; (80080bc <HAL_RCC_OscConfig+0x2b8>)
 80080a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080a6:	f7fc f9ed 	bl	8004484 <HAL_GetTick>
 80080aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080ac:	e011      	b.n	80080d2 <HAL_RCC_OscConfig+0x2ce>
 80080ae:	bf00      	nop
 80080b0:	40023800 	.word	0x40023800
 80080b4:	42470000 	.word	0x42470000
 80080b8:	42470e80 	.word	0x42470e80
 80080bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080c0:	f7fc f9e0 	bl	8004484 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e106      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080d2:	4b85      	ldr	r3, [pc, #532]	; (80082e8 <HAL_RCC_OscConfig+0x4e4>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0f0      	beq.n	80080c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d106      	bne.n	80080f4 <HAL_RCC_OscConfig+0x2f0>
 80080e6:	4b81      	ldr	r3, [pc, #516]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	4a80      	ldr	r2, [pc, #512]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 80080ec:	f043 0301 	orr.w	r3, r3, #1
 80080f0:	6713      	str	r3, [r2, #112]	; 0x70
 80080f2:	e01c      	b.n	800812e <HAL_RCC_OscConfig+0x32a>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	2b05      	cmp	r3, #5
 80080fa:	d10c      	bne.n	8008116 <HAL_RCC_OscConfig+0x312>
 80080fc:	4b7b      	ldr	r3, [pc, #492]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 80080fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008100:	4a7a      	ldr	r2, [pc, #488]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 8008102:	f043 0304 	orr.w	r3, r3, #4
 8008106:	6713      	str	r3, [r2, #112]	; 0x70
 8008108:	4b78      	ldr	r3, [pc, #480]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 800810a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810c:	4a77      	ldr	r2, [pc, #476]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 800810e:	f043 0301 	orr.w	r3, r3, #1
 8008112:	6713      	str	r3, [r2, #112]	; 0x70
 8008114:	e00b      	b.n	800812e <HAL_RCC_OscConfig+0x32a>
 8008116:	4b75      	ldr	r3, [pc, #468]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 8008118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811a:	4a74      	ldr	r2, [pc, #464]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 800811c:	f023 0301 	bic.w	r3, r3, #1
 8008120:	6713      	str	r3, [r2, #112]	; 0x70
 8008122:	4b72      	ldr	r3, [pc, #456]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	4a71      	ldr	r2, [pc, #452]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 8008128:	f023 0304 	bic.w	r3, r3, #4
 800812c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d015      	beq.n	8008162 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008136:	f7fc f9a5 	bl	8004484 <HAL_GetTick>
 800813a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800813c:	e00a      	b.n	8008154 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800813e:	f7fc f9a1 	bl	8004484 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	f241 3288 	movw	r2, #5000	; 0x1388
 800814c:	4293      	cmp	r3, r2
 800814e:	d901      	bls.n	8008154 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e0c5      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008154:	4b65      	ldr	r3, [pc, #404]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 8008156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d0ee      	beq.n	800813e <HAL_RCC_OscConfig+0x33a>
 8008160:	e014      	b.n	800818c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008162:	f7fc f98f 	bl	8004484 <HAL_GetTick>
 8008166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008168:	e00a      	b.n	8008180 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800816a:	f7fc f98b 	bl	8004484 <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	f241 3288 	movw	r2, #5000	; 0x1388
 8008178:	4293      	cmp	r3, r2
 800817a:	d901      	bls.n	8008180 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e0af      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008180:	4b5a      	ldr	r3, [pc, #360]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 8008182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1ee      	bne.n	800816a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d105      	bne.n	800819e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008192:	4b56      	ldr	r3, [pc, #344]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	4a55      	ldr	r2, [pc, #340]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 8008198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800819c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 809b 	beq.w	80082de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081a8:	4b50      	ldr	r3, [pc, #320]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f003 030c 	and.w	r3, r3, #12
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d05c      	beq.n	800826e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d141      	bne.n	8008240 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081bc:	4b4c      	ldr	r3, [pc, #304]	; (80082f0 <HAL_RCC_OscConfig+0x4ec>)
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c2:	f7fc f95f 	bl	8004484 <HAL_GetTick>
 80081c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081c8:	e008      	b.n	80081dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081ca:	f7fc f95b 	bl	8004484 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d901      	bls.n	80081dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e081      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081dc:	4b43      	ldr	r3, [pc, #268]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1f0      	bne.n	80081ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	69da      	ldr	r2, [r3, #28]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	431a      	orrs	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	019b      	lsls	r3, r3, #6
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fe:	085b      	lsrs	r3, r3, #1
 8008200:	3b01      	subs	r3, #1
 8008202:	041b      	lsls	r3, r3, #16
 8008204:	431a      	orrs	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	061b      	lsls	r3, r3, #24
 800820c:	4937      	ldr	r1, [pc, #220]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 800820e:	4313      	orrs	r3, r2
 8008210:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008212:	4b37      	ldr	r3, [pc, #220]	; (80082f0 <HAL_RCC_OscConfig+0x4ec>)
 8008214:	2201      	movs	r2, #1
 8008216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008218:	f7fc f934 	bl	8004484 <HAL_GetTick>
 800821c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800821e:	e008      	b.n	8008232 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008220:	f7fc f930 	bl	8004484 <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	2b02      	cmp	r3, #2
 800822c:	d901      	bls.n	8008232 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e056      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008232:	4b2e      	ldr	r3, [pc, #184]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0f0      	beq.n	8008220 <HAL_RCC_OscConfig+0x41c>
 800823e:	e04e      	b.n	80082de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008240:	4b2b      	ldr	r3, [pc, #172]	; (80082f0 <HAL_RCC_OscConfig+0x4ec>)
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008246:	f7fc f91d 	bl	8004484 <HAL_GetTick>
 800824a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800824c:	e008      	b.n	8008260 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800824e:	f7fc f919 	bl	8004484 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	d901      	bls.n	8008260 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e03f      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008260:	4b22      	ldr	r3, [pc, #136]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1f0      	bne.n	800824e <HAL_RCC_OscConfig+0x44a>
 800826c:	e037      	b.n	80082de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d101      	bne.n	800827a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e032      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800827a:	4b1c      	ldr	r3, [pc, #112]	; (80082ec <HAL_RCC_OscConfig+0x4e8>)
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d028      	beq.n	80082da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008292:	429a      	cmp	r2, r3
 8008294:	d121      	bne.n	80082da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d11a      	bne.n	80082da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80082aa:	4013      	ands	r3, r2
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d111      	bne.n	80082da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	085b      	lsrs	r3, r3, #1
 80082c2:	3b01      	subs	r3, #1
 80082c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d107      	bne.n	80082da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d001      	beq.n	80082de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	40007000 	.word	0x40007000
 80082ec:	40023800 	.word	0x40023800
 80082f0:	42470060 	.word	0x42470060

080082f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e0cc      	b.n	80084a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008308:	4b68      	ldr	r3, [pc, #416]	; (80084ac <HAL_RCC_ClockConfig+0x1b8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0307 	and.w	r3, r3, #7
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d90c      	bls.n	8008330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008316:	4b65      	ldr	r3, [pc, #404]	; (80084ac <HAL_RCC_ClockConfig+0x1b8>)
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	b2d2      	uxtb	r2, r2
 800831c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800831e:	4b63      	ldr	r3, [pc, #396]	; (80084ac <HAL_RCC_ClockConfig+0x1b8>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d001      	beq.n	8008330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e0b8      	b.n	80084a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0302 	and.w	r3, r3, #2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d020      	beq.n	800837e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008348:	4b59      	ldr	r3, [pc, #356]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	4a58      	ldr	r2, [pc, #352]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 800834e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0308 	and.w	r3, r3, #8
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008360:	4b53      	ldr	r3, [pc, #332]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	4a52      	ldr	r2, [pc, #328]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800836a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800836c:	4b50      	ldr	r3, [pc, #320]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	494d      	ldr	r1, [pc, #308]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 800837a:	4313      	orrs	r3, r2
 800837c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d044      	beq.n	8008414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d107      	bne.n	80083a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008392:	4b47      	ldr	r3, [pc, #284]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d119      	bne.n	80083d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e07f      	b.n	80084a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d003      	beq.n	80083b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d107      	bne.n	80083c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083b2:	4b3f      	ldr	r3, [pc, #252]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d109      	bne.n	80083d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e06f      	b.n	80084a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083c2:	4b3b      	ldr	r3, [pc, #236]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e067      	b.n	80084a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083d2:	4b37      	ldr	r3, [pc, #220]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f023 0203 	bic.w	r2, r3, #3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	4934      	ldr	r1, [pc, #208]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083e4:	f7fc f84e 	bl	8004484 <HAL_GetTick>
 80083e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ea:	e00a      	b.n	8008402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083ec:	f7fc f84a 	bl	8004484 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d901      	bls.n	8008402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e04f      	b.n	80084a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008402:	4b2b      	ldr	r3, [pc, #172]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f003 020c 	and.w	r2, r3, #12
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	429a      	cmp	r2, r3
 8008412:	d1eb      	bne.n	80083ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008414:	4b25      	ldr	r3, [pc, #148]	; (80084ac <HAL_RCC_ClockConfig+0x1b8>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0307 	and.w	r3, r3, #7
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	429a      	cmp	r2, r3
 8008420:	d20c      	bcs.n	800843c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008422:	4b22      	ldr	r3, [pc, #136]	; (80084ac <HAL_RCC_ClockConfig+0x1b8>)
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	b2d2      	uxtb	r2, r2
 8008428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800842a:	4b20      	ldr	r3, [pc, #128]	; (80084ac <HAL_RCC_ClockConfig+0x1b8>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d001      	beq.n	800843c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e032      	b.n	80084a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d008      	beq.n	800845a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008448:	4b19      	ldr	r3, [pc, #100]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	4916      	ldr	r1, [pc, #88]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008456:	4313      	orrs	r3, r2
 8008458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0308 	and.w	r3, r3, #8
 8008462:	2b00      	cmp	r3, #0
 8008464:	d009      	beq.n	800847a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008466:	4b12      	ldr	r3, [pc, #72]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	00db      	lsls	r3, r3, #3
 8008474:	490e      	ldr	r1, [pc, #56]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008476:	4313      	orrs	r3, r2
 8008478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800847a:	f000 f821 	bl	80084c0 <HAL_RCC_GetSysClockFreq>
 800847e:	4602      	mov	r2, r0
 8008480:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	091b      	lsrs	r3, r3, #4
 8008486:	f003 030f 	and.w	r3, r3, #15
 800848a:	490a      	ldr	r1, [pc, #40]	; (80084b4 <HAL_RCC_ClockConfig+0x1c0>)
 800848c:	5ccb      	ldrb	r3, [r1, r3]
 800848e:	fa22 f303 	lsr.w	r3, r2, r3
 8008492:	4a09      	ldr	r2, [pc, #36]	; (80084b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008496:	4b09      	ldr	r3, [pc, #36]	; (80084bc <HAL_RCC_ClockConfig+0x1c8>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4618      	mov	r0, r3
 800849c:	f7fb f9de 	bl	800385c <HAL_InitTick>

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	40023c00 	.word	0x40023c00
 80084b0:	40023800 	.word	0x40023800
 80084b4:	08013a10 	.word	0x08013a10
 80084b8:	20000000 	.word	0x20000000
 80084bc:	20000004 	.word	0x20000004

080084c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	607b      	str	r3, [r7, #4]
 80084cc:	2300      	movs	r3, #0
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	2300      	movs	r3, #0
 80084d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084d8:	4b67      	ldr	r3, [pc, #412]	; (8008678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f003 030c 	and.w	r3, r3, #12
 80084e0:	2b08      	cmp	r3, #8
 80084e2:	d00d      	beq.n	8008500 <HAL_RCC_GetSysClockFreq+0x40>
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	f200 80bd 	bhi.w	8008664 <HAL_RCC_GetSysClockFreq+0x1a4>
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <HAL_RCC_GetSysClockFreq+0x34>
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d003      	beq.n	80084fa <HAL_RCC_GetSysClockFreq+0x3a>
 80084f2:	e0b7      	b.n	8008664 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80084f4:	4b61      	ldr	r3, [pc, #388]	; (800867c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80084f6:	60bb      	str	r3, [r7, #8]
       break;
 80084f8:	e0b7      	b.n	800866a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084fa:	4b61      	ldr	r3, [pc, #388]	; (8008680 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80084fc:	60bb      	str	r3, [r7, #8]
      break;
 80084fe:	e0b4      	b.n	800866a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008500:	4b5d      	ldr	r3, [pc, #372]	; (8008678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008508:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800850a:	4b5b      	ldr	r3, [pc, #364]	; (8008678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d04d      	beq.n	80085b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008516:	4b58      	ldr	r3, [pc, #352]	; (8008678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	099b      	lsrs	r3, r3, #6
 800851c:	461a      	mov	r2, r3
 800851e:	f04f 0300 	mov.w	r3, #0
 8008522:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008526:	f04f 0100 	mov.w	r1, #0
 800852a:	ea02 0800 	and.w	r8, r2, r0
 800852e:	ea03 0901 	and.w	r9, r3, r1
 8008532:	4640      	mov	r0, r8
 8008534:	4649      	mov	r1, r9
 8008536:	f04f 0200 	mov.w	r2, #0
 800853a:	f04f 0300 	mov.w	r3, #0
 800853e:	014b      	lsls	r3, r1, #5
 8008540:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008544:	0142      	lsls	r2, r0, #5
 8008546:	4610      	mov	r0, r2
 8008548:	4619      	mov	r1, r3
 800854a:	ebb0 0008 	subs.w	r0, r0, r8
 800854e:	eb61 0109 	sbc.w	r1, r1, r9
 8008552:	f04f 0200 	mov.w	r2, #0
 8008556:	f04f 0300 	mov.w	r3, #0
 800855a:	018b      	lsls	r3, r1, #6
 800855c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008560:	0182      	lsls	r2, r0, #6
 8008562:	1a12      	subs	r2, r2, r0
 8008564:	eb63 0301 	sbc.w	r3, r3, r1
 8008568:	f04f 0000 	mov.w	r0, #0
 800856c:	f04f 0100 	mov.w	r1, #0
 8008570:	00d9      	lsls	r1, r3, #3
 8008572:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008576:	00d0      	lsls	r0, r2, #3
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	eb12 0208 	adds.w	r2, r2, r8
 8008580:	eb43 0309 	adc.w	r3, r3, r9
 8008584:	f04f 0000 	mov.w	r0, #0
 8008588:	f04f 0100 	mov.w	r1, #0
 800858c:	0259      	lsls	r1, r3, #9
 800858e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008592:	0250      	lsls	r0, r2, #9
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4610      	mov	r0, r2
 800859a:	4619      	mov	r1, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	461a      	mov	r2, r3
 80085a0:	f04f 0300 	mov.w	r3, #0
 80085a4:	f7f8 fb00 	bl	8000ba8 <__aeabi_uldivmod>
 80085a8:	4602      	mov	r2, r0
 80085aa:	460b      	mov	r3, r1
 80085ac:	4613      	mov	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	e04a      	b.n	8008648 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085b2:	4b31      	ldr	r3, [pc, #196]	; (8008678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	099b      	lsrs	r3, r3, #6
 80085b8:	461a      	mov	r2, r3
 80085ba:	f04f 0300 	mov.w	r3, #0
 80085be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80085c2:	f04f 0100 	mov.w	r1, #0
 80085c6:	ea02 0400 	and.w	r4, r2, r0
 80085ca:	ea03 0501 	and.w	r5, r3, r1
 80085ce:	4620      	mov	r0, r4
 80085d0:	4629      	mov	r1, r5
 80085d2:	f04f 0200 	mov.w	r2, #0
 80085d6:	f04f 0300 	mov.w	r3, #0
 80085da:	014b      	lsls	r3, r1, #5
 80085dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80085e0:	0142      	lsls	r2, r0, #5
 80085e2:	4610      	mov	r0, r2
 80085e4:	4619      	mov	r1, r3
 80085e6:	1b00      	subs	r0, r0, r4
 80085e8:	eb61 0105 	sbc.w	r1, r1, r5
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	018b      	lsls	r3, r1, #6
 80085f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80085fa:	0182      	lsls	r2, r0, #6
 80085fc:	1a12      	subs	r2, r2, r0
 80085fe:	eb63 0301 	sbc.w	r3, r3, r1
 8008602:	f04f 0000 	mov.w	r0, #0
 8008606:	f04f 0100 	mov.w	r1, #0
 800860a:	00d9      	lsls	r1, r3, #3
 800860c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008610:	00d0      	lsls	r0, r2, #3
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	1912      	adds	r2, r2, r4
 8008618:	eb45 0303 	adc.w	r3, r5, r3
 800861c:	f04f 0000 	mov.w	r0, #0
 8008620:	f04f 0100 	mov.w	r1, #0
 8008624:	0299      	lsls	r1, r3, #10
 8008626:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800862a:	0290      	lsls	r0, r2, #10
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4610      	mov	r0, r2
 8008632:	4619      	mov	r1, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	461a      	mov	r2, r3
 8008638:	f04f 0300 	mov.w	r3, #0
 800863c:	f7f8 fab4 	bl	8000ba8 <__aeabi_uldivmod>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4613      	mov	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008648:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	0c1b      	lsrs	r3, r3, #16
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	3301      	adds	r3, #1
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008660:	60bb      	str	r3, [r7, #8]
      break;
 8008662:	e002      	b.n	800866a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008664:	4b05      	ldr	r3, [pc, #20]	; (800867c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008666:	60bb      	str	r3, [r7, #8]
      break;
 8008668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800866a:	68bb      	ldr	r3, [r7, #8]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008676:	bf00      	nop
 8008678:	40023800 	.word	0x40023800
 800867c:	00f42400 	.word	0x00f42400
 8008680:	007a1200 	.word	0x007a1200

08008684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008688:	4b03      	ldr	r3, [pc, #12]	; (8008698 <HAL_RCC_GetHCLKFreq+0x14>)
 800868a:	681b      	ldr	r3, [r3, #0]
}
 800868c:	4618      	mov	r0, r3
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	20000000 	.word	0x20000000

0800869c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086a0:	f7ff fff0 	bl	8008684 <HAL_RCC_GetHCLKFreq>
 80086a4:	4602      	mov	r2, r0
 80086a6:	4b05      	ldr	r3, [pc, #20]	; (80086bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	0a9b      	lsrs	r3, r3, #10
 80086ac:	f003 0307 	and.w	r3, r3, #7
 80086b0:	4903      	ldr	r1, [pc, #12]	; (80086c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086b2:	5ccb      	ldrb	r3, [r1, r3]
 80086b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40023800 	.word	0x40023800
 80086c0:	08013a20 	.word	0x08013a20

080086c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	220f      	movs	r2, #15
 80086d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80086d4:	4b12      	ldr	r3, [pc, #72]	; (8008720 <HAL_RCC_GetClockConfig+0x5c>)
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 0203 	and.w	r2, r3, #3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80086e0:	4b0f      	ldr	r3, [pc, #60]	; (8008720 <HAL_RCC_GetClockConfig+0x5c>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80086ec:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <HAL_RCC_GetClockConfig+0x5c>)
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80086f8:	4b09      	ldr	r3, [pc, #36]	; (8008720 <HAL_RCC_GetClockConfig+0x5c>)
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	08db      	lsrs	r3, r3, #3
 80086fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008706:	4b07      	ldr	r3, [pc, #28]	; (8008724 <HAL_RCC_GetClockConfig+0x60>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0207 	and.w	r2, r3, #7
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	601a      	str	r2, [r3, #0]
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	40023800 	.word	0x40023800
 8008724:	40023c00 	.word	0x40023c00

08008728 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e01c      	b.n	8008774 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	795b      	ldrb	r3, [r3, #5]
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d105      	bne.n	8008750 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fa fe96 	bl	800347c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f042 0204 	orr.w	r2, r2, #4
 8008764:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e07b      	b.n	8008886 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	2b00      	cmp	r3, #0
 8008794:	d108      	bne.n	80087a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800879e:	d009      	beq.n	80087b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	61da      	str	r2, [r3, #28]
 80087a6:	e005      	b.n	80087b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d106      	bne.n	80087d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7fa fe76 	bl	80034c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	431a      	orrs	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	431a      	orrs	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008824:	431a      	orrs	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a1b      	ldr	r3, [r3, #32]
 8008834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008838:	ea42 0103 	orr.w	r1, r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008840:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	0c1b      	lsrs	r3, r3, #16
 8008852:	f003 0104 	and.w	r1, r3, #4
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	f003 0210 	and.w	r2, r3, #16
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69da      	ldr	r2, [r3, #28]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008874:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e01a      	b.n	80088d6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088b6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7fa fedb 	bl	8003674 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	099b      	lsrs	r3, r3, #6
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10f      	bne.n	8008924 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	099b      	lsrs	r3, r3, #6
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d004      	beq.n	8008924 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	4798      	blx	r3
    return;
 8008922:	e0d7      	b.n	8008ad4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	085b      	lsrs	r3, r3, #1
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00a      	beq.n	8008946 <HAL_SPI_IRQHandler+0x66>
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	09db      	lsrs	r3, r3, #7
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b00      	cmp	r3, #0
 800893a:	d004      	beq.n	8008946 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	4798      	blx	r3
    return;
 8008944:	e0c6      	b.n	8008ad4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	095b      	lsrs	r3, r3, #5
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10c      	bne.n	800896c <HAL_SPI_IRQHandler+0x8c>
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	099b      	lsrs	r3, r3, #6
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d106      	bne.n	800896c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	0a1b      	lsrs	r3, r3, #8
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 80b4 	beq.w	8008ad4 <HAL_SPI_IRQHandler+0x1f4>
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	095b      	lsrs	r3, r3, #5
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 80ad 	beq.w	8008ad4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	099b      	lsrs	r3, r3, #6
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d023      	beq.n	80089ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b03      	cmp	r3, #3
 8008990:	d011      	beq.n	80089b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008996:	f043 0204 	orr.w	r2, r3, #4
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800899e:	2300      	movs	r3, #0
 80089a0:	617b      	str	r3, [r7, #20]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	617b      	str	r3, [r7, #20]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	617b      	str	r3, [r7, #20]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	e00b      	b.n	80089ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089b6:	2300      	movs	r3, #0
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	613b      	str	r3, [r7, #16]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	613b      	str	r3, [r7, #16]
 80089ca:	693b      	ldr	r3, [r7, #16]
        return;
 80089cc:	e082      	b.n	8008ad4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d014      	beq.n	8008a04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089de:	f043 0201 	orr.w	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	60fb      	str	r3, [r7, #12]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	0a1b      	lsrs	r3, r3, #8
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00c      	beq.n	8008a2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a14:	f043 0208 	orr.w	r2, r3, #8
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60bb      	str	r3, [r7, #8]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	60bb      	str	r3, [r7, #8]
 8008a28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d04f      	beq.n	8008ad2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <HAL_SPI_IRQHandler+0x17e>
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d034      	beq.n	8008ac8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f022 0203 	bic.w	r2, r2, #3
 8008a6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d011      	beq.n	8008a9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7a:	4a18      	ldr	r2, [pc, #96]	; (8008adc <HAL_SPI_IRQHandler+0x1fc>)
 8008a7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fc f9b0 	bl	8004de8 <HAL_DMA_Abort_IT>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d005      	beq.n	8008a9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d016      	beq.n	8008ad0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aa6:	4a0d      	ldr	r2, [pc, #52]	; (8008adc <HAL_SPI_IRQHandler+0x1fc>)
 8008aa8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fc f99a 	bl	8004de8 <HAL_DMA_Abort_IT>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008abe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008ac6:	e003      	b.n	8008ad0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f809 	bl	8008ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008ace:	e000      	b.n	8008ad2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008ad0:	bf00      	nop
    return;
 8008ad2:	bf00      	nop
  }
}
 8008ad4:	3720      	adds	r7, #32
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	08008af5 	.word	0x08008af5

08008ae0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f7ff ffe6 	bl	8008ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b14:	bf00      	nop
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e041      	b.n	8008bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d106      	bne.n	8008b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7fa fe26 	bl	8003794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	f000 fbf8 	bl	8009350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d001      	beq.n	8008bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e04e      	b.n	8008c72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68da      	ldr	r2, [r3, #12]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f042 0201 	orr.w	r2, r2, #1
 8008bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a23      	ldr	r2, [pc, #140]	; (8008c80 <HAL_TIM_Base_Start_IT+0xc4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d022      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x80>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bfe:	d01d      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x80>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a1f      	ldr	r2, [pc, #124]	; (8008c84 <HAL_TIM_Base_Start_IT+0xc8>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d018      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x80>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a1e      	ldr	r2, [pc, #120]	; (8008c88 <HAL_TIM_Base_Start_IT+0xcc>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d013      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x80>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a1c      	ldr	r2, [pc, #112]	; (8008c8c <HAL_TIM_Base_Start_IT+0xd0>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00e      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x80>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a1b      	ldr	r2, [pc, #108]	; (8008c90 <HAL_TIM_Base_Start_IT+0xd4>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d009      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x80>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a19      	ldr	r2, [pc, #100]	; (8008c94 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d004      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x80>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a18      	ldr	r2, [pc, #96]	; (8008c98 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d111      	bne.n	8008c60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f003 0307 	and.w	r3, r3, #7
 8008c46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b06      	cmp	r3, #6
 8008c4c:	d010      	beq.n	8008c70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0201 	orr.w	r2, r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5e:	e007      	b.n	8008c70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f042 0201 	orr.w	r2, r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	40010000 	.word	0x40010000
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40000c00 	.word	0x40000c00
 8008c90:	40010400 	.word	0x40010400
 8008c94:	40014000 	.word	0x40014000
 8008c98:	40001800 	.word	0x40001800

08008c9c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0201 	bic.w	r2, r2, #1
 8008cb2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6a1a      	ldr	r2, [r3, #32]
 8008cba:	f241 1311 	movw	r3, #4369	; 0x1111
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10f      	bne.n	8008ce4 <HAL_TIM_Base_Stop_IT+0x48>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6a1a      	ldr	r2, [r3, #32]
 8008cca:	f240 4344 	movw	r3, #1092	; 0x444
 8008cce:	4013      	ands	r3, r2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d107      	bne.n	8008ce4 <HAL_TIM_Base_Stop_IT+0x48>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0201 	bic.w	r2, r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b086      	sub	sp, #24
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e097      	b.n	8008e3e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7fa fce6 	bl	80036f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d3e:	f023 0307 	bic.w	r3, r3, #7
 8008d42:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4610      	mov	r0, r2
 8008d50:	f000 fafe 	bl	8009350 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d7c:	f023 0303 	bic.w	r3, r3, #3
 8008d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d9a:	f023 030c 	bic.w	r3, r3, #12
 8008d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	021b      	lsls	r3, r3, #8
 8008db6:	4313      	orrs	r3, r2
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	011a      	lsls	r2, r3, #4
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	031b      	lsls	r3, r3, #12
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008dd8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008de0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	4313      	orrs	r3, r2
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e56:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e5e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e66:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e6e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d110      	bne.n	8008e98 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d102      	bne.n	8008e82 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e7c:	7b7b      	ldrb	r3, [r7, #13]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d001      	beq.n	8008e86 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e069      	b.n	8008f5a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2202      	movs	r2, #2
 8008e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e96:	e031      	b.n	8008efc <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d110      	bne.n	8008ec0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d102      	bne.n	8008eaa <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ea4:	7b3b      	ldrb	r3, [r7, #12]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d001      	beq.n	8008eae <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e055      	b.n	8008f5a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2202      	movs	r2, #2
 8008eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ebe:	e01d      	b.n	8008efc <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d108      	bne.n	8008ed8 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d105      	bne.n	8008ed8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ecc:	7b7b      	ldrb	r3, [r7, #13]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d102      	bne.n	8008ed8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ed2:	7b3b      	ldrb	r3, [r7, #12]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d001      	beq.n	8008edc <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e03e      	b.n	8008f5a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_TIM_Encoder_Start+0xc4>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d008      	beq.n	8008f1a <HAL_TIM_Encoder_Start+0xd4>
 8008f08:	e00f      	b.n	8008f2a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	2100      	movs	r1, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 fb56 	bl	80095c4 <TIM_CCxChannelCmd>
      break;
 8008f18:	e016      	b.n	8008f48 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	2104      	movs	r1, #4
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fb4e 	bl	80095c4 <TIM_CCxChannelCmd>
      break;
 8008f28:	e00e      	b.n	8008f48 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	2100      	movs	r1, #0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fb46 	bl	80095c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	2104      	movs	r1, #4
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 fb3f 	bl	80095c4 <TIM_CCxChannelCmd>
      break;
 8008f46:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0201 	orr.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d122      	bne.n	8008fbe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d11b      	bne.n	8008fbe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f06f 0202 	mvn.w	r2, #2
 8008f8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f003 0303 	and.w	r3, r3, #3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f9b5 	bl	8009314 <HAL_TIM_IC_CaptureCallback>
 8008faa:	e005      	b.n	8008fb8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f9a7 	bl	8009300 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f9b8 	bl	8009328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	2b04      	cmp	r3, #4
 8008fca:	d122      	bne.n	8009012 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d11b      	bne.n	8009012 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f06f 0204 	mvn.w	r2, #4
 8008fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f98b 	bl	8009314 <HAL_TIM_IC_CaptureCallback>
 8008ffe:	e005      	b.n	800900c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f97d 	bl	8009300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f98e 	bl	8009328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	f003 0308 	and.w	r3, r3, #8
 800901c:	2b08      	cmp	r3, #8
 800901e:	d122      	bne.n	8009066 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b08      	cmp	r3, #8
 800902c:	d11b      	bne.n	8009066 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f06f 0208 	mvn.w	r2, #8
 8009036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2204      	movs	r2, #4
 800903c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	f003 0303 	and.w	r3, r3, #3
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f961 	bl	8009314 <HAL_TIM_IC_CaptureCallback>
 8009052:	e005      	b.n	8009060 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f953 	bl	8009300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f964 	bl	8009328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f003 0310 	and.w	r3, r3, #16
 8009070:	2b10      	cmp	r3, #16
 8009072:	d122      	bne.n	80090ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f003 0310 	and.w	r3, r3, #16
 800907e:	2b10      	cmp	r3, #16
 8009080:	d11b      	bne.n	80090ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f06f 0210 	mvn.w	r2, #16
 800908a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2208      	movs	r2, #8
 8009090:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f937 	bl	8009314 <HAL_TIM_IC_CaptureCallback>
 80090a6:	e005      	b.n	80090b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f929 	bl	8009300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f93a 	bl	8009328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d10e      	bne.n	80090e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d107      	bne.n	80090e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f06f 0201 	mvn.w	r2, #1
 80090de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7fa f895 	bl	8003210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f0:	2b80      	cmp	r3, #128	; 0x80
 80090f2:	d10e      	bne.n	8009112 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fe:	2b80      	cmp	r3, #128	; 0x80
 8009100:	d107      	bne.n	8009112 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800910a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fb05 	bl	800971c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911c:	2b40      	cmp	r3, #64	; 0x40
 800911e:	d10e      	bne.n	800913e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912a:	2b40      	cmp	r3, #64	; 0x40
 800912c:	d107      	bne.n	800913e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f8ff 	bl	800933c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	f003 0320 	and.w	r3, r3, #32
 8009148:	2b20      	cmp	r3, #32
 800914a:	d10e      	bne.n	800916a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f003 0320 	and.w	r3, r3, #32
 8009156:	2b20      	cmp	r3, #32
 8009158:	d107      	bne.n	800916a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f06f 0220 	mvn.w	r2, #32
 8009162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 facf 	bl	8009708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009186:	2b01      	cmp	r3, #1
 8009188:	d101      	bne.n	800918e <HAL_TIM_ConfigClockSource+0x1c>
 800918a:	2302      	movs	r3, #2
 800918c:	e0b4      	b.n	80092f8 <HAL_TIM_ConfigClockSource+0x186>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c6:	d03e      	beq.n	8009246 <HAL_TIM_ConfigClockSource+0xd4>
 80091c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091cc:	f200 8087 	bhi.w	80092de <HAL_TIM_ConfigClockSource+0x16c>
 80091d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d4:	f000 8086 	beq.w	80092e4 <HAL_TIM_ConfigClockSource+0x172>
 80091d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091dc:	d87f      	bhi.n	80092de <HAL_TIM_ConfigClockSource+0x16c>
 80091de:	2b70      	cmp	r3, #112	; 0x70
 80091e0:	d01a      	beq.n	8009218 <HAL_TIM_ConfigClockSource+0xa6>
 80091e2:	2b70      	cmp	r3, #112	; 0x70
 80091e4:	d87b      	bhi.n	80092de <HAL_TIM_ConfigClockSource+0x16c>
 80091e6:	2b60      	cmp	r3, #96	; 0x60
 80091e8:	d050      	beq.n	800928c <HAL_TIM_ConfigClockSource+0x11a>
 80091ea:	2b60      	cmp	r3, #96	; 0x60
 80091ec:	d877      	bhi.n	80092de <HAL_TIM_ConfigClockSource+0x16c>
 80091ee:	2b50      	cmp	r3, #80	; 0x50
 80091f0:	d03c      	beq.n	800926c <HAL_TIM_ConfigClockSource+0xfa>
 80091f2:	2b50      	cmp	r3, #80	; 0x50
 80091f4:	d873      	bhi.n	80092de <HAL_TIM_ConfigClockSource+0x16c>
 80091f6:	2b40      	cmp	r3, #64	; 0x40
 80091f8:	d058      	beq.n	80092ac <HAL_TIM_ConfigClockSource+0x13a>
 80091fa:	2b40      	cmp	r3, #64	; 0x40
 80091fc:	d86f      	bhi.n	80092de <HAL_TIM_ConfigClockSource+0x16c>
 80091fe:	2b30      	cmp	r3, #48	; 0x30
 8009200:	d064      	beq.n	80092cc <HAL_TIM_ConfigClockSource+0x15a>
 8009202:	2b30      	cmp	r3, #48	; 0x30
 8009204:	d86b      	bhi.n	80092de <HAL_TIM_ConfigClockSource+0x16c>
 8009206:	2b20      	cmp	r3, #32
 8009208:	d060      	beq.n	80092cc <HAL_TIM_ConfigClockSource+0x15a>
 800920a:	2b20      	cmp	r3, #32
 800920c:	d867      	bhi.n	80092de <HAL_TIM_ConfigClockSource+0x16c>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d05c      	beq.n	80092cc <HAL_TIM_ConfigClockSource+0x15a>
 8009212:	2b10      	cmp	r3, #16
 8009214:	d05a      	beq.n	80092cc <HAL_TIM_ConfigClockSource+0x15a>
 8009216:	e062      	b.n	80092de <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6818      	ldr	r0, [r3, #0]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	6899      	ldr	r1, [r3, #8]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	f000 f9ac 	bl	8009584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800923a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	609a      	str	r2, [r3, #8]
      break;
 8009244:	e04f      	b.n	80092e6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	6899      	ldr	r1, [r3, #8]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	f000 f995 	bl	8009584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009268:	609a      	str	r2, [r3, #8]
      break;
 800926a:	e03c      	b.n	80092e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	6859      	ldr	r1, [r3, #4]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	461a      	mov	r2, r3
 800927a:	f000 f909 	bl	8009490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2150      	movs	r1, #80	; 0x50
 8009284:	4618      	mov	r0, r3
 8009286:	f000 f962 	bl	800954e <TIM_ITRx_SetConfig>
      break;
 800928a:	e02c      	b.n	80092e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6818      	ldr	r0, [r3, #0]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	6859      	ldr	r1, [r3, #4]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	461a      	mov	r2, r3
 800929a:	f000 f928 	bl	80094ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2160      	movs	r1, #96	; 0x60
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 f952 	bl	800954e <TIM_ITRx_SetConfig>
      break;
 80092aa:	e01c      	b.n	80092e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	6859      	ldr	r1, [r3, #4]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	461a      	mov	r2, r3
 80092ba:	f000 f8e9 	bl	8009490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2140      	movs	r1, #64	; 0x40
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 f942 	bl	800954e <TIM_ITRx_SetConfig>
      break;
 80092ca:	e00c      	b.n	80092e6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4619      	mov	r1, r3
 80092d6:	4610      	mov	r0, r2
 80092d8:	f000 f939 	bl	800954e <TIM_ITRx_SetConfig>
      break;
 80092dc:	e003      	b.n	80092e6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	73fb      	strb	r3, [r7, #15]
      break;
 80092e2:	e000      	b.n	80092e6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a40      	ldr	r2, [pc, #256]	; (8009464 <TIM_Base_SetConfig+0x114>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d013      	beq.n	8009390 <TIM_Base_SetConfig+0x40>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936e:	d00f      	beq.n	8009390 <TIM_Base_SetConfig+0x40>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a3d      	ldr	r2, [pc, #244]	; (8009468 <TIM_Base_SetConfig+0x118>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00b      	beq.n	8009390 <TIM_Base_SetConfig+0x40>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a3c      	ldr	r2, [pc, #240]	; (800946c <TIM_Base_SetConfig+0x11c>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d007      	beq.n	8009390 <TIM_Base_SetConfig+0x40>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a3b      	ldr	r2, [pc, #236]	; (8009470 <TIM_Base_SetConfig+0x120>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d003      	beq.n	8009390 <TIM_Base_SetConfig+0x40>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a3a      	ldr	r2, [pc, #232]	; (8009474 <TIM_Base_SetConfig+0x124>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d108      	bne.n	80093a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a2f      	ldr	r2, [pc, #188]	; (8009464 <TIM_Base_SetConfig+0x114>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d02b      	beq.n	8009402 <TIM_Base_SetConfig+0xb2>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b0:	d027      	beq.n	8009402 <TIM_Base_SetConfig+0xb2>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a2c      	ldr	r2, [pc, #176]	; (8009468 <TIM_Base_SetConfig+0x118>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d023      	beq.n	8009402 <TIM_Base_SetConfig+0xb2>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a2b      	ldr	r2, [pc, #172]	; (800946c <TIM_Base_SetConfig+0x11c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d01f      	beq.n	8009402 <TIM_Base_SetConfig+0xb2>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a2a      	ldr	r2, [pc, #168]	; (8009470 <TIM_Base_SetConfig+0x120>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d01b      	beq.n	8009402 <TIM_Base_SetConfig+0xb2>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a29      	ldr	r2, [pc, #164]	; (8009474 <TIM_Base_SetConfig+0x124>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d017      	beq.n	8009402 <TIM_Base_SetConfig+0xb2>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a28      	ldr	r2, [pc, #160]	; (8009478 <TIM_Base_SetConfig+0x128>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d013      	beq.n	8009402 <TIM_Base_SetConfig+0xb2>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a27      	ldr	r2, [pc, #156]	; (800947c <TIM_Base_SetConfig+0x12c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d00f      	beq.n	8009402 <TIM_Base_SetConfig+0xb2>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a26      	ldr	r2, [pc, #152]	; (8009480 <TIM_Base_SetConfig+0x130>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d00b      	beq.n	8009402 <TIM_Base_SetConfig+0xb2>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a25      	ldr	r2, [pc, #148]	; (8009484 <TIM_Base_SetConfig+0x134>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d007      	beq.n	8009402 <TIM_Base_SetConfig+0xb2>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a24      	ldr	r2, [pc, #144]	; (8009488 <TIM_Base_SetConfig+0x138>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d003      	beq.n	8009402 <TIM_Base_SetConfig+0xb2>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a23      	ldr	r2, [pc, #140]	; (800948c <TIM_Base_SetConfig+0x13c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d108      	bne.n	8009414 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a0a      	ldr	r2, [pc, #40]	; (8009464 <TIM_Base_SetConfig+0x114>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d003      	beq.n	8009448 <TIM_Base_SetConfig+0xf8>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a0c      	ldr	r2, [pc, #48]	; (8009474 <TIM_Base_SetConfig+0x124>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d103      	bne.n	8009450 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	615a      	str	r2, [r3, #20]
}
 8009456:	bf00      	nop
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	40010000 	.word	0x40010000
 8009468:	40000400 	.word	0x40000400
 800946c:	40000800 	.word	0x40000800
 8009470:	40000c00 	.word	0x40000c00
 8009474:	40010400 	.word	0x40010400
 8009478:	40014000 	.word	0x40014000
 800947c:	40014400 	.word	0x40014400
 8009480:	40014800 	.word	0x40014800
 8009484:	40001800 	.word	0x40001800
 8009488:	40001c00 	.word	0x40001c00
 800948c:	40002000 	.word	0x40002000

08009490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	f023 0201 	bic.w	r2, r3, #1
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	011b      	lsls	r3, r3, #4
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f023 030a 	bic.w	r3, r3, #10
 80094cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	697a      	ldr	r2, [r7, #20]
 80094e0:	621a      	str	r2, [r3, #32]
}
 80094e2:	bf00      	nop
 80094e4:	371c      	adds	r7, #28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b087      	sub	sp, #28
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	60f8      	str	r0, [r7, #12]
 80094f6:	60b9      	str	r1, [r7, #8]
 80094f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	f023 0210 	bic.w	r2, r3, #16
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	031b      	lsls	r3, r3, #12
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	4313      	orrs	r3, r2
 8009522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800952a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	4313      	orrs	r3, r2
 8009534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	621a      	str	r2, [r3, #32]
}
 8009542:	bf00      	nop
 8009544:	371c      	adds	r7, #28
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	4313      	orrs	r3, r2
 800956c:	f043 0307 	orr.w	r3, r3, #7
 8009570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	609a      	str	r2, [r3, #8]
}
 8009578:	bf00      	nop
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800959e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	021a      	lsls	r2, r3, #8
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	431a      	orrs	r2, r3
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	609a      	str	r2, [r3, #8]
}
 80095b8:	bf00      	nop
 80095ba:	371c      	adds	r7, #28
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f003 031f 	and.w	r3, r3, #31
 80095d6:	2201      	movs	r2, #1
 80095d8:	fa02 f303 	lsl.w	r3, r2, r3
 80095dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6a1a      	ldr	r2, [r3, #32]
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	43db      	mvns	r3, r3
 80095e6:	401a      	ands	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6a1a      	ldr	r2, [r3, #32]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f003 031f 	and.w	r3, r3, #31
 80095f6:	6879      	ldr	r1, [r7, #4]
 80095f8:	fa01 f303 	lsl.w	r3, r1, r3
 80095fc:	431a      	orrs	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	621a      	str	r2, [r3, #32]
}
 8009602:	bf00      	nop
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
	...

08009610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009620:	2b01      	cmp	r3, #1
 8009622:	d101      	bne.n	8009628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009624:	2302      	movs	r3, #2
 8009626:	e05a      	b.n	80096de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2202      	movs	r2, #2
 8009634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800964e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a21      	ldr	r2, [pc, #132]	; (80096ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d022      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009674:	d01d      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a1d      	ldr	r2, [pc, #116]	; (80096f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d018      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a1b      	ldr	r2, [pc, #108]	; (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d013      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a1a      	ldr	r2, [pc, #104]	; (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00e      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a18      	ldr	r2, [pc, #96]	; (80096fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d009      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a17      	ldr	r2, [pc, #92]	; (8009700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d004      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a15      	ldr	r2, [pc, #84]	; (8009704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d10c      	bne.n	80096cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40010000 	.word	0x40010000
 80096f0:	40000400 	.word	0x40000400
 80096f4:	40000800 	.word	0x40000800
 80096f8:	40000c00 	.word	0x40000c00
 80096fc:	40010400 	.word	0x40010400
 8009700:	40014000 	.word	0x40014000
 8009704:	40001800 	.word	0x40001800

08009708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009730:	b084      	sub	sp, #16
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	f107 001c 	add.w	r0, r7, #28
 800973e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	2b01      	cmp	r3, #1
 8009746:	d122      	bne.n	800978e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800975c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009772:	2b01      	cmp	r3, #1
 8009774:	d105      	bne.n	8009782 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 fb1c 	bl	800adc0 <USB_CoreReset>
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]
 800978c:	e01a      	b.n	80097c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f001 fb10 	bl	800adc0 <USB_CoreReset>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80097a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	639a      	str	r2, [r3, #56]	; 0x38
 80097b6:	e005      	b.n	80097c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d10b      	bne.n	80097e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f043 0206 	orr.w	r2, r3, #6
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f043 0220 	orr.w	r2, r3, #32
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097ee:	b004      	add	sp, #16
 80097f0:	4770      	bx	lr
	...

080097f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	4613      	mov	r3, r2
 8009800:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	2b02      	cmp	r3, #2
 8009806:	d165      	bne.n	80098d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	4a41      	ldr	r2, [pc, #260]	; (8009910 <USB_SetTurnaroundTime+0x11c>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d906      	bls.n	800981e <USB_SetTurnaroundTime+0x2a>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4a40      	ldr	r2, [pc, #256]	; (8009914 <USB_SetTurnaroundTime+0x120>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d202      	bcs.n	800981e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009818:	230f      	movs	r3, #15
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	e062      	b.n	80098e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	4a3c      	ldr	r2, [pc, #240]	; (8009914 <USB_SetTurnaroundTime+0x120>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d306      	bcc.n	8009834 <USB_SetTurnaroundTime+0x40>
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	4a3b      	ldr	r2, [pc, #236]	; (8009918 <USB_SetTurnaroundTime+0x124>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d202      	bcs.n	8009834 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800982e:	230e      	movs	r3, #14
 8009830:	617b      	str	r3, [r7, #20]
 8009832:	e057      	b.n	80098e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	4a38      	ldr	r2, [pc, #224]	; (8009918 <USB_SetTurnaroundTime+0x124>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d306      	bcc.n	800984a <USB_SetTurnaroundTime+0x56>
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4a37      	ldr	r2, [pc, #220]	; (800991c <USB_SetTurnaroundTime+0x128>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d202      	bcs.n	800984a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009844:	230d      	movs	r3, #13
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	e04c      	b.n	80098e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	4a33      	ldr	r2, [pc, #204]	; (800991c <USB_SetTurnaroundTime+0x128>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d306      	bcc.n	8009860 <USB_SetTurnaroundTime+0x6c>
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	4a32      	ldr	r2, [pc, #200]	; (8009920 <USB_SetTurnaroundTime+0x12c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d802      	bhi.n	8009860 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800985a:	230c      	movs	r3, #12
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	e041      	b.n	80098e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	4a2f      	ldr	r2, [pc, #188]	; (8009920 <USB_SetTurnaroundTime+0x12c>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d906      	bls.n	8009876 <USB_SetTurnaroundTime+0x82>
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	4a2e      	ldr	r2, [pc, #184]	; (8009924 <USB_SetTurnaroundTime+0x130>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d802      	bhi.n	8009876 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009870:	230b      	movs	r3, #11
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	e036      	b.n	80098e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	4a2a      	ldr	r2, [pc, #168]	; (8009924 <USB_SetTurnaroundTime+0x130>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d906      	bls.n	800988c <USB_SetTurnaroundTime+0x98>
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	4a29      	ldr	r2, [pc, #164]	; (8009928 <USB_SetTurnaroundTime+0x134>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d802      	bhi.n	800988c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009886:	230a      	movs	r3, #10
 8009888:	617b      	str	r3, [r7, #20]
 800988a:	e02b      	b.n	80098e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4a26      	ldr	r2, [pc, #152]	; (8009928 <USB_SetTurnaroundTime+0x134>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d906      	bls.n	80098a2 <USB_SetTurnaroundTime+0xae>
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	4a25      	ldr	r2, [pc, #148]	; (800992c <USB_SetTurnaroundTime+0x138>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d202      	bcs.n	80098a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800989c:	2309      	movs	r3, #9
 800989e:	617b      	str	r3, [r7, #20]
 80098a0:	e020      	b.n	80098e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	4a21      	ldr	r2, [pc, #132]	; (800992c <USB_SetTurnaroundTime+0x138>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d306      	bcc.n	80098b8 <USB_SetTurnaroundTime+0xc4>
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	4a20      	ldr	r2, [pc, #128]	; (8009930 <USB_SetTurnaroundTime+0x13c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d802      	bhi.n	80098b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80098b2:	2308      	movs	r3, #8
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	e015      	b.n	80098e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4a1d      	ldr	r2, [pc, #116]	; (8009930 <USB_SetTurnaroundTime+0x13c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d906      	bls.n	80098ce <USB_SetTurnaroundTime+0xda>
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	4a1c      	ldr	r2, [pc, #112]	; (8009934 <USB_SetTurnaroundTime+0x140>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d202      	bcs.n	80098ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80098c8:	2307      	movs	r3, #7
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	e00a      	b.n	80098e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80098ce:	2306      	movs	r3, #6
 80098d0:	617b      	str	r3, [r7, #20]
 80098d2:	e007      	b.n	80098e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d102      	bne.n	80098e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80098da:	2309      	movs	r3, #9
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	e001      	b.n	80098e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80098e0:	2309      	movs	r3, #9
 80098e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68da      	ldr	r2, [r3, #12]
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	029b      	lsls	r3, r3, #10
 80098f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80098fc:	431a      	orrs	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	371c      	adds	r7, #28
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	00d8acbf 	.word	0x00d8acbf
 8009914:	00e4e1c0 	.word	0x00e4e1c0
 8009918:	00f42400 	.word	0x00f42400
 800991c:	01067380 	.word	0x01067380
 8009920:	011a499f 	.word	0x011a499f
 8009924:	01312cff 	.word	0x01312cff
 8009928:	014ca43f 	.word	0x014ca43f
 800992c:	016e3600 	.word	0x016e3600
 8009930:	01a6ab1f 	.word	0x01a6ab1f
 8009934:	01e84800 	.word	0x01e84800

08009938 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f043 0201 	orr.w	r2, r3, #1
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800995a:	b480      	push	{r7}
 800995c:	b083      	sub	sp, #12
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f023 0201 	bic.w	r2, r3, #1
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d115      	bne.n	80099ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80099aa:	2001      	movs	r0, #1
 80099ac:	f7fa fd76 	bl	800449c <HAL_Delay>
      ms++;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	3301      	adds	r3, #1
 80099b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 f972 	bl	800aca0 <USB_GetMode>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d01e      	beq.n	8009a00 <USB_SetCurrentMode+0x84>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b31      	cmp	r3, #49	; 0x31
 80099c6:	d9f0      	bls.n	80099aa <USB_SetCurrentMode+0x2e>
 80099c8:	e01a      	b.n	8009a00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80099ca:	78fb      	ldrb	r3, [r7, #3]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d115      	bne.n	80099fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80099dc:	2001      	movs	r0, #1
 80099de:	f7fa fd5d 	bl	800449c <HAL_Delay>
      ms++;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3301      	adds	r3, #1
 80099e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f001 f959 	bl	800aca0 <USB_GetMode>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d005      	beq.n	8009a00 <USB_SetCurrentMode+0x84>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b31      	cmp	r3, #49	; 0x31
 80099f8:	d9f0      	bls.n	80099dc <USB_SetCurrentMode+0x60>
 80099fa:	e001      	b.n	8009a00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e005      	b.n	8009a0c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b32      	cmp	r3, #50	; 0x32
 8009a04:	d101      	bne.n	8009a0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e000      	b.n	8009a0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a14:	b084      	sub	sp, #16
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b086      	sub	sp, #24
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a2e:	2300      	movs	r3, #0
 8009a30:	613b      	str	r3, [r7, #16]
 8009a32:	e009      	b.n	8009a48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	3340      	adds	r3, #64	; 0x40
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	2200      	movs	r2, #0
 8009a40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	3301      	adds	r3, #1
 8009a46:	613b      	str	r3, [r7, #16]
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	2b0e      	cmp	r3, #14
 8009a4c:	d9f2      	bls.n	8009a34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d11c      	bne.n	8009a8e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a62:	f043 0302 	orr.w	r3, r3, #2
 8009a66:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	639a      	str	r2, [r3, #56]	; 0x38
 8009a8c:	e00b      	b.n	8009aa6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a92:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009aac:	461a      	mov	r2, r3
 8009aae:	2300      	movs	r3, #0
 8009ab0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab8:	4619      	mov	r1, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	680b      	ldr	r3, [r1, #0]
 8009ac4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d10c      	bne.n	8009ae6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d104      	bne.n	8009adc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f945 	bl	8009d64 <USB_SetDevSpeed>
 8009ada:	e008      	b.n	8009aee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009adc:	2101      	movs	r1, #1
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f940 	bl	8009d64 <USB_SetDevSpeed>
 8009ae4:	e003      	b.n	8009aee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009ae6:	2103      	movs	r1, #3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f93b 	bl	8009d64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009aee:	2110      	movs	r1, #16
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f8f3 	bl	8009cdc <USB_FlushTxFifo>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f90f 	bl	8009d24 <USB_FlushRxFifo>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b16:	461a      	mov	r2, r3
 8009b18:	2300      	movs	r3, #0
 8009b1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b22:	461a      	mov	r2, r3
 8009b24:	2300      	movs	r3, #0
 8009b26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2e:	461a      	mov	r2, r3
 8009b30:	2300      	movs	r3, #0
 8009b32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b34:	2300      	movs	r3, #0
 8009b36:	613b      	str	r3, [r7, #16]
 8009b38:	e043      	b.n	8009bc2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b50:	d118      	bne.n	8009b84 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b64:	461a      	mov	r2, r3
 8009b66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b6a:	6013      	str	r3, [r2, #0]
 8009b6c:	e013      	b.n	8009b96 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b80:	6013      	str	r3, [r2, #0]
 8009b82:	e008      	b.n	8009b96 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b90:	461a      	mov	r2, r3
 8009b92:	2300      	movs	r3, #0
 8009b94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	613b      	str	r3, [r7, #16]
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d3b7      	bcc.n	8009b3a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bca:	2300      	movs	r3, #0
 8009bcc:	613b      	str	r3, [r7, #16]
 8009bce:	e043      	b.n	8009c58 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009be6:	d118      	bne.n	8009c1a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10a      	bne.n	8009c04 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	e013      	b.n	8009c2c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c10:	461a      	mov	r2, r3
 8009c12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c16:	6013      	str	r3, [r2, #0]
 8009c18:	e008      	b.n	8009c2c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	015a      	lsls	r2, r3, #5
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	4413      	add	r3, r2
 8009c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c26:	461a      	mov	r2, r3
 8009c28:	2300      	movs	r3, #0
 8009c2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	015a      	lsls	r2, r3, #5
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	4413      	add	r3, r2
 8009c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c38:	461a      	mov	r2, r3
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	3301      	adds	r3, #1
 8009c56:	613b      	str	r3, [r7, #16]
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d3b7      	bcc.n	8009bd0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009c80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d105      	bne.n	8009c94 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	f043 0210 	orr.w	r2, r3, #16
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699a      	ldr	r2, [r3, #24]
 8009c98:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <USB_DevInit+0x2c4>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d005      	beq.n	8009cb2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	f043 0208 	orr.w	r2, r3, #8
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d107      	bne.n	8009cc8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	699b      	ldr	r3, [r3, #24]
 8009cbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cc0:	f043 0304 	orr.w	r3, r3, #4
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cd4:	b004      	add	sp, #16
 8009cd6:	4770      	bx	lr
 8009cd8:	803c3800 	.word	0x803c3800

08009cdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	019b      	lsls	r3, r3, #6
 8009cee:	f043 0220 	orr.w	r2, r3, #32
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	4a08      	ldr	r2, [pc, #32]	; (8009d20 <USB_FlushTxFifo+0x44>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d901      	bls.n	8009d06 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e006      	b.n	8009d14 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	f003 0320 	and.w	r3, r3, #32
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	d0f1      	beq.n	8009cf6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	00030d40 	.word	0x00030d40

08009d24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2210      	movs	r2, #16
 8009d34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	4a08      	ldr	r2, [pc, #32]	; (8009d60 <USB_FlushRxFifo+0x3c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d901      	bls.n	8009d46 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e006      	b.n	8009d54 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	f003 0310 	and.w	r3, r3, #16
 8009d4e:	2b10      	cmp	r3, #16
 8009d50:	d0f1      	beq.n	8009d36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	00030d40 	.word	0x00030d40

08009d64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	78fb      	ldrb	r3, [r7, #3]
 8009d7e:	68f9      	ldr	r1, [r7, #12]
 8009d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d84:	4313      	orrs	r3, r2
 8009d86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b087      	sub	sp, #28
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f003 0306 	and.w	r3, r3, #6
 8009dae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d102      	bne.n	8009dbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009db6:	2300      	movs	r3, #0
 8009db8:	75fb      	strb	r3, [r7, #23]
 8009dba:	e00a      	b.n	8009dd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d002      	beq.n	8009dc8 <USB_GetDevSpeed+0x32>
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2b06      	cmp	r3, #6
 8009dc6:	d102      	bne.n	8009dce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009dc8:	2302      	movs	r3, #2
 8009dca:	75fb      	strb	r3, [r7, #23]
 8009dcc:	e001      	b.n	8009dd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009dce:	230f      	movs	r3, #15
 8009dd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	371c      	adds	r7, #28
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	785b      	ldrb	r3, [r3, #1]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d13a      	bne.n	8009e72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e02:	69da      	ldr	r2, [r3, #28]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	f003 030f 	and.w	r3, r3, #15
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	68f9      	ldr	r1, [r7, #12]
 8009e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	015a      	lsls	r2, r3, #5
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	4413      	add	r3, r2
 8009e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d155      	bne.n	8009ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	78db      	ldrb	r3, [r3, #3]
 8009e4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	059b      	lsls	r3, r3, #22
 8009e56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	0151      	lsls	r1, r2, #5
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	440a      	add	r2, r1
 8009e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	e036      	b.n	8009ee0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e78:	69da      	ldr	r2, [r3, #28]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	f003 030f 	and.w	r3, r3, #15
 8009e82:	2101      	movs	r1, #1
 8009e84:	fa01 f303 	lsl.w	r3, r1, r3
 8009e88:	041b      	lsls	r3, r3, #16
 8009e8a:	68f9      	ldr	r1, [r7, #12]
 8009e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e90:	4313      	orrs	r3, r2
 8009e92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d11a      	bne.n	8009ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	78db      	ldrb	r3, [r3, #3]
 8009ec4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009ec6:	430b      	orrs	r3, r1
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	0151      	lsls	r1, r2, #5
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	440a      	add	r2, r1
 8009ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ede:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
	...

08009ef0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	785b      	ldrb	r3, [r3, #1]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d161      	bne.n	8009fd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f22:	d11f      	bne.n	8009f64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	0151      	lsls	r1, r2, #5
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	440a      	add	r2, r1
 8009f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	0151      	lsls	r1, r2, #5
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	440a      	add	r2, r1
 8009f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	f003 030f 	and.w	r3, r3, #15
 8009f74:	2101      	movs	r1, #1
 8009f76:	fa01 f303 	lsl.w	r3, r1, r3
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	43db      	mvns	r3, r3
 8009f7e:	68f9      	ldr	r1, [r7, #12]
 8009f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f84:	4013      	ands	r3, r2
 8009f86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8e:	69da      	ldr	r2, [r3, #28]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	f003 030f 	and.w	r3, r3, #15
 8009f98:	2101      	movs	r1, #1
 8009f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	43db      	mvns	r3, r3
 8009fa2:	68f9      	ldr	r1, [r7, #12]
 8009fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fa8:	4013      	ands	r3, r2
 8009faa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	0159      	lsls	r1, r3, #5
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	440b      	add	r3, r1
 8009fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4b35      	ldr	r3, [pc, #212]	; (800a0a0 <USB_DeactivateEndpoint+0x1b0>)
 8009fca:	4013      	ands	r3, r2
 8009fcc:	600b      	str	r3, [r1, #0]
 8009fce:	e060      	b.n	800a092 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fe6:	d11f      	bne.n	800a028 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	0151      	lsls	r1, r2, #5
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a002:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a006:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	0151      	lsls	r1, r2, #5
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	440a      	add	r2, r1
 800a01e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	2101      	movs	r1, #1
 800a03a:	fa01 f303 	lsl.w	r3, r1, r3
 800a03e:	041b      	lsls	r3, r3, #16
 800a040:	43db      	mvns	r3, r3
 800a042:	68f9      	ldr	r1, [r7, #12]
 800a044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a048:	4013      	ands	r3, r2
 800a04a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a052:	69da      	ldr	r2, [r3, #28]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	f003 030f 	and.w	r3, r3, #15
 800a05c:	2101      	movs	r1, #1
 800a05e:	fa01 f303 	lsl.w	r3, r1, r3
 800a062:	041b      	lsls	r3, r3, #16
 800a064:	43db      	mvns	r3, r3
 800a066:	68f9      	ldr	r1, [r7, #12]
 800a068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a06c:	4013      	ands	r3, r2
 800a06e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	015a      	lsls	r2, r3, #5
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	4413      	add	r3, r2
 800a078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	0159      	lsls	r1, r3, #5
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	440b      	add	r3, r1
 800a086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08a:	4619      	mov	r1, r3
 800a08c:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <USB_DeactivateEndpoint+0x1b4>)
 800a08e:	4013      	ands	r3, r2
 800a090:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	ec337800 	.word	0xec337800
 800a0a4:	eff37800 	.word	0xeff37800

0800a0a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08a      	sub	sp, #40	; 0x28
 800a0ac:	af02      	add	r7, sp, #8
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	785b      	ldrb	r3, [r3, #1]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	f040 815c 	bne.w	800a382 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d132      	bne.n	800a138 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	015a      	lsls	r2, r3, #5
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	4413      	add	r3, r2
 800a0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	69ba      	ldr	r2, [r7, #24]
 800a0e2:	0151      	lsls	r1, r2, #5
 800a0e4:	69fa      	ldr	r2, [r7, #28]
 800a0e6:	440a      	add	r2, r1
 800a0e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a0f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a0f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	69ba      	ldr	r2, [r7, #24]
 800a106:	0151      	lsls	r1, r2, #5
 800a108:	69fa      	ldr	r2, [r7, #28]
 800a10a:	440a      	add	r2, r1
 800a10c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	015a      	lsls	r2, r3, #5
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	69ba      	ldr	r2, [r7, #24]
 800a126:	0151      	lsls	r1, r2, #5
 800a128:	69fa      	ldr	r2, [r7, #28]
 800a12a:	440a      	add	r2, r1
 800a12c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a130:	0cdb      	lsrs	r3, r3, #19
 800a132:	04db      	lsls	r3, r3, #19
 800a134:	6113      	str	r3, [r2, #16]
 800a136:	e074      	b.n	800a222 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	0151      	lsls	r1, r2, #5
 800a14a:	69fa      	ldr	r2, [r7, #28]
 800a14c:	440a      	add	r2, r1
 800a14e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a152:	0cdb      	lsrs	r3, r3, #19
 800a154:	04db      	lsls	r3, r3, #19
 800a156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	0151      	lsls	r1, r2, #5
 800a16a:	69fa      	ldr	r2, [r7, #28]
 800a16c:	440a      	add	r2, r1
 800a16e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a172:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a176:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a17a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	4413      	add	r3, r2
 800a184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a188:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	6959      	ldr	r1, [r3, #20]
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	440b      	add	r3, r1
 800a194:	1e59      	subs	r1, r3, #1
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a19e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1a0:	4b9d      	ldr	r3, [pc, #628]	; (800a418 <USB_EPStartXfer+0x370>)
 800a1a2:	400b      	ands	r3, r1
 800a1a4:	69b9      	ldr	r1, [r7, #24]
 800a1a6:	0148      	lsls	r0, r1, #5
 800a1a8:	69f9      	ldr	r1, [r7, #28]
 800a1aa:	4401      	add	r1, r0
 800a1ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	015a      	lsls	r2, r3, #5
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c0:	691a      	ldr	r2, [r3, #16]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	695b      	ldr	r3, [r3, #20]
 800a1c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1ca:	69b9      	ldr	r1, [r7, #24]
 800a1cc:	0148      	lsls	r0, r1, #5
 800a1ce:	69f9      	ldr	r1, [r7, #28]
 800a1d0:	4401      	add	r1, r0
 800a1d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	78db      	ldrb	r3, [r3, #3]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d11f      	bne.n	800a222 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	015a      	lsls	r2, r3, #5
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	0151      	lsls	r1, r2, #5
 800a1f4:	69fa      	ldr	r2, [r7, #28]
 800a1f6:	440a      	add	r2, r1
 800a1f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a200:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	015a      	lsls	r2, r3, #5
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	4413      	add	r3, r2
 800a20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	69ba      	ldr	r2, [r7, #24]
 800a212:	0151      	lsls	r1, r2, #5
 800a214:	69fa      	ldr	r2, [r7, #28]
 800a216:	440a      	add	r2, r1
 800a218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a21c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a220:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a222:	79fb      	ldrb	r3, [r7, #7]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d14b      	bne.n	800a2c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d009      	beq.n	800a244 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a23c:	461a      	mov	r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	78db      	ldrb	r3, [r3, #3]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d128      	bne.n	800a29e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d110      	bne.n	800a27e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69ba      	ldr	r2, [r7, #24]
 800a26c:	0151      	lsls	r1, r2, #5
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	440a      	add	r2, r1
 800a272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	e00f      	b.n	800a29e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	0151      	lsls	r1, r2, #5
 800a290:	69fa      	ldr	r2, [r7, #28]
 800a292:	440a      	add	r2, r1
 800a294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a29c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	69ba      	ldr	r2, [r7, #24]
 800a2ae:	0151      	lsls	r1, r2, #5
 800a2b0:	69fa      	ldr	r2, [r7, #28]
 800a2b2:	440a      	add	r2, r1
 800a2b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	e12f      	b.n	800a520 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	69ba      	ldr	r2, [r7, #24]
 800a2d0:	0151      	lsls	r1, r2, #5
 800a2d2:	69fa      	ldr	r2, [r7, #28]
 800a2d4:	440a      	add	r2, r1
 800a2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	78db      	ldrb	r3, [r3, #3]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d015      	beq.n	800a314 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 8117 	beq.w	800a520 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	f003 030f 	and.w	r3, r3, #15
 800a302:	2101      	movs	r1, #1
 800a304:	fa01 f303 	lsl.w	r3, r1, r3
 800a308:	69f9      	ldr	r1, [r7, #28]
 800a30a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a30e:	4313      	orrs	r3, r2
 800a310:	634b      	str	r3, [r1, #52]	; 0x34
 800a312:	e105      	b.n	800a520 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a320:	2b00      	cmp	r3, #0
 800a322:	d110      	bne.n	800a346 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	015a      	lsls	r2, r3, #5
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	4413      	add	r3, r2
 800a32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	69ba      	ldr	r2, [r7, #24]
 800a334:	0151      	lsls	r1, r2, #5
 800a336:	69fa      	ldr	r2, [r7, #28]
 800a338:	440a      	add	r2, r1
 800a33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a33e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	e00f      	b.n	800a366 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	015a      	lsls	r2, r3, #5
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	4413      	add	r3, r2
 800a34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	0151      	lsls	r1, r2, #5
 800a358:	69fa      	ldr	r2, [r7, #28]
 800a35a:	440a      	add	r2, r1
 800a35c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a364:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	68d9      	ldr	r1, [r3, #12]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	781a      	ldrb	r2, [r3, #0]
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	b298      	uxth	r0, r3
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	4603      	mov	r3, r0
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 fa2b 	bl	800a7d6 <USB_WritePacket>
 800a380:	e0ce      	b.n	800a520 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	0151      	lsls	r1, r2, #5
 800a394:	69fa      	ldr	r2, [r7, #28]
 800a396:	440a      	add	r2, r1
 800a398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a39c:	0cdb      	lsrs	r3, r3, #19
 800a39e:	04db      	lsls	r3, r3, #19
 800a3a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	69ba      	ldr	r2, [r7, #24]
 800a3b2:	0151      	lsls	r1, r2, #5
 800a3b4:	69fa      	ldr	r2, [r7, #28]
 800a3b6:	440a      	add	r2, r1
 800a3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d126      	bne.n	800a41c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3da:	691a      	ldr	r2, [r3, #16]
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3e4:	69b9      	ldr	r1, [r7, #24]
 800a3e6:	0148      	lsls	r0, r1, #5
 800a3e8:	69f9      	ldr	r1, [r7, #28]
 800a3ea:	4401      	add	r1, r0
 800a3ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	69ba      	ldr	r2, [r7, #24]
 800a404:	0151      	lsls	r1, r2, #5
 800a406:	69fa      	ldr	r2, [r7, #28]
 800a408:	440a      	add	r2, r1
 800a40a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a40e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a412:	6113      	str	r3, [r2, #16]
 800a414:	e036      	b.n	800a484 <USB_EPStartXfer+0x3dc>
 800a416:	bf00      	nop
 800a418:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	695a      	ldr	r2, [r3, #20]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	4413      	add	r3, r2
 800a426:	1e5a      	subs	r2, r3, #1
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a430:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a43e:	691a      	ldr	r2, [r3, #16]
 800a440:	8afb      	ldrh	r3, [r7, #22]
 800a442:	04d9      	lsls	r1, r3, #19
 800a444:	4b39      	ldr	r3, [pc, #228]	; (800a52c <USB_EPStartXfer+0x484>)
 800a446:	400b      	ands	r3, r1
 800a448:	69b9      	ldr	r1, [r7, #24]
 800a44a:	0148      	lsls	r0, r1, #5
 800a44c:	69f9      	ldr	r1, [r7, #28]
 800a44e:	4401      	add	r1, r0
 800a450:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a454:	4313      	orrs	r3, r2
 800a456:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a464:	691a      	ldr	r2, [r3, #16]
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	8af9      	ldrh	r1, [r7, #22]
 800a46c:	fb01 f303 	mul.w	r3, r1, r3
 800a470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a474:	69b9      	ldr	r1, [r7, #24]
 800a476:	0148      	lsls	r0, r1, #5
 800a478:	69f9      	ldr	r1, [r7, #28]
 800a47a:	4401      	add	r1, r0
 800a47c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a480:	4313      	orrs	r3, r2
 800a482:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a484:	79fb      	ldrb	r3, [r7, #7]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d10d      	bne.n	800a4a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d009      	beq.n	800a4a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	68d9      	ldr	r1, [r3, #12]
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	015a      	lsls	r2, r3, #5
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	4413      	add	r3, r2
 800a49e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a2:	460a      	mov	r2, r1
 800a4a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	78db      	ldrb	r3, [r3, #3]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d128      	bne.n	800a500 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d110      	bne.n	800a4e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	69ba      	ldr	r2, [r7, #24]
 800a4ce:	0151      	lsls	r1, r2, #5
 800a4d0:	69fa      	ldr	r2, [r7, #28]
 800a4d2:	440a      	add	r2, r1
 800a4d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4dc:	6013      	str	r3, [r2, #0]
 800a4de:	e00f      	b.n	800a500 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69ba      	ldr	r2, [r7, #24]
 800a4f0:	0151      	lsls	r1, r2, #5
 800a4f2:	69fa      	ldr	r2, [r7, #28]
 800a4f4:	440a      	add	r2, r1
 800a4f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	0151      	lsls	r1, r2, #5
 800a512:	69fa      	ldr	r2, [r7, #28]
 800a514:	440a      	add	r2, r1
 800a516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a51a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a51e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3720      	adds	r7, #32
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	1ff80000 	.word	0x1ff80000

0800a530 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a530:	b480      	push	{r7}
 800a532:	b087      	sub	sp, #28
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	4613      	mov	r3, r2
 800a53c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	785b      	ldrb	r3, [r3, #1]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	f040 80cd 	bne.w	800a6ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d132      	bne.n	800a5c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	4413      	add	r3, r2
 800a562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	0151      	lsls	r1, r2, #5
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	440a      	add	r2, r1
 800a570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a574:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a578:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a57c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	4413      	add	r3, r2
 800a586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	0151      	lsls	r1, r2, #5
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	440a      	add	r2, r1
 800a594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a59c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	015a      	lsls	r2, r3, #5
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	0151      	lsls	r1, r2, #5
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	440a      	add	r2, r1
 800a5b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5b8:	0cdb      	lsrs	r3, r3, #19
 800a5ba:	04db      	lsls	r3, r3, #19
 800a5bc:	6113      	str	r3, [r2, #16]
 800a5be:	e04e      	b.n	800a65e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	015a      	lsls	r2, r3, #5
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	0151      	lsls	r1, r2, #5
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	440a      	add	r2, r1
 800a5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5da:	0cdb      	lsrs	r3, r3, #19
 800a5dc:	04db      	lsls	r3, r3, #19
 800a5de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	0151      	lsls	r1, r2, #5
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	440a      	add	r2, r1
 800a5f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a602:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	695a      	ldr	r2, [r3, #20]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d903      	bls.n	800a618 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	693a      	ldr	r2, [r7, #16]
 800a628:	0151      	lsls	r1, r2, #5
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	440a      	add	r2, r1
 800a62e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a636:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a644:	691a      	ldr	r2, [r3, #16]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a64e:	6939      	ldr	r1, [r7, #16]
 800a650:	0148      	lsls	r0, r1, #5
 800a652:	6979      	ldr	r1, [r7, #20]
 800a654:	4401      	add	r1, r0
 800a656:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a65a:	4313      	orrs	r3, r2
 800a65c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a65e:	79fb      	ldrb	r3, [r7, #7]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d11e      	bne.n	800a6a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d009      	beq.n	800a680 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	4413      	add	r3, r2
 800a674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a678:	461a      	mov	r2, r3
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	015a      	lsls	r2, r3, #5
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	4413      	add	r3, r2
 800a688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	0151      	lsls	r1, r2, #5
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	440a      	add	r2, r1
 800a696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a69a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	e092      	b.n	800a7c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	015a      	lsls	r2, r3, #5
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	0151      	lsls	r1, r2, #5
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	440a      	add	r2, r1
 800a6b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d07e      	beq.n	800a7c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	f003 030f 	and.w	r3, r3, #15
 800a6da:	2101      	movs	r1, #1
 800a6dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e0:	6979      	ldr	r1, [r7, #20]
 800a6e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	634b      	str	r3, [r1, #52]	; 0x34
 800a6ea:	e06d      	b.n	800a7c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	015a      	lsls	r2, r3, #5
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	0151      	lsls	r1, r2, #5
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	440a      	add	r2, r1
 800a702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a706:	0cdb      	lsrs	r3, r3, #19
 800a708:	04db      	lsls	r3, r3, #19
 800a70a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	4413      	add	r3, r2
 800a714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	0151      	lsls	r1, r2, #5
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	440a      	add	r2, r1
 800a722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a726:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a72a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a72e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d003      	beq.n	800a740 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	689a      	ldr	r2, [r3, #8]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	4413      	add	r3, r2
 800a748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	0151      	lsls	r1, r2, #5
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	440a      	add	r2, r1
 800a756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a75a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a75e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	4413      	add	r3, r2
 800a768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76c:	691a      	ldr	r2, [r3, #16]
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a776:	6939      	ldr	r1, [r7, #16]
 800a778:	0148      	lsls	r0, r1, #5
 800a77a:	6979      	ldr	r1, [r7, #20]
 800a77c:	4401      	add	r1, r0
 800a77e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a782:	4313      	orrs	r3, r2
 800a784:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a786:	79fb      	ldrb	r3, [r7, #7]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d10d      	bne.n	800a7a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d009      	beq.n	800a7a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	68d9      	ldr	r1, [r3, #12]
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	015a      	lsls	r2, r3, #5
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	4413      	add	r3, r2
 800a7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a4:	460a      	mov	r2, r1
 800a7a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	0151      	lsls	r1, r2, #5
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	440a      	add	r2, r1
 800a7be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	371c      	adds	r7, #28
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b089      	sub	sp, #36	; 0x24
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	60f8      	str	r0, [r7, #12]
 800a7de:	60b9      	str	r1, [r7, #8]
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	71fb      	strb	r3, [r7, #7]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a7f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d123      	bne.n	800a844 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a7fc:	88bb      	ldrh	r3, [r7, #4]
 800a7fe:	3303      	adds	r3, #3
 800a800:	089b      	lsrs	r3, r3, #2
 800a802:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a804:	2300      	movs	r3, #0
 800a806:	61bb      	str	r3, [r7, #24]
 800a808:	e018      	b.n	800a83c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	031a      	lsls	r2, r3, #12
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	4413      	add	r3, r2
 800a812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a816:	461a      	mov	r2, r3
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	3301      	adds	r3, #1
 800a822:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	3301      	adds	r3, #1
 800a828:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	3301      	adds	r3, #1
 800a82e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	3301      	adds	r3, #1
 800a834:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	3301      	adds	r3, #1
 800a83a:	61bb      	str	r3, [r7, #24]
 800a83c:	69ba      	ldr	r2, [r7, #24]
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	429a      	cmp	r2, r3
 800a842:	d3e2      	bcc.n	800a80a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3724      	adds	r7, #36	; 0x24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a852:	b480      	push	{r7}
 800a854:	b08b      	sub	sp, #44	; 0x2c
 800a856:	af00      	add	r7, sp, #0
 800a858:	60f8      	str	r0, [r7, #12]
 800a85a:	60b9      	str	r1, [r7, #8]
 800a85c:	4613      	mov	r3, r2
 800a85e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a868:	88fb      	ldrh	r3, [r7, #6]
 800a86a:	089b      	lsrs	r3, r3, #2
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a870:	88fb      	ldrh	r3, [r7, #6]
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a878:	2300      	movs	r3, #0
 800a87a:	623b      	str	r3, [r7, #32]
 800a87c:	e014      	b.n	800a8a8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	601a      	str	r2, [r3, #0]
    pDest++;
 800a88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88c:	3301      	adds	r3, #1
 800a88e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	3301      	adds	r3, #1
 800a894:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a898:	3301      	adds	r3, #1
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	3301      	adds	r3, #1
 800a8a0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	623b      	str	r3, [r7, #32]
 800a8a8:	6a3a      	ldr	r2, [r7, #32]
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d3e6      	bcc.n	800a87e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a8b0:	8bfb      	ldrh	r3, [r7, #30]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d01e      	beq.n	800a8f4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	f107 0310 	add.w	r3, r7, #16
 800a8c6:	6812      	ldr	r2, [r2, #0]
 800a8c8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	6a3b      	ldr	r3, [r7, #32]
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	701a      	strb	r2, [r3, #0]
      i++;
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	623b      	str	r3, [r7, #32]
      pDest++;
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a8e8:	8bfb      	ldrh	r3, [r7, #30]
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a8ee:	8bfb      	ldrh	r3, [r7, #30]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1ea      	bne.n	800a8ca <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	372c      	adds	r7, #44	; 0x2c
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a902:	b480      	push	{r7}
 800a904:	b085      	sub	sp, #20
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	785b      	ldrb	r3, [r3, #1]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d12c      	bne.n	800a978 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	db12      	blt.n	800a956 <USB_EPSetStall+0x54>
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00f      	beq.n	800a956 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	015a      	lsls	r2, r3, #5
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	4413      	add	r3, r2
 800a93e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	0151      	lsls	r1, r2, #5
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	440a      	add	r2, r1
 800a94c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a950:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a954:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	0151      	lsls	r1, r2, #5
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	440a      	add	r2, r1
 800a96c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	e02b      	b.n	800a9d0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	015a      	lsls	r2, r3, #5
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	db12      	blt.n	800a9b0 <USB_EPSetStall+0xae>
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00f      	beq.n	800a9b0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	0151      	lsls	r1, r2, #5
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	440a      	add	r2, r1
 800a9a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9ae:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	015a      	lsls	r2, r3, #5
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	0151      	lsls	r1, r2, #5
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	440a      	add	r2, r1
 800a9c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	785b      	ldrb	r3, [r3, #1]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d128      	bne.n	800aa4c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	0151      	lsls	r1, r2, #5
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	440a      	add	r2, r1
 800aa10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	78db      	ldrb	r3, [r3, #3]
 800aa1e:	2b03      	cmp	r3, #3
 800aa20:	d003      	beq.n	800aa2a <USB_EPClearStall+0x4c>
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	78db      	ldrb	r3, [r3, #3]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d138      	bne.n	800aa9c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	015a      	lsls	r2, r3, #5
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4413      	add	r3, r2
 800aa32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	0151      	lsls	r1, r2, #5
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	440a      	add	r2, r1
 800aa40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa48:	6013      	str	r3, [r2, #0]
 800aa4a:	e027      	b.n	800aa9c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	0151      	lsls	r1, r2, #5
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	440a      	add	r2, r1
 800aa62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	78db      	ldrb	r3, [r3, #3]
 800aa70:	2b03      	cmp	r3, #3
 800aa72:	d003      	beq.n	800aa7c <USB_EPClearStall+0x9e>
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	78db      	ldrb	r3, [r3, #3]
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d10f      	bne.n	800aa9c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	015a      	lsls	r2, r3, #5
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4413      	add	r3, r2
 800aa84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	0151      	lsls	r1, r2, #5
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	440a      	add	r2, r1
 800aa92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa9a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b085      	sub	sp, #20
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	460b      	mov	r3, r1
 800aab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aac8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aacc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	78fb      	ldrb	r3, [r7, #3]
 800aad8:	011b      	lsls	r3, r3, #4
 800aada:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800aade:	68f9      	ldr	r1, [r7, #12]
 800aae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aae4:	4313      	orrs	r3, r2
 800aae6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab10:	f023 0303 	bic.w	r3, r3, #3
 800ab14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab24:	f023 0302 	bic.w	r3, r3, #2
 800ab28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab52:	f023 0303 	bic.w	r3, r3, #3
 800ab56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab66:	f043 0302 	orr.w	r3, r3, #2
 800ab6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b085      	sub	sp, #20
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	4013      	ands	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab92:	68fb      	ldr	r3, [r7, #12]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	4013      	ands	r3, r2
 800abc2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	0c1b      	lsrs	r3, r3, #16
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	4013      	ands	r3, r2
 800abf6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	b29b      	uxth	r3, r3
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac18:	78fb      	ldrb	r3, [r7, #3]
 800ac1a:	015a      	lsls	r2, r3, #5
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	4013      	ands	r3, r2
 800ac34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac36:	68bb      	ldr	r3, [r7, #8]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac66:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac68:	78fb      	ldrb	r3, [r7, #3]
 800ac6a:	f003 030f 	and.w	r3, r3, #15
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	fa22 f303 	lsr.w	r3, r2, r3
 800ac74:	01db      	lsls	r3, r3, #7
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac7e:	78fb      	ldrb	r3, [r7, #3]
 800ac80:	015a      	lsls	r2, r3, #5
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	4013      	ands	r3, r2
 800ac90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac92:	68bb      	ldr	r3, [r7, #8]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	371c      	adds	r7, #28
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	695b      	ldr	r3, [r3, #20]
 800acac:	f003 0301 	and.w	r3, r3, #1
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800acda:	f023 0307 	bic.w	r3, r3, #7
 800acde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acf2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
	...

0800ad04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	607a      	str	r2, [r7, #4]
 800ad10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	333c      	adds	r3, #60	; 0x3c
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	4a26      	ldr	r2, [pc, #152]	; (800adbc <USB_EP0_OutStart+0xb8>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d90a      	bls.n	800ad3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad38:	d101      	bne.n	800ad3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	e037      	b.n	800adae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad44:	461a      	mov	r2, r3
 800ad46:	2300      	movs	r3, #0
 800ad48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad6c:	f043 0318 	orr.w	r3, r3, #24
 800ad70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ad84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ad86:	7afb      	ldrb	r3, [r7, #11]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d10f      	bne.n	800adac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad92:	461a      	mov	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ada6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800adaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	371c      	adds	r7, #28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	4f54300a 	.word	0x4f54300a

0800adc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800adc8:	2300      	movs	r3, #0
 800adca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	3301      	adds	r3, #1
 800add0:	60fb      	str	r3, [r7, #12]
 800add2:	4a13      	ldr	r2, [pc, #76]	; (800ae20 <USB_CoreReset+0x60>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d901      	bls.n	800addc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800add8:	2303      	movs	r3, #3
 800adda:	e01a      	b.n	800ae12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	daf3      	bge.n	800adcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	f043 0201 	orr.w	r2, r3, #1
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3301      	adds	r3, #1
 800adf8:	60fb      	str	r3, [r7, #12]
 800adfa:	4a09      	ldr	r2, [pc, #36]	; (800ae20 <USB_CoreReset+0x60>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d901      	bls.n	800ae04 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e006      	b.n	800ae12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d0f1      	beq.n	800adf4 <USB_CoreReset+0x34>

  return HAL_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	00030d40 	.word	0x00030d40

0800ae24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae34:	f005 fc52 	bl	80106dc <USBD_static_malloc>
 800ae38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d105      	bne.n	800ae4c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ae48:	2302      	movs	r3, #2
 800ae4a:	e066      	b.n	800af1a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	7c1b      	ldrb	r3, [r3, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d119      	bne.n	800ae90 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae60:	2202      	movs	r2, #2
 800ae62:	2181      	movs	r1, #129	; 0x81
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f005 fb16 	bl	8010496 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ae70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae74:	2202      	movs	r2, #2
 800ae76:	2101      	movs	r1, #1
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f005 fb0c 	bl	8010496 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2210      	movs	r2, #16
 800ae8a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ae8e:	e016      	b.n	800aebe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae90:	2340      	movs	r3, #64	; 0x40
 800ae92:	2202      	movs	r2, #2
 800ae94:	2181      	movs	r1, #129	; 0x81
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f005 fafd 	bl	8010496 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aea2:	2340      	movs	r3, #64	; 0x40
 800aea4:	2202      	movs	r2, #2
 800aea6:	2101      	movs	r1, #1
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f005 faf4 	bl	8010496 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2210      	movs	r2, #16
 800aeba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aebe:	2308      	movs	r3, #8
 800aec0:	2203      	movs	r2, #3
 800aec2:	2182      	movs	r1, #130	; 0x82
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f005 fae6 	bl	8010496 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	7c1b      	ldrb	r3, [r3, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d109      	bne.n	800af08 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aefa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aefe:	2101      	movs	r1, #1
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f005 fbb7 	bl	8010674 <USBD_LL_PrepareReceive>
 800af06:	e007      	b.n	800af18 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af0e:	2340      	movs	r3, #64	; 0x40
 800af10:	2101      	movs	r1, #1
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f005 fbae 	bl	8010674 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	460b      	mov	r3, r1
 800af2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800af2e:	2181      	movs	r1, #129	; 0x81
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f005 fad6 	bl	80104e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800af3c:	2101      	movs	r1, #1
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f005 facf 	bl	80104e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800af4c:	2182      	movs	r1, #130	; 0x82
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f005 fac7 	bl	80104e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00e      	beq.n	800af8c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af7e:	4618      	mov	r0, r3
 800af80:	f005 fbba 	bl	80106f8 <USBD_static_free>
    pdev->pClassData = NULL;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afa8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800afaa:	2300      	movs	r3, #0
 800afac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800afae:	2300      	movs	r3, #0
 800afb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d101      	bne.n	800afc0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800afbc:	2303      	movs	r3, #3
 800afbe:	e0af      	b.n	800b120 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d03f      	beq.n	800b04c <USBD_CDC_Setup+0xb4>
 800afcc:	2b20      	cmp	r3, #32
 800afce:	f040 809f 	bne.w	800b110 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	88db      	ldrh	r3, [r3, #6]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d02e      	beq.n	800b038 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	b25b      	sxtb	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	da16      	bge.n	800b012 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	683a      	ldr	r2, [r7, #0]
 800afee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800aff0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	88d2      	ldrh	r2, [r2, #6]
 800aff6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	88db      	ldrh	r3, [r3, #6]
 800affc:	2b07      	cmp	r3, #7
 800affe:	bf28      	it	cs
 800b000:	2307      	movcs	r3, #7
 800b002:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	89fa      	ldrh	r2, [r7, #14]
 800b008:	4619      	mov	r1, r3
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f001 fb19 	bl	800c642 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b010:	e085      	b.n	800b11e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	785a      	ldrb	r2, [r3, #1]
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	88db      	ldrh	r3, [r3, #6]
 800b020:	b2da      	uxtb	r2, r3
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b028:	6939      	ldr	r1, [r7, #16]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	88db      	ldrh	r3, [r3, #6]
 800b02e:	461a      	mov	r2, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f001 fb32 	bl	800c69a <USBD_CtlPrepareRx>
      break;
 800b036:	e072      	b.n	800b11e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	7850      	ldrb	r0, [r2, #1]
 800b044:	2200      	movs	r2, #0
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	4798      	blx	r3
      break;
 800b04a:	e068      	b.n	800b11e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	785b      	ldrb	r3, [r3, #1]
 800b050:	2b0b      	cmp	r3, #11
 800b052:	d852      	bhi.n	800b0fa <USBD_CDC_Setup+0x162>
 800b054:	a201      	add	r2, pc, #4	; (adr r2, 800b05c <USBD_CDC_Setup+0xc4>)
 800b056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05a:	bf00      	nop
 800b05c:	0800b08d 	.word	0x0800b08d
 800b060:	0800b109 	.word	0x0800b109
 800b064:	0800b0fb 	.word	0x0800b0fb
 800b068:	0800b0fb 	.word	0x0800b0fb
 800b06c:	0800b0fb 	.word	0x0800b0fb
 800b070:	0800b0fb 	.word	0x0800b0fb
 800b074:	0800b0fb 	.word	0x0800b0fb
 800b078:	0800b0fb 	.word	0x0800b0fb
 800b07c:	0800b0fb 	.word	0x0800b0fb
 800b080:	0800b0fb 	.word	0x0800b0fb
 800b084:	0800b0b7 	.word	0x0800b0b7
 800b088:	0800b0e1 	.word	0x0800b0e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b092:	b2db      	uxtb	r3, r3
 800b094:	2b03      	cmp	r3, #3
 800b096:	d107      	bne.n	800b0a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b098:	f107 030a 	add.w	r3, r7, #10
 800b09c:	2202      	movs	r2, #2
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f001 face 	bl	800c642 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0a6:	e032      	b.n	800b10e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f001 fa58 	bl	800c560 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	75fb      	strb	r3, [r7, #23]
          break;
 800b0b4:	e02b      	b.n	800b10e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d107      	bne.n	800b0d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0c2:	f107 030d 	add.w	r3, r7, #13
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f001 fab9 	bl	800c642 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0d0:	e01d      	b.n	800b10e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f001 fa43 	bl	800c560 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b0de:	e016      	b.n	800b10e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b03      	cmp	r3, #3
 800b0ea:	d00f      	beq.n	800b10c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f001 fa36 	bl	800c560 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b0f8:	e008      	b.n	800b10c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 fa2f 	bl	800c560 <USBD_CtlError>
          ret = USBD_FAIL;
 800b102:	2303      	movs	r3, #3
 800b104:	75fb      	strb	r3, [r7, #23]
          break;
 800b106:	e002      	b.n	800b10e <USBD_CDC_Setup+0x176>
          break;
 800b108:	bf00      	nop
 800b10a:	e008      	b.n	800b11e <USBD_CDC_Setup+0x186>
          break;
 800b10c:	bf00      	nop
      }
      break;
 800b10e:	e006      	b.n	800b11e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 fa24 	bl	800c560 <USBD_CtlError>
      ret = USBD_FAIL;
 800b118:	2303      	movs	r3, #3
 800b11a:	75fb      	strb	r3, [r7, #23]
      break;
 800b11c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b13a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b146:	2303      	movs	r3, #3
 800b148:	e04f      	b.n	800b1ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b150:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b152:	78fa      	ldrb	r2, [r7, #3]
 800b154:	6879      	ldr	r1, [r7, #4]
 800b156:	4613      	mov	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	440b      	add	r3, r1
 800b160:	3318      	adds	r3, #24
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d029      	beq.n	800b1bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b168:	78fa      	ldrb	r2, [r7, #3]
 800b16a:	6879      	ldr	r1, [r7, #4]
 800b16c:	4613      	mov	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	440b      	add	r3, r1
 800b176:	3318      	adds	r3, #24
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	78f9      	ldrb	r1, [r7, #3]
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	460b      	mov	r3, r1
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	1a5b      	subs	r3, r3, r1
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4403      	add	r3, r0
 800b188:	3344      	adds	r3, #68	; 0x44
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b190:	fb03 f301 	mul.w	r3, r3, r1
 800b194:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b196:	2b00      	cmp	r3, #0
 800b198:	d110      	bne.n	800b1bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b19a:	78fa      	ldrb	r2, [r7, #3]
 800b19c:	6879      	ldr	r1, [r7, #4]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	440b      	add	r3, r1
 800b1a8:	3318      	adds	r3, #24
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1ae:	78f9      	ldrb	r1, [r7, #3]
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f005 fa3c 	bl	8010632 <USBD_LL_Transmit>
 800b1ba:	e015      	b.n	800b1e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00b      	beq.n	800b1e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b1e4:	78fa      	ldrb	r2, [r7, #3]
 800b1e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b204:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b210:	2303      	movs	r3, #3
 800b212:	e015      	b.n	800b240 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b214:	78fb      	ldrb	r3, [r7, #3]
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f005 fa4c 	bl	80106b6 <USBD_LL_GetRxDataSize>
 800b21e:	4602      	mov	r2, r0
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b23a:	4611      	mov	r1, r2
 800b23c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b256:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b25e:	2303      	movs	r3, #3
 800b260:	e01b      	b.n	800b29a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d015      	beq.n	800b298 <USBD_CDC_EP0_RxReady+0x50>
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b272:	2bff      	cmp	r3, #255	; 0xff
 800b274:	d010      	beq.n	800b298 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b284:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b28c:	b292      	uxth	r2, r2
 800b28e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	22ff      	movs	r2, #255	; 0xff
 800b294:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
	...

0800b2a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2243      	movs	r2, #67	; 0x43
 800b2b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b2b2:	4b03      	ldr	r3, [pc, #12]	; (800b2c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	20000094 	.word	0x20000094

0800b2c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2243      	movs	r2, #67	; 0x43
 800b2d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b2d2:	4b03      	ldr	r3, [pc, #12]	; (800b2e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	20000050 	.word	0x20000050

0800b2e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2243      	movs	r2, #67	; 0x43
 800b2f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b2f2:	4b03      	ldr	r3, [pc, #12]	; (800b300 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	200000d8 	.word	0x200000d8

0800b304 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	220a      	movs	r2, #10
 800b310:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b312:	4b03      	ldr	r3, [pc, #12]	; (800b320 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b314:	4618      	mov	r0, r3
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	2000000c 	.word	0x2000000c

0800b324 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d101      	bne.n	800b338 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b334:	2303      	movs	r3, #3
 800b336:	e004      	b.n	800b342 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b34e:	b480      	push	{r7}
 800b350:	b087      	sub	sp, #28
 800b352:	af00      	add	r7, sp, #0
 800b354:	60f8      	str	r0, [r7, #12]
 800b356:	60b9      	str	r1, [r7, #8]
 800b358:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b360:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b368:	2303      	movs	r3, #3
 800b36a:	e008      	b.n	800b37e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	371c      	adds	r7, #28
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b085      	sub	sp, #20
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b39a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e004      	b.n	800b3b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3714      	adds	r7, #20
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	e01a      	b.n	800b414 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d114      	bne.n	800b412 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b406:	2181      	movs	r1, #129	; 0x81
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f005 f912 	bl	8010632 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b42a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b432:	2b00      	cmp	r3, #0
 800b434:	d101      	bne.n	800b43a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b436:	2303      	movs	r3, #3
 800b438:	e016      	b.n	800b468 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	7c1b      	ldrb	r3, [r3, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d109      	bne.n	800b456 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b44c:	2101      	movs	r1, #1
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f005 f910 	bl	8010674 <USBD_LL_PrepareReceive>
 800b454:	e007      	b.n	800b466 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b45c:	2340      	movs	r3, #64	; 0x40
 800b45e:	2101      	movs	r1, #1
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f005 f907 	bl	8010674 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	4613      	mov	r3, r2
 800b47c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b484:	2303      	movs	r3, #3
 800b486:	e01f      	b.n	800b4c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d003      	beq.n	800b4ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	79fa      	ldrb	r2, [r7, #7]
 800b4ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f004 ff83 	bl	80103c8 <USBD_LL_Init>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b4c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3718      	adds	r7, #24
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	e016      	b.n	800b516 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00b      	beq.n	800b514 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b504:	f107 020e 	add.w	r2, r7, #14
 800b508:	4610      	mov	r0, r2
 800b50a:	4798      	blx	r3
 800b50c:	4602      	mov	r2, r0
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b082      	sub	sp, #8
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f004 ff9a 	bl	8010460 <USBD_LL_Start>
 800b52c:	4603      	mov	r3, r0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b536:	b480      	push	{r7}
 800b538:	b083      	sub	sp, #12
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	460b      	mov	r3, r1
 800b556:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b558:	2303      	movs	r3, #3
 800b55a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b562:	2b00      	cmp	r3, #0
 800b564:	d009      	beq.n	800b57a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	78fa      	ldrb	r2, [r7, #3]
 800b570:	4611      	mov	r1, r2
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	4798      	blx	r3
 800b576:	4603      	mov	r3, r0
 800b578:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b596:	2b00      	cmp	r3, #0
 800b598:	d007      	beq.n	800b5aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	78fa      	ldrb	r2, [r7, #3]
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	4798      	blx	r3
  }

  return USBD_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 ff90 	bl	800c4ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b5da:	461a      	mov	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b5e8:	f003 031f 	and.w	r3, r3, #31
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d01a      	beq.n	800b626 <USBD_LL_SetupStage+0x72>
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	d822      	bhi.n	800b63a <USBD_LL_SetupStage+0x86>
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <USBD_LL_SetupStage+0x4a>
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d00a      	beq.n	800b612 <USBD_LL_SetupStage+0x5e>
 800b5fc:	e01d      	b.n	800b63a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b604:	4619      	mov	r1, r3
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fa62 	bl	800bad0 <USBD_StdDevReq>
 800b60c:	4603      	mov	r3, r0
 800b60e:	73fb      	strb	r3, [r7, #15]
      break;
 800b610:	e020      	b.n	800b654 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b618:	4619      	mov	r1, r3
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fac6 	bl	800bbac <USBD_StdItfReq>
 800b620:	4603      	mov	r3, r0
 800b622:	73fb      	strb	r3, [r7, #15]
      break;
 800b624:	e016      	b.n	800b654 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fb05 	bl	800bc3e <USBD_StdEPReq>
 800b634:	4603      	mov	r3, r0
 800b636:	73fb      	strb	r3, [r7, #15]
      break;
 800b638:	e00c      	b.n	800b654 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b640:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b644:	b2db      	uxtb	r3, r3
 800b646:	4619      	mov	r1, r3
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f004 ff69 	bl	8010520 <USBD_LL_StallEP>
 800b64e:	4603      	mov	r3, r0
 800b650:	73fb      	strb	r3, [r7, #15]
      break;
 800b652:	bf00      	nop
  }

  return ret;
 800b654:	7bfb      	ldrb	r3, [r7, #15]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b086      	sub	sp, #24
 800b662:	af00      	add	r7, sp, #0
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	460b      	mov	r3, r1
 800b668:	607a      	str	r2, [r7, #4]
 800b66a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b66c:	7afb      	ldrb	r3, [r7, #11]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d138      	bne.n	800b6e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b678:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b680:	2b03      	cmp	r3, #3
 800b682:	d14a      	bne.n	800b71a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	689a      	ldr	r2, [r3, #8]
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d913      	bls.n	800b6b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	689a      	ldr	r2, [r3, #8]
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	1ad2      	subs	r2, r2, r3
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	68da      	ldr	r2, [r3, #12]
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	bf28      	it	cs
 800b6aa:	4613      	movcs	r3, r2
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f001 f80f 	bl	800c6d4 <USBD_CtlContinueRx>
 800b6b6:	e030      	b.n	800b71a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2b03      	cmp	r3, #3
 800b6c2:	d10b      	bne.n	800b6dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d005      	beq.n	800b6dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f001 f80a 	bl	800c6f6 <USBD_CtlSendStatus>
 800b6e2:	e01a      	b.n	800b71a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b03      	cmp	r3, #3
 800b6ee:	d114      	bne.n	800b71a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00e      	beq.n	800b71a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b702:	699b      	ldr	r3, [r3, #24]
 800b704:	7afa      	ldrb	r2, [r7, #11]
 800b706:	4611      	mov	r1, r2
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	4798      	blx	r3
 800b70c:	4603      	mov	r3, r0
 800b70e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b710:	7dfb      	ldrb	r3, [r7, #23]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	e000      	b.n	800b71c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3718      	adds	r7, #24
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	460b      	mov	r3, r1
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b732:	7afb      	ldrb	r3, [r7, #11]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d16b      	bne.n	800b810 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	3314      	adds	r3, #20
 800b73c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b744:	2b02      	cmp	r3, #2
 800b746:	d156      	bne.n	800b7f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	689a      	ldr	r2, [r3, #8]
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	429a      	cmp	r2, r3
 800b752:	d914      	bls.n	800b77e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	689a      	ldr	r2, [r3, #8]
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	1ad2      	subs	r2, r2, r3
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	461a      	mov	r2, r3
 800b768:	6879      	ldr	r1, [r7, #4]
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f000 ff84 	bl	800c678 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b770:	2300      	movs	r3, #0
 800b772:	2200      	movs	r2, #0
 800b774:	2100      	movs	r1, #0
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f004 ff7c 	bl	8010674 <USBD_LL_PrepareReceive>
 800b77c:	e03b      	b.n	800b7f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	68da      	ldr	r2, [r3, #12]
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	429a      	cmp	r2, r3
 800b788:	d11c      	bne.n	800b7c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b792:	429a      	cmp	r2, r3
 800b794:	d316      	bcc.n	800b7c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d20f      	bcs.n	800b7c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f000 ff65 	bl	800c678 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f004 ff59 	bl	8010674 <USBD_LL_PrepareReceive>
 800b7c2:	e018      	b.n	800b7f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	d10b      	bne.n	800b7e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d005      	beq.n	800b7e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7e8:	2180      	movs	r1, #128	; 0x80
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	f004 fe98 	bl	8010520 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f000 ff93 	bl	800c71c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d122      	bne.n	800b846 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f7ff fe98 	bl	800b536 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b80e:	e01a      	b.n	800b846 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b816:	b2db      	uxtb	r3, r3
 800b818:	2b03      	cmp	r3, #3
 800b81a:	d114      	bne.n	800b846 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b822:	695b      	ldr	r3, [r3, #20]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00e      	beq.n	800b846 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b82e:	695b      	ldr	r3, [r3, #20]
 800b830:	7afa      	ldrb	r2, [r7, #11]
 800b832:	4611      	mov	r1, r2
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	4798      	blx	r3
 800b838:	4603      	mov	r3, r0
 800b83a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b83c:	7dfb      	ldrb	r3, [r7, #23]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b842:	7dfb      	ldrb	r3, [r7, #23]
 800b844:	e000      	b.n	800b848 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3718      	adds	r7, #24
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b880:	2303      	movs	r3, #3
 800b882:	e02f      	b.n	800b8e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00f      	beq.n	800b8ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d009      	beq.n	800b8ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	6852      	ldr	r2, [r2, #4]
 800b8a6:	b2d2      	uxtb	r2, r2
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8ae:	2340      	movs	r3, #64	; 0x40
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f004 fdee 	bl	8010496 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2240      	movs	r2, #64	; 0x40
 800b8c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8ca:	2340      	movs	r3, #64	; 0x40
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2180      	movs	r1, #128	; 0x80
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f004 fde0 	bl	8010496 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2240      	movs	r2, #64	; 0x40
 800b8e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	78fa      	ldrb	r2, [r7, #3]
 800b8fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2204      	movs	r2, #4
 800b926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b946:	b2db      	uxtb	r3, r3
 800b948:	2b04      	cmp	r3, #4
 800b94a:	d106      	bne.n	800b95a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b952:	b2da      	uxtb	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b97a:	2303      	movs	r3, #3
 800b97c:	e012      	b.n	800b9a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b984:	b2db      	uxtb	r3, r3
 800b986:	2b03      	cmp	r3, #3
 800b988:	d10b      	bne.n	800b9a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b990:	69db      	ldr	r3, [r3, #28]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d005      	beq.n	800b9a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b99c:	69db      	ldr	r3, [r3, #28]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	e014      	b.n	800b9f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d10d      	bne.n	800b9ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d007      	beq.n	800b9ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	78fa      	ldrb	r2, [r7, #3]
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	460b      	mov	r3, r1
 800ba02:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d101      	bne.n	800ba12 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	e014      	b.n	800ba3c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b03      	cmp	r3, #3
 800ba1c:	d10d      	bne.n	800ba3a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d007      	beq.n	800ba3a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba32:	78fa      	ldrb	r2, [r7, #3]
 800ba34:	4611      	mov	r1, r2
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3708      	adds	r7, #8
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d009      	beq.n	800ba88 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	6852      	ldr	r2, [r2, #4]
 800ba80:	b2d2      	uxtb	r2, r2
 800ba82:	4611      	mov	r1, r2
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	4798      	blx	r3
  }

  return USBD_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b087      	sub	sp, #28
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	3301      	adds	r3, #1
 800baa8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bab0:	8a3b      	ldrh	r3, [r7, #16]
 800bab2:	021b      	lsls	r3, r3, #8
 800bab4:	b21a      	sxth	r2, r3
 800bab6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800baba:	4313      	orrs	r3, r2
 800babc:	b21b      	sxth	r3, r3
 800babe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bac0:	89fb      	ldrh	r3, [r7, #14]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	371c      	adds	r7, #28
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
	...

0800bad0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bae6:	2b40      	cmp	r3, #64	; 0x40
 800bae8:	d005      	beq.n	800baf6 <USBD_StdDevReq+0x26>
 800baea:	2b40      	cmp	r3, #64	; 0x40
 800baec:	d853      	bhi.n	800bb96 <USBD_StdDevReq+0xc6>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00b      	beq.n	800bb0a <USBD_StdDevReq+0x3a>
 800baf2:	2b20      	cmp	r3, #32
 800baf4:	d14f      	bne.n	800bb96 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	6839      	ldr	r1, [r7, #0]
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	4798      	blx	r3
 800bb04:	4603      	mov	r3, r0
 800bb06:	73fb      	strb	r3, [r7, #15]
      break;
 800bb08:	e04a      	b.n	800bba0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	785b      	ldrb	r3, [r3, #1]
 800bb0e:	2b09      	cmp	r3, #9
 800bb10:	d83b      	bhi.n	800bb8a <USBD_StdDevReq+0xba>
 800bb12:	a201      	add	r2, pc, #4	; (adr r2, 800bb18 <USBD_StdDevReq+0x48>)
 800bb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb18:	0800bb6d 	.word	0x0800bb6d
 800bb1c:	0800bb81 	.word	0x0800bb81
 800bb20:	0800bb8b 	.word	0x0800bb8b
 800bb24:	0800bb77 	.word	0x0800bb77
 800bb28:	0800bb8b 	.word	0x0800bb8b
 800bb2c:	0800bb4b 	.word	0x0800bb4b
 800bb30:	0800bb41 	.word	0x0800bb41
 800bb34:	0800bb8b 	.word	0x0800bb8b
 800bb38:	0800bb63 	.word	0x0800bb63
 800bb3c:	0800bb55 	.word	0x0800bb55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f9de 	bl	800bf04 <USBD_GetDescriptor>
          break;
 800bb48:	e024      	b.n	800bb94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 fb43 	bl	800c1d8 <USBD_SetAddress>
          break;
 800bb52:	e01f      	b.n	800bb94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 fb82 	bl	800c260 <USBD_SetConfig>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73fb      	strb	r3, [r7, #15]
          break;
 800bb60:	e018      	b.n	800bb94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fc21 	bl	800c3ac <USBD_GetConfig>
          break;
 800bb6a:	e013      	b.n	800bb94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fc52 	bl	800c418 <USBD_GetStatus>
          break;
 800bb74:	e00e      	b.n	800bb94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fc81 	bl	800c480 <USBD_SetFeature>
          break;
 800bb7e:	e009      	b.n	800bb94 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 fc90 	bl	800c4a8 <USBD_ClrFeature>
          break;
 800bb88:	e004      	b.n	800bb94 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bb8a:	6839      	ldr	r1, [r7, #0]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fce7 	bl	800c560 <USBD_CtlError>
          break;
 800bb92:	bf00      	nop
      }
      break;
 800bb94:	e004      	b.n	800bba0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bb96:	6839      	ldr	r1, [r7, #0]
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fce1 	bl	800c560 <USBD_CtlError>
      break;
 800bb9e:	bf00      	nop
  }

  return ret;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop

0800bbac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbc2:	2b40      	cmp	r3, #64	; 0x40
 800bbc4:	d005      	beq.n	800bbd2 <USBD_StdItfReq+0x26>
 800bbc6:	2b40      	cmp	r3, #64	; 0x40
 800bbc8:	d82f      	bhi.n	800bc2a <USBD_StdItfReq+0x7e>
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <USBD_StdItfReq+0x26>
 800bbce:	2b20      	cmp	r3, #32
 800bbd0:	d12b      	bne.n	800bc2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d81d      	bhi.n	800bc1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	889b      	ldrh	r3, [r3, #4]
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d813      	bhi.n	800bc12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	4798      	blx	r3
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	88db      	ldrh	r3, [r3, #6]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d110      	bne.n	800bc26 <USBD_StdItfReq+0x7a>
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10d      	bne.n	800bc26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fd73 	bl	800c6f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc10:	e009      	b.n	800bc26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fca3 	bl	800c560 <USBD_CtlError>
          break;
 800bc1a:	e004      	b.n	800bc26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bc1c:	6839      	ldr	r1, [r7, #0]
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 fc9e 	bl	800c560 <USBD_CtlError>
          break;
 800bc24:	e000      	b.n	800bc28 <USBD_StdItfReq+0x7c>
          break;
 800bc26:	bf00      	nop
      }
      break;
 800bc28:	e004      	b.n	800bc34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fc97 	bl	800c560 <USBD_CtlError>
      break;
 800bc32:	bf00      	nop
  }

  return ret;
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	889b      	ldrh	r3, [r3, #4]
 800bc50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc5a:	2b40      	cmp	r3, #64	; 0x40
 800bc5c:	d007      	beq.n	800bc6e <USBD_StdEPReq+0x30>
 800bc5e:	2b40      	cmp	r3, #64	; 0x40
 800bc60:	f200 8145 	bhi.w	800beee <USBD_StdEPReq+0x2b0>
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00c      	beq.n	800bc82 <USBD_StdEPReq+0x44>
 800bc68:	2b20      	cmp	r3, #32
 800bc6a:	f040 8140 	bne.w	800beee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	4798      	blx	r3
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc80:	e13a      	b.n	800bef8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	785b      	ldrb	r3, [r3, #1]
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d007      	beq.n	800bc9a <USBD_StdEPReq+0x5c>
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	f300 8129 	bgt.w	800bee2 <USBD_StdEPReq+0x2a4>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d07f      	beq.n	800bd94 <USBD_StdEPReq+0x156>
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d03c      	beq.n	800bd12 <USBD_StdEPReq+0xd4>
 800bc98:	e123      	b.n	800bee2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d002      	beq.n	800bcac <USBD_StdEPReq+0x6e>
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d016      	beq.n	800bcd8 <USBD_StdEPReq+0x9a>
 800bcaa:	e02c      	b.n	800bd06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00d      	beq.n	800bcce <USBD_StdEPReq+0x90>
 800bcb2:	7bbb      	ldrb	r3, [r7, #14]
 800bcb4:	2b80      	cmp	r3, #128	; 0x80
 800bcb6:	d00a      	beq.n	800bcce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcb8:	7bbb      	ldrb	r3, [r7, #14]
 800bcba:	4619      	mov	r1, r3
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f004 fc2f 	bl	8010520 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcc2:	2180      	movs	r1, #128	; 0x80
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f004 fc2b 	bl	8010520 <USBD_LL_StallEP>
 800bcca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bccc:	e020      	b.n	800bd10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bcce:	6839      	ldr	r1, [r7, #0]
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fc45 	bl	800c560 <USBD_CtlError>
              break;
 800bcd6:	e01b      	b.n	800bd10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	885b      	ldrh	r3, [r3, #2]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10e      	bne.n	800bcfe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bce0:	7bbb      	ldrb	r3, [r7, #14]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00b      	beq.n	800bcfe <USBD_StdEPReq+0xc0>
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
 800bce8:	2b80      	cmp	r3, #128	; 0x80
 800bcea:	d008      	beq.n	800bcfe <USBD_StdEPReq+0xc0>
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	88db      	ldrh	r3, [r3, #6]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d104      	bne.n	800bcfe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcf4:	7bbb      	ldrb	r3, [r7, #14]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f004 fc11 	bl	8010520 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fcf9 	bl	800c6f6 <USBD_CtlSendStatus>

              break;
 800bd04:	e004      	b.n	800bd10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fc29 	bl	800c560 <USBD_CtlError>
              break;
 800bd0e:	bf00      	nop
          }
          break;
 800bd10:	e0ec      	b.n	800beec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d002      	beq.n	800bd24 <USBD_StdEPReq+0xe6>
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	d016      	beq.n	800bd50 <USBD_StdEPReq+0x112>
 800bd22:	e030      	b.n	800bd86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd24:	7bbb      	ldrb	r3, [r7, #14]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00d      	beq.n	800bd46 <USBD_StdEPReq+0x108>
 800bd2a:	7bbb      	ldrb	r3, [r7, #14]
 800bd2c:	2b80      	cmp	r3, #128	; 0x80
 800bd2e:	d00a      	beq.n	800bd46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd30:	7bbb      	ldrb	r3, [r7, #14]
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f004 fbf3 	bl	8010520 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd3a:	2180      	movs	r1, #128	; 0x80
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f004 fbef 	bl	8010520 <USBD_LL_StallEP>
 800bd42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd44:	e025      	b.n	800bd92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bd46:	6839      	ldr	r1, [r7, #0]
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fc09 	bl	800c560 <USBD_CtlError>
              break;
 800bd4e:	e020      	b.n	800bd92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	885b      	ldrh	r3, [r3, #2]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d11b      	bne.n	800bd90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd58:	7bbb      	ldrb	r3, [r7, #14]
 800bd5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d004      	beq.n	800bd6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd62:	7bbb      	ldrb	r3, [r7, #14]
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f004 fbf9 	bl	801055e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fcc2 	bl	800c6f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	6839      	ldr	r1, [r7, #0]
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	4798      	blx	r3
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bd84:	e004      	b.n	800bd90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bd86:	6839      	ldr	r1, [r7, #0]
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 fbe9 	bl	800c560 <USBD_CtlError>
              break;
 800bd8e:	e000      	b.n	800bd92 <USBD_StdEPReq+0x154>
              break;
 800bd90:	bf00      	nop
          }
          break;
 800bd92:	e0ab      	b.n	800beec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d002      	beq.n	800bda6 <USBD_StdEPReq+0x168>
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	d032      	beq.n	800be0a <USBD_StdEPReq+0x1cc>
 800bda4:	e097      	b.n	800bed6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d007      	beq.n	800bdbc <USBD_StdEPReq+0x17e>
 800bdac:	7bbb      	ldrb	r3, [r7, #14]
 800bdae:	2b80      	cmp	r3, #128	; 0x80
 800bdb0:	d004      	beq.n	800bdbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 fbd3 	bl	800c560 <USBD_CtlError>
                break;
 800bdba:	e091      	b.n	800bee0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	da0b      	bge.n	800bddc <USBD_StdEPReq+0x19e>
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdca:	4613      	mov	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	3310      	adds	r3, #16
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	3304      	adds	r3, #4
 800bdda:	e00b      	b.n	800bdf4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bde2:	4613      	mov	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2202      	movs	r2, #2
 800be00:	4619      	mov	r1, r3
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fc1d 	bl	800c642 <USBD_CtlSendData>
              break;
 800be08:	e06a      	b.n	800bee0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	da11      	bge.n	800be36 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be12:	7bbb      	ldrb	r3, [r7, #14]
 800be14:	f003 020f 	and.w	r2, r3, #15
 800be18:	6879      	ldr	r1, [r7, #4]
 800be1a:	4613      	mov	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4413      	add	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	440b      	add	r3, r1
 800be24:	3324      	adds	r3, #36	; 0x24
 800be26:	881b      	ldrh	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d117      	bne.n	800be5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fb96 	bl	800c560 <USBD_CtlError>
                  break;
 800be34:	e054      	b.n	800bee0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be36:	7bbb      	ldrb	r3, [r7, #14]
 800be38:	f003 020f 	and.w	r2, r3, #15
 800be3c:	6879      	ldr	r1, [r7, #4]
 800be3e:	4613      	mov	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	440b      	add	r3, r1
 800be48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be4c:	881b      	ldrh	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d104      	bne.n	800be5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fb83 	bl	800c560 <USBD_CtlError>
                  break;
 800be5a:	e041      	b.n	800bee0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be60:	2b00      	cmp	r3, #0
 800be62:	da0b      	bge.n	800be7c <USBD_StdEPReq+0x23e>
 800be64:	7bbb      	ldrb	r3, [r7, #14]
 800be66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be6a:	4613      	mov	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	3310      	adds	r3, #16
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	4413      	add	r3, r2
 800be78:	3304      	adds	r3, #4
 800be7a:	e00b      	b.n	800be94 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
 800be7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be82:	4613      	mov	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4413      	add	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	4413      	add	r3, r2
 800be92:	3304      	adds	r3, #4
 800be94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be96:	7bbb      	ldrb	r3, [r7, #14]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <USBD_StdEPReq+0x264>
 800be9c:	7bbb      	ldrb	r3, [r7, #14]
 800be9e:	2b80      	cmp	r3, #128	; 0x80
 800bea0:	d103      	bne.n	800beaa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	2200      	movs	r2, #0
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	e00e      	b.n	800bec8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	4619      	mov	r1, r3
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f004 fb74 	bl	801059c <USBD_LL_IsStallEP>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d003      	beq.n	800bec2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	2201      	movs	r2, #1
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	e002      	b.n	800bec8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	2200      	movs	r2, #0
 800bec6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	2202      	movs	r2, #2
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fbb7 	bl	800c642 <USBD_CtlSendData>
              break;
 800bed4:	e004      	b.n	800bee0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fb41 	bl	800c560 <USBD_CtlError>
              break;
 800bede:	bf00      	nop
          }
          break;
 800bee0:	e004      	b.n	800beec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fb3b 	bl	800c560 <USBD_CtlError>
          break;
 800beea:	bf00      	nop
      }
      break;
 800beec:	e004      	b.n	800bef8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800beee:	6839      	ldr	r1, [r7, #0]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 fb35 	bl	800c560 <USBD_CtlError>
      break;
 800bef6:	bf00      	nop
  }

  return ret;
 800bef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
	...

0800bf04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf16:	2300      	movs	r3, #0
 800bf18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	885b      	ldrh	r3, [r3, #2]
 800bf1e:	0a1b      	lsrs	r3, r3, #8
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	3b01      	subs	r3, #1
 800bf24:	2b06      	cmp	r3, #6
 800bf26:	f200 8128 	bhi.w	800c17a <USBD_GetDescriptor+0x276>
 800bf2a:	a201      	add	r2, pc, #4	; (adr r2, 800bf30 <USBD_GetDescriptor+0x2c>)
 800bf2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf30:	0800bf4d 	.word	0x0800bf4d
 800bf34:	0800bf65 	.word	0x0800bf65
 800bf38:	0800bfa5 	.word	0x0800bfa5
 800bf3c:	0800c17b 	.word	0x0800c17b
 800bf40:	0800c17b 	.word	0x0800c17b
 800bf44:	0800c11b 	.word	0x0800c11b
 800bf48:	0800c147 	.word	0x0800c147
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	7c12      	ldrb	r2, [r2, #16]
 800bf58:	f107 0108 	add.w	r1, r7, #8
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	4798      	blx	r3
 800bf60:	60f8      	str	r0, [r7, #12]
      break;
 800bf62:	e112      	b.n	800c18a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	7c1b      	ldrb	r3, [r3, #16]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10d      	bne.n	800bf88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf74:	f107 0208 	add.w	r2, r7, #8
 800bf78:	4610      	mov	r0, r2
 800bf7a:	4798      	blx	r3
 800bf7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	3301      	adds	r3, #1
 800bf82:	2202      	movs	r2, #2
 800bf84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf86:	e100      	b.n	800c18a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf90:	f107 0208 	add.w	r2, r7, #8
 800bf94:	4610      	mov	r0, r2
 800bf96:	4798      	blx	r3
 800bf98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	701a      	strb	r2, [r3, #0]
      break;
 800bfa2:	e0f2      	b.n	800c18a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	885b      	ldrh	r3, [r3, #2]
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b05      	cmp	r3, #5
 800bfac:	f200 80ac 	bhi.w	800c108 <USBD_GetDescriptor+0x204>
 800bfb0:	a201      	add	r2, pc, #4	; (adr r2, 800bfb8 <USBD_GetDescriptor+0xb4>)
 800bfb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb6:	bf00      	nop
 800bfb8:	0800bfd1 	.word	0x0800bfd1
 800bfbc:	0800c005 	.word	0x0800c005
 800bfc0:	0800c039 	.word	0x0800c039
 800bfc4:	0800c06d 	.word	0x0800c06d
 800bfc8:	0800c0a1 	.word	0x0800c0a1
 800bfcc:	0800c0d5 	.word	0x0800c0d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00b      	beq.n	800bff4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	7c12      	ldrb	r2, [r2, #16]
 800bfe8:	f107 0108 	add.w	r1, r7, #8
 800bfec:	4610      	mov	r0, r2
 800bfee:	4798      	blx	r3
 800bff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bff2:	e091      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fab2 	bl	800c560 <USBD_CtlError>
            err++;
 800bffc:	7afb      	ldrb	r3, [r7, #11]
 800bffe:	3301      	adds	r3, #1
 800c000:	72fb      	strb	r3, [r7, #11]
          break;
 800c002:	e089      	b.n	800c118 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00b      	beq.n	800c028 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	7c12      	ldrb	r2, [r2, #16]
 800c01c:	f107 0108 	add.w	r1, r7, #8
 800c020:	4610      	mov	r0, r2
 800c022:	4798      	blx	r3
 800c024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c026:	e077      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c028:	6839      	ldr	r1, [r7, #0]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fa98 	bl	800c560 <USBD_CtlError>
            err++;
 800c030:	7afb      	ldrb	r3, [r7, #11]
 800c032:	3301      	adds	r3, #1
 800c034:	72fb      	strb	r3, [r7, #11]
          break;
 800c036:	e06f      	b.n	800c118 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00b      	beq.n	800c05c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	7c12      	ldrb	r2, [r2, #16]
 800c050:	f107 0108 	add.w	r1, r7, #8
 800c054:	4610      	mov	r0, r2
 800c056:	4798      	blx	r3
 800c058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c05a:	e05d      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fa7e 	bl	800c560 <USBD_CtlError>
            err++;
 800c064:	7afb      	ldrb	r3, [r7, #11]
 800c066:	3301      	adds	r3, #1
 800c068:	72fb      	strb	r3, [r7, #11]
          break;
 800c06a:	e055      	b.n	800c118 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c072:	691b      	ldr	r3, [r3, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00b      	beq.n	800c090 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	7c12      	ldrb	r2, [r2, #16]
 800c084:	f107 0108 	add.w	r1, r7, #8
 800c088:	4610      	mov	r0, r2
 800c08a:	4798      	blx	r3
 800c08c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c08e:	e043      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fa64 	bl	800c560 <USBD_CtlError>
            err++;
 800c098:	7afb      	ldrb	r3, [r7, #11]
 800c09a:	3301      	adds	r3, #1
 800c09c:	72fb      	strb	r3, [r7, #11]
          break;
 800c09e:	e03b      	b.n	800c118 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00b      	beq.n	800c0c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0b2:	695b      	ldr	r3, [r3, #20]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	7c12      	ldrb	r2, [r2, #16]
 800c0b8:	f107 0108 	add.w	r1, r7, #8
 800c0bc:	4610      	mov	r0, r2
 800c0be:	4798      	blx	r3
 800c0c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0c2:	e029      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fa4a 	bl	800c560 <USBD_CtlError>
            err++;
 800c0cc:	7afb      	ldrb	r3, [r7, #11]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0d2:	e021      	b.n	800c118 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00b      	beq.n	800c0f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	7c12      	ldrb	r2, [r2, #16]
 800c0ec:	f107 0108 	add.w	r1, r7, #8
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	4798      	blx	r3
 800c0f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0f6:	e00f      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0f8:	6839      	ldr	r1, [r7, #0]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 fa30 	bl	800c560 <USBD_CtlError>
            err++;
 800c100:	7afb      	ldrb	r3, [r7, #11]
 800c102:	3301      	adds	r3, #1
 800c104:	72fb      	strb	r3, [r7, #11]
          break;
 800c106:	e007      	b.n	800c118 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fa28 	bl	800c560 <USBD_CtlError>
          err++;
 800c110:	7afb      	ldrb	r3, [r7, #11]
 800c112:	3301      	adds	r3, #1
 800c114:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c116:	bf00      	nop
      }
      break;
 800c118:	e037      	b.n	800c18a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	7c1b      	ldrb	r3, [r3, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d109      	bne.n	800c136 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12a:	f107 0208 	add.w	r2, r7, #8
 800c12e:	4610      	mov	r0, r2
 800c130:	4798      	blx	r3
 800c132:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c134:	e029      	b.n	800c18a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fa11 	bl	800c560 <USBD_CtlError>
        err++;
 800c13e:	7afb      	ldrb	r3, [r7, #11]
 800c140:	3301      	adds	r3, #1
 800c142:	72fb      	strb	r3, [r7, #11]
      break;
 800c144:	e021      	b.n	800c18a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	7c1b      	ldrb	r3, [r3, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10d      	bne.n	800c16a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c156:	f107 0208 	add.w	r2, r7, #8
 800c15a:	4610      	mov	r0, r2
 800c15c:	4798      	blx	r3
 800c15e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	3301      	adds	r3, #1
 800c164:	2207      	movs	r2, #7
 800c166:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c168:	e00f      	b.n	800c18a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f9f7 	bl	800c560 <USBD_CtlError>
        err++;
 800c172:	7afb      	ldrb	r3, [r7, #11]
 800c174:	3301      	adds	r3, #1
 800c176:	72fb      	strb	r3, [r7, #11]
      break;
 800c178:	e007      	b.n	800c18a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f9ef 	bl	800c560 <USBD_CtlError>
      err++;
 800c182:	7afb      	ldrb	r3, [r7, #11]
 800c184:	3301      	adds	r3, #1
 800c186:	72fb      	strb	r3, [r7, #11]
      break;
 800c188:	bf00      	nop
  }

  if (err != 0U)
 800c18a:	7afb      	ldrb	r3, [r7, #11]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d11e      	bne.n	800c1ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	88db      	ldrh	r3, [r3, #6]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d016      	beq.n	800c1c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c198:	893b      	ldrh	r3, [r7, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00e      	beq.n	800c1bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	88da      	ldrh	r2, [r3, #6]
 800c1a2:	893b      	ldrh	r3, [r7, #8]
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	bf28      	it	cs
 800c1a8:	4613      	movcs	r3, r2
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1ae:	893b      	ldrh	r3, [r7, #8]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	68f9      	ldr	r1, [r7, #12]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fa44 	bl	800c642 <USBD_CtlSendData>
 800c1ba:	e009      	b.n	800c1d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c1bc:	6839      	ldr	r1, [r7, #0]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f9ce 	bl	800c560 <USBD_CtlError>
 800c1c4:	e004      	b.n	800c1d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fa95 	bl	800c6f6 <USBD_CtlSendStatus>
 800c1cc:	e000      	b.n	800c1d0 <USBD_GetDescriptor+0x2cc>
    return;
 800c1ce:	bf00      	nop
  }
}
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop

0800c1d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	889b      	ldrh	r3, [r3, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d131      	bne.n	800c24e <USBD_SetAddress+0x76>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	88db      	ldrh	r3, [r3, #6]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d12d      	bne.n	800c24e <USBD_SetAddress+0x76>
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	885b      	ldrh	r3, [r3, #2]
 800c1f6:	2b7f      	cmp	r3, #127	; 0x7f
 800c1f8:	d829      	bhi.n	800c24e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	885b      	ldrh	r3, [r3, #2]
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c204:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	2b03      	cmp	r3, #3
 800c210:	d104      	bne.n	800c21c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f9a3 	bl	800c560 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c21a:	e01d      	b.n	800c258 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	7bfa      	ldrb	r2, [r7, #15]
 800c220:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f004 f9e3 	bl	80105f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fa61 	bl	800c6f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c234:	7bfb      	ldrb	r3, [r7, #15]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d004      	beq.n	800c244 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2202      	movs	r2, #2
 800c23e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c242:	e009      	b.n	800c258 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c24c:	e004      	b.n	800c258 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f985 	bl	800c560 <USBD_CtlError>
  }
}
 800c256:	bf00      	nop
 800c258:	bf00      	nop
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	885b      	ldrh	r3, [r3, #2]
 800c272:	b2da      	uxtb	r2, r3
 800c274:	4b4c      	ldr	r3, [pc, #304]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c276:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c278:	4b4b      	ldr	r3, [pc, #300]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d905      	bls.n	800c28c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f96c 	bl	800c560 <USBD_CtlError>
    return USBD_FAIL;
 800c288:	2303      	movs	r3, #3
 800c28a:	e088      	b.n	800c39e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c292:	b2db      	uxtb	r3, r3
 800c294:	2b02      	cmp	r3, #2
 800c296:	d002      	beq.n	800c29e <USBD_SetConfig+0x3e>
 800c298:	2b03      	cmp	r3, #3
 800c29a:	d025      	beq.n	800c2e8 <USBD_SetConfig+0x88>
 800c29c:	e071      	b.n	800c382 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c29e:	4b42      	ldr	r3, [pc, #264]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d01c      	beq.n	800c2e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c2a6:	4b40      	ldr	r3, [pc, #256]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2b0:	4b3d      	ldr	r3, [pc, #244]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff f948 	bl	800b54c <USBD_SetClassConfig>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d004      	beq.n	800c2d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 f949 	bl	800c560 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c2ce:	e065      	b.n	800c39c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fa10 	bl	800c6f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2203      	movs	r2, #3
 800c2da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c2de:	e05d      	b.n	800c39c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fa08 	bl	800c6f6 <USBD_CtlSendStatus>
      break;
 800c2e6:	e059      	b.n	800c39c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c2e8:	4b2f      	ldr	r3, [pc, #188]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d112      	bne.n	800c316 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c2f8:	4b2b      	ldr	r3, [pc, #172]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c302:	4b29      	ldr	r3, [pc, #164]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	4619      	mov	r1, r3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f7ff f93b 	bl	800b584 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f9f1 	bl	800c6f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c314:	e042      	b.n	800c39c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c316:	4b24      	ldr	r3, [pc, #144]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	429a      	cmp	r2, r3
 800c322:	d02a      	beq.n	800c37a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	4619      	mov	r1, r3
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7ff f929 	bl	800b584 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c332:	4b1d      	ldr	r3, [pc, #116]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c33c:	4b1a      	ldr	r3, [pc, #104]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	4619      	mov	r1, r3
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff f902 	bl	800b54c <USBD_SetClassConfig>
 800c348:	4603      	mov	r3, r0
 800c34a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00f      	beq.n	800c372 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f903 	bl	800c560 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	4619      	mov	r1, r3
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7ff f90e 	bl	800b584 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2202      	movs	r2, #2
 800c36c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c370:	e014      	b.n	800c39c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f9bf 	bl	800c6f6 <USBD_CtlSendStatus>
      break;
 800c378:	e010      	b.n	800c39c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f9bb 	bl	800c6f6 <USBD_CtlSendStatus>
      break;
 800c380:	e00c      	b.n	800c39c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f8eb 	bl	800c560 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c38a:	4b07      	ldr	r3, [pc, #28]	; (800c3a8 <USBD_SetConfig+0x148>)
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff f8f7 	bl	800b584 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c396:	2303      	movs	r3, #3
 800c398:	73fb      	strb	r3, [r7, #15]
      break;
 800c39a:	bf00      	nop
  }

  return ret;
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	20000780 	.word	0x20000780

0800c3ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	88db      	ldrh	r3, [r3, #6]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d004      	beq.n	800c3c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 f8cd 	bl	800c560 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c3c6:	e023      	b.n	800c410 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	dc02      	bgt.n	800c3da <USBD_GetConfig+0x2e>
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	dc03      	bgt.n	800c3e0 <USBD_GetConfig+0x34>
 800c3d8:	e015      	b.n	800c406 <USBD_GetConfig+0x5a>
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	d00b      	beq.n	800c3f6 <USBD_GetConfig+0x4a>
 800c3de:	e012      	b.n	800c406 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	3308      	adds	r3, #8
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 f927 	bl	800c642 <USBD_CtlSendData>
        break;
 800c3f4:	e00c      	b.n	800c410 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f91f 	bl	800c642 <USBD_CtlSendData>
        break;
 800c404:	e004      	b.n	800c410 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 f8a9 	bl	800c560 <USBD_CtlError>
        break;
 800c40e:	bf00      	nop
}
 800c410:	bf00      	nop
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	3b01      	subs	r3, #1
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d81e      	bhi.n	800c46e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	88db      	ldrh	r3, [r3, #6]
 800c434:	2b02      	cmp	r3, #2
 800c436:	d004      	beq.n	800c442 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f890 	bl	800c560 <USBD_CtlError>
        break;
 800c440:	e01a      	b.n	800c478 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d005      	beq.n	800c45e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	f043 0202 	orr.w	r2, r3, #2
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	330c      	adds	r3, #12
 800c462:	2202      	movs	r2, #2
 800c464:	4619      	mov	r1, r3
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f8eb 	bl	800c642 <USBD_CtlSendData>
      break;
 800c46c:	e004      	b.n	800c478 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 f875 	bl	800c560 <USBD_CtlError>
      break;
 800c476:	bf00      	nop
  }
}
 800c478:	bf00      	nop
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	885b      	ldrh	r3, [r3, #2]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d106      	bne.n	800c4a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2201      	movs	r2, #1
 800c496:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f92b 	bl	800c6f6 <USBD_CtlSendStatus>
  }
}
 800c4a0:	bf00      	nop
 800c4a2:	3708      	adds	r7, #8
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d80b      	bhi.n	800c4d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	885b      	ldrh	r3, [r3, #2]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d10c      	bne.n	800c4e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 f910 	bl	800c6f6 <USBD_CtlSendStatus>
      }
      break;
 800c4d6:	e004      	b.n	800c4e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f840 	bl	800c560 <USBD_CtlError>
      break;
 800c4e0:	e000      	b.n	800c4e4 <USBD_ClrFeature+0x3c>
      break;
 800c4e2:	bf00      	nop
  }
}
 800c4e4:	bf00      	nop
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	781a      	ldrb	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3301      	adds	r3, #1
 800c506:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	781a      	ldrb	r2, [r3, #0]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	3301      	adds	r3, #1
 800c514:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f7ff fabb 	bl	800ba92 <SWAPBYTE>
 800c51c:	4603      	mov	r3, r0
 800c51e:	461a      	mov	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	3301      	adds	r3, #1
 800c528:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	3301      	adds	r3, #1
 800c52e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	f7ff faae 	bl	800ba92 <SWAPBYTE>
 800c536:	4603      	mov	r3, r0
 800c538:	461a      	mov	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	3301      	adds	r3, #1
 800c542:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	3301      	adds	r3, #1
 800c548:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f7ff faa1 	bl	800ba92 <SWAPBYTE>
 800c550:	4603      	mov	r3, r0
 800c552:	461a      	mov	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	80da      	strh	r2, [r3, #6]
}
 800c558:	bf00      	nop
 800c55a:	3710      	adds	r7, #16
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c56a:	2180      	movs	r1, #128	; 0x80
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f003 ffd7 	bl	8010520 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c572:	2100      	movs	r1, #0
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f003 ffd3 	bl	8010520 <USBD_LL_StallEP>
}
 800c57a:	bf00      	nop
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b086      	sub	sp, #24
 800c586:	af00      	add	r7, sp, #0
 800c588:	60f8      	str	r0, [r7, #12]
 800c58a:	60b9      	str	r1, [r7, #8]
 800c58c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c58e:	2300      	movs	r3, #0
 800c590:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d036      	beq.n	800c606 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c59c:	6938      	ldr	r0, [r7, #16]
 800c59e:	f000 f836 	bl	800c60e <USBD_GetLen>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c5b0:	7dfb      	ldrb	r3, [r7, #23]
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	7812      	ldrb	r2, [r2, #0]
 800c5ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c5c2:	7dfb      	ldrb	r3, [r7, #23]
 800c5c4:	68ba      	ldr	r2, [r7, #8]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	2203      	movs	r2, #3
 800c5ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800c5cc:	7dfb      	ldrb	r3, [r7, #23]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c5d2:	e013      	b.n	800c5fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c5d4:	7dfb      	ldrb	r3, [r7, #23]
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	4413      	add	r3, r2
 800c5da:	693a      	ldr	r2, [r7, #16]
 800c5dc:	7812      	ldrb	r2, [r2, #0]
 800c5de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	613b      	str	r3, [r7, #16]
    idx++;
 800c5e6:	7dfb      	ldrb	r3, [r7, #23]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c5ec:	7dfb      	ldrb	r3, [r7, #23]
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800c5f6:	7dfb      	ldrb	r3, [r7, #23]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1e7      	bne.n	800c5d4 <USBD_GetString+0x52>
 800c604:	e000      	b.n	800c608 <USBD_GetString+0x86>
    return;
 800c606:	bf00      	nop
  }
}
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c60e:	b480      	push	{r7}
 800c610:	b085      	sub	sp, #20
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c61e:	e005      	b.n	800c62c <USBD_GetLen+0x1e>
  {
    len++;
 800c620:	7bfb      	ldrb	r3, [r7, #15]
 800c622:	3301      	adds	r3, #1
 800c624:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	3301      	adds	r3, #1
 800c62a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1f5      	bne.n	800c620 <USBD_GetLen+0x12>
  }

  return len;
 800c634:	7bfb      	ldrb	r3, [r7, #15]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3714      	adds	r7, #20
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	60f8      	str	r0, [r7, #12]
 800c64a:	60b9      	str	r1, [r7, #8]
 800c64c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2202      	movs	r2, #2
 800c652:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	2100      	movs	r1, #0
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f003 ffe2 	bl	8010632 <USBD_LL_Transmit>

  return USBD_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	2100      	movs	r1, #0
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f003 ffd1 	bl	8010632 <USBD_LL_Transmit>

  return USBD_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b084      	sub	sp, #16
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	60f8      	str	r0, [r7, #12]
 800c6a2:	60b9      	str	r1, [r7, #8]
 800c6a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2203      	movs	r2, #3
 800c6aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f003 ffd5 	bl	8010674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	68ba      	ldr	r2, [r7, #8]
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f003 ffc4 	bl	8010674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b082      	sub	sp, #8
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2204      	movs	r2, #4
 800c702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c706:	2300      	movs	r3, #0
 800c708:	2200      	movs	r2, #0
 800c70a:	2100      	movs	r1, #0
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f003 ff90 	bl	8010632 <USBD_LL_Transmit>

  return USBD_OK;
 800c712:	2300      	movs	r3, #0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2205      	movs	r2, #5
 800c728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c72c:	2300      	movs	r3, #0
 800c72e:	2200      	movs	r2, #0
 800c730:	2100      	movs	r1, #0
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f003 ff9e 	bl	8010674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
	...

0800c744 <__NVIC_SetPriority>:
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	4603      	mov	r3, r0
 800c74c:	6039      	str	r1, [r7, #0]
 800c74e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c754:	2b00      	cmp	r3, #0
 800c756:	db0a      	blt.n	800c76e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	b2da      	uxtb	r2, r3
 800c75c:	490c      	ldr	r1, [pc, #48]	; (800c790 <__NVIC_SetPriority+0x4c>)
 800c75e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c762:	0112      	lsls	r2, r2, #4
 800c764:	b2d2      	uxtb	r2, r2
 800c766:	440b      	add	r3, r1
 800c768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c76c:	e00a      	b.n	800c784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	b2da      	uxtb	r2, r3
 800c772:	4908      	ldr	r1, [pc, #32]	; (800c794 <__NVIC_SetPriority+0x50>)
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	f003 030f 	and.w	r3, r3, #15
 800c77a:	3b04      	subs	r3, #4
 800c77c:	0112      	lsls	r2, r2, #4
 800c77e:	b2d2      	uxtb	r2, r2
 800c780:	440b      	add	r3, r1
 800c782:	761a      	strb	r2, [r3, #24]
}
 800c784:	bf00      	nop
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	e000e100 	.word	0xe000e100
 800c794:	e000ed00 	.word	0xe000ed00

0800c798 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c798:	b580      	push	{r7, lr}
 800c79a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c79c:	4b05      	ldr	r3, [pc, #20]	; (800c7b4 <SysTick_Handler+0x1c>)
 800c79e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c7a0:	f002 f902 	bl	800e9a8 <xTaskGetSchedulerState>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d001      	beq.n	800c7ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c7aa:	f003 f82d 	bl	800f808 <xPortSysTickHandler>
  }
}
 800c7ae:	bf00      	nop
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	e000e010 	.word	0xe000e010

0800c7b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c7bc:	2100      	movs	r1, #0
 800c7be:	f06f 0004 	mvn.w	r0, #4
 800c7c2:	f7ff ffbf 	bl	800c744 <__NVIC_SetPriority>
#endif
}
 800c7c6:	bf00      	nop
 800c7c8:	bd80      	pop	{r7, pc}
	...

0800c7cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7d2:	f3ef 8305 	mrs	r3, IPSR
 800c7d6:	603b      	str	r3, [r7, #0]
  return(result);
 800c7d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d003      	beq.n	800c7e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c7de:	f06f 0305 	mvn.w	r3, #5
 800c7e2:	607b      	str	r3, [r7, #4]
 800c7e4:	e00c      	b.n	800c800 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c7e6:	4b0a      	ldr	r3, [pc, #40]	; (800c810 <osKernelInitialize+0x44>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d105      	bne.n	800c7fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c7ee:	4b08      	ldr	r3, [pc, #32]	; (800c810 <osKernelInitialize+0x44>)
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	607b      	str	r3, [r7, #4]
 800c7f8:	e002      	b.n	800c800 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c7fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c800:	687b      	ldr	r3, [r7, #4]
}
 800c802:	4618      	mov	r0, r3
 800c804:	370c      	adds	r7, #12
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	20000784 	.word	0x20000784

0800c814 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c81a:	f3ef 8305 	mrs	r3, IPSR
 800c81e:	603b      	str	r3, [r7, #0]
  return(result);
 800c820:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c822:	2b00      	cmp	r3, #0
 800c824:	d003      	beq.n	800c82e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c826:	f06f 0305 	mvn.w	r3, #5
 800c82a:	607b      	str	r3, [r7, #4]
 800c82c:	e010      	b.n	800c850 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c82e:	4b0b      	ldr	r3, [pc, #44]	; (800c85c <osKernelStart+0x48>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d109      	bne.n	800c84a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c836:	f7ff ffbf 	bl	800c7b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c83a:	4b08      	ldr	r3, [pc, #32]	; (800c85c <osKernelStart+0x48>)
 800c83c:	2202      	movs	r2, #2
 800c83e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c840:	f001 fad0 	bl	800dde4 <vTaskStartScheduler>
      stat = osOK;
 800c844:	2300      	movs	r3, #0
 800c846:	607b      	str	r3, [r7, #4]
 800c848:	e002      	b.n	800c850 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c84a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c84e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c850:	687b      	ldr	r3, [r7, #4]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20000784 	.word	0x20000784

0800c860 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c860:	b580      	push	{r7, lr}
 800c862:	b08e      	sub	sp, #56	; 0x38
 800c864:	af04      	add	r7, sp, #16
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c86c:	2300      	movs	r3, #0
 800c86e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c870:	f3ef 8305 	mrs	r3, IPSR
 800c874:	617b      	str	r3, [r7, #20]
  return(result);
 800c876:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d17e      	bne.n	800c97a <osThreadNew+0x11a>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d07b      	beq.n	800c97a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c882:	2380      	movs	r3, #128	; 0x80
 800c884:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c886:	2318      	movs	r3, #24
 800c888:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c88a:	2300      	movs	r3, #0
 800c88c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c88e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c892:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d045      	beq.n	800c926 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d002      	beq.n	800c8a8 <osThreadNew+0x48>
        name = attr->name;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	699b      	ldr	r3, [r3, #24]
 800c8b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d008      	beq.n	800c8ce <osThreadNew+0x6e>
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	2b38      	cmp	r3, #56	; 0x38
 800c8c0:	d805      	bhi.n	800c8ce <osThreadNew+0x6e>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	f003 0301 	and.w	r3, r3, #1
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <osThreadNew+0x72>
        return (NULL);
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	e054      	b.n	800c97c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	695b      	ldr	r3, [r3, #20]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d003      	beq.n	800c8e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	695b      	ldr	r3, [r3, #20]
 800c8de:	089b      	lsrs	r3, r3, #2
 800c8e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00e      	beq.n	800c908 <osThreadNew+0xa8>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	2bbf      	cmp	r3, #191	; 0xbf
 800c8f0:	d90a      	bls.n	800c908 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d006      	beq.n	800c908 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	695b      	ldr	r3, [r3, #20]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d002      	beq.n	800c908 <osThreadNew+0xa8>
        mem = 1;
 800c902:	2301      	movs	r3, #1
 800c904:	61bb      	str	r3, [r7, #24]
 800c906:	e010      	b.n	800c92a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10c      	bne.n	800c92a <osThreadNew+0xca>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d108      	bne.n	800c92a <osThreadNew+0xca>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d104      	bne.n	800c92a <osThreadNew+0xca>
          mem = 0;
 800c920:	2300      	movs	r3, #0
 800c922:	61bb      	str	r3, [r7, #24]
 800c924:	e001      	b.n	800c92a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c926:	2300      	movs	r3, #0
 800c928:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d110      	bne.n	800c952 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c938:	9202      	str	r2, [sp, #8]
 800c93a:	9301      	str	r3, [sp, #4]
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	6a3a      	ldr	r2, [r7, #32]
 800c944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f000 fff6 	bl	800d938 <xTaskCreateStatic>
 800c94c:	4603      	mov	r3, r0
 800c94e:	613b      	str	r3, [r7, #16]
 800c950:	e013      	b.n	800c97a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c952:	69bb      	ldr	r3, [r7, #24]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d110      	bne.n	800c97a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c958:	6a3b      	ldr	r3, [r7, #32]
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	f107 0310 	add.w	r3, r7, #16
 800c960:	9301      	str	r3, [sp, #4]
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f001 f841 	bl	800d9f2 <xTaskCreate>
 800c970:	4603      	mov	r3, r0
 800c972:	2b01      	cmp	r3, #1
 800c974:	d001      	beq.n	800c97a <osThreadNew+0x11a>
            hTask = NULL;
 800c976:	2300      	movs	r3, #0
 800c978:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c97a:	693b      	ldr	r3, [r7, #16]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3728      	adds	r7, #40	; 0x28
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c98c:	f3ef 8305 	mrs	r3, IPSR
 800c990:	60bb      	str	r3, [r7, #8]
  return(result);
 800c992:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c994:	2b00      	cmp	r3, #0
 800c996:	d003      	beq.n	800c9a0 <osDelay+0x1c>
    stat = osErrorISR;
 800c998:	f06f 0305 	mvn.w	r3, #5
 800c99c:	60fb      	str	r3, [r7, #12]
 800c99e:	e007      	b.n	800c9b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d002      	beq.n	800c9b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f001 f980 	bl	800dcb0 <vTaskDelay>
    }
  }

  return (stat);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b08a      	sub	sp, #40	; 0x28
 800c9be:	af02      	add	r7, sp, #8
 800c9c0:	60f8      	str	r0, [r7, #12]
 800c9c2:	60b9      	str	r1, [r7, #8]
 800c9c4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9ca:	f3ef 8305 	mrs	r3, IPSR
 800c9ce:	613b      	str	r3, [r7, #16]
  return(result);
 800c9d0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d15f      	bne.n	800ca96 <osMessageQueueNew+0xdc>
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d05c      	beq.n	800ca96 <osMessageQueueNew+0xdc>
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d059      	beq.n	800ca96 <osMessageQueueNew+0xdc>
    mem = -1;
 800c9e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d029      	beq.n	800ca42 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d012      	beq.n	800ca1c <osMessageQueueNew+0x62>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	2b4f      	cmp	r3, #79	; 0x4f
 800c9fc:	d90e      	bls.n	800ca1c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00a      	beq.n	800ca1c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	695a      	ldr	r2, [r3, #20]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	68b9      	ldr	r1, [r7, #8]
 800ca0e:	fb01 f303 	mul.w	r3, r1, r3
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d302      	bcc.n	800ca1c <osMessageQueueNew+0x62>
        mem = 1;
 800ca16:	2301      	movs	r3, #1
 800ca18:	61bb      	str	r3, [r7, #24]
 800ca1a:	e014      	b.n	800ca46 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d110      	bne.n	800ca46 <osMessageQueueNew+0x8c>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10c      	bne.n	800ca46 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d108      	bne.n	800ca46 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	695b      	ldr	r3, [r3, #20]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d104      	bne.n	800ca46 <osMessageQueueNew+0x8c>
          mem = 0;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	61bb      	str	r3, [r7, #24]
 800ca40:	e001      	b.n	800ca46 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d10b      	bne.n	800ca64 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	691a      	ldr	r2, [r3, #16]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	2100      	movs	r1, #0
 800ca56:	9100      	str	r1, [sp, #0]
 800ca58:	68b9      	ldr	r1, [r7, #8]
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f000 fa2e 	bl	800cebc <xQueueGenericCreateStatic>
 800ca60:	61f8      	str	r0, [r7, #28]
 800ca62:	e008      	b.n	800ca76 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d105      	bne.n	800ca76 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	68b9      	ldr	r1, [r7, #8]
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f000 fa9c 	bl	800cfac <xQueueGenericCreate>
 800ca74:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00c      	beq.n	800ca96 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d003      	beq.n	800ca8a <osMessageQueueNew+0xd0>
        name = attr->name;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	617b      	str	r3, [r7, #20]
 800ca88:	e001      	b.n	800ca8e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ca8e:	6979      	ldr	r1, [r7, #20]
 800ca90:	69f8      	ldr	r0, [r7, #28]
 800ca92:	f000 fef3 	bl	800d87c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ca96:	69fb      	ldr	r3, [r7, #28]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3720      	adds	r7, #32
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b088      	sub	sp, #32
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	603b      	str	r3, [r7, #0]
 800caac:	4613      	mov	r3, r2
 800caae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cab4:	2300      	movs	r3, #0
 800cab6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cab8:	f3ef 8305 	mrs	r3, IPSR
 800cabc:	617b      	str	r3, [r7, #20]
  return(result);
 800cabe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d028      	beq.n	800cb16 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d005      	beq.n	800cad6 <osMessageQueuePut+0x36>
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <osMessageQueuePut+0x36>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d003      	beq.n	800cade <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cad6:	f06f 0303 	mvn.w	r3, #3
 800cada:	61fb      	str	r3, [r7, #28]
 800cadc:	e038      	b.n	800cb50 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cade:	2300      	movs	r3, #0
 800cae0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cae2:	f107 0210 	add.w	r2, r7, #16
 800cae6:	2300      	movs	r3, #0
 800cae8:	68b9      	ldr	r1, [r7, #8]
 800caea:	69b8      	ldr	r0, [r7, #24]
 800caec:	f000 fbba 	bl	800d264 <xQueueGenericSendFromISR>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d003      	beq.n	800cafe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800caf6:	f06f 0302 	mvn.w	r3, #2
 800cafa:	61fb      	str	r3, [r7, #28]
 800cafc:	e028      	b.n	800cb50 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d025      	beq.n	800cb50 <osMessageQueuePut+0xb0>
 800cb04:	4b15      	ldr	r3, [pc, #84]	; (800cb5c <osMessageQueuePut+0xbc>)
 800cb06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb0a:	601a      	str	r2, [r3, #0]
 800cb0c:	f3bf 8f4f 	dsb	sy
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	e01c      	b.n	800cb50 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d002      	beq.n	800cb22 <osMessageQueuePut+0x82>
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d103      	bne.n	800cb2a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cb22:	f06f 0303 	mvn.w	r3, #3
 800cb26:	61fb      	str	r3, [r7, #28]
 800cb28:	e012      	b.n	800cb50 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	683a      	ldr	r2, [r7, #0]
 800cb2e:	68b9      	ldr	r1, [r7, #8]
 800cb30:	69b8      	ldr	r0, [r7, #24]
 800cb32:	f000 fa99 	bl	800d068 <xQueueGenericSend>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d009      	beq.n	800cb50 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d003      	beq.n	800cb4a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cb42:	f06f 0301 	mvn.w	r3, #1
 800cb46:	61fb      	str	r3, [r7, #28]
 800cb48:	e002      	b.n	800cb50 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cb4a:	f06f 0302 	mvn.w	r3, #2
 800cb4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cb50:	69fb      	ldr	r3, [r7, #28]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3720      	adds	r7, #32
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	e000ed04 	.word	0xe000ed04

0800cb60 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b088      	sub	sp, #32
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]
 800cb6c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb76:	f3ef 8305 	mrs	r3, IPSR
 800cb7a:	617b      	str	r3, [r7, #20]
  return(result);
 800cb7c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d028      	beq.n	800cbd4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d005      	beq.n	800cb94 <osMessageQueueGet+0x34>
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d002      	beq.n	800cb94 <osMessageQueueGet+0x34>
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d003      	beq.n	800cb9c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cb94:	f06f 0303 	mvn.w	r3, #3
 800cb98:	61fb      	str	r3, [r7, #28]
 800cb9a:	e037      	b.n	800cc0c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cba0:	f107 0310 	add.w	r3, r7, #16
 800cba4:	461a      	mov	r2, r3
 800cba6:	68b9      	ldr	r1, [r7, #8]
 800cba8:	69b8      	ldr	r0, [r7, #24]
 800cbaa:	f000 fcd7 	bl	800d55c <xQueueReceiveFromISR>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d003      	beq.n	800cbbc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cbb4:	f06f 0302 	mvn.w	r3, #2
 800cbb8:	61fb      	str	r3, [r7, #28]
 800cbba:	e027      	b.n	800cc0c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d024      	beq.n	800cc0c <osMessageQueueGet+0xac>
 800cbc2:	4b15      	ldr	r3, [pc, #84]	; (800cc18 <osMessageQueueGet+0xb8>)
 800cbc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbc8:	601a      	str	r2, [r3, #0]
 800cbca:	f3bf 8f4f 	dsb	sy
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	e01b      	b.n	800cc0c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d002      	beq.n	800cbe0 <osMessageQueueGet+0x80>
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d103      	bne.n	800cbe8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cbe0:	f06f 0303 	mvn.w	r3, #3
 800cbe4:	61fb      	str	r3, [r7, #28]
 800cbe6:	e011      	b.n	800cc0c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cbe8:	683a      	ldr	r2, [r7, #0]
 800cbea:	68b9      	ldr	r1, [r7, #8]
 800cbec:	69b8      	ldr	r0, [r7, #24]
 800cbee:	f000 fbd5 	bl	800d39c <xQueueReceive>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d009      	beq.n	800cc0c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d003      	beq.n	800cc06 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cbfe:	f06f 0301 	mvn.w	r3, #1
 800cc02:	61fb      	str	r3, [r7, #28]
 800cc04:	e002      	b.n	800cc0c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cc06:	f06f 0302 	mvn.w	r3, #2
 800cc0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cc0c:	69fb      	ldr	r3, [r7, #28]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3720      	adds	r7, #32
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	e000ed04 	.word	0xe000ed04

0800cc1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	4a07      	ldr	r2, [pc, #28]	; (800cc48 <vApplicationGetIdleTaskMemory+0x2c>)
 800cc2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	4a06      	ldr	r2, [pc, #24]	; (800cc4c <vApplicationGetIdleTaskMemory+0x30>)
 800cc32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2280      	movs	r2, #128	; 0x80
 800cc38:	601a      	str	r2, [r3, #0]
}
 800cc3a:	bf00      	nop
 800cc3c:	3714      	adds	r7, #20
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr
 800cc46:	bf00      	nop
 800cc48:	20000788 	.word	0x20000788
 800cc4c:	20000848 	.word	0x20000848

0800cc50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cc50:	b480      	push	{r7}
 800cc52:	b085      	sub	sp, #20
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	4a07      	ldr	r2, [pc, #28]	; (800cc7c <vApplicationGetTimerTaskMemory+0x2c>)
 800cc60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	4a06      	ldr	r2, [pc, #24]	; (800cc80 <vApplicationGetTimerTaskMemory+0x30>)
 800cc66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc6e:	601a      	str	r2, [r3, #0]
}
 800cc70:	bf00      	nop
 800cc72:	3714      	adds	r7, #20
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr
 800cc7c:	20000a48 	.word	0x20000a48
 800cc80:	20000b08 	.word	0x20000b08

0800cc84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f103 0208 	add.w	r2, r3, #8
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f103 0208 	add.w	r2, r3, #8
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f103 0208 	add.w	r2, r3, #8
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ccd2:	bf00      	nop
 800ccd4:	370c      	adds	r7, #12
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ccde:	b480      	push	{r7}
 800cce0:	b085      	sub	sp, #20
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	689a      	ldr	r2, [r3, #8]
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	683a      	ldr	r2, [r7, #0]
 800cd08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	1c5a      	adds	r2, r3, #1
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	601a      	str	r2, [r3, #0]
}
 800cd1a:	bf00      	nop
 800cd1c:	3714      	adds	r7, #20
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr

0800cd26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd26:	b480      	push	{r7}
 800cd28:	b085      	sub	sp, #20
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd3c:	d103      	bne.n	800cd46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	e00c      	b.n	800cd60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	3308      	adds	r3, #8
 800cd4a:	60fb      	str	r3, [r7, #12]
 800cd4c:	e002      	b.n	800cd54 <vListInsert+0x2e>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	60fb      	str	r3, [r7, #12]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d2f6      	bcs.n	800cd4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	685a      	ldr	r2, [r3, #4]
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	601a      	str	r2, [r3, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	691b      	ldr	r3, [r3, #16]
 800cda4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	6892      	ldr	r2, [r2, #8]
 800cdae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	6852      	ldr	r2, [r2, #4]
 800cdb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d103      	bne.n	800cdcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	689a      	ldr	r2, [r3, #8]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	1e5a      	subs	r2, r3, #1
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3714      	adds	r7, #20
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d10a      	bne.n	800ce16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ce00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ce12:	bf00      	nop
 800ce14:	e7fe      	b.n	800ce14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce16:	f002 fc65 	bl	800f6e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce22:	68f9      	ldr	r1, [r7, #12]
 800ce24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce26:	fb01 f303 	mul.w	r3, r1, r3
 800ce2a:	441a      	add	r2, r3
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce46:	3b01      	subs	r3, #1
 800ce48:	68f9      	ldr	r1, [r7, #12]
 800ce4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce4c:	fb01 f303 	mul.w	r3, r1, r3
 800ce50:	441a      	add	r2, r3
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	22ff      	movs	r2, #255	; 0xff
 800ce5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	22ff      	movs	r2, #255	; 0xff
 800ce62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d114      	bne.n	800ce96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	691b      	ldr	r3, [r3, #16]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d01a      	beq.n	800ceaa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	3310      	adds	r3, #16
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f001 faff 	bl	800e47c <xTaskRemoveFromEventList>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d012      	beq.n	800ceaa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce84:	4b0c      	ldr	r3, [pc, #48]	; (800ceb8 <xQueueGenericReset+0xcc>)
 800ce86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce8a:	601a      	str	r2, [r3, #0]
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	e009      	b.n	800ceaa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	3310      	adds	r3, #16
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7ff fef2 	bl	800cc84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	3324      	adds	r3, #36	; 0x24
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7ff feed 	bl	800cc84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ceaa:	f002 fc4b 	bl	800f744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ceae:	2301      	movs	r3, #1
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	e000ed04 	.word	0xe000ed04

0800cebc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b08e      	sub	sp, #56	; 0x38
 800cec0:	af02      	add	r7, sp, #8
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10a      	bne.n	800cee6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cee2:	bf00      	nop
 800cee4:	e7fe      	b.n	800cee4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d10a      	bne.n	800cf02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ceec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cefe:	bf00      	nop
 800cf00:	e7fe      	b.n	800cf00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <xQueueGenericCreateStatic+0x52>
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <xQueueGenericCreateStatic+0x56>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e000      	b.n	800cf14 <xQueueGenericCreateStatic+0x58>
 800cf12:	2300      	movs	r3, #0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10a      	bne.n	800cf2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1c:	f383 8811 	msr	BASEPRI, r3
 800cf20:	f3bf 8f6f 	isb	sy
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	623b      	str	r3, [r7, #32]
}
 800cf2a:	bf00      	nop
 800cf2c:	e7fe      	b.n	800cf2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d102      	bne.n	800cf3a <xQueueGenericCreateStatic+0x7e>
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d101      	bne.n	800cf3e <xQueueGenericCreateStatic+0x82>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e000      	b.n	800cf40 <xQueueGenericCreateStatic+0x84>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d10a      	bne.n	800cf5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	61fb      	str	r3, [r7, #28]
}
 800cf56:	bf00      	nop
 800cf58:	e7fe      	b.n	800cf58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf5a:	2350      	movs	r3, #80	; 0x50
 800cf5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	2b50      	cmp	r3, #80	; 0x50
 800cf62:	d00a      	beq.n	800cf7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	61bb      	str	r3, [r7, #24]
}
 800cf76:	bf00      	nop
 800cf78:	e7fe      	b.n	800cf78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00d      	beq.n	800cfa2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	4613      	mov	r3, r2
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	68b9      	ldr	r1, [r7, #8]
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f000 f83f 	bl	800d020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3730      	adds	r7, #48	; 0x30
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b08a      	sub	sp, #40	; 0x28
 800cfb0:	af02      	add	r7, sp, #8
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10a      	bne.n	800cfd6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	613b      	str	r3, [r7, #16]
}
 800cfd2:	bf00      	nop
 800cfd4:	e7fe      	b.n	800cfd4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	fb02 f303 	mul.w	r3, r2, r3
 800cfde:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	3350      	adds	r3, #80	; 0x50
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f002 fc9f 	bl	800f928 <pvPortMalloc>
 800cfea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d011      	beq.n	800d016 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	3350      	adds	r3, #80	; 0x50
 800cffa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	2200      	movs	r2, #0
 800d000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d004:	79fa      	ldrb	r2, [r7, #7]
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	4613      	mov	r3, r2
 800d00c:	697a      	ldr	r2, [r7, #20]
 800d00e:	68b9      	ldr	r1, [r7, #8]
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	f000 f805 	bl	800d020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d016:	69bb      	ldr	r3, [r7, #24]
	}
 800d018:	4618      	mov	r0, r3
 800d01a:	3720      	adds	r7, #32
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
 800d02c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d103      	bne.n	800d03c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	69ba      	ldr	r2, [r7, #24]
 800d038:	601a      	str	r2, [r3, #0]
 800d03a:	e002      	b.n	800d042 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	68fa      	ldr	r2, [r7, #12]
 800d046:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d04e:	2101      	movs	r1, #1
 800d050:	69b8      	ldr	r0, [r7, #24]
 800d052:	f7ff fecb 	bl	800cdec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	78fa      	ldrb	r2, [r7, #3]
 800d05a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d05e:	bf00      	nop
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
	...

0800d068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b08e      	sub	sp, #56	; 0x38
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d076:	2300      	movs	r3, #0
 800d078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10a      	bne.n	800d09a <xQueueGenericSend+0x32>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d103      	bne.n	800d0a8 <xQueueGenericSend+0x40>
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <xQueueGenericSend+0x44>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e000      	b.n	800d0ae <xQueueGenericSend+0x46>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10a      	bne.n	800d0c8 <xQueueGenericSend+0x60>
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b6:	f383 8811 	msr	BASEPRI, r3
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	f3bf 8f4f 	dsb	sy
 800d0c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0c4:	bf00      	nop
 800d0c6:	e7fe      	b.n	800d0c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2b02      	cmp	r3, #2
 800d0cc:	d103      	bne.n	800d0d6 <xQueueGenericSend+0x6e>
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d101      	bne.n	800d0da <xQueueGenericSend+0x72>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e000      	b.n	800d0dc <xQueueGenericSend+0x74>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10a      	bne.n	800d0f6 <xQueueGenericSend+0x8e>
	__asm volatile
 800d0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	623b      	str	r3, [r7, #32]
}
 800d0f2:	bf00      	nop
 800d0f4:	e7fe      	b.n	800d0f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0f6:	f001 fc57 	bl	800e9a8 <xTaskGetSchedulerState>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d102      	bne.n	800d106 <xQueueGenericSend+0x9e>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d101      	bne.n	800d10a <xQueueGenericSend+0xa2>
 800d106:	2301      	movs	r3, #1
 800d108:	e000      	b.n	800d10c <xQueueGenericSend+0xa4>
 800d10a:	2300      	movs	r3, #0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10a      	bne.n	800d126 <xQueueGenericSend+0xbe>
	__asm volatile
 800d110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d114:	f383 8811 	msr	BASEPRI, r3
 800d118:	f3bf 8f6f 	isb	sy
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	61fb      	str	r3, [r7, #28]
}
 800d122:	bf00      	nop
 800d124:	e7fe      	b.n	800d124 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d126:	f002 fadd 	bl	800f6e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d132:	429a      	cmp	r2, r3
 800d134:	d302      	bcc.n	800d13c <xQueueGenericSend+0xd4>
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d129      	bne.n	800d190 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d13c:	683a      	ldr	r2, [r7, #0]
 800d13e:	68b9      	ldr	r1, [r7, #8]
 800d140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d142:	f000 fa8b 	bl	800d65c <prvCopyDataToQueue>
 800d146:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d010      	beq.n	800d172 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d152:	3324      	adds	r3, #36	; 0x24
 800d154:	4618      	mov	r0, r3
 800d156:	f001 f991 	bl	800e47c <xTaskRemoveFromEventList>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d013      	beq.n	800d188 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d160:	4b3f      	ldr	r3, [pc, #252]	; (800d260 <xQueueGenericSend+0x1f8>)
 800d162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d166:	601a      	str	r2, [r3, #0]
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	e00a      	b.n	800d188 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d174:	2b00      	cmp	r3, #0
 800d176:	d007      	beq.n	800d188 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d178:	4b39      	ldr	r3, [pc, #228]	; (800d260 <xQueueGenericSend+0x1f8>)
 800d17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d188:	f002 fadc 	bl	800f744 <vPortExitCritical>
				return pdPASS;
 800d18c:	2301      	movs	r3, #1
 800d18e:	e063      	b.n	800d258 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d103      	bne.n	800d19e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d196:	f002 fad5 	bl	800f744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d19a:	2300      	movs	r3, #0
 800d19c:	e05c      	b.n	800d258 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d106      	bne.n	800d1b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1a4:	f107 0314 	add.w	r3, r7, #20
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f001 f9cb 	bl	800e544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1b2:	f002 fac7 	bl	800f744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1b6:	f000 fe89 	bl	800decc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1ba:	f002 fa93 	bl	800f6e4 <vPortEnterCritical>
 800d1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1c4:	b25b      	sxtb	r3, r3
 800d1c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1ca:	d103      	bne.n	800d1d4 <xQueueGenericSend+0x16c>
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1da:	b25b      	sxtb	r3, r3
 800d1dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1e0:	d103      	bne.n	800d1ea <xQueueGenericSend+0x182>
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ea:	f002 faab 	bl	800f744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1ee:	1d3a      	adds	r2, r7, #4
 800d1f0:	f107 0314 	add.w	r3, r7, #20
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f001 f9ba 	bl	800e570 <xTaskCheckForTimeOut>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d124      	bne.n	800d24c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d204:	f000 fb22 	bl	800d84c <prvIsQueueFull>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d018      	beq.n	800d240 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d210:	3310      	adds	r3, #16
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	4611      	mov	r1, r2
 800d216:	4618      	mov	r0, r3
 800d218:	f001 f8e0 	bl	800e3dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d21c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d21e:	f000 faad 	bl	800d77c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d222:	f000 fe61 	bl	800dee8 <xTaskResumeAll>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f47f af7c 	bne.w	800d126 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d22e:	4b0c      	ldr	r3, [pc, #48]	; (800d260 <xQueueGenericSend+0x1f8>)
 800d230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d234:	601a      	str	r2, [r3, #0]
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	e772      	b.n	800d126 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d242:	f000 fa9b 	bl	800d77c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d246:	f000 fe4f 	bl	800dee8 <xTaskResumeAll>
 800d24a:	e76c      	b.n	800d126 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d24c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d24e:	f000 fa95 	bl	800d77c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d252:	f000 fe49 	bl	800dee8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d256:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3738      	adds	r7, #56	; 0x38
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	e000ed04 	.word	0xe000ed04

0800d264 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b090      	sub	sp, #64	; 0x40
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10a      	bne.n	800d292 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d280:	f383 8811 	msr	BASEPRI, r3
 800d284:	f3bf 8f6f 	isb	sy
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d28e:	bf00      	nop
 800d290:	e7fe      	b.n	800d290 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d103      	bne.n	800d2a0 <xQueueGenericSendFromISR+0x3c>
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d101      	bne.n	800d2a4 <xQueueGenericSendFromISR+0x40>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e000      	b.n	800d2a6 <xQueueGenericSendFromISR+0x42>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10a      	bne.n	800d2c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2bc:	bf00      	nop
 800d2be:	e7fe      	b.n	800d2be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d103      	bne.n	800d2ce <xQueueGenericSendFromISR+0x6a>
 800d2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d101      	bne.n	800d2d2 <xQueueGenericSendFromISR+0x6e>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e000      	b.n	800d2d4 <xQueueGenericSendFromISR+0x70>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	623b      	str	r3, [r7, #32]
}
 800d2ea:	bf00      	nop
 800d2ec:	e7fe      	b.n	800d2ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2ee:	f002 fadb 	bl	800f8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d2f2:	f3ef 8211 	mrs	r2, BASEPRI
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	61fa      	str	r2, [r7, #28]
 800d308:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d30a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d30c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d316:	429a      	cmp	r2, r3
 800d318:	d302      	bcc.n	800d320 <xQueueGenericSendFromISR+0xbc>
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	d12f      	bne.n	800d380 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	68b9      	ldr	r1, [r7, #8]
 800d334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d336:	f000 f991 	bl	800d65c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d33a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d33e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d342:	d112      	bne.n	800d36a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d016      	beq.n	800d37a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34e:	3324      	adds	r3, #36	; 0x24
 800d350:	4618      	mov	r0, r3
 800d352:	f001 f893 	bl	800e47c <xTaskRemoveFromEventList>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00e      	beq.n	800d37a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d00b      	beq.n	800d37a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2201      	movs	r2, #1
 800d366:	601a      	str	r2, [r3, #0]
 800d368:	e007      	b.n	800d37a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d36a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d36e:	3301      	adds	r3, #1
 800d370:	b2db      	uxtb	r3, r3
 800d372:	b25a      	sxtb	r2, r3
 800d374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d37a:	2301      	movs	r3, #1
 800d37c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d37e:	e001      	b.n	800d384 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d380:	2300      	movs	r3, #0
 800d382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d386:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d38e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d392:	4618      	mov	r0, r3
 800d394:	3740      	adds	r7, #64	; 0x40
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b08c      	sub	sp, #48	; 0x30
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10a      	bne.n	800d3cc <xQueueReceive+0x30>
	__asm volatile
 800d3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	623b      	str	r3, [r7, #32]
}
 800d3c8:	bf00      	nop
 800d3ca:	e7fe      	b.n	800d3ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d103      	bne.n	800d3da <xQueueReceive+0x3e>
 800d3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <xQueueReceive+0x42>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e000      	b.n	800d3e0 <xQueueReceive+0x44>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10a      	bne.n	800d3fa <xQueueReceive+0x5e>
	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	61fb      	str	r3, [r7, #28]
}
 800d3f6:	bf00      	nop
 800d3f8:	e7fe      	b.n	800d3f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3fa:	f001 fad5 	bl	800e9a8 <xTaskGetSchedulerState>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d102      	bne.n	800d40a <xQueueReceive+0x6e>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <xQueueReceive+0x72>
 800d40a:	2301      	movs	r3, #1
 800d40c:	e000      	b.n	800d410 <xQueueReceive+0x74>
 800d40e:	2300      	movs	r3, #0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10a      	bne.n	800d42a <xQueueReceive+0x8e>
	__asm volatile
 800d414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d418:	f383 8811 	msr	BASEPRI, r3
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f3bf 8f4f 	dsb	sy
 800d424:	61bb      	str	r3, [r7, #24]
}
 800d426:	bf00      	nop
 800d428:	e7fe      	b.n	800d428 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d42a:	f002 f95b 	bl	800f6e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d432:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d436:	2b00      	cmp	r3, #0
 800d438:	d01f      	beq.n	800d47a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d43a:	68b9      	ldr	r1, [r7, #8]
 800d43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d43e:	f000 f977 	bl	800d730 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d444:	1e5a      	subs	r2, r3, #1
 800d446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d448:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00f      	beq.n	800d472 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d454:	3310      	adds	r3, #16
 800d456:	4618      	mov	r0, r3
 800d458:	f001 f810 	bl	800e47c <xTaskRemoveFromEventList>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d007      	beq.n	800d472 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d462:	4b3d      	ldr	r3, [pc, #244]	; (800d558 <xQueueReceive+0x1bc>)
 800d464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d472:	f002 f967 	bl	800f744 <vPortExitCritical>
				return pdPASS;
 800d476:	2301      	movs	r3, #1
 800d478:	e069      	b.n	800d54e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d103      	bne.n	800d488 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d480:	f002 f960 	bl	800f744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d484:	2300      	movs	r3, #0
 800d486:	e062      	b.n	800d54e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d106      	bne.n	800d49c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d48e:	f107 0310 	add.w	r3, r7, #16
 800d492:	4618      	mov	r0, r3
 800d494:	f001 f856 	bl	800e544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d498:	2301      	movs	r3, #1
 800d49a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d49c:	f002 f952 	bl	800f744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4a0:	f000 fd14 	bl	800decc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4a4:	f002 f91e 	bl	800f6e4 <vPortEnterCritical>
 800d4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4ae:	b25b      	sxtb	r3, r3
 800d4b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4b4:	d103      	bne.n	800d4be <xQueueReceive+0x122>
 800d4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4c4:	b25b      	sxtb	r3, r3
 800d4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4ca:	d103      	bne.n	800d4d4 <xQueueReceive+0x138>
 800d4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4d4:	f002 f936 	bl	800f744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4d8:	1d3a      	adds	r2, r7, #4
 800d4da:	f107 0310 	add.w	r3, r7, #16
 800d4de:	4611      	mov	r1, r2
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f001 f845 	bl	800e570 <xTaskCheckForTimeOut>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d123      	bne.n	800d534 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4ee:	f000 f997 	bl	800d820 <prvIsQueueEmpty>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d017      	beq.n	800d528 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fa:	3324      	adds	r3, #36	; 0x24
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	4611      	mov	r1, r2
 800d500:	4618      	mov	r0, r3
 800d502:	f000 ff6b 	bl	800e3dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d508:	f000 f938 	bl	800d77c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d50c:	f000 fcec 	bl	800dee8 <xTaskResumeAll>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d189      	bne.n	800d42a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d516:	4b10      	ldr	r3, [pc, #64]	; (800d558 <xQueueReceive+0x1bc>)
 800d518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	f3bf 8f4f 	dsb	sy
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	e780      	b.n	800d42a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d52a:	f000 f927 	bl	800d77c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d52e:	f000 fcdb 	bl	800dee8 <xTaskResumeAll>
 800d532:	e77a      	b.n	800d42a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d536:	f000 f921 	bl	800d77c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d53a:	f000 fcd5 	bl	800dee8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d53e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d540:	f000 f96e 	bl	800d820 <prvIsQueueEmpty>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	f43f af6f 	beq.w	800d42a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d54c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3730      	adds	r7, #48	; 0x30
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	e000ed04 	.word	0xe000ed04

0800d55c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08e      	sub	sp, #56	; 0x38
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d10a      	bne.n	800d588 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d576:	f383 8811 	msr	BASEPRI, r3
 800d57a:	f3bf 8f6f 	isb	sy
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	623b      	str	r3, [r7, #32]
}
 800d584:	bf00      	nop
 800d586:	e7fe      	b.n	800d586 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d103      	bne.n	800d596 <xQueueReceiveFromISR+0x3a>
 800d58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d592:	2b00      	cmp	r3, #0
 800d594:	d101      	bne.n	800d59a <xQueueReceiveFromISR+0x3e>
 800d596:	2301      	movs	r3, #1
 800d598:	e000      	b.n	800d59c <xQueueReceiveFromISR+0x40>
 800d59a:	2300      	movs	r3, #0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d10a      	bne.n	800d5b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	61fb      	str	r3, [r7, #28]
}
 800d5b2:	bf00      	nop
 800d5b4:	e7fe      	b.n	800d5b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5b6:	f002 f977 	bl	800f8a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d5ba:	f3ef 8211 	mrs	r2, BASEPRI
 800d5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c2:	f383 8811 	msr	BASEPRI, r3
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	61ba      	str	r2, [r7, #24]
 800d5d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d5d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d02f      	beq.n	800d642 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5ec:	68b9      	ldr	r1, [r7, #8]
 800d5ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5f0:	f000 f89e 	bl	800d730 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f6:	1e5a      	subs	r2, r3, #1
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d5fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d604:	d112      	bne.n	800d62c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d016      	beq.n	800d63c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d610:	3310      	adds	r3, #16
 800d612:	4618      	mov	r0, r3
 800d614:	f000 ff32 	bl	800e47c <xTaskRemoveFromEventList>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00e      	beq.n	800d63c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00b      	beq.n	800d63c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	601a      	str	r2, [r3, #0]
 800d62a:	e007      	b.n	800d63c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d630:	3301      	adds	r3, #1
 800d632:	b2db      	uxtb	r3, r3
 800d634:	b25a      	sxtb	r2, r3
 800d636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d63c:	2301      	movs	r3, #1
 800d63e:	637b      	str	r3, [r7, #52]	; 0x34
 800d640:	e001      	b.n	800d646 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d642:	2300      	movs	r3, #0
 800d644:	637b      	str	r3, [r7, #52]	; 0x34
 800d646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d648:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	f383 8811 	msr	BASEPRI, r3
}
 800d650:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d654:	4618      	mov	r0, r3
 800d656:	3738      	adds	r7, #56	; 0x38
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b086      	sub	sp, #24
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d668:	2300      	movs	r3, #0
 800d66a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d670:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d676:	2b00      	cmp	r3, #0
 800d678:	d10d      	bne.n	800d696 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d14d      	bne.n	800d71e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	4618      	mov	r0, r3
 800d688:	f001 f9ac 	bl	800e9e4 <xTaskPriorityDisinherit>
 800d68c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	609a      	str	r2, [r3, #8]
 800d694:	e043      	b.n	800d71e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d119      	bne.n	800d6d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6858      	ldr	r0, [r3, #4]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	68b9      	ldr	r1, [r7, #8]
 800d6a8:	f003 f999 	bl	80109de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	685a      	ldr	r2, [r3, #4]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b4:	441a      	add	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d32b      	bcc.n	800d71e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	605a      	str	r2, [r3, #4]
 800d6ce:	e026      	b.n	800d71e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	68d8      	ldr	r0, [r3, #12]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d8:	461a      	mov	r2, r3
 800d6da:	68b9      	ldr	r1, [r7, #8]
 800d6dc:	f003 f97f 	bl	80109de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	68da      	ldr	r2, [r3, #12]
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e8:	425b      	negs	r3, r3
 800d6ea:	441a      	add	r2, r3
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	68da      	ldr	r2, [r3, #12]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d207      	bcs.n	800d70c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	689a      	ldr	r2, [r3, #8]
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d704:	425b      	negs	r3, r3
 800d706:	441a      	add	r2, r3
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b02      	cmp	r3, #2
 800d710:	d105      	bne.n	800d71e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d002      	beq.n	800d71e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	3b01      	subs	r3, #1
 800d71c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	1c5a      	adds	r2, r3, #1
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d726:	697b      	ldr	r3, [r7, #20]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3718      	adds	r7, #24
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d018      	beq.n	800d774 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	68da      	ldr	r2, [r3, #12]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74a:	441a      	add	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	68da      	ldr	r2, [r3, #12]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d303      	bcc.n	800d764 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	68d9      	ldr	r1, [r3, #12]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76c:	461a      	mov	r2, r3
 800d76e:	6838      	ldr	r0, [r7, #0]
 800d770:	f003 f935 	bl	80109de <memcpy>
	}
}
 800d774:	bf00      	nop
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d784:	f001 ffae 	bl	800f6e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d78e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d790:	e011      	b.n	800d7b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d796:	2b00      	cmp	r3, #0
 800d798:	d012      	beq.n	800d7c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	3324      	adds	r3, #36	; 0x24
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 fe6c 	bl	800e47c <xTaskRemoveFromEventList>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d7aa:	f000 ff43 	bl	800e634 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d7ae:	7bfb      	ldrb	r3, [r7, #15]
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d7b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	dce9      	bgt.n	800d792 <prvUnlockQueue+0x16>
 800d7be:	e000      	b.n	800d7c2 <prvUnlockQueue+0x46>
					break;
 800d7c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	22ff      	movs	r2, #255	; 0xff
 800d7c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d7ca:	f001 ffbb 	bl	800f744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d7ce:	f001 ff89 	bl	800f6e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7da:	e011      	b.n	800d800 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d012      	beq.n	800d80a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	3310      	adds	r3, #16
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 fe47 	bl	800e47c <xTaskRemoveFromEventList>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d001      	beq.n	800d7f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7f4:	f000 ff1e 	bl	800e634 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7f8:	7bbb      	ldrb	r3, [r7, #14]
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d800:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d804:	2b00      	cmp	r3, #0
 800d806:	dce9      	bgt.n	800d7dc <prvUnlockQueue+0x60>
 800d808:	e000      	b.n	800d80c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d80a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	22ff      	movs	r2, #255	; 0xff
 800d810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d814:	f001 ff96 	bl	800f744 <vPortExitCritical>
}
 800d818:	bf00      	nop
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d828:	f001 ff5c 	bl	800f6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d830:	2b00      	cmp	r3, #0
 800d832:	d102      	bne.n	800d83a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d834:	2301      	movs	r3, #1
 800d836:	60fb      	str	r3, [r7, #12]
 800d838:	e001      	b.n	800d83e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d83a:	2300      	movs	r3, #0
 800d83c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d83e:	f001 ff81 	bl	800f744 <vPortExitCritical>

	return xReturn;
 800d842:	68fb      	ldr	r3, [r7, #12]
}
 800d844:	4618      	mov	r0, r3
 800d846:	3710      	adds	r7, #16
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d854:	f001 ff46 	bl	800f6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d860:	429a      	cmp	r2, r3
 800d862:	d102      	bne.n	800d86a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d864:	2301      	movs	r3, #1
 800d866:	60fb      	str	r3, [r7, #12]
 800d868:	e001      	b.n	800d86e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d86a:	2300      	movs	r3, #0
 800d86c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d86e:	f001 ff69 	bl	800f744 <vPortExitCritical>

	return xReturn;
 800d872:	68fb      	ldr	r3, [r7, #12]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d886:	2300      	movs	r3, #0
 800d888:	60fb      	str	r3, [r7, #12]
 800d88a:	e014      	b.n	800d8b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d88c:	4a0f      	ldr	r2, [pc, #60]	; (800d8cc <vQueueAddToRegistry+0x50>)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d10b      	bne.n	800d8b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d898:	490c      	ldr	r1, [pc, #48]	; (800d8cc <vQueueAddToRegistry+0x50>)
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	683a      	ldr	r2, [r7, #0]
 800d89e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d8a2:	4a0a      	ldr	r2, [pc, #40]	; (800d8cc <vQueueAddToRegistry+0x50>)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	00db      	lsls	r3, r3, #3
 800d8a8:	4413      	add	r3, r2
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d8ae:	e006      	b.n	800d8be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	60fb      	str	r3, [r7, #12]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2b07      	cmp	r3, #7
 800d8ba:	d9e7      	bls.n	800d88c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d8bc:	bf00      	nop
 800d8be:	bf00      	nop
 800d8c0:	3714      	adds	r7, #20
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	20009d48 	.word	0x20009d48

0800d8d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d8e0:	f001 ff00 	bl	800f6e4 <vPortEnterCritical>
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8ea:	b25b      	sxtb	r3, r3
 800d8ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8f0:	d103      	bne.n	800d8fa <vQueueWaitForMessageRestricted+0x2a>
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d900:	b25b      	sxtb	r3, r3
 800d902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d906:	d103      	bne.n	800d910 <vQueueWaitForMessageRestricted+0x40>
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d910:	f001 ff18 	bl	800f744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d106      	bne.n	800d92a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	3324      	adds	r3, #36	; 0x24
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	68b9      	ldr	r1, [r7, #8]
 800d924:	4618      	mov	r0, r3
 800d926:	f000 fd7d 	bl	800e424 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d92a:	6978      	ldr	r0, [r7, #20]
 800d92c:	f7ff ff26 	bl	800d77c <prvUnlockQueue>
	}
 800d930:	bf00      	nop
 800d932:	3718      	adds	r7, #24
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b08e      	sub	sp, #56	; 0x38
 800d93c:	af04      	add	r7, sp, #16
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	607a      	str	r2, [r7, #4]
 800d944:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d10a      	bne.n	800d962 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	623b      	str	r3, [r7, #32]
}
 800d95e:	bf00      	nop
 800d960:	e7fe      	b.n	800d960 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d964:	2b00      	cmp	r3, #0
 800d966:	d10a      	bne.n	800d97e <xTaskCreateStatic+0x46>
	__asm volatile
 800d968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96c:	f383 8811 	msr	BASEPRI, r3
 800d970:	f3bf 8f6f 	isb	sy
 800d974:	f3bf 8f4f 	dsb	sy
 800d978:	61fb      	str	r3, [r7, #28]
}
 800d97a:	bf00      	nop
 800d97c:	e7fe      	b.n	800d97c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d97e:	23c0      	movs	r3, #192	; 0xc0
 800d980:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	2bc0      	cmp	r3, #192	; 0xc0
 800d986:	d00a      	beq.n	800d99e <xTaskCreateStatic+0x66>
	__asm volatile
 800d988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98c:	f383 8811 	msr	BASEPRI, r3
 800d990:	f3bf 8f6f 	isb	sy
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	61bb      	str	r3, [r7, #24]
}
 800d99a:	bf00      	nop
 800d99c:	e7fe      	b.n	800d99c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d99e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d01e      	beq.n	800d9e4 <xTaskCreateStatic+0xac>
 800d9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d01b      	beq.n	800d9e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d9be:	2300      	movs	r3, #0
 800d9c0:	9303      	str	r3, [sp, #12]
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	9302      	str	r3, [sp, #8]
 800d9c6:	f107 0314 	add.w	r3, r7, #20
 800d9ca:	9301      	str	r3, [sp, #4]
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	68b9      	ldr	r1, [r7, #8]
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f000 f850 	bl	800da7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9de:	f000 f8f7 	bl	800dbd0 <prvAddNewTaskToReadyList>
 800d9e2:	e001      	b.n	800d9e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d9e8:	697b      	ldr	r3, [r7, #20]
	}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3728      	adds	r7, #40	; 0x28
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b08c      	sub	sp, #48	; 0x30
 800d9f6:	af04      	add	r7, sp, #16
 800d9f8:	60f8      	str	r0, [r7, #12]
 800d9fa:	60b9      	str	r1, [r7, #8]
 800d9fc:	603b      	str	r3, [r7, #0]
 800d9fe:	4613      	mov	r3, r2
 800da00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da02:	88fb      	ldrh	r3, [r7, #6]
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	4618      	mov	r0, r3
 800da08:	f001 ff8e 	bl	800f928 <pvPortMalloc>
 800da0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00e      	beq.n	800da32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da14:	20c0      	movs	r0, #192	; 0xc0
 800da16:	f001 ff87 	bl	800f928 <pvPortMalloc>
 800da1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d003      	beq.n	800da2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	697a      	ldr	r2, [r7, #20]
 800da26:	631a      	str	r2, [r3, #48]	; 0x30
 800da28:	e005      	b.n	800da36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da2a:	6978      	ldr	r0, [r7, #20]
 800da2c:	f002 f848 	bl	800fac0 <vPortFree>
 800da30:	e001      	b.n	800da36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da32:	2300      	movs	r3, #0
 800da34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d017      	beq.n	800da6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	2200      	movs	r2, #0
 800da40:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da44:	88fa      	ldrh	r2, [r7, #6]
 800da46:	2300      	movs	r3, #0
 800da48:	9303      	str	r3, [sp, #12]
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	9302      	str	r3, [sp, #8]
 800da4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da50:	9301      	str	r3, [sp, #4]
 800da52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	68b9      	ldr	r1, [r7, #8]
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f000 f80e 	bl	800da7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da60:	69f8      	ldr	r0, [r7, #28]
 800da62:	f000 f8b5 	bl	800dbd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da66:	2301      	movs	r3, #1
 800da68:	61bb      	str	r3, [r7, #24]
 800da6a:	e002      	b.n	800da72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da72:	69bb      	ldr	r3, [r7, #24]
	}
 800da74:	4618      	mov	r0, r3
 800da76:	3720      	adds	r7, #32
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b088      	sub	sp, #32
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
 800da88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800da8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	461a      	mov	r2, r3
 800da94:	21a5      	movs	r1, #165	; 0xa5
 800da96:	f002 ffb0 	bl	80109fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800daa4:	3b01      	subs	r3, #1
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	4413      	add	r3, r2
 800daaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	f023 0307 	bic.w	r3, r3, #7
 800dab2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	f003 0307 	and.w	r3, r3, #7
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00a      	beq.n	800dad4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac2:	f383 8811 	msr	BASEPRI, r3
 800dac6:	f3bf 8f6f 	isb	sy
 800daca:	f3bf 8f4f 	dsb	sy
 800dace:	617b      	str	r3, [r7, #20]
}
 800dad0:	bf00      	nop
 800dad2:	e7fe      	b.n	800dad2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d01f      	beq.n	800db1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dada:	2300      	movs	r3, #0
 800dadc:	61fb      	str	r3, [r7, #28]
 800dade:	e012      	b.n	800db06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	4413      	add	r3, r2
 800dae6:	7819      	ldrb	r1, [r3, #0]
 800dae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	4413      	add	r3, r2
 800daee:	3334      	adds	r3, #52	; 0x34
 800daf0:	460a      	mov	r2, r1
 800daf2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	4413      	add	r3, r2
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d006      	beq.n	800db0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	3301      	adds	r3, #1
 800db04:	61fb      	str	r3, [r7, #28]
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	2b0f      	cmp	r3, #15
 800db0a:	d9e9      	bls.n	800dae0 <prvInitialiseNewTask+0x64>
 800db0c:	e000      	b.n	800db10 <prvInitialiseNewTask+0x94>
			{
				break;
 800db0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db12:	2200      	movs	r2, #0
 800db14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db18:	e003      	b.n	800db22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db24:	2b37      	cmp	r3, #55	; 0x37
 800db26:	d901      	bls.n	800db2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db28:	2337      	movs	r3, #55	; 0x37
 800db2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	2200      	movs	r2, #0
 800db3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	3304      	adds	r3, #4
 800db42:	4618      	mov	r0, r3
 800db44:	f7ff f8be 	bl	800ccc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4a:	3318      	adds	r3, #24
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff f8b9 	bl	800ccc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800db68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6a:	2200      	movs	r2, #0
 800db6c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	2200      	movs	r2, #0
 800db72:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800db7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db80:	3358      	adds	r3, #88	; 0x58
 800db82:	2260      	movs	r2, #96	; 0x60
 800db84:	2100      	movs	r1, #0
 800db86:	4618      	mov	r0, r3
 800db88:	f002 ff37 	bl	80109fa <memset>
 800db8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8e:	4a0d      	ldr	r2, [pc, #52]	; (800dbc4 <prvInitialiseNewTask+0x148>)
 800db90:	65da      	str	r2, [r3, #92]	; 0x5c
 800db92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db94:	4a0c      	ldr	r2, [pc, #48]	; (800dbc8 <prvInitialiseNewTask+0x14c>)
 800db96:	661a      	str	r2, [r3, #96]	; 0x60
 800db98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9a:	4a0c      	ldr	r2, [pc, #48]	; (800dbcc <prvInitialiseNewTask+0x150>)
 800db9c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	68f9      	ldr	r1, [r7, #12]
 800dba2:	69b8      	ldr	r0, [r7, #24]
 800dba4:	f001 fc6e 	bl	800f484 <pxPortInitialiseStack>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbba:	bf00      	nop
 800dbbc:	3720      	adds	r7, #32
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	08015eb8 	.word	0x08015eb8
 800dbc8:	08015ed8 	.word	0x08015ed8
 800dbcc:	08015e98 	.word	0x08015e98

0800dbd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dbd8:	f001 fd84 	bl	800f6e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dbdc:	4b2d      	ldr	r3, [pc, #180]	; (800dc94 <prvAddNewTaskToReadyList+0xc4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	4a2c      	ldr	r2, [pc, #176]	; (800dc94 <prvAddNewTaskToReadyList+0xc4>)
 800dbe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dbe6:	4b2c      	ldr	r3, [pc, #176]	; (800dc98 <prvAddNewTaskToReadyList+0xc8>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d109      	bne.n	800dc02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dbee:	4a2a      	ldr	r2, [pc, #168]	; (800dc98 <prvAddNewTaskToReadyList+0xc8>)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dbf4:	4b27      	ldr	r3, [pc, #156]	; (800dc94 <prvAddNewTaskToReadyList+0xc4>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d110      	bne.n	800dc1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dbfc:	f000 fd3e 	bl	800e67c <prvInitialiseTaskLists>
 800dc00:	e00d      	b.n	800dc1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc02:	4b26      	ldr	r3, [pc, #152]	; (800dc9c <prvAddNewTaskToReadyList+0xcc>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d109      	bne.n	800dc1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc0a:	4b23      	ldr	r3, [pc, #140]	; (800dc98 <prvAddNewTaskToReadyList+0xc8>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d802      	bhi.n	800dc1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc18:	4a1f      	ldr	r2, [pc, #124]	; (800dc98 <prvAddNewTaskToReadyList+0xc8>)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc1e:	4b20      	ldr	r3, [pc, #128]	; (800dca0 <prvAddNewTaskToReadyList+0xd0>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	3301      	adds	r3, #1
 800dc24:	4a1e      	ldr	r2, [pc, #120]	; (800dca0 <prvAddNewTaskToReadyList+0xd0>)
 800dc26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc28:	4b1d      	ldr	r3, [pc, #116]	; (800dca0 <prvAddNewTaskToReadyList+0xd0>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc34:	4b1b      	ldr	r3, [pc, #108]	; (800dca4 <prvAddNewTaskToReadyList+0xd4>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d903      	bls.n	800dc44 <prvAddNewTaskToReadyList+0x74>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc40:	4a18      	ldr	r2, [pc, #96]	; (800dca4 <prvAddNewTaskToReadyList+0xd4>)
 800dc42:	6013      	str	r3, [r2, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc48:	4613      	mov	r3, r2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4a15      	ldr	r2, [pc, #84]	; (800dca8 <prvAddNewTaskToReadyList+0xd8>)
 800dc52:	441a      	add	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	3304      	adds	r3, #4
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	f7ff f83f 	bl	800ccde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc60:	f001 fd70 	bl	800f744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc64:	4b0d      	ldr	r3, [pc, #52]	; (800dc9c <prvAddNewTaskToReadyList+0xcc>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00e      	beq.n	800dc8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc6c:	4b0a      	ldr	r3, [pc, #40]	; (800dc98 <prvAddNewTaskToReadyList+0xc8>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d207      	bcs.n	800dc8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc7a:	4b0c      	ldr	r3, [pc, #48]	; (800dcac <prvAddNewTaskToReadyList+0xdc>)
 800dc7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc80:	601a      	str	r2, [r3, #0]
 800dc82:	f3bf 8f4f 	dsb	sy
 800dc86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc8a:	bf00      	nop
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	200013dc 	.word	0x200013dc
 800dc98:	20000f08 	.word	0x20000f08
 800dc9c:	200013e8 	.word	0x200013e8
 800dca0:	200013f8 	.word	0x200013f8
 800dca4:	200013e4 	.word	0x200013e4
 800dca8:	20000f0c 	.word	0x20000f0c
 800dcac:	e000ed04 	.word	0xe000ed04

0800dcb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d017      	beq.n	800dcf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dcc2:	4b13      	ldr	r3, [pc, #76]	; (800dd10 <vTaskDelay+0x60>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00a      	beq.n	800dce0 <vTaskDelay+0x30>
	__asm volatile
 800dcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	60bb      	str	r3, [r7, #8]
}
 800dcdc:	bf00      	nop
 800dcde:	e7fe      	b.n	800dcde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dce0:	f000 f8f4 	bl	800decc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dce4:	2100      	movs	r1, #0
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f001 f82a 	bl	800ed40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dcec:	f000 f8fc 	bl	800dee8 <xTaskResumeAll>
 800dcf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d107      	bne.n	800dd08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dcf8:	4b06      	ldr	r3, [pc, #24]	; (800dd14 <vTaskDelay+0x64>)
 800dcfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcfe:	601a      	str	r2, [r3, #0]
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd08:	bf00      	nop
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	20001404 	.word	0x20001404
 800dd14:	e000ed04 	.word	0xe000ed04

0800dd18 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b088      	sub	sp, #32
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d10a      	bne.n	800dd40 <eTaskGetState+0x28>
	__asm volatile
 800dd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2e:	f383 8811 	msr	BASEPRI, r3
 800dd32:	f3bf 8f6f 	isb	sy
 800dd36:	f3bf 8f4f 	dsb	sy
 800dd3a:	60bb      	str	r3, [r7, #8]
}
 800dd3c:	bf00      	nop
 800dd3e:	e7fe      	b.n	800dd3e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800dd40:	4b23      	ldr	r3, [pc, #140]	; (800ddd0 <eTaskGetState+0xb8>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	69ba      	ldr	r2, [r7, #24]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d102      	bne.n	800dd50 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	77fb      	strb	r3, [r7, #31]
 800dd4e:	e03a      	b.n	800ddc6 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800dd50:	f001 fcc8 	bl	800f6e4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	695b      	ldr	r3, [r3, #20]
 800dd58:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800dd5a:	4b1e      	ldr	r3, [pc, #120]	; (800ddd4 <eTaskGetState+0xbc>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800dd60:	4b1d      	ldr	r3, [pc, #116]	; (800ddd8 <eTaskGetState+0xc0>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800dd66:	f001 fced 	bl	800f744 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800dd6a:	697a      	ldr	r2, [r7, #20]
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d003      	beq.n	800dd7a <eTaskGetState+0x62>
 800dd72:	697a      	ldr	r2, [r7, #20]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d102      	bne.n	800dd80 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800dd7a:	2302      	movs	r3, #2
 800dd7c:	77fb      	strb	r3, [r7, #31]
 800dd7e:	e022      	b.n	800ddc6 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	4a16      	ldr	r2, [pc, #88]	; (800dddc <eTaskGetState+0xc4>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d112      	bne.n	800ddae <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d10b      	bne.n	800dda8 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d102      	bne.n	800dda2 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	77fb      	strb	r3, [r7, #31]
 800dda0:	e011      	b.n	800ddc6 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800dda2:	2303      	movs	r3, #3
 800dda4:	77fb      	strb	r3, [r7, #31]
 800dda6:	e00e      	b.n	800ddc6 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800dda8:	2302      	movs	r3, #2
 800ddaa:	77fb      	strb	r3, [r7, #31]
 800ddac:	e00b      	b.n	800ddc6 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	4a0b      	ldr	r2, [pc, #44]	; (800dde0 <eTaskGetState+0xc8>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d002      	beq.n	800ddbc <eTaskGetState+0xa4>
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800ddbc:	2304      	movs	r3, #4
 800ddbe:	77fb      	strb	r3, [r7, #31]
 800ddc0:	e001      	b.n	800ddc6 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800ddc6:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3720      	adds	r7, #32
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	20000f08 	.word	0x20000f08
 800ddd4:	20001394 	.word	0x20001394
 800ddd8:	20001398 	.word	0x20001398
 800dddc:	200013c8 	.word	0x200013c8
 800dde0:	200013b0 	.word	0x200013b0

0800dde4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b08a      	sub	sp, #40	; 0x28
 800dde8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ddea:	2300      	movs	r3, #0
 800ddec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ddf2:	463a      	mov	r2, r7
 800ddf4:	1d39      	adds	r1, r7, #4
 800ddf6:	f107 0308 	add.w	r3, r7, #8
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7fe ff0e 	bl	800cc1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de00:	6839      	ldr	r1, [r7, #0]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	68ba      	ldr	r2, [r7, #8]
 800de06:	9202      	str	r2, [sp, #8]
 800de08:	9301      	str	r3, [sp, #4]
 800de0a:	2300      	movs	r3, #0
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	2300      	movs	r3, #0
 800de10:	460a      	mov	r2, r1
 800de12:	4925      	ldr	r1, [pc, #148]	; (800dea8 <vTaskStartScheduler+0xc4>)
 800de14:	4825      	ldr	r0, [pc, #148]	; (800deac <vTaskStartScheduler+0xc8>)
 800de16:	f7ff fd8f 	bl	800d938 <xTaskCreateStatic>
 800de1a:	4603      	mov	r3, r0
 800de1c:	4a24      	ldr	r2, [pc, #144]	; (800deb0 <vTaskStartScheduler+0xcc>)
 800de1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de20:	4b23      	ldr	r3, [pc, #140]	; (800deb0 <vTaskStartScheduler+0xcc>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d002      	beq.n	800de2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de28:	2301      	movs	r3, #1
 800de2a:	617b      	str	r3, [r7, #20]
 800de2c:	e001      	b.n	800de32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de2e:	2300      	movs	r3, #0
 800de30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d102      	bne.n	800de3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800de38:	f000 ffd6 	bl	800ede8 <xTimerCreateTimerTask>
 800de3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d11e      	bne.n	800de82 <vTaskStartScheduler+0x9e>
	__asm volatile
 800de44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de48:	f383 8811 	msr	BASEPRI, r3
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	f3bf 8f4f 	dsb	sy
 800de54:	613b      	str	r3, [r7, #16]
}
 800de56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800de58:	4b16      	ldr	r3, [pc, #88]	; (800deb4 <vTaskStartScheduler+0xd0>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	3358      	adds	r3, #88	; 0x58
 800de5e:	4a16      	ldr	r2, [pc, #88]	; (800deb8 <vTaskStartScheduler+0xd4>)
 800de60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de62:	4b16      	ldr	r3, [pc, #88]	; (800debc <vTaskStartScheduler+0xd8>)
 800de64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de6a:	4b15      	ldr	r3, [pc, #84]	; (800dec0 <vTaskStartScheduler+0xdc>)
 800de6c:	2201      	movs	r2, #1
 800de6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de70:	4b14      	ldr	r3, [pc, #80]	; (800dec4 <vTaskStartScheduler+0xe0>)
 800de72:	2200      	movs	r2, #0
 800de74:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800de76:	4b14      	ldr	r3, [pc, #80]	; (800dec8 <vTaskStartScheduler+0xe4>)
 800de78:	2200      	movs	r2, #0
 800de7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de7c:	f001 fb90 	bl	800f5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de80:	e00e      	b.n	800dea0 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de88:	d10a      	bne.n	800dea0 <vTaskStartScheduler+0xbc>
	__asm volatile
 800de8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8e:	f383 8811 	msr	BASEPRI, r3
 800de92:	f3bf 8f6f 	isb	sy
 800de96:	f3bf 8f4f 	dsb	sy
 800de9a:	60fb      	str	r3, [r7, #12]
}
 800de9c:	bf00      	nop
 800de9e:	e7fe      	b.n	800de9e <vTaskStartScheduler+0xba>
}
 800dea0:	bf00      	nop
 800dea2:	3718      	adds	r7, #24
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	080138c8 	.word	0x080138c8
 800deac:	0800e64d 	.word	0x0800e64d
 800deb0:	20001400 	.word	0x20001400
 800deb4:	20000f08 	.word	0x20000f08
 800deb8:	20000184 	.word	0x20000184
 800debc:	200013fc 	.word	0x200013fc
 800dec0:	200013e8 	.word	0x200013e8
 800dec4:	200013e0 	.word	0x200013e0
 800dec8:	20009520 	.word	0x20009520

0800decc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800decc:	b480      	push	{r7}
 800dece:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ded0:	4b04      	ldr	r3, [pc, #16]	; (800dee4 <vTaskSuspendAll+0x18>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	3301      	adds	r3, #1
 800ded6:	4a03      	ldr	r2, [pc, #12]	; (800dee4 <vTaskSuspendAll+0x18>)
 800ded8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800deda:	bf00      	nop
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr
 800dee4:	20001404 	.word	0x20001404

0800dee8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800deee:	2300      	movs	r3, #0
 800def0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800def2:	2300      	movs	r3, #0
 800def4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800def6:	4b42      	ldr	r3, [pc, #264]	; (800e000 <xTaskResumeAll+0x118>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d10a      	bne.n	800df14 <xTaskResumeAll+0x2c>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	603b      	str	r3, [r7, #0]
}
 800df10:	bf00      	nop
 800df12:	e7fe      	b.n	800df12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df14:	f001 fbe6 	bl	800f6e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df18:	4b39      	ldr	r3, [pc, #228]	; (800e000 <xTaskResumeAll+0x118>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	4a38      	ldr	r2, [pc, #224]	; (800e000 <xTaskResumeAll+0x118>)
 800df20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df22:	4b37      	ldr	r3, [pc, #220]	; (800e000 <xTaskResumeAll+0x118>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d162      	bne.n	800dff0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df2a:	4b36      	ldr	r3, [pc, #216]	; (800e004 <xTaskResumeAll+0x11c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d05e      	beq.n	800dff0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df32:	e02f      	b.n	800df94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df34:	4b34      	ldr	r3, [pc, #208]	; (800e008 <xTaskResumeAll+0x120>)
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	3318      	adds	r3, #24
 800df40:	4618      	mov	r0, r3
 800df42:	f7fe ff29 	bl	800cd98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	3304      	adds	r3, #4
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fe ff24 	bl	800cd98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df54:	4b2d      	ldr	r3, [pc, #180]	; (800e00c <xTaskResumeAll+0x124>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d903      	bls.n	800df64 <xTaskResumeAll+0x7c>
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df60:	4a2a      	ldr	r2, [pc, #168]	; (800e00c <xTaskResumeAll+0x124>)
 800df62:	6013      	str	r3, [r2, #0]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df68:	4613      	mov	r3, r2
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	4413      	add	r3, r2
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	4a27      	ldr	r2, [pc, #156]	; (800e010 <xTaskResumeAll+0x128>)
 800df72:	441a      	add	r2, r3
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	3304      	adds	r3, #4
 800df78:	4619      	mov	r1, r3
 800df7a:	4610      	mov	r0, r2
 800df7c:	f7fe feaf 	bl	800ccde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df84:	4b23      	ldr	r3, [pc, #140]	; (800e014 <xTaskResumeAll+0x12c>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d302      	bcc.n	800df94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800df8e:	4b22      	ldr	r3, [pc, #136]	; (800e018 <xTaskResumeAll+0x130>)
 800df90:	2201      	movs	r2, #1
 800df92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df94:	4b1c      	ldr	r3, [pc, #112]	; (800e008 <xTaskResumeAll+0x120>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1cb      	bne.n	800df34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dfa2:	f000 fce1 	bl	800e968 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dfa6:	4b1d      	ldr	r3, [pc, #116]	; (800e01c <xTaskResumeAll+0x134>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d010      	beq.n	800dfd4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dfb2:	f000 f8d7 	bl	800e164 <xTaskIncrementTick>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d002      	beq.n	800dfc2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dfbc:	4b16      	ldr	r3, [pc, #88]	; (800e018 <xTaskResumeAll+0x130>)
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	3b01      	subs	r3, #1
 800dfc6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d1f1      	bne.n	800dfb2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dfce:	4b13      	ldr	r3, [pc, #76]	; (800e01c <xTaskResumeAll+0x134>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dfd4:	4b10      	ldr	r3, [pc, #64]	; (800e018 <xTaskResumeAll+0x130>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d009      	beq.n	800dff0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dfe0:	4b0f      	ldr	r3, [pc, #60]	; (800e020 <xTaskResumeAll+0x138>)
 800dfe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfe6:	601a      	str	r2, [r3, #0]
 800dfe8:	f3bf 8f4f 	dsb	sy
 800dfec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dff0:	f001 fba8 	bl	800f744 <vPortExitCritical>

	return xAlreadyYielded;
 800dff4:	68bb      	ldr	r3, [r7, #8]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3710      	adds	r7, #16
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	20001404 	.word	0x20001404
 800e004:	200013dc 	.word	0x200013dc
 800e008:	2000139c 	.word	0x2000139c
 800e00c:	200013e4 	.word	0x200013e4
 800e010:	20000f0c 	.word	0x20000f0c
 800e014:	20000f08 	.word	0x20000f08
 800e018:	200013f0 	.word	0x200013f0
 800e01c:	200013ec 	.word	0x200013ec
 800e020:	e000ed04 	.word	0xe000ed04

0800e024 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e02a:	4b05      	ldr	r3, [pc, #20]	; (800e040 <xTaskGetTickCount+0x1c>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e030:	687b      	ldr	r3, [r7, #4]
}
 800e032:	4618      	mov	r0, r3
 800e034:	370c      	adds	r7, #12
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	200013e0 	.word	0x200013e0

0800e044 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800e044:	b580      	push	{r7, lr}
 800e046:	b086      	sub	sp, #24
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e050:	2300      	movs	r3, #0
 800e052:	617b      	str	r3, [r7, #20]
 800e054:	2338      	movs	r3, #56	; 0x38
 800e056:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800e058:	f7ff ff38 	bl	800decc <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e05c:	4b3a      	ldr	r3, [pc, #232]	; (800e148 <uxTaskGetSystemState+0x104>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	68ba      	ldr	r2, [r7, #8]
 800e062:	429a      	cmp	r2, r3
 800e064:	d369      	bcc.n	800e13a <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	3b01      	subs	r3, #1
 800e06a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e06c:	697a      	ldr	r2, [r7, #20]
 800e06e:	4613      	mov	r3, r2
 800e070:	00db      	lsls	r3, r3, #3
 800e072:	4413      	add	r3, r2
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	461a      	mov	r2, r3
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	1898      	adds	r0, r3, r2
 800e07c:	693a      	ldr	r2, [r7, #16]
 800e07e:	4613      	mov	r3, r2
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	4413      	add	r3, r2
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	4a31      	ldr	r2, [pc, #196]	; (800e14c <uxTaskGetSystemState+0x108>)
 800e088:	4413      	add	r3, r2
 800e08a:	2201      	movs	r2, #1
 800e08c:	4619      	mov	r1, r3
 800e08e:	f000 fbc9 	bl	800e824 <prvListTasksWithinSingleList>
 800e092:	4602      	mov	r2, r0
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	4413      	add	r3, r2
 800e098:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1e2      	bne.n	800e066 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e0a0:	697a      	ldr	r2, [r7, #20]
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	00db      	lsls	r3, r3, #3
 800e0a6:	4413      	add	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	4a27      	ldr	r2, [pc, #156]	; (800e150 <uxTaskGetSystemState+0x10c>)
 800e0b2:	6811      	ldr	r1, [r2, #0]
 800e0b4:	2202      	movs	r2, #2
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f000 fbb4 	bl	800e824 <prvListTasksWithinSingleList>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	00db      	lsls	r3, r3, #3
 800e0ca:	4413      	add	r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	4a1f      	ldr	r2, [pc, #124]	; (800e154 <uxTaskGetSystemState+0x110>)
 800e0d6:	6811      	ldr	r1, [r2, #0]
 800e0d8:	2202      	movs	r2, #2
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f000 fba2 	bl	800e824 <prvListTasksWithinSingleList>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e0e8:	697a      	ldr	r2, [r7, #20]
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	00db      	lsls	r3, r3, #3
 800e0ee:	4413      	add	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	4413      	add	r3, r2
 800e0f8:	2204      	movs	r2, #4
 800e0fa:	4917      	ldr	r1, [pc, #92]	; (800e158 <uxTaskGetSystemState+0x114>)
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f000 fb91 	bl	800e824 <prvListTasksWithinSingleList>
 800e102:	4602      	mov	r2, r0
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	4413      	add	r3, r2
 800e108:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	4613      	mov	r3, r2
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	4413      	add	r3, r2
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	461a      	mov	r2, r3
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	4413      	add	r3, r2
 800e11a:	2203      	movs	r2, #3
 800e11c:	490f      	ldr	r1, [pc, #60]	; (800e15c <uxTaskGetSystemState+0x118>)
 800e11e:	4618      	mov	r0, r3
 800e120:	f000 fb80 	bl	800e824 <prvListTasksWithinSingleList>
 800e124:	4602      	mov	r2, r0
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	4413      	add	r3, r2
 800e12a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d003      	beq.n	800e13a <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e132:	4b0b      	ldr	r3, [pc, #44]	; (800e160 <uxTaskGetSystemState+0x11c>)
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800e13a:	f7ff fed5 	bl	800dee8 <xTaskResumeAll>

		return uxTask;
 800e13e:	697b      	ldr	r3, [r7, #20]
	}
 800e140:	4618      	mov	r0, r3
 800e142:	3718      	adds	r7, #24
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	200013dc 	.word	0x200013dc
 800e14c:	20000f0c 	.word	0x20000f0c
 800e150:	20001394 	.word	0x20001394
 800e154:	20001398 	.word	0x20001398
 800e158:	200013b0 	.word	0x200013b0
 800e15c:	200013c8 	.word	0x200013c8
 800e160:	20009520 	.word	0x20009520

0800e164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b086      	sub	sp, #24
 800e168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e16a:	2300      	movs	r3, #0
 800e16c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e16e:	4b4f      	ldr	r3, [pc, #316]	; (800e2ac <xTaskIncrementTick+0x148>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	f040 808f 	bne.w	800e296 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e178:	4b4d      	ldr	r3, [pc, #308]	; (800e2b0 <xTaskIncrementTick+0x14c>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	3301      	adds	r3, #1
 800e17e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e180:	4a4b      	ldr	r2, [pc, #300]	; (800e2b0 <xTaskIncrementTick+0x14c>)
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d120      	bne.n	800e1ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e18c:	4b49      	ldr	r3, [pc, #292]	; (800e2b4 <xTaskIncrementTick+0x150>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00a      	beq.n	800e1ac <xTaskIncrementTick+0x48>
	__asm volatile
 800e196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	603b      	str	r3, [r7, #0]
}
 800e1a8:	bf00      	nop
 800e1aa:	e7fe      	b.n	800e1aa <xTaskIncrementTick+0x46>
 800e1ac:	4b41      	ldr	r3, [pc, #260]	; (800e2b4 <xTaskIncrementTick+0x150>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	60fb      	str	r3, [r7, #12]
 800e1b2:	4b41      	ldr	r3, [pc, #260]	; (800e2b8 <xTaskIncrementTick+0x154>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4a3f      	ldr	r2, [pc, #252]	; (800e2b4 <xTaskIncrementTick+0x150>)
 800e1b8:	6013      	str	r3, [r2, #0]
 800e1ba:	4a3f      	ldr	r2, [pc, #252]	; (800e2b8 <xTaskIncrementTick+0x154>)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	4b3e      	ldr	r3, [pc, #248]	; (800e2bc <xTaskIncrementTick+0x158>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	4a3d      	ldr	r2, [pc, #244]	; (800e2bc <xTaskIncrementTick+0x158>)
 800e1c8:	6013      	str	r3, [r2, #0]
 800e1ca:	f000 fbcd 	bl	800e968 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e1ce:	4b3c      	ldr	r3, [pc, #240]	; (800e2c0 <xTaskIncrementTick+0x15c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	693a      	ldr	r2, [r7, #16]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d349      	bcc.n	800e26c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1d8:	4b36      	ldr	r3, [pc, #216]	; (800e2b4 <xTaskIncrementTick+0x150>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d104      	bne.n	800e1ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1e2:	4b37      	ldr	r3, [pc, #220]	; (800e2c0 <xTaskIncrementTick+0x15c>)
 800e1e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1e8:	601a      	str	r2, [r3, #0]
					break;
 800e1ea:	e03f      	b.n	800e26c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ec:	4b31      	ldr	r3, [pc, #196]	; (800e2b4 <xTaskIncrementTick+0x150>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e1fc:	693a      	ldr	r2, [r7, #16]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	429a      	cmp	r2, r3
 800e202:	d203      	bcs.n	800e20c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e204:	4a2e      	ldr	r2, [pc, #184]	; (800e2c0 <xTaskIncrementTick+0x15c>)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e20a:	e02f      	b.n	800e26c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	3304      	adds	r3, #4
 800e210:	4618      	mov	r0, r3
 800e212:	f7fe fdc1 	bl	800cd98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d004      	beq.n	800e228 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	3318      	adds	r3, #24
 800e222:	4618      	mov	r0, r3
 800e224:	f7fe fdb8 	bl	800cd98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e22c:	4b25      	ldr	r3, [pc, #148]	; (800e2c4 <xTaskIncrementTick+0x160>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	429a      	cmp	r2, r3
 800e232:	d903      	bls.n	800e23c <xTaskIncrementTick+0xd8>
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e238:	4a22      	ldr	r2, [pc, #136]	; (800e2c4 <xTaskIncrementTick+0x160>)
 800e23a:	6013      	str	r3, [r2, #0]
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e240:	4613      	mov	r3, r2
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	4413      	add	r3, r2
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	4a1f      	ldr	r2, [pc, #124]	; (800e2c8 <xTaskIncrementTick+0x164>)
 800e24a:	441a      	add	r2, r3
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	3304      	adds	r3, #4
 800e250:	4619      	mov	r1, r3
 800e252:	4610      	mov	r0, r2
 800e254:	f7fe fd43 	bl	800ccde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e25c:	4b1b      	ldr	r3, [pc, #108]	; (800e2cc <xTaskIncrementTick+0x168>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e262:	429a      	cmp	r2, r3
 800e264:	d3b8      	bcc.n	800e1d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e266:	2301      	movs	r3, #1
 800e268:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e26a:	e7b5      	b.n	800e1d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e26c:	4b17      	ldr	r3, [pc, #92]	; (800e2cc <xTaskIncrementTick+0x168>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e272:	4915      	ldr	r1, [pc, #84]	; (800e2c8 <xTaskIncrementTick+0x164>)
 800e274:	4613      	mov	r3, r2
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	4413      	add	r3, r2
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	440b      	add	r3, r1
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d901      	bls.n	800e288 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e284:	2301      	movs	r3, #1
 800e286:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e288:	4b11      	ldr	r3, [pc, #68]	; (800e2d0 <xTaskIncrementTick+0x16c>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d007      	beq.n	800e2a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e290:	2301      	movs	r3, #1
 800e292:	617b      	str	r3, [r7, #20]
 800e294:	e004      	b.n	800e2a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e296:	4b0f      	ldr	r3, [pc, #60]	; (800e2d4 <xTaskIncrementTick+0x170>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	3301      	adds	r3, #1
 800e29c:	4a0d      	ldr	r2, [pc, #52]	; (800e2d4 <xTaskIncrementTick+0x170>)
 800e29e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e2a0:	697b      	ldr	r3, [r7, #20]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3718      	adds	r7, #24
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	20001404 	.word	0x20001404
 800e2b0:	200013e0 	.word	0x200013e0
 800e2b4:	20001394 	.word	0x20001394
 800e2b8:	20001398 	.word	0x20001398
 800e2bc:	200013f4 	.word	0x200013f4
 800e2c0:	200013fc 	.word	0x200013fc
 800e2c4:	200013e4 	.word	0x200013e4
 800e2c8:	20000f0c 	.word	0x20000f0c
 800e2cc:	20000f08 	.word	0x20000f08
 800e2d0:	200013f0 	.word	0x200013f0
 800e2d4:	200013ec 	.word	0x200013ec

0800e2d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b085      	sub	sp, #20
 800e2dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e2de:	4b36      	ldr	r3, [pc, #216]	; (800e3b8 <vTaskSwitchContext+0xe0>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d003      	beq.n	800e2ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e2e6:	4b35      	ldr	r3, [pc, #212]	; (800e3bc <vTaskSwitchContext+0xe4>)
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e2ec:	e05e      	b.n	800e3ac <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800e2ee:	4b33      	ldr	r3, [pc, #204]	; (800e3bc <vTaskSwitchContext+0xe4>)
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e2f4:	4b32      	ldr	r3, [pc, #200]	; (800e3c0 <vTaskSwitchContext+0xe8>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4a32      	ldr	r2, [pc, #200]	; (800e3c4 <vTaskSwitchContext+0xec>)
 800e2fa:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e2fc:	4b31      	ldr	r3, [pc, #196]	; (800e3c4 <vTaskSwitchContext+0xec>)
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	4b31      	ldr	r3, [pc, #196]	; (800e3c8 <vTaskSwitchContext+0xf0>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	429a      	cmp	r2, r3
 800e306:	d909      	bls.n	800e31c <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e308:	4b30      	ldr	r3, [pc, #192]	; (800e3cc <vTaskSwitchContext+0xf4>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e30e:	4a2d      	ldr	r2, [pc, #180]	; (800e3c4 <vTaskSwitchContext+0xec>)
 800e310:	6810      	ldr	r0, [r2, #0]
 800e312:	4a2d      	ldr	r2, [pc, #180]	; (800e3c8 <vTaskSwitchContext+0xf0>)
 800e314:	6812      	ldr	r2, [r2, #0]
 800e316:	1a82      	subs	r2, r0, r2
 800e318:	440a      	add	r2, r1
 800e31a:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e31c:	4b29      	ldr	r3, [pc, #164]	; (800e3c4 <vTaskSwitchContext+0xec>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a29      	ldr	r2, [pc, #164]	; (800e3c8 <vTaskSwitchContext+0xf0>)
 800e322:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e324:	4b2a      	ldr	r3, [pc, #168]	; (800e3d0 <vTaskSwitchContext+0xf8>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	60fb      	str	r3, [r7, #12]
 800e32a:	e010      	b.n	800e34e <vTaskSwitchContext+0x76>
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10a      	bne.n	800e348 <vTaskSwitchContext+0x70>
	__asm volatile
 800e332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	607b      	str	r3, [r7, #4]
}
 800e344:	bf00      	nop
 800e346:	e7fe      	b.n	800e346 <vTaskSwitchContext+0x6e>
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	3b01      	subs	r3, #1
 800e34c:	60fb      	str	r3, [r7, #12]
 800e34e:	4921      	ldr	r1, [pc, #132]	; (800e3d4 <vTaskSwitchContext+0xfc>)
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	4613      	mov	r3, r2
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	4413      	add	r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	440b      	add	r3, r1
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d0e4      	beq.n	800e32c <vTaskSwitchContext+0x54>
 800e362:	68fa      	ldr	r2, [r7, #12]
 800e364:	4613      	mov	r3, r2
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	4413      	add	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4a19      	ldr	r2, [pc, #100]	; (800e3d4 <vTaskSwitchContext+0xfc>)
 800e36e:	4413      	add	r3, r2
 800e370:	60bb      	str	r3, [r7, #8]
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	685a      	ldr	r2, [r3, #4]
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	605a      	str	r2, [r3, #4]
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	685a      	ldr	r2, [r3, #4]
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	3308      	adds	r3, #8
 800e384:	429a      	cmp	r2, r3
 800e386:	d104      	bne.n	800e392 <vTaskSwitchContext+0xba>
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	605a      	str	r2, [r3, #4]
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	4a0c      	ldr	r2, [pc, #48]	; (800e3cc <vTaskSwitchContext+0xf4>)
 800e39a:	6013      	str	r3, [r2, #0]
 800e39c:	4a0c      	ldr	r2, [pc, #48]	; (800e3d0 <vTaskSwitchContext+0xf8>)
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e3a2:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <vTaskSwitchContext+0xf4>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	3358      	adds	r3, #88	; 0x58
 800e3a8:	4a0b      	ldr	r2, [pc, #44]	; (800e3d8 <vTaskSwitchContext+0x100>)
 800e3aa:	6013      	str	r3, [r2, #0]
}
 800e3ac:	bf00      	nop
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	20001404 	.word	0x20001404
 800e3bc:	200013f0 	.word	0x200013f0
 800e3c0:	20009520 	.word	0x20009520
 800e3c4:	2000140c 	.word	0x2000140c
 800e3c8:	20001408 	.word	0x20001408
 800e3cc:	20000f08 	.word	0x20000f08
 800e3d0:	200013e4 	.word	0x200013e4
 800e3d4:	20000f0c 	.word	0x20000f0c
 800e3d8:	20000184 	.word	0x20000184

0800e3dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10a      	bne.n	800e402 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f0:	f383 8811 	msr	BASEPRI, r3
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	60fb      	str	r3, [r7, #12]
}
 800e3fe:	bf00      	nop
 800e400:	e7fe      	b.n	800e400 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e402:	4b07      	ldr	r3, [pc, #28]	; (800e420 <vTaskPlaceOnEventList+0x44>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	3318      	adds	r3, #24
 800e408:	4619      	mov	r1, r3
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7fe fc8b 	bl	800cd26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e410:	2101      	movs	r1, #1
 800e412:	6838      	ldr	r0, [r7, #0]
 800e414:	f000 fc94 	bl	800ed40 <prvAddCurrentTaskToDelayedList>
}
 800e418:	bf00      	nop
 800e41a:	3710      	adds	r7, #16
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	20000f08 	.word	0x20000f08

0800e424 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e424:	b580      	push	{r7, lr}
 800e426:	b086      	sub	sp, #24
 800e428:	af00      	add	r7, sp, #0
 800e42a:	60f8      	str	r0, [r7, #12]
 800e42c:	60b9      	str	r1, [r7, #8]
 800e42e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d10a      	bne.n	800e44c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43a:	f383 8811 	msr	BASEPRI, r3
 800e43e:	f3bf 8f6f 	isb	sy
 800e442:	f3bf 8f4f 	dsb	sy
 800e446:	617b      	str	r3, [r7, #20]
}
 800e448:	bf00      	nop
 800e44a:	e7fe      	b.n	800e44a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e44c:	4b0a      	ldr	r3, [pc, #40]	; (800e478 <vTaskPlaceOnEventListRestricted+0x54>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3318      	adds	r3, #24
 800e452:	4619      	mov	r1, r3
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	f7fe fc42 	bl	800ccde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d002      	beq.n	800e466 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e464:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e466:	6879      	ldr	r1, [r7, #4]
 800e468:	68b8      	ldr	r0, [r7, #8]
 800e46a:	f000 fc69 	bl	800ed40 <prvAddCurrentTaskToDelayedList>
	}
 800e46e:	bf00      	nop
 800e470:	3718      	adds	r7, #24
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	20000f08 	.word	0x20000f08

0800e47c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b086      	sub	sp, #24
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d10a      	bne.n	800e4a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	60fb      	str	r3, [r7, #12]
}
 800e4a4:	bf00      	nop
 800e4a6:	e7fe      	b.n	800e4a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	3318      	adds	r3, #24
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fe fc73 	bl	800cd98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4b2:	4b1e      	ldr	r3, [pc, #120]	; (800e52c <xTaskRemoveFromEventList+0xb0>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d11d      	bne.n	800e4f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	3304      	adds	r3, #4
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fe fc6a 	bl	800cd98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4c8:	4b19      	ldr	r3, [pc, #100]	; (800e530 <xTaskRemoveFromEventList+0xb4>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d903      	bls.n	800e4d8 <xTaskRemoveFromEventList+0x5c>
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d4:	4a16      	ldr	r2, [pc, #88]	; (800e530 <xTaskRemoveFromEventList+0xb4>)
 800e4d6:	6013      	str	r3, [r2, #0]
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4dc:	4613      	mov	r3, r2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	4413      	add	r3, r2
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4a13      	ldr	r2, [pc, #76]	; (800e534 <xTaskRemoveFromEventList+0xb8>)
 800e4e6:	441a      	add	r2, r3
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	4610      	mov	r0, r2
 800e4f0:	f7fe fbf5 	bl	800ccde <vListInsertEnd>
 800e4f4:	e005      	b.n	800e502 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	3318      	adds	r3, #24
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	480e      	ldr	r0, [pc, #56]	; (800e538 <xTaskRemoveFromEventList+0xbc>)
 800e4fe:	f7fe fbee 	bl	800ccde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e506:	4b0d      	ldr	r3, [pc, #52]	; (800e53c <xTaskRemoveFromEventList+0xc0>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d905      	bls.n	800e51c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e510:	2301      	movs	r3, #1
 800e512:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e514:	4b0a      	ldr	r3, [pc, #40]	; (800e540 <xTaskRemoveFromEventList+0xc4>)
 800e516:	2201      	movs	r2, #1
 800e518:	601a      	str	r2, [r3, #0]
 800e51a:	e001      	b.n	800e520 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e51c:	2300      	movs	r3, #0
 800e51e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e520:	697b      	ldr	r3, [r7, #20]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3718      	adds	r7, #24
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	20001404 	.word	0x20001404
 800e530:	200013e4 	.word	0x200013e4
 800e534:	20000f0c 	.word	0x20000f0c
 800e538:	2000139c 	.word	0x2000139c
 800e53c:	20000f08 	.word	0x20000f08
 800e540:	200013f0 	.word	0x200013f0

0800e544 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e544:	b480      	push	{r7}
 800e546:	b083      	sub	sp, #12
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e54c:	4b06      	ldr	r3, [pc, #24]	; (800e568 <vTaskInternalSetTimeOutState+0x24>)
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e554:	4b05      	ldr	r3, [pc, #20]	; (800e56c <vTaskInternalSetTimeOutState+0x28>)
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	605a      	str	r2, [r3, #4]
}
 800e55c:	bf00      	nop
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr
 800e568:	200013f4 	.word	0x200013f4
 800e56c:	200013e0 	.word	0x200013e0

0800e570 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b088      	sub	sp, #32
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d10a      	bne.n	800e596 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	613b      	str	r3, [r7, #16]
}
 800e592:	bf00      	nop
 800e594:	e7fe      	b.n	800e594 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10a      	bne.n	800e5b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	60fb      	str	r3, [r7, #12]
}
 800e5ae:	bf00      	nop
 800e5b0:	e7fe      	b.n	800e5b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e5b2:	f001 f897 	bl	800f6e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e5b6:	4b1d      	ldr	r3, [pc, #116]	; (800e62c <xTaskCheckForTimeOut+0xbc>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	69ba      	ldr	r2, [r7, #24]
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5ce:	d102      	bne.n	800e5d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	61fb      	str	r3, [r7, #28]
 800e5d4:	e023      	b.n	800e61e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	4b15      	ldr	r3, [pc, #84]	; (800e630 <xTaskCheckForTimeOut+0xc0>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d007      	beq.n	800e5f2 <xTaskCheckForTimeOut+0x82>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	69ba      	ldr	r2, [r7, #24]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d302      	bcc.n	800e5f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	61fb      	str	r3, [r7, #28]
 800e5f0:	e015      	b.n	800e61e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	697a      	ldr	r2, [r7, #20]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d20b      	bcs.n	800e614 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	1ad2      	subs	r2, r2, r3
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7ff ff9b 	bl	800e544 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e60e:	2300      	movs	r3, #0
 800e610:	61fb      	str	r3, [r7, #28]
 800e612:	e004      	b.n	800e61e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	2200      	movs	r2, #0
 800e618:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e61a:	2301      	movs	r3, #1
 800e61c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e61e:	f001 f891 	bl	800f744 <vPortExitCritical>

	return xReturn;
 800e622:	69fb      	ldr	r3, [r7, #28]
}
 800e624:	4618      	mov	r0, r3
 800e626:	3720      	adds	r7, #32
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}
 800e62c:	200013e0 	.word	0x200013e0
 800e630:	200013f4 	.word	0x200013f4

0800e634 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e634:	b480      	push	{r7}
 800e636:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e638:	4b03      	ldr	r3, [pc, #12]	; (800e648 <vTaskMissedYield+0x14>)
 800e63a:	2201      	movs	r2, #1
 800e63c:	601a      	str	r2, [r3, #0]
}
 800e63e:	bf00      	nop
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr
 800e648:	200013f0 	.word	0x200013f0

0800e64c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e654:	f000 f852 	bl	800e6fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e658:	4b06      	ldr	r3, [pc, #24]	; (800e674 <prvIdleTask+0x28>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d9f9      	bls.n	800e654 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e660:	4b05      	ldr	r3, [pc, #20]	; (800e678 <prvIdleTask+0x2c>)
 800e662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e666:	601a      	str	r2, [r3, #0]
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e670:	e7f0      	b.n	800e654 <prvIdleTask+0x8>
 800e672:	bf00      	nop
 800e674:	20000f0c 	.word	0x20000f0c
 800e678:	e000ed04 	.word	0xe000ed04

0800e67c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e682:	2300      	movs	r3, #0
 800e684:	607b      	str	r3, [r7, #4]
 800e686:	e00c      	b.n	800e6a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	4613      	mov	r3, r2
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4413      	add	r3, r2
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	4a12      	ldr	r2, [pc, #72]	; (800e6dc <prvInitialiseTaskLists+0x60>)
 800e694:	4413      	add	r3, r2
 800e696:	4618      	mov	r0, r3
 800e698:	f7fe faf4 	bl	800cc84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	607b      	str	r3, [r7, #4]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2b37      	cmp	r3, #55	; 0x37
 800e6a6:	d9ef      	bls.n	800e688 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e6a8:	480d      	ldr	r0, [pc, #52]	; (800e6e0 <prvInitialiseTaskLists+0x64>)
 800e6aa:	f7fe faeb 	bl	800cc84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e6ae:	480d      	ldr	r0, [pc, #52]	; (800e6e4 <prvInitialiseTaskLists+0x68>)
 800e6b0:	f7fe fae8 	bl	800cc84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e6b4:	480c      	ldr	r0, [pc, #48]	; (800e6e8 <prvInitialiseTaskLists+0x6c>)
 800e6b6:	f7fe fae5 	bl	800cc84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e6ba:	480c      	ldr	r0, [pc, #48]	; (800e6ec <prvInitialiseTaskLists+0x70>)
 800e6bc:	f7fe fae2 	bl	800cc84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e6c0:	480b      	ldr	r0, [pc, #44]	; (800e6f0 <prvInitialiseTaskLists+0x74>)
 800e6c2:	f7fe fadf 	bl	800cc84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e6c6:	4b0b      	ldr	r3, [pc, #44]	; (800e6f4 <prvInitialiseTaskLists+0x78>)
 800e6c8:	4a05      	ldr	r2, [pc, #20]	; (800e6e0 <prvInitialiseTaskLists+0x64>)
 800e6ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e6cc:	4b0a      	ldr	r3, [pc, #40]	; (800e6f8 <prvInitialiseTaskLists+0x7c>)
 800e6ce:	4a05      	ldr	r2, [pc, #20]	; (800e6e4 <prvInitialiseTaskLists+0x68>)
 800e6d0:	601a      	str	r2, [r3, #0]
}
 800e6d2:	bf00      	nop
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	20000f0c 	.word	0x20000f0c
 800e6e0:	2000136c 	.word	0x2000136c
 800e6e4:	20001380 	.word	0x20001380
 800e6e8:	2000139c 	.word	0x2000139c
 800e6ec:	200013b0 	.word	0x200013b0
 800e6f0:	200013c8 	.word	0x200013c8
 800e6f4:	20001394 	.word	0x20001394
 800e6f8:	20001398 	.word	0x20001398

0800e6fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e702:	e019      	b.n	800e738 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e704:	f000 ffee 	bl	800f6e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e708:	4b10      	ldr	r3, [pc, #64]	; (800e74c <prvCheckTasksWaitingTermination+0x50>)
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	3304      	adds	r3, #4
 800e714:	4618      	mov	r0, r3
 800e716:	f7fe fb3f 	bl	800cd98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e71a:	4b0d      	ldr	r3, [pc, #52]	; (800e750 <prvCheckTasksWaitingTermination+0x54>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	3b01      	subs	r3, #1
 800e720:	4a0b      	ldr	r2, [pc, #44]	; (800e750 <prvCheckTasksWaitingTermination+0x54>)
 800e722:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e724:	4b0b      	ldr	r3, [pc, #44]	; (800e754 <prvCheckTasksWaitingTermination+0x58>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	3b01      	subs	r3, #1
 800e72a:	4a0a      	ldr	r2, [pc, #40]	; (800e754 <prvCheckTasksWaitingTermination+0x58>)
 800e72c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e72e:	f001 f809 	bl	800f744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 f8e4 	bl	800e900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e738:	4b06      	ldr	r3, [pc, #24]	; (800e754 <prvCheckTasksWaitingTermination+0x58>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1e1      	bne.n	800e704 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e740:	bf00      	nop
 800e742:	bf00      	nop
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	200013b0 	.word	0x200013b0
 800e750:	200013dc 	.word	0x200013dc
 800e754:	200013c4 	.word	0x200013c4

0800e758 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b086      	sub	sp, #24
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	607a      	str	r2, [r7, #4]
 800e764:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d102      	bne.n	800e772 <vTaskGetInfo+0x1a>
 800e76c:	4b2c      	ldr	r3, [pc, #176]	; (800e820 <vTaskGetInfo+0xc8>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	e000      	b.n	800e774 <vTaskGetInfo+0x1c>
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	697a      	ldr	r2, [r7, #20]
 800e77a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800e7ae:	78fb      	ldrb	r3, [r7, #3]
 800e7b0:	2b05      	cmp	r3, #5
 800e7b2:	d01a      	beq.n	800e7ea <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800e7b4:	4b1a      	ldr	r3, [pc, #104]	; (800e820 <vTaskGetInfo+0xc8>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	697a      	ldr	r2, [r7, #20]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d103      	bne.n	800e7c6 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	731a      	strb	r2, [r3, #12]
 800e7c4:	e018      	b.n	800e7f8 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	78fa      	ldrb	r2, [r7, #3]
 800e7ca:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800e7cc:	78fb      	ldrb	r3, [r7, #3]
 800e7ce:	2b03      	cmp	r3, #3
 800e7d0:	d112      	bne.n	800e7f8 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800e7d2:	f7ff fb7b 	bl	800decc <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d002      	beq.n	800e7e4 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	2202      	movs	r2, #2
 800e7e2:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800e7e4:	f7ff fb80 	bl	800dee8 <xTaskResumeAll>
 800e7e8:	e006      	b.n	800e7f8 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800e7ea:	6978      	ldr	r0, [r7, #20]
 800e7ec:	f7ff fa94 	bl	800dd18 <eTaskGetState>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d009      	beq.n	800e812 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e802:	4618      	mov	r0, r3
 800e804:	f000 f860 	bl	800e8c8 <prvTaskCheckFreeStackSpace>
 800e808:	4603      	mov	r3, r0
 800e80a:	461a      	mov	r2, r3
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800e810:	e002      	b.n	800e818 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	2200      	movs	r2, #0
 800e816:	841a      	strh	r2, [r3, #32]
	}
 800e818:	bf00      	nop
 800e81a:	3718      	adds	r7, #24
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	20000f08 	.word	0x20000f08

0800e824 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e824:	b580      	push	{r7, lr}
 800e826:	b08a      	sub	sp, #40	; 0x28
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	4613      	mov	r3, r2
 800e830:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800e832:	2300      	movs	r3, #0
 800e834:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d03f      	beq.n	800e8be <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	623b      	str	r3, [r7, #32]
 800e842:	6a3b      	ldr	r3, [r7, #32]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	685a      	ldr	r2, [r3, #4]
 800e848:	6a3b      	ldr	r3, [r7, #32]
 800e84a:	605a      	str	r2, [r3, #4]
 800e84c:	6a3b      	ldr	r3, [r7, #32]
 800e84e:	685a      	ldr	r2, [r3, #4]
 800e850:	6a3b      	ldr	r3, [r7, #32]
 800e852:	3308      	adds	r3, #8
 800e854:	429a      	cmp	r2, r3
 800e856:	d104      	bne.n	800e862 <prvListTasksWithinSingleList+0x3e>
 800e858:	6a3b      	ldr	r3, [r7, #32]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	685a      	ldr	r2, [r3, #4]
 800e85e:	6a3b      	ldr	r3, [r7, #32]
 800e860:	605a      	str	r2, [r3, #4]
 800e862:	6a3b      	ldr	r3, [r7, #32]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	68db      	ldr	r3, [r3, #12]
 800e868:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	61bb      	str	r3, [r7, #24]
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	685a      	ldr	r2, [r3, #4]
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	605a      	str	r2, [r3, #4]
 800e878:	69bb      	ldr	r3, [r7, #24]
 800e87a:	685a      	ldr	r2, [r3, #4]
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	3308      	adds	r3, #8
 800e880:	429a      	cmp	r2, r3
 800e882:	d104      	bne.n	800e88e <prvListTasksWithinSingleList+0x6a>
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	685a      	ldr	r2, [r3, #4]
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	605a      	str	r2, [r3, #4]
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800e896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e898:	4613      	mov	r3, r2
 800e89a:	00db      	lsls	r3, r3, #3
 800e89c:	4413      	add	r3, r2
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	1899      	adds	r1, r3, r2
 800e8a6:	79fb      	ldrb	r3, [r7, #7]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	6978      	ldr	r0, [r7, #20]
 800e8ac:	f7ff ff54 	bl	800e758 <vTaskGetInfo>
				uxTask++;
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800e8b6:	697a      	ldr	r2, [r7, #20]
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d1d5      	bne.n	800e86a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800e8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3728      	adds	r7, #40	; 0x28
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b085      	sub	sp, #20
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e8d4:	e005      	b.n	800e8e2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	607b      	str	r3, [r7, #4]
			ulCount++;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	2ba5      	cmp	r3, #165	; 0xa5
 800e8e8:	d0f5      	beq.n	800e8d6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	089b      	lsrs	r3, r3, #2
 800e8ee:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	b29b      	uxth	r3, r3
	}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3358      	adds	r3, #88	; 0x58
 800e90c:	4618      	mov	r0, r3
 800e90e:	f002 fd4f 	bl	80113b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d108      	bne.n	800e92e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e920:	4618      	mov	r0, r3
 800e922:	f001 f8cd 	bl	800fac0 <vPortFree>
				vPortFree( pxTCB );
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f001 f8ca 	bl	800fac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e92c:	e018      	b.n	800e960 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e934:	2b01      	cmp	r3, #1
 800e936:	d103      	bne.n	800e940 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f001 f8c1 	bl	800fac0 <vPortFree>
	}
 800e93e:	e00f      	b.n	800e960 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e946:	2b02      	cmp	r3, #2
 800e948:	d00a      	beq.n	800e960 <prvDeleteTCB+0x60>
	__asm volatile
 800e94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	60fb      	str	r3, [r7, #12]
}
 800e95c:	bf00      	nop
 800e95e:	e7fe      	b.n	800e95e <prvDeleteTCB+0x5e>
	}
 800e960:	bf00      	nop
 800e962:	3710      	adds	r7, #16
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e96e:	4b0c      	ldr	r3, [pc, #48]	; (800e9a0 <prvResetNextTaskUnblockTime+0x38>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d104      	bne.n	800e982 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e978:	4b0a      	ldr	r3, [pc, #40]	; (800e9a4 <prvResetNextTaskUnblockTime+0x3c>)
 800e97a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e97e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e980:	e008      	b.n	800e994 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e982:	4b07      	ldr	r3, [pc, #28]	; (800e9a0 <prvResetNextTaskUnblockTime+0x38>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	4a04      	ldr	r2, [pc, #16]	; (800e9a4 <prvResetNextTaskUnblockTime+0x3c>)
 800e992:	6013      	str	r3, [r2, #0]
}
 800e994:	bf00      	nop
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr
 800e9a0:	20001394 	.word	0x20001394
 800e9a4:	200013fc 	.word	0x200013fc

0800e9a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e9ae:	4b0b      	ldr	r3, [pc, #44]	; (800e9dc <xTaskGetSchedulerState+0x34>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d102      	bne.n	800e9bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	607b      	str	r3, [r7, #4]
 800e9ba:	e008      	b.n	800e9ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9bc:	4b08      	ldr	r3, [pc, #32]	; (800e9e0 <xTaskGetSchedulerState+0x38>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d102      	bne.n	800e9ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e9c4:	2302      	movs	r3, #2
 800e9c6:	607b      	str	r3, [r7, #4]
 800e9c8:	e001      	b.n	800e9ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e9ce:	687b      	ldr	r3, [r7, #4]
	}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	370c      	adds	r7, #12
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr
 800e9dc:	200013e8 	.word	0x200013e8
 800e9e0:	20001404 	.word	0x20001404

0800e9e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b086      	sub	sp, #24
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d056      	beq.n	800eaa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e9fa:	4b2e      	ldr	r3, [pc, #184]	; (800eab4 <xTaskPriorityDisinherit+0xd0>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	693a      	ldr	r2, [r7, #16]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d00a      	beq.n	800ea1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ea04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea08:	f383 8811 	msr	BASEPRI, r3
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	60fb      	str	r3, [r7, #12]
}
 800ea16:	bf00      	nop
 800ea18:	e7fe      	b.n	800ea18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d10a      	bne.n	800ea38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ea22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea26:	f383 8811 	msr	BASEPRI, r3
 800ea2a:	f3bf 8f6f 	isb	sy
 800ea2e:	f3bf 8f4f 	dsb	sy
 800ea32:	60bb      	str	r3, [r7, #8]
}
 800ea34:	bf00      	nop
 800ea36:	e7fe      	b.n	800ea36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea3c:	1e5a      	subs	r2, r3, #1
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d02c      	beq.n	800eaa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d128      	bne.n	800eaa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	3304      	adds	r3, #4
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fe f99c 	bl	800cd98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea78:	4b0f      	ldr	r3, [pc, #60]	; (800eab8 <xTaskPriorityDisinherit+0xd4>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d903      	bls.n	800ea88 <xTaskPriorityDisinherit+0xa4>
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea84:	4a0c      	ldr	r2, [pc, #48]	; (800eab8 <xTaskPriorityDisinherit+0xd4>)
 800ea86:	6013      	str	r3, [r2, #0]
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4413      	add	r3, r2
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4a09      	ldr	r2, [pc, #36]	; (800eabc <xTaskPriorityDisinherit+0xd8>)
 800ea96:	441a      	add	r2, r3
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	f7fe f91d 	bl	800ccde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eaa8:	697b      	ldr	r3, [r7, #20]
	}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3718      	adds	r7, #24
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	20000f08 	.word	0x20000f08
 800eab8:	200013e4 	.word	0x200013e4
 800eabc:	20000f0c 	.word	0x20000f0c

0800eac0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800eaca:	6839      	ldr	r1, [r7, #0]
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f002 fd4d 	bl	801156c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f7f1 fb7c 	bl	80001d0 <strlen>
 800ead8:	60f8      	str	r0, [r7, #12]
 800eada:	e007      	b.n	800eaec <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	4413      	add	r3, r2
 800eae2:	2220      	movs	r2, #32
 800eae4:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	3301      	adds	r3, #1
 800eaea:	60fb      	str	r3, [r7, #12]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2b0e      	cmp	r3, #14
 800eaf0:	d9f4      	bls.n	800eadc <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	2200      	movs	r2, #0
 800eafa:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	4413      	add	r3, r2
	}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
	...

0800eb0c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800eb0c:	b590      	push	{r4, r7, lr}
 800eb0e:	b089      	sub	sp, #36	; 0x24
 800eb10:	af02      	add	r7, sp, #8
 800eb12:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800eb1a:	4b45      	ldr	r3, [pc, #276]	; (800ec30 <vTaskList+0x124>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800eb20:	4b43      	ldr	r3, [pc, #268]	; (800ec30 <vTaskList+0x124>)
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	4613      	mov	r3, r2
 800eb26:	00db      	lsls	r3, r3, #3
 800eb28:	4413      	add	r3, r2
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f000 fefb 	bl	800f928 <pvPortMalloc>
 800eb32:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d076      	beq.n	800ec28 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	68f9      	ldr	r1, [r7, #12]
 800eb3e:	68b8      	ldr	r0, [r7, #8]
 800eb40:	f7ff fa80 	bl	800e044 <uxTaskGetSystemState>
 800eb44:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800eb46:	2300      	movs	r3, #0
 800eb48:	617b      	str	r3, [r7, #20]
 800eb4a:	e066      	b.n	800ec1a <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	00db      	lsls	r3, r3, #3
 800eb52:	4413      	add	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	461a      	mov	r2, r3
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	7b1b      	ldrb	r3, [r3, #12]
 800eb5e:	2b04      	cmp	r3, #4
 800eb60:	d81b      	bhi.n	800eb9a <vTaskList+0x8e>
 800eb62:	a201      	add	r2, pc, #4	; (adr r2, 800eb68 <vTaskList+0x5c>)
 800eb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb68:	0800eb7d 	.word	0x0800eb7d
 800eb6c:	0800eb83 	.word	0x0800eb83
 800eb70:	0800eb89 	.word	0x0800eb89
 800eb74:	0800eb8f 	.word	0x0800eb8f
 800eb78:	0800eb95 	.word	0x0800eb95
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800eb7c:	2358      	movs	r3, #88	; 0x58
 800eb7e:	74fb      	strb	r3, [r7, #19]
										break;
 800eb80:	e00e      	b.n	800eba0 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800eb82:	2352      	movs	r3, #82	; 0x52
 800eb84:	74fb      	strb	r3, [r7, #19]
										break;
 800eb86:	e00b      	b.n	800eba0 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800eb88:	2342      	movs	r3, #66	; 0x42
 800eb8a:	74fb      	strb	r3, [r7, #19]
										break;
 800eb8c:	e008      	b.n	800eba0 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800eb8e:	2353      	movs	r3, #83	; 0x53
 800eb90:	74fb      	strb	r3, [r7, #19]
										break;
 800eb92:	e005      	b.n	800eba0 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800eb94:	2344      	movs	r3, #68	; 0x44
 800eb96:	74fb      	strb	r3, [r7, #19]
										break;
 800eb98:	e002      	b.n	800eba0 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	74fb      	strb	r3, [r7, #19]
										break;
 800eb9e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800eba0:	697a      	ldr	r2, [r7, #20]
 800eba2:	4613      	mov	r3, r2
 800eba4:	00db      	lsls	r3, r3, #3
 800eba6:	4413      	add	r3, r2
 800eba8:	009b      	lsls	r3, r3, #2
 800ebaa:	461a      	mov	r2, r3
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	4413      	add	r3, r2
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7ff ff83 	bl	800eac0 <prvWriteNameToBuffer>
 800ebba:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ebbc:	7cf9      	ldrb	r1, [r7, #19]
 800ebbe:	697a      	ldr	r2, [r7, #20]
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	00db      	lsls	r3, r3, #3
 800ebc4:	4413      	add	r3, r2
 800ebc6:	009b      	lsls	r3, r3, #2
 800ebc8:	461a      	mov	r2, r3
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	4413      	add	r3, r2
 800ebce:	6918      	ldr	r0, [r3, #16]
 800ebd0:	697a      	ldr	r2, [r7, #20]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	00db      	lsls	r3, r3, #3
 800ebd6:	4413      	add	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	461a      	mov	r2, r3
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	4413      	add	r3, r2
 800ebe0:	8c1b      	ldrh	r3, [r3, #32]
 800ebe2:	461c      	mov	r4, r3
 800ebe4:	697a      	ldr	r2, [r7, #20]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	00db      	lsls	r3, r3, #3
 800ebea:	4413      	add	r3, r2
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	461a      	mov	r2, r3
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	689b      	ldr	r3, [r3, #8]
 800ebf6:	9301      	str	r3, [sp, #4]
 800ebf8:	9400      	str	r4, [sp, #0]
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	460a      	mov	r2, r1
 800ebfe:	490d      	ldr	r1, [pc, #52]	; (800ec34 <vTaskList+0x128>)
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f002 fc41 	bl	8011488 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7f1 fae2 	bl	80001d0 <strlen>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4413      	add	r3, r2
 800ec12:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	3301      	adds	r3, #1
 800ec18:	617b      	str	r3, [r7, #20]
 800ec1a:	697a      	ldr	r2, [r7, #20]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d394      	bcc.n	800eb4c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800ec22:	68b8      	ldr	r0, [r7, #8]
 800ec24:	f000 ff4c 	bl	800fac0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec28:	bf00      	nop
 800ec2a:	371c      	adds	r7, #28
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd90      	pop	{r4, r7, pc}
 800ec30:	200013dc 	.word	0x200013dc
 800ec34:	080138d0 	.word	0x080138d0

0800ec38 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b088      	sub	sp, #32
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ec46:	4b3a      	ldr	r3, [pc, #232]	; (800ed30 <vTaskGetRunTimeStats+0xf8>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800ec4c:	4b38      	ldr	r3, [pc, #224]	; (800ed30 <vTaskGetRunTimeStats+0xf8>)
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	4613      	mov	r3, r2
 800ec52:	00db      	lsls	r3, r3, #3
 800ec54:	4413      	add	r3, r2
 800ec56:	009b      	lsls	r3, r3, #2
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f000 fe65 	bl	800f928 <pvPortMalloc>
 800ec5e:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d05f      	beq.n	800ed26 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ec66:	f107 030c 	add.w	r3, r7, #12
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	69b9      	ldr	r1, [r7, #24]
 800ec6e:	6978      	ldr	r0, [r7, #20]
 800ec70:	f7ff f9e8 	bl	800e044 <uxTaskGetSystemState>
 800ec74:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	4a2e      	ldr	r2, [pc, #184]	; (800ed34 <vTaskGetRunTimeStats+0xfc>)
 800ec7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ec7e:	095b      	lsrs	r3, r3, #5
 800ec80:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d04b      	beq.n	800ed20 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ec88:	2300      	movs	r3, #0
 800ec8a:	61fb      	str	r3, [r7, #28]
 800ec8c:	e044      	b.n	800ed18 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ec8e:	69fa      	ldr	r2, [r7, #28]
 800ec90:	4613      	mov	r3, r2
 800ec92:	00db      	lsls	r3, r3, #3
 800ec94:	4413      	add	r3, r2
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	461a      	mov	r2, r3
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	699a      	ldr	r2, [r3, #24]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800eca6:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800eca8:	69fa      	ldr	r2, [r7, #28]
 800ecaa:	4613      	mov	r3, r2
 800ecac:	00db      	lsls	r3, r3, #3
 800ecae:	4413      	add	r3, r2
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	4413      	add	r3, r2
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	4619      	mov	r1, r3
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f7ff feff 	bl	800eac0 <prvWriteNameToBuffer>
 800ecc2:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00e      	beq.n	800ece8 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ecca:	69fa      	ldr	r2, [r7, #28]
 800eccc:	4613      	mov	r3, r2
 800ecce:	00db      	lsls	r3, r3, #3
 800ecd0:	4413      	add	r3, r2
 800ecd2:	009b      	lsls	r3, r3, #2
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	4413      	add	r3, r2
 800ecda:	699a      	ldr	r2, [r3, #24]
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	4916      	ldr	r1, [pc, #88]	; (800ed38 <vTaskGetRunTimeStats+0x100>)
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f002 fbd1 	bl	8011488 <siprintf>
 800ece6:	e00d      	b.n	800ed04 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ece8:	69fa      	ldr	r2, [r7, #28]
 800ecea:	4613      	mov	r3, r2
 800ecec:	00db      	lsls	r3, r3, #3
 800ecee:	4413      	add	r3, r2
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	461a      	mov	r2, r3
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	699b      	ldr	r3, [r3, #24]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	490f      	ldr	r1, [pc, #60]	; (800ed3c <vTaskGetRunTimeStats+0x104>)
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f002 fbc2 	bl	8011488 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7f1 fa63 	bl	80001d0 <strlen>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	4413      	add	r3, r2
 800ed10:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	3301      	adds	r3, #1
 800ed16:	61fb      	str	r3, [r7, #28]
 800ed18:	69fa      	ldr	r2, [r7, #28]
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d3b6      	bcc.n	800ec8e <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800ed20:	6978      	ldr	r0, [r7, #20]
 800ed22:	f000 fecd 	bl	800fac0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed26:	bf00      	nop
 800ed28:	3720      	adds	r7, #32
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	200013dc 	.word	0x200013dc
 800ed34:	51eb851f 	.word	0x51eb851f
 800ed38:	080138e0 	.word	0x080138e0
 800ed3c:	080138ec 	.word	0x080138ec

0800ed40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ed4a:	4b21      	ldr	r3, [pc, #132]	; (800edd0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed50:	4b20      	ldr	r3, [pc, #128]	; (800edd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	3304      	adds	r3, #4
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fe f81e 	bl	800cd98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed62:	d10a      	bne.n	800ed7a <prvAddCurrentTaskToDelayedList+0x3a>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d007      	beq.n	800ed7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed6a:	4b1a      	ldr	r3, [pc, #104]	; (800edd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	4619      	mov	r1, r3
 800ed72:	4819      	ldr	r0, [pc, #100]	; (800edd8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ed74:	f7fd ffb3 	bl	800ccde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ed78:	e026      	b.n	800edc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ed7a:	68fa      	ldr	r2, [r7, #12]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4413      	add	r3, r2
 800ed80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed82:	4b14      	ldr	r3, [pc, #80]	; (800edd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d209      	bcs.n	800eda6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed92:	4b12      	ldr	r3, [pc, #72]	; (800eddc <prvAddCurrentTaskToDelayedList+0x9c>)
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	4b0f      	ldr	r3, [pc, #60]	; (800edd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	4610      	mov	r0, r2
 800eda0:	f7fd ffc1 	bl	800cd26 <vListInsert>
}
 800eda4:	e010      	b.n	800edc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eda6:	4b0e      	ldr	r3, [pc, #56]	; (800ede0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	4b0a      	ldr	r3, [pc, #40]	; (800edd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	3304      	adds	r3, #4
 800edb0:	4619      	mov	r1, r3
 800edb2:	4610      	mov	r0, r2
 800edb4:	f7fd ffb7 	bl	800cd26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800edb8:	4b0a      	ldr	r3, [pc, #40]	; (800ede4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	68ba      	ldr	r2, [r7, #8]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d202      	bcs.n	800edc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800edc2:	4a08      	ldr	r2, [pc, #32]	; (800ede4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	6013      	str	r3, [r2, #0]
}
 800edc8:	bf00      	nop
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	200013e0 	.word	0x200013e0
 800edd4:	20000f08 	.word	0x20000f08
 800edd8:	200013c8 	.word	0x200013c8
 800eddc:	20001398 	.word	0x20001398
 800ede0:	20001394 	.word	0x20001394
 800ede4:	200013fc 	.word	0x200013fc

0800ede8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b08a      	sub	sp, #40	; 0x28
 800edec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800edee:	2300      	movs	r3, #0
 800edf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800edf2:	f000 fb07 	bl	800f404 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800edf6:	4b1c      	ldr	r3, [pc, #112]	; (800ee68 <xTimerCreateTimerTask+0x80>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d021      	beq.n	800ee42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800edfe:	2300      	movs	r3, #0
 800ee00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ee02:	2300      	movs	r3, #0
 800ee04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ee06:	1d3a      	adds	r2, r7, #4
 800ee08:	f107 0108 	add.w	r1, r7, #8
 800ee0c:	f107 030c 	add.w	r3, r7, #12
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fd ff1d 	bl	800cc50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ee16:	6879      	ldr	r1, [r7, #4]
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	68fa      	ldr	r2, [r7, #12]
 800ee1c:	9202      	str	r2, [sp, #8]
 800ee1e:	9301      	str	r3, [sp, #4]
 800ee20:	2302      	movs	r3, #2
 800ee22:	9300      	str	r3, [sp, #0]
 800ee24:	2300      	movs	r3, #0
 800ee26:	460a      	mov	r2, r1
 800ee28:	4910      	ldr	r1, [pc, #64]	; (800ee6c <xTimerCreateTimerTask+0x84>)
 800ee2a:	4811      	ldr	r0, [pc, #68]	; (800ee70 <xTimerCreateTimerTask+0x88>)
 800ee2c:	f7fe fd84 	bl	800d938 <xTaskCreateStatic>
 800ee30:	4603      	mov	r3, r0
 800ee32:	4a10      	ldr	r2, [pc, #64]	; (800ee74 <xTimerCreateTimerTask+0x8c>)
 800ee34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ee36:	4b0f      	ldr	r3, [pc, #60]	; (800ee74 <xTimerCreateTimerTask+0x8c>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d001      	beq.n	800ee42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10a      	bne.n	800ee5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ee48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4c:	f383 8811 	msr	BASEPRI, r3
 800ee50:	f3bf 8f6f 	isb	sy
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	613b      	str	r3, [r7, #16]
}
 800ee5a:	bf00      	nop
 800ee5c:	e7fe      	b.n	800ee5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ee5e:	697b      	ldr	r3, [r7, #20]
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3718      	adds	r7, #24
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	20001440 	.word	0x20001440
 800ee6c:	080138f8 	.word	0x080138f8
 800ee70:	0800efad 	.word	0x0800efad
 800ee74:	20001444 	.word	0x20001444

0800ee78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b08a      	sub	sp, #40	; 0x28
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
 800ee84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ee86:	2300      	movs	r3, #0
 800ee88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d10a      	bne.n	800eea6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ee90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee94:	f383 8811 	msr	BASEPRI, r3
 800ee98:	f3bf 8f6f 	isb	sy
 800ee9c:	f3bf 8f4f 	dsb	sy
 800eea0:	623b      	str	r3, [r7, #32]
}
 800eea2:	bf00      	nop
 800eea4:	e7fe      	b.n	800eea4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eea6:	4b1a      	ldr	r3, [pc, #104]	; (800ef10 <xTimerGenericCommand+0x98>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d02a      	beq.n	800ef04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	2b05      	cmp	r3, #5
 800eebe:	dc18      	bgt.n	800eef2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eec0:	f7ff fd72 	bl	800e9a8 <xTaskGetSchedulerState>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b02      	cmp	r3, #2
 800eec8:	d109      	bne.n	800eede <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eeca:	4b11      	ldr	r3, [pc, #68]	; (800ef10 <xTimerGenericCommand+0x98>)
 800eecc:	6818      	ldr	r0, [r3, #0]
 800eece:	f107 0110 	add.w	r1, r7, #16
 800eed2:	2300      	movs	r3, #0
 800eed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eed6:	f7fe f8c7 	bl	800d068 <xQueueGenericSend>
 800eeda:	6278      	str	r0, [r7, #36]	; 0x24
 800eedc:	e012      	b.n	800ef04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eede:	4b0c      	ldr	r3, [pc, #48]	; (800ef10 <xTimerGenericCommand+0x98>)
 800eee0:	6818      	ldr	r0, [r3, #0]
 800eee2:	f107 0110 	add.w	r1, r7, #16
 800eee6:	2300      	movs	r3, #0
 800eee8:	2200      	movs	r2, #0
 800eeea:	f7fe f8bd 	bl	800d068 <xQueueGenericSend>
 800eeee:	6278      	str	r0, [r7, #36]	; 0x24
 800eef0:	e008      	b.n	800ef04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eef2:	4b07      	ldr	r3, [pc, #28]	; (800ef10 <xTimerGenericCommand+0x98>)
 800eef4:	6818      	ldr	r0, [r3, #0]
 800eef6:	f107 0110 	add.w	r1, r7, #16
 800eefa:	2300      	movs	r3, #0
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	f7fe f9b1 	bl	800d264 <xQueueGenericSendFromISR>
 800ef02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ef04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3728      	adds	r7, #40	; 0x28
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	20001440 	.word	0x20001440

0800ef14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b088      	sub	sp, #32
 800ef18:	af02      	add	r7, sp, #8
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef1e:	4b22      	ldr	r3, [pc, #136]	; (800efa8 <prvProcessExpiredTimer+0x94>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	3304      	adds	r3, #4
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7fd ff33 	bl	800cd98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef38:	f003 0304 	and.w	r3, r3, #4
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d022      	beq.n	800ef86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	699a      	ldr	r2, [r3, #24]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	18d1      	adds	r1, r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	683a      	ldr	r2, [r7, #0]
 800ef4c:	6978      	ldr	r0, [r7, #20]
 800ef4e:	f000 f8d1 	bl	800f0f4 <prvInsertTimerInActiveList>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d01f      	beq.n	800ef98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef58:	2300      	movs	r3, #0
 800ef5a:	9300      	str	r3, [sp, #0]
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	2100      	movs	r1, #0
 800ef62:	6978      	ldr	r0, [r7, #20]
 800ef64:	f7ff ff88 	bl	800ee78 <xTimerGenericCommand>
 800ef68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d113      	bne.n	800ef98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ef70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef74:	f383 8811 	msr	BASEPRI, r3
 800ef78:	f3bf 8f6f 	isb	sy
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	60fb      	str	r3, [r7, #12]
}
 800ef82:	bf00      	nop
 800ef84:	e7fe      	b.n	800ef84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef8c:	f023 0301 	bic.w	r3, r3, #1
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	6a1b      	ldr	r3, [r3, #32]
 800ef9c:	6978      	ldr	r0, [r7, #20]
 800ef9e:	4798      	blx	r3
}
 800efa0:	bf00      	nop
 800efa2:	3718      	adds	r7, #24
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	20001438 	.word	0x20001438

0800efac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800efb4:	f107 0308 	add.w	r3, r7, #8
 800efb8:	4618      	mov	r0, r3
 800efba:	f000 f857 	bl	800f06c <prvGetNextExpireTime>
 800efbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	4619      	mov	r1, r3
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f000 f803 	bl	800efd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800efca:	f000 f8d5 	bl	800f178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800efce:	e7f1      	b.n	800efb4 <prvTimerTask+0x8>

0800efd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800efda:	f7fe ff77 	bl	800decc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efde:	f107 0308 	add.w	r3, r7, #8
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 f866 	bl	800f0b4 <prvSampleTimeNow>
 800efe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d130      	bne.n	800f052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d10a      	bne.n	800f00c <prvProcessTimerOrBlockTask+0x3c>
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	429a      	cmp	r2, r3
 800effc:	d806      	bhi.n	800f00c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800effe:	f7fe ff73 	bl	800dee8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f002:	68f9      	ldr	r1, [r7, #12]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f7ff ff85 	bl	800ef14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f00a:	e024      	b.n	800f056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d008      	beq.n	800f024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f012:	4b13      	ldr	r3, [pc, #76]	; (800f060 <prvProcessTimerOrBlockTask+0x90>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d101      	bne.n	800f020 <prvProcessTimerOrBlockTask+0x50>
 800f01c:	2301      	movs	r3, #1
 800f01e:	e000      	b.n	800f022 <prvProcessTimerOrBlockTask+0x52>
 800f020:	2300      	movs	r3, #0
 800f022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f024:	4b0f      	ldr	r3, [pc, #60]	; (800f064 <prvProcessTimerOrBlockTask+0x94>)
 800f026:	6818      	ldr	r0, [r3, #0]
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	4619      	mov	r1, r3
 800f032:	f7fe fc4d 	bl	800d8d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f036:	f7fe ff57 	bl	800dee8 <xTaskResumeAll>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10a      	bne.n	800f056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f040:	4b09      	ldr	r3, [pc, #36]	; (800f068 <prvProcessTimerOrBlockTask+0x98>)
 800f042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f046:	601a      	str	r2, [r3, #0]
 800f048:	f3bf 8f4f 	dsb	sy
 800f04c:	f3bf 8f6f 	isb	sy
}
 800f050:	e001      	b.n	800f056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f052:	f7fe ff49 	bl	800dee8 <xTaskResumeAll>
}
 800f056:	bf00      	nop
 800f058:	3710      	adds	r7, #16
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	2000143c 	.word	0x2000143c
 800f064:	20001440 	.word	0x20001440
 800f068:	e000ed04 	.word	0xe000ed04

0800f06c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f06c:	b480      	push	{r7}
 800f06e:	b085      	sub	sp, #20
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f074:	4b0e      	ldr	r3, [pc, #56]	; (800f0b0 <prvGetNextExpireTime+0x44>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d101      	bne.n	800f082 <prvGetNextExpireTime+0x16>
 800f07e:	2201      	movs	r2, #1
 800f080:	e000      	b.n	800f084 <prvGetNextExpireTime+0x18>
 800f082:	2200      	movs	r2, #0
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d105      	bne.n	800f09c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f090:	4b07      	ldr	r3, [pc, #28]	; (800f0b0 <prvGetNextExpireTime+0x44>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	60fb      	str	r3, [r7, #12]
 800f09a:	e001      	b.n	800f0a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f09c:	2300      	movs	r3, #0
 800f09e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3714      	adds	r7, #20
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr
 800f0ae:	bf00      	nop
 800f0b0:	20001438 	.word	0x20001438

0800f0b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f0bc:	f7fe ffb2 	bl	800e024 <xTaskGetTickCount>
 800f0c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f0c2:	4b0b      	ldr	r3, [pc, #44]	; (800f0f0 <prvSampleTimeNow+0x3c>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d205      	bcs.n	800f0d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f0cc:	f000 f936 	bl	800f33c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	601a      	str	r2, [r3, #0]
 800f0d6:	e002      	b.n	800f0de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f0de:	4a04      	ldr	r2, [pc, #16]	; (800f0f0 <prvSampleTimeNow+0x3c>)
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3710      	adds	r7, #16
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	20001448 	.word	0x20001448

0800f0f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b086      	sub	sp, #24
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
 800f100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f102:	2300      	movs	r3, #0
 800f104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	68ba      	ldr	r2, [r7, #8]
 800f10a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	429a      	cmp	r2, r3
 800f118:	d812      	bhi.n	800f140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	1ad2      	subs	r2, r2, r3
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	699b      	ldr	r3, [r3, #24]
 800f124:	429a      	cmp	r2, r3
 800f126:	d302      	bcc.n	800f12e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f128:	2301      	movs	r3, #1
 800f12a:	617b      	str	r3, [r7, #20]
 800f12c:	e01b      	b.n	800f166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f12e:	4b10      	ldr	r3, [pc, #64]	; (800f170 <prvInsertTimerInActiveList+0x7c>)
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	3304      	adds	r3, #4
 800f136:	4619      	mov	r1, r3
 800f138:	4610      	mov	r0, r2
 800f13a:	f7fd fdf4 	bl	800cd26 <vListInsert>
 800f13e:	e012      	b.n	800f166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	429a      	cmp	r2, r3
 800f146:	d206      	bcs.n	800f156 <prvInsertTimerInActiveList+0x62>
 800f148:	68ba      	ldr	r2, [r7, #8]
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d302      	bcc.n	800f156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f150:	2301      	movs	r3, #1
 800f152:	617b      	str	r3, [r7, #20]
 800f154:	e007      	b.n	800f166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f156:	4b07      	ldr	r3, [pc, #28]	; (800f174 <prvInsertTimerInActiveList+0x80>)
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	3304      	adds	r3, #4
 800f15e:	4619      	mov	r1, r3
 800f160:	4610      	mov	r0, r2
 800f162:	f7fd fde0 	bl	800cd26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f166:	697b      	ldr	r3, [r7, #20]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3718      	adds	r7, #24
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	2000143c 	.word	0x2000143c
 800f174:	20001438 	.word	0x20001438

0800f178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b08e      	sub	sp, #56	; 0x38
 800f17c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f17e:	e0ca      	b.n	800f316 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2b00      	cmp	r3, #0
 800f184:	da18      	bge.n	800f1b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f186:	1d3b      	adds	r3, r7, #4
 800f188:	3304      	adds	r3, #4
 800f18a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d10a      	bne.n	800f1a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f196:	f383 8811 	msr	BASEPRI, r3
 800f19a:	f3bf 8f6f 	isb	sy
 800f19e:	f3bf 8f4f 	dsb	sy
 800f1a2:	61fb      	str	r3, [r7, #28]
}
 800f1a4:	bf00      	nop
 800f1a6:	e7fe      	b.n	800f1a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1ae:	6850      	ldr	r0, [r2, #4]
 800f1b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1b2:	6892      	ldr	r2, [r2, #8]
 800f1b4:	4611      	mov	r1, r2
 800f1b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	f2c0 80aa 	blt.w	800f314 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c6:	695b      	ldr	r3, [r3, #20]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d004      	beq.n	800f1d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	3304      	adds	r3, #4
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7fd fde1 	bl	800cd98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1d6:	463b      	mov	r3, r7
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7ff ff6b 	bl	800f0b4 <prvSampleTimeNow>
 800f1de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b09      	cmp	r3, #9
 800f1e4:	f200 8097 	bhi.w	800f316 <prvProcessReceivedCommands+0x19e>
 800f1e8:	a201      	add	r2, pc, #4	; (adr r2, 800f1f0 <prvProcessReceivedCommands+0x78>)
 800f1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ee:	bf00      	nop
 800f1f0:	0800f219 	.word	0x0800f219
 800f1f4:	0800f219 	.word	0x0800f219
 800f1f8:	0800f219 	.word	0x0800f219
 800f1fc:	0800f28d 	.word	0x0800f28d
 800f200:	0800f2a1 	.word	0x0800f2a1
 800f204:	0800f2eb 	.word	0x0800f2eb
 800f208:	0800f219 	.word	0x0800f219
 800f20c:	0800f219 	.word	0x0800f219
 800f210:	0800f28d 	.word	0x0800f28d
 800f214:	0800f2a1 	.word	0x0800f2a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f21e:	f043 0301 	orr.w	r3, r3, #1
 800f222:	b2da      	uxtb	r2, r3
 800f224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f22a:	68ba      	ldr	r2, [r7, #8]
 800f22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22e:	699b      	ldr	r3, [r3, #24]
 800f230:	18d1      	adds	r1, r2, r3
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f238:	f7ff ff5c 	bl	800f0f4 <prvInsertTimerInActiveList>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d069      	beq.n	800f316 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f244:	6a1b      	ldr	r3, [r3, #32]
 800f246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f248:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f250:	f003 0304 	and.w	r3, r3, #4
 800f254:	2b00      	cmp	r3, #0
 800f256:	d05e      	beq.n	800f316 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f258:	68ba      	ldr	r2, [r7, #8]
 800f25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25c:	699b      	ldr	r3, [r3, #24]
 800f25e:	441a      	add	r2, r3
 800f260:	2300      	movs	r3, #0
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	2300      	movs	r3, #0
 800f266:	2100      	movs	r1, #0
 800f268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f26a:	f7ff fe05 	bl	800ee78 <xTimerGenericCommand>
 800f26e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f270:	6a3b      	ldr	r3, [r7, #32]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d14f      	bne.n	800f316 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27a:	f383 8811 	msr	BASEPRI, r3
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	f3bf 8f4f 	dsb	sy
 800f286:	61bb      	str	r3, [r7, #24]
}
 800f288:	bf00      	nop
 800f28a:	e7fe      	b.n	800f28a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f292:	f023 0301 	bic.w	r3, r3, #1
 800f296:	b2da      	uxtb	r2, r3
 800f298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f29e:	e03a      	b.n	800f316 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2a6:	f043 0301 	orr.w	r3, r3, #1
 800f2aa:	b2da      	uxtb	r2, r3
 800f2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f2b2:	68ba      	ldr	r2, [r7, #8]
 800f2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ba:	699b      	ldr	r3, [r3, #24]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d10a      	bne.n	800f2d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c4:	f383 8811 	msr	BASEPRI, r3
 800f2c8:	f3bf 8f6f 	isb	sy
 800f2cc:	f3bf 8f4f 	dsb	sy
 800f2d0:	617b      	str	r3, [r7, #20]
}
 800f2d2:	bf00      	nop
 800f2d4:	e7fe      	b.n	800f2d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d8:	699a      	ldr	r2, [r3, #24]
 800f2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2dc:	18d1      	adds	r1, r2, r3
 800f2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2e4:	f7ff ff06 	bl	800f0f4 <prvInsertTimerInActiveList>
					break;
 800f2e8:	e015      	b.n	800f316 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2f0:	f003 0302 	and.w	r3, r3, #2
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d103      	bne.n	800f300 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f2f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2fa:	f000 fbe1 	bl	800fac0 <vPortFree>
 800f2fe:	e00a      	b.n	800f316 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f306:	f023 0301 	bic.w	r3, r3, #1
 800f30a:	b2da      	uxtb	r2, r3
 800f30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f312:	e000      	b.n	800f316 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f316:	4b08      	ldr	r3, [pc, #32]	; (800f338 <prvProcessReceivedCommands+0x1c0>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	1d39      	adds	r1, r7, #4
 800f31c:	2200      	movs	r2, #0
 800f31e:	4618      	mov	r0, r3
 800f320:	f7fe f83c 	bl	800d39c <xQueueReceive>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	f47f af2a 	bne.w	800f180 <prvProcessReceivedCommands+0x8>
	}
}
 800f32c:	bf00      	nop
 800f32e:	bf00      	nop
 800f330:	3730      	adds	r7, #48	; 0x30
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	20001440 	.word	0x20001440

0800f33c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b088      	sub	sp, #32
 800f340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f342:	e048      	b.n	800f3d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f344:	4b2d      	ldr	r3, [pc, #180]	; (800f3fc <prvSwitchTimerLists+0xc0>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f34e:	4b2b      	ldr	r3, [pc, #172]	; (800f3fc <prvSwitchTimerLists+0xc0>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	3304      	adds	r3, #4
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fd fd1b 	bl	800cd98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6a1b      	ldr	r3, [r3, #32]
 800f366:	68f8      	ldr	r0, [r7, #12]
 800f368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f370:	f003 0304 	and.w	r3, r3, #4
 800f374:	2b00      	cmp	r3, #0
 800f376:	d02e      	beq.n	800f3d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	699b      	ldr	r3, [r3, #24]
 800f37c:	693a      	ldr	r2, [r7, #16]
 800f37e:	4413      	add	r3, r2
 800f380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f382:	68ba      	ldr	r2, [r7, #8]
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	429a      	cmp	r2, r3
 800f388:	d90e      	bls.n	800f3a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	68ba      	ldr	r2, [r7, #8]
 800f38e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f396:	4b19      	ldr	r3, [pc, #100]	; (800f3fc <prvSwitchTimerLists+0xc0>)
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	3304      	adds	r3, #4
 800f39e:	4619      	mov	r1, r3
 800f3a0:	4610      	mov	r0, r2
 800f3a2:	f7fd fcc0 	bl	800cd26 <vListInsert>
 800f3a6:	e016      	b.n	800f3d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	9300      	str	r3, [sp, #0]
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	693a      	ldr	r2, [r7, #16]
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f7ff fd60 	bl	800ee78 <xTimerGenericCommand>
 800f3b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d10a      	bne.n	800f3d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c4:	f383 8811 	msr	BASEPRI, r3
 800f3c8:	f3bf 8f6f 	isb	sy
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	603b      	str	r3, [r7, #0]
}
 800f3d2:	bf00      	nop
 800f3d4:	e7fe      	b.n	800f3d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3d6:	4b09      	ldr	r3, [pc, #36]	; (800f3fc <prvSwitchTimerLists+0xc0>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d1b1      	bne.n	800f344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f3e0:	4b06      	ldr	r3, [pc, #24]	; (800f3fc <prvSwitchTimerLists+0xc0>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f3e6:	4b06      	ldr	r3, [pc, #24]	; (800f400 <prvSwitchTimerLists+0xc4>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	4a04      	ldr	r2, [pc, #16]	; (800f3fc <prvSwitchTimerLists+0xc0>)
 800f3ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f3ee:	4a04      	ldr	r2, [pc, #16]	; (800f400 <prvSwitchTimerLists+0xc4>)
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	6013      	str	r3, [r2, #0]
}
 800f3f4:	bf00      	nop
 800f3f6:	3718      	adds	r7, #24
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	20001438 	.word	0x20001438
 800f400:	2000143c 	.word	0x2000143c

0800f404 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f40a:	f000 f96b 	bl	800f6e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f40e:	4b15      	ldr	r3, [pc, #84]	; (800f464 <prvCheckForValidListAndQueue+0x60>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d120      	bne.n	800f458 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f416:	4814      	ldr	r0, [pc, #80]	; (800f468 <prvCheckForValidListAndQueue+0x64>)
 800f418:	f7fd fc34 	bl	800cc84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f41c:	4813      	ldr	r0, [pc, #76]	; (800f46c <prvCheckForValidListAndQueue+0x68>)
 800f41e:	f7fd fc31 	bl	800cc84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f422:	4b13      	ldr	r3, [pc, #76]	; (800f470 <prvCheckForValidListAndQueue+0x6c>)
 800f424:	4a10      	ldr	r2, [pc, #64]	; (800f468 <prvCheckForValidListAndQueue+0x64>)
 800f426:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f428:	4b12      	ldr	r3, [pc, #72]	; (800f474 <prvCheckForValidListAndQueue+0x70>)
 800f42a:	4a10      	ldr	r2, [pc, #64]	; (800f46c <prvCheckForValidListAndQueue+0x68>)
 800f42c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f42e:	2300      	movs	r3, #0
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	4b11      	ldr	r3, [pc, #68]	; (800f478 <prvCheckForValidListAndQueue+0x74>)
 800f434:	4a11      	ldr	r2, [pc, #68]	; (800f47c <prvCheckForValidListAndQueue+0x78>)
 800f436:	2110      	movs	r1, #16
 800f438:	200a      	movs	r0, #10
 800f43a:	f7fd fd3f 	bl	800cebc <xQueueGenericCreateStatic>
 800f43e:	4603      	mov	r3, r0
 800f440:	4a08      	ldr	r2, [pc, #32]	; (800f464 <prvCheckForValidListAndQueue+0x60>)
 800f442:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f444:	4b07      	ldr	r3, [pc, #28]	; (800f464 <prvCheckForValidListAndQueue+0x60>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d005      	beq.n	800f458 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f44c:	4b05      	ldr	r3, [pc, #20]	; (800f464 <prvCheckForValidListAndQueue+0x60>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	490b      	ldr	r1, [pc, #44]	; (800f480 <prvCheckForValidListAndQueue+0x7c>)
 800f452:	4618      	mov	r0, r3
 800f454:	f7fe fa12 	bl	800d87c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f458:	f000 f974 	bl	800f744 <vPortExitCritical>
}
 800f45c:	bf00      	nop
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	20001440 	.word	0x20001440
 800f468:	20001410 	.word	0x20001410
 800f46c:	20001424 	.word	0x20001424
 800f470:	20001438 	.word	0x20001438
 800f474:	2000143c 	.word	0x2000143c
 800f478:	200014ec 	.word	0x200014ec
 800f47c:	2000144c 	.word	0x2000144c
 800f480:	08013900 	.word	0x08013900

0800f484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f484:	b480      	push	{r7}
 800f486:	b085      	sub	sp, #20
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	3b04      	subs	r3, #4
 800f494:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f49c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	3b04      	subs	r3, #4
 800f4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	f023 0201 	bic.w	r2, r3, #1
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	3b04      	subs	r3, #4
 800f4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f4b4:	4a0c      	ldr	r2, [pc, #48]	; (800f4e8 <pxPortInitialiseStack+0x64>)
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	3b14      	subs	r3, #20
 800f4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	3b04      	subs	r3, #4
 800f4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f06f 0202 	mvn.w	r2, #2
 800f4d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	3b20      	subs	r3, #32
 800f4d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f4da:	68fb      	ldr	r3, [r7, #12]
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3714      	adds	r7, #20
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr
 800f4e8:	0800f4ed 	.word	0x0800f4ed

0800f4ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b085      	sub	sp, #20
 800f4f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f4f6:	4b12      	ldr	r3, [pc, #72]	; (800f540 <prvTaskExitError+0x54>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4fe:	d00a      	beq.n	800f516 <prvTaskExitError+0x2a>
	__asm volatile
 800f500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f504:	f383 8811 	msr	BASEPRI, r3
 800f508:	f3bf 8f6f 	isb	sy
 800f50c:	f3bf 8f4f 	dsb	sy
 800f510:	60fb      	str	r3, [r7, #12]
}
 800f512:	bf00      	nop
 800f514:	e7fe      	b.n	800f514 <prvTaskExitError+0x28>
	__asm volatile
 800f516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51a:	f383 8811 	msr	BASEPRI, r3
 800f51e:	f3bf 8f6f 	isb	sy
 800f522:	f3bf 8f4f 	dsb	sy
 800f526:	60bb      	str	r3, [r7, #8]
}
 800f528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f52a:	bf00      	nop
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d0fc      	beq.n	800f52c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f532:	bf00      	nop
 800f534:	bf00      	nop
 800f536:	3714      	adds	r7, #20
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr
 800f540:	2000011c 	.word	0x2000011c
	...

0800f550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f550:	4b07      	ldr	r3, [pc, #28]	; (800f570 <pxCurrentTCBConst2>)
 800f552:	6819      	ldr	r1, [r3, #0]
 800f554:	6808      	ldr	r0, [r1, #0]
 800f556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55a:	f380 8809 	msr	PSP, r0
 800f55e:	f3bf 8f6f 	isb	sy
 800f562:	f04f 0000 	mov.w	r0, #0
 800f566:	f380 8811 	msr	BASEPRI, r0
 800f56a:	4770      	bx	lr
 800f56c:	f3af 8000 	nop.w

0800f570 <pxCurrentTCBConst2>:
 800f570:	20000f08 	.word	0x20000f08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f574:	bf00      	nop
 800f576:	bf00      	nop

0800f578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f578:	4808      	ldr	r0, [pc, #32]	; (800f59c <prvPortStartFirstTask+0x24>)
 800f57a:	6800      	ldr	r0, [r0, #0]
 800f57c:	6800      	ldr	r0, [r0, #0]
 800f57e:	f380 8808 	msr	MSP, r0
 800f582:	f04f 0000 	mov.w	r0, #0
 800f586:	f380 8814 	msr	CONTROL, r0
 800f58a:	b662      	cpsie	i
 800f58c:	b661      	cpsie	f
 800f58e:	f3bf 8f4f 	dsb	sy
 800f592:	f3bf 8f6f 	isb	sy
 800f596:	df00      	svc	0
 800f598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f59a:	bf00      	nop
 800f59c:	e000ed08 	.word	0xe000ed08

0800f5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b086      	sub	sp, #24
 800f5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f5a6:	4b46      	ldr	r3, [pc, #280]	; (800f6c0 <xPortStartScheduler+0x120>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a46      	ldr	r2, [pc, #280]	; (800f6c4 <xPortStartScheduler+0x124>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d10a      	bne.n	800f5c6 <xPortStartScheduler+0x26>
	__asm volatile
 800f5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b4:	f383 8811 	msr	BASEPRI, r3
 800f5b8:	f3bf 8f6f 	isb	sy
 800f5bc:	f3bf 8f4f 	dsb	sy
 800f5c0:	613b      	str	r3, [r7, #16]
}
 800f5c2:	bf00      	nop
 800f5c4:	e7fe      	b.n	800f5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f5c6:	4b3e      	ldr	r3, [pc, #248]	; (800f6c0 <xPortStartScheduler+0x120>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4a3f      	ldr	r2, [pc, #252]	; (800f6c8 <xPortStartScheduler+0x128>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d10a      	bne.n	800f5e6 <xPortStartScheduler+0x46>
	__asm volatile
 800f5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	60fb      	str	r3, [r7, #12]
}
 800f5e2:	bf00      	nop
 800f5e4:	e7fe      	b.n	800f5e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f5e6:	4b39      	ldr	r3, [pc, #228]	; (800f6cc <xPortStartScheduler+0x12c>)
 800f5e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	22ff      	movs	r2, #255	; 0xff
 800f5f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f600:	78fb      	ldrb	r3, [r7, #3]
 800f602:	b2db      	uxtb	r3, r3
 800f604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f608:	b2da      	uxtb	r2, r3
 800f60a:	4b31      	ldr	r3, [pc, #196]	; (800f6d0 <xPortStartScheduler+0x130>)
 800f60c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f60e:	4b31      	ldr	r3, [pc, #196]	; (800f6d4 <xPortStartScheduler+0x134>)
 800f610:	2207      	movs	r2, #7
 800f612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f614:	e009      	b.n	800f62a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f616:	4b2f      	ldr	r3, [pc, #188]	; (800f6d4 <xPortStartScheduler+0x134>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	3b01      	subs	r3, #1
 800f61c:	4a2d      	ldr	r2, [pc, #180]	; (800f6d4 <xPortStartScheduler+0x134>)
 800f61e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f620:	78fb      	ldrb	r3, [r7, #3]
 800f622:	b2db      	uxtb	r3, r3
 800f624:	005b      	lsls	r3, r3, #1
 800f626:	b2db      	uxtb	r3, r3
 800f628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f62a:	78fb      	ldrb	r3, [r7, #3]
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f632:	2b80      	cmp	r3, #128	; 0x80
 800f634:	d0ef      	beq.n	800f616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f636:	4b27      	ldr	r3, [pc, #156]	; (800f6d4 <xPortStartScheduler+0x134>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f1c3 0307 	rsb	r3, r3, #7
 800f63e:	2b04      	cmp	r3, #4
 800f640:	d00a      	beq.n	800f658 <xPortStartScheduler+0xb8>
	__asm volatile
 800f642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f646:	f383 8811 	msr	BASEPRI, r3
 800f64a:	f3bf 8f6f 	isb	sy
 800f64e:	f3bf 8f4f 	dsb	sy
 800f652:	60bb      	str	r3, [r7, #8]
}
 800f654:	bf00      	nop
 800f656:	e7fe      	b.n	800f656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f658:	4b1e      	ldr	r3, [pc, #120]	; (800f6d4 <xPortStartScheduler+0x134>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	021b      	lsls	r3, r3, #8
 800f65e:	4a1d      	ldr	r2, [pc, #116]	; (800f6d4 <xPortStartScheduler+0x134>)
 800f660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f662:	4b1c      	ldr	r3, [pc, #112]	; (800f6d4 <xPortStartScheduler+0x134>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f66a:	4a1a      	ldr	r2, [pc, #104]	; (800f6d4 <xPortStartScheduler+0x134>)
 800f66c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	b2da      	uxtb	r2, r3
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f676:	4b18      	ldr	r3, [pc, #96]	; (800f6d8 <xPortStartScheduler+0x138>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a17      	ldr	r2, [pc, #92]	; (800f6d8 <xPortStartScheduler+0x138>)
 800f67c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f682:	4b15      	ldr	r3, [pc, #84]	; (800f6d8 <xPortStartScheduler+0x138>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4a14      	ldr	r2, [pc, #80]	; (800f6d8 <xPortStartScheduler+0x138>)
 800f688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f68c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f68e:	f000 f8dd 	bl	800f84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f692:	4b12      	ldr	r3, [pc, #72]	; (800f6dc <xPortStartScheduler+0x13c>)
 800f694:	2200      	movs	r2, #0
 800f696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f698:	f000 f8fc 	bl	800f894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f69c:	4b10      	ldr	r3, [pc, #64]	; (800f6e0 <xPortStartScheduler+0x140>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a0f      	ldr	r2, [pc, #60]	; (800f6e0 <xPortStartScheduler+0x140>)
 800f6a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f6a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f6a8:	f7ff ff66 	bl	800f578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f6ac:	f7fe fe14 	bl	800e2d8 <vTaskSwitchContext>
	prvTaskExitError();
 800f6b0:	f7ff ff1c 	bl	800f4ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3718      	adds	r7, #24
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	e000ed00 	.word	0xe000ed00
 800f6c4:	410fc271 	.word	0x410fc271
 800f6c8:	410fc270 	.word	0x410fc270
 800f6cc:	e000e400 	.word	0xe000e400
 800f6d0:	2000153c 	.word	0x2000153c
 800f6d4:	20001540 	.word	0x20001540
 800f6d8:	e000ed20 	.word	0xe000ed20
 800f6dc:	2000011c 	.word	0x2000011c
 800f6e0:	e000ef34 	.word	0xe000ef34

0800f6e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
	__asm volatile
 800f6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ee:	f383 8811 	msr	BASEPRI, r3
 800f6f2:	f3bf 8f6f 	isb	sy
 800f6f6:	f3bf 8f4f 	dsb	sy
 800f6fa:	607b      	str	r3, [r7, #4]
}
 800f6fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f6fe:	4b0f      	ldr	r3, [pc, #60]	; (800f73c <vPortEnterCritical+0x58>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	3301      	adds	r3, #1
 800f704:	4a0d      	ldr	r2, [pc, #52]	; (800f73c <vPortEnterCritical+0x58>)
 800f706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f708:	4b0c      	ldr	r3, [pc, #48]	; (800f73c <vPortEnterCritical+0x58>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d10f      	bne.n	800f730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f710:	4b0b      	ldr	r3, [pc, #44]	; (800f740 <vPortEnterCritical+0x5c>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	b2db      	uxtb	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00a      	beq.n	800f730 <vPortEnterCritical+0x4c>
	__asm volatile
 800f71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71e:	f383 8811 	msr	BASEPRI, r3
 800f722:	f3bf 8f6f 	isb	sy
 800f726:	f3bf 8f4f 	dsb	sy
 800f72a:	603b      	str	r3, [r7, #0]
}
 800f72c:	bf00      	nop
 800f72e:	e7fe      	b.n	800f72e <vPortEnterCritical+0x4a>
	}
}
 800f730:	bf00      	nop
 800f732:	370c      	adds	r7, #12
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr
 800f73c:	2000011c 	.word	0x2000011c
 800f740:	e000ed04 	.word	0xe000ed04

0800f744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f74a:	4b12      	ldr	r3, [pc, #72]	; (800f794 <vPortExitCritical+0x50>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d10a      	bne.n	800f768 <vPortExitCritical+0x24>
	__asm volatile
 800f752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f756:	f383 8811 	msr	BASEPRI, r3
 800f75a:	f3bf 8f6f 	isb	sy
 800f75e:	f3bf 8f4f 	dsb	sy
 800f762:	607b      	str	r3, [r7, #4]
}
 800f764:	bf00      	nop
 800f766:	e7fe      	b.n	800f766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f768:	4b0a      	ldr	r3, [pc, #40]	; (800f794 <vPortExitCritical+0x50>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	3b01      	subs	r3, #1
 800f76e:	4a09      	ldr	r2, [pc, #36]	; (800f794 <vPortExitCritical+0x50>)
 800f770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f772:	4b08      	ldr	r3, [pc, #32]	; (800f794 <vPortExitCritical+0x50>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d105      	bne.n	800f786 <vPortExitCritical+0x42>
 800f77a:	2300      	movs	r3, #0
 800f77c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	f383 8811 	msr	BASEPRI, r3
}
 800f784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f786:	bf00      	nop
 800f788:	370c      	adds	r7, #12
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	2000011c 	.word	0x2000011c
	...

0800f7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f7a0:	f3ef 8009 	mrs	r0, PSP
 800f7a4:	f3bf 8f6f 	isb	sy
 800f7a8:	4b15      	ldr	r3, [pc, #84]	; (800f800 <pxCurrentTCBConst>)
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	f01e 0f10 	tst.w	lr, #16
 800f7b0:	bf08      	it	eq
 800f7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ba:	6010      	str	r0, [r2, #0]
 800f7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f7c4:	f380 8811 	msr	BASEPRI, r0
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f7fe fd82 	bl	800e2d8 <vTaskSwitchContext>
 800f7d4:	f04f 0000 	mov.w	r0, #0
 800f7d8:	f380 8811 	msr	BASEPRI, r0
 800f7dc:	bc09      	pop	{r0, r3}
 800f7de:	6819      	ldr	r1, [r3, #0]
 800f7e0:	6808      	ldr	r0, [r1, #0]
 800f7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7e6:	f01e 0f10 	tst.w	lr, #16
 800f7ea:	bf08      	it	eq
 800f7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f7f0:	f380 8809 	msr	PSP, r0
 800f7f4:	f3bf 8f6f 	isb	sy
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	f3af 8000 	nop.w

0800f800 <pxCurrentTCBConst>:
 800f800:	20000f08 	.word	0x20000f08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop

0800f808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
	__asm volatile
 800f80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f812:	f383 8811 	msr	BASEPRI, r3
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	f3bf 8f4f 	dsb	sy
 800f81e:	607b      	str	r3, [r7, #4]
}
 800f820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f822:	f7fe fc9f 	bl	800e164 <xTaskIncrementTick>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d003      	beq.n	800f834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f82c:	4b06      	ldr	r3, [pc, #24]	; (800f848 <xPortSysTickHandler+0x40>)
 800f82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	2300      	movs	r3, #0
 800f836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	f383 8811 	msr	BASEPRI, r3
}
 800f83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f840:	bf00      	nop
 800f842:	3708      	adds	r7, #8
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	e000ed04 	.word	0xe000ed04

0800f84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f84c:	b480      	push	{r7}
 800f84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f850:	4b0b      	ldr	r3, [pc, #44]	; (800f880 <vPortSetupTimerInterrupt+0x34>)
 800f852:	2200      	movs	r2, #0
 800f854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f856:	4b0b      	ldr	r3, [pc, #44]	; (800f884 <vPortSetupTimerInterrupt+0x38>)
 800f858:	2200      	movs	r2, #0
 800f85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f85c:	4b0a      	ldr	r3, [pc, #40]	; (800f888 <vPortSetupTimerInterrupt+0x3c>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a0a      	ldr	r2, [pc, #40]	; (800f88c <vPortSetupTimerInterrupt+0x40>)
 800f862:	fba2 2303 	umull	r2, r3, r2, r3
 800f866:	099b      	lsrs	r3, r3, #6
 800f868:	4a09      	ldr	r2, [pc, #36]	; (800f890 <vPortSetupTimerInterrupt+0x44>)
 800f86a:	3b01      	subs	r3, #1
 800f86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f86e:	4b04      	ldr	r3, [pc, #16]	; (800f880 <vPortSetupTimerInterrupt+0x34>)
 800f870:	2207      	movs	r2, #7
 800f872:	601a      	str	r2, [r3, #0]
}
 800f874:	bf00      	nop
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr
 800f87e:	bf00      	nop
 800f880:	e000e010 	.word	0xe000e010
 800f884:	e000e018 	.word	0xe000e018
 800f888:	20000000 	.word	0x20000000
 800f88c:	10624dd3 	.word	0x10624dd3
 800f890:	e000e014 	.word	0xe000e014

0800f894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f8a4 <vPortEnableVFP+0x10>
 800f898:	6801      	ldr	r1, [r0, #0]
 800f89a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f89e:	6001      	str	r1, [r0, #0]
 800f8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f8a2:	bf00      	nop
 800f8a4:	e000ed88 	.word	0xe000ed88

0800f8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f8a8:	b480      	push	{r7}
 800f8aa:	b085      	sub	sp, #20
 800f8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f8ae:	f3ef 8305 	mrs	r3, IPSR
 800f8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	2b0f      	cmp	r3, #15
 800f8b8:	d914      	bls.n	800f8e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f8ba:	4a17      	ldr	r2, [pc, #92]	; (800f918 <vPortValidateInterruptPriority+0x70>)
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	4413      	add	r3, r2
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f8c4:	4b15      	ldr	r3, [pc, #84]	; (800f91c <vPortValidateInterruptPriority+0x74>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	7afa      	ldrb	r2, [r7, #11]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d20a      	bcs.n	800f8e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	607b      	str	r3, [r7, #4]
}
 800f8e0:	bf00      	nop
 800f8e2:	e7fe      	b.n	800f8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f8e4:	4b0e      	ldr	r3, [pc, #56]	; (800f920 <vPortValidateInterruptPriority+0x78>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f8ec:	4b0d      	ldr	r3, [pc, #52]	; (800f924 <vPortValidateInterruptPriority+0x7c>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d90a      	bls.n	800f90a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f8:	f383 8811 	msr	BASEPRI, r3
 800f8fc:	f3bf 8f6f 	isb	sy
 800f900:	f3bf 8f4f 	dsb	sy
 800f904:	603b      	str	r3, [r7, #0]
}
 800f906:	bf00      	nop
 800f908:	e7fe      	b.n	800f908 <vPortValidateInterruptPriority+0x60>
	}
 800f90a:	bf00      	nop
 800f90c:	3714      	adds	r7, #20
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop
 800f918:	e000e3f0 	.word	0xe000e3f0
 800f91c:	2000153c 	.word	0x2000153c
 800f920:	e000ed0c 	.word	0xe000ed0c
 800f924:	20001540 	.word	0x20001540

0800f928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b08a      	sub	sp, #40	; 0x28
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f930:	2300      	movs	r3, #0
 800f932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f934:	f7fe faca 	bl	800decc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f938:	4b5b      	ldr	r3, [pc, #364]	; (800faa8 <pvPortMalloc+0x180>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d101      	bne.n	800f944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f940:	f000 f92c 	bl	800fb9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f944:	4b59      	ldr	r3, [pc, #356]	; (800faac <pvPortMalloc+0x184>)
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	4013      	ands	r3, r2
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f040 8093 	bne.w	800fa78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d01d      	beq.n	800f994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f958:	2208      	movs	r2, #8
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4413      	add	r3, r2
 800f95e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f003 0307 	and.w	r3, r3, #7
 800f966:	2b00      	cmp	r3, #0
 800f968:	d014      	beq.n	800f994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f023 0307 	bic.w	r3, r3, #7
 800f970:	3308      	adds	r3, #8
 800f972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f003 0307 	and.w	r3, r3, #7
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00a      	beq.n	800f994 <pvPortMalloc+0x6c>
	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f982:	f383 8811 	msr	BASEPRI, r3
 800f986:	f3bf 8f6f 	isb	sy
 800f98a:	f3bf 8f4f 	dsb	sy
 800f98e:	617b      	str	r3, [r7, #20]
}
 800f990:	bf00      	nop
 800f992:	e7fe      	b.n	800f992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d06e      	beq.n	800fa78 <pvPortMalloc+0x150>
 800f99a:	4b45      	ldr	r3, [pc, #276]	; (800fab0 <pvPortMalloc+0x188>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d869      	bhi.n	800fa78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f9a4:	4b43      	ldr	r3, [pc, #268]	; (800fab4 <pvPortMalloc+0x18c>)
 800f9a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f9a8:	4b42      	ldr	r3, [pc, #264]	; (800fab4 <pvPortMalloc+0x18c>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9ae:	e004      	b.n	800f9ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d903      	bls.n	800f9cc <pvPortMalloc+0xa4>
 800f9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d1f1      	bne.n	800f9b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f9cc:	4b36      	ldr	r3, [pc, #216]	; (800faa8 <pvPortMalloc+0x180>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d050      	beq.n	800fa78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f9d6:	6a3b      	ldr	r3, [r7, #32]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2208      	movs	r2, #8
 800f9dc:	4413      	add	r3, r2
 800f9de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e2:	681a      	ldr	r2, [r3, #0]
 800f9e4:	6a3b      	ldr	r3, [r7, #32]
 800f9e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ea:	685a      	ldr	r2, [r3, #4]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	1ad2      	subs	r2, r2, r3
 800f9f0:	2308      	movs	r3, #8
 800f9f2:	005b      	lsls	r3, r3, #1
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d91f      	bls.n	800fa38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	f003 0307 	and.w	r3, r3, #7
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d00a      	beq.n	800fa20 <pvPortMalloc+0xf8>
	__asm volatile
 800fa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0e:	f383 8811 	msr	BASEPRI, r3
 800fa12:	f3bf 8f6f 	isb	sy
 800fa16:	f3bf 8f4f 	dsb	sy
 800fa1a:	613b      	str	r3, [r7, #16]
}
 800fa1c:	bf00      	nop
 800fa1e:	e7fe      	b.n	800fa1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa22:	685a      	ldr	r2, [r3, #4]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	1ad2      	subs	r2, r2, r3
 800fa28:	69bb      	ldr	r3, [r7, #24]
 800fa2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa32:	69b8      	ldr	r0, [r7, #24]
 800fa34:	f000 f914 	bl	800fc60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa38:	4b1d      	ldr	r3, [pc, #116]	; (800fab0 <pvPortMalloc+0x188>)
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	1ad3      	subs	r3, r2, r3
 800fa42:	4a1b      	ldr	r2, [pc, #108]	; (800fab0 <pvPortMalloc+0x188>)
 800fa44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa46:	4b1a      	ldr	r3, [pc, #104]	; (800fab0 <pvPortMalloc+0x188>)
 800fa48:	681a      	ldr	r2, [r3, #0]
 800fa4a:	4b1b      	ldr	r3, [pc, #108]	; (800fab8 <pvPortMalloc+0x190>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d203      	bcs.n	800fa5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa52:	4b17      	ldr	r3, [pc, #92]	; (800fab0 <pvPortMalloc+0x188>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a18      	ldr	r2, [pc, #96]	; (800fab8 <pvPortMalloc+0x190>)
 800fa58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5c:	685a      	ldr	r2, [r3, #4]
 800fa5e:	4b13      	ldr	r3, [pc, #76]	; (800faac <pvPortMalloc+0x184>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	431a      	orrs	r2, r3
 800fa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fa6e:	4b13      	ldr	r3, [pc, #76]	; (800fabc <pvPortMalloc+0x194>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	3301      	adds	r3, #1
 800fa74:	4a11      	ldr	r2, [pc, #68]	; (800fabc <pvPortMalloc+0x194>)
 800fa76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fa78:	f7fe fa36 	bl	800dee8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	f003 0307 	and.w	r3, r3, #7
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d00a      	beq.n	800fa9c <pvPortMalloc+0x174>
	__asm volatile
 800fa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8a:	f383 8811 	msr	BASEPRI, r3
 800fa8e:	f3bf 8f6f 	isb	sy
 800fa92:	f3bf 8f4f 	dsb	sy
 800fa96:	60fb      	str	r3, [r7, #12]
}
 800fa98:	bf00      	nop
 800fa9a:	e7fe      	b.n	800fa9a <pvPortMalloc+0x172>
	return pvReturn;
 800fa9c:	69fb      	ldr	r3, [r7, #28]
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3728      	adds	r7, #40	; 0x28
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	200053cc 	.word	0x200053cc
 800faac:	200053e0 	.word	0x200053e0
 800fab0:	200053d0 	.word	0x200053d0
 800fab4:	200053c4 	.word	0x200053c4
 800fab8:	200053d4 	.word	0x200053d4
 800fabc:	200053d8 	.word	0x200053d8

0800fac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b086      	sub	sp, #24
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d04d      	beq.n	800fb6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fad2:	2308      	movs	r3, #8
 800fad4:	425b      	negs	r3, r3
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	4413      	add	r3, r2
 800fada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	685a      	ldr	r2, [r3, #4]
 800fae4:	4b24      	ldr	r3, [pc, #144]	; (800fb78 <vPortFree+0xb8>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4013      	ands	r3, r2
 800faea:	2b00      	cmp	r3, #0
 800faec:	d10a      	bne.n	800fb04 <vPortFree+0x44>
	__asm volatile
 800faee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf2:	f383 8811 	msr	BASEPRI, r3
 800faf6:	f3bf 8f6f 	isb	sy
 800fafa:	f3bf 8f4f 	dsb	sy
 800fafe:	60fb      	str	r3, [r7, #12]
}
 800fb00:	bf00      	nop
 800fb02:	e7fe      	b.n	800fb02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d00a      	beq.n	800fb22 <vPortFree+0x62>
	__asm volatile
 800fb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb10:	f383 8811 	msr	BASEPRI, r3
 800fb14:	f3bf 8f6f 	isb	sy
 800fb18:	f3bf 8f4f 	dsb	sy
 800fb1c:	60bb      	str	r3, [r7, #8]
}
 800fb1e:	bf00      	nop
 800fb20:	e7fe      	b.n	800fb20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	685a      	ldr	r2, [r3, #4]
 800fb26:	4b14      	ldr	r3, [pc, #80]	; (800fb78 <vPortFree+0xb8>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	4013      	ands	r3, r2
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d01e      	beq.n	800fb6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d11a      	bne.n	800fb6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	685a      	ldr	r2, [r3, #4]
 800fb3c:	4b0e      	ldr	r3, [pc, #56]	; (800fb78 <vPortFree+0xb8>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	43db      	mvns	r3, r3
 800fb42:	401a      	ands	r2, r3
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fb48:	f7fe f9c0 	bl	800decc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	685a      	ldr	r2, [r3, #4]
 800fb50:	4b0a      	ldr	r3, [pc, #40]	; (800fb7c <vPortFree+0xbc>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4413      	add	r3, r2
 800fb56:	4a09      	ldr	r2, [pc, #36]	; (800fb7c <vPortFree+0xbc>)
 800fb58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb5a:	6938      	ldr	r0, [r7, #16]
 800fb5c:	f000 f880 	bl	800fc60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fb60:	4b07      	ldr	r3, [pc, #28]	; (800fb80 <vPortFree+0xc0>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	3301      	adds	r3, #1
 800fb66:	4a06      	ldr	r2, [pc, #24]	; (800fb80 <vPortFree+0xc0>)
 800fb68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fb6a:	f7fe f9bd 	bl	800dee8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fb6e:	bf00      	nop
 800fb70:	3718      	adds	r7, #24
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	200053e0 	.word	0x200053e0
 800fb7c:	200053d0 	.word	0x200053d0
 800fb80:	200053dc 	.word	0x200053dc

0800fb84 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800fb84:	b480      	push	{r7}
 800fb86:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800fb88:	4b03      	ldr	r3, [pc, #12]	; (800fb98 <xPortGetFreeHeapSize+0x14>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop
 800fb98:	200053d0 	.word	0x200053d0

0800fb9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fba2:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800fba6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fba8:	4b27      	ldr	r3, [pc, #156]	; (800fc48 <prvHeapInit+0xac>)
 800fbaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f003 0307 	and.w	r3, r3, #7
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d00c      	beq.n	800fbd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	3307      	adds	r3, #7
 800fbba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f023 0307 	bic.w	r3, r3, #7
 800fbc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fbc4:	68ba      	ldr	r2, [r7, #8]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	1ad3      	subs	r3, r2, r3
 800fbca:	4a1f      	ldr	r2, [pc, #124]	; (800fc48 <prvHeapInit+0xac>)
 800fbcc:	4413      	add	r3, r2
 800fbce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fbd4:	4a1d      	ldr	r2, [pc, #116]	; (800fc4c <prvHeapInit+0xb0>)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fbda:	4b1c      	ldr	r3, [pc, #112]	; (800fc4c <prvHeapInit+0xb0>)
 800fbdc:	2200      	movs	r2, #0
 800fbde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fbe8:	2208      	movs	r2, #8
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	1a9b      	subs	r3, r3, r2
 800fbee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f023 0307 	bic.w	r3, r3, #7
 800fbf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	4a15      	ldr	r2, [pc, #84]	; (800fc50 <prvHeapInit+0xb4>)
 800fbfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fbfe:	4b14      	ldr	r3, [pc, #80]	; (800fc50 <prvHeapInit+0xb4>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	2200      	movs	r2, #0
 800fc04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fc06:	4b12      	ldr	r3, [pc, #72]	; (800fc50 <prvHeapInit+0xb4>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	68fa      	ldr	r2, [r7, #12]
 800fc16:	1ad2      	subs	r2, r2, r3
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fc1c:	4b0c      	ldr	r3, [pc, #48]	; (800fc50 <prvHeapInit+0xb4>)
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	4a0a      	ldr	r2, [pc, #40]	; (800fc54 <prvHeapInit+0xb8>)
 800fc2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	4a09      	ldr	r2, [pc, #36]	; (800fc58 <prvHeapInit+0xbc>)
 800fc32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fc34:	4b09      	ldr	r3, [pc, #36]	; (800fc5c <prvHeapInit+0xc0>)
 800fc36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fc3a:	601a      	str	r2, [r3, #0]
}
 800fc3c:	bf00      	nop
 800fc3e:	3714      	adds	r7, #20
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr
 800fc48:	20001544 	.word	0x20001544
 800fc4c:	200053c4 	.word	0x200053c4
 800fc50:	200053cc 	.word	0x200053cc
 800fc54:	200053d4 	.word	0x200053d4
 800fc58:	200053d0 	.word	0x200053d0
 800fc5c:	200053e0 	.word	0x200053e0

0800fc60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fc60:	b480      	push	{r7}
 800fc62:	b085      	sub	sp, #20
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc68:	4b28      	ldr	r3, [pc, #160]	; (800fd0c <prvInsertBlockIntoFreeList+0xac>)
 800fc6a:	60fb      	str	r3, [r7, #12]
 800fc6c:	e002      	b.n	800fc74 <prvInsertBlockIntoFreeList+0x14>
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	60fb      	str	r3, [r7, #12]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d8f7      	bhi.n	800fc6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	68ba      	ldr	r2, [r7, #8]
 800fc88:	4413      	add	r3, r2
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d108      	bne.n	800fca2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	685a      	ldr	r2, [r3, #4]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	441a      	add	r2, r3
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	68ba      	ldr	r2, [r7, #8]
 800fcac:	441a      	add	r2, r3
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d118      	bne.n	800fce8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	4b15      	ldr	r3, [pc, #84]	; (800fd10 <prvInsertBlockIntoFreeList+0xb0>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d00d      	beq.n	800fcde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	685a      	ldr	r2, [r3, #4]
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	441a      	add	r2, r3
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	601a      	str	r2, [r3, #0]
 800fcdc:	e008      	b.n	800fcf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fcde:	4b0c      	ldr	r3, [pc, #48]	; (800fd10 <prvInsertBlockIntoFreeList+0xb0>)
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	601a      	str	r2, [r3, #0]
 800fce6:	e003      	b.n	800fcf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d002      	beq.n	800fcfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcfe:	bf00      	nop
 800fd00:	3714      	adds	r7, #20
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	200053c4 	.word	0x200053c4
 800fd10:	200053cc 	.word	0x200053cc

0800fd14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fd18:	2200      	movs	r2, #0
 800fd1a:	4912      	ldr	r1, [pc, #72]	; (800fd64 <MX_USB_DEVICE_Init+0x50>)
 800fd1c:	4812      	ldr	r0, [pc, #72]	; (800fd68 <MX_USB_DEVICE_Init+0x54>)
 800fd1e:	f7fb fba7 	bl	800b470 <USBD_Init>
 800fd22:	4603      	mov	r3, r0
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d001      	beq.n	800fd2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fd28:	f7f3 fa92 	bl	8003250 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fd2c:	490f      	ldr	r1, [pc, #60]	; (800fd6c <MX_USB_DEVICE_Init+0x58>)
 800fd2e:	480e      	ldr	r0, [pc, #56]	; (800fd68 <MX_USB_DEVICE_Init+0x54>)
 800fd30:	f7fb fbce 	bl	800b4d0 <USBD_RegisterClass>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d001      	beq.n	800fd3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fd3a:	f7f3 fa89 	bl	8003250 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fd3e:	490c      	ldr	r1, [pc, #48]	; (800fd70 <MX_USB_DEVICE_Init+0x5c>)
 800fd40:	4809      	ldr	r0, [pc, #36]	; (800fd68 <MX_USB_DEVICE_Init+0x54>)
 800fd42:	f7fb faef 	bl	800b324 <USBD_CDC_RegisterInterface>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d001      	beq.n	800fd50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fd4c:	f7f3 fa80 	bl	8003250 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fd50:	4805      	ldr	r0, [pc, #20]	; (800fd68 <MX_USB_DEVICE_Init+0x54>)
 800fd52:	f7fb fbe4 	bl	800b51e <USBD_Start>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d001      	beq.n	800fd60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fd5c:	f7f3 fa78 	bl	8003250 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fd60:	bf00      	nop
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	20000134 	.word	0x20000134
 800fd68:	20009d88 	.word	0x20009d88
 800fd6c:	20000018 	.word	0x20000018
 800fd70:	20000120 	.word	0x20000120

0800fd74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fd78:	2200      	movs	r2, #0
 800fd7a:	4905      	ldr	r1, [pc, #20]	; (800fd90 <CDC_Init_FS+0x1c>)
 800fd7c:	4805      	ldr	r0, [pc, #20]	; (800fd94 <CDC_Init_FS+0x20>)
 800fd7e:	f7fb fae6 	bl	800b34e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fd82:	4905      	ldr	r1, [pc, #20]	; (800fd98 <CDC_Init_FS+0x24>)
 800fd84:	4803      	ldr	r0, [pc, #12]	; (800fd94 <CDC_Init_FS+0x20>)
 800fd86:	f7fb fb00 	bl	800b38a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fd8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	2000a858 	.word	0x2000a858
 800fd94:	20009d88 	.word	0x20009d88
 800fd98:	2000a058 	.word	0x2000a058

0800fd9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fda0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr

0800fdac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	6039      	str	r1, [r7, #0]
 800fdb6:	71fb      	strb	r3, [r7, #7]
 800fdb8:	4613      	mov	r3, r2
 800fdba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fdbc:	79fb      	ldrb	r3, [r7, #7]
 800fdbe:	2b23      	cmp	r3, #35	; 0x23
 800fdc0:	d84a      	bhi.n	800fe58 <CDC_Control_FS+0xac>
 800fdc2:	a201      	add	r2, pc, #4	; (adr r2, 800fdc8 <CDC_Control_FS+0x1c>)
 800fdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc8:	0800fe59 	.word	0x0800fe59
 800fdcc:	0800fe59 	.word	0x0800fe59
 800fdd0:	0800fe59 	.word	0x0800fe59
 800fdd4:	0800fe59 	.word	0x0800fe59
 800fdd8:	0800fe59 	.word	0x0800fe59
 800fddc:	0800fe59 	.word	0x0800fe59
 800fde0:	0800fe59 	.word	0x0800fe59
 800fde4:	0800fe59 	.word	0x0800fe59
 800fde8:	0800fe59 	.word	0x0800fe59
 800fdec:	0800fe59 	.word	0x0800fe59
 800fdf0:	0800fe59 	.word	0x0800fe59
 800fdf4:	0800fe59 	.word	0x0800fe59
 800fdf8:	0800fe59 	.word	0x0800fe59
 800fdfc:	0800fe59 	.word	0x0800fe59
 800fe00:	0800fe59 	.word	0x0800fe59
 800fe04:	0800fe59 	.word	0x0800fe59
 800fe08:	0800fe59 	.word	0x0800fe59
 800fe0c:	0800fe59 	.word	0x0800fe59
 800fe10:	0800fe59 	.word	0x0800fe59
 800fe14:	0800fe59 	.word	0x0800fe59
 800fe18:	0800fe59 	.word	0x0800fe59
 800fe1c:	0800fe59 	.word	0x0800fe59
 800fe20:	0800fe59 	.word	0x0800fe59
 800fe24:	0800fe59 	.word	0x0800fe59
 800fe28:	0800fe59 	.word	0x0800fe59
 800fe2c:	0800fe59 	.word	0x0800fe59
 800fe30:	0800fe59 	.word	0x0800fe59
 800fe34:	0800fe59 	.word	0x0800fe59
 800fe38:	0800fe59 	.word	0x0800fe59
 800fe3c:	0800fe59 	.word	0x0800fe59
 800fe40:	0800fe59 	.word	0x0800fe59
 800fe44:	0800fe59 	.word	0x0800fe59
 800fe48:	0800fe59 	.word	0x0800fe59
 800fe4c:	0800fe59 	.word	0x0800fe59
 800fe50:	0800fe59 	.word	0x0800fe59
 800fe54:	0800fe59 	.word	0x0800fe59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fe58:	bf00      	nop
  }

  return (USBD_OK);
 800fe5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fe72:	6879      	ldr	r1, [r7, #4]
 800fe74:	4805      	ldr	r0, [pc, #20]	; (800fe8c <CDC_Receive_FS+0x24>)
 800fe76:	f7fb fa88 	bl	800b38a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fe7a:	4804      	ldr	r0, [pc, #16]	; (800fe8c <CDC_Receive_FS+0x24>)
 800fe7c:	f7fb face 	bl	800b41c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fe80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3708      	adds	r7, #8
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	20009d88 	.word	0x20009d88

0800fe90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fea0:	4b0d      	ldr	r3, [pc, #52]	; (800fed8 <CDC_Transmit_FS+0x48>)
 800fea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fea6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d001      	beq.n	800feb6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800feb2:	2301      	movs	r3, #1
 800feb4:	e00b      	b.n	800fece <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800feb6:	887b      	ldrh	r3, [r7, #2]
 800feb8:	461a      	mov	r2, r3
 800feba:	6879      	ldr	r1, [r7, #4]
 800febc:	4806      	ldr	r0, [pc, #24]	; (800fed8 <CDC_Transmit_FS+0x48>)
 800febe:	f7fb fa46 	bl	800b34e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fec2:	4805      	ldr	r0, [pc, #20]	; (800fed8 <CDC_Transmit_FS+0x48>)
 800fec4:	f7fb fa7a 	bl	800b3bc <USBD_CDC_TransmitPacket>
 800fec8:	4603      	mov	r3, r0
 800feca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fecc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	20009d88 	.word	0x20009d88

0800fedc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fedc:	b480      	push	{r7}
 800fede:	b087      	sub	sp, #28
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	4613      	mov	r3, r2
 800fee8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800feea:	2300      	movs	r3, #0
 800feec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800feee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	371c      	adds	r7, #28
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr
	...

0800ff00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	4603      	mov	r3, r0
 800ff08:	6039      	str	r1, [r7, #0]
 800ff0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	2212      	movs	r2, #18
 800ff10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ff12:	4b03      	ldr	r3, [pc, #12]	; (800ff20 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	370c      	adds	r7, #12
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr
 800ff20:	20000150 	.word	0x20000150

0800ff24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	6039      	str	r1, [r7, #0]
 800ff2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	2204      	movs	r2, #4
 800ff34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff36:	4b03      	ldr	r3, [pc, #12]	; (800ff44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr
 800ff44:	20000164 	.word	0x20000164

0800ff48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	4603      	mov	r3, r0
 800ff50:	6039      	str	r1, [r7, #0]
 800ff52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff54:	79fb      	ldrb	r3, [r7, #7]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d105      	bne.n	800ff66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ff5a:	683a      	ldr	r2, [r7, #0]
 800ff5c:	4907      	ldr	r1, [pc, #28]	; (800ff7c <USBD_FS_ProductStrDescriptor+0x34>)
 800ff5e:	4808      	ldr	r0, [pc, #32]	; (800ff80 <USBD_FS_ProductStrDescriptor+0x38>)
 800ff60:	f7fc fb0f 	bl	800c582 <USBD_GetString>
 800ff64:	e004      	b.n	800ff70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ff66:	683a      	ldr	r2, [r7, #0]
 800ff68:	4904      	ldr	r1, [pc, #16]	; (800ff7c <USBD_FS_ProductStrDescriptor+0x34>)
 800ff6a:	4805      	ldr	r0, [pc, #20]	; (800ff80 <USBD_FS_ProductStrDescriptor+0x38>)
 800ff6c:	f7fc fb09 	bl	800c582 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff70:	4b02      	ldr	r3, [pc, #8]	; (800ff7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3708      	adds	r7, #8
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	2000b058 	.word	0x2000b058
 800ff80:	08013908 	.word	0x08013908

0800ff84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	6039      	str	r1, [r7, #0]
 800ff8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ff90:	683a      	ldr	r2, [r7, #0]
 800ff92:	4904      	ldr	r1, [pc, #16]	; (800ffa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ff94:	4804      	ldr	r0, [pc, #16]	; (800ffa8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ff96:	f7fc faf4 	bl	800c582 <USBD_GetString>
  return USBD_StrDesc;
 800ff9a:	4b02      	ldr	r3, [pc, #8]	; (800ffa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3708      	adds	r7, #8
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	2000b058 	.word	0x2000b058
 800ffa8:	08013920 	.word	0x08013920

0800ffac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	6039      	str	r1, [r7, #0]
 800ffb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	221a      	movs	r2, #26
 800ffbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ffbe:	f000 f843 	bl	8010048 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ffc2:	4b02      	ldr	r3, [pc, #8]	; (800ffcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3708      	adds	r7, #8
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	20000168 	.word	0x20000168

0800ffd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	6039      	str	r1, [r7, #0]
 800ffda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ffdc:	79fb      	ldrb	r3, [r7, #7]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d105      	bne.n	800ffee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ffe2:	683a      	ldr	r2, [r7, #0]
 800ffe4:	4907      	ldr	r1, [pc, #28]	; (8010004 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ffe6:	4808      	ldr	r0, [pc, #32]	; (8010008 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ffe8:	f7fc facb 	bl	800c582 <USBD_GetString>
 800ffec:	e004      	b.n	800fff8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ffee:	683a      	ldr	r2, [r7, #0]
 800fff0:	4904      	ldr	r1, [pc, #16]	; (8010004 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fff2:	4805      	ldr	r0, [pc, #20]	; (8010008 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fff4:	f7fc fac5 	bl	800c582 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fff8:	4b02      	ldr	r3, [pc, #8]	; (8010004 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3708      	adds	r7, #8
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	2000b058 	.word	0x2000b058
 8010008:	08013934 	.word	0x08013934

0801000c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	4603      	mov	r3, r0
 8010014:	6039      	str	r1, [r7, #0]
 8010016:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010018:	79fb      	ldrb	r3, [r7, #7]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d105      	bne.n	801002a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801001e:	683a      	ldr	r2, [r7, #0]
 8010020:	4907      	ldr	r1, [pc, #28]	; (8010040 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010022:	4808      	ldr	r0, [pc, #32]	; (8010044 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010024:	f7fc faad 	bl	800c582 <USBD_GetString>
 8010028:	e004      	b.n	8010034 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801002a:	683a      	ldr	r2, [r7, #0]
 801002c:	4904      	ldr	r1, [pc, #16]	; (8010040 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801002e:	4805      	ldr	r0, [pc, #20]	; (8010044 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010030:	f7fc faa7 	bl	800c582 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010034:	4b02      	ldr	r3, [pc, #8]	; (8010040 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010036:	4618      	mov	r0, r3
 8010038:	3708      	adds	r7, #8
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	2000b058 	.word	0x2000b058
 8010044:	08013940 	.word	0x08013940

08010048 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801004e:	4b0f      	ldr	r3, [pc, #60]	; (801008c <Get_SerialNum+0x44>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010054:	4b0e      	ldr	r3, [pc, #56]	; (8010090 <Get_SerialNum+0x48>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801005a:	4b0e      	ldr	r3, [pc, #56]	; (8010094 <Get_SerialNum+0x4c>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4413      	add	r3, r2
 8010066:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d009      	beq.n	8010082 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801006e:	2208      	movs	r2, #8
 8010070:	4909      	ldr	r1, [pc, #36]	; (8010098 <Get_SerialNum+0x50>)
 8010072:	68f8      	ldr	r0, [r7, #12]
 8010074:	f000 f814 	bl	80100a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010078:	2204      	movs	r2, #4
 801007a:	4908      	ldr	r1, [pc, #32]	; (801009c <Get_SerialNum+0x54>)
 801007c:	68b8      	ldr	r0, [r7, #8]
 801007e:	f000 f80f 	bl	80100a0 <IntToUnicode>
  }
}
 8010082:	bf00      	nop
 8010084:	3710      	adds	r7, #16
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	1fff7a10 	.word	0x1fff7a10
 8010090:	1fff7a14 	.word	0x1fff7a14
 8010094:	1fff7a18 	.word	0x1fff7a18
 8010098:	2000016a 	.word	0x2000016a
 801009c:	2000017a 	.word	0x2000017a

080100a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b087      	sub	sp, #28
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	4613      	mov	r3, r2
 80100ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80100ae:	2300      	movs	r3, #0
 80100b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80100b2:	2300      	movs	r3, #0
 80100b4:	75fb      	strb	r3, [r7, #23]
 80100b6:	e027      	b.n	8010108 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	0f1b      	lsrs	r3, r3, #28
 80100bc:	2b09      	cmp	r3, #9
 80100be:	d80b      	bhi.n	80100d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	0f1b      	lsrs	r3, r3, #28
 80100c4:	b2da      	uxtb	r2, r3
 80100c6:	7dfb      	ldrb	r3, [r7, #23]
 80100c8:	005b      	lsls	r3, r3, #1
 80100ca:	4619      	mov	r1, r3
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	440b      	add	r3, r1
 80100d0:	3230      	adds	r2, #48	; 0x30
 80100d2:	b2d2      	uxtb	r2, r2
 80100d4:	701a      	strb	r2, [r3, #0]
 80100d6:	e00a      	b.n	80100ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	0f1b      	lsrs	r3, r3, #28
 80100dc:	b2da      	uxtb	r2, r3
 80100de:	7dfb      	ldrb	r3, [r7, #23]
 80100e0:	005b      	lsls	r3, r3, #1
 80100e2:	4619      	mov	r1, r3
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	440b      	add	r3, r1
 80100e8:	3237      	adds	r2, #55	; 0x37
 80100ea:	b2d2      	uxtb	r2, r2
 80100ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	011b      	lsls	r3, r3, #4
 80100f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80100f4:	7dfb      	ldrb	r3, [r7, #23]
 80100f6:	005b      	lsls	r3, r3, #1
 80100f8:	3301      	adds	r3, #1
 80100fa:	68ba      	ldr	r2, [r7, #8]
 80100fc:	4413      	add	r3, r2
 80100fe:	2200      	movs	r2, #0
 8010100:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010102:	7dfb      	ldrb	r3, [r7, #23]
 8010104:	3301      	adds	r3, #1
 8010106:	75fb      	strb	r3, [r7, #23]
 8010108:	7dfa      	ldrb	r2, [r7, #23]
 801010a:	79fb      	ldrb	r3, [r7, #7]
 801010c:	429a      	cmp	r2, r3
 801010e:	d3d3      	bcc.n	80100b8 <IntToUnicode+0x18>
  }
}
 8010110:	bf00      	nop
 8010112:	bf00      	nop
 8010114:	371c      	adds	r7, #28
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr
	...

08010120 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b08a      	sub	sp, #40	; 0x28
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010128:	f107 0314 	add.w	r3, r7, #20
 801012c:	2200      	movs	r2, #0
 801012e:	601a      	str	r2, [r3, #0]
 8010130:	605a      	str	r2, [r3, #4]
 8010132:	609a      	str	r2, [r3, #8]
 8010134:	60da      	str	r2, [r3, #12]
 8010136:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010140:	d147      	bne.n	80101d2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010142:	2300      	movs	r3, #0
 8010144:	613b      	str	r3, [r7, #16]
 8010146:	4b25      	ldr	r3, [pc, #148]	; (80101dc <HAL_PCD_MspInit+0xbc>)
 8010148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801014a:	4a24      	ldr	r2, [pc, #144]	; (80101dc <HAL_PCD_MspInit+0xbc>)
 801014c:	f043 0301 	orr.w	r3, r3, #1
 8010150:	6313      	str	r3, [r2, #48]	; 0x30
 8010152:	4b22      	ldr	r3, [pc, #136]	; (80101dc <HAL_PCD_MspInit+0xbc>)
 8010154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010156:	f003 0301 	and.w	r3, r3, #1
 801015a:	613b      	str	r3, [r7, #16]
 801015c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801015e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010164:	2300      	movs	r3, #0
 8010166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010168:	2300      	movs	r3, #0
 801016a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801016c:	f107 0314 	add.w	r3, r7, #20
 8010170:	4619      	mov	r1, r3
 8010172:	481b      	ldr	r0, [pc, #108]	; (80101e0 <HAL_PCD_MspInit+0xc0>)
 8010174:	f7f5 f896 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010178:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801017c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801017e:	2302      	movs	r3, #2
 8010180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010182:	2300      	movs	r3, #0
 8010184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010186:	2300      	movs	r3, #0
 8010188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801018a:	230a      	movs	r3, #10
 801018c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801018e:	f107 0314 	add.w	r3, r7, #20
 8010192:	4619      	mov	r1, r3
 8010194:	4812      	ldr	r0, [pc, #72]	; (80101e0 <HAL_PCD_MspInit+0xc0>)
 8010196:	f7f5 f885 	bl	80052a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801019a:	4b10      	ldr	r3, [pc, #64]	; (80101dc <HAL_PCD_MspInit+0xbc>)
 801019c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801019e:	4a0f      	ldr	r2, [pc, #60]	; (80101dc <HAL_PCD_MspInit+0xbc>)
 80101a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101a4:	6353      	str	r3, [r2, #52]	; 0x34
 80101a6:	2300      	movs	r3, #0
 80101a8:	60fb      	str	r3, [r7, #12]
 80101aa:	4b0c      	ldr	r3, [pc, #48]	; (80101dc <HAL_PCD_MspInit+0xbc>)
 80101ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ae:	4a0b      	ldr	r2, [pc, #44]	; (80101dc <HAL_PCD_MspInit+0xbc>)
 80101b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80101b4:	6453      	str	r3, [r2, #68]	; 0x44
 80101b6:	4b09      	ldr	r3, [pc, #36]	; (80101dc <HAL_PCD_MspInit+0xbc>)
 80101b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101be:	60fb      	str	r3, [r7, #12]
 80101c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80101c2:	2200      	movs	r2, #0
 80101c4:	2105      	movs	r1, #5
 80101c6:	2043      	movs	r0, #67	; 0x43
 80101c8:	f7f4 fcca 	bl	8004b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80101cc:	2043      	movs	r0, #67	; 0x43
 80101ce:	f7f4 fce3 	bl	8004b98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80101d2:	bf00      	nop
 80101d4:	3728      	adds	r7, #40	; 0x28
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	40023800 	.word	0x40023800
 80101e0:	40020000 	.word	0x40020000

080101e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80101f8:	4619      	mov	r1, r3
 80101fa:	4610      	mov	r0, r2
 80101fc:	f7fb f9da 	bl	800b5b4 <USBD_LL_SetupStage>
}
 8010200:	bf00      	nop
 8010202:	3708      	adds	r7, #8
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	460b      	mov	r3, r1
 8010212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801021a:	78fa      	ldrb	r2, [r7, #3]
 801021c:	6879      	ldr	r1, [r7, #4]
 801021e:	4613      	mov	r3, r2
 8010220:	00db      	lsls	r3, r3, #3
 8010222:	1a9b      	subs	r3, r3, r2
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	440b      	add	r3, r1
 8010228:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	78fb      	ldrb	r3, [r7, #3]
 8010230:	4619      	mov	r1, r3
 8010232:	f7fb fa14 	bl	800b65e <USBD_LL_DataOutStage>
}
 8010236:	bf00      	nop
 8010238:	3708      	adds	r7, #8
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}

0801023e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801023e:	b580      	push	{r7, lr}
 8010240:	b082      	sub	sp, #8
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
 8010246:	460b      	mov	r3, r1
 8010248:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010250:	78fa      	ldrb	r2, [r7, #3]
 8010252:	6879      	ldr	r1, [r7, #4]
 8010254:	4613      	mov	r3, r2
 8010256:	00db      	lsls	r3, r3, #3
 8010258:	1a9b      	subs	r3, r3, r2
 801025a:	009b      	lsls	r3, r3, #2
 801025c:	440b      	add	r3, r1
 801025e:	3348      	adds	r3, #72	; 0x48
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	78fb      	ldrb	r3, [r7, #3]
 8010264:	4619      	mov	r1, r3
 8010266:	f7fb fa5d 	bl	800b724 <USBD_LL_DataInStage>
}
 801026a:	bf00      	nop
 801026c:	3708      	adds	r7, #8
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010272:	b580      	push	{r7, lr}
 8010274:	b082      	sub	sp, #8
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010280:	4618      	mov	r0, r3
 8010282:	f7fb fb71 	bl	800b968 <USBD_LL_SOF>
}
 8010286:	bf00      	nop
 8010288:	3708      	adds	r7, #8
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}

0801028e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801028e:	b580      	push	{r7, lr}
 8010290:	b084      	sub	sp, #16
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010296:	2301      	movs	r3, #1
 8010298:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d102      	bne.n	80102a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80102a2:	2300      	movs	r3, #0
 80102a4:	73fb      	strb	r3, [r7, #15]
 80102a6:	e008      	b.n	80102ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	2b02      	cmp	r3, #2
 80102ae:	d102      	bne.n	80102b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80102b0:	2301      	movs	r3, #1
 80102b2:	73fb      	strb	r3, [r7, #15]
 80102b4:	e001      	b.n	80102ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80102b6:	f7f2 ffcb 	bl	8003250 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102c0:	7bfa      	ldrb	r2, [r7, #15]
 80102c2:	4611      	mov	r1, r2
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7fb fb11 	bl	800b8ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7fb fabd 	bl	800b850 <USBD_LL_Reset>
}
 80102d6:	bf00      	nop
 80102d8:	3710      	adds	r7, #16
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
	...

080102e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fb fb0c 	bl	800b90c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	6812      	ldr	r2, [r2, #0]
 8010302:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010306:	f043 0301 	orr.w	r3, r3, #1
 801030a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6a1b      	ldr	r3, [r3, #32]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d005      	beq.n	8010320 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010314:	4b04      	ldr	r3, [pc, #16]	; (8010328 <HAL_PCD_SuspendCallback+0x48>)
 8010316:	691b      	ldr	r3, [r3, #16]
 8010318:	4a03      	ldr	r2, [pc, #12]	; (8010328 <HAL_PCD_SuspendCallback+0x48>)
 801031a:	f043 0306 	orr.w	r3, r3, #6
 801031e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010320:	bf00      	nop
 8010322:	3708      	adds	r7, #8
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	e000ed00 	.word	0xe000ed00

0801032c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801033a:	4618      	mov	r0, r3
 801033c:	f7fb fafc 	bl	800b938 <USBD_LL_Resume>
}
 8010340:	bf00      	nop
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	460b      	mov	r3, r1
 8010352:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801035a:	78fa      	ldrb	r2, [r7, #3]
 801035c:	4611      	mov	r1, r2
 801035e:	4618      	mov	r0, r3
 8010360:	f7fb fb4a 	bl	800b9f8 <USBD_LL_IsoOUTIncomplete>
}
 8010364:	bf00      	nop
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	460b      	mov	r3, r1
 8010376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801037e:	78fa      	ldrb	r2, [r7, #3]
 8010380:	4611      	mov	r1, r2
 8010382:	4618      	mov	r0, r3
 8010384:	f7fb fb12 	bl	800b9ac <USBD_LL_IsoINIncomplete>
}
 8010388:	bf00      	nop
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fb fb50 	bl	800ba44 <USBD_LL_DevConnected>
}
 80103a4:	bf00      	nop
 80103a6:	3708      	adds	r7, #8
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fb fb4d 	bl	800ba5a <USBD_LL_DevDisconnected>
}
 80103c0:	bf00      	nop
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d13c      	bne.n	8010452 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80103d8:	4a20      	ldr	r2, [pc, #128]	; (801045c <USBD_LL_Init+0x94>)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	4a1e      	ldr	r2, [pc, #120]	; (801045c <USBD_LL_Init+0x94>)
 80103e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80103e8:	4b1c      	ldr	r3, [pc, #112]	; (801045c <USBD_LL_Init+0x94>)
 80103ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80103ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80103f0:	4b1a      	ldr	r3, [pc, #104]	; (801045c <USBD_LL_Init+0x94>)
 80103f2:	2204      	movs	r2, #4
 80103f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80103f6:	4b19      	ldr	r3, [pc, #100]	; (801045c <USBD_LL_Init+0x94>)
 80103f8:	2202      	movs	r2, #2
 80103fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80103fc:	4b17      	ldr	r3, [pc, #92]	; (801045c <USBD_LL_Init+0x94>)
 80103fe:	2200      	movs	r2, #0
 8010400:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010402:	4b16      	ldr	r3, [pc, #88]	; (801045c <USBD_LL_Init+0x94>)
 8010404:	2202      	movs	r2, #2
 8010406:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010408:	4b14      	ldr	r3, [pc, #80]	; (801045c <USBD_LL_Init+0x94>)
 801040a:	2200      	movs	r2, #0
 801040c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801040e:	4b13      	ldr	r3, [pc, #76]	; (801045c <USBD_LL_Init+0x94>)
 8010410:	2200      	movs	r2, #0
 8010412:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010414:	4b11      	ldr	r3, [pc, #68]	; (801045c <USBD_LL_Init+0x94>)
 8010416:	2200      	movs	r2, #0
 8010418:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801041a:	4b10      	ldr	r3, [pc, #64]	; (801045c <USBD_LL_Init+0x94>)
 801041c:	2200      	movs	r2, #0
 801041e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010420:	4b0e      	ldr	r3, [pc, #56]	; (801045c <USBD_LL_Init+0x94>)
 8010422:	2200      	movs	r2, #0
 8010424:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010426:	480d      	ldr	r0, [pc, #52]	; (801045c <USBD_LL_Init+0x94>)
 8010428:	f7f6 fb69 	bl	8006afe <HAL_PCD_Init>
 801042c:	4603      	mov	r3, r0
 801042e:	2b00      	cmp	r3, #0
 8010430:	d001      	beq.n	8010436 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010432:	f7f2 ff0d 	bl	8003250 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010436:	2180      	movs	r1, #128	; 0x80
 8010438:	4808      	ldr	r0, [pc, #32]	; (801045c <USBD_LL_Init+0x94>)
 801043a:	f7f7 fcc6 	bl	8007dca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801043e:	2240      	movs	r2, #64	; 0x40
 8010440:	2100      	movs	r1, #0
 8010442:	4806      	ldr	r0, [pc, #24]	; (801045c <USBD_LL_Init+0x94>)
 8010444:	f7f7 fc7a 	bl	8007d3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010448:	2280      	movs	r2, #128	; 0x80
 801044a:	2101      	movs	r1, #1
 801044c:	4803      	ldr	r0, [pc, #12]	; (801045c <USBD_LL_Init+0x94>)
 801044e:	f7f7 fc75 	bl	8007d3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010452:	2300      	movs	r3, #0
}
 8010454:	4618      	mov	r0, r3
 8010456:	3708      	adds	r7, #8
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	2000b258 	.word	0x2000b258

08010460 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010468:	2300      	movs	r3, #0
 801046a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801046c:	2300      	movs	r3, #0
 801046e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010476:	4618      	mov	r0, r3
 8010478:	f7f6 fc5e 	bl	8006d38 <HAL_PCD_Start>
 801047c:	4603      	mov	r3, r0
 801047e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010480:	7bfb      	ldrb	r3, [r7, #15]
 8010482:	4618      	mov	r0, r3
 8010484:	f000 f942 	bl	801070c <USBD_Get_USB_Status>
 8010488:	4603      	mov	r3, r0
 801048a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801048c:	7bbb      	ldrb	r3, [r7, #14]
}
 801048e:	4618      	mov	r0, r3
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}

08010496 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010496:	b580      	push	{r7, lr}
 8010498:	b084      	sub	sp, #16
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
 801049e:	4608      	mov	r0, r1
 80104a0:	4611      	mov	r1, r2
 80104a2:	461a      	mov	r2, r3
 80104a4:	4603      	mov	r3, r0
 80104a6:	70fb      	strb	r3, [r7, #3]
 80104a8:	460b      	mov	r3, r1
 80104aa:	70bb      	strb	r3, [r7, #2]
 80104ac:	4613      	mov	r3, r2
 80104ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104b0:	2300      	movs	r3, #0
 80104b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104b4:	2300      	movs	r3, #0
 80104b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80104be:	78bb      	ldrb	r3, [r7, #2]
 80104c0:	883a      	ldrh	r2, [r7, #0]
 80104c2:	78f9      	ldrb	r1, [r7, #3]
 80104c4:	f7f7 f842 	bl	800754c <HAL_PCD_EP_Open>
 80104c8:	4603      	mov	r3, r0
 80104ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104cc:	7bfb      	ldrb	r3, [r7, #15]
 80104ce:	4618      	mov	r0, r3
 80104d0:	f000 f91c 	bl	801070c <USBD_Get_USB_Status>
 80104d4:	4603      	mov	r3, r0
 80104d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3710      	adds	r7, #16
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}

080104e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104e2:	b580      	push	{r7, lr}
 80104e4:	b084      	sub	sp, #16
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	6078      	str	r0, [r7, #4]
 80104ea:	460b      	mov	r3, r1
 80104ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104ee:	2300      	movs	r3, #0
 80104f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104f2:	2300      	movs	r3, #0
 80104f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80104fc:	78fa      	ldrb	r2, [r7, #3]
 80104fe:	4611      	mov	r1, r2
 8010500:	4618      	mov	r0, r3
 8010502:	f7f7 f88b 	bl	800761c <HAL_PCD_EP_Close>
 8010506:	4603      	mov	r3, r0
 8010508:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801050a:	7bfb      	ldrb	r3, [r7, #15]
 801050c:	4618      	mov	r0, r3
 801050e:	f000 f8fd 	bl	801070c <USBD_Get_USB_Status>
 8010512:	4603      	mov	r3, r0
 8010514:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010516:	7bbb      	ldrb	r3, [r7, #14]
}
 8010518:	4618      	mov	r0, r3
 801051a:	3710      	adds	r7, #16
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}

08010520 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	460b      	mov	r3, r1
 801052a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801052c:	2300      	movs	r3, #0
 801052e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010530:	2300      	movs	r3, #0
 8010532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801053a:	78fa      	ldrb	r2, [r7, #3]
 801053c:	4611      	mov	r1, r2
 801053e:	4618      	mov	r0, r3
 8010540:	f7f7 f963 	bl	800780a <HAL_PCD_EP_SetStall>
 8010544:	4603      	mov	r3, r0
 8010546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010548:	7bfb      	ldrb	r3, [r7, #15]
 801054a:	4618      	mov	r0, r3
 801054c:	f000 f8de 	bl	801070c <USBD_Get_USB_Status>
 8010550:	4603      	mov	r3, r0
 8010552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010554:	7bbb      	ldrb	r3, [r7, #14]
}
 8010556:	4618      	mov	r0, r3
 8010558:	3710      	adds	r7, #16
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}

0801055e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801055e:	b580      	push	{r7, lr}
 8010560:	b084      	sub	sp, #16
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
 8010566:	460b      	mov	r3, r1
 8010568:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801056a:	2300      	movs	r3, #0
 801056c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801056e:	2300      	movs	r3, #0
 8010570:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010578:	78fa      	ldrb	r2, [r7, #3]
 801057a:	4611      	mov	r1, r2
 801057c:	4618      	mov	r0, r3
 801057e:	f7f7 f9a8 	bl	80078d2 <HAL_PCD_EP_ClrStall>
 8010582:	4603      	mov	r3, r0
 8010584:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010586:	7bfb      	ldrb	r3, [r7, #15]
 8010588:	4618      	mov	r0, r3
 801058a:	f000 f8bf 	bl	801070c <USBD_Get_USB_Status>
 801058e:	4603      	mov	r3, r0
 8010590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010592:	7bbb      	ldrb	r3, [r7, #14]
}
 8010594:	4618      	mov	r0, r3
 8010596:	3710      	adds	r7, #16
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801059c:	b480      	push	{r7}
 801059e:	b085      	sub	sp, #20
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	460b      	mov	r3, r1
 80105a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80105ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80105b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	da0b      	bge.n	80105d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80105b8:	78fb      	ldrb	r3, [r7, #3]
 80105ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105be:	68f9      	ldr	r1, [r7, #12]
 80105c0:	4613      	mov	r3, r2
 80105c2:	00db      	lsls	r3, r3, #3
 80105c4:	1a9b      	subs	r3, r3, r2
 80105c6:	009b      	lsls	r3, r3, #2
 80105c8:	440b      	add	r3, r1
 80105ca:	333e      	adds	r3, #62	; 0x3e
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	e00b      	b.n	80105e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80105d0:	78fb      	ldrb	r3, [r7, #3]
 80105d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105d6:	68f9      	ldr	r1, [r7, #12]
 80105d8:	4613      	mov	r3, r2
 80105da:	00db      	lsls	r3, r3, #3
 80105dc:	1a9b      	subs	r3, r3, r2
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	440b      	add	r3, r1
 80105e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80105e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3714      	adds	r7, #20
 80105ec:	46bd      	mov	sp, r7
 80105ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f2:	4770      	bx	lr

080105f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	460b      	mov	r3, r1
 80105fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010600:	2300      	movs	r3, #0
 8010602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010604:	2300      	movs	r3, #0
 8010606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801060e:	78fa      	ldrb	r2, [r7, #3]
 8010610:	4611      	mov	r1, r2
 8010612:	4618      	mov	r0, r3
 8010614:	f7f6 ff75 	bl	8007502 <HAL_PCD_SetAddress>
 8010618:	4603      	mov	r3, r0
 801061a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801061c:	7bfb      	ldrb	r3, [r7, #15]
 801061e:	4618      	mov	r0, r3
 8010620:	f000 f874 	bl	801070c <USBD_Get_USB_Status>
 8010624:	4603      	mov	r3, r0
 8010626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010628:	7bbb      	ldrb	r3, [r7, #14]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3710      	adds	r7, #16
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}

08010632 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010632:	b580      	push	{r7, lr}
 8010634:	b086      	sub	sp, #24
 8010636:	af00      	add	r7, sp, #0
 8010638:	60f8      	str	r0, [r7, #12]
 801063a:	607a      	str	r2, [r7, #4]
 801063c:	603b      	str	r3, [r7, #0]
 801063e:	460b      	mov	r3, r1
 8010640:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010642:	2300      	movs	r3, #0
 8010644:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010646:	2300      	movs	r3, #0
 8010648:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010650:	7af9      	ldrb	r1, [r7, #11]
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	f7f7 f88e 	bl	8007776 <HAL_PCD_EP_Transmit>
 801065a:	4603      	mov	r3, r0
 801065c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801065e:	7dfb      	ldrb	r3, [r7, #23]
 8010660:	4618      	mov	r0, r3
 8010662:	f000 f853 	bl	801070c <USBD_Get_USB_Status>
 8010666:	4603      	mov	r3, r0
 8010668:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801066a:	7dbb      	ldrb	r3, [r7, #22]
}
 801066c:	4618      	mov	r0, r3
 801066e:	3718      	adds	r7, #24
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}

08010674 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b086      	sub	sp, #24
 8010678:	af00      	add	r7, sp, #0
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	607a      	str	r2, [r7, #4]
 801067e:	603b      	str	r3, [r7, #0]
 8010680:	460b      	mov	r3, r1
 8010682:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010684:	2300      	movs	r3, #0
 8010686:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010688:	2300      	movs	r3, #0
 801068a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010692:	7af9      	ldrb	r1, [r7, #11]
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	f7f7 f80a 	bl	80076b0 <HAL_PCD_EP_Receive>
 801069c:	4603      	mov	r3, r0
 801069e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106a0:	7dfb      	ldrb	r3, [r7, #23]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f000 f832 	bl	801070c <USBD_Get_USB_Status>
 80106a8:	4603      	mov	r3, r0
 80106aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80106ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3718      	adds	r7, #24
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b082      	sub	sp, #8
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	460b      	mov	r3, r1
 80106c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106c8:	78fa      	ldrb	r2, [r7, #3]
 80106ca:	4611      	mov	r1, r2
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7f7 f83a 	bl	8007746 <HAL_PCD_EP_GetRxCount>
 80106d2:	4603      	mov	r3, r0
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3708      	adds	r7, #8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80106e4:	4b03      	ldr	r3, [pc, #12]	; (80106f4 <USBD_static_malloc+0x18>)
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	370c      	adds	r7, #12
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	200053e4 	.word	0x200053e4

080106f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]

}
 8010700:	bf00      	nop
 8010702:	370c      	adds	r7, #12
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801070c:	b480      	push	{r7}
 801070e:	b085      	sub	sp, #20
 8010710:	af00      	add	r7, sp, #0
 8010712:	4603      	mov	r3, r0
 8010714:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010716:	2300      	movs	r3, #0
 8010718:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801071a:	79fb      	ldrb	r3, [r7, #7]
 801071c:	2b03      	cmp	r3, #3
 801071e:	d817      	bhi.n	8010750 <USBD_Get_USB_Status+0x44>
 8010720:	a201      	add	r2, pc, #4	; (adr r2, 8010728 <USBD_Get_USB_Status+0x1c>)
 8010722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010726:	bf00      	nop
 8010728:	08010739 	.word	0x08010739
 801072c:	0801073f 	.word	0x0801073f
 8010730:	08010745 	.word	0x08010745
 8010734:	0801074b 	.word	0x0801074b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010738:	2300      	movs	r3, #0
 801073a:	73fb      	strb	r3, [r7, #15]
    break;
 801073c:	e00b      	b.n	8010756 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801073e:	2303      	movs	r3, #3
 8010740:	73fb      	strb	r3, [r7, #15]
    break;
 8010742:	e008      	b.n	8010756 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010744:	2301      	movs	r3, #1
 8010746:	73fb      	strb	r3, [r7, #15]
    break;
 8010748:	e005      	b.n	8010756 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801074a:	2303      	movs	r3, #3
 801074c:	73fb      	strb	r3, [r7, #15]
    break;
 801074e:	e002      	b.n	8010756 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010750:	2303      	movs	r3, #3
 8010752:	73fb      	strb	r3, [r7, #15]
    break;
 8010754:	bf00      	nop
  }
  return usb_status;
 8010756:	7bfb      	ldrb	r3, [r7, #15]
}
 8010758:	4618      	mov	r0, r3
 801075a:	3714      	adds	r7, #20
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr

08010764 <__errno>:
 8010764:	4b01      	ldr	r3, [pc, #4]	; (801076c <__errno+0x8>)
 8010766:	6818      	ldr	r0, [r3, #0]
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	20000184 	.word	0x20000184

08010770 <std>:
 8010770:	2300      	movs	r3, #0
 8010772:	b510      	push	{r4, lr}
 8010774:	4604      	mov	r4, r0
 8010776:	e9c0 3300 	strd	r3, r3, [r0]
 801077a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801077e:	6083      	str	r3, [r0, #8]
 8010780:	8181      	strh	r1, [r0, #12]
 8010782:	6643      	str	r3, [r0, #100]	; 0x64
 8010784:	81c2      	strh	r2, [r0, #14]
 8010786:	6183      	str	r3, [r0, #24]
 8010788:	4619      	mov	r1, r3
 801078a:	2208      	movs	r2, #8
 801078c:	305c      	adds	r0, #92	; 0x5c
 801078e:	f000 f934 	bl	80109fa <memset>
 8010792:	4b05      	ldr	r3, [pc, #20]	; (80107a8 <std+0x38>)
 8010794:	6263      	str	r3, [r4, #36]	; 0x24
 8010796:	4b05      	ldr	r3, [pc, #20]	; (80107ac <std+0x3c>)
 8010798:	62a3      	str	r3, [r4, #40]	; 0x28
 801079a:	4b05      	ldr	r3, [pc, #20]	; (80107b0 <std+0x40>)
 801079c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801079e:	4b05      	ldr	r3, [pc, #20]	; (80107b4 <std+0x44>)
 80107a0:	6224      	str	r4, [r4, #32]
 80107a2:	6323      	str	r3, [r4, #48]	; 0x30
 80107a4:	bd10      	pop	{r4, pc}
 80107a6:	bf00      	nop
 80107a8:	080114c9 	.word	0x080114c9
 80107ac:	080114eb 	.word	0x080114eb
 80107b0:	08011523 	.word	0x08011523
 80107b4:	08011547 	.word	0x08011547

080107b8 <_cleanup_r>:
 80107b8:	4901      	ldr	r1, [pc, #4]	; (80107c0 <_cleanup_r+0x8>)
 80107ba:	f000 b8af 	b.w	801091c <_fwalk_reent>
 80107be:	bf00      	nop
 80107c0:	08012445 	.word	0x08012445

080107c4 <__sfmoreglue>:
 80107c4:	b570      	push	{r4, r5, r6, lr}
 80107c6:	1e4a      	subs	r2, r1, #1
 80107c8:	2568      	movs	r5, #104	; 0x68
 80107ca:	4355      	muls	r5, r2
 80107cc:	460e      	mov	r6, r1
 80107ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80107d2:	f000 f91b 	bl	8010a0c <_malloc_r>
 80107d6:	4604      	mov	r4, r0
 80107d8:	b140      	cbz	r0, 80107ec <__sfmoreglue+0x28>
 80107da:	2100      	movs	r1, #0
 80107dc:	e9c0 1600 	strd	r1, r6, [r0]
 80107e0:	300c      	adds	r0, #12
 80107e2:	60a0      	str	r0, [r4, #8]
 80107e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80107e8:	f000 f907 	bl	80109fa <memset>
 80107ec:	4620      	mov	r0, r4
 80107ee:	bd70      	pop	{r4, r5, r6, pc}

080107f0 <__sfp_lock_acquire>:
 80107f0:	4801      	ldr	r0, [pc, #4]	; (80107f8 <__sfp_lock_acquire+0x8>)
 80107f2:	f000 b8f2 	b.w	80109da <__retarget_lock_acquire_recursive>
 80107f6:	bf00      	nop
 80107f8:	2000b668 	.word	0x2000b668

080107fc <__sfp_lock_release>:
 80107fc:	4801      	ldr	r0, [pc, #4]	; (8010804 <__sfp_lock_release+0x8>)
 80107fe:	f000 b8ed 	b.w	80109dc <__retarget_lock_release_recursive>
 8010802:	bf00      	nop
 8010804:	2000b668 	.word	0x2000b668

08010808 <__sinit_lock_acquire>:
 8010808:	4801      	ldr	r0, [pc, #4]	; (8010810 <__sinit_lock_acquire+0x8>)
 801080a:	f000 b8e6 	b.w	80109da <__retarget_lock_acquire_recursive>
 801080e:	bf00      	nop
 8010810:	2000b663 	.word	0x2000b663

08010814 <__sinit_lock_release>:
 8010814:	4801      	ldr	r0, [pc, #4]	; (801081c <__sinit_lock_release+0x8>)
 8010816:	f000 b8e1 	b.w	80109dc <__retarget_lock_release_recursive>
 801081a:	bf00      	nop
 801081c:	2000b663 	.word	0x2000b663

08010820 <__sinit>:
 8010820:	b510      	push	{r4, lr}
 8010822:	4604      	mov	r4, r0
 8010824:	f7ff fff0 	bl	8010808 <__sinit_lock_acquire>
 8010828:	69a3      	ldr	r3, [r4, #24]
 801082a:	b11b      	cbz	r3, 8010834 <__sinit+0x14>
 801082c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010830:	f7ff bff0 	b.w	8010814 <__sinit_lock_release>
 8010834:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010838:	6523      	str	r3, [r4, #80]	; 0x50
 801083a:	4b13      	ldr	r3, [pc, #76]	; (8010888 <__sinit+0x68>)
 801083c:	4a13      	ldr	r2, [pc, #76]	; (801088c <__sinit+0x6c>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	62a2      	str	r2, [r4, #40]	; 0x28
 8010842:	42a3      	cmp	r3, r4
 8010844:	bf04      	itt	eq
 8010846:	2301      	moveq	r3, #1
 8010848:	61a3      	streq	r3, [r4, #24]
 801084a:	4620      	mov	r0, r4
 801084c:	f000 f820 	bl	8010890 <__sfp>
 8010850:	6060      	str	r0, [r4, #4]
 8010852:	4620      	mov	r0, r4
 8010854:	f000 f81c 	bl	8010890 <__sfp>
 8010858:	60a0      	str	r0, [r4, #8]
 801085a:	4620      	mov	r0, r4
 801085c:	f000 f818 	bl	8010890 <__sfp>
 8010860:	2200      	movs	r2, #0
 8010862:	60e0      	str	r0, [r4, #12]
 8010864:	2104      	movs	r1, #4
 8010866:	6860      	ldr	r0, [r4, #4]
 8010868:	f7ff ff82 	bl	8010770 <std>
 801086c:	68a0      	ldr	r0, [r4, #8]
 801086e:	2201      	movs	r2, #1
 8010870:	2109      	movs	r1, #9
 8010872:	f7ff ff7d 	bl	8010770 <std>
 8010876:	68e0      	ldr	r0, [r4, #12]
 8010878:	2202      	movs	r2, #2
 801087a:	2112      	movs	r1, #18
 801087c:	f7ff ff78 	bl	8010770 <std>
 8010880:	2301      	movs	r3, #1
 8010882:	61a3      	str	r3, [r4, #24]
 8010884:	e7d2      	b.n	801082c <__sinit+0xc>
 8010886:	bf00      	nop
 8010888:	08015ef8 	.word	0x08015ef8
 801088c:	080107b9 	.word	0x080107b9

08010890 <__sfp>:
 8010890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010892:	4607      	mov	r7, r0
 8010894:	f7ff ffac 	bl	80107f0 <__sfp_lock_acquire>
 8010898:	4b1e      	ldr	r3, [pc, #120]	; (8010914 <__sfp+0x84>)
 801089a:	681e      	ldr	r6, [r3, #0]
 801089c:	69b3      	ldr	r3, [r6, #24]
 801089e:	b913      	cbnz	r3, 80108a6 <__sfp+0x16>
 80108a0:	4630      	mov	r0, r6
 80108a2:	f7ff ffbd 	bl	8010820 <__sinit>
 80108a6:	3648      	adds	r6, #72	; 0x48
 80108a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80108ac:	3b01      	subs	r3, #1
 80108ae:	d503      	bpl.n	80108b8 <__sfp+0x28>
 80108b0:	6833      	ldr	r3, [r6, #0]
 80108b2:	b30b      	cbz	r3, 80108f8 <__sfp+0x68>
 80108b4:	6836      	ldr	r6, [r6, #0]
 80108b6:	e7f7      	b.n	80108a8 <__sfp+0x18>
 80108b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80108bc:	b9d5      	cbnz	r5, 80108f4 <__sfp+0x64>
 80108be:	4b16      	ldr	r3, [pc, #88]	; (8010918 <__sfp+0x88>)
 80108c0:	60e3      	str	r3, [r4, #12]
 80108c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80108c6:	6665      	str	r5, [r4, #100]	; 0x64
 80108c8:	f000 f886 	bl	80109d8 <__retarget_lock_init_recursive>
 80108cc:	f7ff ff96 	bl	80107fc <__sfp_lock_release>
 80108d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80108d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80108d8:	6025      	str	r5, [r4, #0]
 80108da:	61a5      	str	r5, [r4, #24]
 80108dc:	2208      	movs	r2, #8
 80108de:	4629      	mov	r1, r5
 80108e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80108e4:	f000 f889 	bl	80109fa <memset>
 80108e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80108ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80108f0:	4620      	mov	r0, r4
 80108f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108f4:	3468      	adds	r4, #104	; 0x68
 80108f6:	e7d9      	b.n	80108ac <__sfp+0x1c>
 80108f8:	2104      	movs	r1, #4
 80108fa:	4638      	mov	r0, r7
 80108fc:	f7ff ff62 	bl	80107c4 <__sfmoreglue>
 8010900:	4604      	mov	r4, r0
 8010902:	6030      	str	r0, [r6, #0]
 8010904:	2800      	cmp	r0, #0
 8010906:	d1d5      	bne.n	80108b4 <__sfp+0x24>
 8010908:	f7ff ff78 	bl	80107fc <__sfp_lock_release>
 801090c:	230c      	movs	r3, #12
 801090e:	603b      	str	r3, [r7, #0]
 8010910:	e7ee      	b.n	80108f0 <__sfp+0x60>
 8010912:	bf00      	nop
 8010914:	08015ef8 	.word	0x08015ef8
 8010918:	ffff0001 	.word	0xffff0001

0801091c <_fwalk_reent>:
 801091c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010920:	4606      	mov	r6, r0
 8010922:	4688      	mov	r8, r1
 8010924:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010928:	2700      	movs	r7, #0
 801092a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801092e:	f1b9 0901 	subs.w	r9, r9, #1
 8010932:	d505      	bpl.n	8010940 <_fwalk_reent+0x24>
 8010934:	6824      	ldr	r4, [r4, #0]
 8010936:	2c00      	cmp	r4, #0
 8010938:	d1f7      	bne.n	801092a <_fwalk_reent+0xe>
 801093a:	4638      	mov	r0, r7
 801093c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010940:	89ab      	ldrh	r3, [r5, #12]
 8010942:	2b01      	cmp	r3, #1
 8010944:	d907      	bls.n	8010956 <_fwalk_reent+0x3a>
 8010946:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801094a:	3301      	adds	r3, #1
 801094c:	d003      	beq.n	8010956 <_fwalk_reent+0x3a>
 801094e:	4629      	mov	r1, r5
 8010950:	4630      	mov	r0, r6
 8010952:	47c0      	blx	r8
 8010954:	4307      	orrs	r7, r0
 8010956:	3568      	adds	r5, #104	; 0x68
 8010958:	e7e9      	b.n	801092e <_fwalk_reent+0x12>
	...

0801095c <__libc_init_array>:
 801095c:	b570      	push	{r4, r5, r6, lr}
 801095e:	4d0d      	ldr	r5, [pc, #52]	; (8010994 <__libc_init_array+0x38>)
 8010960:	4c0d      	ldr	r4, [pc, #52]	; (8010998 <__libc_init_array+0x3c>)
 8010962:	1b64      	subs	r4, r4, r5
 8010964:	10a4      	asrs	r4, r4, #2
 8010966:	2600      	movs	r6, #0
 8010968:	42a6      	cmp	r6, r4
 801096a:	d109      	bne.n	8010980 <__libc_init_array+0x24>
 801096c:	4d0b      	ldr	r5, [pc, #44]	; (801099c <__libc_init_array+0x40>)
 801096e:	4c0c      	ldr	r4, [pc, #48]	; (80109a0 <__libc_init_array+0x44>)
 8010970:	f002 fe9e 	bl	80136b0 <_init>
 8010974:	1b64      	subs	r4, r4, r5
 8010976:	10a4      	asrs	r4, r4, #2
 8010978:	2600      	movs	r6, #0
 801097a:	42a6      	cmp	r6, r4
 801097c:	d105      	bne.n	801098a <__libc_init_array+0x2e>
 801097e:	bd70      	pop	{r4, r5, r6, pc}
 8010980:	f855 3b04 	ldr.w	r3, [r5], #4
 8010984:	4798      	blx	r3
 8010986:	3601      	adds	r6, #1
 8010988:	e7ee      	b.n	8010968 <__libc_init_array+0xc>
 801098a:	f855 3b04 	ldr.w	r3, [r5], #4
 801098e:	4798      	blx	r3
 8010990:	3601      	adds	r6, #1
 8010992:	e7f2      	b.n	801097a <__libc_init_array+0x1e>
 8010994:	080162ac 	.word	0x080162ac
 8010998:	080162ac 	.word	0x080162ac
 801099c:	080162ac 	.word	0x080162ac
 80109a0:	080162b0 	.word	0x080162b0

080109a4 <__itoa>:
 80109a4:	1e93      	subs	r3, r2, #2
 80109a6:	2b22      	cmp	r3, #34	; 0x22
 80109a8:	b510      	push	{r4, lr}
 80109aa:	460c      	mov	r4, r1
 80109ac:	d904      	bls.n	80109b8 <__itoa+0x14>
 80109ae:	2300      	movs	r3, #0
 80109b0:	700b      	strb	r3, [r1, #0]
 80109b2:	461c      	mov	r4, r3
 80109b4:	4620      	mov	r0, r4
 80109b6:	bd10      	pop	{r4, pc}
 80109b8:	2a0a      	cmp	r2, #10
 80109ba:	d109      	bne.n	80109d0 <__itoa+0x2c>
 80109bc:	2800      	cmp	r0, #0
 80109be:	da07      	bge.n	80109d0 <__itoa+0x2c>
 80109c0:	232d      	movs	r3, #45	; 0x2d
 80109c2:	700b      	strb	r3, [r1, #0]
 80109c4:	4240      	negs	r0, r0
 80109c6:	2101      	movs	r1, #1
 80109c8:	4421      	add	r1, r4
 80109ca:	f000 fdd7 	bl	801157c <__utoa>
 80109ce:	e7f1      	b.n	80109b4 <__itoa+0x10>
 80109d0:	2100      	movs	r1, #0
 80109d2:	e7f9      	b.n	80109c8 <__itoa+0x24>

080109d4 <itoa>:
 80109d4:	f7ff bfe6 	b.w	80109a4 <__itoa>

080109d8 <__retarget_lock_init_recursive>:
 80109d8:	4770      	bx	lr

080109da <__retarget_lock_acquire_recursive>:
 80109da:	4770      	bx	lr

080109dc <__retarget_lock_release_recursive>:
 80109dc:	4770      	bx	lr

080109de <memcpy>:
 80109de:	440a      	add	r2, r1
 80109e0:	4291      	cmp	r1, r2
 80109e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80109e6:	d100      	bne.n	80109ea <memcpy+0xc>
 80109e8:	4770      	bx	lr
 80109ea:	b510      	push	{r4, lr}
 80109ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109f4:	4291      	cmp	r1, r2
 80109f6:	d1f9      	bne.n	80109ec <memcpy+0xe>
 80109f8:	bd10      	pop	{r4, pc}

080109fa <memset>:
 80109fa:	4402      	add	r2, r0
 80109fc:	4603      	mov	r3, r0
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d100      	bne.n	8010a04 <memset+0xa>
 8010a02:	4770      	bx	lr
 8010a04:	f803 1b01 	strb.w	r1, [r3], #1
 8010a08:	e7f9      	b.n	80109fe <memset+0x4>
	...

08010a0c <_malloc_r>:
 8010a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a0e:	1ccd      	adds	r5, r1, #3
 8010a10:	f025 0503 	bic.w	r5, r5, #3
 8010a14:	3508      	adds	r5, #8
 8010a16:	2d0c      	cmp	r5, #12
 8010a18:	bf38      	it	cc
 8010a1a:	250c      	movcc	r5, #12
 8010a1c:	2d00      	cmp	r5, #0
 8010a1e:	4606      	mov	r6, r0
 8010a20:	db01      	blt.n	8010a26 <_malloc_r+0x1a>
 8010a22:	42a9      	cmp	r1, r5
 8010a24:	d903      	bls.n	8010a2e <_malloc_r+0x22>
 8010a26:	230c      	movs	r3, #12
 8010a28:	6033      	str	r3, [r6, #0]
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a2e:	f001 fd63 	bl	80124f8 <__malloc_lock>
 8010a32:	4921      	ldr	r1, [pc, #132]	; (8010ab8 <_malloc_r+0xac>)
 8010a34:	680a      	ldr	r2, [r1, #0]
 8010a36:	4614      	mov	r4, r2
 8010a38:	b99c      	cbnz	r4, 8010a62 <_malloc_r+0x56>
 8010a3a:	4f20      	ldr	r7, [pc, #128]	; (8010abc <_malloc_r+0xb0>)
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	b923      	cbnz	r3, 8010a4a <_malloc_r+0x3e>
 8010a40:	4621      	mov	r1, r4
 8010a42:	4630      	mov	r0, r6
 8010a44:	f000 fd10 	bl	8011468 <_sbrk_r>
 8010a48:	6038      	str	r0, [r7, #0]
 8010a4a:	4629      	mov	r1, r5
 8010a4c:	4630      	mov	r0, r6
 8010a4e:	f000 fd0b 	bl	8011468 <_sbrk_r>
 8010a52:	1c43      	adds	r3, r0, #1
 8010a54:	d123      	bne.n	8010a9e <_malloc_r+0x92>
 8010a56:	230c      	movs	r3, #12
 8010a58:	6033      	str	r3, [r6, #0]
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	f001 fd52 	bl	8012504 <__malloc_unlock>
 8010a60:	e7e3      	b.n	8010a2a <_malloc_r+0x1e>
 8010a62:	6823      	ldr	r3, [r4, #0]
 8010a64:	1b5b      	subs	r3, r3, r5
 8010a66:	d417      	bmi.n	8010a98 <_malloc_r+0x8c>
 8010a68:	2b0b      	cmp	r3, #11
 8010a6a:	d903      	bls.n	8010a74 <_malloc_r+0x68>
 8010a6c:	6023      	str	r3, [r4, #0]
 8010a6e:	441c      	add	r4, r3
 8010a70:	6025      	str	r5, [r4, #0]
 8010a72:	e004      	b.n	8010a7e <_malloc_r+0x72>
 8010a74:	6863      	ldr	r3, [r4, #4]
 8010a76:	42a2      	cmp	r2, r4
 8010a78:	bf0c      	ite	eq
 8010a7a:	600b      	streq	r3, [r1, #0]
 8010a7c:	6053      	strne	r3, [r2, #4]
 8010a7e:	4630      	mov	r0, r6
 8010a80:	f001 fd40 	bl	8012504 <__malloc_unlock>
 8010a84:	f104 000b 	add.w	r0, r4, #11
 8010a88:	1d23      	adds	r3, r4, #4
 8010a8a:	f020 0007 	bic.w	r0, r0, #7
 8010a8e:	1ac2      	subs	r2, r0, r3
 8010a90:	d0cc      	beq.n	8010a2c <_malloc_r+0x20>
 8010a92:	1a1b      	subs	r3, r3, r0
 8010a94:	50a3      	str	r3, [r4, r2]
 8010a96:	e7c9      	b.n	8010a2c <_malloc_r+0x20>
 8010a98:	4622      	mov	r2, r4
 8010a9a:	6864      	ldr	r4, [r4, #4]
 8010a9c:	e7cc      	b.n	8010a38 <_malloc_r+0x2c>
 8010a9e:	1cc4      	adds	r4, r0, #3
 8010aa0:	f024 0403 	bic.w	r4, r4, #3
 8010aa4:	42a0      	cmp	r0, r4
 8010aa6:	d0e3      	beq.n	8010a70 <_malloc_r+0x64>
 8010aa8:	1a21      	subs	r1, r4, r0
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f000 fcdc 	bl	8011468 <_sbrk_r>
 8010ab0:	3001      	adds	r0, #1
 8010ab2:	d1dd      	bne.n	8010a70 <_malloc_r+0x64>
 8010ab4:	e7cf      	b.n	8010a56 <_malloc_r+0x4a>
 8010ab6:	bf00      	nop
 8010ab8:	20005604 	.word	0x20005604
 8010abc:	20005608 	.word	0x20005608

08010ac0 <__cvt>:
 8010ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ac4:	ec55 4b10 	vmov	r4, r5, d0
 8010ac8:	2d00      	cmp	r5, #0
 8010aca:	460e      	mov	r6, r1
 8010acc:	4619      	mov	r1, r3
 8010ace:	462b      	mov	r3, r5
 8010ad0:	bfbb      	ittet	lt
 8010ad2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010ad6:	461d      	movlt	r5, r3
 8010ad8:	2300      	movge	r3, #0
 8010ada:	232d      	movlt	r3, #45	; 0x2d
 8010adc:	700b      	strb	r3, [r1, #0]
 8010ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ae0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010ae4:	4691      	mov	r9, r2
 8010ae6:	f023 0820 	bic.w	r8, r3, #32
 8010aea:	bfbc      	itt	lt
 8010aec:	4622      	movlt	r2, r4
 8010aee:	4614      	movlt	r4, r2
 8010af0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010af4:	d005      	beq.n	8010b02 <__cvt+0x42>
 8010af6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010afa:	d100      	bne.n	8010afe <__cvt+0x3e>
 8010afc:	3601      	adds	r6, #1
 8010afe:	2102      	movs	r1, #2
 8010b00:	e000      	b.n	8010b04 <__cvt+0x44>
 8010b02:	2103      	movs	r1, #3
 8010b04:	ab03      	add	r3, sp, #12
 8010b06:	9301      	str	r3, [sp, #4]
 8010b08:	ab02      	add	r3, sp, #8
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	ec45 4b10 	vmov	d0, r4, r5
 8010b10:	4653      	mov	r3, sl
 8010b12:	4632      	mov	r2, r6
 8010b14:	f000 fe24 	bl	8011760 <_dtoa_r>
 8010b18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010b1c:	4607      	mov	r7, r0
 8010b1e:	d102      	bne.n	8010b26 <__cvt+0x66>
 8010b20:	f019 0f01 	tst.w	r9, #1
 8010b24:	d022      	beq.n	8010b6c <__cvt+0xac>
 8010b26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010b2a:	eb07 0906 	add.w	r9, r7, r6
 8010b2e:	d110      	bne.n	8010b52 <__cvt+0x92>
 8010b30:	783b      	ldrb	r3, [r7, #0]
 8010b32:	2b30      	cmp	r3, #48	; 0x30
 8010b34:	d10a      	bne.n	8010b4c <__cvt+0x8c>
 8010b36:	2200      	movs	r2, #0
 8010b38:	2300      	movs	r3, #0
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	4629      	mov	r1, r5
 8010b3e:	f7ef ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b42:	b918      	cbnz	r0, 8010b4c <__cvt+0x8c>
 8010b44:	f1c6 0601 	rsb	r6, r6, #1
 8010b48:	f8ca 6000 	str.w	r6, [sl]
 8010b4c:	f8da 3000 	ldr.w	r3, [sl]
 8010b50:	4499      	add	r9, r3
 8010b52:	2200      	movs	r2, #0
 8010b54:	2300      	movs	r3, #0
 8010b56:	4620      	mov	r0, r4
 8010b58:	4629      	mov	r1, r5
 8010b5a:	f7ef ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b5e:	b108      	cbz	r0, 8010b64 <__cvt+0xa4>
 8010b60:	f8cd 900c 	str.w	r9, [sp, #12]
 8010b64:	2230      	movs	r2, #48	; 0x30
 8010b66:	9b03      	ldr	r3, [sp, #12]
 8010b68:	454b      	cmp	r3, r9
 8010b6a:	d307      	bcc.n	8010b7c <__cvt+0xbc>
 8010b6c:	9b03      	ldr	r3, [sp, #12]
 8010b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b70:	1bdb      	subs	r3, r3, r7
 8010b72:	4638      	mov	r0, r7
 8010b74:	6013      	str	r3, [r2, #0]
 8010b76:	b004      	add	sp, #16
 8010b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b7c:	1c59      	adds	r1, r3, #1
 8010b7e:	9103      	str	r1, [sp, #12]
 8010b80:	701a      	strb	r2, [r3, #0]
 8010b82:	e7f0      	b.n	8010b66 <__cvt+0xa6>

08010b84 <__exponent>:
 8010b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b86:	4603      	mov	r3, r0
 8010b88:	2900      	cmp	r1, #0
 8010b8a:	bfb8      	it	lt
 8010b8c:	4249      	neglt	r1, r1
 8010b8e:	f803 2b02 	strb.w	r2, [r3], #2
 8010b92:	bfb4      	ite	lt
 8010b94:	222d      	movlt	r2, #45	; 0x2d
 8010b96:	222b      	movge	r2, #43	; 0x2b
 8010b98:	2909      	cmp	r1, #9
 8010b9a:	7042      	strb	r2, [r0, #1]
 8010b9c:	dd2a      	ble.n	8010bf4 <__exponent+0x70>
 8010b9e:	f10d 0407 	add.w	r4, sp, #7
 8010ba2:	46a4      	mov	ip, r4
 8010ba4:	270a      	movs	r7, #10
 8010ba6:	46a6      	mov	lr, r4
 8010ba8:	460a      	mov	r2, r1
 8010baa:	fb91 f6f7 	sdiv	r6, r1, r7
 8010bae:	fb07 1516 	mls	r5, r7, r6, r1
 8010bb2:	3530      	adds	r5, #48	; 0x30
 8010bb4:	2a63      	cmp	r2, #99	; 0x63
 8010bb6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010bba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010bbe:	4631      	mov	r1, r6
 8010bc0:	dcf1      	bgt.n	8010ba6 <__exponent+0x22>
 8010bc2:	3130      	adds	r1, #48	; 0x30
 8010bc4:	f1ae 0502 	sub.w	r5, lr, #2
 8010bc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010bcc:	1c44      	adds	r4, r0, #1
 8010bce:	4629      	mov	r1, r5
 8010bd0:	4561      	cmp	r1, ip
 8010bd2:	d30a      	bcc.n	8010bea <__exponent+0x66>
 8010bd4:	f10d 0209 	add.w	r2, sp, #9
 8010bd8:	eba2 020e 	sub.w	r2, r2, lr
 8010bdc:	4565      	cmp	r5, ip
 8010bde:	bf88      	it	hi
 8010be0:	2200      	movhi	r2, #0
 8010be2:	4413      	add	r3, r2
 8010be4:	1a18      	subs	r0, r3, r0
 8010be6:	b003      	add	sp, #12
 8010be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010bf2:	e7ed      	b.n	8010bd0 <__exponent+0x4c>
 8010bf4:	2330      	movs	r3, #48	; 0x30
 8010bf6:	3130      	adds	r1, #48	; 0x30
 8010bf8:	7083      	strb	r3, [r0, #2]
 8010bfa:	70c1      	strb	r1, [r0, #3]
 8010bfc:	1d03      	adds	r3, r0, #4
 8010bfe:	e7f1      	b.n	8010be4 <__exponent+0x60>

08010c00 <_printf_float>:
 8010c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c04:	ed2d 8b02 	vpush	{d8}
 8010c08:	b08d      	sub	sp, #52	; 0x34
 8010c0a:	460c      	mov	r4, r1
 8010c0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010c10:	4616      	mov	r6, r2
 8010c12:	461f      	mov	r7, r3
 8010c14:	4605      	mov	r5, r0
 8010c16:	f001 fc51 	bl	80124bc <_localeconv_r>
 8010c1a:	f8d0 a000 	ldr.w	sl, [r0]
 8010c1e:	4650      	mov	r0, sl
 8010c20:	f7ef fad6 	bl	80001d0 <strlen>
 8010c24:	2300      	movs	r3, #0
 8010c26:	930a      	str	r3, [sp, #40]	; 0x28
 8010c28:	6823      	ldr	r3, [r4, #0]
 8010c2a:	9305      	str	r3, [sp, #20]
 8010c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8010c30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010c34:	3307      	adds	r3, #7
 8010c36:	f023 0307 	bic.w	r3, r3, #7
 8010c3a:	f103 0208 	add.w	r2, r3, #8
 8010c3e:	f8c8 2000 	str.w	r2, [r8]
 8010c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010c4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010c4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010c52:	9307      	str	r3, [sp, #28]
 8010c54:	f8cd 8018 	str.w	r8, [sp, #24]
 8010c58:	ee08 0a10 	vmov	s16, r0
 8010c5c:	4b9f      	ldr	r3, [pc, #636]	; (8010edc <_printf_float+0x2dc>)
 8010c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c66:	f7ef ff61 	bl	8000b2c <__aeabi_dcmpun>
 8010c6a:	bb88      	cbnz	r0, 8010cd0 <_printf_float+0xd0>
 8010c6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c70:	4b9a      	ldr	r3, [pc, #616]	; (8010edc <_printf_float+0x2dc>)
 8010c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c76:	f7ef ff3b 	bl	8000af0 <__aeabi_dcmple>
 8010c7a:	bb48      	cbnz	r0, 8010cd0 <_printf_float+0xd0>
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	2300      	movs	r3, #0
 8010c80:	4640      	mov	r0, r8
 8010c82:	4649      	mov	r1, r9
 8010c84:	f7ef ff2a 	bl	8000adc <__aeabi_dcmplt>
 8010c88:	b110      	cbz	r0, 8010c90 <_printf_float+0x90>
 8010c8a:	232d      	movs	r3, #45	; 0x2d
 8010c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c90:	4b93      	ldr	r3, [pc, #588]	; (8010ee0 <_printf_float+0x2e0>)
 8010c92:	4894      	ldr	r0, [pc, #592]	; (8010ee4 <_printf_float+0x2e4>)
 8010c94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010c98:	bf94      	ite	ls
 8010c9a:	4698      	movls	r8, r3
 8010c9c:	4680      	movhi	r8, r0
 8010c9e:	2303      	movs	r3, #3
 8010ca0:	6123      	str	r3, [r4, #16]
 8010ca2:	9b05      	ldr	r3, [sp, #20]
 8010ca4:	f023 0204 	bic.w	r2, r3, #4
 8010ca8:	6022      	str	r2, [r4, #0]
 8010caa:	f04f 0900 	mov.w	r9, #0
 8010cae:	9700      	str	r7, [sp, #0]
 8010cb0:	4633      	mov	r3, r6
 8010cb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8010cb4:	4621      	mov	r1, r4
 8010cb6:	4628      	mov	r0, r5
 8010cb8:	f000 f9d8 	bl	801106c <_printf_common>
 8010cbc:	3001      	adds	r0, #1
 8010cbe:	f040 8090 	bne.w	8010de2 <_printf_float+0x1e2>
 8010cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010cc6:	b00d      	add	sp, #52	; 0x34
 8010cc8:	ecbd 8b02 	vpop	{d8}
 8010ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd0:	4642      	mov	r2, r8
 8010cd2:	464b      	mov	r3, r9
 8010cd4:	4640      	mov	r0, r8
 8010cd6:	4649      	mov	r1, r9
 8010cd8:	f7ef ff28 	bl	8000b2c <__aeabi_dcmpun>
 8010cdc:	b140      	cbz	r0, 8010cf0 <_printf_float+0xf0>
 8010cde:	464b      	mov	r3, r9
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	bfbc      	itt	lt
 8010ce4:	232d      	movlt	r3, #45	; 0x2d
 8010ce6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010cea:	487f      	ldr	r0, [pc, #508]	; (8010ee8 <_printf_float+0x2e8>)
 8010cec:	4b7f      	ldr	r3, [pc, #508]	; (8010eec <_printf_float+0x2ec>)
 8010cee:	e7d1      	b.n	8010c94 <_printf_float+0x94>
 8010cf0:	6863      	ldr	r3, [r4, #4]
 8010cf2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010cf6:	9206      	str	r2, [sp, #24]
 8010cf8:	1c5a      	adds	r2, r3, #1
 8010cfa:	d13f      	bne.n	8010d7c <_printf_float+0x17c>
 8010cfc:	2306      	movs	r3, #6
 8010cfe:	6063      	str	r3, [r4, #4]
 8010d00:	9b05      	ldr	r3, [sp, #20]
 8010d02:	6861      	ldr	r1, [r4, #4]
 8010d04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010d08:	2300      	movs	r3, #0
 8010d0a:	9303      	str	r3, [sp, #12]
 8010d0c:	ab0a      	add	r3, sp, #40	; 0x28
 8010d0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010d12:	ab09      	add	r3, sp, #36	; 0x24
 8010d14:	ec49 8b10 	vmov	d0, r8, r9
 8010d18:	9300      	str	r3, [sp, #0]
 8010d1a:	6022      	str	r2, [r4, #0]
 8010d1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010d20:	4628      	mov	r0, r5
 8010d22:	f7ff fecd 	bl	8010ac0 <__cvt>
 8010d26:	9b06      	ldr	r3, [sp, #24]
 8010d28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d2a:	2b47      	cmp	r3, #71	; 0x47
 8010d2c:	4680      	mov	r8, r0
 8010d2e:	d108      	bne.n	8010d42 <_printf_float+0x142>
 8010d30:	1cc8      	adds	r0, r1, #3
 8010d32:	db02      	blt.n	8010d3a <_printf_float+0x13a>
 8010d34:	6863      	ldr	r3, [r4, #4]
 8010d36:	4299      	cmp	r1, r3
 8010d38:	dd41      	ble.n	8010dbe <_printf_float+0x1be>
 8010d3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8010d3e:	fa5f fb8b 	uxtb.w	fp, fp
 8010d42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010d46:	d820      	bhi.n	8010d8a <_printf_float+0x18a>
 8010d48:	3901      	subs	r1, #1
 8010d4a:	465a      	mov	r2, fp
 8010d4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010d50:	9109      	str	r1, [sp, #36]	; 0x24
 8010d52:	f7ff ff17 	bl	8010b84 <__exponent>
 8010d56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d58:	1813      	adds	r3, r2, r0
 8010d5a:	2a01      	cmp	r2, #1
 8010d5c:	4681      	mov	r9, r0
 8010d5e:	6123      	str	r3, [r4, #16]
 8010d60:	dc02      	bgt.n	8010d68 <_printf_float+0x168>
 8010d62:	6822      	ldr	r2, [r4, #0]
 8010d64:	07d2      	lsls	r2, r2, #31
 8010d66:	d501      	bpl.n	8010d6c <_printf_float+0x16c>
 8010d68:	3301      	adds	r3, #1
 8010d6a:	6123      	str	r3, [r4, #16]
 8010d6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d09c      	beq.n	8010cae <_printf_float+0xae>
 8010d74:	232d      	movs	r3, #45	; 0x2d
 8010d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d7a:	e798      	b.n	8010cae <_printf_float+0xae>
 8010d7c:	9a06      	ldr	r2, [sp, #24]
 8010d7e:	2a47      	cmp	r2, #71	; 0x47
 8010d80:	d1be      	bne.n	8010d00 <_printf_float+0x100>
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d1bc      	bne.n	8010d00 <_printf_float+0x100>
 8010d86:	2301      	movs	r3, #1
 8010d88:	e7b9      	b.n	8010cfe <_printf_float+0xfe>
 8010d8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010d8e:	d118      	bne.n	8010dc2 <_printf_float+0x1c2>
 8010d90:	2900      	cmp	r1, #0
 8010d92:	6863      	ldr	r3, [r4, #4]
 8010d94:	dd0b      	ble.n	8010dae <_printf_float+0x1ae>
 8010d96:	6121      	str	r1, [r4, #16]
 8010d98:	b913      	cbnz	r3, 8010da0 <_printf_float+0x1a0>
 8010d9a:	6822      	ldr	r2, [r4, #0]
 8010d9c:	07d0      	lsls	r0, r2, #31
 8010d9e:	d502      	bpl.n	8010da6 <_printf_float+0x1a6>
 8010da0:	3301      	adds	r3, #1
 8010da2:	440b      	add	r3, r1
 8010da4:	6123      	str	r3, [r4, #16]
 8010da6:	65a1      	str	r1, [r4, #88]	; 0x58
 8010da8:	f04f 0900 	mov.w	r9, #0
 8010dac:	e7de      	b.n	8010d6c <_printf_float+0x16c>
 8010dae:	b913      	cbnz	r3, 8010db6 <_printf_float+0x1b6>
 8010db0:	6822      	ldr	r2, [r4, #0]
 8010db2:	07d2      	lsls	r2, r2, #31
 8010db4:	d501      	bpl.n	8010dba <_printf_float+0x1ba>
 8010db6:	3302      	adds	r3, #2
 8010db8:	e7f4      	b.n	8010da4 <_printf_float+0x1a4>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e7f2      	b.n	8010da4 <_printf_float+0x1a4>
 8010dbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dc4:	4299      	cmp	r1, r3
 8010dc6:	db05      	blt.n	8010dd4 <_printf_float+0x1d4>
 8010dc8:	6823      	ldr	r3, [r4, #0]
 8010dca:	6121      	str	r1, [r4, #16]
 8010dcc:	07d8      	lsls	r0, r3, #31
 8010dce:	d5ea      	bpl.n	8010da6 <_printf_float+0x1a6>
 8010dd0:	1c4b      	adds	r3, r1, #1
 8010dd2:	e7e7      	b.n	8010da4 <_printf_float+0x1a4>
 8010dd4:	2900      	cmp	r1, #0
 8010dd6:	bfd4      	ite	le
 8010dd8:	f1c1 0202 	rsble	r2, r1, #2
 8010ddc:	2201      	movgt	r2, #1
 8010dde:	4413      	add	r3, r2
 8010de0:	e7e0      	b.n	8010da4 <_printf_float+0x1a4>
 8010de2:	6823      	ldr	r3, [r4, #0]
 8010de4:	055a      	lsls	r2, r3, #21
 8010de6:	d407      	bmi.n	8010df8 <_printf_float+0x1f8>
 8010de8:	6923      	ldr	r3, [r4, #16]
 8010dea:	4642      	mov	r2, r8
 8010dec:	4631      	mov	r1, r6
 8010dee:	4628      	mov	r0, r5
 8010df0:	47b8      	blx	r7
 8010df2:	3001      	adds	r0, #1
 8010df4:	d12c      	bne.n	8010e50 <_printf_float+0x250>
 8010df6:	e764      	b.n	8010cc2 <_printf_float+0xc2>
 8010df8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010dfc:	f240 80e0 	bls.w	8010fc0 <_printf_float+0x3c0>
 8010e00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010e04:	2200      	movs	r2, #0
 8010e06:	2300      	movs	r3, #0
 8010e08:	f7ef fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	d034      	beq.n	8010e7a <_printf_float+0x27a>
 8010e10:	4a37      	ldr	r2, [pc, #220]	; (8010ef0 <_printf_float+0x2f0>)
 8010e12:	2301      	movs	r3, #1
 8010e14:	4631      	mov	r1, r6
 8010e16:	4628      	mov	r0, r5
 8010e18:	47b8      	blx	r7
 8010e1a:	3001      	adds	r0, #1
 8010e1c:	f43f af51 	beq.w	8010cc2 <_printf_float+0xc2>
 8010e20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e24:	429a      	cmp	r2, r3
 8010e26:	db02      	blt.n	8010e2e <_printf_float+0x22e>
 8010e28:	6823      	ldr	r3, [r4, #0]
 8010e2a:	07d8      	lsls	r0, r3, #31
 8010e2c:	d510      	bpl.n	8010e50 <_printf_float+0x250>
 8010e2e:	ee18 3a10 	vmov	r3, s16
 8010e32:	4652      	mov	r2, sl
 8010e34:	4631      	mov	r1, r6
 8010e36:	4628      	mov	r0, r5
 8010e38:	47b8      	blx	r7
 8010e3a:	3001      	adds	r0, #1
 8010e3c:	f43f af41 	beq.w	8010cc2 <_printf_float+0xc2>
 8010e40:	f04f 0800 	mov.w	r8, #0
 8010e44:	f104 091a 	add.w	r9, r4, #26
 8010e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e4a:	3b01      	subs	r3, #1
 8010e4c:	4543      	cmp	r3, r8
 8010e4e:	dc09      	bgt.n	8010e64 <_printf_float+0x264>
 8010e50:	6823      	ldr	r3, [r4, #0]
 8010e52:	079b      	lsls	r3, r3, #30
 8010e54:	f100 8105 	bmi.w	8011062 <_printf_float+0x462>
 8010e58:	68e0      	ldr	r0, [r4, #12]
 8010e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e5c:	4298      	cmp	r0, r3
 8010e5e:	bfb8      	it	lt
 8010e60:	4618      	movlt	r0, r3
 8010e62:	e730      	b.n	8010cc6 <_printf_float+0xc6>
 8010e64:	2301      	movs	r3, #1
 8010e66:	464a      	mov	r2, r9
 8010e68:	4631      	mov	r1, r6
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	47b8      	blx	r7
 8010e6e:	3001      	adds	r0, #1
 8010e70:	f43f af27 	beq.w	8010cc2 <_printf_float+0xc2>
 8010e74:	f108 0801 	add.w	r8, r8, #1
 8010e78:	e7e6      	b.n	8010e48 <_printf_float+0x248>
 8010e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	dc39      	bgt.n	8010ef4 <_printf_float+0x2f4>
 8010e80:	4a1b      	ldr	r2, [pc, #108]	; (8010ef0 <_printf_float+0x2f0>)
 8010e82:	2301      	movs	r3, #1
 8010e84:	4631      	mov	r1, r6
 8010e86:	4628      	mov	r0, r5
 8010e88:	47b8      	blx	r7
 8010e8a:	3001      	adds	r0, #1
 8010e8c:	f43f af19 	beq.w	8010cc2 <_printf_float+0xc2>
 8010e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e94:	4313      	orrs	r3, r2
 8010e96:	d102      	bne.n	8010e9e <_printf_float+0x29e>
 8010e98:	6823      	ldr	r3, [r4, #0]
 8010e9a:	07d9      	lsls	r1, r3, #31
 8010e9c:	d5d8      	bpl.n	8010e50 <_printf_float+0x250>
 8010e9e:	ee18 3a10 	vmov	r3, s16
 8010ea2:	4652      	mov	r2, sl
 8010ea4:	4631      	mov	r1, r6
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	47b8      	blx	r7
 8010eaa:	3001      	adds	r0, #1
 8010eac:	f43f af09 	beq.w	8010cc2 <_printf_float+0xc2>
 8010eb0:	f04f 0900 	mov.w	r9, #0
 8010eb4:	f104 0a1a 	add.w	sl, r4, #26
 8010eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eba:	425b      	negs	r3, r3
 8010ebc:	454b      	cmp	r3, r9
 8010ebe:	dc01      	bgt.n	8010ec4 <_printf_float+0x2c4>
 8010ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ec2:	e792      	b.n	8010dea <_printf_float+0x1ea>
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	4652      	mov	r2, sl
 8010ec8:	4631      	mov	r1, r6
 8010eca:	4628      	mov	r0, r5
 8010ecc:	47b8      	blx	r7
 8010ece:	3001      	adds	r0, #1
 8010ed0:	f43f aef7 	beq.w	8010cc2 <_printf_float+0xc2>
 8010ed4:	f109 0901 	add.w	r9, r9, #1
 8010ed8:	e7ee      	b.n	8010eb8 <_printf_float+0x2b8>
 8010eda:	bf00      	nop
 8010edc:	7fefffff 	.word	0x7fefffff
 8010ee0:	08015efc 	.word	0x08015efc
 8010ee4:	08015f00 	.word	0x08015f00
 8010ee8:	08015f08 	.word	0x08015f08
 8010eec:	08015f04 	.word	0x08015f04
 8010ef0:	08015f0c 	.word	0x08015f0c
 8010ef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ef6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	bfa8      	it	ge
 8010efc:	461a      	movge	r2, r3
 8010efe:	2a00      	cmp	r2, #0
 8010f00:	4691      	mov	r9, r2
 8010f02:	dc37      	bgt.n	8010f74 <_printf_float+0x374>
 8010f04:	f04f 0b00 	mov.w	fp, #0
 8010f08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f0c:	f104 021a 	add.w	r2, r4, #26
 8010f10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010f12:	9305      	str	r3, [sp, #20]
 8010f14:	eba3 0309 	sub.w	r3, r3, r9
 8010f18:	455b      	cmp	r3, fp
 8010f1a:	dc33      	bgt.n	8010f84 <_printf_float+0x384>
 8010f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f20:	429a      	cmp	r2, r3
 8010f22:	db3b      	blt.n	8010f9c <_printf_float+0x39c>
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	07da      	lsls	r2, r3, #31
 8010f28:	d438      	bmi.n	8010f9c <_printf_float+0x39c>
 8010f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f2c:	9b05      	ldr	r3, [sp, #20]
 8010f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f30:	1ad3      	subs	r3, r2, r3
 8010f32:	eba2 0901 	sub.w	r9, r2, r1
 8010f36:	4599      	cmp	r9, r3
 8010f38:	bfa8      	it	ge
 8010f3a:	4699      	movge	r9, r3
 8010f3c:	f1b9 0f00 	cmp.w	r9, #0
 8010f40:	dc35      	bgt.n	8010fae <_printf_float+0x3ae>
 8010f42:	f04f 0800 	mov.w	r8, #0
 8010f46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f4a:	f104 0a1a 	add.w	sl, r4, #26
 8010f4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f52:	1a9b      	subs	r3, r3, r2
 8010f54:	eba3 0309 	sub.w	r3, r3, r9
 8010f58:	4543      	cmp	r3, r8
 8010f5a:	f77f af79 	ble.w	8010e50 <_printf_float+0x250>
 8010f5e:	2301      	movs	r3, #1
 8010f60:	4652      	mov	r2, sl
 8010f62:	4631      	mov	r1, r6
 8010f64:	4628      	mov	r0, r5
 8010f66:	47b8      	blx	r7
 8010f68:	3001      	adds	r0, #1
 8010f6a:	f43f aeaa 	beq.w	8010cc2 <_printf_float+0xc2>
 8010f6e:	f108 0801 	add.w	r8, r8, #1
 8010f72:	e7ec      	b.n	8010f4e <_printf_float+0x34e>
 8010f74:	4613      	mov	r3, r2
 8010f76:	4631      	mov	r1, r6
 8010f78:	4642      	mov	r2, r8
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	47b8      	blx	r7
 8010f7e:	3001      	adds	r0, #1
 8010f80:	d1c0      	bne.n	8010f04 <_printf_float+0x304>
 8010f82:	e69e      	b.n	8010cc2 <_printf_float+0xc2>
 8010f84:	2301      	movs	r3, #1
 8010f86:	4631      	mov	r1, r6
 8010f88:	4628      	mov	r0, r5
 8010f8a:	9205      	str	r2, [sp, #20]
 8010f8c:	47b8      	blx	r7
 8010f8e:	3001      	adds	r0, #1
 8010f90:	f43f ae97 	beq.w	8010cc2 <_printf_float+0xc2>
 8010f94:	9a05      	ldr	r2, [sp, #20]
 8010f96:	f10b 0b01 	add.w	fp, fp, #1
 8010f9a:	e7b9      	b.n	8010f10 <_printf_float+0x310>
 8010f9c:	ee18 3a10 	vmov	r3, s16
 8010fa0:	4652      	mov	r2, sl
 8010fa2:	4631      	mov	r1, r6
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	47b8      	blx	r7
 8010fa8:	3001      	adds	r0, #1
 8010faa:	d1be      	bne.n	8010f2a <_printf_float+0x32a>
 8010fac:	e689      	b.n	8010cc2 <_printf_float+0xc2>
 8010fae:	9a05      	ldr	r2, [sp, #20]
 8010fb0:	464b      	mov	r3, r9
 8010fb2:	4442      	add	r2, r8
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	47b8      	blx	r7
 8010fba:	3001      	adds	r0, #1
 8010fbc:	d1c1      	bne.n	8010f42 <_printf_float+0x342>
 8010fbe:	e680      	b.n	8010cc2 <_printf_float+0xc2>
 8010fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fc2:	2a01      	cmp	r2, #1
 8010fc4:	dc01      	bgt.n	8010fca <_printf_float+0x3ca>
 8010fc6:	07db      	lsls	r3, r3, #31
 8010fc8:	d538      	bpl.n	801103c <_printf_float+0x43c>
 8010fca:	2301      	movs	r3, #1
 8010fcc:	4642      	mov	r2, r8
 8010fce:	4631      	mov	r1, r6
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	47b8      	blx	r7
 8010fd4:	3001      	adds	r0, #1
 8010fd6:	f43f ae74 	beq.w	8010cc2 <_printf_float+0xc2>
 8010fda:	ee18 3a10 	vmov	r3, s16
 8010fde:	4652      	mov	r2, sl
 8010fe0:	4631      	mov	r1, r6
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	47b8      	blx	r7
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	f43f ae6b 	beq.w	8010cc2 <_printf_float+0xc2>
 8010fec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	f7ef fd68 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ff8:	b9d8      	cbnz	r0, 8011032 <_printf_float+0x432>
 8010ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ffc:	f108 0201 	add.w	r2, r8, #1
 8011000:	3b01      	subs	r3, #1
 8011002:	4631      	mov	r1, r6
 8011004:	4628      	mov	r0, r5
 8011006:	47b8      	blx	r7
 8011008:	3001      	adds	r0, #1
 801100a:	d10e      	bne.n	801102a <_printf_float+0x42a>
 801100c:	e659      	b.n	8010cc2 <_printf_float+0xc2>
 801100e:	2301      	movs	r3, #1
 8011010:	4652      	mov	r2, sl
 8011012:	4631      	mov	r1, r6
 8011014:	4628      	mov	r0, r5
 8011016:	47b8      	blx	r7
 8011018:	3001      	adds	r0, #1
 801101a:	f43f ae52 	beq.w	8010cc2 <_printf_float+0xc2>
 801101e:	f108 0801 	add.w	r8, r8, #1
 8011022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011024:	3b01      	subs	r3, #1
 8011026:	4543      	cmp	r3, r8
 8011028:	dcf1      	bgt.n	801100e <_printf_float+0x40e>
 801102a:	464b      	mov	r3, r9
 801102c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011030:	e6dc      	b.n	8010dec <_printf_float+0x1ec>
 8011032:	f04f 0800 	mov.w	r8, #0
 8011036:	f104 0a1a 	add.w	sl, r4, #26
 801103a:	e7f2      	b.n	8011022 <_printf_float+0x422>
 801103c:	2301      	movs	r3, #1
 801103e:	4642      	mov	r2, r8
 8011040:	e7df      	b.n	8011002 <_printf_float+0x402>
 8011042:	2301      	movs	r3, #1
 8011044:	464a      	mov	r2, r9
 8011046:	4631      	mov	r1, r6
 8011048:	4628      	mov	r0, r5
 801104a:	47b8      	blx	r7
 801104c:	3001      	adds	r0, #1
 801104e:	f43f ae38 	beq.w	8010cc2 <_printf_float+0xc2>
 8011052:	f108 0801 	add.w	r8, r8, #1
 8011056:	68e3      	ldr	r3, [r4, #12]
 8011058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801105a:	1a5b      	subs	r3, r3, r1
 801105c:	4543      	cmp	r3, r8
 801105e:	dcf0      	bgt.n	8011042 <_printf_float+0x442>
 8011060:	e6fa      	b.n	8010e58 <_printf_float+0x258>
 8011062:	f04f 0800 	mov.w	r8, #0
 8011066:	f104 0919 	add.w	r9, r4, #25
 801106a:	e7f4      	b.n	8011056 <_printf_float+0x456>

0801106c <_printf_common>:
 801106c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011070:	4616      	mov	r6, r2
 8011072:	4699      	mov	r9, r3
 8011074:	688a      	ldr	r2, [r1, #8]
 8011076:	690b      	ldr	r3, [r1, #16]
 8011078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801107c:	4293      	cmp	r3, r2
 801107e:	bfb8      	it	lt
 8011080:	4613      	movlt	r3, r2
 8011082:	6033      	str	r3, [r6, #0]
 8011084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011088:	4607      	mov	r7, r0
 801108a:	460c      	mov	r4, r1
 801108c:	b10a      	cbz	r2, 8011092 <_printf_common+0x26>
 801108e:	3301      	adds	r3, #1
 8011090:	6033      	str	r3, [r6, #0]
 8011092:	6823      	ldr	r3, [r4, #0]
 8011094:	0699      	lsls	r1, r3, #26
 8011096:	bf42      	ittt	mi
 8011098:	6833      	ldrmi	r3, [r6, #0]
 801109a:	3302      	addmi	r3, #2
 801109c:	6033      	strmi	r3, [r6, #0]
 801109e:	6825      	ldr	r5, [r4, #0]
 80110a0:	f015 0506 	ands.w	r5, r5, #6
 80110a4:	d106      	bne.n	80110b4 <_printf_common+0x48>
 80110a6:	f104 0a19 	add.w	sl, r4, #25
 80110aa:	68e3      	ldr	r3, [r4, #12]
 80110ac:	6832      	ldr	r2, [r6, #0]
 80110ae:	1a9b      	subs	r3, r3, r2
 80110b0:	42ab      	cmp	r3, r5
 80110b2:	dc26      	bgt.n	8011102 <_printf_common+0x96>
 80110b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80110b8:	1e13      	subs	r3, r2, #0
 80110ba:	6822      	ldr	r2, [r4, #0]
 80110bc:	bf18      	it	ne
 80110be:	2301      	movne	r3, #1
 80110c0:	0692      	lsls	r2, r2, #26
 80110c2:	d42b      	bmi.n	801111c <_printf_common+0xb0>
 80110c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110c8:	4649      	mov	r1, r9
 80110ca:	4638      	mov	r0, r7
 80110cc:	47c0      	blx	r8
 80110ce:	3001      	adds	r0, #1
 80110d0:	d01e      	beq.n	8011110 <_printf_common+0xa4>
 80110d2:	6823      	ldr	r3, [r4, #0]
 80110d4:	68e5      	ldr	r5, [r4, #12]
 80110d6:	6832      	ldr	r2, [r6, #0]
 80110d8:	f003 0306 	and.w	r3, r3, #6
 80110dc:	2b04      	cmp	r3, #4
 80110de:	bf08      	it	eq
 80110e0:	1aad      	subeq	r5, r5, r2
 80110e2:	68a3      	ldr	r3, [r4, #8]
 80110e4:	6922      	ldr	r2, [r4, #16]
 80110e6:	bf0c      	ite	eq
 80110e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110ec:	2500      	movne	r5, #0
 80110ee:	4293      	cmp	r3, r2
 80110f0:	bfc4      	itt	gt
 80110f2:	1a9b      	subgt	r3, r3, r2
 80110f4:	18ed      	addgt	r5, r5, r3
 80110f6:	2600      	movs	r6, #0
 80110f8:	341a      	adds	r4, #26
 80110fa:	42b5      	cmp	r5, r6
 80110fc:	d11a      	bne.n	8011134 <_printf_common+0xc8>
 80110fe:	2000      	movs	r0, #0
 8011100:	e008      	b.n	8011114 <_printf_common+0xa8>
 8011102:	2301      	movs	r3, #1
 8011104:	4652      	mov	r2, sl
 8011106:	4649      	mov	r1, r9
 8011108:	4638      	mov	r0, r7
 801110a:	47c0      	blx	r8
 801110c:	3001      	adds	r0, #1
 801110e:	d103      	bne.n	8011118 <_printf_common+0xac>
 8011110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011118:	3501      	adds	r5, #1
 801111a:	e7c6      	b.n	80110aa <_printf_common+0x3e>
 801111c:	18e1      	adds	r1, r4, r3
 801111e:	1c5a      	adds	r2, r3, #1
 8011120:	2030      	movs	r0, #48	; 0x30
 8011122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011126:	4422      	add	r2, r4
 8011128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801112c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011130:	3302      	adds	r3, #2
 8011132:	e7c7      	b.n	80110c4 <_printf_common+0x58>
 8011134:	2301      	movs	r3, #1
 8011136:	4622      	mov	r2, r4
 8011138:	4649      	mov	r1, r9
 801113a:	4638      	mov	r0, r7
 801113c:	47c0      	blx	r8
 801113e:	3001      	adds	r0, #1
 8011140:	d0e6      	beq.n	8011110 <_printf_common+0xa4>
 8011142:	3601      	adds	r6, #1
 8011144:	e7d9      	b.n	80110fa <_printf_common+0x8e>
	...

08011148 <_printf_i>:
 8011148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801114c:	460c      	mov	r4, r1
 801114e:	4691      	mov	r9, r2
 8011150:	7e27      	ldrb	r7, [r4, #24]
 8011152:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011154:	2f78      	cmp	r7, #120	; 0x78
 8011156:	4680      	mov	r8, r0
 8011158:	469a      	mov	sl, r3
 801115a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801115e:	d807      	bhi.n	8011170 <_printf_i+0x28>
 8011160:	2f62      	cmp	r7, #98	; 0x62
 8011162:	d80a      	bhi.n	801117a <_printf_i+0x32>
 8011164:	2f00      	cmp	r7, #0
 8011166:	f000 80d8 	beq.w	801131a <_printf_i+0x1d2>
 801116a:	2f58      	cmp	r7, #88	; 0x58
 801116c:	f000 80a3 	beq.w	80112b6 <_printf_i+0x16e>
 8011170:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011178:	e03a      	b.n	80111f0 <_printf_i+0xa8>
 801117a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801117e:	2b15      	cmp	r3, #21
 8011180:	d8f6      	bhi.n	8011170 <_printf_i+0x28>
 8011182:	a001      	add	r0, pc, #4	; (adr r0, 8011188 <_printf_i+0x40>)
 8011184:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011188:	080111e1 	.word	0x080111e1
 801118c:	080111f5 	.word	0x080111f5
 8011190:	08011171 	.word	0x08011171
 8011194:	08011171 	.word	0x08011171
 8011198:	08011171 	.word	0x08011171
 801119c:	08011171 	.word	0x08011171
 80111a0:	080111f5 	.word	0x080111f5
 80111a4:	08011171 	.word	0x08011171
 80111a8:	08011171 	.word	0x08011171
 80111ac:	08011171 	.word	0x08011171
 80111b0:	08011171 	.word	0x08011171
 80111b4:	08011301 	.word	0x08011301
 80111b8:	08011225 	.word	0x08011225
 80111bc:	080112e3 	.word	0x080112e3
 80111c0:	08011171 	.word	0x08011171
 80111c4:	08011171 	.word	0x08011171
 80111c8:	08011323 	.word	0x08011323
 80111cc:	08011171 	.word	0x08011171
 80111d0:	08011225 	.word	0x08011225
 80111d4:	08011171 	.word	0x08011171
 80111d8:	08011171 	.word	0x08011171
 80111dc:	080112eb 	.word	0x080112eb
 80111e0:	680b      	ldr	r3, [r1, #0]
 80111e2:	1d1a      	adds	r2, r3, #4
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	600a      	str	r2, [r1, #0]
 80111e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80111ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111f0:	2301      	movs	r3, #1
 80111f2:	e0a3      	b.n	801133c <_printf_i+0x1f4>
 80111f4:	6825      	ldr	r5, [r4, #0]
 80111f6:	6808      	ldr	r0, [r1, #0]
 80111f8:	062e      	lsls	r6, r5, #24
 80111fa:	f100 0304 	add.w	r3, r0, #4
 80111fe:	d50a      	bpl.n	8011216 <_printf_i+0xce>
 8011200:	6805      	ldr	r5, [r0, #0]
 8011202:	600b      	str	r3, [r1, #0]
 8011204:	2d00      	cmp	r5, #0
 8011206:	da03      	bge.n	8011210 <_printf_i+0xc8>
 8011208:	232d      	movs	r3, #45	; 0x2d
 801120a:	426d      	negs	r5, r5
 801120c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011210:	485e      	ldr	r0, [pc, #376]	; (801138c <_printf_i+0x244>)
 8011212:	230a      	movs	r3, #10
 8011214:	e019      	b.n	801124a <_printf_i+0x102>
 8011216:	f015 0f40 	tst.w	r5, #64	; 0x40
 801121a:	6805      	ldr	r5, [r0, #0]
 801121c:	600b      	str	r3, [r1, #0]
 801121e:	bf18      	it	ne
 8011220:	b22d      	sxthne	r5, r5
 8011222:	e7ef      	b.n	8011204 <_printf_i+0xbc>
 8011224:	680b      	ldr	r3, [r1, #0]
 8011226:	6825      	ldr	r5, [r4, #0]
 8011228:	1d18      	adds	r0, r3, #4
 801122a:	6008      	str	r0, [r1, #0]
 801122c:	0628      	lsls	r0, r5, #24
 801122e:	d501      	bpl.n	8011234 <_printf_i+0xec>
 8011230:	681d      	ldr	r5, [r3, #0]
 8011232:	e002      	b.n	801123a <_printf_i+0xf2>
 8011234:	0669      	lsls	r1, r5, #25
 8011236:	d5fb      	bpl.n	8011230 <_printf_i+0xe8>
 8011238:	881d      	ldrh	r5, [r3, #0]
 801123a:	4854      	ldr	r0, [pc, #336]	; (801138c <_printf_i+0x244>)
 801123c:	2f6f      	cmp	r7, #111	; 0x6f
 801123e:	bf0c      	ite	eq
 8011240:	2308      	moveq	r3, #8
 8011242:	230a      	movne	r3, #10
 8011244:	2100      	movs	r1, #0
 8011246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801124a:	6866      	ldr	r6, [r4, #4]
 801124c:	60a6      	str	r6, [r4, #8]
 801124e:	2e00      	cmp	r6, #0
 8011250:	bfa2      	ittt	ge
 8011252:	6821      	ldrge	r1, [r4, #0]
 8011254:	f021 0104 	bicge.w	r1, r1, #4
 8011258:	6021      	strge	r1, [r4, #0]
 801125a:	b90d      	cbnz	r5, 8011260 <_printf_i+0x118>
 801125c:	2e00      	cmp	r6, #0
 801125e:	d04d      	beq.n	80112fc <_printf_i+0x1b4>
 8011260:	4616      	mov	r6, r2
 8011262:	fbb5 f1f3 	udiv	r1, r5, r3
 8011266:	fb03 5711 	mls	r7, r3, r1, r5
 801126a:	5dc7      	ldrb	r7, [r0, r7]
 801126c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011270:	462f      	mov	r7, r5
 8011272:	42bb      	cmp	r3, r7
 8011274:	460d      	mov	r5, r1
 8011276:	d9f4      	bls.n	8011262 <_printf_i+0x11a>
 8011278:	2b08      	cmp	r3, #8
 801127a:	d10b      	bne.n	8011294 <_printf_i+0x14c>
 801127c:	6823      	ldr	r3, [r4, #0]
 801127e:	07df      	lsls	r7, r3, #31
 8011280:	d508      	bpl.n	8011294 <_printf_i+0x14c>
 8011282:	6923      	ldr	r3, [r4, #16]
 8011284:	6861      	ldr	r1, [r4, #4]
 8011286:	4299      	cmp	r1, r3
 8011288:	bfde      	ittt	le
 801128a:	2330      	movle	r3, #48	; 0x30
 801128c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011290:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8011294:	1b92      	subs	r2, r2, r6
 8011296:	6122      	str	r2, [r4, #16]
 8011298:	f8cd a000 	str.w	sl, [sp]
 801129c:	464b      	mov	r3, r9
 801129e:	aa03      	add	r2, sp, #12
 80112a0:	4621      	mov	r1, r4
 80112a2:	4640      	mov	r0, r8
 80112a4:	f7ff fee2 	bl	801106c <_printf_common>
 80112a8:	3001      	adds	r0, #1
 80112aa:	d14c      	bne.n	8011346 <_printf_i+0x1fe>
 80112ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112b0:	b004      	add	sp, #16
 80112b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112b6:	4835      	ldr	r0, [pc, #212]	; (801138c <_printf_i+0x244>)
 80112b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80112bc:	6823      	ldr	r3, [r4, #0]
 80112be:	680e      	ldr	r6, [r1, #0]
 80112c0:	061f      	lsls	r7, r3, #24
 80112c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80112c6:	600e      	str	r6, [r1, #0]
 80112c8:	d514      	bpl.n	80112f4 <_printf_i+0x1ac>
 80112ca:	07d9      	lsls	r1, r3, #31
 80112cc:	bf44      	itt	mi
 80112ce:	f043 0320 	orrmi.w	r3, r3, #32
 80112d2:	6023      	strmi	r3, [r4, #0]
 80112d4:	b91d      	cbnz	r5, 80112de <_printf_i+0x196>
 80112d6:	6823      	ldr	r3, [r4, #0]
 80112d8:	f023 0320 	bic.w	r3, r3, #32
 80112dc:	6023      	str	r3, [r4, #0]
 80112de:	2310      	movs	r3, #16
 80112e0:	e7b0      	b.n	8011244 <_printf_i+0xfc>
 80112e2:	6823      	ldr	r3, [r4, #0]
 80112e4:	f043 0320 	orr.w	r3, r3, #32
 80112e8:	6023      	str	r3, [r4, #0]
 80112ea:	2378      	movs	r3, #120	; 0x78
 80112ec:	4828      	ldr	r0, [pc, #160]	; (8011390 <_printf_i+0x248>)
 80112ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80112f2:	e7e3      	b.n	80112bc <_printf_i+0x174>
 80112f4:	065e      	lsls	r6, r3, #25
 80112f6:	bf48      	it	mi
 80112f8:	b2ad      	uxthmi	r5, r5
 80112fa:	e7e6      	b.n	80112ca <_printf_i+0x182>
 80112fc:	4616      	mov	r6, r2
 80112fe:	e7bb      	b.n	8011278 <_printf_i+0x130>
 8011300:	680b      	ldr	r3, [r1, #0]
 8011302:	6826      	ldr	r6, [r4, #0]
 8011304:	6960      	ldr	r0, [r4, #20]
 8011306:	1d1d      	adds	r5, r3, #4
 8011308:	600d      	str	r5, [r1, #0]
 801130a:	0635      	lsls	r5, r6, #24
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	d501      	bpl.n	8011314 <_printf_i+0x1cc>
 8011310:	6018      	str	r0, [r3, #0]
 8011312:	e002      	b.n	801131a <_printf_i+0x1d2>
 8011314:	0671      	lsls	r1, r6, #25
 8011316:	d5fb      	bpl.n	8011310 <_printf_i+0x1c8>
 8011318:	8018      	strh	r0, [r3, #0]
 801131a:	2300      	movs	r3, #0
 801131c:	6123      	str	r3, [r4, #16]
 801131e:	4616      	mov	r6, r2
 8011320:	e7ba      	b.n	8011298 <_printf_i+0x150>
 8011322:	680b      	ldr	r3, [r1, #0]
 8011324:	1d1a      	adds	r2, r3, #4
 8011326:	600a      	str	r2, [r1, #0]
 8011328:	681e      	ldr	r6, [r3, #0]
 801132a:	6862      	ldr	r2, [r4, #4]
 801132c:	2100      	movs	r1, #0
 801132e:	4630      	mov	r0, r6
 8011330:	f7ee ff56 	bl	80001e0 <memchr>
 8011334:	b108      	cbz	r0, 801133a <_printf_i+0x1f2>
 8011336:	1b80      	subs	r0, r0, r6
 8011338:	6060      	str	r0, [r4, #4]
 801133a:	6863      	ldr	r3, [r4, #4]
 801133c:	6123      	str	r3, [r4, #16]
 801133e:	2300      	movs	r3, #0
 8011340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011344:	e7a8      	b.n	8011298 <_printf_i+0x150>
 8011346:	6923      	ldr	r3, [r4, #16]
 8011348:	4632      	mov	r2, r6
 801134a:	4649      	mov	r1, r9
 801134c:	4640      	mov	r0, r8
 801134e:	47d0      	blx	sl
 8011350:	3001      	adds	r0, #1
 8011352:	d0ab      	beq.n	80112ac <_printf_i+0x164>
 8011354:	6823      	ldr	r3, [r4, #0]
 8011356:	079b      	lsls	r3, r3, #30
 8011358:	d413      	bmi.n	8011382 <_printf_i+0x23a>
 801135a:	68e0      	ldr	r0, [r4, #12]
 801135c:	9b03      	ldr	r3, [sp, #12]
 801135e:	4298      	cmp	r0, r3
 8011360:	bfb8      	it	lt
 8011362:	4618      	movlt	r0, r3
 8011364:	e7a4      	b.n	80112b0 <_printf_i+0x168>
 8011366:	2301      	movs	r3, #1
 8011368:	4632      	mov	r2, r6
 801136a:	4649      	mov	r1, r9
 801136c:	4640      	mov	r0, r8
 801136e:	47d0      	blx	sl
 8011370:	3001      	adds	r0, #1
 8011372:	d09b      	beq.n	80112ac <_printf_i+0x164>
 8011374:	3501      	adds	r5, #1
 8011376:	68e3      	ldr	r3, [r4, #12]
 8011378:	9903      	ldr	r1, [sp, #12]
 801137a:	1a5b      	subs	r3, r3, r1
 801137c:	42ab      	cmp	r3, r5
 801137e:	dcf2      	bgt.n	8011366 <_printf_i+0x21e>
 8011380:	e7eb      	b.n	801135a <_printf_i+0x212>
 8011382:	2500      	movs	r5, #0
 8011384:	f104 0619 	add.w	r6, r4, #25
 8011388:	e7f5      	b.n	8011376 <_printf_i+0x22e>
 801138a:	bf00      	nop
 801138c:	08015f0e 	.word	0x08015f0e
 8011390:	08015f1f 	.word	0x08015f1f

08011394 <cleanup_glue>:
 8011394:	b538      	push	{r3, r4, r5, lr}
 8011396:	460c      	mov	r4, r1
 8011398:	6809      	ldr	r1, [r1, #0]
 801139a:	4605      	mov	r5, r0
 801139c:	b109      	cbz	r1, 80113a2 <cleanup_glue+0xe>
 801139e:	f7ff fff9 	bl	8011394 <cleanup_glue>
 80113a2:	4621      	mov	r1, r4
 80113a4:	4628      	mov	r0, r5
 80113a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113aa:	f001 bc3f 	b.w	8012c2c <_free_r>
	...

080113b0 <_reclaim_reent>:
 80113b0:	4b2c      	ldr	r3, [pc, #176]	; (8011464 <_reclaim_reent+0xb4>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4283      	cmp	r3, r0
 80113b6:	b570      	push	{r4, r5, r6, lr}
 80113b8:	4604      	mov	r4, r0
 80113ba:	d051      	beq.n	8011460 <_reclaim_reent+0xb0>
 80113bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80113be:	b143      	cbz	r3, 80113d2 <_reclaim_reent+0x22>
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d14a      	bne.n	801145c <_reclaim_reent+0xac>
 80113c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113c8:	6819      	ldr	r1, [r3, #0]
 80113ca:	b111      	cbz	r1, 80113d2 <_reclaim_reent+0x22>
 80113cc:	4620      	mov	r0, r4
 80113ce:	f001 fc2d 	bl	8012c2c <_free_r>
 80113d2:	6961      	ldr	r1, [r4, #20]
 80113d4:	b111      	cbz	r1, 80113dc <_reclaim_reent+0x2c>
 80113d6:	4620      	mov	r0, r4
 80113d8:	f001 fc28 	bl	8012c2c <_free_r>
 80113dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80113de:	b111      	cbz	r1, 80113e6 <_reclaim_reent+0x36>
 80113e0:	4620      	mov	r0, r4
 80113e2:	f001 fc23 	bl	8012c2c <_free_r>
 80113e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80113e8:	b111      	cbz	r1, 80113f0 <_reclaim_reent+0x40>
 80113ea:	4620      	mov	r0, r4
 80113ec:	f001 fc1e 	bl	8012c2c <_free_r>
 80113f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80113f2:	b111      	cbz	r1, 80113fa <_reclaim_reent+0x4a>
 80113f4:	4620      	mov	r0, r4
 80113f6:	f001 fc19 	bl	8012c2c <_free_r>
 80113fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80113fc:	b111      	cbz	r1, 8011404 <_reclaim_reent+0x54>
 80113fe:	4620      	mov	r0, r4
 8011400:	f001 fc14 	bl	8012c2c <_free_r>
 8011404:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011406:	b111      	cbz	r1, 801140e <_reclaim_reent+0x5e>
 8011408:	4620      	mov	r0, r4
 801140a:	f001 fc0f 	bl	8012c2c <_free_r>
 801140e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011410:	b111      	cbz	r1, 8011418 <_reclaim_reent+0x68>
 8011412:	4620      	mov	r0, r4
 8011414:	f001 fc0a 	bl	8012c2c <_free_r>
 8011418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801141a:	b111      	cbz	r1, 8011422 <_reclaim_reent+0x72>
 801141c:	4620      	mov	r0, r4
 801141e:	f001 fc05 	bl	8012c2c <_free_r>
 8011422:	69a3      	ldr	r3, [r4, #24]
 8011424:	b1e3      	cbz	r3, 8011460 <_reclaim_reent+0xb0>
 8011426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011428:	4620      	mov	r0, r4
 801142a:	4798      	blx	r3
 801142c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801142e:	b1b9      	cbz	r1, 8011460 <_reclaim_reent+0xb0>
 8011430:	4620      	mov	r0, r4
 8011432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011436:	f7ff bfad 	b.w	8011394 <cleanup_glue>
 801143a:	5949      	ldr	r1, [r1, r5]
 801143c:	b941      	cbnz	r1, 8011450 <_reclaim_reent+0xa0>
 801143e:	3504      	adds	r5, #4
 8011440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011442:	2d80      	cmp	r5, #128	; 0x80
 8011444:	68d9      	ldr	r1, [r3, #12]
 8011446:	d1f8      	bne.n	801143a <_reclaim_reent+0x8a>
 8011448:	4620      	mov	r0, r4
 801144a:	f001 fbef 	bl	8012c2c <_free_r>
 801144e:	e7ba      	b.n	80113c6 <_reclaim_reent+0x16>
 8011450:	680e      	ldr	r6, [r1, #0]
 8011452:	4620      	mov	r0, r4
 8011454:	f001 fbea 	bl	8012c2c <_free_r>
 8011458:	4631      	mov	r1, r6
 801145a:	e7ef      	b.n	801143c <_reclaim_reent+0x8c>
 801145c:	2500      	movs	r5, #0
 801145e:	e7ef      	b.n	8011440 <_reclaim_reent+0x90>
 8011460:	bd70      	pop	{r4, r5, r6, pc}
 8011462:	bf00      	nop
 8011464:	20000184 	.word	0x20000184

08011468 <_sbrk_r>:
 8011468:	b538      	push	{r3, r4, r5, lr}
 801146a:	4d06      	ldr	r5, [pc, #24]	; (8011484 <_sbrk_r+0x1c>)
 801146c:	2300      	movs	r3, #0
 801146e:	4604      	mov	r4, r0
 8011470:	4608      	mov	r0, r1
 8011472:	602b      	str	r3, [r5, #0]
 8011474:	f7f2 fb76 	bl	8003b64 <_sbrk>
 8011478:	1c43      	adds	r3, r0, #1
 801147a:	d102      	bne.n	8011482 <_sbrk_r+0x1a>
 801147c:	682b      	ldr	r3, [r5, #0]
 801147e:	b103      	cbz	r3, 8011482 <_sbrk_r+0x1a>
 8011480:	6023      	str	r3, [r4, #0]
 8011482:	bd38      	pop	{r3, r4, r5, pc}
 8011484:	2000b66c 	.word	0x2000b66c

08011488 <siprintf>:
 8011488:	b40e      	push	{r1, r2, r3}
 801148a:	b500      	push	{lr}
 801148c:	b09c      	sub	sp, #112	; 0x70
 801148e:	ab1d      	add	r3, sp, #116	; 0x74
 8011490:	9002      	str	r0, [sp, #8]
 8011492:	9006      	str	r0, [sp, #24]
 8011494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011498:	4809      	ldr	r0, [pc, #36]	; (80114c0 <siprintf+0x38>)
 801149a:	9107      	str	r1, [sp, #28]
 801149c:	9104      	str	r1, [sp, #16]
 801149e:	4909      	ldr	r1, [pc, #36]	; (80114c4 <siprintf+0x3c>)
 80114a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80114a4:	9105      	str	r1, [sp, #20]
 80114a6:	6800      	ldr	r0, [r0, #0]
 80114a8:	9301      	str	r3, [sp, #4]
 80114aa:	a902      	add	r1, sp, #8
 80114ac:	f001 fc6a 	bl	8012d84 <_svfiprintf_r>
 80114b0:	9b02      	ldr	r3, [sp, #8]
 80114b2:	2200      	movs	r2, #0
 80114b4:	701a      	strb	r2, [r3, #0]
 80114b6:	b01c      	add	sp, #112	; 0x70
 80114b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80114bc:	b003      	add	sp, #12
 80114be:	4770      	bx	lr
 80114c0:	20000184 	.word	0x20000184
 80114c4:	ffff0208 	.word	0xffff0208

080114c8 <__sread>:
 80114c8:	b510      	push	{r4, lr}
 80114ca:	460c      	mov	r4, r1
 80114cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114d0:	f001 fd58 	bl	8012f84 <_read_r>
 80114d4:	2800      	cmp	r0, #0
 80114d6:	bfab      	itete	ge
 80114d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80114da:	89a3      	ldrhlt	r3, [r4, #12]
 80114dc:	181b      	addge	r3, r3, r0
 80114de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80114e2:	bfac      	ite	ge
 80114e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80114e6:	81a3      	strhlt	r3, [r4, #12]
 80114e8:	bd10      	pop	{r4, pc}

080114ea <__swrite>:
 80114ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114ee:	461f      	mov	r7, r3
 80114f0:	898b      	ldrh	r3, [r1, #12]
 80114f2:	05db      	lsls	r3, r3, #23
 80114f4:	4605      	mov	r5, r0
 80114f6:	460c      	mov	r4, r1
 80114f8:	4616      	mov	r6, r2
 80114fa:	d505      	bpl.n	8011508 <__swrite+0x1e>
 80114fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011500:	2302      	movs	r3, #2
 8011502:	2200      	movs	r2, #0
 8011504:	f000 ffde 	bl	80124c4 <_lseek_r>
 8011508:	89a3      	ldrh	r3, [r4, #12]
 801150a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801150e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011512:	81a3      	strh	r3, [r4, #12]
 8011514:	4632      	mov	r2, r6
 8011516:	463b      	mov	r3, r7
 8011518:	4628      	mov	r0, r5
 801151a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801151e:	f000 b86f 	b.w	8011600 <_write_r>

08011522 <__sseek>:
 8011522:	b510      	push	{r4, lr}
 8011524:	460c      	mov	r4, r1
 8011526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801152a:	f000 ffcb 	bl	80124c4 <_lseek_r>
 801152e:	1c43      	adds	r3, r0, #1
 8011530:	89a3      	ldrh	r3, [r4, #12]
 8011532:	bf15      	itete	ne
 8011534:	6560      	strne	r0, [r4, #84]	; 0x54
 8011536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801153a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801153e:	81a3      	strheq	r3, [r4, #12]
 8011540:	bf18      	it	ne
 8011542:	81a3      	strhne	r3, [r4, #12]
 8011544:	bd10      	pop	{r4, pc}

08011546 <__sclose>:
 8011546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801154a:	f000 b86b 	b.w	8011624 <_close_r>

0801154e <strcat>:
 801154e:	b510      	push	{r4, lr}
 8011550:	4602      	mov	r2, r0
 8011552:	7814      	ldrb	r4, [r2, #0]
 8011554:	4613      	mov	r3, r2
 8011556:	3201      	adds	r2, #1
 8011558:	2c00      	cmp	r4, #0
 801155a:	d1fa      	bne.n	8011552 <strcat+0x4>
 801155c:	3b01      	subs	r3, #1
 801155e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011562:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011566:	2a00      	cmp	r2, #0
 8011568:	d1f9      	bne.n	801155e <strcat+0x10>
 801156a:	bd10      	pop	{r4, pc}

0801156c <strcpy>:
 801156c:	4603      	mov	r3, r0
 801156e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011572:	f803 2b01 	strb.w	r2, [r3], #1
 8011576:	2a00      	cmp	r2, #0
 8011578:	d1f9      	bne.n	801156e <strcpy+0x2>
 801157a:	4770      	bx	lr

0801157c <__utoa>:
 801157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801157e:	4c1f      	ldr	r4, [pc, #124]	; (80115fc <__utoa+0x80>)
 8011580:	b08b      	sub	sp, #44	; 0x2c
 8011582:	4605      	mov	r5, r0
 8011584:	460b      	mov	r3, r1
 8011586:	466e      	mov	r6, sp
 8011588:	f104 0c20 	add.w	ip, r4, #32
 801158c:	6820      	ldr	r0, [r4, #0]
 801158e:	6861      	ldr	r1, [r4, #4]
 8011590:	4637      	mov	r7, r6
 8011592:	c703      	stmia	r7!, {r0, r1}
 8011594:	3408      	adds	r4, #8
 8011596:	4564      	cmp	r4, ip
 8011598:	463e      	mov	r6, r7
 801159a:	d1f7      	bne.n	801158c <__utoa+0x10>
 801159c:	7921      	ldrb	r1, [r4, #4]
 801159e:	7139      	strb	r1, [r7, #4]
 80115a0:	1e91      	subs	r1, r2, #2
 80115a2:	6820      	ldr	r0, [r4, #0]
 80115a4:	6038      	str	r0, [r7, #0]
 80115a6:	2922      	cmp	r1, #34	; 0x22
 80115a8:	f04f 0100 	mov.w	r1, #0
 80115ac:	d904      	bls.n	80115b8 <__utoa+0x3c>
 80115ae:	7019      	strb	r1, [r3, #0]
 80115b0:	460b      	mov	r3, r1
 80115b2:	4618      	mov	r0, r3
 80115b4:	b00b      	add	sp, #44	; 0x2c
 80115b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115b8:	1e58      	subs	r0, r3, #1
 80115ba:	4684      	mov	ip, r0
 80115bc:	fbb5 f7f2 	udiv	r7, r5, r2
 80115c0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80115c4:	fb02 5617 	mls	r6, r2, r7, r5
 80115c8:	4476      	add	r6, lr
 80115ca:	460c      	mov	r4, r1
 80115cc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80115d0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80115d4:	462e      	mov	r6, r5
 80115d6:	42b2      	cmp	r2, r6
 80115d8:	f101 0101 	add.w	r1, r1, #1
 80115dc:	463d      	mov	r5, r7
 80115de:	d9ed      	bls.n	80115bc <__utoa+0x40>
 80115e0:	2200      	movs	r2, #0
 80115e2:	545a      	strb	r2, [r3, r1]
 80115e4:	1919      	adds	r1, r3, r4
 80115e6:	1aa5      	subs	r5, r4, r2
 80115e8:	42aa      	cmp	r2, r5
 80115ea:	dae2      	bge.n	80115b2 <__utoa+0x36>
 80115ec:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80115f0:	780e      	ldrb	r6, [r1, #0]
 80115f2:	7006      	strb	r6, [r0, #0]
 80115f4:	3201      	adds	r2, #1
 80115f6:	f801 5901 	strb.w	r5, [r1], #-1
 80115fa:	e7f4      	b.n	80115e6 <__utoa+0x6a>
 80115fc:	08015f30 	.word	0x08015f30

08011600 <_write_r>:
 8011600:	b538      	push	{r3, r4, r5, lr}
 8011602:	4d07      	ldr	r5, [pc, #28]	; (8011620 <_write_r+0x20>)
 8011604:	4604      	mov	r4, r0
 8011606:	4608      	mov	r0, r1
 8011608:	4611      	mov	r1, r2
 801160a:	2200      	movs	r2, #0
 801160c:	602a      	str	r2, [r5, #0]
 801160e:	461a      	mov	r2, r3
 8011610:	f7f2 fa57 	bl	8003ac2 <_write>
 8011614:	1c43      	adds	r3, r0, #1
 8011616:	d102      	bne.n	801161e <_write_r+0x1e>
 8011618:	682b      	ldr	r3, [r5, #0]
 801161a:	b103      	cbz	r3, 801161e <_write_r+0x1e>
 801161c:	6023      	str	r3, [r4, #0]
 801161e:	bd38      	pop	{r3, r4, r5, pc}
 8011620:	2000b66c 	.word	0x2000b66c

08011624 <_close_r>:
 8011624:	b538      	push	{r3, r4, r5, lr}
 8011626:	4d06      	ldr	r5, [pc, #24]	; (8011640 <_close_r+0x1c>)
 8011628:	2300      	movs	r3, #0
 801162a:	4604      	mov	r4, r0
 801162c:	4608      	mov	r0, r1
 801162e:	602b      	str	r3, [r5, #0]
 8011630:	f7f2 fa63 	bl	8003afa <_close>
 8011634:	1c43      	adds	r3, r0, #1
 8011636:	d102      	bne.n	801163e <_close_r+0x1a>
 8011638:	682b      	ldr	r3, [r5, #0]
 801163a:	b103      	cbz	r3, 801163e <_close_r+0x1a>
 801163c:	6023      	str	r3, [r4, #0]
 801163e:	bd38      	pop	{r3, r4, r5, pc}
 8011640:	2000b66c 	.word	0x2000b66c

08011644 <quorem>:
 8011644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011648:	6903      	ldr	r3, [r0, #16]
 801164a:	690c      	ldr	r4, [r1, #16]
 801164c:	42a3      	cmp	r3, r4
 801164e:	4607      	mov	r7, r0
 8011650:	f2c0 8081 	blt.w	8011756 <quorem+0x112>
 8011654:	3c01      	subs	r4, #1
 8011656:	f101 0814 	add.w	r8, r1, #20
 801165a:	f100 0514 	add.w	r5, r0, #20
 801165e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011662:	9301      	str	r3, [sp, #4]
 8011664:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801166c:	3301      	adds	r3, #1
 801166e:	429a      	cmp	r2, r3
 8011670:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011674:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011678:	fbb2 f6f3 	udiv	r6, r2, r3
 801167c:	d331      	bcc.n	80116e2 <quorem+0x9e>
 801167e:	f04f 0e00 	mov.w	lr, #0
 8011682:	4640      	mov	r0, r8
 8011684:	46ac      	mov	ip, r5
 8011686:	46f2      	mov	sl, lr
 8011688:	f850 2b04 	ldr.w	r2, [r0], #4
 801168c:	b293      	uxth	r3, r2
 801168e:	fb06 e303 	mla	r3, r6, r3, lr
 8011692:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011696:	b29b      	uxth	r3, r3
 8011698:	ebaa 0303 	sub.w	r3, sl, r3
 801169c:	0c12      	lsrs	r2, r2, #16
 801169e:	f8dc a000 	ldr.w	sl, [ip]
 80116a2:	fb06 e202 	mla	r2, r6, r2, lr
 80116a6:	fa13 f38a 	uxtah	r3, r3, sl
 80116aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80116ae:	fa1f fa82 	uxth.w	sl, r2
 80116b2:	f8dc 2000 	ldr.w	r2, [ip]
 80116b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80116ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80116be:	b29b      	uxth	r3, r3
 80116c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116c4:	4581      	cmp	r9, r0
 80116c6:	f84c 3b04 	str.w	r3, [ip], #4
 80116ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80116ce:	d2db      	bcs.n	8011688 <quorem+0x44>
 80116d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80116d4:	b92b      	cbnz	r3, 80116e2 <quorem+0x9e>
 80116d6:	9b01      	ldr	r3, [sp, #4]
 80116d8:	3b04      	subs	r3, #4
 80116da:	429d      	cmp	r5, r3
 80116dc:	461a      	mov	r2, r3
 80116de:	d32e      	bcc.n	801173e <quorem+0xfa>
 80116e0:	613c      	str	r4, [r7, #16]
 80116e2:	4638      	mov	r0, r7
 80116e4:	f001 f992 	bl	8012a0c <__mcmp>
 80116e8:	2800      	cmp	r0, #0
 80116ea:	db24      	blt.n	8011736 <quorem+0xf2>
 80116ec:	3601      	adds	r6, #1
 80116ee:	4628      	mov	r0, r5
 80116f0:	f04f 0c00 	mov.w	ip, #0
 80116f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80116f8:	f8d0 e000 	ldr.w	lr, [r0]
 80116fc:	b293      	uxth	r3, r2
 80116fe:	ebac 0303 	sub.w	r3, ip, r3
 8011702:	0c12      	lsrs	r2, r2, #16
 8011704:	fa13 f38e 	uxtah	r3, r3, lr
 8011708:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801170c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011710:	b29b      	uxth	r3, r3
 8011712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011716:	45c1      	cmp	r9, r8
 8011718:	f840 3b04 	str.w	r3, [r0], #4
 801171c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011720:	d2e8      	bcs.n	80116f4 <quorem+0xb0>
 8011722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801172a:	b922      	cbnz	r2, 8011736 <quorem+0xf2>
 801172c:	3b04      	subs	r3, #4
 801172e:	429d      	cmp	r5, r3
 8011730:	461a      	mov	r2, r3
 8011732:	d30a      	bcc.n	801174a <quorem+0x106>
 8011734:	613c      	str	r4, [r7, #16]
 8011736:	4630      	mov	r0, r6
 8011738:	b003      	add	sp, #12
 801173a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801173e:	6812      	ldr	r2, [r2, #0]
 8011740:	3b04      	subs	r3, #4
 8011742:	2a00      	cmp	r2, #0
 8011744:	d1cc      	bne.n	80116e0 <quorem+0x9c>
 8011746:	3c01      	subs	r4, #1
 8011748:	e7c7      	b.n	80116da <quorem+0x96>
 801174a:	6812      	ldr	r2, [r2, #0]
 801174c:	3b04      	subs	r3, #4
 801174e:	2a00      	cmp	r2, #0
 8011750:	d1f0      	bne.n	8011734 <quorem+0xf0>
 8011752:	3c01      	subs	r4, #1
 8011754:	e7eb      	b.n	801172e <quorem+0xea>
 8011756:	2000      	movs	r0, #0
 8011758:	e7ee      	b.n	8011738 <quorem+0xf4>
 801175a:	0000      	movs	r0, r0
 801175c:	0000      	movs	r0, r0
	...

08011760 <_dtoa_r>:
 8011760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011764:	ed2d 8b02 	vpush	{d8}
 8011768:	ec57 6b10 	vmov	r6, r7, d0
 801176c:	b095      	sub	sp, #84	; 0x54
 801176e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011770:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011774:	9105      	str	r1, [sp, #20]
 8011776:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801177a:	4604      	mov	r4, r0
 801177c:	9209      	str	r2, [sp, #36]	; 0x24
 801177e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011780:	b975      	cbnz	r5, 80117a0 <_dtoa_r+0x40>
 8011782:	2010      	movs	r0, #16
 8011784:	f000 feb0 	bl	80124e8 <malloc>
 8011788:	4602      	mov	r2, r0
 801178a:	6260      	str	r0, [r4, #36]	; 0x24
 801178c:	b920      	cbnz	r0, 8011798 <_dtoa_r+0x38>
 801178e:	4bb2      	ldr	r3, [pc, #712]	; (8011a58 <_dtoa_r+0x2f8>)
 8011790:	21ea      	movs	r1, #234	; 0xea
 8011792:	48b2      	ldr	r0, [pc, #712]	; (8011a5c <_dtoa_r+0x2fc>)
 8011794:	f001 fc08 	bl	8012fa8 <__assert_func>
 8011798:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801179c:	6005      	str	r5, [r0, #0]
 801179e:	60c5      	str	r5, [r0, #12]
 80117a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117a2:	6819      	ldr	r1, [r3, #0]
 80117a4:	b151      	cbz	r1, 80117bc <_dtoa_r+0x5c>
 80117a6:	685a      	ldr	r2, [r3, #4]
 80117a8:	604a      	str	r2, [r1, #4]
 80117aa:	2301      	movs	r3, #1
 80117ac:	4093      	lsls	r3, r2
 80117ae:	608b      	str	r3, [r1, #8]
 80117b0:	4620      	mov	r0, r4
 80117b2:	f000 feed 	bl	8012590 <_Bfree>
 80117b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117b8:	2200      	movs	r2, #0
 80117ba:	601a      	str	r2, [r3, #0]
 80117bc:	1e3b      	subs	r3, r7, #0
 80117be:	bfb9      	ittee	lt
 80117c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80117c4:	9303      	strlt	r3, [sp, #12]
 80117c6:	2300      	movge	r3, #0
 80117c8:	f8c8 3000 	strge.w	r3, [r8]
 80117cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80117d0:	4ba3      	ldr	r3, [pc, #652]	; (8011a60 <_dtoa_r+0x300>)
 80117d2:	bfbc      	itt	lt
 80117d4:	2201      	movlt	r2, #1
 80117d6:	f8c8 2000 	strlt.w	r2, [r8]
 80117da:	ea33 0309 	bics.w	r3, r3, r9
 80117de:	d11b      	bne.n	8011818 <_dtoa_r+0xb8>
 80117e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80117e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80117e6:	6013      	str	r3, [r2, #0]
 80117e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117ec:	4333      	orrs	r3, r6
 80117ee:	f000 857a 	beq.w	80122e6 <_dtoa_r+0xb86>
 80117f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117f4:	b963      	cbnz	r3, 8011810 <_dtoa_r+0xb0>
 80117f6:	4b9b      	ldr	r3, [pc, #620]	; (8011a64 <_dtoa_r+0x304>)
 80117f8:	e024      	b.n	8011844 <_dtoa_r+0xe4>
 80117fa:	4b9b      	ldr	r3, [pc, #620]	; (8011a68 <_dtoa_r+0x308>)
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	3308      	adds	r3, #8
 8011800:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011802:	6013      	str	r3, [r2, #0]
 8011804:	9800      	ldr	r0, [sp, #0]
 8011806:	b015      	add	sp, #84	; 0x54
 8011808:	ecbd 8b02 	vpop	{d8}
 801180c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011810:	4b94      	ldr	r3, [pc, #592]	; (8011a64 <_dtoa_r+0x304>)
 8011812:	9300      	str	r3, [sp, #0]
 8011814:	3303      	adds	r3, #3
 8011816:	e7f3      	b.n	8011800 <_dtoa_r+0xa0>
 8011818:	ed9d 7b02 	vldr	d7, [sp, #8]
 801181c:	2200      	movs	r2, #0
 801181e:	ec51 0b17 	vmov	r0, r1, d7
 8011822:	2300      	movs	r3, #0
 8011824:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011828:	f7ef f94e 	bl	8000ac8 <__aeabi_dcmpeq>
 801182c:	4680      	mov	r8, r0
 801182e:	b158      	cbz	r0, 8011848 <_dtoa_r+0xe8>
 8011830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011832:	2301      	movs	r3, #1
 8011834:	6013      	str	r3, [r2, #0]
 8011836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011838:	2b00      	cmp	r3, #0
 801183a:	f000 8551 	beq.w	80122e0 <_dtoa_r+0xb80>
 801183e:	488b      	ldr	r0, [pc, #556]	; (8011a6c <_dtoa_r+0x30c>)
 8011840:	6018      	str	r0, [r3, #0]
 8011842:	1e43      	subs	r3, r0, #1
 8011844:	9300      	str	r3, [sp, #0]
 8011846:	e7dd      	b.n	8011804 <_dtoa_r+0xa4>
 8011848:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801184c:	aa12      	add	r2, sp, #72	; 0x48
 801184e:	a913      	add	r1, sp, #76	; 0x4c
 8011850:	4620      	mov	r0, r4
 8011852:	f001 f97f 	bl	8012b54 <__d2b>
 8011856:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801185a:	4683      	mov	fp, r0
 801185c:	2d00      	cmp	r5, #0
 801185e:	d07c      	beq.n	801195a <_dtoa_r+0x1fa>
 8011860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011862:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801186a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801186e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801187a:	4b7d      	ldr	r3, [pc, #500]	; (8011a70 <_dtoa_r+0x310>)
 801187c:	2200      	movs	r2, #0
 801187e:	4630      	mov	r0, r6
 8011880:	4639      	mov	r1, r7
 8011882:	f7ee fd01 	bl	8000288 <__aeabi_dsub>
 8011886:	a36e      	add	r3, pc, #440	; (adr r3, 8011a40 <_dtoa_r+0x2e0>)
 8011888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188c:	f7ee feb4 	bl	80005f8 <__aeabi_dmul>
 8011890:	a36d      	add	r3, pc, #436	; (adr r3, 8011a48 <_dtoa_r+0x2e8>)
 8011892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011896:	f7ee fcf9 	bl	800028c <__adddf3>
 801189a:	4606      	mov	r6, r0
 801189c:	4628      	mov	r0, r5
 801189e:	460f      	mov	r7, r1
 80118a0:	f7ee fe40 	bl	8000524 <__aeabi_i2d>
 80118a4:	a36a      	add	r3, pc, #424	; (adr r3, 8011a50 <_dtoa_r+0x2f0>)
 80118a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118aa:	f7ee fea5 	bl	80005f8 <__aeabi_dmul>
 80118ae:	4602      	mov	r2, r0
 80118b0:	460b      	mov	r3, r1
 80118b2:	4630      	mov	r0, r6
 80118b4:	4639      	mov	r1, r7
 80118b6:	f7ee fce9 	bl	800028c <__adddf3>
 80118ba:	4606      	mov	r6, r0
 80118bc:	460f      	mov	r7, r1
 80118be:	f7ef f94b 	bl	8000b58 <__aeabi_d2iz>
 80118c2:	2200      	movs	r2, #0
 80118c4:	4682      	mov	sl, r0
 80118c6:	2300      	movs	r3, #0
 80118c8:	4630      	mov	r0, r6
 80118ca:	4639      	mov	r1, r7
 80118cc:	f7ef f906 	bl	8000adc <__aeabi_dcmplt>
 80118d0:	b148      	cbz	r0, 80118e6 <_dtoa_r+0x186>
 80118d2:	4650      	mov	r0, sl
 80118d4:	f7ee fe26 	bl	8000524 <__aeabi_i2d>
 80118d8:	4632      	mov	r2, r6
 80118da:	463b      	mov	r3, r7
 80118dc:	f7ef f8f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80118e0:	b908      	cbnz	r0, 80118e6 <_dtoa_r+0x186>
 80118e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80118e6:	f1ba 0f16 	cmp.w	sl, #22
 80118ea:	d854      	bhi.n	8011996 <_dtoa_r+0x236>
 80118ec:	4b61      	ldr	r3, [pc, #388]	; (8011a74 <_dtoa_r+0x314>)
 80118ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80118f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80118fa:	f7ef f8ef 	bl	8000adc <__aeabi_dcmplt>
 80118fe:	2800      	cmp	r0, #0
 8011900:	d04b      	beq.n	801199a <_dtoa_r+0x23a>
 8011902:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011906:	2300      	movs	r3, #0
 8011908:	930e      	str	r3, [sp, #56]	; 0x38
 801190a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801190c:	1b5d      	subs	r5, r3, r5
 801190e:	1e6b      	subs	r3, r5, #1
 8011910:	9304      	str	r3, [sp, #16]
 8011912:	bf43      	ittte	mi
 8011914:	2300      	movmi	r3, #0
 8011916:	f1c5 0801 	rsbmi	r8, r5, #1
 801191a:	9304      	strmi	r3, [sp, #16]
 801191c:	f04f 0800 	movpl.w	r8, #0
 8011920:	f1ba 0f00 	cmp.w	sl, #0
 8011924:	db3b      	blt.n	801199e <_dtoa_r+0x23e>
 8011926:	9b04      	ldr	r3, [sp, #16]
 8011928:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801192c:	4453      	add	r3, sl
 801192e:	9304      	str	r3, [sp, #16]
 8011930:	2300      	movs	r3, #0
 8011932:	9306      	str	r3, [sp, #24]
 8011934:	9b05      	ldr	r3, [sp, #20]
 8011936:	2b09      	cmp	r3, #9
 8011938:	d869      	bhi.n	8011a0e <_dtoa_r+0x2ae>
 801193a:	2b05      	cmp	r3, #5
 801193c:	bfc4      	itt	gt
 801193e:	3b04      	subgt	r3, #4
 8011940:	9305      	strgt	r3, [sp, #20]
 8011942:	9b05      	ldr	r3, [sp, #20]
 8011944:	f1a3 0302 	sub.w	r3, r3, #2
 8011948:	bfcc      	ite	gt
 801194a:	2500      	movgt	r5, #0
 801194c:	2501      	movle	r5, #1
 801194e:	2b03      	cmp	r3, #3
 8011950:	d869      	bhi.n	8011a26 <_dtoa_r+0x2c6>
 8011952:	e8df f003 	tbb	[pc, r3]
 8011956:	4e2c      	.short	0x4e2c
 8011958:	5a4c      	.short	0x5a4c
 801195a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801195e:	441d      	add	r5, r3
 8011960:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011964:	2b20      	cmp	r3, #32
 8011966:	bfc1      	itttt	gt
 8011968:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801196c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011970:	fa09 f303 	lslgt.w	r3, r9, r3
 8011974:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011978:	bfda      	itte	le
 801197a:	f1c3 0320 	rsble	r3, r3, #32
 801197e:	fa06 f003 	lslle.w	r0, r6, r3
 8011982:	4318      	orrgt	r0, r3
 8011984:	f7ee fdbe 	bl	8000504 <__aeabi_ui2d>
 8011988:	2301      	movs	r3, #1
 801198a:	4606      	mov	r6, r0
 801198c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011990:	3d01      	subs	r5, #1
 8011992:	9310      	str	r3, [sp, #64]	; 0x40
 8011994:	e771      	b.n	801187a <_dtoa_r+0x11a>
 8011996:	2301      	movs	r3, #1
 8011998:	e7b6      	b.n	8011908 <_dtoa_r+0x1a8>
 801199a:	900e      	str	r0, [sp, #56]	; 0x38
 801199c:	e7b5      	b.n	801190a <_dtoa_r+0x1aa>
 801199e:	f1ca 0300 	rsb	r3, sl, #0
 80119a2:	9306      	str	r3, [sp, #24]
 80119a4:	2300      	movs	r3, #0
 80119a6:	eba8 080a 	sub.w	r8, r8, sl
 80119aa:	930d      	str	r3, [sp, #52]	; 0x34
 80119ac:	e7c2      	b.n	8011934 <_dtoa_r+0x1d4>
 80119ae:	2300      	movs	r3, #0
 80119b0:	9308      	str	r3, [sp, #32]
 80119b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	dc39      	bgt.n	8011a2c <_dtoa_r+0x2cc>
 80119b8:	f04f 0901 	mov.w	r9, #1
 80119bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80119c0:	464b      	mov	r3, r9
 80119c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80119c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80119c8:	2200      	movs	r2, #0
 80119ca:	6042      	str	r2, [r0, #4]
 80119cc:	2204      	movs	r2, #4
 80119ce:	f102 0614 	add.w	r6, r2, #20
 80119d2:	429e      	cmp	r6, r3
 80119d4:	6841      	ldr	r1, [r0, #4]
 80119d6:	d92f      	bls.n	8011a38 <_dtoa_r+0x2d8>
 80119d8:	4620      	mov	r0, r4
 80119da:	f000 fd99 	bl	8012510 <_Balloc>
 80119de:	9000      	str	r0, [sp, #0]
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d14b      	bne.n	8011a7c <_dtoa_r+0x31c>
 80119e4:	4b24      	ldr	r3, [pc, #144]	; (8011a78 <_dtoa_r+0x318>)
 80119e6:	4602      	mov	r2, r0
 80119e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80119ec:	e6d1      	b.n	8011792 <_dtoa_r+0x32>
 80119ee:	2301      	movs	r3, #1
 80119f0:	e7de      	b.n	80119b0 <_dtoa_r+0x250>
 80119f2:	2300      	movs	r3, #0
 80119f4:	9308      	str	r3, [sp, #32]
 80119f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119f8:	eb0a 0903 	add.w	r9, sl, r3
 80119fc:	f109 0301 	add.w	r3, r9, #1
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	9301      	str	r3, [sp, #4]
 8011a04:	bfb8      	it	lt
 8011a06:	2301      	movlt	r3, #1
 8011a08:	e7dd      	b.n	80119c6 <_dtoa_r+0x266>
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	e7f2      	b.n	80119f4 <_dtoa_r+0x294>
 8011a0e:	2501      	movs	r5, #1
 8011a10:	2300      	movs	r3, #0
 8011a12:	9305      	str	r3, [sp, #20]
 8011a14:	9508      	str	r5, [sp, #32]
 8011a16:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011a20:	2312      	movs	r3, #18
 8011a22:	9209      	str	r2, [sp, #36]	; 0x24
 8011a24:	e7cf      	b.n	80119c6 <_dtoa_r+0x266>
 8011a26:	2301      	movs	r3, #1
 8011a28:	9308      	str	r3, [sp, #32]
 8011a2a:	e7f4      	b.n	8011a16 <_dtoa_r+0x2b6>
 8011a2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011a30:	f8cd 9004 	str.w	r9, [sp, #4]
 8011a34:	464b      	mov	r3, r9
 8011a36:	e7c6      	b.n	80119c6 <_dtoa_r+0x266>
 8011a38:	3101      	adds	r1, #1
 8011a3a:	6041      	str	r1, [r0, #4]
 8011a3c:	0052      	lsls	r2, r2, #1
 8011a3e:	e7c6      	b.n	80119ce <_dtoa_r+0x26e>
 8011a40:	636f4361 	.word	0x636f4361
 8011a44:	3fd287a7 	.word	0x3fd287a7
 8011a48:	8b60c8b3 	.word	0x8b60c8b3
 8011a4c:	3fc68a28 	.word	0x3fc68a28
 8011a50:	509f79fb 	.word	0x509f79fb
 8011a54:	3fd34413 	.word	0x3fd34413
 8011a58:	08015f62 	.word	0x08015f62
 8011a5c:	08015f79 	.word	0x08015f79
 8011a60:	7ff00000 	.word	0x7ff00000
 8011a64:	08015f5e 	.word	0x08015f5e
 8011a68:	08015f55 	.word	0x08015f55
 8011a6c:	08015f0d 	.word	0x08015f0d
 8011a70:	3ff80000 	.word	0x3ff80000
 8011a74:	08016078 	.word	0x08016078
 8011a78:	08015fd8 	.word	0x08015fd8
 8011a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a7e:	9a00      	ldr	r2, [sp, #0]
 8011a80:	601a      	str	r2, [r3, #0]
 8011a82:	9b01      	ldr	r3, [sp, #4]
 8011a84:	2b0e      	cmp	r3, #14
 8011a86:	f200 80ad 	bhi.w	8011be4 <_dtoa_r+0x484>
 8011a8a:	2d00      	cmp	r5, #0
 8011a8c:	f000 80aa 	beq.w	8011be4 <_dtoa_r+0x484>
 8011a90:	f1ba 0f00 	cmp.w	sl, #0
 8011a94:	dd36      	ble.n	8011b04 <_dtoa_r+0x3a4>
 8011a96:	4ac3      	ldr	r2, [pc, #780]	; (8011da4 <_dtoa_r+0x644>)
 8011a98:	f00a 030f 	and.w	r3, sl, #15
 8011a9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011aa0:	ed93 7b00 	vldr	d7, [r3]
 8011aa4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011aa8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011aac:	eeb0 8a47 	vmov.f32	s16, s14
 8011ab0:	eef0 8a67 	vmov.f32	s17, s15
 8011ab4:	d016      	beq.n	8011ae4 <_dtoa_r+0x384>
 8011ab6:	4bbc      	ldr	r3, [pc, #752]	; (8011da8 <_dtoa_r+0x648>)
 8011ab8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011abc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011ac0:	f7ee fec4 	bl	800084c <__aeabi_ddiv>
 8011ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ac8:	f007 070f 	and.w	r7, r7, #15
 8011acc:	2503      	movs	r5, #3
 8011ace:	4eb6      	ldr	r6, [pc, #728]	; (8011da8 <_dtoa_r+0x648>)
 8011ad0:	b957      	cbnz	r7, 8011ae8 <_dtoa_r+0x388>
 8011ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ad6:	ec53 2b18 	vmov	r2, r3, d8
 8011ada:	f7ee feb7 	bl	800084c <__aeabi_ddiv>
 8011ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ae2:	e029      	b.n	8011b38 <_dtoa_r+0x3d8>
 8011ae4:	2502      	movs	r5, #2
 8011ae6:	e7f2      	b.n	8011ace <_dtoa_r+0x36e>
 8011ae8:	07f9      	lsls	r1, r7, #31
 8011aea:	d508      	bpl.n	8011afe <_dtoa_r+0x39e>
 8011aec:	ec51 0b18 	vmov	r0, r1, d8
 8011af0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011af4:	f7ee fd80 	bl	80005f8 <__aeabi_dmul>
 8011af8:	ec41 0b18 	vmov	d8, r0, r1
 8011afc:	3501      	adds	r5, #1
 8011afe:	107f      	asrs	r7, r7, #1
 8011b00:	3608      	adds	r6, #8
 8011b02:	e7e5      	b.n	8011ad0 <_dtoa_r+0x370>
 8011b04:	f000 80a6 	beq.w	8011c54 <_dtoa_r+0x4f4>
 8011b08:	f1ca 0600 	rsb	r6, sl, #0
 8011b0c:	4ba5      	ldr	r3, [pc, #660]	; (8011da4 <_dtoa_r+0x644>)
 8011b0e:	4fa6      	ldr	r7, [pc, #664]	; (8011da8 <_dtoa_r+0x648>)
 8011b10:	f006 020f 	and.w	r2, r6, #15
 8011b14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b20:	f7ee fd6a 	bl	80005f8 <__aeabi_dmul>
 8011b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b28:	1136      	asrs	r6, r6, #4
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	2502      	movs	r5, #2
 8011b2e:	2e00      	cmp	r6, #0
 8011b30:	f040 8085 	bne.w	8011c3e <_dtoa_r+0x4de>
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d1d2      	bne.n	8011ade <_dtoa_r+0x37e>
 8011b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	f000 808c 	beq.w	8011c58 <_dtoa_r+0x4f8>
 8011b40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011b44:	4b99      	ldr	r3, [pc, #612]	; (8011dac <_dtoa_r+0x64c>)
 8011b46:	2200      	movs	r2, #0
 8011b48:	4630      	mov	r0, r6
 8011b4a:	4639      	mov	r1, r7
 8011b4c:	f7ee ffc6 	bl	8000adc <__aeabi_dcmplt>
 8011b50:	2800      	cmp	r0, #0
 8011b52:	f000 8081 	beq.w	8011c58 <_dtoa_r+0x4f8>
 8011b56:	9b01      	ldr	r3, [sp, #4]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d07d      	beq.n	8011c58 <_dtoa_r+0x4f8>
 8011b5c:	f1b9 0f00 	cmp.w	r9, #0
 8011b60:	dd3c      	ble.n	8011bdc <_dtoa_r+0x47c>
 8011b62:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011b66:	9307      	str	r3, [sp, #28]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	4b91      	ldr	r3, [pc, #580]	; (8011db0 <_dtoa_r+0x650>)
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	4639      	mov	r1, r7
 8011b70:	f7ee fd42 	bl	80005f8 <__aeabi_dmul>
 8011b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b78:	3501      	adds	r5, #1
 8011b7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011b7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011b82:	4628      	mov	r0, r5
 8011b84:	f7ee fcce 	bl	8000524 <__aeabi_i2d>
 8011b88:	4632      	mov	r2, r6
 8011b8a:	463b      	mov	r3, r7
 8011b8c:	f7ee fd34 	bl	80005f8 <__aeabi_dmul>
 8011b90:	4b88      	ldr	r3, [pc, #544]	; (8011db4 <_dtoa_r+0x654>)
 8011b92:	2200      	movs	r2, #0
 8011b94:	f7ee fb7a 	bl	800028c <__adddf3>
 8011b98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ba0:	9303      	str	r3, [sp, #12]
 8011ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d15c      	bne.n	8011c62 <_dtoa_r+0x502>
 8011ba8:	4b83      	ldr	r3, [pc, #524]	; (8011db8 <_dtoa_r+0x658>)
 8011baa:	2200      	movs	r2, #0
 8011bac:	4630      	mov	r0, r6
 8011bae:	4639      	mov	r1, r7
 8011bb0:	f7ee fb6a 	bl	8000288 <__aeabi_dsub>
 8011bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011bb8:	4606      	mov	r6, r0
 8011bba:	460f      	mov	r7, r1
 8011bbc:	f7ee ffac 	bl	8000b18 <__aeabi_dcmpgt>
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	f040 8296 	bne.w	80120f2 <_dtoa_r+0x992>
 8011bc6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011bca:	4630      	mov	r0, r6
 8011bcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bd0:	4639      	mov	r1, r7
 8011bd2:	f7ee ff83 	bl	8000adc <__aeabi_dcmplt>
 8011bd6:	2800      	cmp	r0, #0
 8011bd8:	f040 8288 	bne.w	80120ec <_dtoa_r+0x98c>
 8011bdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011be0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011be4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	f2c0 8158 	blt.w	8011e9c <_dtoa_r+0x73c>
 8011bec:	f1ba 0f0e 	cmp.w	sl, #14
 8011bf0:	f300 8154 	bgt.w	8011e9c <_dtoa_r+0x73c>
 8011bf4:	4b6b      	ldr	r3, [pc, #428]	; (8011da4 <_dtoa_r+0x644>)
 8011bf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011bfa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	f280 80e3 	bge.w	8011dcc <_dtoa_r+0x66c>
 8011c06:	9b01      	ldr	r3, [sp, #4]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f300 80df 	bgt.w	8011dcc <_dtoa_r+0x66c>
 8011c0e:	f040 826d 	bne.w	80120ec <_dtoa_r+0x98c>
 8011c12:	4b69      	ldr	r3, [pc, #420]	; (8011db8 <_dtoa_r+0x658>)
 8011c14:	2200      	movs	r2, #0
 8011c16:	4640      	mov	r0, r8
 8011c18:	4649      	mov	r1, r9
 8011c1a:	f7ee fced 	bl	80005f8 <__aeabi_dmul>
 8011c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c22:	f7ee ff6f 	bl	8000b04 <__aeabi_dcmpge>
 8011c26:	9e01      	ldr	r6, [sp, #4]
 8011c28:	4637      	mov	r7, r6
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	f040 8243 	bne.w	80120b6 <_dtoa_r+0x956>
 8011c30:	9d00      	ldr	r5, [sp, #0]
 8011c32:	2331      	movs	r3, #49	; 0x31
 8011c34:	f805 3b01 	strb.w	r3, [r5], #1
 8011c38:	f10a 0a01 	add.w	sl, sl, #1
 8011c3c:	e23f      	b.n	80120be <_dtoa_r+0x95e>
 8011c3e:	07f2      	lsls	r2, r6, #31
 8011c40:	d505      	bpl.n	8011c4e <_dtoa_r+0x4ee>
 8011c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c46:	f7ee fcd7 	bl	80005f8 <__aeabi_dmul>
 8011c4a:	3501      	adds	r5, #1
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	1076      	asrs	r6, r6, #1
 8011c50:	3708      	adds	r7, #8
 8011c52:	e76c      	b.n	8011b2e <_dtoa_r+0x3ce>
 8011c54:	2502      	movs	r5, #2
 8011c56:	e76f      	b.n	8011b38 <_dtoa_r+0x3d8>
 8011c58:	9b01      	ldr	r3, [sp, #4]
 8011c5a:	f8cd a01c 	str.w	sl, [sp, #28]
 8011c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8011c60:	e78d      	b.n	8011b7e <_dtoa_r+0x41e>
 8011c62:	9900      	ldr	r1, [sp, #0]
 8011c64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c68:	4b4e      	ldr	r3, [pc, #312]	; (8011da4 <_dtoa_r+0x644>)
 8011c6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c6e:	4401      	add	r1, r0
 8011c70:	9102      	str	r1, [sp, #8]
 8011c72:	9908      	ldr	r1, [sp, #32]
 8011c74:	eeb0 8a47 	vmov.f32	s16, s14
 8011c78:	eef0 8a67 	vmov.f32	s17, s15
 8011c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011c84:	2900      	cmp	r1, #0
 8011c86:	d045      	beq.n	8011d14 <_dtoa_r+0x5b4>
 8011c88:	494c      	ldr	r1, [pc, #304]	; (8011dbc <_dtoa_r+0x65c>)
 8011c8a:	2000      	movs	r0, #0
 8011c8c:	f7ee fdde 	bl	800084c <__aeabi_ddiv>
 8011c90:	ec53 2b18 	vmov	r2, r3, d8
 8011c94:	f7ee faf8 	bl	8000288 <__aeabi_dsub>
 8011c98:	9d00      	ldr	r5, [sp, #0]
 8011c9a:	ec41 0b18 	vmov	d8, r0, r1
 8011c9e:	4639      	mov	r1, r7
 8011ca0:	4630      	mov	r0, r6
 8011ca2:	f7ee ff59 	bl	8000b58 <__aeabi_d2iz>
 8011ca6:	900c      	str	r0, [sp, #48]	; 0x30
 8011ca8:	f7ee fc3c 	bl	8000524 <__aeabi_i2d>
 8011cac:	4602      	mov	r2, r0
 8011cae:	460b      	mov	r3, r1
 8011cb0:	4630      	mov	r0, r6
 8011cb2:	4639      	mov	r1, r7
 8011cb4:	f7ee fae8 	bl	8000288 <__aeabi_dsub>
 8011cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cba:	3330      	adds	r3, #48	; 0x30
 8011cbc:	f805 3b01 	strb.w	r3, [r5], #1
 8011cc0:	ec53 2b18 	vmov	r2, r3, d8
 8011cc4:	4606      	mov	r6, r0
 8011cc6:	460f      	mov	r7, r1
 8011cc8:	f7ee ff08 	bl	8000adc <__aeabi_dcmplt>
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d165      	bne.n	8011d9c <_dtoa_r+0x63c>
 8011cd0:	4632      	mov	r2, r6
 8011cd2:	463b      	mov	r3, r7
 8011cd4:	4935      	ldr	r1, [pc, #212]	; (8011dac <_dtoa_r+0x64c>)
 8011cd6:	2000      	movs	r0, #0
 8011cd8:	f7ee fad6 	bl	8000288 <__aeabi_dsub>
 8011cdc:	ec53 2b18 	vmov	r2, r3, d8
 8011ce0:	f7ee fefc 	bl	8000adc <__aeabi_dcmplt>
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	f040 80b9 	bne.w	8011e5c <_dtoa_r+0x6fc>
 8011cea:	9b02      	ldr	r3, [sp, #8]
 8011cec:	429d      	cmp	r5, r3
 8011cee:	f43f af75 	beq.w	8011bdc <_dtoa_r+0x47c>
 8011cf2:	4b2f      	ldr	r3, [pc, #188]	; (8011db0 <_dtoa_r+0x650>)
 8011cf4:	ec51 0b18 	vmov	r0, r1, d8
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	f7ee fc7d 	bl	80005f8 <__aeabi_dmul>
 8011cfe:	4b2c      	ldr	r3, [pc, #176]	; (8011db0 <_dtoa_r+0x650>)
 8011d00:	ec41 0b18 	vmov	d8, r0, r1
 8011d04:	2200      	movs	r2, #0
 8011d06:	4630      	mov	r0, r6
 8011d08:	4639      	mov	r1, r7
 8011d0a:	f7ee fc75 	bl	80005f8 <__aeabi_dmul>
 8011d0e:	4606      	mov	r6, r0
 8011d10:	460f      	mov	r7, r1
 8011d12:	e7c4      	b.n	8011c9e <_dtoa_r+0x53e>
 8011d14:	ec51 0b17 	vmov	r0, r1, d7
 8011d18:	f7ee fc6e 	bl	80005f8 <__aeabi_dmul>
 8011d1c:	9b02      	ldr	r3, [sp, #8]
 8011d1e:	9d00      	ldr	r5, [sp, #0]
 8011d20:	930c      	str	r3, [sp, #48]	; 0x30
 8011d22:	ec41 0b18 	vmov	d8, r0, r1
 8011d26:	4639      	mov	r1, r7
 8011d28:	4630      	mov	r0, r6
 8011d2a:	f7ee ff15 	bl	8000b58 <__aeabi_d2iz>
 8011d2e:	9011      	str	r0, [sp, #68]	; 0x44
 8011d30:	f7ee fbf8 	bl	8000524 <__aeabi_i2d>
 8011d34:	4602      	mov	r2, r0
 8011d36:	460b      	mov	r3, r1
 8011d38:	4630      	mov	r0, r6
 8011d3a:	4639      	mov	r1, r7
 8011d3c:	f7ee faa4 	bl	8000288 <__aeabi_dsub>
 8011d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d42:	3330      	adds	r3, #48	; 0x30
 8011d44:	f805 3b01 	strb.w	r3, [r5], #1
 8011d48:	9b02      	ldr	r3, [sp, #8]
 8011d4a:	429d      	cmp	r5, r3
 8011d4c:	4606      	mov	r6, r0
 8011d4e:	460f      	mov	r7, r1
 8011d50:	f04f 0200 	mov.w	r2, #0
 8011d54:	d134      	bne.n	8011dc0 <_dtoa_r+0x660>
 8011d56:	4b19      	ldr	r3, [pc, #100]	; (8011dbc <_dtoa_r+0x65c>)
 8011d58:	ec51 0b18 	vmov	r0, r1, d8
 8011d5c:	f7ee fa96 	bl	800028c <__adddf3>
 8011d60:	4602      	mov	r2, r0
 8011d62:	460b      	mov	r3, r1
 8011d64:	4630      	mov	r0, r6
 8011d66:	4639      	mov	r1, r7
 8011d68:	f7ee fed6 	bl	8000b18 <__aeabi_dcmpgt>
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	d175      	bne.n	8011e5c <_dtoa_r+0x6fc>
 8011d70:	ec53 2b18 	vmov	r2, r3, d8
 8011d74:	4911      	ldr	r1, [pc, #68]	; (8011dbc <_dtoa_r+0x65c>)
 8011d76:	2000      	movs	r0, #0
 8011d78:	f7ee fa86 	bl	8000288 <__aeabi_dsub>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	460b      	mov	r3, r1
 8011d80:	4630      	mov	r0, r6
 8011d82:	4639      	mov	r1, r7
 8011d84:	f7ee feaa 	bl	8000adc <__aeabi_dcmplt>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	f43f af27 	beq.w	8011bdc <_dtoa_r+0x47c>
 8011d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011d90:	1e6b      	subs	r3, r5, #1
 8011d92:	930c      	str	r3, [sp, #48]	; 0x30
 8011d94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011d98:	2b30      	cmp	r3, #48	; 0x30
 8011d9a:	d0f8      	beq.n	8011d8e <_dtoa_r+0x62e>
 8011d9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011da0:	e04a      	b.n	8011e38 <_dtoa_r+0x6d8>
 8011da2:	bf00      	nop
 8011da4:	08016078 	.word	0x08016078
 8011da8:	08016050 	.word	0x08016050
 8011dac:	3ff00000 	.word	0x3ff00000
 8011db0:	40240000 	.word	0x40240000
 8011db4:	401c0000 	.word	0x401c0000
 8011db8:	40140000 	.word	0x40140000
 8011dbc:	3fe00000 	.word	0x3fe00000
 8011dc0:	4baf      	ldr	r3, [pc, #700]	; (8012080 <_dtoa_r+0x920>)
 8011dc2:	f7ee fc19 	bl	80005f8 <__aeabi_dmul>
 8011dc6:	4606      	mov	r6, r0
 8011dc8:	460f      	mov	r7, r1
 8011dca:	e7ac      	b.n	8011d26 <_dtoa_r+0x5c6>
 8011dcc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011dd0:	9d00      	ldr	r5, [sp, #0]
 8011dd2:	4642      	mov	r2, r8
 8011dd4:	464b      	mov	r3, r9
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	4639      	mov	r1, r7
 8011dda:	f7ee fd37 	bl	800084c <__aeabi_ddiv>
 8011dde:	f7ee febb 	bl	8000b58 <__aeabi_d2iz>
 8011de2:	9002      	str	r0, [sp, #8]
 8011de4:	f7ee fb9e 	bl	8000524 <__aeabi_i2d>
 8011de8:	4642      	mov	r2, r8
 8011dea:	464b      	mov	r3, r9
 8011dec:	f7ee fc04 	bl	80005f8 <__aeabi_dmul>
 8011df0:	4602      	mov	r2, r0
 8011df2:	460b      	mov	r3, r1
 8011df4:	4630      	mov	r0, r6
 8011df6:	4639      	mov	r1, r7
 8011df8:	f7ee fa46 	bl	8000288 <__aeabi_dsub>
 8011dfc:	9e02      	ldr	r6, [sp, #8]
 8011dfe:	9f01      	ldr	r7, [sp, #4]
 8011e00:	3630      	adds	r6, #48	; 0x30
 8011e02:	f805 6b01 	strb.w	r6, [r5], #1
 8011e06:	9e00      	ldr	r6, [sp, #0]
 8011e08:	1bae      	subs	r6, r5, r6
 8011e0a:	42b7      	cmp	r7, r6
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	d137      	bne.n	8011e82 <_dtoa_r+0x722>
 8011e12:	f7ee fa3b 	bl	800028c <__adddf3>
 8011e16:	4642      	mov	r2, r8
 8011e18:	464b      	mov	r3, r9
 8011e1a:	4606      	mov	r6, r0
 8011e1c:	460f      	mov	r7, r1
 8011e1e:	f7ee fe7b 	bl	8000b18 <__aeabi_dcmpgt>
 8011e22:	b9c8      	cbnz	r0, 8011e58 <_dtoa_r+0x6f8>
 8011e24:	4642      	mov	r2, r8
 8011e26:	464b      	mov	r3, r9
 8011e28:	4630      	mov	r0, r6
 8011e2a:	4639      	mov	r1, r7
 8011e2c:	f7ee fe4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e30:	b110      	cbz	r0, 8011e38 <_dtoa_r+0x6d8>
 8011e32:	9b02      	ldr	r3, [sp, #8]
 8011e34:	07d9      	lsls	r1, r3, #31
 8011e36:	d40f      	bmi.n	8011e58 <_dtoa_r+0x6f8>
 8011e38:	4620      	mov	r0, r4
 8011e3a:	4659      	mov	r1, fp
 8011e3c:	f000 fba8 	bl	8012590 <_Bfree>
 8011e40:	2300      	movs	r3, #0
 8011e42:	702b      	strb	r3, [r5, #0]
 8011e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e46:	f10a 0001 	add.w	r0, sl, #1
 8011e4a:	6018      	str	r0, [r3, #0]
 8011e4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	f43f acd8 	beq.w	8011804 <_dtoa_r+0xa4>
 8011e54:	601d      	str	r5, [r3, #0]
 8011e56:	e4d5      	b.n	8011804 <_dtoa_r+0xa4>
 8011e58:	f8cd a01c 	str.w	sl, [sp, #28]
 8011e5c:	462b      	mov	r3, r5
 8011e5e:	461d      	mov	r5, r3
 8011e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e64:	2a39      	cmp	r2, #57	; 0x39
 8011e66:	d108      	bne.n	8011e7a <_dtoa_r+0x71a>
 8011e68:	9a00      	ldr	r2, [sp, #0]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d1f7      	bne.n	8011e5e <_dtoa_r+0x6fe>
 8011e6e:	9a07      	ldr	r2, [sp, #28]
 8011e70:	9900      	ldr	r1, [sp, #0]
 8011e72:	3201      	adds	r2, #1
 8011e74:	9207      	str	r2, [sp, #28]
 8011e76:	2230      	movs	r2, #48	; 0x30
 8011e78:	700a      	strb	r2, [r1, #0]
 8011e7a:	781a      	ldrb	r2, [r3, #0]
 8011e7c:	3201      	adds	r2, #1
 8011e7e:	701a      	strb	r2, [r3, #0]
 8011e80:	e78c      	b.n	8011d9c <_dtoa_r+0x63c>
 8011e82:	4b7f      	ldr	r3, [pc, #508]	; (8012080 <_dtoa_r+0x920>)
 8011e84:	2200      	movs	r2, #0
 8011e86:	f7ee fbb7 	bl	80005f8 <__aeabi_dmul>
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	4606      	mov	r6, r0
 8011e90:	460f      	mov	r7, r1
 8011e92:	f7ee fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d09b      	beq.n	8011dd2 <_dtoa_r+0x672>
 8011e9a:	e7cd      	b.n	8011e38 <_dtoa_r+0x6d8>
 8011e9c:	9a08      	ldr	r2, [sp, #32]
 8011e9e:	2a00      	cmp	r2, #0
 8011ea0:	f000 80c4 	beq.w	801202c <_dtoa_r+0x8cc>
 8011ea4:	9a05      	ldr	r2, [sp, #20]
 8011ea6:	2a01      	cmp	r2, #1
 8011ea8:	f300 80a8 	bgt.w	8011ffc <_dtoa_r+0x89c>
 8011eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011eae:	2a00      	cmp	r2, #0
 8011eb0:	f000 80a0 	beq.w	8011ff4 <_dtoa_r+0x894>
 8011eb4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011eb8:	9e06      	ldr	r6, [sp, #24]
 8011eba:	4645      	mov	r5, r8
 8011ebc:	9a04      	ldr	r2, [sp, #16]
 8011ebe:	2101      	movs	r1, #1
 8011ec0:	441a      	add	r2, r3
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	4498      	add	r8, r3
 8011ec6:	9204      	str	r2, [sp, #16]
 8011ec8:	f000 fc1e 	bl	8012708 <__i2b>
 8011ecc:	4607      	mov	r7, r0
 8011ece:	2d00      	cmp	r5, #0
 8011ed0:	dd0b      	ble.n	8011eea <_dtoa_r+0x78a>
 8011ed2:	9b04      	ldr	r3, [sp, #16]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	dd08      	ble.n	8011eea <_dtoa_r+0x78a>
 8011ed8:	42ab      	cmp	r3, r5
 8011eda:	9a04      	ldr	r2, [sp, #16]
 8011edc:	bfa8      	it	ge
 8011ede:	462b      	movge	r3, r5
 8011ee0:	eba8 0803 	sub.w	r8, r8, r3
 8011ee4:	1aed      	subs	r5, r5, r3
 8011ee6:	1ad3      	subs	r3, r2, r3
 8011ee8:	9304      	str	r3, [sp, #16]
 8011eea:	9b06      	ldr	r3, [sp, #24]
 8011eec:	b1fb      	cbz	r3, 8011f2e <_dtoa_r+0x7ce>
 8011eee:	9b08      	ldr	r3, [sp, #32]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	f000 809f 	beq.w	8012034 <_dtoa_r+0x8d4>
 8011ef6:	2e00      	cmp	r6, #0
 8011ef8:	dd11      	ble.n	8011f1e <_dtoa_r+0x7be>
 8011efa:	4639      	mov	r1, r7
 8011efc:	4632      	mov	r2, r6
 8011efe:	4620      	mov	r0, r4
 8011f00:	f000 fcbe 	bl	8012880 <__pow5mult>
 8011f04:	465a      	mov	r2, fp
 8011f06:	4601      	mov	r1, r0
 8011f08:	4607      	mov	r7, r0
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	f000 fc12 	bl	8012734 <__multiply>
 8011f10:	4659      	mov	r1, fp
 8011f12:	9007      	str	r0, [sp, #28]
 8011f14:	4620      	mov	r0, r4
 8011f16:	f000 fb3b 	bl	8012590 <_Bfree>
 8011f1a:	9b07      	ldr	r3, [sp, #28]
 8011f1c:	469b      	mov	fp, r3
 8011f1e:	9b06      	ldr	r3, [sp, #24]
 8011f20:	1b9a      	subs	r2, r3, r6
 8011f22:	d004      	beq.n	8011f2e <_dtoa_r+0x7ce>
 8011f24:	4659      	mov	r1, fp
 8011f26:	4620      	mov	r0, r4
 8011f28:	f000 fcaa 	bl	8012880 <__pow5mult>
 8011f2c:	4683      	mov	fp, r0
 8011f2e:	2101      	movs	r1, #1
 8011f30:	4620      	mov	r0, r4
 8011f32:	f000 fbe9 	bl	8012708 <__i2b>
 8011f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	4606      	mov	r6, r0
 8011f3c:	dd7c      	ble.n	8012038 <_dtoa_r+0x8d8>
 8011f3e:	461a      	mov	r2, r3
 8011f40:	4601      	mov	r1, r0
 8011f42:	4620      	mov	r0, r4
 8011f44:	f000 fc9c 	bl	8012880 <__pow5mult>
 8011f48:	9b05      	ldr	r3, [sp, #20]
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	4606      	mov	r6, r0
 8011f4e:	dd76      	ble.n	801203e <_dtoa_r+0x8de>
 8011f50:	2300      	movs	r3, #0
 8011f52:	9306      	str	r3, [sp, #24]
 8011f54:	6933      	ldr	r3, [r6, #16]
 8011f56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011f5a:	6918      	ldr	r0, [r3, #16]
 8011f5c:	f000 fb84 	bl	8012668 <__hi0bits>
 8011f60:	f1c0 0020 	rsb	r0, r0, #32
 8011f64:	9b04      	ldr	r3, [sp, #16]
 8011f66:	4418      	add	r0, r3
 8011f68:	f010 001f 	ands.w	r0, r0, #31
 8011f6c:	f000 8086 	beq.w	801207c <_dtoa_r+0x91c>
 8011f70:	f1c0 0320 	rsb	r3, r0, #32
 8011f74:	2b04      	cmp	r3, #4
 8011f76:	dd7f      	ble.n	8012078 <_dtoa_r+0x918>
 8011f78:	f1c0 001c 	rsb	r0, r0, #28
 8011f7c:	9b04      	ldr	r3, [sp, #16]
 8011f7e:	4403      	add	r3, r0
 8011f80:	4480      	add	r8, r0
 8011f82:	4405      	add	r5, r0
 8011f84:	9304      	str	r3, [sp, #16]
 8011f86:	f1b8 0f00 	cmp.w	r8, #0
 8011f8a:	dd05      	ble.n	8011f98 <_dtoa_r+0x838>
 8011f8c:	4659      	mov	r1, fp
 8011f8e:	4642      	mov	r2, r8
 8011f90:	4620      	mov	r0, r4
 8011f92:	f000 fccf 	bl	8012934 <__lshift>
 8011f96:	4683      	mov	fp, r0
 8011f98:	9b04      	ldr	r3, [sp, #16]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	dd05      	ble.n	8011faa <_dtoa_r+0x84a>
 8011f9e:	4631      	mov	r1, r6
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	f000 fcc6 	bl	8012934 <__lshift>
 8011fa8:	4606      	mov	r6, r0
 8011faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d069      	beq.n	8012084 <_dtoa_r+0x924>
 8011fb0:	4631      	mov	r1, r6
 8011fb2:	4658      	mov	r0, fp
 8011fb4:	f000 fd2a 	bl	8012a0c <__mcmp>
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	da63      	bge.n	8012084 <_dtoa_r+0x924>
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	4659      	mov	r1, fp
 8011fc0:	220a      	movs	r2, #10
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	f000 fb06 	bl	80125d4 <__multadd>
 8011fc8:	9b08      	ldr	r3, [sp, #32]
 8011fca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011fce:	4683      	mov	fp, r0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	f000 818f 	beq.w	80122f4 <_dtoa_r+0xb94>
 8011fd6:	4639      	mov	r1, r7
 8011fd8:	2300      	movs	r3, #0
 8011fda:	220a      	movs	r2, #10
 8011fdc:	4620      	mov	r0, r4
 8011fde:	f000 faf9 	bl	80125d4 <__multadd>
 8011fe2:	f1b9 0f00 	cmp.w	r9, #0
 8011fe6:	4607      	mov	r7, r0
 8011fe8:	f300 808e 	bgt.w	8012108 <_dtoa_r+0x9a8>
 8011fec:	9b05      	ldr	r3, [sp, #20]
 8011fee:	2b02      	cmp	r3, #2
 8011ff0:	dc50      	bgt.n	8012094 <_dtoa_r+0x934>
 8011ff2:	e089      	b.n	8012108 <_dtoa_r+0x9a8>
 8011ff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011ffa:	e75d      	b.n	8011eb8 <_dtoa_r+0x758>
 8011ffc:	9b01      	ldr	r3, [sp, #4]
 8011ffe:	1e5e      	subs	r6, r3, #1
 8012000:	9b06      	ldr	r3, [sp, #24]
 8012002:	42b3      	cmp	r3, r6
 8012004:	bfbf      	itttt	lt
 8012006:	9b06      	ldrlt	r3, [sp, #24]
 8012008:	9606      	strlt	r6, [sp, #24]
 801200a:	1af2      	sublt	r2, r6, r3
 801200c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801200e:	bfb6      	itet	lt
 8012010:	189b      	addlt	r3, r3, r2
 8012012:	1b9e      	subge	r6, r3, r6
 8012014:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012016:	9b01      	ldr	r3, [sp, #4]
 8012018:	bfb8      	it	lt
 801201a:	2600      	movlt	r6, #0
 801201c:	2b00      	cmp	r3, #0
 801201e:	bfb5      	itete	lt
 8012020:	eba8 0503 	sublt.w	r5, r8, r3
 8012024:	9b01      	ldrge	r3, [sp, #4]
 8012026:	2300      	movlt	r3, #0
 8012028:	4645      	movge	r5, r8
 801202a:	e747      	b.n	8011ebc <_dtoa_r+0x75c>
 801202c:	9e06      	ldr	r6, [sp, #24]
 801202e:	9f08      	ldr	r7, [sp, #32]
 8012030:	4645      	mov	r5, r8
 8012032:	e74c      	b.n	8011ece <_dtoa_r+0x76e>
 8012034:	9a06      	ldr	r2, [sp, #24]
 8012036:	e775      	b.n	8011f24 <_dtoa_r+0x7c4>
 8012038:	9b05      	ldr	r3, [sp, #20]
 801203a:	2b01      	cmp	r3, #1
 801203c:	dc18      	bgt.n	8012070 <_dtoa_r+0x910>
 801203e:	9b02      	ldr	r3, [sp, #8]
 8012040:	b9b3      	cbnz	r3, 8012070 <_dtoa_r+0x910>
 8012042:	9b03      	ldr	r3, [sp, #12]
 8012044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012048:	b9a3      	cbnz	r3, 8012074 <_dtoa_r+0x914>
 801204a:	9b03      	ldr	r3, [sp, #12]
 801204c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012050:	0d1b      	lsrs	r3, r3, #20
 8012052:	051b      	lsls	r3, r3, #20
 8012054:	b12b      	cbz	r3, 8012062 <_dtoa_r+0x902>
 8012056:	9b04      	ldr	r3, [sp, #16]
 8012058:	3301      	adds	r3, #1
 801205a:	9304      	str	r3, [sp, #16]
 801205c:	f108 0801 	add.w	r8, r8, #1
 8012060:	2301      	movs	r3, #1
 8012062:	9306      	str	r3, [sp, #24]
 8012064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012066:	2b00      	cmp	r3, #0
 8012068:	f47f af74 	bne.w	8011f54 <_dtoa_r+0x7f4>
 801206c:	2001      	movs	r0, #1
 801206e:	e779      	b.n	8011f64 <_dtoa_r+0x804>
 8012070:	2300      	movs	r3, #0
 8012072:	e7f6      	b.n	8012062 <_dtoa_r+0x902>
 8012074:	9b02      	ldr	r3, [sp, #8]
 8012076:	e7f4      	b.n	8012062 <_dtoa_r+0x902>
 8012078:	d085      	beq.n	8011f86 <_dtoa_r+0x826>
 801207a:	4618      	mov	r0, r3
 801207c:	301c      	adds	r0, #28
 801207e:	e77d      	b.n	8011f7c <_dtoa_r+0x81c>
 8012080:	40240000 	.word	0x40240000
 8012084:	9b01      	ldr	r3, [sp, #4]
 8012086:	2b00      	cmp	r3, #0
 8012088:	dc38      	bgt.n	80120fc <_dtoa_r+0x99c>
 801208a:	9b05      	ldr	r3, [sp, #20]
 801208c:	2b02      	cmp	r3, #2
 801208e:	dd35      	ble.n	80120fc <_dtoa_r+0x99c>
 8012090:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012094:	f1b9 0f00 	cmp.w	r9, #0
 8012098:	d10d      	bne.n	80120b6 <_dtoa_r+0x956>
 801209a:	4631      	mov	r1, r6
 801209c:	464b      	mov	r3, r9
 801209e:	2205      	movs	r2, #5
 80120a0:	4620      	mov	r0, r4
 80120a2:	f000 fa97 	bl	80125d4 <__multadd>
 80120a6:	4601      	mov	r1, r0
 80120a8:	4606      	mov	r6, r0
 80120aa:	4658      	mov	r0, fp
 80120ac:	f000 fcae 	bl	8012a0c <__mcmp>
 80120b0:	2800      	cmp	r0, #0
 80120b2:	f73f adbd 	bgt.w	8011c30 <_dtoa_r+0x4d0>
 80120b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120b8:	9d00      	ldr	r5, [sp, #0]
 80120ba:	ea6f 0a03 	mvn.w	sl, r3
 80120be:	f04f 0800 	mov.w	r8, #0
 80120c2:	4631      	mov	r1, r6
 80120c4:	4620      	mov	r0, r4
 80120c6:	f000 fa63 	bl	8012590 <_Bfree>
 80120ca:	2f00      	cmp	r7, #0
 80120cc:	f43f aeb4 	beq.w	8011e38 <_dtoa_r+0x6d8>
 80120d0:	f1b8 0f00 	cmp.w	r8, #0
 80120d4:	d005      	beq.n	80120e2 <_dtoa_r+0x982>
 80120d6:	45b8      	cmp	r8, r7
 80120d8:	d003      	beq.n	80120e2 <_dtoa_r+0x982>
 80120da:	4641      	mov	r1, r8
 80120dc:	4620      	mov	r0, r4
 80120de:	f000 fa57 	bl	8012590 <_Bfree>
 80120e2:	4639      	mov	r1, r7
 80120e4:	4620      	mov	r0, r4
 80120e6:	f000 fa53 	bl	8012590 <_Bfree>
 80120ea:	e6a5      	b.n	8011e38 <_dtoa_r+0x6d8>
 80120ec:	2600      	movs	r6, #0
 80120ee:	4637      	mov	r7, r6
 80120f0:	e7e1      	b.n	80120b6 <_dtoa_r+0x956>
 80120f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80120f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80120f8:	4637      	mov	r7, r6
 80120fa:	e599      	b.n	8011c30 <_dtoa_r+0x4d0>
 80120fc:	9b08      	ldr	r3, [sp, #32]
 80120fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012102:	2b00      	cmp	r3, #0
 8012104:	f000 80fd 	beq.w	8012302 <_dtoa_r+0xba2>
 8012108:	2d00      	cmp	r5, #0
 801210a:	dd05      	ble.n	8012118 <_dtoa_r+0x9b8>
 801210c:	4639      	mov	r1, r7
 801210e:	462a      	mov	r2, r5
 8012110:	4620      	mov	r0, r4
 8012112:	f000 fc0f 	bl	8012934 <__lshift>
 8012116:	4607      	mov	r7, r0
 8012118:	9b06      	ldr	r3, [sp, #24]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d05c      	beq.n	80121d8 <_dtoa_r+0xa78>
 801211e:	6879      	ldr	r1, [r7, #4]
 8012120:	4620      	mov	r0, r4
 8012122:	f000 f9f5 	bl	8012510 <_Balloc>
 8012126:	4605      	mov	r5, r0
 8012128:	b928      	cbnz	r0, 8012136 <_dtoa_r+0x9d6>
 801212a:	4b80      	ldr	r3, [pc, #512]	; (801232c <_dtoa_r+0xbcc>)
 801212c:	4602      	mov	r2, r0
 801212e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012132:	f7ff bb2e 	b.w	8011792 <_dtoa_r+0x32>
 8012136:	693a      	ldr	r2, [r7, #16]
 8012138:	3202      	adds	r2, #2
 801213a:	0092      	lsls	r2, r2, #2
 801213c:	f107 010c 	add.w	r1, r7, #12
 8012140:	300c      	adds	r0, #12
 8012142:	f7fe fc4c 	bl	80109de <memcpy>
 8012146:	2201      	movs	r2, #1
 8012148:	4629      	mov	r1, r5
 801214a:	4620      	mov	r0, r4
 801214c:	f000 fbf2 	bl	8012934 <__lshift>
 8012150:	9b00      	ldr	r3, [sp, #0]
 8012152:	3301      	adds	r3, #1
 8012154:	9301      	str	r3, [sp, #4]
 8012156:	9b00      	ldr	r3, [sp, #0]
 8012158:	444b      	add	r3, r9
 801215a:	9307      	str	r3, [sp, #28]
 801215c:	9b02      	ldr	r3, [sp, #8]
 801215e:	f003 0301 	and.w	r3, r3, #1
 8012162:	46b8      	mov	r8, r7
 8012164:	9306      	str	r3, [sp, #24]
 8012166:	4607      	mov	r7, r0
 8012168:	9b01      	ldr	r3, [sp, #4]
 801216a:	4631      	mov	r1, r6
 801216c:	3b01      	subs	r3, #1
 801216e:	4658      	mov	r0, fp
 8012170:	9302      	str	r3, [sp, #8]
 8012172:	f7ff fa67 	bl	8011644 <quorem>
 8012176:	4603      	mov	r3, r0
 8012178:	3330      	adds	r3, #48	; 0x30
 801217a:	9004      	str	r0, [sp, #16]
 801217c:	4641      	mov	r1, r8
 801217e:	4658      	mov	r0, fp
 8012180:	9308      	str	r3, [sp, #32]
 8012182:	f000 fc43 	bl	8012a0c <__mcmp>
 8012186:	463a      	mov	r2, r7
 8012188:	4681      	mov	r9, r0
 801218a:	4631      	mov	r1, r6
 801218c:	4620      	mov	r0, r4
 801218e:	f000 fc59 	bl	8012a44 <__mdiff>
 8012192:	68c2      	ldr	r2, [r0, #12]
 8012194:	9b08      	ldr	r3, [sp, #32]
 8012196:	4605      	mov	r5, r0
 8012198:	bb02      	cbnz	r2, 80121dc <_dtoa_r+0xa7c>
 801219a:	4601      	mov	r1, r0
 801219c:	4658      	mov	r0, fp
 801219e:	f000 fc35 	bl	8012a0c <__mcmp>
 80121a2:	9b08      	ldr	r3, [sp, #32]
 80121a4:	4602      	mov	r2, r0
 80121a6:	4629      	mov	r1, r5
 80121a8:	4620      	mov	r0, r4
 80121aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80121ae:	f000 f9ef 	bl	8012590 <_Bfree>
 80121b2:	9b05      	ldr	r3, [sp, #20]
 80121b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121b6:	9d01      	ldr	r5, [sp, #4]
 80121b8:	ea43 0102 	orr.w	r1, r3, r2
 80121bc:	9b06      	ldr	r3, [sp, #24]
 80121be:	430b      	orrs	r3, r1
 80121c0:	9b08      	ldr	r3, [sp, #32]
 80121c2:	d10d      	bne.n	80121e0 <_dtoa_r+0xa80>
 80121c4:	2b39      	cmp	r3, #57	; 0x39
 80121c6:	d029      	beq.n	801221c <_dtoa_r+0xabc>
 80121c8:	f1b9 0f00 	cmp.w	r9, #0
 80121cc:	dd01      	ble.n	80121d2 <_dtoa_r+0xa72>
 80121ce:	9b04      	ldr	r3, [sp, #16]
 80121d0:	3331      	adds	r3, #49	; 0x31
 80121d2:	9a02      	ldr	r2, [sp, #8]
 80121d4:	7013      	strb	r3, [r2, #0]
 80121d6:	e774      	b.n	80120c2 <_dtoa_r+0x962>
 80121d8:	4638      	mov	r0, r7
 80121da:	e7b9      	b.n	8012150 <_dtoa_r+0x9f0>
 80121dc:	2201      	movs	r2, #1
 80121de:	e7e2      	b.n	80121a6 <_dtoa_r+0xa46>
 80121e0:	f1b9 0f00 	cmp.w	r9, #0
 80121e4:	db06      	blt.n	80121f4 <_dtoa_r+0xa94>
 80121e6:	9905      	ldr	r1, [sp, #20]
 80121e8:	ea41 0909 	orr.w	r9, r1, r9
 80121ec:	9906      	ldr	r1, [sp, #24]
 80121ee:	ea59 0101 	orrs.w	r1, r9, r1
 80121f2:	d120      	bne.n	8012236 <_dtoa_r+0xad6>
 80121f4:	2a00      	cmp	r2, #0
 80121f6:	ddec      	ble.n	80121d2 <_dtoa_r+0xa72>
 80121f8:	4659      	mov	r1, fp
 80121fa:	2201      	movs	r2, #1
 80121fc:	4620      	mov	r0, r4
 80121fe:	9301      	str	r3, [sp, #4]
 8012200:	f000 fb98 	bl	8012934 <__lshift>
 8012204:	4631      	mov	r1, r6
 8012206:	4683      	mov	fp, r0
 8012208:	f000 fc00 	bl	8012a0c <__mcmp>
 801220c:	2800      	cmp	r0, #0
 801220e:	9b01      	ldr	r3, [sp, #4]
 8012210:	dc02      	bgt.n	8012218 <_dtoa_r+0xab8>
 8012212:	d1de      	bne.n	80121d2 <_dtoa_r+0xa72>
 8012214:	07da      	lsls	r2, r3, #31
 8012216:	d5dc      	bpl.n	80121d2 <_dtoa_r+0xa72>
 8012218:	2b39      	cmp	r3, #57	; 0x39
 801221a:	d1d8      	bne.n	80121ce <_dtoa_r+0xa6e>
 801221c:	9a02      	ldr	r2, [sp, #8]
 801221e:	2339      	movs	r3, #57	; 0x39
 8012220:	7013      	strb	r3, [r2, #0]
 8012222:	462b      	mov	r3, r5
 8012224:	461d      	mov	r5, r3
 8012226:	3b01      	subs	r3, #1
 8012228:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801222c:	2a39      	cmp	r2, #57	; 0x39
 801222e:	d050      	beq.n	80122d2 <_dtoa_r+0xb72>
 8012230:	3201      	adds	r2, #1
 8012232:	701a      	strb	r2, [r3, #0]
 8012234:	e745      	b.n	80120c2 <_dtoa_r+0x962>
 8012236:	2a00      	cmp	r2, #0
 8012238:	dd03      	ble.n	8012242 <_dtoa_r+0xae2>
 801223a:	2b39      	cmp	r3, #57	; 0x39
 801223c:	d0ee      	beq.n	801221c <_dtoa_r+0xabc>
 801223e:	3301      	adds	r3, #1
 8012240:	e7c7      	b.n	80121d2 <_dtoa_r+0xa72>
 8012242:	9a01      	ldr	r2, [sp, #4]
 8012244:	9907      	ldr	r1, [sp, #28]
 8012246:	f802 3c01 	strb.w	r3, [r2, #-1]
 801224a:	428a      	cmp	r2, r1
 801224c:	d02a      	beq.n	80122a4 <_dtoa_r+0xb44>
 801224e:	4659      	mov	r1, fp
 8012250:	2300      	movs	r3, #0
 8012252:	220a      	movs	r2, #10
 8012254:	4620      	mov	r0, r4
 8012256:	f000 f9bd 	bl	80125d4 <__multadd>
 801225a:	45b8      	cmp	r8, r7
 801225c:	4683      	mov	fp, r0
 801225e:	f04f 0300 	mov.w	r3, #0
 8012262:	f04f 020a 	mov.w	r2, #10
 8012266:	4641      	mov	r1, r8
 8012268:	4620      	mov	r0, r4
 801226a:	d107      	bne.n	801227c <_dtoa_r+0xb1c>
 801226c:	f000 f9b2 	bl	80125d4 <__multadd>
 8012270:	4680      	mov	r8, r0
 8012272:	4607      	mov	r7, r0
 8012274:	9b01      	ldr	r3, [sp, #4]
 8012276:	3301      	adds	r3, #1
 8012278:	9301      	str	r3, [sp, #4]
 801227a:	e775      	b.n	8012168 <_dtoa_r+0xa08>
 801227c:	f000 f9aa 	bl	80125d4 <__multadd>
 8012280:	4639      	mov	r1, r7
 8012282:	4680      	mov	r8, r0
 8012284:	2300      	movs	r3, #0
 8012286:	220a      	movs	r2, #10
 8012288:	4620      	mov	r0, r4
 801228a:	f000 f9a3 	bl	80125d4 <__multadd>
 801228e:	4607      	mov	r7, r0
 8012290:	e7f0      	b.n	8012274 <_dtoa_r+0xb14>
 8012292:	f1b9 0f00 	cmp.w	r9, #0
 8012296:	9a00      	ldr	r2, [sp, #0]
 8012298:	bfcc      	ite	gt
 801229a:	464d      	movgt	r5, r9
 801229c:	2501      	movle	r5, #1
 801229e:	4415      	add	r5, r2
 80122a0:	f04f 0800 	mov.w	r8, #0
 80122a4:	4659      	mov	r1, fp
 80122a6:	2201      	movs	r2, #1
 80122a8:	4620      	mov	r0, r4
 80122aa:	9301      	str	r3, [sp, #4]
 80122ac:	f000 fb42 	bl	8012934 <__lshift>
 80122b0:	4631      	mov	r1, r6
 80122b2:	4683      	mov	fp, r0
 80122b4:	f000 fbaa 	bl	8012a0c <__mcmp>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	dcb2      	bgt.n	8012222 <_dtoa_r+0xac2>
 80122bc:	d102      	bne.n	80122c4 <_dtoa_r+0xb64>
 80122be:	9b01      	ldr	r3, [sp, #4]
 80122c0:	07db      	lsls	r3, r3, #31
 80122c2:	d4ae      	bmi.n	8012222 <_dtoa_r+0xac2>
 80122c4:	462b      	mov	r3, r5
 80122c6:	461d      	mov	r5, r3
 80122c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80122cc:	2a30      	cmp	r2, #48	; 0x30
 80122ce:	d0fa      	beq.n	80122c6 <_dtoa_r+0xb66>
 80122d0:	e6f7      	b.n	80120c2 <_dtoa_r+0x962>
 80122d2:	9a00      	ldr	r2, [sp, #0]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d1a5      	bne.n	8012224 <_dtoa_r+0xac4>
 80122d8:	f10a 0a01 	add.w	sl, sl, #1
 80122dc:	2331      	movs	r3, #49	; 0x31
 80122de:	e779      	b.n	80121d4 <_dtoa_r+0xa74>
 80122e0:	4b13      	ldr	r3, [pc, #76]	; (8012330 <_dtoa_r+0xbd0>)
 80122e2:	f7ff baaf 	b.w	8011844 <_dtoa_r+0xe4>
 80122e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	f47f aa86 	bne.w	80117fa <_dtoa_r+0x9a>
 80122ee:	4b11      	ldr	r3, [pc, #68]	; (8012334 <_dtoa_r+0xbd4>)
 80122f0:	f7ff baa8 	b.w	8011844 <_dtoa_r+0xe4>
 80122f4:	f1b9 0f00 	cmp.w	r9, #0
 80122f8:	dc03      	bgt.n	8012302 <_dtoa_r+0xba2>
 80122fa:	9b05      	ldr	r3, [sp, #20]
 80122fc:	2b02      	cmp	r3, #2
 80122fe:	f73f aec9 	bgt.w	8012094 <_dtoa_r+0x934>
 8012302:	9d00      	ldr	r5, [sp, #0]
 8012304:	4631      	mov	r1, r6
 8012306:	4658      	mov	r0, fp
 8012308:	f7ff f99c 	bl	8011644 <quorem>
 801230c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012310:	f805 3b01 	strb.w	r3, [r5], #1
 8012314:	9a00      	ldr	r2, [sp, #0]
 8012316:	1aaa      	subs	r2, r5, r2
 8012318:	4591      	cmp	r9, r2
 801231a:	ddba      	ble.n	8012292 <_dtoa_r+0xb32>
 801231c:	4659      	mov	r1, fp
 801231e:	2300      	movs	r3, #0
 8012320:	220a      	movs	r2, #10
 8012322:	4620      	mov	r0, r4
 8012324:	f000 f956 	bl	80125d4 <__multadd>
 8012328:	4683      	mov	fp, r0
 801232a:	e7eb      	b.n	8012304 <_dtoa_r+0xba4>
 801232c:	08015fd8 	.word	0x08015fd8
 8012330:	08015f0c 	.word	0x08015f0c
 8012334:	08015f55 	.word	0x08015f55

08012338 <__sflush_r>:
 8012338:	898a      	ldrh	r2, [r1, #12]
 801233a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801233e:	4605      	mov	r5, r0
 8012340:	0710      	lsls	r0, r2, #28
 8012342:	460c      	mov	r4, r1
 8012344:	d458      	bmi.n	80123f8 <__sflush_r+0xc0>
 8012346:	684b      	ldr	r3, [r1, #4]
 8012348:	2b00      	cmp	r3, #0
 801234a:	dc05      	bgt.n	8012358 <__sflush_r+0x20>
 801234c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801234e:	2b00      	cmp	r3, #0
 8012350:	dc02      	bgt.n	8012358 <__sflush_r+0x20>
 8012352:	2000      	movs	r0, #0
 8012354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801235a:	2e00      	cmp	r6, #0
 801235c:	d0f9      	beq.n	8012352 <__sflush_r+0x1a>
 801235e:	2300      	movs	r3, #0
 8012360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012364:	682f      	ldr	r7, [r5, #0]
 8012366:	602b      	str	r3, [r5, #0]
 8012368:	d032      	beq.n	80123d0 <__sflush_r+0x98>
 801236a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801236c:	89a3      	ldrh	r3, [r4, #12]
 801236e:	075a      	lsls	r2, r3, #29
 8012370:	d505      	bpl.n	801237e <__sflush_r+0x46>
 8012372:	6863      	ldr	r3, [r4, #4]
 8012374:	1ac0      	subs	r0, r0, r3
 8012376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012378:	b10b      	cbz	r3, 801237e <__sflush_r+0x46>
 801237a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801237c:	1ac0      	subs	r0, r0, r3
 801237e:	2300      	movs	r3, #0
 8012380:	4602      	mov	r2, r0
 8012382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012384:	6a21      	ldr	r1, [r4, #32]
 8012386:	4628      	mov	r0, r5
 8012388:	47b0      	blx	r6
 801238a:	1c43      	adds	r3, r0, #1
 801238c:	89a3      	ldrh	r3, [r4, #12]
 801238e:	d106      	bne.n	801239e <__sflush_r+0x66>
 8012390:	6829      	ldr	r1, [r5, #0]
 8012392:	291d      	cmp	r1, #29
 8012394:	d82c      	bhi.n	80123f0 <__sflush_r+0xb8>
 8012396:	4a2a      	ldr	r2, [pc, #168]	; (8012440 <__sflush_r+0x108>)
 8012398:	40ca      	lsrs	r2, r1
 801239a:	07d6      	lsls	r6, r2, #31
 801239c:	d528      	bpl.n	80123f0 <__sflush_r+0xb8>
 801239e:	2200      	movs	r2, #0
 80123a0:	6062      	str	r2, [r4, #4]
 80123a2:	04d9      	lsls	r1, r3, #19
 80123a4:	6922      	ldr	r2, [r4, #16]
 80123a6:	6022      	str	r2, [r4, #0]
 80123a8:	d504      	bpl.n	80123b4 <__sflush_r+0x7c>
 80123aa:	1c42      	adds	r2, r0, #1
 80123ac:	d101      	bne.n	80123b2 <__sflush_r+0x7a>
 80123ae:	682b      	ldr	r3, [r5, #0]
 80123b0:	b903      	cbnz	r3, 80123b4 <__sflush_r+0x7c>
 80123b2:	6560      	str	r0, [r4, #84]	; 0x54
 80123b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123b6:	602f      	str	r7, [r5, #0]
 80123b8:	2900      	cmp	r1, #0
 80123ba:	d0ca      	beq.n	8012352 <__sflush_r+0x1a>
 80123bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123c0:	4299      	cmp	r1, r3
 80123c2:	d002      	beq.n	80123ca <__sflush_r+0x92>
 80123c4:	4628      	mov	r0, r5
 80123c6:	f000 fc31 	bl	8012c2c <_free_r>
 80123ca:	2000      	movs	r0, #0
 80123cc:	6360      	str	r0, [r4, #52]	; 0x34
 80123ce:	e7c1      	b.n	8012354 <__sflush_r+0x1c>
 80123d0:	6a21      	ldr	r1, [r4, #32]
 80123d2:	2301      	movs	r3, #1
 80123d4:	4628      	mov	r0, r5
 80123d6:	47b0      	blx	r6
 80123d8:	1c41      	adds	r1, r0, #1
 80123da:	d1c7      	bne.n	801236c <__sflush_r+0x34>
 80123dc:	682b      	ldr	r3, [r5, #0]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d0c4      	beq.n	801236c <__sflush_r+0x34>
 80123e2:	2b1d      	cmp	r3, #29
 80123e4:	d001      	beq.n	80123ea <__sflush_r+0xb2>
 80123e6:	2b16      	cmp	r3, #22
 80123e8:	d101      	bne.n	80123ee <__sflush_r+0xb6>
 80123ea:	602f      	str	r7, [r5, #0]
 80123ec:	e7b1      	b.n	8012352 <__sflush_r+0x1a>
 80123ee:	89a3      	ldrh	r3, [r4, #12]
 80123f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123f4:	81a3      	strh	r3, [r4, #12]
 80123f6:	e7ad      	b.n	8012354 <__sflush_r+0x1c>
 80123f8:	690f      	ldr	r7, [r1, #16]
 80123fa:	2f00      	cmp	r7, #0
 80123fc:	d0a9      	beq.n	8012352 <__sflush_r+0x1a>
 80123fe:	0793      	lsls	r3, r2, #30
 8012400:	680e      	ldr	r6, [r1, #0]
 8012402:	bf08      	it	eq
 8012404:	694b      	ldreq	r3, [r1, #20]
 8012406:	600f      	str	r7, [r1, #0]
 8012408:	bf18      	it	ne
 801240a:	2300      	movne	r3, #0
 801240c:	eba6 0807 	sub.w	r8, r6, r7
 8012410:	608b      	str	r3, [r1, #8]
 8012412:	f1b8 0f00 	cmp.w	r8, #0
 8012416:	dd9c      	ble.n	8012352 <__sflush_r+0x1a>
 8012418:	6a21      	ldr	r1, [r4, #32]
 801241a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801241c:	4643      	mov	r3, r8
 801241e:	463a      	mov	r2, r7
 8012420:	4628      	mov	r0, r5
 8012422:	47b0      	blx	r6
 8012424:	2800      	cmp	r0, #0
 8012426:	dc06      	bgt.n	8012436 <__sflush_r+0xfe>
 8012428:	89a3      	ldrh	r3, [r4, #12]
 801242a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801242e:	81a3      	strh	r3, [r4, #12]
 8012430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012434:	e78e      	b.n	8012354 <__sflush_r+0x1c>
 8012436:	4407      	add	r7, r0
 8012438:	eba8 0800 	sub.w	r8, r8, r0
 801243c:	e7e9      	b.n	8012412 <__sflush_r+0xda>
 801243e:	bf00      	nop
 8012440:	20400001 	.word	0x20400001

08012444 <_fflush_r>:
 8012444:	b538      	push	{r3, r4, r5, lr}
 8012446:	690b      	ldr	r3, [r1, #16]
 8012448:	4605      	mov	r5, r0
 801244a:	460c      	mov	r4, r1
 801244c:	b913      	cbnz	r3, 8012454 <_fflush_r+0x10>
 801244e:	2500      	movs	r5, #0
 8012450:	4628      	mov	r0, r5
 8012452:	bd38      	pop	{r3, r4, r5, pc}
 8012454:	b118      	cbz	r0, 801245e <_fflush_r+0x1a>
 8012456:	6983      	ldr	r3, [r0, #24]
 8012458:	b90b      	cbnz	r3, 801245e <_fflush_r+0x1a>
 801245a:	f7fe f9e1 	bl	8010820 <__sinit>
 801245e:	4b14      	ldr	r3, [pc, #80]	; (80124b0 <_fflush_r+0x6c>)
 8012460:	429c      	cmp	r4, r3
 8012462:	d11b      	bne.n	801249c <_fflush_r+0x58>
 8012464:	686c      	ldr	r4, [r5, #4]
 8012466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d0ef      	beq.n	801244e <_fflush_r+0xa>
 801246e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012470:	07d0      	lsls	r0, r2, #31
 8012472:	d404      	bmi.n	801247e <_fflush_r+0x3a>
 8012474:	0599      	lsls	r1, r3, #22
 8012476:	d402      	bmi.n	801247e <_fflush_r+0x3a>
 8012478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801247a:	f7fe faae 	bl	80109da <__retarget_lock_acquire_recursive>
 801247e:	4628      	mov	r0, r5
 8012480:	4621      	mov	r1, r4
 8012482:	f7ff ff59 	bl	8012338 <__sflush_r>
 8012486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012488:	07da      	lsls	r2, r3, #31
 801248a:	4605      	mov	r5, r0
 801248c:	d4e0      	bmi.n	8012450 <_fflush_r+0xc>
 801248e:	89a3      	ldrh	r3, [r4, #12]
 8012490:	059b      	lsls	r3, r3, #22
 8012492:	d4dd      	bmi.n	8012450 <_fflush_r+0xc>
 8012494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012496:	f7fe faa1 	bl	80109dc <__retarget_lock_release_recursive>
 801249a:	e7d9      	b.n	8012450 <_fflush_r+0xc>
 801249c:	4b05      	ldr	r3, [pc, #20]	; (80124b4 <_fflush_r+0x70>)
 801249e:	429c      	cmp	r4, r3
 80124a0:	d101      	bne.n	80124a6 <_fflush_r+0x62>
 80124a2:	68ac      	ldr	r4, [r5, #8]
 80124a4:	e7df      	b.n	8012466 <_fflush_r+0x22>
 80124a6:	4b04      	ldr	r3, [pc, #16]	; (80124b8 <_fflush_r+0x74>)
 80124a8:	429c      	cmp	r4, r3
 80124aa:	bf08      	it	eq
 80124ac:	68ec      	ldreq	r4, [r5, #12]
 80124ae:	e7da      	b.n	8012466 <_fflush_r+0x22>
 80124b0:	08015eb8 	.word	0x08015eb8
 80124b4:	08015ed8 	.word	0x08015ed8
 80124b8:	08015e98 	.word	0x08015e98

080124bc <_localeconv_r>:
 80124bc:	4800      	ldr	r0, [pc, #0]	; (80124c0 <_localeconv_r+0x4>)
 80124be:	4770      	bx	lr
 80124c0:	200002d8 	.word	0x200002d8

080124c4 <_lseek_r>:
 80124c4:	b538      	push	{r3, r4, r5, lr}
 80124c6:	4d07      	ldr	r5, [pc, #28]	; (80124e4 <_lseek_r+0x20>)
 80124c8:	4604      	mov	r4, r0
 80124ca:	4608      	mov	r0, r1
 80124cc:	4611      	mov	r1, r2
 80124ce:	2200      	movs	r2, #0
 80124d0:	602a      	str	r2, [r5, #0]
 80124d2:	461a      	mov	r2, r3
 80124d4:	f7f1 fb38 	bl	8003b48 <_lseek>
 80124d8:	1c43      	adds	r3, r0, #1
 80124da:	d102      	bne.n	80124e2 <_lseek_r+0x1e>
 80124dc:	682b      	ldr	r3, [r5, #0]
 80124de:	b103      	cbz	r3, 80124e2 <_lseek_r+0x1e>
 80124e0:	6023      	str	r3, [r4, #0]
 80124e2:	bd38      	pop	{r3, r4, r5, pc}
 80124e4:	2000b66c 	.word	0x2000b66c

080124e8 <malloc>:
 80124e8:	4b02      	ldr	r3, [pc, #8]	; (80124f4 <malloc+0xc>)
 80124ea:	4601      	mov	r1, r0
 80124ec:	6818      	ldr	r0, [r3, #0]
 80124ee:	f7fe ba8d 	b.w	8010a0c <_malloc_r>
 80124f2:	bf00      	nop
 80124f4:	20000184 	.word	0x20000184

080124f8 <__malloc_lock>:
 80124f8:	4801      	ldr	r0, [pc, #4]	; (8012500 <__malloc_lock+0x8>)
 80124fa:	f7fe ba6e 	b.w	80109da <__retarget_lock_acquire_recursive>
 80124fe:	bf00      	nop
 8012500:	2000b664 	.word	0x2000b664

08012504 <__malloc_unlock>:
 8012504:	4801      	ldr	r0, [pc, #4]	; (801250c <__malloc_unlock+0x8>)
 8012506:	f7fe ba69 	b.w	80109dc <__retarget_lock_release_recursive>
 801250a:	bf00      	nop
 801250c:	2000b664 	.word	0x2000b664

08012510 <_Balloc>:
 8012510:	b570      	push	{r4, r5, r6, lr}
 8012512:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012514:	4604      	mov	r4, r0
 8012516:	460d      	mov	r5, r1
 8012518:	b976      	cbnz	r6, 8012538 <_Balloc+0x28>
 801251a:	2010      	movs	r0, #16
 801251c:	f7ff ffe4 	bl	80124e8 <malloc>
 8012520:	4602      	mov	r2, r0
 8012522:	6260      	str	r0, [r4, #36]	; 0x24
 8012524:	b920      	cbnz	r0, 8012530 <_Balloc+0x20>
 8012526:	4b18      	ldr	r3, [pc, #96]	; (8012588 <_Balloc+0x78>)
 8012528:	4818      	ldr	r0, [pc, #96]	; (801258c <_Balloc+0x7c>)
 801252a:	2166      	movs	r1, #102	; 0x66
 801252c:	f000 fd3c 	bl	8012fa8 <__assert_func>
 8012530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012534:	6006      	str	r6, [r0, #0]
 8012536:	60c6      	str	r6, [r0, #12]
 8012538:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801253a:	68f3      	ldr	r3, [r6, #12]
 801253c:	b183      	cbz	r3, 8012560 <_Balloc+0x50>
 801253e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012540:	68db      	ldr	r3, [r3, #12]
 8012542:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012546:	b9b8      	cbnz	r0, 8012578 <_Balloc+0x68>
 8012548:	2101      	movs	r1, #1
 801254a:	fa01 f605 	lsl.w	r6, r1, r5
 801254e:	1d72      	adds	r2, r6, #5
 8012550:	0092      	lsls	r2, r2, #2
 8012552:	4620      	mov	r0, r4
 8012554:	f000 fb5a 	bl	8012c0c <_calloc_r>
 8012558:	b160      	cbz	r0, 8012574 <_Balloc+0x64>
 801255a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801255e:	e00e      	b.n	801257e <_Balloc+0x6e>
 8012560:	2221      	movs	r2, #33	; 0x21
 8012562:	2104      	movs	r1, #4
 8012564:	4620      	mov	r0, r4
 8012566:	f000 fb51 	bl	8012c0c <_calloc_r>
 801256a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801256c:	60f0      	str	r0, [r6, #12]
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d1e4      	bne.n	801253e <_Balloc+0x2e>
 8012574:	2000      	movs	r0, #0
 8012576:	bd70      	pop	{r4, r5, r6, pc}
 8012578:	6802      	ldr	r2, [r0, #0]
 801257a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801257e:	2300      	movs	r3, #0
 8012580:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012584:	e7f7      	b.n	8012576 <_Balloc+0x66>
 8012586:	bf00      	nop
 8012588:	08015f62 	.word	0x08015f62
 801258c:	08015fe9 	.word	0x08015fe9

08012590 <_Bfree>:
 8012590:	b570      	push	{r4, r5, r6, lr}
 8012592:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012594:	4605      	mov	r5, r0
 8012596:	460c      	mov	r4, r1
 8012598:	b976      	cbnz	r6, 80125b8 <_Bfree+0x28>
 801259a:	2010      	movs	r0, #16
 801259c:	f7ff ffa4 	bl	80124e8 <malloc>
 80125a0:	4602      	mov	r2, r0
 80125a2:	6268      	str	r0, [r5, #36]	; 0x24
 80125a4:	b920      	cbnz	r0, 80125b0 <_Bfree+0x20>
 80125a6:	4b09      	ldr	r3, [pc, #36]	; (80125cc <_Bfree+0x3c>)
 80125a8:	4809      	ldr	r0, [pc, #36]	; (80125d0 <_Bfree+0x40>)
 80125aa:	218a      	movs	r1, #138	; 0x8a
 80125ac:	f000 fcfc 	bl	8012fa8 <__assert_func>
 80125b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80125b4:	6006      	str	r6, [r0, #0]
 80125b6:	60c6      	str	r6, [r0, #12]
 80125b8:	b13c      	cbz	r4, 80125ca <_Bfree+0x3a>
 80125ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80125bc:	6862      	ldr	r2, [r4, #4]
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80125c4:	6021      	str	r1, [r4, #0]
 80125c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80125ca:	bd70      	pop	{r4, r5, r6, pc}
 80125cc:	08015f62 	.word	0x08015f62
 80125d0:	08015fe9 	.word	0x08015fe9

080125d4 <__multadd>:
 80125d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125d8:	690e      	ldr	r6, [r1, #16]
 80125da:	4607      	mov	r7, r0
 80125dc:	4698      	mov	r8, r3
 80125de:	460c      	mov	r4, r1
 80125e0:	f101 0014 	add.w	r0, r1, #20
 80125e4:	2300      	movs	r3, #0
 80125e6:	6805      	ldr	r5, [r0, #0]
 80125e8:	b2a9      	uxth	r1, r5
 80125ea:	fb02 8101 	mla	r1, r2, r1, r8
 80125ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80125f2:	0c2d      	lsrs	r5, r5, #16
 80125f4:	fb02 c505 	mla	r5, r2, r5, ip
 80125f8:	b289      	uxth	r1, r1
 80125fa:	3301      	adds	r3, #1
 80125fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012600:	429e      	cmp	r6, r3
 8012602:	f840 1b04 	str.w	r1, [r0], #4
 8012606:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801260a:	dcec      	bgt.n	80125e6 <__multadd+0x12>
 801260c:	f1b8 0f00 	cmp.w	r8, #0
 8012610:	d022      	beq.n	8012658 <__multadd+0x84>
 8012612:	68a3      	ldr	r3, [r4, #8]
 8012614:	42b3      	cmp	r3, r6
 8012616:	dc19      	bgt.n	801264c <__multadd+0x78>
 8012618:	6861      	ldr	r1, [r4, #4]
 801261a:	4638      	mov	r0, r7
 801261c:	3101      	adds	r1, #1
 801261e:	f7ff ff77 	bl	8012510 <_Balloc>
 8012622:	4605      	mov	r5, r0
 8012624:	b928      	cbnz	r0, 8012632 <__multadd+0x5e>
 8012626:	4602      	mov	r2, r0
 8012628:	4b0d      	ldr	r3, [pc, #52]	; (8012660 <__multadd+0x8c>)
 801262a:	480e      	ldr	r0, [pc, #56]	; (8012664 <__multadd+0x90>)
 801262c:	21b5      	movs	r1, #181	; 0xb5
 801262e:	f000 fcbb 	bl	8012fa8 <__assert_func>
 8012632:	6922      	ldr	r2, [r4, #16]
 8012634:	3202      	adds	r2, #2
 8012636:	f104 010c 	add.w	r1, r4, #12
 801263a:	0092      	lsls	r2, r2, #2
 801263c:	300c      	adds	r0, #12
 801263e:	f7fe f9ce 	bl	80109de <memcpy>
 8012642:	4621      	mov	r1, r4
 8012644:	4638      	mov	r0, r7
 8012646:	f7ff ffa3 	bl	8012590 <_Bfree>
 801264a:	462c      	mov	r4, r5
 801264c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012650:	3601      	adds	r6, #1
 8012652:	f8c3 8014 	str.w	r8, [r3, #20]
 8012656:	6126      	str	r6, [r4, #16]
 8012658:	4620      	mov	r0, r4
 801265a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801265e:	bf00      	nop
 8012660:	08015fd8 	.word	0x08015fd8
 8012664:	08015fe9 	.word	0x08015fe9

08012668 <__hi0bits>:
 8012668:	0c03      	lsrs	r3, r0, #16
 801266a:	041b      	lsls	r3, r3, #16
 801266c:	b9d3      	cbnz	r3, 80126a4 <__hi0bits+0x3c>
 801266e:	0400      	lsls	r0, r0, #16
 8012670:	2310      	movs	r3, #16
 8012672:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012676:	bf04      	itt	eq
 8012678:	0200      	lsleq	r0, r0, #8
 801267a:	3308      	addeq	r3, #8
 801267c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012680:	bf04      	itt	eq
 8012682:	0100      	lsleq	r0, r0, #4
 8012684:	3304      	addeq	r3, #4
 8012686:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801268a:	bf04      	itt	eq
 801268c:	0080      	lsleq	r0, r0, #2
 801268e:	3302      	addeq	r3, #2
 8012690:	2800      	cmp	r0, #0
 8012692:	db05      	blt.n	80126a0 <__hi0bits+0x38>
 8012694:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012698:	f103 0301 	add.w	r3, r3, #1
 801269c:	bf08      	it	eq
 801269e:	2320      	moveq	r3, #32
 80126a0:	4618      	mov	r0, r3
 80126a2:	4770      	bx	lr
 80126a4:	2300      	movs	r3, #0
 80126a6:	e7e4      	b.n	8012672 <__hi0bits+0xa>

080126a8 <__lo0bits>:
 80126a8:	6803      	ldr	r3, [r0, #0]
 80126aa:	f013 0207 	ands.w	r2, r3, #7
 80126ae:	4601      	mov	r1, r0
 80126b0:	d00b      	beq.n	80126ca <__lo0bits+0x22>
 80126b2:	07da      	lsls	r2, r3, #31
 80126b4:	d424      	bmi.n	8012700 <__lo0bits+0x58>
 80126b6:	0798      	lsls	r0, r3, #30
 80126b8:	bf49      	itett	mi
 80126ba:	085b      	lsrmi	r3, r3, #1
 80126bc:	089b      	lsrpl	r3, r3, #2
 80126be:	2001      	movmi	r0, #1
 80126c0:	600b      	strmi	r3, [r1, #0]
 80126c2:	bf5c      	itt	pl
 80126c4:	600b      	strpl	r3, [r1, #0]
 80126c6:	2002      	movpl	r0, #2
 80126c8:	4770      	bx	lr
 80126ca:	b298      	uxth	r0, r3
 80126cc:	b9b0      	cbnz	r0, 80126fc <__lo0bits+0x54>
 80126ce:	0c1b      	lsrs	r3, r3, #16
 80126d0:	2010      	movs	r0, #16
 80126d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80126d6:	bf04      	itt	eq
 80126d8:	0a1b      	lsreq	r3, r3, #8
 80126da:	3008      	addeq	r0, #8
 80126dc:	071a      	lsls	r2, r3, #28
 80126de:	bf04      	itt	eq
 80126e0:	091b      	lsreq	r3, r3, #4
 80126e2:	3004      	addeq	r0, #4
 80126e4:	079a      	lsls	r2, r3, #30
 80126e6:	bf04      	itt	eq
 80126e8:	089b      	lsreq	r3, r3, #2
 80126ea:	3002      	addeq	r0, #2
 80126ec:	07da      	lsls	r2, r3, #31
 80126ee:	d403      	bmi.n	80126f8 <__lo0bits+0x50>
 80126f0:	085b      	lsrs	r3, r3, #1
 80126f2:	f100 0001 	add.w	r0, r0, #1
 80126f6:	d005      	beq.n	8012704 <__lo0bits+0x5c>
 80126f8:	600b      	str	r3, [r1, #0]
 80126fa:	4770      	bx	lr
 80126fc:	4610      	mov	r0, r2
 80126fe:	e7e8      	b.n	80126d2 <__lo0bits+0x2a>
 8012700:	2000      	movs	r0, #0
 8012702:	4770      	bx	lr
 8012704:	2020      	movs	r0, #32
 8012706:	4770      	bx	lr

08012708 <__i2b>:
 8012708:	b510      	push	{r4, lr}
 801270a:	460c      	mov	r4, r1
 801270c:	2101      	movs	r1, #1
 801270e:	f7ff feff 	bl	8012510 <_Balloc>
 8012712:	4602      	mov	r2, r0
 8012714:	b928      	cbnz	r0, 8012722 <__i2b+0x1a>
 8012716:	4b05      	ldr	r3, [pc, #20]	; (801272c <__i2b+0x24>)
 8012718:	4805      	ldr	r0, [pc, #20]	; (8012730 <__i2b+0x28>)
 801271a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801271e:	f000 fc43 	bl	8012fa8 <__assert_func>
 8012722:	2301      	movs	r3, #1
 8012724:	6144      	str	r4, [r0, #20]
 8012726:	6103      	str	r3, [r0, #16]
 8012728:	bd10      	pop	{r4, pc}
 801272a:	bf00      	nop
 801272c:	08015fd8 	.word	0x08015fd8
 8012730:	08015fe9 	.word	0x08015fe9

08012734 <__multiply>:
 8012734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012738:	4614      	mov	r4, r2
 801273a:	690a      	ldr	r2, [r1, #16]
 801273c:	6923      	ldr	r3, [r4, #16]
 801273e:	429a      	cmp	r2, r3
 8012740:	bfb8      	it	lt
 8012742:	460b      	movlt	r3, r1
 8012744:	460d      	mov	r5, r1
 8012746:	bfbc      	itt	lt
 8012748:	4625      	movlt	r5, r4
 801274a:	461c      	movlt	r4, r3
 801274c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012750:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012754:	68ab      	ldr	r3, [r5, #8]
 8012756:	6869      	ldr	r1, [r5, #4]
 8012758:	eb0a 0709 	add.w	r7, sl, r9
 801275c:	42bb      	cmp	r3, r7
 801275e:	b085      	sub	sp, #20
 8012760:	bfb8      	it	lt
 8012762:	3101      	addlt	r1, #1
 8012764:	f7ff fed4 	bl	8012510 <_Balloc>
 8012768:	b930      	cbnz	r0, 8012778 <__multiply+0x44>
 801276a:	4602      	mov	r2, r0
 801276c:	4b42      	ldr	r3, [pc, #264]	; (8012878 <__multiply+0x144>)
 801276e:	4843      	ldr	r0, [pc, #268]	; (801287c <__multiply+0x148>)
 8012770:	f240 115d 	movw	r1, #349	; 0x15d
 8012774:	f000 fc18 	bl	8012fa8 <__assert_func>
 8012778:	f100 0614 	add.w	r6, r0, #20
 801277c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012780:	4633      	mov	r3, r6
 8012782:	2200      	movs	r2, #0
 8012784:	4543      	cmp	r3, r8
 8012786:	d31e      	bcc.n	80127c6 <__multiply+0x92>
 8012788:	f105 0c14 	add.w	ip, r5, #20
 801278c:	f104 0314 	add.w	r3, r4, #20
 8012790:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012794:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012798:	9202      	str	r2, [sp, #8]
 801279a:	ebac 0205 	sub.w	r2, ip, r5
 801279e:	3a15      	subs	r2, #21
 80127a0:	f022 0203 	bic.w	r2, r2, #3
 80127a4:	3204      	adds	r2, #4
 80127a6:	f105 0115 	add.w	r1, r5, #21
 80127aa:	458c      	cmp	ip, r1
 80127ac:	bf38      	it	cc
 80127ae:	2204      	movcc	r2, #4
 80127b0:	9201      	str	r2, [sp, #4]
 80127b2:	9a02      	ldr	r2, [sp, #8]
 80127b4:	9303      	str	r3, [sp, #12]
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d808      	bhi.n	80127cc <__multiply+0x98>
 80127ba:	2f00      	cmp	r7, #0
 80127bc:	dc55      	bgt.n	801286a <__multiply+0x136>
 80127be:	6107      	str	r7, [r0, #16]
 80127c0:	b005      	add	sp, #20
 80127c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127c6:	f843 2b04 	str.w	r2, [r3], #4
 80127ca:	e7db      	b.n	8012784 <__multiply+0x50>
 80127cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80127d0:	f1ba 0f00 	cmp.w	sl, #0
 80127d4:	d020      	beq.n	8012818 <__multiply+0xe4>
 80127d6:	f105 0e14 	add.w	lr, r5, #20
 80127da:	46b1      	mov	r9, r6
 80127dc:	2200      	movs	r2, #0
 80127de:	f85e 4b04 	ldr.w	r4, [lr], #4
 80127e2:	f8d9 b000 	ldr.w	fp, [r9]
 80127e6:	b2a1      	uxth	r1, r4
 80127e8:	fa1f fb8b 	uxth.w	fp, fp
 80127ec:	fb0a b101 	mla	r1, sl, r1, fp
 80127f0:	4411      	add	r1, r2
 80127f2:	f8d9 2000 	ldr.w	r2, [r9]
 80127f6:	0c24      	lsrs	r4, r4, #16
 80127f8:	0c12      	lsrs	r2, r2, #16
 80127fa:	fb0a 2404 	mla	r4, sl, r4, r2
 80127fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012802:	b289      	uxth	r1, r1
 8012804:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012808:	45f4      	cmp	ip, lr
 801280a:	f849 1b04 	str.w	r1, [r9], #4
 801280e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012812:	d8e4      	bhi.n	80127de <__multiply+0xaa>
 8012814:	9901      	ldr	r1, [sp, #4]
 8012816:	5072      	str	r2, [r6, r1]
 8012818:	9a03      	ldr	r2, [sp, #12]
 801281a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801281e:	3304      	adds	r3, #4
 8012820:	f1b9 0f00 	cmp.w	r9, #0
 8012824:	d01f      	beq.n	8012866 <__multiply+0x132>
 8012826:	6834      	ldr	r4, [r6, #0]
 8012828:	f105 0114 	add.w	r1, r5, #20
 801282c:	46b6      	mov	lr, r6
 801282e:	f04f 0a00 	mov.w	sl, #0
 8012832:	880a      	ldrh	r2, [r1, #0]
 8012834:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012838:	fb09 b202 	mla	r2, r9, r2, fp
 801283c:	4492      	add	sl, r2
 801283e:	b2a4      	uxth	r4, r4
 8012840:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012844:	f84e 4b04 	str.w	r4, [lr], #4
 8012848:	f851 4b04 	ldr.w	r4, [r1], #4
 801284c:	f8be 2000 	ldrh.w	r2, [lr]
 8012850:	0c24      	lsrs	r4, r4, #16
 8012852:	fb09 2404 	mla	r4, r9, r4, r2
 8012856:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801285a:	458c      	cmp	ip, r1
 801285c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012860:	d8e7      	bhi.n	8012832 <__multiply+0xfe>
 8012862:	9a01      	ldr	r2, [sp, #4]
 8012864:	50b4      	str	r4, [r6, r2]
 8012866:	3604      	adds	r6, #4
 8012868:	e7a3      	b.n	80127b2 <__multiply+0x7e>
 801286a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801286e:	2b00      	cmp	r3, #0
 8012870:	d1a5      	bne.n	80127be <__multiply+0x8a>
 8012872:	3f01      	subs	r7, #1
 8012874:	e7a1      	b.n	80127ba <__multiply+0x86>
 8012876:	bf00      	nop
 8012878:	08015fd8 	.word	0x08015fd8
 801287c:	08015fe9 	.word	0x08015fe9

08012880 <__pow5mult>:
 8012880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012884:	4615      	mov	r5, r2
 8012886:	f012 0203 	ands.w	r2, r2, #3
 801288a:	4606      	mov	r6, r0
 801288c:	460f      	mov	r7, r1
 801288e:	d007      	beq.n	80128a0 <__pow5mult+0x20>
 8012890:	4c25      	ldr	r4, [pc, #148]	; (8012928 <__pow5mult+0xa8>)
 8012892:	3a01      	subs	r2, #1
 8012894:	2300      	movs	r3, #0
 8012896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801289a:	f7ff fe9b 	bl	80125d4 <__multadd>
 801289e:	4607      	mov	r7, r0
 80128a0:	10ad      	asrs	r5, r5, #2
 80128a2:	d03d      	beq.n	8012920 <__pow5mult+0xa0>
 80128a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80128a6:	b97c      	cbnz	r4, 80128c8 <__pow5mult+0x48>
 80128a8:	2010      	movs	r0, #16
 80128aa:	f7ff fe1d 	bl	80124e8 <malloc>
 80128ae:	4602      	mov	r2, r0
 80128b0:	6270      	str	r0, [r6, #36]	; 0x24
 80128b2:	b928      	cbnz	r0, 80128c0 <__pow5mult+0x40>
 80128b4:	4b1d      	ldr	r3, [pc, #116]	; (801292c <__pow5mult+0xac>)
 80128b6:	481e      	ldr	r0, [pc, #120]	; (8012930 <__pow5mult+0xb0>)
 80128b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80128bc:	f000 fb74 	bl	8012fa8 <__assert_func>
 80128c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80128c4:	6004      	str	r4, [r0, #0]
 80128c6:	60c4      	str	r4, [r0, #12]
 80128c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80128cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80128d0:	b94c      	cbnz	r4, 80128e6 <__pow5mult+0x66>
 80128d2:	f240 2171 	movw	r1, #625	; 0x271
 80128d6:	4630      	mov	r0, r6
 80128d8:	f7ff ff16 	bl	8012708 <__i2b>
 80128dc:	2300      	movs	r3, #0
 80128de:	f8c8 0008 	str.w	r0, [r8, #8]
 80128e2:	4604      	mov	r4, r0
 80128e4:	6003      	str	r3, [r0, #0]
 80128e6:	f04f 0900 	mov.w	r9, #0
 80128ea:	07eb      	lsls	r3, r5, #31
 80128ec:	d50a      	bpl.n	8012904 <__pow5mult+0x84>
 80128ee:	4639      	mov	r1, r7
 80128f0:	4622      	mov	r2, r4
 80128f2:	4630      	mov	r0, r6
 80128f4:	f7ff ff1e 	bl	8012734 <__multiply>
 80128f8:	4639      	mov	r1, r7
 80128fa:	4680      	mov	r8, r0
 80128fc:	4630      	mov	r0, r6
 80128fe:	f7ff fe47 	bl	8012590 <_Bfree>
 8012902:	4647      	mov	r7, r8
 8012904:	106d      	asrs	r5, r5, #1
 8012906:	d00b      	beq.n	8012920 <__pow5mult+0xa0>
 8012908:	6820      	ldr	r0, [r4, #0]
 801290a:	b938      	cbnz	r0, 801291c <__pow5mult+0x9c>
 801290c:	4622      	mov	r2, r4
 801290e:	4621      	mov	r1, r4
 8012910:	4630      	mov	r0, r6
 8012912:	f7ff ff0f 	bl	8012734 <__multiply>
 8012916:	6020      	str	r0, [r4, #0]
 8012918:	f8c0 9000 	str.w	r9, [r0]
 801291c:	4604      	mov	r4, r0
 801291e:	e7e4      	b.n	80128ea <__pow5mult+0x6a>
 8012920:	4638      	mov	r0, r7
 8012922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012926:	bf00      	nop
 8012928:	08016140 	.word	0x08016140
 801292c:	08015f62 	.word	0x08015f62
 8012930:	08015fe9 	.word	0x08015fe9

08012934 <__lshift>:
 8012934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012938:	460c      	mov	r4, r1
 801293a:	6849      	ldr	r1, [r1, #4]
 801293c:	6923      	ldr	r3, [r4, #16]
 801293e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012942:	68a3      	ldr	r3, [r4, #8]
 8012944:	4607      	mov	r7, r0
 8012946:	4691      	mov	r9, r2
 8012948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801294c:	f108 0601 	add.w	r6, r8, #1
 8012950:	42b3      	cmp	r3, r6
 8012952:	db0b      	blt.n	801296c <__lshift+0x38>
 8012954:	4638      	mov	r0, r7
 8012956:	f7ff fddb 	bl	8012510 <_Balloc>
 801295a:	4605      	mov	r5, r0
 801295c:	b948      	cbnz	r0, 8012972 <__lshift+0x3e>
 801295e:	4602      	mov	r2, r0
 8012960:	4b28      	ldr	r3, [pc, #160]	; (8012a04 <__lshift+0xd0>)
 8012962:	4829      	ldr	r0, [pc, #164]	; (8012a08 <__lshift+0xd4>)
 8012964:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012968:	f000 fb1e 	bl	8012fa8 <__assert_func>
 801296c:	3101      	adds	r1, #1
 801296e:	005b      	lsls	r3, r3, #1
 8012970:	e7ee      	b.n	8012950 <__lshift+0x1c>
 8012972:	2300      	movs	r3, #0
 8012974:	f100 0114 	add.w	r1, r0, #20
 8012978:	f100 0210 	add.w	r2, r0, #16
 801297c:	4618      	mov	r0, r3
 801297e:	4553      	cmp	r3, sl
 8012980:	db33      	blt.n	80129ea <__lshift+0xb6>
 8012982:	6920      	ldr	r0, [r4, #16]
 8012984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012988:	f104 0314 	add.w	r3, r4, #20
 801298c:	f019 091f 	ands.w	r9, r9, #31
 8012990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012994:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012998:	d02b      	beq.n	80129f2 <__lshift+0xbe>
 801299a:	f1c9 0e20 	rsb	lr, r9, #32
 801299e:	468a      	mov	sl, r1
 80129a0:	2200      	movs	r2, #0
 80129a2:	6818      	ldr	r0, [r3, #0]
 80129a4:	fa00 f009 	lsl.w	r0, r0, r9
 80129a8:	4302      	orrs	r2, r0
 80129aa:	f84a 2b04 	str.w	r2, [sl], #4
 80129ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80129b2:	459c      	cmp	ip, r3
 80129b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80129b8:	d8f3      	bhi.n	80129a2 <__lshift+0x6e>
 80129ba:	ebac 0304 	sub.w	r3, ip, r4
 80129be:	3b15      	subs	r3, #21
 80129c0:	f023 0303 	bic.w	r3, r3, #3
 80129c4:	3304      	adds	r3, #4
 80129c6:	f104 0015 	add.w	r0, r4, #21
 80129ca:	4584      	cmp	ip, r0
 80129cc:	bf38      	it	cc
 80129ce:	2304      	movcc	r3, #4
 80129d0:	50ca      	str	r2, [r1, r3]
 80129d2:	b10a      	cbz	r2, 80129d8 <__lshift+0xa4>
 80129d4:	f108 0602 	add.w	r6, r8, #2
 80129d8:	3e01      	subs	r6, #1
 80129da:	4638      	mov	r0, r7
 80129dc:	612e      	str	r6, [r5, #16]
 80129de:	4621      	mov	r1, r4
 80129e0:	f7ff fdd6 	bl	8012590 <_Bfree>
 80129e4:	4628      	mov	r0, r5
 80129e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80129ee:	3301      	adds	r3, #1
 80129f0:	e7c5      	b.n	801297e <__lshift+0x4a>
 80129f2:	3904      	subs	r1, #4
 80129f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80129f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80129fc:	459c      	cmp	ip, r3
 80129fe:	d8f9      	bhi.n	80129f4 <__lshift+0xc0>
 8012a00:	e7ea      	b.n	80129d8 <__lshift+0xa4>
 8012a02:	bf00      	nop
 8012a04:	08015fd8 	.word	0x08015fd8
 8012a08:	08015fe9 	.word	0x08015fe9

08012a0c <__mcmp>:
 8012a0c:	b530      	push	{r4, r5, lr}
 8012a0e:	6902      	ldr	r2, [r0, #16]
 8012a10:	690c      	ldr	r4, [r1, #16]
 8012a12:	1b12      	subs	r2, r2, r4
 8012a14:	d10e      	bne.n	8012a34 <__mcmp+0x28>
 8012a16:	f100 0314 	add.w	r3, r0, #20
 8012a1a:	3114      	adds	r1, #20
 8012a1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012a20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012a24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012a28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012a2c:	42a5      	cmp	r5, r4
 8012a2e:	d003      	beq.n	8012a38 <__mcmp+0x2c>
 8012a30:	d305      	bcc.n	8012a3e <__mcmp+0x32>
 8012a32:	2201      	movs	r2, #1
 8012a34:	4610      	mov	r0, r2
 8012a36:	bd30      	pop	{r4, r5, pc}
 8012a38:	4283      	cmp	r3, r0
 8012a3a:	d3f3      	bcc.n	8012a24 <__mcmp+0x18>
 8012a3c:	e7fa      	b.n	8012a34 <__mcmp+0x28>
 8012a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a42:	e7f7      	b.n	8012a34 <__mcmp+0x28>

08012a44 <__mdiff>:
 8012a44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a48:	460c      	mov	r4, r1
 8012a4a:	4606      	mov	r6, r0
 8012a4c:	4611      	mov	r1, r2
 8012a4e:	4620      	mov	r0, r4
 8012a50:	4617      	mov	r7, r2
 8012a52:	f7ff ffdb 	bl	8012a0c <__mcmp>
 8012a56:	1e05      	subs	r5, r0, #0
 8012a58:	d110      	bne.n	8012a7c <__mdiff+0x38>
 8012a5a:	4629      	mov	r1, r5
 8012a5c:	4630      	mov	r0, r6
 8012a5e:	f7ff fd57 	bl	8012510 <_Balloc>
 8012a62:	b930      	cbnz	r0, 8012a72 <__mdiff+0x2e>
 8012a64:	4b39      	ldr	r3, [pc, #228]	; (8012b4c <__mdiff+0x108>)
 8012a66:	4602      	mov	r2, r0
 8012a68:	f240 2132 	movw	r1, #562	; 0x232
 8012a6c:	4838      	ldr	r0, [pc, #224]	; (8012b50 <__mdiff+0x10c>)
 8012a6e:	f000 fa9b 	bl	8012fa8 <__assert_func>
 8012a72:	2301      	movs	r3, #1
 8012a74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a7c:	bfa4      	itt	ge
 8012a7e:	463b      	movge	r3, r7
 8012a80:	4627      	movge	r7, r4
 8012a82:	4630      	mov	r0, r6
 8012a84:	6879      	ldr	r1, [r7, #4]
 8012a86:	bfa6      	itte	ge
 8012a88:	461c      	movge	r4, r3
 8012a8a:	2500      	movge	r5, #0
 8012a8c:	2501      	movlt	r5, #1
 8012a8e:	f7ff fd3f 	bl	8012510 <_Balloc>
 8012a92:	b920      	cbnz	r0, 8012a9e <__mdiff+0x5a>
 8012a94:	4b2d      	ldr	r3, [pc, #180]	; (8012b4c <__mdiff+0x108>)
 8012a96:	4602      	mov	r2, r0
 8012a98:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012a9c:	e7e6      	b.n	8012a6c <__mdiff+0x28>
 8012a9e:	693e      	ldr	r6, [r7, #16]
 8012aa0:	60c5      	str	r5, [r0, #12]
 8012aa2:	6925      	ldr	r5, [r4, #16]
 8012aa4:	f107 0114 	add.w	r1, r7, #20
 8012aa8:	f104 0914 	add.w	r9, r4, #20
 8012aac:	f100 0e14 	add.w	lr, r0, #20
 8012ab0:	f107 0210 	add.w	r2, r7, #16
 8012ab4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012ab8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012abc:	46f2      	mov	sl, lr
 8012abe:	2700      	movs	r7, #0
 8012ac0:	f859 3b04 	ldr.w	r3, [r9], #4
 8012ac4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012ac8:	fa1f f883 	uxth.w	r8, r3
 8012acc:	fa17 f78b 	uxtah	r7, r7, fp
 8012ad0:	0c1b      	lsrs	r3, r3, #16
 8012ad2:	eba7 0808 	sub.w	r8, r7, r8
 8012ad6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012ada:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012ade:	fa1f f888 	uxth.w	r8, r8
 8012ae2:	141f      	asrs	r7, r3, #16
 8012ae4:	454d      	cmp	r5, r9
 8012ae6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012aea:	f84a 3b04 	str.w	r3, [sl], #4
 8012aee:	d8e7      	bhi.n	8012ac0 <__mdiff+0x7c>
 8012af0:	1b2b      	subs	r3, r5, r4
 8012af2:	3b15      	subs	r3, #21
 8012af4:	f023 0303 	bic.w	r3, r3, #3
 8012af8:	3304      	adds	r3, #4
 8012afa:	3415      	adds	r4, #21
 8012afc:	42a5      	cmp	r5, r4
 8012afe:	bf38      	it	cc
 8012b00:	2304      	movcc	r3, #4
 8012b02:	4419      	add	r1, r3
 8012b04:	4473      	add	r3, lr
 8012b06:	469e      	mov	lr, r3
 8012b08:	460d      	mov	r5, r1
 8012b0a:	4565      	cmp	r5, ip
 8012b0c:	d30e      	bcc.n	8012b2c <__mdiff+0xe8>
 8012b0e:	f10c 0203 	add.w	r2, ip, #3
 8012b12:	1a52      	subs	r2, r2, r1
 8012b14:	f022 0203 	bic.w	r2, r2, #3
 8012b18:	3903      	subs	r1, #3
 8012b1a:	458c      	cmp	ip, r1
 8012b1c:	bf38      	it	cc
 8012b1e:	2200      	movcc	r2, #0
 8012b20:	441a      	add	r2, r3
 8012b22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012b26:	b17b      	cbz	r3, 8012b48 <__mdiff+0x104>
 8012b28:	6106      	str	r6, [r0, #16]
 8012b2a:	e7a5      	b.n	8012a78 <__mdiff+0x34>
 8012b2c:	f855 8b04 	ldr.w	r8, [r5], #4
 8012b30:	fa17 f488 	uxtah	r4, r7, r8
 8012b34:	1422      	asrs	r2, r4, #16
 8012b36:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012b3a:	b2a4      	uxth	r4, r4
 8012b3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012b40:	f84e 4b04 	str.w	r4, [lr], #4
 8012b44:	1417      	asrs	r7, r2, #16
 8012b46:	e7e0      	b.n	8012b0a <__mdiff+0xc6>
 8012b48:	3e01      	subs	r6, #1
 8012b4a:	e7ea      	b.n	8012b22 <__mdiff+0xde>
 8012b4c:	08015fd8 	.word	0x08015fd8
 8012b50:	08015fe9 	.word	0x08015fe9

08012b54 <__d2b>:
 8012b54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012b58:	4689      	mov	r9, r1
 8012b5a:	2101      	movs	r1, #1
 8012b5c:	ec57 6b10 	vmov	r6, r7, d0
 8012b60:	4690      	mov	r8, r2
 8012b62:	f7ff fcd5 	bl	8012510 <_Balloc>
 8012b66:	4604      	mov	r4, r0
 8012b68:	b930      	cbnz	r0, 8012b78 <__d2b+0x24>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	4b25      	ldr	r3, [pc, #148]	; (8012c04 <__d2b+0xb0>)
 8012b6e:	4826      	ldr	r0, [pc, #152]	; (8012c08 <__d2b+0xb4>)
 8012b70:	f240 310a 	movw	r1, #778	; 0x30a
 8012b74:	f000 fa18 	bl	8012fa8 <__assert_func>
 8012b78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012b7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012b80:	bb35      	cbnz	r5, 8012bd0 <__d2b+0x7c>
 8012b82:	2e00      	cmp	r6, #0
 8012b84:	9301      	str	r3, [sp, #4]
 8012b86:	d028      	beq.n	8012bda <__d2b+0x86>
 8012b88:	4668      	mov	r0, sp
 8012b8a:	9600      	str	r6, [sp, #0]
 8012b8c:	f7ff fd8c 	bl	80126a8 <__lo0bits>
 8012b90:	9900      	ldr	r1, [sp, #0]
 8012b92:	b300      	cbz	r0, 8012bd6 <__d2b+0x82>
 8012b94:	9a01      	ldr	r2, [sp, #4]
 8012b96:	f1c0 0320 	rsb	r3, r0, #32
 8012b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8012b9e:	430b      	orrs	r3, r1
 8012ba0:	40c2      	lsrs	r2, r0
 8012ba2:	6163      	str	r3, [r4, #20]
 8012ba4:	9201      	str	r2, [sp, #4]
 8012ba6:	9b01      	ldr	r3, [sp, #4]
 8012ba8:	61a3      	str	r3, [r4, #24]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	bf14      	ite	ne
 8012bae:	2202      	movne	r2, #2
 8012bb0:	2201      	moveq	r2, #1
 8012bb2:	6122      	str	r2, [r4, #16]
 8012bb4:	b1d5      	cbz	r5, 8012bec <__d2b+0x98>
 8012bb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012bba:	4405      	add	r5, r0
 8012bbc:	f8c9 5000 	str.w	r5, [r9]
 8012bc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012bc4:	f8c8 0000 	str.w	r0, [r8]
 8012bc8:	4620      	mov	r0, r4
 8012bca:	b003      	add	sp, #12
 8012bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012bd4:	e7d5      	b.n	8012b82 <__d2b+0x2e>
 8012bd6:	6161      	str	r1, [r4, #20]
 8012bd8:	e7e5      	b.n	8012ba6 <__d2b+0x52>
 8012bda:	a801      	add	r0, sp, #4
 8012bdc:	f7ff fd64 	bl	80126a8 <__lo0bits>
 8012be0:	9b01      	ldr	r3, [sp, #4]
 8012be2:	6163      	str	r3, [r4, #20]
 8012be4:	2201      	movs	r2, #1
 8012be6:	6122      	str	r2, [r4, #16]
 8012be8:	3020      	adds	r0, #32
 8012bea:	e7e3      	b.n	8012bb4 <__d2b+0x60>
 8012bec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012bf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012bf4:	f8c9 0000 	str.w	r0, [r9]
 8012bf8:	6918      	ldr	r0, [r3, #16]
 8012bfa:	f7ff fd35 	bl	8012668 <__hi0bits>
 8012bfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012c02:	e7df      	b.n	8012bc4 <__d2b+0x70>
 8012c04:	08015fd8 	.word	0x08015fd8
 8012c08:	08015fe9 	.word	0x08015fe9

08012c0c <_calloc_r>:
 8012c0c:	b513      	push	{r0, r1, r4, lr}
 8012c0e:	434a      	muls	r2, r1
 8012c10:	4611      	mov	r1, r2
 8012c12:	9201      	str	r2, [sp, #4]
 8012c14:	f7fd fefa 	bl	8010a0c <_malloc_r>
 8012c18:	4604      	mov	r4, r0
 8012c1a:	b118      	cbz	r0, 8012c24 <_calloc_r+0x18>
 8012c1c:	9a01      	ldr	r2, [sp, #4]
 8012c1e:	2100      	movs	r1, #0
 8012c20:	f7fd feeb 	bl	80109fa <memset>
 8012c24:	4620      	mov	r0, r4
 8012c26:	b002      	add	sp, #8
 8012c28:	bd10      	pop	{r4, pc}
	...

08012c2c <_free_r>:
 8012c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c2e:	2900      	cmp	r1, #0
 8012c30:	d048      	beq.n	8012cc4 <_free_r+0x98>
 8012c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c36:	9001      	str	r0, [sp, #4]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	f1a1 0404 	sub.w	r4, r1, #4
 8012c3e:	bfb8      	it	lt
 8012c40:	18e4      	addlt	r4, r4, r3
 8012c42:	f7ff fc59 	bl	80124f8 <__malloc_lock>
 8012c46:	4a20      	ldr	r2, [pc, #128]	; (8012cc8 <_free_r+0x9c>)
 8012c48:	9801      	ldr	r0, [sp, #4]
 8012c4a:	6813      	ldr	r3, [r2, #0]
 8012c4c:	4615      	mov	r5, r2
 8012c4e:	b933      	cbnz	r3, 8012c5e <_free_r+0x32>
 8012c50:	6063      	str	r3, [r4, #4]
 8012c52:	6014      	str	r4, [r2, #0]
 8012c54:	b003      	add	sp, #12
 8012c56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c5a:	f7ff bc53 	b.w	8012504 <__malloc_unlock>
 8012c5e:	42a3      	cmp	r3, r4
 8012c60:	d90b      	bls.n	8012c7a <_free_r+0x4e>
 8012c62:	6821      	ldr	r1, [r4, #0]
 8012c64:	1862      	adds	r2, r4, r1
 8012c66:	4293      	cmp	r3, r2
 8012c68:	bf04      	itt	eq
 8012c6a:	681a      	ldreq	r2, [r3, #0]
 8012c6c:	685b      	ldreq	r3, [r3, #4]
 8012c6e:	6063      	str	r3, [r4, #4]
 8012c70:	bf04      	itt	eq
 8012c72:	1852      	addeq	r2, r2, r1
 8012c74:	6022      	streq	r2, [r4, #0]
 8012c76:	602c      	str	r4, [r5, #0]
 8012c78:	e7ec      	b.n	8012c54 <_free_r+0x28>
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	685b      	ldr	r3, [r3, #4]
 8012c7e:	b10b      	cbz	r3, 8012c84 <_free_r+0x58>
 8012c80:	42a3      	cmp	r3, r4
 8012c82:	d9fa      	bls.n	8012c7a <_free_r+0x4e>
 8012c84:	6811      	ldr	r1, [r2, #0]
 8012c86:	1855      	adds	r5, r2, r1
 8012c88:	42a5      	cmp	r5, r4
 8012c8a:	d10b      	bne.n	8012ca4 <_free_r+0x78>
 8012c8c:	6824      	ldr	r4, [r4, #0]
 8012c8e:	4421      	add	r1, r4
 8012c90:	1854      	adds	r4, r2, r1
 8012c92:	42a3      	cmp	r3, r4
 8012c94:	6011      	str	r1, [r2, #0]
 8012c96:	d1dd      	bne.n	8012c54 <_free_r+0x28>
 8012c98:	681c      	ldr	r4, [r3, #0]
 8012c9a:	685b      	ldr	r3, [r3, #4]
 8012c9c:	6053      	str	r3, [r2, #4]
 8012c9e:	4421      	add	r1, r4
 8012ca0:	6011      	str	r1, [r2, #0]
 8012ca2:	e7d7      	b.n	8012c54 <_free_r+0x28>
 8012ca4:	d902      	bls.n	8012cac <_free_r+0x80>
 8012ca6:	230c      	movs	r3, #12
 8012ca8:	6003      	str	r3, [r0, #0]
 8012caa:	e7d3      	b.n	8012c54 <_free_r+0x28>
 8012cac:	6825      	ldr	r5, [r4, #0]
 8012cae:	1961      	adds	r1, r4, r5
 8012cb0:	428b      	cmp	r3, r1
 8012cb2:	bf04      	itt	eq
 8012cb4:	6819      	ldreq	r1, [r3, #0]
 8012cb6:	685b      	ldreq	r3, [r3, #4]
 8012cb8:	6063      	str	r3, [r4, #4]
 8012cba:	bf04      	itt	eq
 8012cbc:	1949      	addeq	r1, r1, r5
 8012cbe:	6021      	streq	r1, [r4, #0]
 8012cc0:	6054      	str	r4, [r2, #4]
 8012cc2:	e7c7      	b.n	8012c54 <_free_r+0x28>
 8012cc4:	b003      	add	sp, #12
 8012cc6:	bd30      	pop	{r4, r5, pc}
 8012cc8:	20005604 	.word	0x20005604

08012ccc <__ssputs_r>:
 8012ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cd0:	688e      	ldr	r6, [r1, #8]
 8012cd2:	429e      	cmp	r6, r3
 8012cd4:	4682      	mov	sl, r0
 8012cd6:	460c      	mov	r4, r1
 8012cd8:	4690      	mov	r8, r2
 8012cda:	461f      	mov	r7, r3
 8012cdc:	d838      	bhi.n	8012d50 <__ssputs_r+0x84>
 8012cde:	898a      	ldrh	r2, [r1, #12]
 8012ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012ce4:	d032      	beq.n	8012d4c <__ssputs_r+0x80>
 8012ce6:	6825      	ldr	r5, [r4, #0]
 8012ce8:	6909      	ldr	r1, [r1, #16]
 8012cea:	eba5 0901 	sub.w	r9, r5, r1
 8012cee:	6965      	ldr	r5, [r4, #20]
 8012cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	444b      	add	r3, r9
 8012cfc:	106d      	asrs	r5, r5, #1
 8012cfe:	429d      	cmp	r5, r3
 8012d00:	bf38      	it	cc
 8012d02:	461d      	movcc	r5, r3
 8012d04:	0553      	lsls	r3, r2, #21
 8012d06:	d531      	bpl.n	8012d6c <__ssputs_r+0xa0>
 8012d08:	4629      	mov	r1, r5
 8012d0a:	f7fd fe7f 	bl	8010a0c <_malloc_r>
 8012d0e:	4606      	mov	r6, r0
 8012d10:	b950      	cbnz	r0, 8012d28 <__ssputs_r+0x5c>
 8012d12:	230c      	movs	r3, #12
 8012d14:	f8ca 3000 	str.w	r3, [sl]
 8012d18:	89a3      	ldrh	r3, [r4, #12]
 8012d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d1e:	81a3      	strh	r3, [r4, #12]
 8012d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d28:	6921      	ldr	r1, [r4, #16]
 8012d2a:	464a      	mov	r2, r9
 8012d2c:	f7fd fe57 	bl	80109de <memcpy>
 8012d30:	89a3      	ldrh	r3, [r4, #12]
 8012d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d3a:	81a3      	strh	r3, [r4, #12]
 8012d3c:	6126      	str	r6, [r4, #16]
 8012d3e:	6165      	str	r5, [r4, #20]
 8012d40:	444e      	add	r6, r9
 8012d42:	eba5 0509 	sub.w	r5, r5, r9
 8012d46:	6026      	str	r6, [r4, #0]
 8012d48:	60a5      	str	r5, [r4, #8]
 8012d4a:	463e      	mov	r6, r7
 8012d4c:	42be      	cmp	r6, r7
 8012d4e:	d900      	bls.n	8012d52 <__ssputs_r+0x86>
 8012d50:	463e      	mov	r6, r7
 8012d52:	4632      	mov	r2, r6
 8012d54:	6820      	ldr	r0, [r4, #0]
 8012d56:	4641      	mov	r1, r8
 8012d58:	f000 f968 	bl	801302c <memmove>
 8012d5c:	68a3      	ldr	r3, [r4, #8]
 8012d5e:	6822      	ldr	r2, [r4, #0]
 8012d60:	1b9b      	subs	r3, r3, r6
 8012d62:	4432      	add	r2, r6
 8012d64:	60a3      	str	r3, [r4, #8]
 8012d66:	6022      	str	r2, [r4, #0]
 8012d68:	2000      	movs	r0, #0
 8012d6a:	e7db      	b.n	8012d24 <__ssputs_r+0x58>
 8012d6c:	462a      	mov	r2, r5
 8012d6e:	f000 f977 	bl	8013060 <_realloc_r>
 8012d72:	4606      	mov	r6, r0
 8012d74:	2800      	cmp	r0, #0
 8012d76:	d1e1      	bne.n	8012d3c <__ssputs_r+0x70>
 8012d78:	6921      	ldr	r1, [r4, #16]
 8012d7a:	4650      	mov	r0, sl
 8012d7c:	f7ff ff56 	bl	8012c2c <_free_r>
 8012d80:	e7c7      	b.n	8012d12 <__ssputs_r+0x46>
	...

08012d84 <_svfiprintf_r>:
 8012d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d88:	4698      	mov	r8, r3
 8012d8a:	898b      	ldrh	r3, [r1, #12]
 8012d8c:	061b      	lsls	r3, r3, #24
 8012d8e:	b09d      	sub	sp, #116	; 0x74
 8012d90:	4607      	mov	r7, r0
 8012d92:	460d      	mov	r5, r1
 8012d94:	4614      	mov	r4, r2
 8012d96:	d50e      	bpl.n	8012db6 <_svfiprintf_r+0x32>
 8012d98:	690b      	ldr	r3, [r1, #16]
 8012d9a:	b963      	cbnz	r3, 8012db6 <_svfiprintf_r+0x32>
 8012d9c:	2140      	movs	r1, #64	; 0x40
 8012d9e:	f7fd fe35 	bl	8010a0c <_malloc_r>
 8012da2:	6028      	str	r0, [r5, #0]
 8012da4:	6128      	str	r0, [r5, #16]
 8012da6:	b920      	cbnz	r0, 8012db2 <_svfiprintf_r+0x2e>
 8012da8:	230c      	movs	r3, #12
 8012daa:	603b      	str	r3, [r7, #0]
 8012dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012db0:	e0d1      	b.n	8012f56 <_svfiprintf_r+0x1d2>
 8012db2:	2340      	movs	r3, #64	; 0x40
 8012db4:	616b      	str	r3, [r5, #20]
 8012db6:	2300      	movs	r3, #0
 8012db8:	9309      	str	r3, [sp, #36]	; 0x24
 8012dba:	2320      	movs	r3, #32
 8012dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8012dc4:	2330      	movs	r3, #48	; 0x30
 8012dc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012f70 <_svfiprintf_r+0x1ec>
 8012dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012dce:	f04f 0901 	mov.w	r9, #1
 8012dd2:	4623      	mov	r3, r4
 8012dd4:	469a      	mov	sl, r3
 8012dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dda:	b10a      	cbz	r2, 8012de0 <_svfiprintf_r+0x5c>
 8012ddc:	2a25      	cmp	r2, #37	; 0x25
 8012dde:	d1f9      	bne.n	8012dd4 <_svfiprintf_r+0x50>
 8012de0:	ebba 0b04 	subs.w	fp, sl, r4
 8012de4:	d00b      	beq.n	8012dfe <_svfiprintf_r+0x7a>
 8012de6:	465b      	mov	r3, fp
 8012de8:	4622      	mov	r2, r4
 8012dea:	4629      	mov	r1, r5
 8012dec:	4638      	mov	r0, r7
 8012dee:	f7ff ff6d 	bl	8012ccc <__ssputs_r>
 8012df2:	3001      	adds	r0, #1
 8012df4:	f000 80aa 	beq.w	8012f4c <_svfiprintf_r+0x1c8>
 8012df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dfa:	445a      	add	r2, fp
 8012dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8012dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	f000 80a2 	beq.w	8012f4c <_svfiprintf_r+0x1c8>
 8012e08:	2300      	movs	r3, #0
 8012e0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e12:	f10a 0a01 	add.w	sl, sl, #1
 8012e16:	9304      	str	r3, [sp, #16]
 8012e18:	9307      	str	r3, [sp, #28]
 8012e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8012e20:	4654      	mov	r4, sl
 8012e22:	2205      	movs	r2, #5
 8012e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e28:	4851      	ldr	r0, [pc, #324]	; (8012f70 <_svfiprintf_r+0x1ec>)
 8012e2a:	f7ed f9d9 	bl	80001e0 <memchr>
 8012e2e:	9a04      	ldr	r2, [sp, #16]
 8012e30:	b9d8      	cbnz	r0, 8012e6a <_svfiprintf_r+0xe6>
 8012e32:	06d0      	lsls	r0, r2, #27
 8012e34:	bf44      	itt	mi
 8012e36:	2320      	movmi	r3, #32
 8012e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e3c:	0711      	lsls	r1, r2, #28
 8012e3e:	bf44      	itt	mi
 8012e40:	232b      	movmi	r3, #43	; 0x2b
 8012e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e46:	f89a 3000 	ldrb.w	r3, [sl]
 8012e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8012e4c:	d015      	beq.n	8012e7a <_svfiprintf_r+0xf6>
 8012e4e:	9a07      	ldr	r2, [sp, #28]
 8012e50:	4654      	mov	r4, sl
 8012e52:	2000      	movs	r0, #0
 8012e54:	f04f 0c0a 	mov.w	ip, #10
 8012e58:	4621      	mov	r1, r4
 8012e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e5e:	3b30      	subs	r3, #48	; 0x30
 8012e60:	2b09      	cmp	r3, #9
 8012e62:	d94e      	bls.n	8012f02 <_svfiprintf_r+0x17e>
 8012e64:	b1b0      	cbz	r0, 8012e94 <_svfiprintf_r+0x110>
 8012e66:	9207      	str	r2, [sp, #28]
 8012e68:	e014      	b.n	8012e94 <_svfiprintf_r+0x110>
 8012e6a:	eba0 0308 	sub.w	r3, r0, r8
 8012e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8012e72:	4313      	orrs	r3, r2
 8012e74:	9304      	str	r3, [sp, #16]
 8012e76:	46a2      	mov	sl, r4
 8012e78:	e7d2      	b.n	8012e20 <_svfiprintf_r+0x9c>
 8012e7a:	9b03      	ldr	r3, [sp, #12]
 8012e7c:	1d19      	adds	r1, r3, #4
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	9103      	str	r1, [sp, #12]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	bfbb      	ittet	lt
 8012e86:	425b      	neglt	r3, r3
 8012e88:	f042 0202 	orrlt.w	r2, r2, #2
 8012e8c:	9307      	strge	r3, [sp, #28]
 8012e8e:	9307      	strlt	r3, [sp, #28]
 8012e90:	bfb8      	it	lt
 8012e92:	9204      	strlt	r2, [sp, #16]
 8012e94:	7823      	ldrb	r3, [r4, #0]
 8012e96:	2b2e      	cmp	r3, #46	; 0x2e
 8012e98:	d10c      	bne.n	8012eb4 <_svfiprintf_r+0x130>
 8012e9a:	7863      	ldrb	r3, [r4, #1]
 8012e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8012e9e:	d135      	bne.n	8012f0c <_svfiprintf_r+0x188>
 8012ea0:	9b03      	ldr	r3, [sp, #12]
 8012ea2:	1d1a      	adds	r2, r3, #4
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	9203      	str	r2, [sp, #12]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	bfb8      	it	lt
 8012eac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012eb0:	3402      	adds	r4, #2
 8012eb2:	9305      	str	r3, [sp, #20]
 8012eb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012f80 <_svfiprintf_r+0x1fc>
 8012eb8:	7821      	ldrb	r1, [r4, #0]
 8012eba:	2203      	movs	r2, #3
 8012ebc:	4650      	mov	r0, sl
 8012ebe:	f7ed f98f 	bl	80001e0 <memchr>
 8012ec2:	b140      	cbz	r0, 8012ed6 <_svfiprintf_r+0x152>
 8012ec4:	2340      	movs	r3, #64	; 0x40
 8012ec6:	eba0 000a 	sub.w	r0, r0, sl
 8012eca:	fa03 f000 	lsl.w	r0, r3, r0
 8012ece:	9b04      	ldr	r3, [sp, #16]
 8012ed0:	4303      	orrs	r3, r0
 8012ed2:	3401      	adds	r4, #1
 8012ed4:	9304      	str	r3, [sp, #16]
 8012ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eda:	4826      	ldr	r0, [pc, #152]	; (8012f74 <_svfiprintf_r+0x1f0>)
 8012edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ee0:	2206      	movs	r2, #6
 8012ee2:	f7ed f97d 	bl	80001e0 <memchr>
 8012ee6:	2800      	cmp	r0, #0
 8012ee8:	d038      	beq.n	8012f5c <_svfiprintf_r+0x1d8>
 8012eea:	4b23      	ldr	r3, [pc, #140]	; (8012f78 <_svfiprintf_r+0x1f4>)
 8012eec:	bb1b      	cbnz	r3, 8012f36 <_svfiprintf_r+0x1b2>
 8012eee:	9b03      	ldr	r3, [sp, #12]
 8012ef0:	3307      	adds	r3, #7
 8012ef2:	f023 0307 	bic.w	r3, r3, #7
 8012ef6:	3308      	adds	r3, #8
 8012ef8:	9303      	str	r3, [sp, #12]
 8012efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012efc:	4433      	add	r3, r6
 8012efe:	9309      	str	r3, [sp, #36]	; 0x24
 8012f00:	e767      	b.n	8012dd2 <_svfiprintf_r+0x4e>
 8012f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f06:	460c      	mov	r4, r1
 8012f08:	2001      	movs	r0, #1
 8012f0a:	e7a5      	b.n	8012e58 <_svfiprintf_r+0xd4>
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	3401      	adds	r4, #1
 8012f10:	9305      	str	r3, [sp, #20]
 8012f12:	4619      	mov	r1, r3
 8012f14:	f04f 0c0a 	mov.w	ip, #10
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f1e:	3a30      	subs	r2, #48	; 0x30
 8012f20:	2a09      	cmp	r2, #9
 8012f22:	d903      	bls.n	8012f2c <_svfiprintf_r+0x1a8>
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d0c5      	beq.n	8012eb4 <_svfiprintf_r+0x130>
 8012f28:	9105      	str	r1, [sp, #20]
 8012f2a:	e7c3      	b.n	8012eb4 <_svfiprintf_r+0x130>
 8012f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f30:	4604      	mov	r4, r0
 8012f32:	2301      	movs	r3, #1
 8012f34:	e7f0      	b.n	8012f18 <_svfiprintf_r+0x194>
 8012f36:	ab03      	add	r3, sp, #12
 8012f38:	9300      	str	r3, [sp, #0]
 8012f3a:	462a      	mov	r2, r5
 8012f3c:	4b0f      	ldr	r3, [pc, #60]	; (8012f7c <_svfiprintf_r+0x1f8>)
 8012f3e:	a904      	add	r1, sp, #16
 8012f40:	4638      	mov	r0, r7
 8012f42:	f7fd fe5d 	bl	8010c00 <_printf_float>
 8012f46:	1c42      	adds	r2, r0, #1
 8012f48:	4606      	mov	r6, r0
 8012f4a:	d1d6      	bne.n	8012efa <_svfiprintf_r+0x176>
 8012f4c:	89ab      	ldrh	r3, [r5, #12]
 8012f4e:	065b      	lsls	r3, r3, #25
 8012f50:	f53f af2c 	bmi.w	8012dac <_svfiprintf_r+0x28>
 8012f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f56:	b01d      	add	sp, #116	; 0x74
 8012f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f5c:	ab03      	add	r3, sp, #12
 8012f5e:	9300      	str	r3, [sp, #0]
 8012f60:	462a      	mov	r2, r5
 8012f62:	4b06      	ldr	r3, [pc, #24]	; (8012f7c <_svfiprintf_r+0x1f8>)
 8012f64:	a904      	add	r1, sp, #16
 8012f66:	4638      	mov	r0, r7
 8012f68:	f7fe f8ee 	bl	8011148 <_printf_i>
 8012f6c:	e7eb      	b.n	8012f46 <_svfiprintf_r+0x1c2>
 8012f6e:	bf00      	nop
 8012f70:	0801614c 	.word	0x0801614c
 8012f74:	08016156 	.word	0x08016156
 8012f78:	08010c01 	.word	0x08010c01
 8012f7c:	08012ccd 	.word	0x08012ccd
 8012f80:	08016152 	.word	0x08016152

08012f84 <_read_r>:
 8012f84:	b538      	push	{r3, r4, r5, lr}
 8012f86:	4d07      	ldr	r5, [pc, #28]	; (8012fa4 <_read_r+0x20>)
 8012f88:	4604      	mov	r4, r0
 8012f8a:	4608      	mov	r0, r1
 8012f8c:	4611      	mov	r1, r2
 8012f8e:	2200      	movs	r2, #0
 8012f90:	602a      	str	r2, [r5, #0]
 8012f92:	461a      	mov	r2, r3
 8012f94:	f7f0 fd78 	bl	8003a88 <_read>
 8012f98:	1c43      	adds	r3, r0, #1
 8012f9a:	d102      	bne.n	8012fa2 <_read_r+0x1e>
 8012f9c:	682b      	ldr	r3, [r5, #0]
 8012f9e:	b103      	cbz	r3, 8012fa2 <_read_r+0x1e>
 8012fa0:	6023      	str	r3, [r4, #0]
 8012fa2:	bd38      	pop	{r3, r4, r5, pc}
 8012fa4:	2000b66c 	.word	0x2000b66c

08012fa8 <__assert_func>:
 8012fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012faa:	4614      	mov	r4, r2
 8012fac:	461a      	mov	r2, r3
 8012fae:	4b09      	ldr	r3, [pc, #36]	; (8012fd4 <__assert_func+0x2c>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	4605      	mov	r5, r0
 8012fb4:	68d8      	ldr	r0, [r3, #12]
 8012fb6:	b14c      	cbz	r4, 8012fcc <__assert_func+0x24>
 8012fb8:	4b07      	ldr	r3, [pc, #28]	; (8012fd8 <__assert_func+0x30>)
 8012fba:	9100      	str	r1, [sp, #0]
 8012fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fc0:	4906      	ldr	r1, [pc, #24]	; (8012fdc <__assert_func+0x34>)
 8012fc2:	462b      	mov	r3, r5
 8012fc4:	f000 f80e 	bl	8012fe4 <fiprintf>
 8012fc8:	f000 fa98 	bl	80134fc <abort>
 8012fcc:	4b04      	ldr	r3, [pc, #16]	; (8012fe0 <__assert_func+0x38>)
 8012fce:	461c      	mov	r4, r3
 8012fd0:	e7f3      	b.n	8012fba <__assert_func+0x12>
 8012fd2:	bf00      	nop
 8012fd4:	20000184 	.word	0x20000184
 8012fd8:	0801615d 	.word	0x0801615d
 8012fdc:	0801616a 	.word	0x0801616a
 8012fe0:	08016198 	.word	0x08016198

08012fe4 <fiprintf>:
 8012fe4:	b40e      	push	{r1, r2, r3}
 8012fe6:	b503      	push	{r0, r1, lr}
 8012fe8:	4601      	mov	r1, r0
 8012fea:	ab03      	add	r3, sp, #12
 8012fec:	4805      	ldr	r0, [pc, #20]	; (8013004 <fiprintf+0x20>)
 8012fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ff2:	6800      	ldr	r0, [r0, #0]
 8012ff4:	9301      	str	r3, [sp, #4]
 8012ff6:	f000 f883 	bl	8013100 <_vfiprintf_r>
 8012ffa:	b002      	add	sp, #8
 8012ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013000:	b003      	add	sp, #12
 8013002:	4770      	bx	lr
 8013004:	20000184 	.word	0x20000184

08013008 <__ascii_mbtowc>:
 8013008:	b082      	sub	sp, #8
 801300a:	b901      	cbnz	r1, 801300e <__ascii_mbtowc+0x6>
 801300c:	a901      	add	r1, sp, #4
 801300e:	b142      	cbz	r2, 8013022 <__ascii_mbtowc+0x1a>
 8013010:	b14b      	cbz	r3, 8013026 <__ascii_mbtowc+0x1e>
 8013012:	7813      	ldrb	r3, [r2, #0]
 8013014:	600b      	str	r3, [r1, #0]
 8013016:	7812      	ldrb	r2, [r2, #0]
 8013018:	1e10      	subs	r0, r2, #0
 801301a:	bf18      	it	ne
 801301c:	2001      	movne	r0, #1
 801301e:	b002      	add	sp, #8
 8013020:	4770      	bx	lr
 8013022:	4610      	mov	r0, r2
 8013024:	e7fb      	b.n	801301e <__ascii_mbtowc+0x16>
 8013026:	f06f 0001 	mvn.w	r0, #1
 801302a:	e7f8      	b.n	801301e <__ascii_mbtowc+0x16>

0801302c <memmove>:
 801302c:	4288      	cmp	r0, r1
 801302e:	b510      	push	{r4, lr}
 8013030:	eb01 0402 	add.w	r4, r1, r2
 8013034:	d902      	bls.n	801303c <memmove+0x10>
 8013036:	4284      	cmp	r4, r0
 8013038:	4623      	mov	r3, r4
 801303a:	d807      	bhi.n	801304c <memmove+0x20>
 801303c:	1e43      	subs	r3, r0, #1
 801303e:	42a1      	cmp	r1, r4
 8013040:	d008      	beq.n	8013054 <memmove+0x28>
 8013042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013046:	f803 2f01 	strb.w	r2, [r3, #1]!
 801304a:	e7f8      	b.n	801303e <memmove+0x12>
 801304c:	4402      	add	r2, r0
 801304e:	4601      	mov	r1, r0
 8013050:	428a      	cmp	r2, r1
 8013052:	d100      	bne.n	8013056 <memmove+0x2a>
 8013054:	bd10      	pop	{r4, pc}
 8013056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801305a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801305e:	e7f7      	b.n	8013050 <memmove+0x24>

08013060 <_realloc_r>:
 8013060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013062:	4607      	mov	r7, r0
 8013064:	4614      	mov	r4, r2
 8013066:	460e      	mov	r6, r1
 8013068:	b921      	cbnz	r1, 8013074 <_realloc_r+0x14>
 801306a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801306e:	4611      	mov	r1, r2
 8013070:	f7fd bccc 	b.w	8010a0c <_malloc_r>
 8013074:	b922      	cbnz	r2, 8013080 <_realloc_r+0x20>
 8013076:	f7ff fdd9 	bl	8012c2c <_free_r>
 801307a:	4625      	mov	r5, r4
 801307c:	4628      	mov	r0, r5
 801307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013080:	f000 faa8 	bl	80135d4 <_malloc_usable_size_r>
 8013084:	42a0      	cmp	r0, r4
 8013086:	d20f      	bcs.n	80130a8 <_realloc_r+0x48>
 8013088:	4621      	mov	r1, r4
 801308a:	4638      	mov	r0, r7
 801308c:	f7fd fcbe 	bl	8010a0c <_malloc_r>
 8013090:	4605      	mov	r5, r0
 8013092:	2800      	cmp	r0, #0
 8013094:	d0f2      	beq.n	801307c <_realloc_r+0x1c>
 8013096:	4631      	mov	r1, r6
 8013098:	4622      	mov	r2, r4
 801309a:	f7fd fca0 	bl	80109de <memcpy>
 801309e:	4631      	mov	r1, r6
 80130a0:	4638      	mov	r0, r7
 80130a2:	f7ff fdc3 	bl	8012c2c <_free_r>
 80130a6:	e7e9      	b.n	801307c <_realloc_r+0x1c>
 80130a8:	4635      	mov	r5, r6
 80130aa:	e7e7      	b.n	801307c <_realloc_r+0x1c>

080130ac <__sfputc_r>:
 80130ac:	6893      	ldr	r3, [r2, #8]
 80130ae:	3b01      	subs	r3, #1
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	b410      	push	{r4}
 80130b4:	6093      	str	r3, [r2, #8]
 80130b6:	da08      	bge.n	80130ca <__sfputc_r+0x1e>
 80130b8:	6994      	ldr	r4, [r2, #24]
 80130ba:	42a3      	cmp	r3, r4
 80130bc:	db01      	blt.n	80130c2 <__sfputc_r+0x16>
 80130be:	290a      	cmp	r1, #10
 80130c0:	d103      	bne.n	80130ca <__sfputc_r+0x1e>
 80130c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130c6:	f000 b94b 	b.w	8013360 <__swbuf_r>
 80130ca:	6813      	ldr	r3, [r2, #0]
 80130cc:	1c58      	adds	r0, r3, #1
 80130ce:	6010      	str	r0, [r2, #0]
 80130d0:	7019      	strb	r1, [r3, #0]
 80130d2:	4608      	mov	r0, r1
 80130d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130d8:	4770      	bx	lr

080130da <__sfputs_r>:
 80130da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130dc:	4606      	mov	r6, r0
 80130de:	460f      	mov	r7, r1
 80130e0:	4614      	mov	r4, r2
 80130e2:	18d5      	adds	r5, r2, r3
 80130e4:	42ac      	cmp	r4, r5
 80130e6:	d101      	bne.n	80130ec <__sfputs_r+0x12>
 80130e8:	2000      	movs	r0, #0
 80130ea:	e007      	b.n	80130fc <__sfputs_r+0x22>
 80130ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130f0:	463a      	mov	r2, r7
 80130f2:	4630      	mov	r0, r6
 80130f4:	f7ff ffda 	bl	80130ac <__sfputc_r>
 80130f8:	1c43      	adds	r3, r0, #1
 80130fa:	d1f3      	bne.n	80130e4 <__sfputs_r+0xa>
 80130fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013100 <_vfiprintf_r>:
 8013100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013104:	460d      	mov	r5, r1
 8013106:	b09d      	sub	sp, #116	; 0x74
 8013108:	4614      	mov	r4, r2
 801310a:	4698      	mov	r8, r3
 801310c:	4606      	mov	r6, r0
 801310e:	b118      	cbz	r0, 8013118 <_vfiprintf_r+0x18>
 8013110:	6983      	ldr	r3, [r0, #24]
 8013112:	b90b      	cbnz	r3, 8013118 <_vfiprintf_r+0x18>
 8013114:	f7fd fb84 	bl	8010820 <__sinit>
 8013118:	4b89      	ldr	r3, [pc, #548]	; (8013340 <_vfiprintf_r+0x240>)
 801311a:	429d      	cmp	r5, r3
 801311c:	d11b      	bne.n	8013156 <_vfiprintf_r+0x56>
 801311e:	6875      	ldr	r5, [r6, #4]
 8013120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013122:	07d9      	lsls	r1, r3, #31
 8013124:	d405      	bmi.n	8013132 <_vfiprintf_r+0x32>
 8013126:	89ab      	ldrh	r3, [r5, #12]
 8013128:	059a      	lsls	r2, r3, #22
 801312a:	d402      	bmi.n	8013132 <_vfiprintf_r+0x32>
 801312c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801312e:	f7fd fc54 	bl	80109da <__retarget_lock_acquire_recursive>
 8013132:	89ab      	ldrh	r3, [r5, #12]
 8013134:	071b      	lsls	r3, r3, #28
 8013136:	d501      	bpl.n	801313c <_vfiprintf_r+0x3c>
 8013138:	692b      	ldr	r3, [r5, #16]
 801313a:	b9eb      	cbnz	r3, 8013178 <_vfiprintf_r+0x78>
 801313c:	4629      	mov	r1, r5
 801313e:	4630      	mov	r0, r6
 8013140:	f000 f96e 	bl	8013420 <__swsetup_r>
 8013144:	b1c0      	cbz	r0, 8013178 <_vfiprintf_r+0x78>
 8013146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013148:	07dc      	lsls	r4, r3, #31
 801314a:	d50e      	bpl.n	801316a <_vfiprintf_r+0x6a>
 801314c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013150:	b01d      	add	sp, #116	; 0x74
 8013152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013156:	4b7b      	ldr	r3, [pc, #492]	; (8013344 <_vfiprintf_r+0x244>)
 8013158:	429d      	cmp	r5, r3
 801315a:	d101      	bne.n	8013160 <_vfiprintf_r+0x60>
 801315c:	68b5      	ldr	r5, [r6, #8]
 801315e:	e7df      	b.n	8013120 <_vfiprintf_r+0x20>
 8013160:	4b79      	ldr	r3, [pc, #484]	; (8013348 <_vfiprintf_r+0x248>)
 8013162:	429d      	cmp	r5, r3
 8013164:	bf08      	it	eq
 8013166:	68f5      	ldreq	r5, [r6, #12]
 8013168:	e7da      	b.n	8013120 <_vfiprintf_r+0x20>
 801316a:	89ab      	ldrh	r3, [r5, #12]
 801316c:	0598      	lsls	r0, r3, #22
 801316e:	d4ed      	bmi.n	801314c <_vfiprintf_r+0x4c>
 8013170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013172:	f7fd fc33 	bl	80109dc <__retarget_lock_release_recursive>
 8013176:	e7e9      	b.n	801314c <_vfiprintf_r+0x4c>
 8013178:	2300      	movs	r3, #0
 801317a:	9309      	str	r3, [sp, #36]	; 0x24
 801317c:	2320      	movs	r3, #32
 801317e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013182:	f8cd 800c 	str.w	r8, [sp, #12]
 8013186:	2330      	movs	r3, #48	; 0x30
 8013188:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801334c <_vfiprintf_r+0x24c>
 801318c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013190:	f04f 0901 	mov.w	r9, #1
 8013194:	4623      	mov	r3, r4
 8013196:	469a      	mov	sl, r3
 8013198:	f813 2b01 	ldrb.w	r2, [r3], #1
 801319c:	b10a      	cbz	r2, 80131a2 <_vfiprintf_r+0xa2>
 801319e:	2a25      	cmp	r2, #37	; 0x25
 80131a0:	d1f9      	bne.n	8013196 <_vfiprintf_r+0x96>
 80131a2:	ebba 0b04 	subs.w	fp, sl, r4
 80131a6:	d00b      	beq.n	80131c0 <_vfiprintf_r+0xc0>
 80131a8:	465b      	mov	r3, fp
 80131aa:	4622      	mov	r2, r4
 80131ac:	4629      	mov	r1, r5
 80131ae:	4630      	mov	r0, r6
 80131b0:	f7ff ff93 	bl	80130da <__sfputs_r>
 80131b4:	3001      	adds	r0, #1
 80131b6:	f000 80aa 	beq.w	801330e <_vfiprintf_r+0x20e>
 80131ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131bc:	445a      	add	r2, fp
 80131be:	9209      	str	r2, [sp, #36]	; 0x24
 80131c0:	f89a 3000 	ldrb.w	r3, [sl]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	f000 80a2 	beq.w	801330e <_vfiprintf_r+0x20e>
 80131ca:	2300      	movs	r3, #0
 80131cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131d4:	f10a 0a01 	add.w	sl, sl, #1
 80131d8:	9304      	str	r3, [sp, #16]
 80131da:	9307      	str	r3, [sp, #28]
 80131dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131e0:	931a      	str	r3, [sp, #104]	; 0x68
 80131e2:	4654      	mov	r4, sl
 80131e4:	2205      	movs	r2, #5
 80131e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131ea:	4858      	ldr	r0, [pc, #352]	; (801334c <_vfiprintf_r+0x24c>)
 80131ec:	f7ec fff8 	bl	80001e0 <memchr>
 80131f0:	9a04      	ldr	r2, [sp, #16]
 80131f2:	b9d8      	cbnz	r0, 801322c <_vfiprintf_r+0x12c>
 80131f4:	06d1      	lsls	r1, r2, #27
 80131f6:	bf44      	itt	mi
 80131f8:	2320      	movmi	r3, #32
 80131fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131fe:	0713      	lsls	r3, r2, #28
 8013200:	bf44      	itt	mi
 8013202:	232b      	movmi	r3, #43	; 0x2b
 8013204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013208:	f89a 3000 	ldrb.w	r3, [sl]
 801320c:	2b2a      	cmp	r3, #42	; 0x2a
 801320e:	d015      	beq.n	801323c <_vfiprintf_r+0x13c>
 8013210:	9a07      	ldr	r2, [sp, #28]
 8013212:	4654      	mov	r4, sl
 8013214:	2000      	movs	r0, #0
 8013216:	f04f 0c0a 	mov.w	ip, #10
 801321a:	4621      	mov	r1, r4
 801321c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013220:	3b30      	subs	r3, #48	; 0x30
 8013222:	2b09      	cmp	r3, #9
 8013224:	d94e      	bls.n	80132c4 <_vfiprintf_r+0x1c4>
 8013226:	b1b0      	cbz	r0, 8013256 <_vfiprintf_r+0x156>
 8013228:	9207      	str	r2, [sp, #28]
 801322a:	e014      	b.n	8013256 <_vfiprintf_r+0x156>
 801322c:	eba0 0308 	sub.w	r3, r0, r8
 8013230:	fa09 f303 	lsl.w	r3, r9, r3
 8013234:	4313      	orrs	r3, r2
 8013236:	9304      	str	r3, [sp, #16]
 8013238:	46a2      	mov	sl, r4
 801323a:	e7d2      	b.n	80131e2 <_vfiprintf_r+0xe2>
 801323c:	9b03      	ldr	r3, [sp, #12]
 801323e:	1d19      	adds	r1, r3, #4
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	9103      	str	r1, [sp, #12]
 8013244:	2b00      	cmp	r3, #0
 8013246:	bfbb      	ittet	lt
 8013248:	425b      	neglt	r3, r3
 801324a:	f042 0202 	orrlt.w	r2, r2, #2
 801324e:	9307      	strge	r3, [sp, #28]
 8013250:	9307      	strlt	r3, [sp, #28]
 8013252:	bfb8      	it	lt
 8013254:	9204      	strlt	r2, [sp, #16]
 8013256:	7823      	ldrb	r3, [r4, #0]
 8013258:	2b2e      	cmp	r3, #46	; 0x2e
 801325a:	d10c      	bne.n	8013276 <_vfiprintf_r+0x176>
 801325c:	7863      	ldrb	r3, [r4, #1]
 801325e:	2b2a      	cmp	r3, #42	; 0x2a
 8013260:	d135      	bne.n	80132ce <_vfiprintf_r+0x1ce>
 8013262:	9b03      	ldr	r3, [sp, #12]
 8013264:	1d1a      	adds	r2, r3, #4
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	9203      	str	r2, [sp, #12]
 801326a:	2b00      	cmp	r3, #0
 801326c:	bfb8      	it	lt
 801326e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013272:	3402      	adds	r4, #2
 8013274:	9305      	str	r3, [sp, #20]
 8013276:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801335c <_vfiprintf_r+0x25c>
 801327a:	7821      	ldrb	r1, [r4, #0]
 801327c:	2203      	movs	r2, #3
 801327e:	4650      	mov	r0, sl
 8013280:	f7ec ffae 	bl	80001e0 <memchr>
 8013284:	b140      	cbz	r0, 8013298 <_vfiprintf_r+0x198>
 8013286:	2340      	movs	r3, #64	; 0x40
 8013288:	eba0 000a 	sub.w	r0, r0, sl
 801328c:	fa03 f000 	lsl.w	r0, r3, r0
 8013290:	9b04      	ldr	r3, [sp, #16]
 8013292:	4303      	orrs	r3, r0
 8013294:	3401      	adds	r4, #1
 8013296:	9304      	str	r3, [sp, #16]
 8013298:	f814 1b01 	ldrb.w	r1, [r4], #1
 801329c:	482c      	ldr	r0, [pc, #176]	; (8013350 <_vfiprintf_r+0x250>)
 801329e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132a2:	2206      	movs	r2, #6
 80132a4:	f7ec ff9c 	bl	80001e0 <memchr>
 80132a8:	2800      	cmp	r0, #0
 80132aa:	d03f      	beq.n	801332c <_vfiprintf_r+0x22c>
 80132ac:	4b29      	ldr	r3, [pc, #164]	; (8013354 <_vfiprintf_r+0x254>)
 80132ae:	bb1b      	cbnz	r3, 80132f8 <_vfiprintf_r+0x1f8>
 80132b0:	9b03      	ldr	r3, [sp, #12]
 80132b2:	3307      	adds	r3, #7
 80132b4:	f023 0307 	bic.w	r3, r3, #7
 80132b8:	3308      	adds	r3, #8
 80132ba:	9303      	str	r3, [sp, #12]
 80132bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132be:	443b      	add	r3, r7
 80132c0:	9309      	str	r3, [sp, #36]	; 0x24
 80132c2:	e767      	b.n	8013194 <_vfiprintf_r+0x94>
 80132c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80132c8:	460c      	mov	r4, r1
 80132ca:	2001      	movs	r0, #1
 80132cc:	e7a5      	b.n	801321a <_vfiprintf_r+0x11a>
 80132ce:	2300      	movs	r3, #0
 80132d0:	3401      	adds	r4, #1
 80132d2:	9305      	str	r3, [sp, #20]
 80132d4:	4619      	mov	r1, r3
 80132d6:	f04f 0c0a 	mov.w	ip, #10
 80132da:	4620      	mov	r0, r4
 80132dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132e0:	3a30      	subs	r2, #48	; 0x30
 80132e2:	2a09      	cmp	r2, #9
 80132e4:	d903      	bls.n	80132ee <_vfiprintf_r+0x1ee>
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d0c5      	beq.n	8013276 <_vfiprintf_r+0x176>
 80132ea:	9105      	str	r1, [sp, #20]
 80132ec:	e7c3      	b.n	8013276 <_vfiprintf_r+0x176>
 80132ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80132f2:	4604      	mov	r4, r0
 80132f4:	2301      	movs	r3, #1
 80132f6:	e7f0      	b.n	80132da <_vfiprintf_r+0x1da>
 80132f8:	ab03      	add	r3, sp, #12
 80132fa:	9300      	str	r3, [sp, #0]
 80132fc:	462a      	mov	r2, r5
 80132fe:	4b16      	ldr	r3, [pc, #88]	; (8013358 <_vfiprintf_r+0x258>)
 8013300:	a904      	add	r1, sp, #16
 8013302:	4630      	mov	r0, r6
 8013304:	f7fd fc7c 	bl	8010c00 <_printf_float>
 8013308:	4607      	mov	r7, r0
 801330a:	1c78      	adds	r0, r7, #1
 801330c:	d1d6      	bne.n	80132bc <_vfiprintf_r+0x1bc>
 801330e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013310:	07d9      	lsls	r1, r3, #31
 8013312:	d405      	bmi.n	8013320 <_vfiprintf_r+0x220>
 8013314:	89ab      	ldrh	r3, [r5, #12]
 8013316:	059a      	lsls	r2, r3, #22
 8013318:	d402      	bmi.n	8013320 <_vfiprintf_r+0x220>
 801331a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801331c:	f7fd fb5e 	bl	80109dc <__retarget_lock_release_recursive>
 8013320:	89ab      	ldrh	r3, [r5, #12]
 8013322:	065b      	lsls	r3, r3, #25
 8013324:	f53f af12 	bmi.w	801314c <_vfiprintf_r+0x4c>
 8013328:	9809      	ldr	r0, [sp, #36]	; 0x24
 801332a:	e711      	b.n	8013150 <_vfiprintf_r+0x50>
 801332c:	ab03      	add	r3, sp, #12
 801332e:	9300      	str	r3, [sp, #0]
 8013330:	462a      	mov	r2, r5
 8013332:	4b09      	ldr	r3, [pc, #36]	; (8013358 <_vfiprintf_r+0x258>)
 8013334:	a904      	add	r1, sp, #16
 8013336:	4630      	mov	r0, r6
 8013338:	f7fd ff06 	bl	8011148 <_printf_i>
 801333c:	e7e4      	b.n	8013308 <_vfiprintf_r+0x208>
 801333e:	bf00      	nop
 8013340:	08015eb8 	.word	0x08015eb8
 8013344:	08015ed8 	.word	0x08015ed8
 8013348:	08015e98 	.word	0x08015e98
 801334c:	0801614c 	.word	0x0801614c
 8013350:	08016156 	.word	0x08016156
 8013354:	08010c01 	.word	0x08010c01
 8013358:	080130db 	.word	0x080130db
 801335c:	08016152 	.word	0x08016152

08013360 <__swbuf_r>:
 8013360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013362:	460e      	mov	r6, r1
 8013364:	4614      	mov	r4, r2
 8013366:	4605      	mov	r5, r0
 8013368:	b118      	cbz	r0, 8013372 <__swbuf_r+0x12>
 801336a:	6983      	ldr	r3, [r0, #24]
 801336c:	b90b      	cbnz	r3, 8013372 <__swbuf_r+0x12>
 801336e:	f7fd fa57 	bl	8010820 <__sinit>
 8013372:	4b21      	ldr	r3, [pc, #132]	; (80133f8 <__swbuf_r+0x98>)
 8013374:	429c      	cmp	r4, r3
 8013376:	d12b      	bne.n	80133d0 <__swbuf_r+0x70>
 8013378:	686c      	ldr	r4, [r5, #4]
 801337a:	69a3      	ldr	r3, [r4, #24]
 801337c:	60a3      	str	r3, [r4, #8]
 801337e:	89a3      	ldrh	r3, [r4, #12]
 8013380:	071a      	lsls	r2, r3, #28
 8013382:	d52f      	bpl.n	80133e4 <__swbuf_r+0x84>
 8013384:	6923      	ldr	r3, [r4, #16]
 8013386:	b36b      	cbz	r3, 80133e4 <__swbuf_r+0x84>
 8013388:	6923      	ldr	r3, [r4, #16]
 801338a:	6820      	ldr	r0, [r4, #0]
 801338c:	1ac0      	subs	r0, r0, r3
 801338e:	6963      	ldr	r3, [r4, #20]
 8013390:	b2f6      	uxtb	r6, r6
 8013392:	4283      	cmp	r3, r0
 8013394:	4637      	mov	r7, r6
 8013396:	dc04      	bgt.n	80133a2 <__swbuf_r+0x42>
 8013398:	4621      	mov	r1, r4
 801339a:	4628      	mov	r0, r5
 801339c:	f7ff f852 	bl	8012444 <_fflush_r>
 80133a0:	bb30      	cbnz	r0, 80133f0 <__swbuf_r+0x90>
 80133a2:	68a3      	ldr	r3, [r4, #8]
 80133a4:	3b01      	subs	r3, #1
 80133a6:	60a3      	str	r3, [r4, #8]
 80133a8:	6823      	ldr	r3, [r4, #0]
 80133aa:	1c5a      	adds	r2, r3, #1
 80133ac:	6022      	str	r2, [r4, #0]
 80133ae:	701e      	strb	r6, [r3, #0]
 80133b0:	6963      	ldr	r3, [r4, #20]
 80133b2:	3001      	adds	r0, #1
 80133b4:	4283      	cmp	r3, r0
 80133b6:	d004      	beq.n	80133c2 <__swbuf_r+0x62>
 80133b8:	89a3      	ldrh	r3, [r4, #12]
 80133ba:	07db      	lsls	r3, r3, #31
 80133bc:	d506      	bpl.n	80133cc <__swbuf_r+0x6c>
 80133be:	2e0a      	cmp	r6, #10
 80133c0:	d104      	bne.n	80133cc <__swbuf_r+0x6c>
 80133c2:	4621      	mov	r1, r4
 80133c4:	4628      	mov	r0, r5
 80133c6:	f7ff f83d 	bl	8012444 <_fflush_r>
 80133ca:	b988      	cbnz	r0, 80133f0 <__swbuf_r+0x90>
 80133cc:	4638      	mov	r0, r7
 80133ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133d0:	4b0a      	ldr	r3, [pc, #40]	; (80133fc <__swbuf_r+0x9c>)
 80133d2:	429c      	cmp	r4, r3
 80133d4:	d101      	bne.n	80133da <__swbuf_r+0x7a>
 80133d6:	68ac      	ldr	r4, [r5, #8]
 80133d8:	e7cf      	b.n	801337a <__swbuf_r+0x1a>
 80133da:	4b09      	ldr	r3, [pc, #36]	; (8013400 <__swbuf_r+0xa0>)
 80133dc:	429c      	cmp	r4, r3
 80133de:	bf08      	it	eq
 80133e0:	68ec      	ldreq	r4, [r5, #12]
 80133e2:	e7ca      	b.n	801337a <__swbuf_r+0x1a>
 80133e4:	4621      	mov	r1, r4
 80133e6:	4628      	mov	r0, r5
 80133e8:	f000 f81a 	bl	8013420 <__swsetup_r>
 80133ec:	2800      	cmp	r0, #0
 80133ee:	d0cb      	beq.n	8013388 <__swbuf_r+0x28>
 80133f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80133f4:	e7ea      	b.n	80133cc <__swbuf_r+0x6c>
 80133f6:	bf00      	nop
 80133f8:	08015eb8 	.word	0x08015eb8
 80133fc:	08015ed8 	.word	0x08015ed8
 8013400:	08015e98 	.word	0x08015e98

08013404 <__ascii_wctomb>:
 8013404:	b149      	cbz	r1, 801341a <__ascii_wctomb+0x16>
 8013406:	2aff      	cmp	r2, #255	; 0xff
 8013408:	bf85      	ittet	hi
 801340a:	238a      	movhi	r3, #138	; 0x8a
 801340c:	6003      	strhi	r3, [r0, #0]
 801340e:	700a      	strbls	r2, [r1, #0]
 8013410:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013414:	bf98      	it	ls
 8013416:	2001      	movls	r0, #1
 8013418:	4770      	bx	lr
 801341a:	4608      	mov	r0, r1
 801341c:	4770      	bx	lr
	...

08013420 <__swsetup_r>:
 8013420:	4b32      	ldr	r3, [pc, #200]	; (80134ec <__swsetup_r+0xcc>)
 8013422:	b570      	push	{r4, r5, r6, lr}
 8013424:	681d      	ldr	r5, [r3, #0]
 8013426:	4606      	mov	r6, r0
 8013428:	460c      	mov	r4, r1
 801342a:	b125      	cbz	r5, 8013436 <__swsetup_r+0x16>
 801342c:	69ab      	ldr	r3, [r5, #24]
 801342e:	b913      	cbnz	r3, 8013436 <__swsetup_r+0x16>
 8013430:	4628      	mov	r0, r5
 8013432:	f7fd f9f5 	bl	8010820 <__sinit>
 8013436:	4b2e      	ldr	r3, [pc, #184]	; (80134f0 <__swsetup_r+0xd0>)
 8013438:	429c      	cmp	r4, r3
 801343a:	d10f      	bne.n	801345c <__swsetup_r+0x3c>
 801343c:	686c      	ldr	r4, [r5, #4]
 801343e:	89a3      	ldrh	r3, [r4, #12]
 8013440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013444:	0719      	lsls	r1, r3, #28
 8013446:	d42c      	bmi.n	80134a2 <__swsetup_r+0x82>
 8013448:	06dd      	lsls	r5, r3, #27
 801344a:	d411      	bmi.n	8013470 <__swsetup_r+0x50>
 801344c:	2309      	movs	r3, #9
 801344e:	6033      	str	r3, [r6, #0]
 8013450:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013454:	81a3      	strh	r3, [r4, #12]
 8013456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801345a:	e03e      	b.n	80134da <__swsetup_r+0xba>
 801345c:	4b25      	ldr	r3, [pc, #148]	; (80134f4 <__swsetup_r+0xd4>)
 801345e:	429c      	cmp	r4, r3
 8013460:	d101      	bne.n	8013466 <__swsetup_r+0x46>
 8013462:	68ac      	ldr	r4, [r5, #8]
 8013464:	e7eb      	b.n	801343e <__swsetup_r+0x1e>
 8013466:	4b24      	ldr	r3, [pc, #144]	; (80134f8 <__swsetup_r+0xd8>)
 8013468:	429c      	cmp	r4, r3
 801346a:	bf08      	it	eq
 801346c:	68ec      	ldreq	r4, [r5, #12]
 801346e:	e7e6      	b.n	801343e <__swsetup_r+0x1e>
 8013470:	0758      	lsls	r0, r3, #29
 8013472:	d512      	bpl.n	801349a <__swsetup_r+0x7a>
 8013474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013476:	b141      	cbz	r1, 801348a <__swsetup_r+0x6a>
 8013478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801347c:	4299      	cmp	r1, r3
 801347e:	d002      	beq.n	8013486 <__swsetup_r+0x66>
 8013480:	4630      	mov	r0, r6
 8013482:	f7ff fbd3 	bl	8012c2c <_free_r>
 8013486:	2300      	movs	r3, #0
 8013488:	6363      	str	r3, [r4, #52]	; 0x34
 801348a:	89a3      	ldrh	r3, [r4, #12]
 801348c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013490:	81a3      	strh	r3, [r4, #12]
 8013492:	2300      	movs	r3, #0
 8013494:	6063      	str	r3, [r4, #4]
 8013496:	6923      	ldr	r3, [r4, #16]
 8013498:	6023      	str	r3, [r4, #0]
 801349a:	89a3      	ldrh	r3, [r4, #12]
 801349c:	f043 0308 	orr.w	r3, r3, #8
 80134a0:	81a3      	strh	r3, [r4, #12]
 80134a2:	6923      	ldr	r3, [r4, #16]
 80134a4:	b94b      	cbnz	r3, 80134ba <__swsetup_r+0x9a>
 80134a6:	89a3      	ldrh	r3, [r4, #12]
 80134a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80134ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80134b0:	d003      	beq.n	80134ba <__swsetup_r+0x9a>
 80134b2:	4621      	mov	r1, r4
 80134b4:	4630      	mov	r0, r6
 80134b6:	f000 f84d 	bl	8013554 <__smakebuf_r>
 80134ba:	89a0      	ldrh	r0, [r4, #12]
 80134bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134c0:	f010 0301 	ands.w	r3, r0, #1
 80134c4:	d00a      	beq.n	80134dc <__swsetup_r+0xbc>
 80134c6:	2300      	movs	r3, #0
 80134c8:	60a3      	str	r3, [r4, #8]
 80134ca:	6963      	ldr	r3, [r4, #20]
 80134cc:	425b      	negs	r3, r3
 80134ce:	61a3      	str	r3, [r4, #24]
 80134d0:	6923      	ldr	r3, [r4, #16]
 80134d2:	b943      	cbnz	r3, 80134e6 <__swsetup_r+0xc6>
 80134d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80134d8:	d1ba      	bne.n	8013450 <__swsetup_r+0x30>
 80134da:	bd70      	pop	{r4, r5, r6, pc}
 80134dc:	0781      	lsls	r1, r0, #30
 80134de:	bf58      	it	pl
 80134e0:	6963      	ldrpl	r3, [r4, #20]
 80134e2:	60a3      	str	r3, [r4, #8]
 80134e4:	e7f4      	b.n	80134d0 <__swsetup_r+0xb0>
 80134e6:	2000      	movs	r0, #0
 80134e8:	e7f7      	b.n	80134da <__swsetup_r+0xba>
 80134ea:	bf00      	nop
 80134ec:	20000184 	.word	0x20000184
 80134f0:	08015eb8 	.word	0x08015eb8
 80134f4:	08015ed8 	.word	0x08015ed8
 80134f8:	08015e98 	.word	0x08015e98

080134fc <abort>:
 80134fc:	b508      	push	{r3, lr}
 80134fe:	2006      	movs	r0, #6
 8013500:	f000 f898 	bl	8013634 <raise>
 8013504:	2001      	movs	r0, #1
 8013506:	f7f0 fab5 	bl	8003a74 <_exit>

0801350a <__swhatbuf_r>:
 801350a:	b570      	push	{r4, r5, r6, lr}
 801350c:	460e      	mov	r6, r1
 801350e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013512:	2900      	cmp	r1, #0
 8013514:	b096      	sub	sp, #88	; 0x58
 8013516:	4614      	mov	r4, r2
 8013518:	461d      	mov	r5, r3
 801351a:	da07      	bge.n	801352c <__swhatbuf_r+0x22>
 801351c:	2300      	movs	r3, #0
 801351e:	602b      	str	r3, [r5, #0]
 8013520:	89b3      	ldrh	r3, [r6, #12]
 8013522:	061a      	lsls	r2, r3, #24
 8013524:	d410      	bmi.n	8013548 <__swhatbuf_r+0x3e>
 8013526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801352a:	e00e      	b.n	801354a <__swhatbuf_r+0x40>
 801352c:	466a      	mov	r2, sp
 801352e:	f000 f89d 	bl	801366c <_fstat_r>
 8013532:	2800      	cmp	r0, #0
 8013534:	dbf2      	blt.n	801351c <__swhatbuf_r+0x12>
 8013536:	9a01      	ldr	r2, [sp, #4]
 8013538:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801353c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013540:	425a      	negs	r2, r3
 8013542:	415a      	adcs	r2, r3
 8013544:	602a      	str	r2, [r5, #0]
 8013546:	e7ee      	b.n	8013526 <__swhatbuf_r+0x1c>
 8013548:	2340      	movs	r3, #64	; 0x40
 801354a:	2000      	movs	r0, #0
 801354c:	6023      	str	r3, [r4, #0]
 801354e:	b016      	add	sp, #88	; 0x58
 8013550:	bd70      	pop	{r4, r5, r6, pc}
	...

08013554 <__smakebuf_r>:
 8013554:	898b      	ldrh	r3, [r1, #12]
 8013556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013558:	079d      	lsls	r5, r3, #30
 801355a:	4606      	mov	r6, r0
 801355c:	460c      	mov	r4, r1
 801355e:	d507      	bpl.n	8013570 <__smakebuf_r+0x1c>
 8013560:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013564:	6023      	str	r3, [r4, #0]
 8013566:	6123      	str	r3, [r4, #16]
 8013568:	2301      	movs	r3, #1
 801356a:	6163      	str	r3, [r4, #20]
 801356c:	b002      	add	sp, #8
 801356e:	bd70      	pop	{r4, r5, r6, pc}
 8013570:	ab01      	add	r3, sp, #4
 8013572:	466a      	mov	r2, sp
 8013574:	f7ff ffc9 	bl	801350a <__swhatbuf_r>
 8013578:	9900      	ldr	r1, [sp, #0]
 801357a:	4605      	mov	r5, r0
 801357c:	4630      	mov	r0, r6
 801357e:	f7fd fa45 	bl	8010a0c <_malloc_r>
 8013582:	b948      	cbnz	r0, 8013598 <__smakebuf_r+0x44>
 8013584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013588:	059a      	lsls	r2, r3, #22
 801358a:	d4ef      	bmi.n	801356c <__smakebuf_r+0x18>
 801358c:	f023 0303 	bic.w	r3, r3, #3
 8013590:	f043 0302 	orr.w	r3, r3, #2
 8013594:	81a3      	strh	r3, [r4, #12]
 8013596:	e7e3      	b.n	8013560 <__smakebuf_r+0xc>
 8013598:	4b0d      	ldr	r3, [pc, #52]	; (80135d0 <__smakebuf_r+0x7c>)
 801359a:	62b3      	str	r3, [r6, #40]	; 0x28
 801359c:	89a3      	ldrh	r3, [r4, #12]
 801359e:	6020      	str	r0, [r4, #0]
 80135a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135a4:	81a3      	strh	r3, [r4, #12]
 80135a6:	9b00      	ldr	r3, [sp, #0]
 80135a8:	6163      	str	r3, [r4, #20]
 80135aa:	9b01      	ldr	r3, [sp, #4]
 80135ac:	6120      	str	r0, [r4, #16]
 80135ae:	b15b      	cbz	r3, 80135c8 <__smakebuf_r+0x74>
 80135b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135b4:	4630      	mov	r0, r6
 80135b6:	f000 f86b 	bl	8013690 <_isatty_r>
 80135ba:	b128      	cbz	r0, 80135c8 <__smakebuf_r+0x74>
 80135bc:	89a3      	ldrh	r3, [r4, #12]
 80135be:	f023 0303 	bic.w	r3, r3, #3
 80135c2:	f043 0301 	orr.w	r3, r3, #1
 80135c6:	81a3      	strh	r3, [r4, #12]
 80135c8:	89a0      	ldrh	r0, [r4, #12]
 80135ca:	4305      	orrs	r5, r0
 80135cc:	81a5      	strh	r5, [r4, #12]
 80135ce:	e7cd      	b.n	801356c <__smakebuf_r+0x18>
 80135d0:	080107b9 	.word	0x080107b9

080135d4 <_malloc_usable_size_r>:
 80135d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135d8:	1f18      	subs	r0, r3, #4
 80135da:	2b00      	cmp	r3, #0
 80135dc:	bfbc      	itt	lt
 80135de:	580b      	ldrlt	r3, [r1, r0]
 80135e0:	18c0      	addlt	r0, r0, r3
 80135e2:	4770      	bx	lr

080135e4 <_raise_r>:
 80135e4:	291f      	cmp	r1, #31
 80135e6:	b538      	push	{r3, r4, r5, lr}
 80135e8:	4604      	mov	r4, r0
 80135ea:	460d      	mov	r5, r1
 80135ec:	d904      	bls.n	80135f8 <_raise_r+0x14>
 80135ee:	2316      	movs	r3, #22
 80135f0:	6003      	str	r3, [r0, #0]
 80135f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135f6:	bd38      	pop	{r3, r4, r5, pc}
 80135f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80135fa:	b112      	cbz	r2, 8013602 <_raise_r+0x1e>
 80135fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013600:	b94b      	cbnz	r3, 8013616 <_raise_r+0x32>
 8013602:	4620      	mov	r0, r4
 8013604:	f000 f830 	bl	8013668 <_getpid_r>
 8013608:	462a      	mov	r2, r5
 801360a:	4601      	mov	r1, r0
 801360c:	4620      	mov	r0, r4
 801360e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013612:	f000 b817 	b.w	8013644 <_kill_r>
 8013616:	2b01      	cmp	r3, #1
 8013618:	d00a      	beq.n	8013630 <_raise_r+0x4c>
 801361a:	1c59      	adds	r1, r3, #1
 801361c:	d103      	bne.n	8013626 <_raise_r+0x42>
 801361e:	2316      	movs	r3, #22
 8013620:	6003      	str	r3, [r0, #0]
 8013622:	2001      	movs	r0, #1
 8013624:	e7e7      	b.n	80135f6 <_raise_r+0x12>
 8013626:	2400      	movs	r4, #0
 8013628:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801362c:	4628      	mov	r0, r5
 801362e:	4798      	blx	r3
 8013630:	2000      	movs	r0, #0
 8013632:	e7e0      	b.n	80135f6 <_raise_r+0x12>

08013634 <raise>:
 8013634:	4b02      	ldr	r3, [pc, #8]	; (8013640 <raise+0xc>)
 8013636:	4601      	mov	r1, r0
 8013638:	6818      	ldr	r0, [r3, #0]
 801363a:	f7ff bfd3 	b.w	80135e4 <_raise_r>
 801363e:	bf00      	nop
 8013640:	20000184 	.word	0x20000184

08013644 <_kill_r>:
 8013644:	b538      	push	{r3, r4, r5, lr}
 8013646:	4d07      	ldr	r5, [pc, #28]	; (8013664 <_kill_r+0x20>)
 8013648:	2300      	movs	r3, #0
 801364a:	4604      	mov	r4, r0
 801364c:	4608      	mov	r0, r1
 801364e:	4611      	mov	r1, r2
 8013650:	602b      	str	r3, [r5, #0]
 8013652:	f7f0 f9ff 	bl	8003a54 <_kill>
 8013656:	1c43      	adds	r3, r0, #1
 8013658:	d102      	bne.n	8013660 <_kill_r+0x1c>
 801365a:	682b      	ldr	r3, [r5, #0]
 801365c:	b103      	cbz	r3, 8013660 <_kill_r+0x1c>
 801365e:	6023      	str	r3, [r4, #0]
 8013660:	bd38      	pop	{r3, r4, r5, pc}
 8013662:	bf00      	nop
 8013664:	2000b66c 	.word	0x2000b66c

08013668 <_getpid_r>:
 8013668:	f7f0 b9ec 	b.w	8003a44 <_getpid>

0801366c <_fstat_r>:
 801366c:	b538      	push	{r3, r4, r5, lr}
 801366e:	4d07      	ldr	r5, [pc, #28]	; (801368c <_fstat_r+0x20>)
 8013670:	2300      	movs	r3, #0
 8013672:	4604      	mov	r4, r0
 8013674:	4608      	mov	r0, r1
 8013676:	4611      	mov	r1, r2
 8013678:	602b      	str	r3, [r5, #0]
 801367a:	f7f0 fa4a 	bl	8003b12 <_fstat>
 801367e:	1c43      	adds	r3, r0, #1
 8013680:	d102      	bne.n	8013688 <_fstat_r+0x1c>
 8013682:	682b      	ldr	r3, [r5, #0]
 8013684:	b103      	cbz	r3, 8013688 <_fstat_r+0x1c>
 8013686:	6023      	str	r3, [r4, #0]
 8013688:	bd38      	pop	{r3, r4, r5, pc}
 801368a:	bf00      	nop
 801368c:	2000b66c 	.word	0x2000b66c

08013690 <_isatty_r>:
 8013690:	b538      	push	{r3, r4, r5, lr}
 8013692:	4d06      	ldr	r5, [pc, #24]	; (80136ac <_isatty_r+0x1c>)
 8013694:	2300      	movs	r3, #0
 8013696:	4604      	mov	r4, r0
 8013698:	4608      	mov	r0, r1
 801369a:	602b      	str	r3, [r5, #0]
 801369c:	f7f0 fa49 	bl	8003b32 <_isatty>
 80136a0:	1c43      	adds	r3, r0, #1
 80136a2:	d102      	bne.n	80136aa <_isatty_r+0x1a>
 80136a4:	682b      	ldr	r3, [r5, #0]
 80136a6:	b103      	cbz	r3, 80136aa <_isatty_r+0x1a>
 80136a8:	6023      	str	r3, [r4, #0]
 80136aa:	bd38      	pop	{r3, r4, r5, pc}
 80136ac:	2000b66c 	.word	0x2000b66c

080136b0 <_init>:
 80136b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136b2:	bf00      	nop
 80136b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136b6:	bc08      	pop	{r3}
 80136b8:	469e      	mov	lr, r3
 80136ba:	4770      	bx	lr

080136bc <_fini>:
 80136bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136be:	bf00      	nop
 80136c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136c2:	bc08      	pop	{r3}
 80136c4:	469e      	mov	lr, r3
 80136c6:	4770      	bx	lr
